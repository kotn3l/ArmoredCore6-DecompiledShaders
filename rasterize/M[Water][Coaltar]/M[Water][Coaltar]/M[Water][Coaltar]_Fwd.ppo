#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1237;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _285 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_276 * cbMtdParam._m0[21u].x);
    float _286 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_276 * cbMtdParam._m0[21u].y);
    float _321 = (cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _276);
    float _322 = (cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _276);
    vec4 _334 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_1, SS_DiffuseMap), vec2((_321 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_322 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _339 = _334.x * cbMtdParam._m0[9u].x;
    float _340 = _334.y * cbMtdParam._m0[9u].y;
    float _341 = _334.z * cbMtdParam._m0[9u].z;
    vec4 _360 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    float _376 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_285 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_286 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3541 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _384 = (((_360.x * cbMtdParam._m0[10u].x) - _339) * _377) + _339;
    float _385 = (((_360.y * cbMtdParam._m0[10u].y) - _340) * _377) + _340;
    float _386 = (((_360.z * cbMtdParam._m0[10u].z) - _341) * _377) + _341;
    float _410 = TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _412 = _410 * (cbMtdParam._m0[17u].y + 1.0);
    float _3552 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _423 = (((cbMtdParam._m0[11u].x - _384) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.x) * (_384 - cbMtdParam._m0[11u].x))) * _413) + _384;
    float _424 = (((cbMtdParam._m0[11u].y - _385) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.y) * (_385 - cbMtdParam._m0[11u].y))) * _413) + _385;
    float _425 = (((cbMtdParam._m0[11u].z - _386) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.z) * (_386 - cbMtdParam._m0[11u].z))) * _413) + _386;
    vec4 _427 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _429 = _427.w;
    vec4 _463 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[19u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].z * _276)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[19u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].w * _276)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _465 = _463.z;
    vec4 _482 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[20u].x * TEXCOORD.x) + (cbMtdParam._m0[19u].x * _276)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[20u].y * TEXCOORD.y) + (cbMtdParam._m0[19u].y * _276)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _484 = _482.z;
    float _485 = isnan(_484) ? _465 : (isnan(_465) ? _484 : max(_465, _484));
    float _500 = (_423 * 2.0) + ((((cbMtdParam._m0[12u].x * _429) * _485) - _423) * _485);
    float _502 = (_424 * 2.0) + ((((cbMtdParam._m0[12u].y * _429) * _485) - _424) * _485);
    float _504 = (_425 * 2.0) + ((((cbMtdParam._m0[12u].z * _429) * _485) - _425) * _485);
    vec4 _517 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    float _524 = (_517.x * 2.0) + (-1.0);
    float _526 = (_517.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_524, _526), vec2(_524, _526));
    float _3568 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    vec4 _548 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _321) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _322) + cbTextureTilingScale._m0[3u].w));
    float _555 = (_548.x * 2.0) + (-1.0);
    float _556 = (_548.y * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3579 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    float _564 = cbMtdParam._m0[14u].y + _548.z;
    float _573 = _410 * (cbMtdParam._m0[16u].w + 1.0);
    float _3590 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = ((((cbMtdParam._m0[14u].z + _517.z) - _564) * _377) + _564) + ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * cbMtdParam._m0[15u].z);
    float _583 = (_377 * (_524 - _555)) + _555;
    float _584 = (_377 * (_526 - _556)) + _556;
    float _585 = (_377 * (sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) - _562)) + _562;
    vec4 _607 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _613 = (_607.x * 2.0) + (-1.0);
    float _614 = (_607.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3601 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _638 = ((((_613 - _583) + (_613 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _583)) * _413) + _583;
    float _639 = ((((_614 - _584) + (_614 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _584)) * _413) + _584;
    float _640 = (_413 * (sqrt(1.0 - (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) - _585)) + _585;
    float _660 = fma(_640, _231 * NORMAL.x, fma(_639, _238 * TANGENT.x, _638 * _225));
    float _663 = fma(_640, _231 * NORMAL.y, fma(_639, _238 * TANGENT.y, _638 * _226));
    float _666 = fma(_640, _231 * NORMAL.z, fma(_639, _238 * TANGENT.z, _638 * _227));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3612 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _674 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3634 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3645 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _760 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _769 = (_760.x * 2.0) + (-1.0);
    float _770 = (_760.y * 2.0) + (-1.0);
    float _771 = (_760.z * 2.0) + (-1.0);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _786 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _760.w;
    float _793 = (((_769 * _775) - _671) * _786) + _671;
    float _794 = (((_770 * _775) - _672) * _786) + _672;
    float _795 = (((_771 * _775) - _673) * _786) + _673;
    float _814 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, _793 * cbSceneParam._m0[5u].x));
    float _817 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, _793 * cbSceneParam._m0[6u].x));
    float _820 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, _793 * cbSceneParam._m0[7u].x));
    uint _833 = uint(roundEven(NORMAL.w)) * 13u;
    uint _835 = (_833 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_835].z;
    float _3656 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _858 = _855.x * TEXCOORD_3.w;
    float _859 = dot(vec3(_793, _794, _795), vec3(_750, _751, _752));
    float _862 = _859 * 2.0;
    float _866 = (_862 * _793) - _750;
    float _867 = (_862 * _794) - _751;
    float _868 = (_862 * _795) - _752;
    float _872 = abs(dot(vec3(_750, _751, _752), vec3(_793, _794, _795)));
    float _3689 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _873 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _881 = 10.0 / (_693 + 10.0);
    float _882 = sqrt(_674);
    float _894 = exp2((_882 * 5.0) * log2(1.0 - (_873 * 0.999000012874603271484375))) / (4.0 - (_882 * 3.0));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _965 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _969 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _994 = _926 + _793;
        float _995 = _930 + _794;
        float _996 = _934 + _795;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_793, _794, _795), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3737 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_793, _794, _795), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3770 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_793, _794, _795), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3803 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1281 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1285 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1308 = _926 + _793;
        float _1309 = _930 + _794;
        float _1310 = _934 + _795;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_793, _794, _795), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3866 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_793, _794, _795), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _3899 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_793, _794, _795), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _3932 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1237;
        _1547 = _1237;
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = _1237;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1249)) + _1249;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1250)) + _1250;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1251)) + _1251;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _866 * 0.5;
    float _1615 = _867 * 0.5;
    float _1616 = _868 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_868, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866));
        float _1744 = fma(_868, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866));
        float _1747 = fma(_868, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1775 = frontier_phi_14_12_ladder;
        }
        float _2230;
        if (_1744 > 0.0)
        {
            _2230 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2230 = frontier_phi_23_19_ladder;
        }
        float _2680;
        if (_1747 > 0.0)
        {
            _2680 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2680 = frontier_phi_37_30_ladder;
        }
        float _2682 = isnan(_2230) ? _1775 : (isnan(_1775) ? _2230 : min(_1775, _2230));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _1741) + _1730;
        float _2688 = (_2683 * _1744) + _1734;
        float _2689 = (_2683 * _1747) + _1738;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2689, cbModelParam._m0[9u].z, fma(_2688, cbModelParam._m0[9u].y, _2687 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2689, cbModelParam._m0[10u].z, fma(_2688, cbModelParam._m0[10u].y, _2687 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2689, cbModelParam._m0[11u].z, fma(_2688, cbModelParam._m0[11u].y, _2687 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_13_37_ladder = _2815.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2815.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2815.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_13_37_ladder_2;
        _1765 = frontier_phi_13_37_ladder_1;
        _1767 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_866, _867, _868), _1683);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_868, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866));
        float _1839 = fma(_868, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866));
        float _1842 = fma(_868, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866));
        float _2235;
        if (_1836 > 0.0)
        {
            _2235 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2235 = frontier_phi_25_21_ladder;
        }
        float _2706;
        if (_1839 > 0.0)
        {
            _2706 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2706 = frontier_phi_39_32_ladder;
        }
        float _2875;
        if (_1842 > 0.0)
        {
            _2875 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2875 = frontier_phi_53_48_ladder;
        }
        float _2877 = isnan(_2706) ? _2235 : (isnan(_2235) ? _2706 : min(_2235, _2706));
        float _2878 = isnan(_2875) ? _2877 : (isnan(_2877) ? _2875 : min(_2877, _2875));
        float _2882 = (_2878 * _1836) + _1825;
        float _2883 = (_2878 * _1839) + _1829;
        float _2884 = (_2878 * _1842) + _1833;
        float _2885 = _2878 * 9.9999997473787516355514526367188e-05;
        float _2886 = (-1.0) - _2885;
        float _2888 = _2885 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2884 > _2888) || ((_2884 < _2886) || ((_2883 > _2888) || ((_2883 < _2886) || ((_2882 < _2886) || (_2882 > _2888))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2884, cbModelParam._m0[17u].z, fma(_2883, cbModelParam._m0[17u].y, _2882 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2884, cbModelParam._m0[18u].z, fma(_2883, cbModelParam._m0[18u].y, _2882 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2884, cbModelParam._m0[19u].z, fma(_2883, cbModelParam._m0[19u].y, _2882 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_22_53_ladder = _3117.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3117.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3117.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_22_53_ladder_2;
        _1863 = frontier_phi_22_53_ladder;
        _1865 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_866, _867, _868), _1772);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1877 = ((((1.0 - _894) * ((_882 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_894 * _882)) * _858;
    float _1878 = _1877 * ((cbModelParam._m0[1u].w * (_1861 - _1763)) + _1763);
    float _1879 = _1877 * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1880 = _1877 * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    float _1900 = _758 / cbSceneParam._m0[86u].x;
    float _1908 = (cbSceneParam._m0[88u].y * (1.0 - _674)) + cbSceneParam._m0[88u].z;
    float _4058 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1910 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 5.0;
    float _1915 = (_881 * cbMtdParam._m0[15u].x) * dot(vec3(_793, _794, _795), vec3(1.0, 0.0, 0.0));
    vec4 _1925 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1915 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1915 + _1900) * cbSceneParam._m0[86u].x, _759), _1910).w) + _1900) * cbSceneParam._m0[86u].x, _759), _1910);
    float _1930 = _1925.w;
    float _1931 = isnan(0.5) ? _1930 : (isnan(_1930) ? 0.5 : max(_1930, 0.5));
    float _1946 = 1.0 - (_1930 / _1931);
    float _1991 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _926), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _934))).x));
    float _4074 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _926), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _934))).x));
    float _4085 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)));
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_833 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2010 = _858 + (-1.0);
    float _2013 = (cbLight._m0[_2005].x * _2010) + 1.0;
    float _2014 = (cbLight._m0[_2005].y * _2010) + 1.0;
    uint _2015 = _2004 + 5u;
    float _2021 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2025 = _2004 + 4u;
    float _2034 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2038 = _2004 | 1u;
    float _2049 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_793, _794, _795));
    float _2052 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_793, _794, _795));
    float _4106 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _4117 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.3183098733425140380859375;
    float _2059 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _2066 = ((cbLight._m0[_2015].x * _2021) * _2059) + (((cbLight._m0[_2025].x * _1998) * _2034) * _2057);
    float _2067 = ((_2021 * cbLight._m0[_2015].y) * _2059) + (((cbLight._m0[_2025].y * _1998) * _2034) * _2057);
    float _2068 = ((_2021 * cbLight._m0[_2015].z) * _2059) + (((cbLight._m0[_2025].z * _1998) * _2034) * _2057);
    uint _2070 = _2004 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _674) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_2004].x + _750;
    float _2086 = cbLight._m0[_2004].y + _751;
    float _2087 = cbLight._m0[_2004].z + _752;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2004].xyz));
    float _4128 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2099 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2100 = dot(vec3(_793, _794, _795), vec3(_2092, _2093, _2094));
    float _4150 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2092, _2093, _2094));
    float _4161 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2099 * ((_2098 * _2124) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2124) + _2084) * _2098))) * _2098;
    float _4172 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2151 = _2004 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _674) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_2038].x + _750;
    float _2165 = cbLight._m0[_2038].y + _751;
    float _2166 = cbLight._m0[_2038].z + _752;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2038].xyz));
    float _4183 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2178 = dot(vec3(_793, _794, _795), vec3(_2171, _2172, _2173));
    float _4194 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2171, _2172, _2173));
    float _4205 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2199 = (exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2200 = 1.0 - _2163;
    float _2210 = (0.5 / (((_2099 * ((_2177 * _2200) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2200) + _2163) * _2177))) * _2177;
    float _4216 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2222 = (((_2199 * cbLight._m0[_2151].x) * _2212) * _2021) + ((((cbLight._m0[_2070].x * _1998) * _2123) * _2137) * _2034);
    float _2223 = (((_2199 * cbLight._m0[_2151].y) * _2212) * _2021) + ((((cbLight._m0[_2070].y * _1998) * _2123) * _2137) * _2034);
    float _2224 = (((_2199 * cbLight._m0[_2151].z) * _2212) * _2021) + ((((cbLight._m0[_2070].z * _1998) * _2123) * _2137) * _2034);
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_2002.y == 0u)
    {
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2279;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2279;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2279;
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.x;
        uint _2306 = uint((float(_2294.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2295))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2295)));
        float _2316 = (log2(_2282 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2317 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        uint _2320 = uint(isnan(14.0) ? _2317 : (isnan(_2317) ? 14.0 : min(_2317, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2320 << 2u) + (_2306 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2294.z;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
        }
        else
        {
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2759)
                {
                    frontier_phi_50_pred = _2746;
                    frontier_phi_50_pred_1 = _2748;
                    frontier_phi_50_pred_2 = _2747;
                    frontier_phi_50_pred_3 = _2745;
                    frontier_phi_50_pred_4 = _2744;
                    frontier_phi_50_pred_5 = _2743;
                }
                else
                {
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    uint _2924;
                    _2918 = _2743;
                    _2919 = _2744;
                    _2920 = _2745;
                    _2921 = _2746;
                    _2922 = _2747;
                    _2923 = _2748;
                    _2924 = _2758;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    for (;;)
                    {
                        uint _2928 = uint(findLSB(_2924)) + (_2749 << 5u);
                        uint _2925 = (_2924 + 4294967295u) & _2924;
                        uint _2930 = _2928 * 48u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2950 = (_2928 * 48u) + 4u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 3u)).x));
                        uint _2969 = (_2928 * 48u) + 8u;
                        vec3 _2980 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x));
                        float _2984 = _2944.x - _2280;
                        float _2985 = _2944.y - _2281;
                        float _2986 = _2944.z - _2282;
                        float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                        float _2990 = inversesqrt(_2987);
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _2994 = dot(vec3(_814, _817, _820), vec3(_2991, _2992, _2993));
                        float _2999 = 1.0 - (_2987 * _2944.w);
                        float _4237 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _3001 = sqrt(_2987) * _2963.w;
                        float _3004 = 1.39999997615814208984375 / (_3001 + 1.39999997615814208984375);
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2994) + _3005;
                        float _3011 = _3001 * _3001;
                        float _3015 = ((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _3000) / ((_3011 * 0.699999988079071044921875) + 1.0);
                        float _3019 = (-0.0) - _2280;
                        float _3020 = (-0.0) - _2281;
                        float _3021 = (-0.0) - _2282;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3036 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                        float _3037 = 1.0 - _882;
                        float _3044 = sqrt(1.0 - ((1.0 - (_3037 * _3037)) * (1.0 - (_3036 * _3036))));
                        float _3045 = _3044 * _3044;
                        float _3046 = _3045 * _3045;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3049 = _3028 + _2993;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3057 = dot(vec3(_814, _817, _820), vec3(_3026, _3027, _3028));
                        float _4253 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _3061 = dot(vec3(_814, _817, _820), vec3(_3053 * _3047, _3053 * _3048, _3053 * _3049));
                        float _4264 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _3068 = ((_3064 * _3064) * (_3046 + (-1.0))) + 1.0;
                        float _3069 = _3004 * _3045;
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _2994) + _3070;
                        float _4275 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _3075 = 1.0 - _3045;
                        float _3085 = (0.5 / (((_3074 * ((_3060 * _3075) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_3074 * _3075) + _3045) * _3060))) * _3074;
                        float _4286 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3096 = (((_3046 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_3068 * _3068) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125))) * _3000;
                        _2827 = (_3015 * _2963.x) + _2921;
                        _2828 = (_3015 * _2963.y) + _2922;
                        _2829 = (_3015 * _2963.z) + _2923;
                        _2824 = (_3096 * _2980.x) + _2918;
                        _2825 = (_3096 * _2980.y) + _2919;
                        _2826 = (_3096 * _2980.z) + _2920;
                        if (_2925 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2918 = _2824;
                            _2919 = _2825;
                            _2920 = _2826;
                            _2921 = _2827;
                            _2922 = _2828;
                            _2923 = _2829;
                            _2924 = _2925;
                        }
                    }
                    frontier_phi_50_pred = _2827;
                    frontier_phi_50_pred_1 = _2829;
                    frontier_phi_50_pred_2 = _2828;
                    frontier_phi_50_pred_3 = _2826;
                    frontier_phi_50_pred_4 = _2825;
                    frontier_phi_50_pred_5 = _2824;
                }
                _2543 = frontier_phi_50_pred;
                _2547 = frontier_phi_50_pred_1;
                _2545 = frontier_phi_50_pred_2;
                _2541 = frontier_phi_50_pred_3;
                _2539 = frontier_phi_50_pred_4;
                _2537 = frontier_phi_50_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2537;
                    _2744 = _2539;
                    _2745 = _2541;
                    _2746 = _2543;
                    _2747 = _2545;
                    _2748 = _2547;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
        }
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.z;
        uint _2553 = (_2551 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2553) & _2326) == 0u)
        {
            _2711 = _2536;
            _2713 = _2538;
            _2715 = _2540;
            _2717 = _2542;
            _2719 = _2544;
            _2721 = _2546;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
            float _2737 = _2736 * _2280;
            float _2738 = _2736 * _2281;
            float _2739 = _2736 * _2282;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2553 < ((_2551 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2901 = _2536;
                float _2902 = _2538;
                float _2903 = _2540;
                float _2904 = _2542;
                float _2905 = _2544;
                float _2906 = _2546;
                uint _2907 = _2553;
                uint _2916;
                bool _2917;
                for (;;)
                {
                    _2916 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                    _2917 = _2916 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2917)
                    {
                        frontier_phi_59_pred = _2906;
                        frontier_phi_59_pred_1 = _2905;
                        frontier_phi_59_pred_2 = _2904;
                        frontier_phi_59_pred_3 = _2903;
                        frontier_phi_59_pred_4 = _2902;
                        frontier_phi_59_pred_5 = _2901;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3135 = _2901;
                        float _3136 = _2902;
                        float _3137 = _2903;
                        float _3138 = _2904;
                        float _3139 = _2905;
                        float _3140 = _2906;
                        uint _3141 = _2916;
                        uint _3142;
                        vec4 _3167;
                        float _3168;
                        vec4 _3183;
                        vec3 _3195;
                        vec4 _3210;
                        vec4 _3225;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3152 = ((_2907 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3141));
                            _3142 = (_3141 + 4294967295u) & _3141;
                            uint _3154 = _3152 * 40u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            _3168 = _3167.w;
                            uint _3170 = (_3152 * 40u) + 4u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3152 * 40u) + 8u;
                            _3195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x));
                            uint _3197 = (_3152 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3152 * 40u) + 20u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3152 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3152 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_2282, _3259.z, fma(_2281, _3259.y, _3259.x * _2280)) + _3259.w;
                            _3272 = !((fma(_2282, _3240.z, fma(_2281, _3240.y, _3240.x * _2280)) + _3240.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3167.x - _2280;
                                float _3300 = _3167.y - _2281;
                                float _3301 = _3167.z - _2282;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3168 * _3168));
                                float _4297 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3317 = sqrt(_3302) * _3183.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_814, _817, _820))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_2282, _3210.z, fma(_2281, _3210.y, _3210.x * _2280)) + _3210.w) / _3271;
                                float _3331 = (fma(_2282, _3225.z, fma(_2281, _3225.y, _3225.x * _2280)) + _3225.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4313 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _882;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2737;
                                float _3361 = _3307 - _2738;
                                float _3362 = _3308 - _2739;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_814, _817, _820), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4324 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3374 = dot(vec3(_814, _817, _820), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4335 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_814, _817, _820), vec3(_3306, _3307, _3308))) + _3383;
                                float _4346 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4357 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3337 * _3183.z;
                                frontier_phi_65_pred_1 = _3337 * _3183.y;
                                frontier_phi_65_pred_2 = _3337 * _3183.x;
                                frontier_phi_65_pred_3 = _3411 * _3195.z;
                                frontier_phi_65_pred_4 = _3411 * _3195.y;
                                frontier_phi_65_pred_5 = _3411 * _3195.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_65_pred;
                            _3419 = frontier_phi_65_pred_1;
                            _3418 = frontier_phi_65_pred_2;
                            _3417 = frontier_phi_65_pred_3;
                            _3416 = frontier_phi_65_pred_4;
                            _3415 = frontier_phi_65_pred_5;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            _3122 = _3415 + _3135;
                            _3123 = _3416 + _3136;
                            _3124 = _3417 + _3137;
                            if (_3142 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3142;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3127;
                        frontier_phi_59_pred_1 = _3126;
                        frontier_phi_59_pred_2 = _3125;
                        frontier_phi_59_pred_3 = _3124;
                        frontier_phi_59_pred_4 = _3123;
                        frontier_phi_59_pred_5 = _3122;
                    }
                    _2722 = frontier_phi_59_pred;
                    _2720 = frontier_phi_59_pred_1;
                    _2718 = frontier_phi_59_pred_2;
                    _2716 = frontier_phi_59_pred_3;
                    _2714 = frontier_phi_59_pred_4;
                    _2712 = frontier_phi_59_pred_5;
                    uint _2908 = _2907 + 1u;
                    if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2901 = _2712;
                        _2902 = _2714;
                        _2903 = _2716;
                        _2904 = _2718;
                        _2905 = _2720;
                        _2906 = _2722;
                        _2907 = _2908;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2718;
                frontier_phi_41_42_ladder_1 = _2722;
                frontier_phi_41_42_ladder_2 = _2720;
                frontier_phi_41_42_ladder_3 = _2716;
                frontier_phi_41_42_ladder_4 = _2714;
                frontier_phi_41_42_ladder_5 = _2712;
            }
            else
            {
                frontier_phi_41_42_ladder = _2542;
                frontier_phi_41_42_ladder_1 = _2546;
                frontier_phi_41_42_ladder_2 = _2544;
                frontier_phi_41_42_ladder_3 = _2540;
                frontier_phi_41_42_ladder_4 = _2538;
                frontier_phi_41_42_ladder_5 = _2536;
            }
            _2711 = frontier_phi_41_42_ladder_5;
            _2713 = frontier_phi_41_42_ladder_4;
            _2715 = frontier_phi_41_42_ladder_3;
            _2717 = frontier_phi_41_42_ladder;
            _2719 = frontier_phi_41_42_ladder_2;
            _2721 = frontier_phi_41_42_ladder_1;
        }
        float _2726 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
        _2339 = (_2726 * _2717) + _2066;
        _2341 = (_2726 * _2719) + _2067;
        _2343 = (_2726 * _2721) + _2068;
        _2345 = ((_2711 * 0.039999999105930328369140625) * _2726) + _2222;
        _2347 = ((_2713 * 0.039999999105930328369140625) * _2726) + _2223;
        _2349 = ((_2715 * 0.039999999105930328369140625) * _2726) + _2224;
    }
    else
    {
        _2339 = _2066;
        _2341 = _2067;
        _2343 = _2068;
        _2345 = _2222;
        _2347 = _2223;
        _2349 = _2224;
    }
    float _2369 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2370 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2371 = cbSceneParam._m0[86u].x * ((_758 / cbSceneParam._m0[86u].x) + ((_881 * cbMtdParam._m0[15u].w) * dot(vec3(_793, _794, _795), vec3(_225, _226, _227))));
    float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
    float _2373 = isnan(_2370) ? _759 : (isnan(_759) ? _2370 : min(_759, _2370));
    vec4 _2375 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2372, _2373), 0.0);
    float _2377 = _2375.x;
    bool _2398 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2377)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2377))) > _693;
    float _2399 = _2398 ? _2372 : _758;
    float _2400 = _2398 ? _2373 : _759;
    vec4 _2402 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2399, _2400));
    vec4 _2407 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2399, _2400));
    float _2409 = _2407.x;
    float _2429 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2409)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2409))) - _693;
    bool _2438 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2442 = (isnan(_2429) ? 0.0 : (isnan(0.0) ? _2429 : max(0.0, _2429))) * (-1.44269502162933349609375);
    float _4388 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4399 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4410 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2469 = 0.959999978542327880859375 - (exp2(log2(1.0 - _873) * 5.0) * 0.959999978542327880859375);
    float _2472 = ((_2402.x * _2469) * exp2(_2442 * (_2438 ? 0.0 : (cbMtdParam._m0[25u].x + cbMtdParam._m0[24u].y)))) * cbSceneParam._m0[72u].w;
    float _2475 = ((_2402.y * _2469) * exp2(_2442 * (_2438 ? 0.0 : (cbMtdParam._m0[25u].y + cbMtdParam._m0[24u].z)))) * cbSceneParam._m0[72u].w;
    float _2478 = ((_2402.z * _2469) * exp2(_2442 * (_2438 ? 0.0 : (cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].w)))) * cbSceneParam._m0[72u].w;
    float _2499 = _758 / cbSceneParam._m0[86u].x;
    float _2500 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2514 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2499, _2500, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2516 = _2514.x;
    float _2517 = _2514.y;
    float _2518 = _2514.z;
    float _2519 = _2514.w;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2561 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2562 = _2561 / _693;
        float _2573 = _2562 * _743;
        float _2574 = _744 * _2562;
        float _2575 = (-0.0) - _2574;
        float _2576 = _2562 * _745;
        float _2578 = (cbSceneParam._m0[77u].w * _2575) / _2561;
        float _2579 = _2578 + cbSceneParam._m0[79u].w;
        float _2580 = cbSceneParam._m0[79u].w - _2574;
        float _2586 = sqrt(((_2573 * _2573) + (_2574 * _2574)) + (_2576 * _2576));
        float _2589 = (1.0 - (cbSceneParam._m0[77u].w / _2561)) * _2586;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2596 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2837;
        if (abs((_2575 - _2578) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2837 = ((((_2579 > 0.0) ? exp2(_2595 * _2579) : (2.0 - exp2(_2596 * _2579))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2589;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : max(_2579, _2580));
            float _2774 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : min(_2579, _2580));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2837 = ((abs(_2586 / _2575) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2596 * _2783) - exp2(_2596 * _2784)) * _2772))) + (_2589 * cbSceneParam._m0[80u].z);
        }
        vec4 _2839 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2499, _2500, 1.0), 0.0);
        float _2848 = exp2((_2837 * (-1.44269502162933349609375)) * (1.0 - _2839.w));
        float _2849 = log2(_2848);
        float _2865 = log2(_2519);
        _2598 = (exp2(_2865 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].x)) * _2839.x) / cbSceneParam._m0[78u].x)) + _2516;
        _2600 = (exp2(_2865 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].y)) * _2839.y) / cbSceneParam._m0[78u].y)) + _2517;
        _2602 = (exp2(_2865 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].z)) * _2839.z) / cbSceneParam._m0[78u].z)) + _2518;
        _2604 = _2848 * _2519;
    }
    else
    {
        _2598 = _2516;
        _2600 = _2517;
        _2602 = _2518;
        _2604 = _2519;
    }
    bool _2616 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2617 = log2(_2604);
    float _2624 = exp2(_2617 * cbSceneParam._m0[78u].x) * ((_2472 + (((((_1877 * (_1925.x / _1931)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1672) * _1946)) + _2345) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2339 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _858))) - _2472) * cbMtdParam._m0[16u].x));
    float _2625 = exp2(_2617 * cbSceneParam._m0[78u].y) * ((_2475 + (((((_1877 * (_1925.y / _1931)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1672) * _1946)) + _2347) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2341 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _858))) - _2475) * cbMtdParam._m0[16u].x));
    float _2626 = exp2(_2617 * cbSceneParam._m0[78u].z) * ((_2478 + (((((_1877 * (_1925.z / _1931)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1672) * _1946)) + _2349) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2343 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _858))) - _2478) * cbMtdParam._m0[16u].x));
    vec4 _2634 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_758, _759));
    float _2636 = _2634.x;
    float _2657 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2636)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2636))) - _693) * cbMtdParam._m0[15u].y;
    float _4461 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2659 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * cbInstanceData._m0[_833 + 6u].w;
    float _2668 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2668 * (_2616 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.y = _2668 * (_2616 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.z = _2668 * (_2616 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.w = _2659;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2659;
}


