#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3640;
float _3641;
float _3642;
float _3643;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _289 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_280 * cbMtdParam._m0[21u].x);
    float _290 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_280 * cbMtdParam._m0[21u].y);
    float _325 = (cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _280);
    float _326 = (cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _280);
    vec4 _338 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_1, SS_DiffuseMap), vec2((_325 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_326 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _343 = _338.x * cbMtdParam._m0[9u].x;
    float _344 = _338.y * cbMtdParam._m0[9u].y;
    float _345 = _338.z * cbMtdParam._m0[9u].z;
    vec4 _364 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    float _380 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_289 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_290 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3652 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _388 = (((_364.x * cbMtdParam._m0[10u].x) - _343) * _381) + _343;
    float _389 = (((_364.y * cbMtdParam._m0[10u].y) - _344) * _381) + _344;
    float _390 = (((_364.z * cbMtdParam._m0[10u].z) - _345) * _381) + _345;
    float _414 = TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _416 = _414 * (cbMtdParam._m0[17u].y + 1.0);
    float _3663 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _427 = (((cbMtdParam._m0[11u].x - _388) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.x) * (_388 - cbMtdParam._m0[11u].x))) * _417) + _388;
    float _428 = (((cbMtdParam._m0[11u].y - _389) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.y) * (_389 - cbMtdParam._m0[11u].y))) * _417) + _389;
    float _429 = (((cbMtdParam._m0[11u].z - _390) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.z) * (_390 - cbMtdParam._m0[11u].z))) * _417) + _390;
    vec4 _431 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _433 = _431.w;
    vec4 _467 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[19u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].z * _280)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[19u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].w * _280)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _469 = _467.z;
    vec4 _486 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[20u].x * TEXCOORD.x) + (cbMtdParam._m0[19u].x * _280)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[20u].y * TEXCOORD.y) + (cbMtdParam._m0[19u].y * _280)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _488 = _486.z;
    float _489 = isnan(_488) ? _469 : (isnan(_469) ? _488 : max(_469, _488));
    float _504 = (_427 * 2.0) + ((((cbMtdParam._m0[12u].x * _433) * _489) - _427) * _489);
    float _506 = (_428 * 2.0) + ((((cbMtdParam._m0[12u].y * _433) * _489) - _428) * _489);
    float _508 = (_429 * 2.0) + ((((cbMtdParam._m0[12u].z * _433) * _489) - _429) * _489);
    vec4 _521 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    float _528 = (_521.x * 2.0) + (-1.0);
    float _530 = (_521.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_528, _530), vec2(_528, _530));
    float _3679 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    vec4 _552 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _325) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _326) + cbTextureTilingScale._m0[3u].w));
    float _559 = (_552.x * 2.0) + (-1.0);
    float _560 = (_552.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3690 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    float _568 = cbMtdParam._m0[14u].y + _552.z;
    float _577 = _414 * (cbMtdParam._m0[16u].w + 1.0);
    float _3701 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = ((((cbMtdParam._m0[14u].z + _521.z) - _568) * _381) + _568) + ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * cbMtdParam._m0[15u].z);
    float _587 = (_381 * (_528 - _559)) + _559;
    float _588 = (_381 * (_530 - _560)) + _560;
    float _589 = (_381 * (sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) - _566)) + _566;
    vec4 _611 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _617 = (_611.x * 2.0) + (-1.0);
    float _618 = (_611.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3712 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _642 = ((((_617 - _587) + (_617 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _587)) * _417) + _587;
    float _643 = ((((_618 - _588) + (_618 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _588)) * _417) + _588;
    float _644 = (_417 * (sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) - _589)) + _589;
    float _664 = fma(_644, _235 * NORMAL.x, fma(_643, _242 * TANGENT.x, _642 * _229));
    float _667 = fma(_644, _235 * NORMAL.y, fma(_643, _242 * TANGENT.y, _642 * _230));
    float _670 = fma(_644, _235 * NORMAL.z, fma(_643, _242 * TANGENT.z, _642 * _231));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3723 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _678 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3745 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3756 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _747 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _737);
    float _748 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _737);
    float _749 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _737);
    float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
    float _754 = _747 * _753;
    float _755 = _748 * _753;
    float _756 = _749 * _753;
    vec4 _761 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _763 = _761.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _962 = sqrt(((_747 * _747) + (_748 * _748)) + (_749 * _749));
        float _968 = (cbMatDynParam._m0[5u].x * _962) + cbMatDynParam._m0[5u].y;
        float _3767 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _973 = (cbMatDynParam._m0[5u].z * _962) + cbMatDynParam._m0[5u].w;
        float _3778 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) - _969)) + _969) < ((_763 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _778 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _787 = (_778.x * 2.0) + (-1.0);
    float _788 = (_778.y * 2.0) + (-1.0);
    float _789 = (_778.z * 2.0) + (-1.0);
    float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
    float _804 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _778.w;
    float _811 = (((_787 * _793) - _675) * _804) + _675;
    float _812 = (((_788 * _793) - _676) * _804) + _676;
    float _813 = (((_789 * _793) - _677) * _804) + _677;
    float _831 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, _811 * cbSceneParam._m0[5u].x));
    float _834 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, _811 * cbSceneParam._m0[6u].x));
    float _837 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, _811 * cbSceneParam._m0[7u].x));
    uint _850 = uint(roundEven(NORMAL.w)) * 13u;
    uint _851 = _850 + 9u;
    uint _852 = _851 + uint(cbMatDynParam._m0[0u].w);
    float _858 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_852].x;
    float _859 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_852].y;
    float _860 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_852].z;
    float _3789 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    vec4 _872 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _875 = _872.x * TEXCOORD_3.w;
    float _876 = dot(vec3(_811, _812, _813), vec3(_754, _755, _756));
    float _879 = _876 * 2.0;
    float _883 = (_879 * _811) - _754;
    float _884 = (_879 * _812) - _755;
    float _885 = (_879 * _813) - _756;
    float _889 = abs(dot(vec3(_754, _755, _756), vec3(_811, _812, _813)));
    float _3822 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _890 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _898 = 10.0 / (_697 + 10.0);
    float _899 = sqrt(_678);
    float _911 = exp2((_899 * 5.0) * log2(1.0 - (_890 * 0.999000012874603271484375))) / (4.0 - (_899 * 3.0));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _1010 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _1014 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1039 = _943 + _811;
        float _1040 = _947 + _812;
        float _1041 = _951 + _813;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_811, _812, _813), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3870 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_811, _812, _813), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3903 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_811, _812, _813), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3936 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1329 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1333 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1356 = _943 + _811;
        float _1357 = _947 + _812;
        float _1358 = _951 + _813;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_811, _812, _813), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3999 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_811, _812, _813), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4032 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_811, _812, _813), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4065 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = _1282;
        _1604 = _1282;
        _1605 = _1282;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1294)) + _1294;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _883 * 0.5;
    float _1663 = _884 * 0.5;
    float _1664 = _885 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1705;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1716;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1707 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1720 = (_1716 * cbModelParam._m0[1u].x) + (_1705 * (1.0 - cbModelParam._m0[1u].x));
    float _1730 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1730 : min(cbModelParam._m0[25u].z, _1730));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_885, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883));
        float _1792 = fma(_885, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883));
        float _1795 = fma(_885, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1823 = frontier_phi_17_15_ladder;
        }
        float _2278;
        if (_1792 > 0.0)
        {
            _2278 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2278 = frontier_phi_26_22_ladder;
        }
        float _2736;
        if (_1795 > 0.0)
        {
            _2736 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2736 = frontier_phi_40_33_ladder;
        }
        float _2738 = isnan(_2278) ? _1823 : (isnan(_1823) ? _2278 : min(_1823, _2278));
        float _2739 = isnan(_2736) ? _2738 : (isnan(_2738) ? _2736 : min(_2738, _2736));
        float _2743 = (_2739 * _1789) + _1778;
        float _2744 = (_2739 * _1792) + _1782;
        float _2745 = (_2739 * _1795) + _1786;
        float _2746 = _2739 * 9.9999997473787516355514526367188e-05;
        float _2747 = (-1.0) - _2746;
        float _2749 = _2746 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2745 > _2749) || ((_2745 < _2747) || ((_2744 > _2749) || ((_2744 < _2747) || ((_2743 < _2747) || (_2743 > _2749))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2745, cbModelParam._m0[9u].z, fma(_2744, cbModelParam._m0[9u].y, _2743 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2745, cbModelParam._m0[10u].z, fma(_2744, cbModelParam._m0[10u].y, _2743 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2745, cbModelParam._m0[11u].z, fma(_2744, cbModelParam._m0[11u].y, _2743 * cbModelParam._m0[11u].x))), _1731);
            frontier_phi_16_40_ladder = _2887.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2887.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2887.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_16_40_ladder_2;
        _1813 = frontier_phi_16_40_ladder_1;
        _1815 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_883, _884, _885), _1731);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_885, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883));
        float _1887 = fma(_885, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883));
        float _1890 = fma(_885, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883));
        float _2283;
        if (_1884 > 0.0)
        {
            _2283 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2283 = frontier_phi_28_24_ladder;
        }
        float _2762;
        if (_1887 > 0.0)
        {
            _2762 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2762 = frontier_phi_42_35_ladder;
        }
        float _2952;
        if (_1890 > 0.0)
        {
            _2952 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2952 = frontier_phi_60_53_ladder;
        }
        float _2954 = isnan(_2762) ? _2283 : (isnan(_2283) ? _2762 : min(_2283, _2762));
        float _2955 = isnan(_2952) ? _2954 : (isnan(_2954) ? _2952 : min(_2954, _2952));
        float _2959 = (_2955 * _1884) + _1873;
        float _2960 = (_2955 * _1887) + _1877;
        float _2961 = (_2955 * _1890) + _1881;
        float _2962 = _2955 * 9.9999997473787516355514526367188e-05;
        float _2963 = (-1.0) - _2962;
        float _2965 = _2962 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2961 > _2965) || ((_2961 < _2963) || ((_2960 > _2965) || ((_2960 < _2963) || ((_2959 < _2963) || (_2959 > _2965))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3203 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2961, cbModelParam._m0[17u].z, fma(_2960, cbModelParam._m0[17u].y, _2959 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2961, cbModelParam._m0[18u].z, fma(_2960, cbModelParam._m0[18u].y, _2959 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2961, cbModelParam._m0[19u].z, fma(_2960, cbModelParam._m0[19u].y, _2959 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_25_60_ladder = _3203.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3203.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3203.y * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_25_60_ladder;
        _1911 = frontier_phi_25_60_ladder_2;
        _1913 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_883, _884, _885), _1820);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1925 = ((((1.0 - _911) * ((_899 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_911 * _899)) * _875;
    float _1926 = _1925 * ((cbModelParam._m0[1u].w * (_1909 - _1811)) + _1811);
    float _1927 = _1925 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1928 = _1925 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    float _1948 = _775 / cbSceneParam._m0[86u].x;
    float _1956 = (cbSceneParam._m0[88u].y * (1.0 - _678)) + cbSceneParam._m0[88u].z;
    float _4191 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1958 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 5.0;
    float _1963 = (_898 * cbMtdParam._m0[15u].x) * dot(vec3(_811, _812, _813), vec3(1.0, 0.0, 0.0));
    vec4 _1973 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1963 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1963 + _1948) * cbSceneParam._m0[86u].x, _776), _1958).w) + _1948) * cbSceneParam._m0[86u].x, _776), _1958);
    float _1978 = _1973.w;
    float _1979 = isnan(0.5) ? _1978 : (isnan(_1978) ? 0.5 : max(_1978, 0.5));
    float _1994 = 1.0 - (_1978 / _1979);
    float _2039 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _943), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _951))).x));
    float _4207 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _943), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _951))).x));
    float _4218 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)));
    uvec4 _2050 = floatBitsToUint(cbInstanceData._m0[_850 + 5u]);
    uint _2052 = _2050.x * 14u;
    uint _2053 = _2052 + 13u;
    float _2058 = _875 + (-1.0);
    float _2061 = (cbLight._m0[_2053].x * _2058) + 1.0;
    float _2062 = (cbLight._m0[_2053].y * _2058) + 1.0;
    uint _2063 = _2052 + 5u;
    float _2069 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2073 = _2052 + 4u;
    float _2082 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2086 = _2052 | 1u;
    float _2097 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_811, _812, _813));
    float _2100 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_811, _812, _813));
    float _4239 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _4250 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2105 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2107 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2114 = ((cbLight._m0[_2063].x * _2069) * _2107) + (((cbLight._m0[_2073].x * _2046) * _2082) * _2105);
    float _2115 = ((_2069 * cbLight._m0[_2063].y) * _2107) + (((cbLight._m0[_2073].y * _2046) * _2082) * _2105);
    float _2116 = ((_2069 * cbLight._m0[_2063].z) * _2107) + (((cbLight._m0[_2073].z * _2046) * _2082) * _2105);
    uint _2118 = _2052 + 8u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _678) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_2052].x + _754;
    float _2134 = cbLight._m0[_2052].y + _755;
    float _2135 = cbLight._m0[_2052].z + _756;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2052].xyz));
    float _4261 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2147 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2148 = dot(vec3(_811, _812, _813), vec3(_2140, _2141, _2142));
    float _4283 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2140, _2141, _2142));
    float _4294 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2132 * _2132;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2172 = 1.0 - _2132;
    float _2183 = (0.5 / (((_2147 * ((_2146 * _2172) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2172) + _2132) * _2146))) * _2146;
    float _4305 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    uint _2199 = _2052 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _678) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2086].x + _754;
    float _2213 = cbLight._m0[_2086].y + _755;
    float _2214 = cbLight._m0[_2086].z + _756;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2086].xyz));
    float _4316 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2226 = dot(vec3(_811, _812, _813), vec3(_2219, _2220, _2221));
    float _4327 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2219, _2220, _2221));
    float _4338 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2248 = 1.0 - _2211;
    float _2258 = (0.5 / (((_2147 * ((_2225 * _2248) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2248) + _2211) * _2225))) * _2225;
    float _4349 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2270 = (((_2247 * cbLight._m0[_2199].x) * _2260) * _2069) + ((((cbLight._m0[_2118].x * _2046) * _2171) * _2185) * _2082);
    float _2271 = (((_2247 * cbLight._m0[_2199].y) * _2260) * _2069) + ((((cbLight._m0[_2118].y * _2046) * _2171) * _2185) * _2082);
    float _2272 = (((_2247 * cbLight._m0[_2199].z) * _2260) * _2069) + ((((cbLight._m0[_2118].z * _2046) * _2171) * _2185) * _2082);
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    if (_2050.y == 0u)
    {
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2327;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2327;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2327;
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.x;
        uint _2354 = uint((float(_2342.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2343))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2343)));
        float _2364 = (log2(_2330 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2365 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        uint _2368 = uint(isnan(14.0) ? _2365 : (isnan(_2365) ? 14.0 : min(_2365, 14.0)));
        uvec4 _2373 = texelFetch(g_lightClusterGridBuffer, int(((_2368 << 2u) + (_2354 << 6u)) >> 2u));
        uint _2374 = _2373.x;
        uint _2375 = _2342.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2375 >> 4u) & 15u)) + 4294967295u) & _2374) == 0u) || ((_2375 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2815)
                {
                    frontier_phi_55_pred = _2803;
                    frontier_phi_55_pred_1 = _2804;
                    frontier_phi_55_pred_2 = _2802;
                    frontier_phi_55_pred_3 = _2801;
                    frontier_phi_55_pred_4 = _2800;
                    frontier_phi_55_pred_5 = _2799;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2799;
                    _2996 = _2800;
                    _2997 = _2801;
                    _2998 = _2802;
                    _2999 = _2803;
                    _3000 = _2804;
                    _3001 = _2814;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2805 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _2328;
                        float _3062 = _3021.y - _2329;
                        float _3063 = _3021.z - _2330;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_831, _834, _837), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4370 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _2328;
                        float _3097 = (-0.0) - _2329;
                        float _3098 = (-0.0) - _2330;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3113 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3114 = 1.0 - _899;
                        float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                        float _3122 = _3121 * _3121;
                        float _3123 = _3122 * _3122;
                        float _3124 = _3103 + _3068;
                        float _3125 = _3104 + _3069;
                        float _3126 = _3105 + _3070;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3134 = dot(vec3(_831, _834, _837), vec3(_3103, _3104, _3105));
                        float _4386 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3137 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3138 = dot(vec3(_831, _834, _837), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                        float _4397 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                        float _3146 = _3081 * _3122;
                        float _3147 = _3146 * _3146;
                        float _3150 = ((1.0 - _3147) * _3071) + _3147;
                        float _4408 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3152 = 1.0 - _3122;
                        float _3162 = (0.5 / (((_3151 * ((_3137 * _3152) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3122) * _3137))) * _3151;
                        float _4419 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3173 = (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3145 * _3145) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2899 = (_3092 * _3040.x) + _2998;
                        _2900 = (_3092 * _3040.y) + _2999;
                        _2901 = (_3092 * _3040.z) + _3000;
                        _2896 = (_3173 * _3057.x) + _2995;
                        _2897 = (_3173 * _3057.y) + _2996;
                        _2898 = (_3173 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2896;
                            _2996 = _2897;
                            _2997 = _2898;
                            _2998 = _2899;
                            _2999 = _2900;
                            _3000 = _2901;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_55_pred = _2900;
                    frontier_phi_55_pred_1 = _2901;
                    frontier_phi_55_pred_2 = _2899;
                    frontier_phi_55_pred_3 = _2898;
                    frontier_phi_55_pred_4 = _2897;
                    frontier_phi_55_pred_5 = _2896;
                }
                _2593 = frontier_phi_55_pred;
                _2595 = frontier_phi_55_pred_1;
                _2591 = frontier_phi_55_pred_2;
                _2589 = frontier_phi_55_pred_3;
                _2587 = frontier_phi_55_pred_4;
                _2585 = frontier_phi_55_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2585;
                    _2800 = _2587;
                    _2801 = _2589;
                    _2802 = _2591;
                    _2803 = _2593;
                    _2804 = _2595;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2601) & _2374) == 0u)
        {
            _2767 = _2584;
            _2769 = _2586;
            _2771 = _2588;
            _2773 = _2590;
            _2775 = _2592;
            _2777 = _2594;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
            float _2793 = _2792 * _2328;
            float _2794 = _2792 * _2329;
            float _2795 = _2792 * _2330;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2978 = _2584;
                float _2979 = _2586;
                float _2980 = _2588;
                float _2981 = _2590;
                float _2982 = _2592;
                float _2983 = _2594;
                uint _2984 = _2601;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2994)
                    {
                        frontier_phi_69_pred = _2983;
                        frontier_phi_69_pred_1 = _2982;
                        frontier_phi_69_pred_2 = _2981;
                        frontier_phi_69_pred_3 = _2980;
                        frontier_phi_69_pred_4 = _2979;
                        frontier_phi_69_pred_5 = _2978;
                    }
                    else
                    {
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3221 = _2978;
                        float _3222 = _2979;
                        float _3223 = _2980;
                        float _3224 = _2981;
                        float _3225 = _2982;
                        float _3226 = _2983;
                        uint _3227 = _2993;
                        uint _3228;
                        vec4 _3253;
                        float _3254;
                        vec4 _3269;
                        vec3 _3281;
                        vec4 _3296;
                        vec4 _3311;
                        float _3357;
                        bool _3358;
                        for (;;)
                        {
                            uint _3238 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3227));
                            _3228 = (_3227 + 4294967295u) & _3227;
                            uint _3240 = _3238 * 40u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3254 = _3253.w;
                            uint _3256 = (_3238 * 40u) + 4u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3238 * 40u) + 8u;
                            _3281 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x));
                            uint _3283 = (_3238 * 40u) + 16u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3238 * 40u) + 20u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3238 * 40u) + 24u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3332 = (_3238 * 40u) + 28u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3357 = fma(_2330, _3345.z, fma(_2329, _3345.y, _3345.x * _2328)) + _3345.w;
                            _3358 = !((fma(_2330, _3326.z, fma(_2329, _3326.y, _3326.x * _2328)) + _3326.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3358)
                            {
                                float _3385 = _3253.x - _2328;
                                float _3386 = _3253.y - _2329;
                                float _3387 = _3253.z - _2330;
                                float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                                float _3391 = inversesqrt(_3388);
                                float _3392 = _3391 * _3385;
                                float _3393 = _3391 * _3386;
                                float _3394 = _3391 * _3387;
                                float _3398 = 1.0 - (_3388 / (_3254 * _3254));
                                float _4430 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3403 = sqrt(_3388) * _3269.w;
                                float _3405 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                                float _3406 = _3405 * _3405;
                                float _3409 = ((1.0 - _3406) * dot(vec3(_3392, _3393, _3394), vec3(_831, _834, _837))) + _3406;
                                float _3412 = _3403 * _3403;
                                float _3416 = (fma(_2330, _3296.z, fma(_2329, _3296.y, _3296.x * _2328)) + _3296.w) / _3357;
                                float _3417 = (fma(_2330, _3311.z, fma(_2329, _3311.y, _3311.x * _2328)) + _3311.w) / _3357;
                                float _3421 = 1.0 - dot(vec2(_3416, _3417), vec2(_3416, _3417));
                                float _4446 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3423 = _3422 * (((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3399) / ((_3412 * 0.699999988079071044921875) + 1.0));
                                float _3435 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                                float _3436 = 1.0 - _899;
                                float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                                float _3444 = _3443 * _3443;
                                float _3445 = _3444 * _3444;
                                float _3446 = _3392 - _2793;
                                float _3447 = _3393 - _2794;
                                float _3448 = _3394 - _2795;
                                float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                                float _3456 = dot(vec3(_831, _834, _837), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4457 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3460 = dot(vec3(_831, _834, _837), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                                float _4468 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                                float _3468 = _3405 * _3444;
                                float _3469 = _3468 * _3468;
                                float _3475 = ((1.0 - _3469) * dot(vec3(_831, _834, _837), vec3(_3392, _3393, _3394))) + _3469;
                                float _4479 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3477 = 1.0 - _3444;
                                float _3487 = (0.5 / (((_3476 * ((_3459 * _3477) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3444) * _3459))) * _3476;
                                float _4490 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3497 = (_3422 * _3399) * (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) / ((_3467 * _3467) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3423 * _3269.x;
                                frontier_phi_75_pred_1 = _3423 * _3269.z;
                                frontier_phi_75_pred_2 = _3423 * _3269.y;
                                frontier_phi_75_pred_3 = _3497 * _3281.z;
                                frontier_phi_75_pred_4 = _3497 * _3281.y;
                                frontier_phi_75_pred_5 = _3497 * _3281.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3504 = frontier_phi_75_pred;
                            _3506 = frontier_phi_75_pred_1;
                            _3505 = frontier_phi_75_pred_2;
                            _3503 = frontier_phi_75_pred_3;
                            _3502 = frontier_phi_75_pred_4;
                            _3501 = frontier_phi_75_pred_5;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            if (_3228 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3228;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3213;
                        frontier_phi_69_pred_1 = _3212;
                        frontier_phi_69_pred_2 = _3211;
                        frontier_phi_69_pred_3 = _3210;
                        frontier_phi_69_pred_4 = _3209;
                        frontier_phi_69_pred_5 = _3208;
                    }
                    _2778 = frontier_phi_69_pred;
                    _2776 = frontier_phi_69_pred_1;
                    _2774 = frontier_phi_69_pred_2;
                    _2772 = frontier_phi_69_pred_3;
                    _2770 = frontier_phi_69_pred_4;
                    _2768 = frontier_phi_69_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2768;
                        _2979 = _2770;
                        _2980 = _2772;
                        _2981 = _2774;
                        _2982 = _2776;
                        _2983 = _2778;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2770;
                frontier_phi_44_45_ladder_1 = _2778;
                frontier_phi_44_45_ladder_2 = _2776;
                frontier_phi_44_45_ladder_3 = _2774;
                frontier_phi_44_45_ladder_4 = _2772;
                frontier_phi_44_45_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_44_45_ladder = _2586;
                frontier_phi_44_45_ladder_1 = _2594;
                frontier_phi_44_45_ladder_2 = _2592;
                frontier_phi_44_45_ladder_3 = _2590;
                frontier_phi_44_45_ladder_4 = _2588;
                frontier_phi_44_45_ladder_5 = _2584;
            }
            _2767 = frontier_phi_44_45_ladder_5;
            _2769 = frontier_phi_44_45_ladder;
            _2771 = frontier_phi_44_45_ladder_4;
            _2773 = frontier_phi_44_45_ladder_3;
            _2775 = frontier_phi_44_45_ladder_2;
            _2777 = frontier_phi_44_45_ladder_1;
        }
        float _2782 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
        _2387 = (_2782 * _2773) + _2114;
        _2389 = (_2782 * _2775) + _2115;
        _2391 = (_2782 * _2777) + _2116;
        _2393 = ((_2767 * 0.039999999105930328369140625) * _2782) + _2270;
        _2395 = ((_2769 * 0.039999999105930328369140625) * _2782) + _2271;
        _2397 = ((_2771 * 0.039999999105930328369140625) * _2782) + _2272;
    }
    else
    {
        _2387 = _2114;
        _2389 = _2115;
        _2391 = _2116;
        _2393 = _2270;
        _2395 = _2271;
        _2397 = _2272;
    }
    float _2417 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2418 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2419 = cbSceneParam._m0[86u].x * ((_775 / cbSceneParam._m0[86u].x) + ((_898 * cbMtdParam._m0[15u].w) * dot(vec3(_811, _812, _813), vec3(_229, _230, _231))));
    float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
    float _2421 = isnan(_2418) ? _776 : (isnan(_776) ? _2418 : min(_776, _2418));
    vec4 _2423 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2420, _2421), 0.0);
    float _2425 = _2423.x;
    bool _2446 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2425)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2425))) > _697;
    float _2447 = _2446 ? _2420 : _775;
    float _2448 = _2446 ? _2421 : _776;
    vec4 _2450 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2447, _2448));
    vec4 _2455 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2447, _2448));
    float _2457 = _2455.x;
    float _2477 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2457)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2457))) - _697;
    bool _2486 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2490 = (isnan(_2477) ? 0.0 : (isnan(0.0) ? _2477 : max(0.0, _2477))) * (-1.44269502162933349609375);
    float _4521 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4532 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4543 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2517 = 0.959999978542327880859375 - (exp2(log2(1.0 - _890) * 5.0) * 0.959999978542327880859375);
    float _2520 = ((_2450.x * _2517) * exp2(_2490 * (_2486 ? 0.0 : (cbMtdParam._m0[25u].x + cbMtdParam._m0[24u].y)))) * cbSceneParam._m0[72u].w;
    float _2523 = ((_2450.y * _2517) * exp2(_2490 * (_2486 ? 0.0 : (cbMtdParam._m0[25u].y + cbMtdParam._m0[24u].z)))) * cbSceneParam._m0[72u].w;
    float _2526 = ((_2450.z * _2517) * exp2(_2490 * (_2486 ? 0.0 : (cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].w)))) * cbSceneParam._m0[72u].w;
    float _2534 = (_2520 + (((((_1925 * (_1973.x / _1979)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1720) * _1994)) + _2393) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2387 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _875))) - _2520) * cbMtdParam._m0[16u].x);
    float _2536 = (_2523 + (((((_1925 * (_1973.y / _1979)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1720) * _1994)) + _2395) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2389 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _875))) - _2523) * cbMtdParam._m0[16u].x);
    float _2538 = (_2526 + (((((_1925 * (_1973.z / _1979)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1720) * _1994)) + _2397) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2391 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _875))) - _2526) * cbMtdParam._m0[16u].x);
    uint _2539 = _850 + 6u;
    float _2547 = _775 / cbSceneParam._m0[86u].x;
    float _2548 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2610 = _2609 / _697;
        float _2621 = _2610 * _747;
        float _2622 = _748 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2624 = _2610 * _749;
        float _2626 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2627 = _2626 + cbSceneParam._m0[79u].w;
        float _2628 = cbSceneParam._m0[79u].w - _2622;
        float _2634 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2624 * _2624));
        float _2637 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2634;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2644 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2909;
        if (abs((_2623 - _2626) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2909 = ((((_2627 > 0.0) ? exp2(_2643 * _2627) : (2.0 - exp2(_2644 * _2627))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2637;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : max(_2627, _2628));
            float _2830 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : min(_2627, _2628));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2909 = ((abs(_2634 / _2623) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2644 * _2839) - exp2(_2644 * _2840)) * _2828))) + (_2637 * cbSceneParam._m0[80u].z);
        }
        vec4 _2911 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2920 = exp2((_2909 * (-1.44269502162933349609375)) * (1.0 - _2911.w));
        float _2921 = log2(_2920);
        float _2937 = log2(_2567);
        _2646 = (exp2(_2937 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].x)) * _2911.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2648 = (exp2(_2937 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].y)) * _2911.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2650 = (exp2(_2937 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].z)) * _2911.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2652 = _2920 * _2567;
    }
    else
    {
        _2646 = _2564;
        _2648 = _2565;
        _2650 = _2566;
        _2652 = _2567;
    }
    bool _2947;
    float _2707;
    vec4 _2710;
    float _2712;
    vec4 _2714;
    float _2722;
    float _2723;
    float _2724;
    float _2725;
    bool _2735;
    for (;;)
    {
        bool _2664 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2665 = log2(_2652);
        float _2672 = exp2(_2665 * cbSceneParam._m0[78u].x) * _2534;
        float _2673 = exp2(_2665 * cbSceneParam._m0[78u].y) * _2536;
        float _2674 = exp2(_2665 * cbSceneParam._m0[78u].z) * _2538;
        vec4 _2682 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_775, _776));
        float _2684 = _2682.x;
        float _2705 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2684)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2684))) - _697) * cbMtdParam._m0[15u].y;
        float _4594 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        _2707 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * cbInstanceData._m0[_2539].w;
        float _2708 = _763 + (-0.5);
        _2710 = cbMtdParam._m0[1u];
        _2712 = _2710.y * _2708;
        _2714 = cbMatDynParam._m0[0u];
        float _2721 = (roundEven(_2714.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2722 = _2721 * (_2664 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2646)));
        _2723 = _2721 * (_2664 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2648)));
        _2724 = _2721 * (_2664 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2650)));
        _2725 = _2708 * 0.999000012874603271484375;
        _2735 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2735)
        {
            if ((cbInstanceData._m0[_850 + 7u].x + _2725) < 0.5)
            {
                _2947 = true;
                break;
            }
        }
        uint _2863 = _851 + uint(_2714.w);
        if ((cbInstanceData._m0[_2863].w < 1.0) && ((cbInstanceData._m0[_2863].w + _2725) < 0.5))
        {
            _2947 = true;
            break;
        }
        if ((_2712 + 1.0) < _2710.x)
        {
            _2947 = true;
            break;
        }
        _2947 = false;
        break;
    }
    float _3178;
    if (_2947)
    {
        discard_state = true;
        _3178 = 0.0;
    }
    else
    {
        _3178 = _2707;
    }
    SV_Target.x = _2722;
    SV_Target.y = _2723;
    SV_Target.z = _2724;
    SV_Target.w = _3178;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2707;
    discard_exit();
}


