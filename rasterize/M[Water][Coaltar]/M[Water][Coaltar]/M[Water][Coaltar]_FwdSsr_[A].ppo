#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _126 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _127 = _126 * NORMAL.x;
    float _128 = _126 * NORMAL.y;
    float _129 = _126 * NORMAL.z;
    float _161 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _170 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_161 * cbMtdParam._m0[21u].x);
    float _171 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_161 * cbMtdParam._m0[21u].y);
    float _237 = cbMtdParam._m0[14u].y + texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _161))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _161))) + cbTextureTilingScale._m0[3u].w)).z;
    float _246 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_170 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_171 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _920 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _261 = (TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].w + 1.0);
    float _931 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _264 = ((((cbMtdParam._m0[14u].z + texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _170) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _171) + cbTextureTilingScale._m0[4u].w)).z) - _237) * (isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0)))) + _237) + ((isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0))) * cbMtdParam._m0[15u].z);
    float _942 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _265 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
    float _279 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _323 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _333 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _323);
    float _334 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _323);
    float _335 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _323);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _365 = sqrt(((_333 * _333) + (_334 * _334)) + (_335 * _335));
        float _372 = (cbMatDynParam._m0[5u].x * _365) + cbMatDynParam._m0[5u].y;
        float _953 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
        float _373 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        float _377 = (cbMatDynParam._m0[5u].z * _365) + cbMatDynParam._m0[5u].w;
        float _964 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0))) - _373)) + _373) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _345 = POSITION_1.x / POSITION_1.w;
    float _346 = POSITION_1.y / POSITION_1.w;
    float _350 = (_345 * 0.5) + 0.5;
    float _351 = 0.5 - (_346 * 0.5);
    float _389;
    float _391;
    float _393;
    float _395;
    if (_265 < cbPerScene._m0[22u].z)
    {
        _389 = 0.0;
        _391 = 0.0;
        _393 = 0.0;
        _395 = 0.0;
    }
    else
    {
        float _401 = 1.0 / _279;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _401))
        {
            float _426 = fma(_129, cbPerScene._m0[8u].z, fma(_128, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _127));
            float _429 = fma(_129, cbPerScene._m0[9u].z, fma(_128, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _127));
            float _432 = fma(_129, cbPerScene._m0[10u].z, fma(_128, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _127));
            float _439 = (_345 * _279) * cbPerScene._m0[28u].x;
            float _441 = (_346 * _279) * cbPerScene._m0[28u].y;
            float _445 = inversesqrt(dot(vec3(_439, _441, _279), vec3(_439, _441, _279)));
            float _446 = _439 * _445;
            float _447 = _441 * _445;
            float _448 = _445 * _279;
            float _452 = dot(vec3(_446, _447, _448), vec3(_426, _429, _432)) * 2.0;
            float _457 = _446 - (_452 * _426);
            float _458 = _447 - (_452 * _429);
            float _459 = _448 - (_452 * _432);
            float _463 = inversesqrt(dot(vec3(_457, _458, _459), vec3(_457, _458, _459)));
            float _466 = _459 * _463;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_466 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _478 = abs(dot(vec3((-0.0) - _446, (-0.0) - _447, (-0.0) - _448), vec3(_426, _429, _432)));
                float _975 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
                float _489 = (((_265 * _265) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _498 = (cbPerScene._m0[29u].x * (1.0 - _265)) + cbPerScene._m0[29u].y;
                float _986 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
                float _506 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_489 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _509 = _466 - cbPerScene._m0[16u].x;
                    float _997 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
                    float _510 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
                    float _511 = _510 * _510;
                    float _513 = (_489 - cbPerScene._m0[22u].x) * 10.0;
                    float _1008 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
                    float _515 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
                    float _516 = isnan(_515) ? _511 : (isnan(_511) ? _515 : min(_511, _515));
                    float _520 = (cbPerScene._m0[21u].x - _279) * cbPerScene._m0[21u].z;
                    float _1024 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
                    float _521 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
                    float _522 = isnan(_521) ? _516 : (isnan(_516) ? _521 : min(_516, _521));
                    float _523 = (_457 * _463) + _439;
                    float _524 = (_458 * _463) + _441;
                    float _525 = _466 + _279;
                    float _556 = fma(_525, cbPerScene._m0[7u].z, fma(_524, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _523)) + cbPerScene._m0[7u].w;
                    float _560 = ((fma(_525, cbPerScene._m0[4u].z, fma(_524, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _523)) + cbPerScene._m0[4u].w) / _556) - _350;
                    float _561 = ((fma(_525, cbPerScene._m0[5u].z, fma(_524, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _523)) + cbPerScene._m0[5u].w) / _556) - _351;
                    float _567 = cbPerScene._m0[18u].x * _560;
                    float _568 = cbPerScene._m0[18u].y * _561;
                    float _573 = sqrt((_567 * _567) + (_568 * _568)) + 9.9999997473787516355514526367188e-06;
                    float _578 = (_560 / _573) * _506;
                    float _579 = (_561 / _573) * _506;
                    float _580 = (((1.0 / _525) - _401) / _573) * _506;
                    float _608 = abs(float(_578 > 0.0) - _350) / (abs(_578) + 1.0000000116860974230803549289703e-07);
                    float _609 = abs(float(_579 > 0.0) - _351) / (abs(_579) + 1.0000000116860974230803549289703e-07);
                    float _611 = (abs(((_580 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _401) / (abs(_580) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _612 = isnan(_609) ? _608 : (isnan(_608) ? _609 : min(_608, _609));
                    float _613 = isnan(_611) ? _612 : (isnan(_612) ? _611 : min(_612, _611));
                    uint _616 = uint(int(isnan(cbPerScene._m0[23u].y) ? _613 : (isnan(_613) ? cbPerScene._m0[23u].y : min(_613, cbPerScene._m0[23u].y))));
                    float _396;
                    float _621;
                    float _623;
                    float _625;
                    if (int(_616) > int(0u))
                    {
                        float _618 = _580 + _401;
                        float _619 = _579 + _351;
                        float _620 = _578 + _350;
                        float _622;
                        float _624;
                        float _626;
                        float _627;
                        uint _638;
                        float _640;
                        float _642;
                        float _644;
                        float _646;
                        float _648;
                        float _650;
                        float _652;
                        uint _654;
                        float _656;
                        float _658;
                        float _660;
                        float _633 = 0.0;
                        float _634 = 0.0;
                        float _635 = 0.0;
                        float _636 = 0.0;
                        uint _637 = 0u;
                        float _639 = _401;
                        float _641 = _620;
                        float _643 = _619;
                        float _645 = _618;
                        float _647 = _350;
                        float _649 = _351;
                        float _651 = _401;
                        uint _653 = 1u;
                        float _655 = 0.0;
                        float _657 = 0.0;
                        float _659 = 0.0;
                        float _671;
                        float _678;
                        float _679;
                        float _680;
                        float _681;
                        float _682;
                        float _683;
                        uint _684;
                        float _685;
                        bool _692;
                        for (;;)
                        {
                            _671 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _641, cbSceneParam._m0[86u].y * _643), 0.0).x;
                            bool _677 = _637 == (_616 + 4294967295u);
                            _678 = _677 ? _655 : _641;
                            _679 = _677 ? _657 : _643;
                            _680 = _677 ? _659 : _645;
                            _681 = _677 ? _655 : _647;
                            _682 = _677 ? _657 : _649;
                            _683 = _677 ? _659 : _651;
                            _684 = _677 ? 1u : _653;
                            _685 = _677 ? (-1.0) : (_645 - _671);
                            _692 = (_684 != 0u) && ((_685 <= 0.0) && ((_677 ? (-1.0) : (_671 - (_639 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_692)
                            {
                                uint _702 = uint(int(log2(_506) + 0.999000012874603271484375));
                                float _713;
                                float _715;
                                float _717;
                                float _719;
                                float _721;
                                float _723;
                                float _725;
                                if (int(_702) > int(0u))
                                {
                                    uint _823;
                                    float _825;
                                    float _826;
                                    float _827;
                                    float _828;
                                    float _829;
                                    float _830;
                                    float _831;
                                    _823 = 0u;
                                    _825 = _678;
                                    _826 = _679;
                                    _827 = _680;
                                    _828 = _681;
                                    _829 = _682;
                                    _830 = _683;
                                    _831 = _671;
                                    float _714;
                                    float _716;
                                    float _718;
                                    float _720;
                                    float _722;
                                    float _724;
                                    float _726;
                                    for (;;)
                                    {
                                        float _835 = (_828 + _825) * 0.5;
                                        float _836 = (_829 + _826) * 0.5;
                                        float _837 = (_830 + _827) * 0.5;
                                        vec4 _845 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _835, cbSceneParam._m0[86u].y * _836), 0.0);
                                        float _847 = _845.x;
                                        bool _849 = (_837 - _847) < 0.0;
                                        _714 = _849 ? _835 : _825;
                                        _716 = _849 ? _836 : _826;
                                        _718 = _849 ? _837 : _827;
                                        _720 = _849 ? _828 : _835;
                                        _722 = _849 ? _829 : _836;
                                        _724 = _849 ? _830 : _837;
                                        _726 = _849 ? _847 : _831;
                                        uint _824 = _823 + 1u;
                                        if (_824 == _702)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _823 = _824;
                                            _825 = _714;
                                            _826 = _716;
                                            _827 = _718;
                                            _828 = _720;
                                            _829 = _722;
                                            _830 = _724;
                                            _831 = _726;
                                        }
                                    }
                                    _713 = _714;
                                    _715 = _716;
                                    _717 = _718;
                                    _719 = _720;
                                    _721 = _722;
                                    _723 = _724;
                                    _725 = _726;
                                }
                                else
                                {
                                    _713 = _678;
                                    _715 = _679;
                                    _717 = _680;
                                    _719 = _681;
                                    _721 = _682;
                                    _723 = _683;
                                    _725 = _671;
                                }
                                float _735 = cbPerScene._m0[28u].x * ((_713 * 2.0) + (-1.0));
                                float _736 = cbPerScene._m0[28u].y * (1.0 - (_715 * 2.0));
                                float _768 = fma(_725, cbPerScene._m0[27u].w, fma(_736, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _735) + cbPerScene._m0[27u].z);
                                float _769 = fma(_725, cbPerScene._m0[24u].w, fma(_736, cbPerScene._m0[24u].y, _735 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _768;
                                float _770 = fma(_725, cbPerScene._m0[25u].w, fma(_736, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _735) + cbPerScene._m0[25u].z) / _768;
                                vec4 _779 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _769, cbSceneParam._m0[87u].w * _770), 0.0);
                                float _784 = isnan(_522) ? 1.0 : (isnan(1.0) ? _522 : min(1.0, _522));
                                float _785 = 0.5 - _769;
                                float _786 = 0.5 - _770;
                                float _787 = _785 * 2.0;
                                float _788 = _786 * 2.0;
                                float _789 = _787 * _787;
                                float _790 = _788 * _788;
                                float _1060 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
                                float _1071 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
                                float _799 = inversesqrt(dot(vec2(_578, _579), vec2(_578, _579)));
                                float _805 = inversesqrt(dot(vec2(_787, _788), vec2(_787, _788)));
                                float _811 = dot(vec2((_785 * (-2.0)) * _805, (_786 * (-2.0)) * _805), vec2(_799 * _578, _799 * _579));
                                float _1082 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
                                float _818 = ((1.0 - (isnan(1.0) ? _1071 : (isnan(_1071) ? 1.0 : min(_1071, 1.0)))) * (1.0 - (isnan(1.0) ? _1060 : (isnan(_1060) ? 1.0 : min(_1060, 1.0))))) * (4.0 - ((isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0))) * 2.0));
                                float _1093 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
                                float _819 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
                                float _820 = _819 * _819;
                                frontier_phi_17_pred = _659;
                                frontier_phi_17_pred_1 = _657;
                                frontier_phi_17_pred_2 = _655;
                                frontier_phi_17_pred_3 = _684;
                                frontier_phi_17_pred_4 = _723;
                                frontier_phi_17_pred_5 = _721;
                                frontier_phi_17_pred_6 = _719;
                                frontier_phi_17_pred_7 = _717;
                                frontier_phi_17_pred_8 = _715;
                                frontier_phi_17_pred_9 = _713;
                                frontier_phi_17_pred_10 = _639;
                                frontier_phi_17_pred_11 = isnan(_820) ? _784 : (isnan(_784) ? _820 : min(_784, _820));
                                frontier_phi_17_pred_12 = _779.z;
                                frontier_phi_17_pred_13 = _779.y;
                                frontier_phi_17_pred_14 = _779.x;
                                frontier_phi_17_pred_15 = _616;
                            }
                            else
                            {
                                bool _704 = _685 > 0.0;
                                frontier_phi_17_pred = _704 ? _680 : _659;
                                frontier_phi_17_pred_1 = _704 ? _679 : _657;
                                frontier_phi_17_pred_2 = _704 ? _678 : _655;
                                frontier_phi_17_pred_3 = uint(_704);
                                frontier_phi_17_pred_4 = _680;
                                frontier_phi_17_pred_5 = _679;
                                frontier_phi_17_pred_6 = _678;
                                frontier_phi_17_pred_7 = _680 + _580;
                                frontier_phi_17_pred_8 = _679 + _579;
                                frontier_phi_17_pred_9 = _678 + _578;
                                frontier_phi_17_pred_10 = _671;
                                frontier_phi_17_pred_11 = _636;
                                frontier_phi_17_pred_12 = _635;
                                frontier_phi_17_pred_13 = _634;
                                frontier_phi_17_pred_14 = _633;
                                frontier_phi_17_pred_15 = _637 + 1u;
                            }
                            _660 = frontier_phi_17_pred;
                            _658 = frontier_phi_17_pred_1;
                            _656 = frontier_phi_17_pred_2;
                            _654 = frontier_phi_17_pred_3;
                            _652 = frontier_phi_17_pred_4;
                            _650 = frontier_phi_17_pred_5;
                            _648 = frontier_phi_17_pred_6;
                            _646 = frontier_phi_17_pred_7;
                            _644 = frontier_phi_17_pred_8;
                            _642 = frontier_phi_17_pred_9;
                            _640 = frontier_phi_17_pred_10;
                            _627 = frontier_phi_17_pred_11;
                            _626 = frontier_phi_17_pred_12;
                            _624 = frontier_phi_17_pred_13;
                            _622 = frontier_phi_17_pred_14;
                            _638 = frontier_phi_17_pred_15;
                            if (int(_638) < int(_616))
                            {
                                _633 = _622;
                                _634 = _624;
                                _635 = _626;
                                _636 = _627;
                                _637 = _638;
                                _639 = _640;
                                _641 = _642;
                                _643 = _644;
                                _645 = _646;
                                _647 = _648;
                                _649 = _650;
                                _651 = _652;
                                _653 = _654;
                                _655 = _656;
                                _657 = _658;
                                _659 = _660;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _621 = _622;
                        _623 = _624;
                        _625 = _626;
                        _396 = _627;
                    }
                    else
                    {
                        _621 = 0.0;
                        _623 = 0.0;
                        _625 = 0.0;
                        _396 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_621) || isnan(_623)) || isnan(_625))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_396 * _621) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _396;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_396 * _625) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_396 * _623) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _389 = frontier_phi_3_4_ladder;
        _391 = frontier_phi_3_4_ladder_3;
        _393 = frontier_phi_3_4_ladder_2;
        _395 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _389;
    SV_Target.y = _391;
    SV_Target.z = _393;
    SV_Target.w = _395;
    discard_exit();
}


