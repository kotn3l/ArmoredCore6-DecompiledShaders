#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1284;
float _3683;
float _3684;
float _3685;
float _3686;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _291 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_282 * cbMtdParam._m0[21u].x);
    float _292 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_282 * cbMtdParam._m0[21u].y);
    float _327 = (cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _282);
    float _328 = (cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _282);
    vec4 _340 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_1, SS_DiffuseMap), vec2((_327 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_328 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _345 = _340.x * cbMtdParam._m0[9u].x;
    float _346 = _340.y * cbMtdParam._m0[9u].y;
    float _347 = _340.z * cbMtdParam._m0[9u].z;
    vec4 _366 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    float _382 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_291 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_292 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3695 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _390 = (((_366.x * cbMtdParam._m0[10u].x) - _345) * _383) + _345;
    float _391 = (((_366.y * cbMtdParam._m0[10u].y) - _346) * _383) + _346;
    float _392 = (((_366.z * cbMtdParam._m0[10u].z) - _347) * _383) + _347;
    float _416 = TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _418 = _416 * (cbMtdParam._m0[17u].y + 1.0);
    float _3706 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _429 = (((cbMtdParam._m0[11u].x - _390) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.x) * (_390 - cbMtdParam._m0[11u].x))) * _419) + _390;
    float _430 = (((cbMtdParam._m0[11u].y - _391) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.y) * (_391 - cbMtdParam._m0[11u].y))) * _419) + _391;
    float _431 = (((cbMtdParam._m0[11u].z - _392) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.z) * (_392 - cbMtdParam._m0[11u].z))) * _419) + _392;
    vec4 _433 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _435 = _433.w;
    vec4 _469 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[19u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].z * _282)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[19u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].w * _282)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _471 = _469.z;
    vec4 _488 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[20u].x * TEXCOORD.x) + (cbMtdParam._m0[19u].x * _282)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[20u].y * TEXCOORD.y) + (cbMtdParam._m0[19u].y * _282)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _490 = _488.z;
    float _491 = isnan(_490) ? _471 : (isnan(_471) ? _490 : max(_471, _490));
    float _506 = (_429 * 2.0) + ((((cbMtdParam._m0[12u].x * _435) * _491) - _429) * _491);
    float _508 = (_430 * 2.0) + ((((cbMtdParam._m0[12u].y * _435) * _491) - _430) * _491);
    float _510 = (_431 * 2.0) + ((((cbMtdParam._m0[12u].z * _435) * _491) - _431) * _491);
    vec4 _523 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    float _530 = (_523.x * 2.0) + (-1.0);
    float _532 = (_523.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_530, _532), vec2(_530, _532));
    float _3722 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    vec4 _554 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _327) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _328) + cbTextureTilingScale._m0[3u].w));
    float _561 = (_554.x * 2.0) + (-1.0);
    float _562 = (_554.y * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3733 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))));
    float _570 = cbMtdParam._m0[14u].y + _554.z;
    float _579 = _416 * (cbMtdParam._m0[16u].w + 1.0);
    float _3744 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = ((((cbMtdParam._m0[14u].z + _523.z) - _570) * _383) + _570) + ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * cbMtdParam._m0[15u].z);
    float _589 = (_383 * (_530 - _561)) + _561;
    float _590 = (_383 * (_532 - _562)) + _562;
    float _591 = (_383 * (sqrt(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) - _568)) + _568;
    vec4 _613 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (_613.x * 2.0) + (-1.0);
    float _620 = (_613.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3755 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _644 = ((((_619 - _589) + (_619 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _589)) * _419) + _589;
    float _645 = ((((_620 - _590) + (_620 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _590)) * _419) + _590;
    float _646 = (_419 * (sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) - _591)) + _591;
    float _666 = fma(_646, _237 * NORMAL.x, fma(_645, _244 * TANGENT.x, _644 * _231));
    float _669 = fma(_646, _237 * NORMAL.y, fma(_645, _244 * TANGENT.y, _644 * _232));
    float _672 = fma(_646, _237 * NORMAL.z, fma(_645, _244 * TANGENT.z, _644 * _233));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3766 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _680 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3788 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3799 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    vec4 _763 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _765 = _763.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_749 * _749) + (_750 * _750)) + (_751 * _751));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _3810 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _3821 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) - _971)) + _971) < ((_765 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _780 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _789 = (_780.x * 2.0) + (-1.0);
    float _790 = (_780.y * 2.0) + (-1.0);
    float _791 = (_780.z * 2.0) + (-1.0);
    float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
    float _806 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _780.w;
    float _813 = (((_789 * _795) - _677) * _806) + _677;
    float _814 = (((_790 * _795) - _678) * _806) + _678;
    float _815 = (((_791 * _795) - _679) * _806) + _679;
    float _833 = fma(_815, cbSceneParam._m0[5u].z, fma(_814, cbSceneParam._m0[5u].y, _813 * cbSceneParam._m0[5u].x));
    float _836 = fma(_815, cbSceneParam._m0[6u].z, fma(_814, cbSceneParam._m0[6u].y, _813 * cbSceneParam._m0[6u].x));
    float _839 = fma(_815, cbSceneParam._m0[7u].z, fma(_814, cbSceneParam._m0[7u].y, _813 * cbSceneParam._m0[7u].x));
    uint _852 = uint(roundEven(NORMAL.w)) * 13u;
    uint _853 = _852 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_854].z;
    float _3832 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _877 = _874.x * TEXCOORD_3.w;
    float _878 = dot(vec3(_813, _814, _815), vec3(_756, _757, _758));
    float _881 = _878 * 2.0;
    float _885 = (_881 * _813) - _756;
    float _886 = (_881 * _814) - _757;
    float _887 = (_881 * _815) - _758;
    float _891 = abs(dot(vec3(_756, _757, _758), vec3(_813, _814, _815)));
    float _3865 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _892 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _900 = 10.0 / (_699 + 10.0);
    float _901 = sqrt(_680);
    float _913 = exp2((_901 * 5.0) * log2(1.0 - (_892 * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1012 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1016 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1041 = _945 + _813;
        float _1042 = _949 + _814;
        float _1043 = _953 + _815;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_813, _814, _815), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3913 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_813, _814, _815), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3946 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_813, _814, _815), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3979 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1327 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1331 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1335 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1358 = _945 + _813;
        float _1359 = _949 + _814;
        float _1360 = _953 + _815;
        float _1370 = fma(_1360, cbModelParam._m0[30u].z, fma(_1359, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1358)) - _1327;
        float _1371 = fma(_1360, cbModelParam._m0[31u].z, fma(_1359, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1358)) - _1331;
        float _1372 = fma(_1360, cbModelParam._m0[32u].z, fma(_1359, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1358)) - _1335;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1327 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1331 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[35u].z) + ((((((_1335 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1426 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1393.x + (-0.5));
        float _1428 = _1426 * (_1393.y + (-0.5));
        float _1429 = _1426 * (_1393.z + (-0.5));
        float _1436 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1400.x + (-0.5));
        float _1438 = _1436 * (_1400.y + (-0.5));
        float _1439 = _1436 * (_1400.z + (-0.5));
        float _1446 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1407.x + (-0.5));
        float _1448 = _1446 * (_1407.y + (-0.5));
        float _1449 = _1446 * (_1407.z + (-0.5));
        float _1456 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1414.x + (-0.5));
        float _1458 = _1456 * (_1414.y + (-0.5));
        float _1459 = _1456 * (_1414.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_813, _814, _815), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4042 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1490 + 1.0))) + _1495) * _1460;
        float _1505 = _1428 * 0.5;
        float _1506 = _1438 * 0.5;
        float _1507 = _1448 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_813, _814, _815), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4075 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1532 + 1.0))) + _1537) * _1461;
        float _1547 = _1429 * 0.5;
        float _1548 = _1439 * 0.5;
        float _1549 = _1449 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_813, _814, _815), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4108 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1574 + 1.0))) + _1579) * _1462;
        _1596 = _1429;
        _1597 = _1428;
        _1598 = _1427;
        _1599 = _1439;
        _1600 = _1438;
        _1601 = _1437;
        _1602 = _1449;
        _1603 = _1448;
        _1604 = _1447;
        _1605 = _1462;
        _1606 = _1461;
        _1607 = _1460;
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
    }
    else
    {
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = _1284;
        _1605 = _1284;
        _1606 = _1284;
        _1607 = _1284;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1298)) + _1298;
    float _1643 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1620));
    float _1664 = _885 * 0.5;
    float _1665 = _886 * 0.5;
    float _1666 = _887 * 0.5;
    float _1667 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1670 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1673 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1707;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1680 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1684 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1688 = dot(vec4(_1664, _1665, _1666, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1695 = dot(vec4(cbModelParam._m0[39u]), vec4(_1664, _1665, _1666, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1718;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1709 = dot(vec4(cbModelParam._m0[40u]), vec4(_1664, _1665, _1666, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1722 = (_1718 * cbModelParam._m0[1u].x) + (_1707 * (1.0 - cbModelParam._m0[1u].x));
    float _1732 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1732 : min(cbModelParam._m0[25u].z, _1732));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_887, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885));
        float _1794 = fma(_887, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885));
        float _1797 = fma(_887, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1825 = frontier_phi_17_15_ladder;
        }
        float _2321;
        if (_1794 > 0.0)
        {
            _2321 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2321 = frontier_phi_26_22_ladder;
        }
        float _2779;
        if (_1797 > 0.0)
        {
            _2779 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2779 = frontier_phi_40_33_ladder;
        }
        float _2781 = isnan(_2321) ? _1825 : (isnan(_1825) ? _2321 : min(_1825, _2321));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _1791) + _1780;
        float _2787 = (_2782 * _1794) + _1784;
        float _2788 = (_2782 * _1797) + _1788;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2788, cbModelParam._m0[9u].z, fma(_2787, cbModelParam._m0[9u].y, _2786 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2788, cbModelParam._m0[10u].z, fma(_2787, cbModelParam._m0[10u].y, _2786 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2788, cbModelParam._m0[11u].z, fma(_2787, cbModelParam._m0[11u].y, _2786 * cbModelParam._m0[11u].x))), _1733);
            frontier_phi_16_40_ladder = _2930.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2930.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2930.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_16_40_ladder_2;
        _1815 = frontier_phi_16_40_ladder_1;
        _1817 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_885, _886, _887), _1733);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1875 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1879 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1883 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1886 = fma(_887, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885));
        float _1889 = fma(_887, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885));
        float _1892 = fma(_887, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885));
        float _2326;
        if (_1886 > 0.0)
        {
            _2326 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2326 = frontier_phi_28_24_ladder;
        }
        float _2805;
        if (_1889 > 0.0)
        {
            _2805 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2805 = frontier_phi_42_35_ladder;
        }
        float _2995;
        if (_1892 > 0.0)
        {
            _2995 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2995 = frontier_phi_60_53_ladder;
        }
        float _2997 = isnan(_2805) ? _2326 : (isnan(_2326) ? _2805 : min(_2326, _2805));
        float _2998 = isnan(_2995) ? _2997 : (isnan(_2997) ? _2995 : min(_2997, _2995));
        float _3002 = (_2998 * _1886) + _1875;
        float _3003 = (_2998 * _1889) + _1879;
        float _3004 = (_2998 * _1892) + _1883;
        float _3005 = _2998 * 9.9999997473787516355514526367188e-05;
        float _3006 = (-1.0) - _3005;
        float _3008 = _3005 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_3004 > _3008) || ((_3004 < _3006) || ((_3003 > _3008) || ((_3003 < _3006) || ((_3002 < _3006) || (_3002 > _3008))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3246 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3004, cbModelParam._m0[17u].z, fma(_3003, cbModelParam._m0[17u].y, _3002 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3004, cbModelParam._m0[18u].z, fma(_3003, cbModelParam._m0[18u].y, _3002 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3004, cbModelParam._m0[19u].z, fma(_3003, cbModelParam._m0[19u].y, _3002 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_25_60_ladder = _3246.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3246.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3246.y * cbModelParam._m0[1u].z;
        }
        _1911 = frontier_phi_25_60_ladder;
        _1913 = frontier_phi_25_60_ladder_2;
        _1915 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_885, _886, _887), _1822);
        _1911 = _1895.x * cbModelParam._m0[1u].z;
        _1913 = _1895.y * cbModelParam._m0[1u].z;
        _1915 = _1895.z * cbModelParam._m0[1u].z;
    }
    float _1927 = ((((1.0 - _913) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _901)) * _877;
    float _1928 = _1927 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1929 = _1927 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1930 = _1927 * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1933 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1928 * cbSceneParam._m0[91u].x));
    float _1950 = _777 / cbSceneParam._m0[86u].x;
    float _1958 = (cbSceneParam._m0[88u].y * (1.0 - _680)) + cbSceneParam._m0[88u].z;
    float _4234 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 5.0;
    float _1965 = (_900 * cbMtdParam._m0[15u].x) * dot(vec3(_813, _814, _815), vec3(1.0, 0.0, 0.0));
    vec4 _1975 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1965 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1965 + _1950) * cbSceneParam._m0[86u].x, _778), _1960).w) + _1950) * cbSceneParam._m0[86u].x, _778), _1960);
    float _1980 = _1975.w;
    float _1981 = isnan(0.5) ? _1980 : (isnan(_1980) ? 0.5 : max(_1980, 0.5));
    float _1996 = 1.0 - (_1980 / _1981);
    vec4 _2004 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_777, _778));
    float _2006 = _2004.w;
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _2079 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _2036), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _2040))).x));
    float _4250 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2084 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _2036), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _2040))).x));
    float _4261 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)));
    float _2087 = _2086 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2006));
    float _2088 = _2086 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2006));
    float _2089 = _2086 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2006));
    uvec4 _2093 = floatBitsToUint(cbInstanceData._m0[_852 + 5u]);
    uint _2095 = _2093.x * 14u;
    uint _2096 = _2095 + 13u;
    float _2101 = _877 + (-1.0);
    float _2104 = (cbLight._m0[_2096].x * _2101) + 1.0;
    float _2105 = (cbLight._m0[_2096].y * _2101) + 1.0;
    uint _2106 = _2095 + 5u;
    float _2112 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2116 = _2095 + 4u;
    float _2125 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2129 = _2095 | 1u;
    float _2140 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_813, _814, _815));
    float _2143 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_813, _814, _815));
    float _4282 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _4293 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2148 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2150 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2157 = ((cbLight._m0[_2106].x * _2112) * _2150) + (((cbLight._m0[_2116].x * _2087) * _2125) * _2148);
    float _2158 = ((_2112 * cbLight._m0[_2106].y) * _2150) + (((cbLight._m0[_2116].y * _2088) * _2125) * _2148);
    float _2159 = ((_2112 * cbLight._m0[_2106].z) * _2150) + (((cbLight._m0[_2116].z * _2089) * _2125) * _2148);
    uint _2161 = _2095 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _680) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2095].x + _756;
    float _2177 = cbLight._m0[_2095].y + _757;
    float _2178 = cbLight._m0[_2095].z + _758;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2095].xyz));
    float _4304 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2190 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2191 = dot(vec3(_813, _814, _815), vec3(_2183, _2184, _2185));
    float _4326 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2183, _2184, _2185));
    float _4337 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2215 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2190 * ((_2189 * _2215) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2215) + _2175) * _2189))) * _2189;
    float _4348 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2242 = _2095 + 9u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _680) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_2129].x + _756;
    float _2256 = cbLight._m0[_2129].y + _757;
    float _2257 = cbLight._m0[_2129].z + _758;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2129].xyz));
    float _4359 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2269 = dot(vec3(_813, _814, _815), vec3(_2262, _2263, _2264));
    float _4370 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2262, _2263, _2264));
    float _4381 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2254 * _2254;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2291 = 1.0 - _2254;
    float _2301 = (0.5 / (((_2190 * ((_2268 * _2291) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2291) + _2254) * _2268))) * _2268;
    float _4392 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    float _2313 = (((_2290 * cbLight._m0[_2242].x) * _2303) * _2112) + ((((cbLight._m0[_2161].x * _2087) * _2214) * _2228) * _2125);
    float _2314 = (((_2290 * cbLight._m0[_2242].y) * _2303) * _2112) + ((((cbLight._m0[_2161].y * _2088) * _2214) * _2228) * _2125);
    float _2315 = (((_2290 * cbLight._m0[_2242].z) * _2303) * _2112) + ((((cbLight._m0[_2161].z * _2089) * _2214) * _2228) * _2125);
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_2093.y == 0u)
    {
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2370;
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2370;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2370;
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.x;
        uint _2397 = uint((float(_2385.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2386))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2386)));
        float _2407 = (log2(_2373 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2408 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        uint _2411 = uint(isnan(14.0) ? _2408 : (isnan(_2408) ? 14.0 : min(_2408, 14.0)));
        uvec4 _2416 = texelFetch(g_lightClusterGridBuffer, int(((_2411 << 2u) + (_2397 << 6u)) >> 2u));
        uint _2417 = _2416.x;
        uint _2418 = _2385.z;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((((1u << ((_2418 >> 4u) & 15u)) + 4294967295u) & _2417) == 0u) || ((_2418 & 240u) == 0u))
        {
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
        }
        else
        {
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            uint _2848 = 0u;
            uint _2857;
            bool _2858;
            for (;;)
            {
                _2857 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                _2858 = _2857 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2858)
                {
                    frontier_phi_55_pred = _2846;
                    frontier_phi_55_pred_1 = _2847;
                    frontier_phi_55_pred_2 = _2845;
                    frontier_phi_55_pred_3 = _2844;
                    frontier_phi_55_pred_4 = _2843;
                    frontier_phi_55_pred_5 = _2842;
                }
                else
                {
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    uint _3044;
                    _3038 = _2842;
                    _3039 = _2843;
                    _3040 = _2844;
                    _3041 = _2845;
                    _3042 = _2846;
                    _3043 = _2847;
                    _3044 = _2857;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3048 = uint(findLSB(_3044)) + (_2848 << 5u);
                        uint _3045 = (_3044 + 4294967295u) & _3044;
                        uint _3050 = _3048 * 48u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3070 = (_3048 * 48u) + 4u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3089 = (_3048 * 48u) + 8u;
                        vec3 _3100 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x));
                        float _3104 = _3064.x - _2371;
                        float _3105 = _3064.y - _2372;
                        float _3106 = _3064.z - _2373;
                        float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                        float _3110 = inversesqrt(_3107);
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3114 = dot(vec3(_833, _836, _839), vec3(_3111, _3112, _3113));
                        float _3119 = 1.0 - (_3107 * _3064.w);
                        float _4413 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3121 = sqrt(_3107) * _3083.w;
                        float _3124 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3114) + _3125;
                        float _3131 = _3121 * _3121;
                        float _3135 = ((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3120) / ((_3131 * 0.699999988079071044921875) + 1.0);
                        float _3139 = (-0.0) - _2371;
                        float _3140 = (-0.0) - _2372;
                        float _3141 = (-0.0) - _2373;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3156 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                        float _3157 = 1.0 - _901;
                        float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                        float _3165 = _3164 * _3164;
                        float _3166 = _3165 * _3165;
                        float _3167 = _3146 + _3111;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3177 = dot(vec3(_833, _836, _839), vec3(_3146, _3147, _3148));
                        float _4429 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3181 = dot(vec3(_833, _836, _839), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                        float _4440 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                        float _3189 = _3124 * _3165;
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3114) + _3190;
                        float _4451 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3195 = 1.0 - _3165;
                        float _3205 = (0.5 / (((_3194 * ((_3180 * _3195) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3165) * _3180))) * _3194;
                        float _4462 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3216 = (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3188 * _3188) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125))) * _3120;
                        _2942 = (_3135 * _3083.x) + _3041;
                        _2943 = (_3135 * _3083.y) + _3042;
                        _2944 = (_3135 * _3083.z) + _3043;
                        _2939 = (_3216 * _3100.x) + _3038;
                        _2940 = (_3216 * _3100.y) + _3039;
                        _2941 = (_3216 * _3100.z) + _3040;
                        if (_3045 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3038 = _2939;
                            _3039 = _2940;
                            _3040 = _2941;
                            _3041 = _2942;
                            _3042 = _2943;
                            _3043 = _2944;
                            _3044 = _3045;
                        }
                    }
                    frontier_phi_55_pred = _2943;
                    frontier_phi_55_pred_1 = _2944;
                    frontier_phi_55_pred_2 = _2942;
                    frontier_phi_55_pred_3 = _2941;
                    frontier_phi_55_pred_4 = _2940;
                    frontier_phi_55_pred_5 = _2939;
                }
                _2636 = frontier_phi_55_pred;
                _2638 = frontier_phi_55_pred_1;
                _2634 = frontier_phi_55_pred_2;
                _2632 = frontier_phi_55_pred_3;
                _2630 = frontier_phi_55_pred_4;
                _2628 = frontier_phi_55_pred_5;
                uint _2849 = _2848 + 1u;
                if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2842 = _2628;
                    _2843 = _2630;
                    _2844 = _2632;
                    _2845 = _2634;
                    _2846 = _2636;
                    _2847 = _2638;
                    _2848 = _2849;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
        }
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.z;
        uint _2644 = (_2642 >> 8u) & 15u;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((4294967295u << _2644) & _2417) == 0u)
        {
            _2810 = _2627;
            _2812 = _2629;
            _2814 = _2631;
            _2816 = _2633;
            _2818 = _2635;
            _2820 = _2637;
        }
        else
        {
            float _2835 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
            float _2836 = _2835 * _2371;
            float _2837 = _2835 * _2372;
            float _2838 = _2835 * _2373;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2644 < ((_2642 >> 12u) & 15u))
            {
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _3021 = _2627;
                float _3022 = _2629;
                float _3023 = _2631;
                float _3024 = _2633;
                float _3025 = _2635;
                float _3026 = _2637;
                uint _3027 = _2644;
                uint _3036;
                bool _3037;
                for (;;)
                {
                    _3036 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                    _3037 = _3036 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3037)
                    {
                        frontier_phi_69_pred = _3026;
                        frontier_phi_69_pred_1 = _3025;
                        frontier_phi_69_pred_2 = _3024;
                        frontier_phi_69_pred_3 = _3023;
                        frontier_phi_69_pred_4 = _3022;
                        frontier_phi_69_pred_5 = _3021;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3264 = _3021;
                        float _3265 = _3022;
                        float _3266 = _3023;
                        float _3267 = _3024;
                        float _3268 = _3025;
                        float _3269 = _3026;
                        uint _3270 = _3036;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3354;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3281 = ((_3027 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3281 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3281 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3281 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_2373, _3388.z, fma(_2372, _3388.y, _3388.x * _2371)) + _3388.w;
                            _3401 = !((fma(_2373, _3369.z, fma(_2372, _3369.y, _3369.x * _2371)) + _3369.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3296.x - _2371;
                                float _3429 = _3296.y - _2372;
                                float _3430 = _3296.z - _2373;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3297 * _3297));
                                float _4473 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3446 = sqrt(_3431) * _3312.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_833, _836, _839))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_2373, _3339.z, fma(_2372, _3339.y, _3339.x * _2371)) + _3339.w) / _3400;
                                float _3460 = (fma(_2373, _3354.z, fma(_2372, _3354.y, _3354.x * _2371)) + _3354.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4489 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _901;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2836;
                                float _3490 = _3436 - _2837;
                                float _3491 = _3437 - _2838;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_833, _836, _839), vec3((-0.0) - _2836, (-0.0) - _2837, (-0.0) - _2838));
                                float _4500 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3503 = dot(vec3(_833, _836, _839), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4511 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_833, _836, _839), vec3(_3435, _3436, _3437))) + _3512;
                                float _4522 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4533 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3466 * _3312.x;
                                frontier_phi_75_pred_1 = _3466 * _3312.z;
                                frontier_phi_75_pred_2 = _3466 * _3312.y;
                                frontier_phi_75_pred_3 = _3540 * _3324.z;
                                frontier_phi_75_pred_4 = _3540 * _3324.y;
                                frontier_phi_75_pred_5 = _3540 * _3324.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_75_pred;
                            _3549 = frontier_phi_75_pred_1;
                            _3548 = frontier_phi_75_pred_2;
                            _3546 = frontier_phi_75_pred_3;
                            _3545 = frontier_phi_75_pred_4;
                            _3544 = frontier_phi_75_pred_5;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3256;
                        frontier_phi_69_pred_1 = _3255;
                        frontier_phi_69_pred_2 = _3254;
                        frontier_phi_69_pred_3 = _3253;
                        frontier_phi_69_pred_4 = _3252;
                        frontier_phi_69_pred_5 = _3251;
                    }
                    _2821 = frontier_phi_69_pred;
                    _2819 = frontier_phi_69_pred_1;
                    _2817 = frontier_phi_69_pred_2;
                    _2815 = frontier_phi_69_pred_3;
                    _2813 = frontier_phi_69_pred_4;
                    _2811 = frontier_phi_69_pred_5;
                    uint _3028 = _3027 + 1u;
                    if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3021 = _2811;
                        _3022 = _2813;
                        _3023 = _2815;
                        _3024 = _2817;
                        _3025 = _2819;
                        _3026 = _2821;
                        _3027 = _3028;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2813;
                frontier_phi_44_45_ladder_1 = _2821;
                frontier_phi_44_45_ladder_2 = _2819;
                frontier_phi_44_45_ladder_3 = _2817;
                frontier_phi_44_45_ladder_4 = _2815;
                frontier_phi_44_45_ladder_5 = _2811;
            }
            else
            {
                frontier_phi_44_45_ladder = _2629;
                frontier_phi_44_45_ladder_1 = _2637;
                frontier_phi_44_45_ladder_2 = _2635;
                frontier_phi_44_45_ladder_3 = _2633;
                frontier_phi_44_45_ladder_4 = _2631;
                frontier_phi_44_45_ladder_5 = _2627;
            }
            _2810 = frontier_phi_44_45_ladder_5;
            _2812 = frontier_phi_44_45_ladder;
            _2814 = frontier_phi_44_45_ladder_4;
            _2816 = frontier_phi_44_45_ladder_3;
            _2818 = frontier_phi_44_45_ladder_2;
            _2820 = frontier_phi_44_45_ladder_1;
        }
        float _2825 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
        _2430 = (_2825 * _2816) + _2157;
        _2432 = (_2825 * _2818) + _2158;
        _2434 = (_2825 * _2820) + _2159;
        _2436 = ((_2810 * 0.039999999105930328369140625) * _2825) + _2313;
        _2438 = ((_2812 * 0.039999999105930328369140625) * _2825) + _2314;
        _2440 = ((_2814 * 0.039999999105930328369140625) * _2825) + _2315;
    }
    else
    {
        _2430 = _2157;
        _2432 = _2158;
        _2434 = _2159;
        _2436 = _2313;
        _2438 = _2314;
        _2440 = _2315;
    }
    float _2460 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2461 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2462 = cbSceneParam._m0[86u].x * ((_777 / cbSceneParam._m0[86u].x) + ((_900 * cbMtdParam._m0[15u].w) * dot(vec3(_813, _814, _815), vec3(_231, _232, _233))));
    float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
    float _2464 = isnan(_2461) ? _778 : (isnan(_778) ? _2461 : min(_778, _2461));
    vec4 _2466 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2463, _2464), 0.0);
    float _2468 = _2466.x;
    bool _2489 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2468)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2468))) > _699;
    float _2490 = _2489 ? _2463 : _777;
    float _2491 = _2489 ? _2464 : _778;
    vec4 _2493 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2490, _2491));
    vec4 _2498 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2490, _2491));
    float _2500 = _2498.x;
    float _2520 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2500)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2500))) - _699;
    bool _2529 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2533 = (isnan(_2520) ? 0.0 : (isnan(0.0) ? _2520 : max(0.0, _2520))) * (-1.44269502162933349609375);
    float _4564 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4575 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4586 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2560 = 0.959999978542327880859375 - (exp2(log2(1.0 - _892) * 5.0) * 0.959999978542327880859375);
    float _2563 = ((_2493.x * _2560) * exp2(_2533 * (_2529 ? 0.0 : (cbMtdParam._m0[25u].x + cbMtdParam._m0[24u].y)))) * cbSceneParam._m0[72u].w;
    float _2566 = ((_2493.y * _2560) * exp2(_2533 * (_2529 ? 0.0 : (cbMtdParam._m0[25u].y + cbMtdParam._m0[24u].z)))) * cbSceneParam._m0[72u].w;
    float _2569 = ((_2493.z * _2560) * exp2(_2533 * (_2529 ? 0.0 : (cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].w)))) * cbSceneParam._m0[72u].w;
    float _2577 = (_2563 + (((((_1927 * (_1975.x / _1981)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1722) * _1996)) + _2436) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2430 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _877))) - _2563) * cbMtdParam._m0[16u].x);
    float _2579 = (_2566 + (((((_1927 * (_1975.y / _1981)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1722) * _1996)) + _2438) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2432 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _877))) - _2566) * cbMtdParam._m0[16u].x);
    float _2581 = (_2569 + (((((_1927 * (_1975.z / _1981)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1722) * _1996)) + _2440) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2434 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _877))) - _2569) * cbMtdParam._m0[16u].x);
    uint _2582 = _852 + 6u;
    float _2590 = _777 / cbSceneParam._m0[86u].x;
    float _2591 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2652 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2653 = _2652 / _699;
        float _2664 = _2653 * _749;
        float _2665 = _750 * _2653;
        float _2666 = (-0.0) - _2665;
        float _2667 = _2653 * _751;
        float _2669 = (cbSceneParam._m0[77u].w * _2666) / _2652;
        float _2670 = _2669 + cbSceneParam._m0[79u].w;
        float _2671 = cbSceneParam._m0[79u].w - _2665;
        float _2677 = sqrt(((_2664 * _2664) + (_2665 * _2665)) + (_2667 * _2667));
        float _2680 = (1.0 - (cbSceneParam._m0[77u].w / _2652)) * _2677;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2687 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2666 - _2669) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2670 > 0.0) ? exp2(_2686 * _2670) : (2.0 - exp2(_2687 * _2670))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2680;
        }
        else
        {
            float _2871 = 1.0 / cbSceneParam._m0[80u].x;
            float _2872 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : max(_2670, _2671));
            float _2873 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : min(_2670, _2671));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            _2952 = ((abs(_2677 / _2666) * cbSceneParam._m0[80u].y) * ((((_2882 - _2883) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))))) * _2871)) - ((exp2(_2687 * _2882) - exp2(_2687 * _2883)) * _2871))) + (_2680 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2610);
        _2689 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2691 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2693 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2695 = _2963 * _2610;
    }
    else
    {
        _2689 = _2607;
        _2691 = _2608;
        _2693 = _2609;
        _2695 = _2610;
    }
    bool _2990;
    float _2750;
    vec4 _2753;
    float _2755;
    vec4 _2757;
    float _2765;
    float _2766;
    float _2767;
    float _2768;
    bool _2778;
    for (;;)
    {
        bool _2707 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2708 = log2(_2695);
        float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * _2577;
        float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * _2579;
        float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * _2581;
        vec4 _2725 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_777, _778));
        float _2727 = _2725.x;
        float _2748 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2727)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2727))) - _699) * cbMtdParam._m0[15u].y;
        float _4637 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        _2750 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * cbInstanceData._m0[_2582].w;
        float _2751 = _765 + (-0.5);
        _2753 = cbMtdParam._m0[1u];
        _2755 = _2753.y * _2751;
        _2757 = cbMatDynParam._m0[0u];
        float _2764 = (roundEven(_2757.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2765 = _2764 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2689)));
        _2766 = _2764 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2691)));
        _2767 = _2764 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2693)));
        _2768 = _2751 * 0.999000012874603271484375;
        _2778 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2778)
        {
            if ((cbInstanceData._m0[_852 + 7u].x + _2768) < 0.5)
            {
                _2990 = true;
                break;
            }
        }
        uint _2906 = _853 + uint(_2757.w);
        if ((cbInstanceData._m0[_2906].w < 1.0) && ((cbInstanceData._m0[_2906].w + _2768) < 0.5))
        {
            _2990 = true;
            break;
        }
        if ((_2755 + 1.0) < _2753.x)
        {
            _2990 = true;
            break;
        }
        _2990 = false;
        break;
    }
    float _3221;
    if (_2990)
    {
        discard_state = true;
        _3221 = 0.0;
    }
    else
    {
        _3221 = _2750;
    }
    SV_Target.x = _2765;
    SV_Target.y = _2766;
    SV_Target.z = _2767;
    SV_Target.w = _3221;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2750;
    discard_exit();
}


