#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1239;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _287 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_278 * cbMtdParam._m0[21u].x);
    float _288 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_278 * cbMtdParam._m0[21u].y);
    float _323 = (cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _278);
    float _324 = (cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _278);
    vec4 _336 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_1, SS_DiffuseMap), vec2((_323 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_324 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _341 = _336.x * cbMtdParam._m0[9u].x;
    float _342 = _336.y * cbMtdParam._m0[9u].y;
    float _343 = _336.z * cbMtdParam._m0[9u].z;
    vec4 _362 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    float _378 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_287 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_288 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3584 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _386 = (((_362.x * cbMtdParam._m0[10u].x) - _341) * _379) + _341;
    float _387 = (((_362.y * cbMtdParam._m0[10u].y) - _342) * _379) + _342;
    float _388 = (((_362.z * cbMtdParam._m0[10u].z) - _343) * _379) + _343;
    float _412 = TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _414 = _412 * (cbMtdParam._m0[17u].y + 1.0);
    float _3595 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _425 = (((cbMtdParam._m0[11u].x - _386) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.x) * (_386 - cbMtdParam._m0[11u].x))) * _415) + _386;
    float _426 = (((cbMtdParam._m0[11u].y - _387) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.y) * (_387 - cbMtdParam._m0[11u].y))) * _415) + _387;
    float _427 = (((cbMtdParam._m0[11u].z - _388) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.z) * (_388 - cbMtdParam._m0[11u].z))) * _415) + _388;
    vec4 _429 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _431 = _429.w;
    vec4 _465 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[19u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].z * _278)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[19u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].w * _278)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _467 = _465.z;
    vec4 _484 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[20u].x * TEXCOORD.x) + (cbMtdParam._m0[19u].x * _278)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[20u].y * TEXCOORD.y) + (cbMtdParam._m0[19u].y * _278)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _486 = _484.z;
    float _487 = isnan(_486) ? _467 : (isnan(_467) ? _486 : max(_467, _486));
    float _502 = (_425 * 2.0) + ((((cbMtdParam._m0[12u].x * _431) * _487) - _425) * _487);
    float _504 = (_426 * 2.0) + ((((cbMtdParam._m0[12u].y * _431) * _487) - _426) * _487);
    float _506 = (_427 * 2.0) + ((((cbMtdParam._m0[12u].z * _431) * _487) - _427) * _487);
    vec4 _519 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    float _526 = (_519.x * 2.0) + (-1.0);
    float _528 = (_519.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_526, _528), vec2(_526, _528));
    float _3611 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    vec4 _550 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _323) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _324) + cbTextureTilingScale._m0[3u].w));
    float _557 = (_550.x * 2.0) + (-1.0);
    float _558 = (_550.y * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3622 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))));
    float _566 = cbMtdParam._m0[14u].y + _550.z;
    float _575 = _412 * (cbMtdParam._m0[16u].w + 1.0);
    float _3633 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = ((((cbMtdParam._m0[14u].z + _519.z) - _566) * _379) + _566) + ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * cbMtdParam._m0[15u].z);
    float _585 = (_379 * (_526 - _557)) + _557;
    float _586 = (_379 * (_528 - _558)) + _558;
    float _587 = (_379 * (sqrt(1.0 - (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) - _564)) + _564;
    vec4 _609 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _615 = (_609.x * 2.0) + (-1.0);
    float _616 = (_609.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3644 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _640 = ((((_615 - _585) + (_615 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _585)) * _415) + _585;
    float _641 = ((((_616 - _586) + (_616 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _586)) * _415) + _586;
    float _642 = (_415 * (sqrt(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) - _587)) + _587;
    float _662 = fma(_642, _233 * NORMAL.x, fma(_641, _240 * TANGENT.x, _640 * _227));
    float _665 = fma(_642, _233 * NORMAL.y, fma(_641, _240 * TANGENT.y, _640 * _228));
    float _668 = fma(_642, _233 * NORMAL.z, fma(_641, _240 * TANGENT.z, _640 * _229));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3655 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _676 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3677 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3688 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _745 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _735);
    float _746 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _735);
    float _747 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _735);
    float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
    float _752 = _745 * _751;
    float _753 = _746 * _751;
    float _754 = _747 * _751;
    float _760 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _761 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _762 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _771 = (_762.x * 2.0) + (-1.0);
    float _772 = (_762.y * 2.0) + (-1.0);
    float _773 = (_762.z * 2.0) + (-1.0);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _788 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _762.w;
    float _795 = (((_771 * _777) - _673) * _788) + _673;
    float _796 = (((_772 * _777) - _674) * _788) + _674;
    float _797 = (((_773 * _777) - _675) * _788) + _675;
    float _816 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, _795 * cbSceneParam._m0[5u].x));
    float _819 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, _795 * cbSceneParam._m0[6u].x));
    float _822 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, _795 * cbSceneParam._m0[7u].x));
    uint _835 = uint(roundEven(NORMAL.w)) * 13u;
    uint _837 = (_835 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _843 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_837].x;
    float _844 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_837].y;
    float _845 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_837].z;
    float _3699 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _760, cbSceneParam._m0[86u].y * _761));
    float _860 = _857.x * TEXCOORD_3.w;
    float _861 = dot(vec3(_795, _796, _797), vec3(_752, _753, _754));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _795) - _752;
    float _869 = (_864 * _796) - _753;
    float _870 = (_864 * _797) - _754;
    float _874 = abs(dot(vec3(_752, _753, _754), vec3(_795, _796, _797)));
    float _3732 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _875 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _883 = 10.0 / (_695 + 10.0);
    float _884 = sqrt(_676);
    float _896 = exp2((_884 * 5.0) * log2(1.0 - (_875 * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _967 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _971 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _996 = _928 + _795;
        float _997 = _932 + _796;
        float _998 = _936 + _797;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_795, _796, _797), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3780 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_795, _796, _797), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3813 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_795, _796, _797), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3846 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1283 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1287 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1310 = _928 + _795;
        float _1311 = _932 + _796;
        float _1312 = _936 + _797;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_795, _796, _797), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3909 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_795, _796, _797), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3942 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_795, _796, _797), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3975 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1239;
        _1549 = _1239;
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1251)) + _1251;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1252)) + _1252;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1253)) + _1253;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _868 * 0.5;
    float _1617 = _869 * 0.5;
    float _1618 = _870 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1746 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1749 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1777 = frontier_phi_14_12_ladder;
        }
        float _2273;
        if (_1746 > 0.0)
        {
            _2273 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2273 = frontier_phi_23_19_ladder;
        }
        float _2723;
        if (_1749 > 0.0)
        {
            _2723 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2723 = frontier_phi_37_30_ladder;
        }
        float _2725 = isnan(_2273) ? _1777 : (isnan(_1777) ? _2273 : min(_1777, _2273));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1743) + _1732;
        float _2731 = (_2726 * _1746) + _1736;
        float _2732 = (_2726 * _1749) + _1740;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2732, cbModelParam._m0[9u].z, fma(_2731, cbModelParam._m0[9u].y, _2730 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2732, cbModelParam._m0[10u].z, fma(_2731, cbModelParam._m0[10u].y, _2730 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2732, cbModelParam._m0[11u].z, fma(_2731, cbModelParam._m0[11u].y, _2730 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_13_37_ladder = _2858.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2858.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2858.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_13_37_ladder_2;
        _1767 = frontier_phi_13_37_ladder_1;
        _1769 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1685);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1841 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1844 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _2278;
        if (_1838 > 0.0)
        {
            _2278 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2278 = frontier_phi_25_21_ladder;
        }
        float _2749;
        if (_1841 > 0.0)
        {
            _2749 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2749 = frontier_phi_39_32_ladder;
        }
        float _2918;
        if (_1844 > 0.0)
        {
            _2918 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2918 = frontier_phi_53_48_ladder;
        }
        float _2920 = isnan(_2749) ? _2278 : (isnan(_2278) ? _2749 : min(_2278, _2749));
        float _2921 = isnan(_2918) ? _2920 : (isnan(_2920) ? _2918 : min(_2920, _2918));
        float _2925 = (_2921 * _1838) + _1827;
        float _2926 = (_2921 * _1841) + _1831;
        float _2927 = (_2921 * _1844) + _1835;
        float _2928 = _2921 * 9.9999997473787516355514526367188e-05;
        float _2929 = (-1.0) - _2928;
        float _2931 = _2928 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2927 > _2931) || ((_2927 < _2929) || ((_2926 > _2931) || ((_2926 < _2929) || ((_2925 < _2929) || (_2925 > _2931))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2927, cbModelParam._m0[17u].z, fma(_2926, cbModelParam._m0[17u].y, _2925 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2927, cbModelParam._m0[18u].z, fma(_2926, cbModelParam._m0[18u].y, _2925 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2927, cbModelParam._m0[19u].z, fma(_2926, cbModelParam._m0[19u].y, _2925 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_22_53_ladder = _3160.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3160.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3160.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_22_53_ladder_2;
        _1865 = frontier_phi_22_53_ladder;
        _1867 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1774);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1879 = ((((1.0 - _896) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_896 * _884)) * _860;
    float _1880 = _1879 * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1881 = _1879 * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1882 = _1879 * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    float _1902 = _760 / cbSceneParam._m0[86u].x;
    float _1910 = (cbSceneParam._m0[88u].y * (1.0 - _676)) + cbSceneParam._m0[88u].z;
    float _4101 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 5.0;
    float _1917 = (_883 * cbMtdParam._m0[15u].x) * dot(vec3(_795, _796, _797), vec3(1.0, 0.0, 0.0));
    vec4 _1927 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1917 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1917 + _1902) * cbSceneParam._m0[86u].x, _761), _1912).w) + _1902) * cbSceneParam._m0[86u].x, _761), _1912);
    float _1932 = _1927.w;
    float _1933 = isnan(0.5) ? _1932 : (isnan(_1932) ? 0.5 : max(_1932, 0.5));
    float _1948 = 1.0 - (_1932 / _1933);
    vec4 _1956 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_760, _761));
    float _1958 = _1956.w;
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _2031 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1988), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1992))).x));
    float _4117 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1988), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1992))).x));
    float _4128 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)));
    float _2039 = _2038 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1958));
    float _2040 = _2038 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1958));
    float _2041 = _2038 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1958));
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_835 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2053 = _860 + (-1.0);
    float _2056 = (cbLight._m0[_2048].x * _2053) + 1.0;
    float _2057 = (cbLight._m0[_2048].y * _2053) + 1.0;
    uint _2058 = _2047 + 5u;
    float _2064 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2068 = _2047 + 4u;
    float _2077 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2081 = _2047 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_795, _796, _797));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_795, _796, _797));
    float _4149 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4160 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2058].x * _2064) * _2102) + (((cbLight._m0[_2068].x * _2039) * _2077) * _2100);
    float _2110 = ((_2064 * cbLight._m0[_2058].y) * _2102) + (((cbLight._m0[_2068].y * _2040) * _2077) * _2100);
    float _2111 = ((_2064 * cbLight._m0[_2058].z) * _2102) + (((cbLight._m0[_2068].z * _2041) * _2077) * _2100);
    uint _2113 = _2047 + 8u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _676) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_2047].x + _752;
    float _2129 = cbLight._m0[_2047].y + _753;
    float _2130 = cbLight._m0[_2047].z + _754;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2047].xyz));
    float _4171 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2142 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2143 = dot(vec3(_795, _796, _797), vec3(_2135, _2136, _2137));
    float _4193 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2135, _2136, _2137));
    float _4204 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2127 * _2127;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2166 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2167 = 1.0 - _2127;
    float _2178 = (0.5 / (((_2142 * ((_2141 * _2167) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2167) + _2127) * _2141))) * _2141;
    float _4215 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    uint _2194 = _2047 + 9u;
    float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _676) * 0.949999988079071044921875);
    float _2206 = _2205 * _2205;
    float _2207 = cbLight._m0[_2081].x + _752;
    float _2208 = cbLight._m0[_2081].y + _753;
    float _2209 = cbLight._m0[_2081].z + _754;
    float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
    float _2214 = _2213 * _2207;
    float _2215 = _2213 * _2208;
    float _2216 = _2213 * _2209;
    float _2217 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2081].xyz));
    float _4226 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2221 = dot(vec3(_795, _796, _797), vec3(_2214, _2215, _2216));
    float _4237 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2214, _2215, _2216));
    float _4248 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2206 * _2206;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2243 = 1.0 - _2206;
    float _2253 = (0.5 / (((_2142 * ((_2220 * _2243) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2243) + _2206) * _2220))) * _2220;
    float _4259 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    float _2265 = (((_2242 * cbLight._m0[_2194].x) * _2255) * _2064) + ((((cbLight._m0[_2113].x * _2039) * _2166) * _2180) * _2077);
    float _2266 = (((_2242 * cbLight._m0[_2194].y) * _2255) * _2064) + ((((cbLight._m0[_2113].y * _2040) * _2166) * _2180) * _2077);
    float _2267 = (((_2242 * cbLight._m0[_2194].z) * _2255) * _2064) + ((((cbLight._m0[_2113].z * _2041) * _2166) * _2180) * _2077);
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    if (_2045.y == 0u)
    {
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2322;
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2322;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2322;
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.x;
        uint _2349 = uint((float(_2337.y) * floor(float(uint(cbSceneParam._m0[85u].y * _761) / _2338))) + floor(float(uint(cbSceneParam._m0[85u].x * _760) / _2338)));
        float _2359 = (log2(_2325 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2360 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        uint _2363 = uint(isnan(14.0) ? _2360 : (isnan(_2360) ? 14.0 : min(_2360, 14.0)));
        uvec4 _2368 = texelFetch(g_lightClusterGridBuffer, int(((_2363 << 2u) + (_2349 << 6u)) >> 2u));
        uint _2369 = _2368.x;
        uint _2370 = _2337.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2370 >> 4u) & 15u)) + 4294967295u) & _2369) == 0u) || ((_2370 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            uint _2792 = 0u;
            uint _2801;
            bool _2802;
            for (;;)
            {
                _2801 = texelFetch(g_lightClassification, int((((_2363 << 5u) + (_2349 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                _2802 = _2801 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2802)
                {
                    frontier_phi_50_pred = _2789;
                    frontier_phi_50_pred_1 = _2791;
                    frontier_phi_50_pred_2 = _2790;
                    frontier_phi_50_pred_3 = _2788;
                    frontier_phi_50_pred_4 = _2787;
                    frontier_phi_50_pred_5 = _2786;
                }
                else
                {
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    uint _2967;
                    _2961 = _2786;
                    _2962 = _2787;
                    _2963 = _2788;
                    _2964 = _2789;
                    _2965 = _2790;
                    _2966 = _2791;
                    _2967 = _2801;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2971 = uint(findLSB(_2967)) + (_2792 << 5u);
                        uint _2968 = (_2967 + 4294967295u) & _2967;
                        uint _2973 = _2971 * 48u;
                        vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2993 = (_2971 * 48u) + 4u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3012 = (_2971 * 48u) + 8u;
                        vec3 _3023 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x));
                        float _3027 = _2987.x - _2323;
                        float _3028 = _2987.y - _2324;
                        float _3029 = _2987.z - _2325;
                        float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                        float _3033 = inversesqrt(_3030);
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3037 = dot(vec3(_816, _819, _822), vec3(_3034, _3035, _3036));
                        float _3042 = 1.0 - (_3030 * _2987.w);
                        float _4280 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3043 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3044 = sqrt(_3030) * _3006.w;
                        float _3047 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _3037) + _3048;
                        float _3054 = _3044 * _3044;
                        float _3058 = ((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3043) / ((_3054 * 0.699999988079071044921875) + 1.0);
                        float _3062 = (-0.0) - _2323;
                        float _3063 = (-0.0) - _2324;
                        float _3064 = (-0.0) - _2325;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3079 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _884;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3069 + _3034;
                        float _3091 = _3070 + _3035;
                        float _3092 = _3071 + _3036;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_816, _819, _822), vec3(_3069, _3070, _3071));
                        float _4296 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3104 = dot(vec3(_816, _819, _822), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4307 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3047 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3037) + _3113;
                        float _4318 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4329 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3111 * _3111) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125))) * _3043;
                        _2870 = (_3058 * _3006.x) + _2964;
                        _2871 = (_3058 * _3006.y) + _2965;
                        _2872 = (_3058 * _3006.z) + _2966;
                        _2867 = (_3139 * _3023.x) + _2961;
                        _2868 = (_3139 * _3023.y) + _2962;
                        _2869 = (_3139 * _3023.z) + _2963;
                        if (_2968 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2961 = _2867;
                            _2962 = _2868;
                            _2963 = _2869;
                            _2964 = _2870;
                            _2965 = _2871;
                            _2966 = _2872;
                            _2967 = _2968;
                        }
                    }
                    frontier_phi_50_pred = _2870;
                    frontier_phi_50_pred_1 = _2872;
                    frontier_phi_50_pred_2 = _2871;
                    frontier_phi_50_pred_3 = _2869;
                    frontier_phi_50_pred_4 = _2868;
                    frontier_phi_50_pred_5 = _2867;
                }
                _2586 = frontier_phi_50_pred;
                _2590 = frontier_phi_50_pred_1;
                _2588 = frontier_phi_50_pred_2;
                _2584 = frontier_phi_50_pred_3;
                _2582 = frontier_phi_50_pred_4;
                _2580 = frontier_phi_50_pred_5;
                uint _2793 = _2792 + 1u;
                if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2786 = _2580;
                    _2787 = _2582;
                    _2788 = _2584;
                    _2789 = _2586;
                    _2790 = _2588;
                    _2791 = _2590;
                    _2792 = _2793;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((4294967295u << _2596) & _2369) == 0u)
        {
            _2754 = _2579;
            _2756 = _2581;
            _2758 = _2583;
            _2760 = _2585;
            _2762 = _2587;
            _2764 = _2589;
        }
        else
        {
            float _2779 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
            float _2780 = _2779 * _2323;
            float _2781 = _2779 * _2324;
            float _2782 = _2779 * _2325;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2944 = _2579;
                float _2945 = _2581;
                float _2946 = _2583;
                float _2947 = _2585;
                float _2948 = _2587;
                float _2949 = _2589;
                uint _2950 = _2596;
                uint _2959;
                bool _2960;
                for (;;)
                {
                    _2959 = texelFetch(g_lightClassification, int((((_2363 << 5u) + (_2349 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                    _2960 = _2959 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2960)
                    {
                        frontier_phi_59_pred = _2949;
                        frontier_phi_59_pred_1 = _2948;
                        frontier_phi_59_pred_2 = _2947;
                        frontier_phi_59_pred_3 = _2946;
                        frontier_phi_59_pred_4 = _2945;
                        frontier_phi_59_pred_5 = _2944;
                    }
                    else
                    {
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3178 = _2944;
                        float _3179 = _2945;
                        float _3180 = _2946;
                        float _3181 = _2947;
                        float _3182 = _2948;
                        float _3183 = _2949;
                        uint _3184 = _2959;
                        uint _3185;
                        vec4 _3210;
                        float _3211;
                        vec4 _3226;
                        vec3 _3238;
                        vec4 _3253;
                        vec4 _3268;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3195 = ((_2950 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3184));
                            _3185 = (_3184 + 4294967295u) & _3184;
                            uint _3197 = _3195 * 40u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3211 = _3210.w;
                            uint _3213 = (_3195 * 40u) + 4u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3195 * 40u) + 8u;
                            _3238 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x));
                            uint _3240 = (_3195 * 40u) + 16u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3195 * 40u) + 20u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3195 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3195 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_2325, _3302.z, fma(_2324, _3302.y, _3302.x * _2323)) + _3302.w;
                            _3315 = !((fma(_2325, _3283.z, fma(_2324, _3283.y, _3283.x * _2323)) + _3283.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3210.x - _2323;
                                float _3343 = _3210.y - _2324;
                                float _3344 = _3210.z - _2325;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3211 * _3211));
                                float _4340 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3360 = sqrt(_3345) * _3226.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_816, _819, _822))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_2325, _3253.z, fma(_2324, _3253.y, _3253.x * _2323)) + _3253.w) / _3314;
                                float _3374 = (fma(_2325, _3268.z, fma(_2324, _3268.y, _3268.x * _2323)) + _3268.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4356 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _884;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2780;
                                float _3404 = _3350 - _2781;
                                float _3405 = _3351 - _2782;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_816, _819, _822), vec3((-0.0) - _2780, (-0.0) - _2781, (-0.0) - _2782));
                                float _4367 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3417 = dot(vec3(_816, _819, _822), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4378 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_816, _819, _822), vec3(_3349, _3350, _3351))) + _3426;
                                float _4389 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4400 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3380 * _3226.z;
                                frontier_phi_65_pred_1 = _3380 * _3226.y;
                                frontier_phi_65_pred_2 = _3380 * _3226.x;
                                frontier_phi_65_pred_3 = _3454 * _3238.z;
                                frontier_phi_65_pred_4 = _3454 * _3238.y;
                                frontier_phi_65_pred_5 = _3454 * _3238.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_65_pred;
                            _3462 = frontier_phi_65_pred_1;
                            _3461 = frontier_phi_65_pred_2;
                            _3460 = frontier_phi_65_pred_3;
                            _3459 = frontier_phi_65_pred_4;
                            _3458 = frontier_phi_65_pred_5;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            if (_3185 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3185;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3170;
                        frontier_phi_59_pred_1 = _3169;
                        frontier_phi_59_pred_2 = _3168;
                        frontier_phi_59_pred_3 = _3167;
                        frontier_phi_59_pred_4 = _3166;
                        frontier_phi_59_pred_5 = _3165;
                    }
                    _2765 = frontier_phi_59_pred;
                    _2763 = frontier_phi_59_pred_1;
                    _2761 = frontier_phi_59_pred_2;
                    _2759 = frontier_phi_59_pred_3;
                    _2757 = frontier_phi_59_pred_4;
                    _2755 = frontier_phi_59_pred_5;
                    uint _2951 = _2950 + 1u;
                    if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2944 = _2755;
                        _2945 = _2757;
                        _2946 = _2759;
                        _2947 = _2761;
                        _2948 = _2763;
                        _2949 = _2765;
                        _2950 = _2951;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2761;
                frontier_phi_41_42_ladder_1 = _2765;
                frontier_phi_41_42_ladder_2 = _2763;
                frontier_phi_41_42_ladder_3 = _2759;
                frontier_phi_41_42_ladder_4 = _2757;
                frontier_phi_41_42_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_41_42_ladder = _2585;
                frontier_phi_41_42_ladder_1 = _2589;
                frontier_phi_41_42_ladder_2 = _2587;
                frontier_phi_41_42_ladder_3 = _2583;
                frontier_phi_41_42_ladder_4 = _2581;
                frontier_phi_41_42_ladder_5 = _2579;
            }
            _2754 = frontier_phi_41_42_ladder_5;
            _2756 = frontier_phi_41_42_ladder_4;
            _2758 = frontier_phi_41_42_ladder_3;
            _2760 = frontier_phi_41_42_ladder;
            _2762 = frontier_phi_41_42_ladder_2;
            _2764 = frontier_phi_41_42_ladder_1;
        }
        float _2769 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2382 = (_2769 * _2760) + _2109;
        _2384 = (_2769 * _2762) + _2110;
        _2386 = (_2769 * _2764) + _2111;
        _2388 = ((_2754 * 0.039999999105930328369140625) * _2769) + _2265;
        _2390 = ((_2756 * 0.039999999105930328369140625) * _2769) + _2266;
        _2392 = ((_2758 * 0.039999999105930328369140625) * _2769) + _2267;
    }
    else
    {
        _2382 = _2109;
        _2384 = _2110;
        _2386 = _2111;
        _2388 = _2265;
        _2390 = _2266;
        _2392 = _2267;
    }
    float _2412 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2413 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2414 = cbSceneParam._m0[86u].x * ((_760 / cbSceneParam._m0[86u].x) + ((_883 * cbMtdParam._m0[15u].w) * dot(vec3(_795, _796, _797), vec3(_227, _228, _229))));
    float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
    float _2416 = isnan(_2413) ? _761 : (isnan(_761) ? _2413 : min(_761, _2413));
    vec4 _2418 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2415, _2416), 0.0);
    float _2420 = _2418.x;
    bool _2441 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2420)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2420))) > _695;
    float _2442 = _2441 ? _2415 : _760;
    float _2443 = _2441 ? _2416 : _761;
    vec4 _2445 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2442, _2443));
    vec4 _2450 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2442, _2443));
    float _2452 = _2450.x;
    float _2472 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2452)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2452))) - _695;
    bool _2481 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2485 = (isnan(_2472) ? 0.0 : (isnan(0.0) ? _2472 : max(0.0, _2472))) * (-1.44269502162933349609375);
    float _4431 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4442 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4453 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2512 = 0.959999978542327880859375 - (exp2(log2(1.0 - _875) * 5.0) * 0.959999978542327880859375);
    float _2515 = ((_2445.x * _2512) * exp2(_2485 * (_2481 ? 0.0 : (cbMtdParam._m0[25u].x + cbMtdParam._m0[24u].y)))) * cbSceneParam._m0[72u].w;
    float _2518 = ((_2445.y * _2512) * exp2(_2485 * (_2481 ? 0.0 : (cbMtdParam._m0[25u].y + cbMtdParam._m0[24u].z)))) * cbSceneParam._m0[72u].w;
    float _2521 = ((_2445.z * _2512) * exp2(_2485 * (_2481 ? 0.0 : (cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].w)))) * cbSceneParam._m0[72u].w;
    float _2542 = _760 / cbSceneParam._m0[86u].x;
    float _2543 = _761 / cbSceneParam._m0[86u].y;
    vec4 _2557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2559 = _2557.x;
    float _2560 = _2557.y;
    float _2561 = _2557.z;
    float _2562 = _2557.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2605 = _2604 / _695;
        float _2616 = _2605 * _745;
        float _2617 = _746 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2619 = _2605 * _747;
        float _2621 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2617;
        float _2629 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2629;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2880;
        if (abs((_2618 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2880 = ((((_2622 > 0.0) ? exp2(_2638 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2815 = 1.0 / cbSceneParam._m0[80u].x;
            float _2816 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2817 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            _2880 = ((abs(_2629 / _2618) * cbSceneParam._m0[80u].y) * ((((_2826 - _2827) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))))) * _2815)) - ((exp2(_2639 * _2826) - exp2(_2639 * _2827)) * _2815))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2882 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, 1.0), 0.0);
        float _2891 = exp2((_2880 * (-1.44269502162933349609375)) * (1.0 - _2882.w));
        float _2892 = log2(_2891);
        float _2908 = log2(_2562);
        _2641 = (exp2(_2908 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].x)) * _2882.x) / cbSceneParam._m0[78u].x)) + _2559;
        _2643 = (exp2(_2908 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].y)) * _2882.y) / cbSceneParam._m0[78u].y)) + _2560;
        _2645 = (exp2(_2908 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].z)) * _2882.z) / cbSceneParam._m0[78u].z)) + _2561;
        _2647 = _2891 * _2562;
    }
    else
    {
        _2641 = _2559;
        _2643 = _2560;
        _2645 = _2561;
        _2647 = _2562;
    }
    bool _2659 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2660 = log2(_2647);
    float _2667 = exp2(_2660 * cbSceneParam._m0[78u].x) * ((_2515 + (((((_1879 * (_1927.x / _1933)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1674) * _1948)) + _2388) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2382 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _860))) - _2515) * cbMtdParam._m0[16u].x));
    float _2668 = exp2(_2660 * cbSceneParam._m0[78u].y) * ((_2518 + (((((_1879 * (_1927.y / _1933)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1674) * _1948)) + _2390) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2384 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _860))) - _2518) * cbMtdParam._m0[16u].x));
    float _2669 = exp2(_2660 * cbSceneParam._m0[78u].z) * ((_2521 + (((((_1879 * (_1927.z / _1933)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1674) * _1948)) + _2392) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2386 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _860))) - _2521) * cbMtdParam._m0[16u].x));
    vec4 _2677 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_760, _761));
    float _2679 = _2677.x;
    float _2700 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2679)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2679))) - _695) * cbMtdParam._m0[15u].y;
    float _4504 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * cbInstanceData._m0[_835 + 6u].w;
    float _2711 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2711 * (_2659 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.y = _2711 * (_2659 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.z = _2711 * (_2659 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.w = _2702;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2702;
}


