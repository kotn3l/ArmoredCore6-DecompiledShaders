#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1241;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _289 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_280 * cbMtdParam._m0[21u].x);
    float _290 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_280 * cbMtdParam._m0[21u].y);
    float _325 = (cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _280);
    float _326 = (cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _280);
    vec4 _338 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_1, SS_DiffuseMap), vec2((_325 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_326 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _343 = _338.x * cbMtdParam._m0[9u].x;
    float _344 = _338.y * cbMtdParam._m0[9u].y;
    float _345 = _338.z * cbMtdParam._m0[9u].z;
    vec4 _364 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    float _380 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_289 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_290 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3868 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _388 = (((_364.x * cbMtdParam._m0[10u].x) - _343) * _381) + _343;
    float _389 = (((_364.y * cbMtdParam._m0[10u].y) - _344) * _381) + _344;
    float _390 = (((_364.z * cbMtdParam._m0[10u].z) - _345) * _381) + _345;
    float _414 = TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _416 = _414 * (cbMtdParam._m0[17u].y + 1.0);
    float _3879 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _427 = (((cbMtdParam._m0[11u].x - _388) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.x) * (_388 - cbMtdParam._m0[11u].x))) * _417) + _388;
    float _428 = (((cbMtdParam._m0[11u].y - _389) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.y) * (_389 - cbMtdParam._m0[11u].y))) * _417) + _389;
    float _429 = (((cbMtdParam._m0[11u].z - _390) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.z) * (_390 - cbMtdParam._m0[11u].z))) * _417) + _390;
    vec4 _431 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _433 = _431.w;
    vec4 _467 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[19u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].z * _280)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[19u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].w * _280)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _469 = _467.z;
    vec4 _486 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[20u].x * TEXCOORD.x) + (cbMtdParam._m0[19u].x * _280)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[20u].y * TEXCOORD.y) + (cbMtdParam._m0[19u].y * _280)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _488 = _486.z;
    float _489 = isnan(_488) ? _469 : (isnan(_469) ? _488 : max(_469, _488));
    float _504 = (_427 * 2.0) + ((((cbMtdParam._m0[12u].x * _433) * _489) - _427) * _489);
    float _506 = (_428 * 2.0) + ((((cbMtdParam._m0[12u].y * _433) * _489) - _428) * _489);
    float _508 = (_429 * 2.0) + ((((cbMtdParam._m0[12u].z * _433) * _489) - _429) * _489);
    vec4 _521 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    float _528 = (_521.x * 2.0) + (-1.0);
    float _530 = (_521.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_528, _530), vec2(_528, _530));
    float _3895 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    vec4 _552 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _325) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _326) + cbTextureTilingScale._m0[3u].w));
    float _559 = (_552.x * 2.0) + (-1.0);
    float _560 = (_552.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3906 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    float _568 = cbMtdParam._m0[14u].y + _552.z;
    float _577 = _414 * (cbMtdParam._m0[16u].w + 1.0);
    float _3917 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = ((((cbMtdParam._m0[14u].z + _521.z) - _568) * _381) + _568) + ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * cbMtdParam._m0[15u].z);
    float _587 = (_381 * (_528 - _559)) + _559;
    float _588 = (_381 * (_530 - _560)) + _560;
    float _589 = (_381 * (sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) - _566)) + _566;
    vec4 _611 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _617 = (_611.x * 2.0) + (-1.0);
    float _618 = (_611.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3928 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _642 = ((((_617 - _587) + (_617 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _587)) * _417) + _587;
    float _643 = ((((_618 - _588) + (_618 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _588)) * _417) + _588;
    float _644 = (_417 * (sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) - _589)) + _589;
    float _664 = fma(_644, _235 * NORMAL.x, fma(_643, _242 * TANGENT.x, _642 * _229));
    float _667 = fma(_644, _235 * NORMAL.y, fma(_643, _242 * TANGENT.y, _642 * _230));
    float _670 = fma(_644, _235 * NORMAL.z, fma(_643, _242 * TANGENT.z, _642 * _231));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3939 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _678 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3961 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3972 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _747 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _737);
    float _748 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _737);
    float _749 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _737);
    float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
    float _754 = _747 * _753;
    float _755 = _748 * _753;
    float _756 = _749 * _753;
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _764 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _773 = (_764.x * 2.0) + (-1.0);
    float _774 = (_764.y * 2.0) + (-1.0);
    float _775 = (_764.z * 2.0) + (-1.0);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _790 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _764.w;
    float _797 = (((_773 * _779) - _675) * _790) + _675;
    float _798 = (((_774 * _779) - _676) * _790) + _676;
    float _799 = (((_775 * _779) - _677) * _790) + _677;
    float _818 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, _797 * cbSceneParam._m0[5u].x));
    float _821 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, _797 * cbSceneParam._m0[6u].x));
    float _824 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, _797 * cbSceneParam._m0[7u].x));
    uint _837 = uint(roundEven(NORMAL.w)) * 13u;
    uint _839 = (_837 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_839].z;
    float _3983 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _862 = _859.x * TEXCOORD_3.w;
    float _863 = dot(vec3(_797, _798, _799), vec3(_754, _755, _756));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _797) - _754;
    float _871 = (_866 * _798) - _755;
    float _872 = (_866 * _799) - _756;
    float _876 = abs(dot(vec3(_754, _755, _756), vec3(_797, _798, _799)));
    float _4016 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _877 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _885 = 10.0 / (_697 + 10.0);
    float _886 = sqrt(_678);
    float _898 = exp2((_886 * 5.0) * log2(1.0 - (_877 * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _969 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _973 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _998 = _930 + _797;
        float _999 = _934 + _798;
        float _1000 = _938 + _799;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_797, _798, _799), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4064 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_797, _798, _799), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4097 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_797, _798, _799), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4130 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1285 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1289 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1312 = _930 + _797;
        float _1313 = _934 + _798;
        float _1314 = _938 + _799;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_797, _798, _799), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4193 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_797, _798, _799), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4226 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_797, _798, _799), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4259 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1241;
        _1551 = _1241;
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1253)) + _1253;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _870 * 0.5;
    float _1619 = _871 * 0.5;
    float _1620 = _872 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1748 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1751 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1779 = frontier_phi_14_12_ladder;
        }
        float _2005;
        if (_1748 > 0.0)
        {
            _2005 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2005 = frontier_phi_23_19_ladder;
        }
        float _2498;
        if (_1751 > 0.0)
        {
            _2498 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2498 = frontier_phi_35_30_ladder;
        }
        float _2500 = isnan(_2005) ? _1779 : (isnan(_1779) ? _2005 : min(_1779, _2005));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1745) + _1734;
        float _2506 = (_2501 * _1748) + _1738;
        float _2507 = (_2501 * _1751) + _1742;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_13_35_ladder = _2903.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2903.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2903.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_13_35_ladder_2;
        _1769 = frontier_phi_13_35_ladder_1;
        _1771 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1687);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1843 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1846 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _2010;
        if (_1840 > 0.0)
        {
            _2010 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2010 = frontier_phi_25_21_ladder;
        }
        float _2525;
        if (_1843 > 0.0)
        {
            _2525 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2525 = frontier_phi_37_32_ladder;
        }
        float _3055;
        if (_1846 > 0.0)
        {
            _3055 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _3055 = frontier_phi_49_44_ladder;
        }
        float _3057 = isnan(_2525) ? _2010 : (isnan(_2010) ? _2525 : min(_2010, _2525));
        float _3058 = isnan(_3055) ? _3057 : (isnan(_3057) ? _3055 : min(_3057, _3055));
        float _3062 = (_3058 * _1840) + _1829;
        float _3063 = (_3058 * _1843) + _1833;
        float _3064 = (_3058 * _1846) + _1837;
        float _3065 = _3058 * 9.9999997473787516355514526367188e-05;
        float _3066 = (-1.0) - _3065;
        float _3068 = _3065 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_3064 > _3068) || ((_3064 < _3066) || ((_3063 > _3068) || ((_3063 < _3066) || ((_3062 < _3066) || (_3062 > _3068))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3185 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3064, cbModelParam._m0[17u].z, fma(_3063, cbModelParam._m0[17u].y, _3062 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3064, cbModelParam._m0[18u].z, fma(_3063, cbModelParam._m0[18u].y, _3062 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3064, cbModelParam._m0[19u].z, fma(_3063, cbModelParam._m0[19u].y, _3062 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_22_49_ladder = _3185.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _3185.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _3185.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_22_49_ladder_2;
        _1867 = frontier_phi_22_49_ladder_1;
        _1869 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1776);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1881 = ((((1.0 - _898) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_898 * _886)) * _862;
    float _1882 = _1881 * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1883 = _1881 * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1884 = _1881 * ((cbModelParam._m0[1u].w * (_1869 - _1771)) + _1771);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    float _1904 = _762 / cbSceneParam._m0[86u].x;
    float _1912 = (cbSceneParam._m0[88u].y * (1.0 - _678)) + cbSceneParam._m0[88u].z;
    float _4385 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 5.0;
    float _1919 = (_885 * cbMtdParam._m0[15u].x) * dot(vec3(_797, _798, _799), vec3(1.0, 0.0, 0.0));
    vec4 _1929 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1919 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1919 + _1904) * cbSceneParam._m0[86u].x, _763), _1914).w) + _1904) * cbSceneParam._m0[86u].x, _763), _1914);
    float _1934 = _1929.w;
    float _1935 = isnan(0.5) ? _1934 : (isnan(_1934) ? 0.5 : max(_1934, 0.5));
    float _1950 = 1.0 - (_1934 / _1935);
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1997 = _1984 / _1996;
    float _1998 = _1988 / _1996;
    float _1999 = _1992 / _1996;
    float _2146;
    float _2147;
    float _2148;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2026 = ((uint(_1999 > cbSceneParam._m0[59u].y) + uint(_1999 > cbSceneParam._m0[59u].x)) + uint(_1999 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2027 = _2026 + 43u;
        uint _2035 = _2026 + 44u;
        uint _2043 = _2026 + 45u;
        uint _2051 = _2026 + 46u;
        float _2062 = fma(_1996, cbSceneParam._m0[_2027].w, fma(_1992, cbSceneParam._m0[_2027].z, fma(_1988, cbSceneParam._m0[_2027].y, _1984 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1996, cbSceneParam._m0[_2035].w, fma(_1992, cbSceneParam._m0[_2035].z, fma(_1988, cbSceneParam._m0[_2035].y, _1984 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_1996, cbSceneParam._m0[_2051].w, fma(_1992, cbSceneParam._m0[_2051].z, fma(_1988, cbSceneParam._m0[_2051].y, _1984 * cbSceneParam._m0[_2051].x)));
        float _2079 = cbSceneParam._m0[33u].z * _2074;
        float _2081 = cbSceneParam._m0[33u].w * _2074;
        float _2084 = fma(_1996, cbSceneParam._m0[_2043].w, fma(_1992, cbSceneParam._m0[_2043].z, fma(_1988, cbSceneParam._m0[_2043].y, _1984 * cbSceneParam._m0[_2043].x))) / _2074;
        float _2132 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
        float _4401 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2139 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2062) / _2074, (_2081 + _2066) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2062) / _2074, (_2066 - _2079) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2079) / _2074, (_2066 - _2081) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2081) / _2074, (_2079 + _2066) / _2074), _2084), 0.0)).x), vec4(0.25)));
        _2146 = 1.0 - (_2139 * cbSceneParam._m0[34u].x);
        _2147 = 1.0 - (_2139 * cbSceneParam._m0[34u].y);
        _2148 = 1.0 - (_2139 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2146 = 1.0;
        _2147 = 1.0;
        _2148 = 1.0;
    }
    float _2212;
    float _2214;
    float _2216;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2200 = fma(_1996, cbSceneParam._m0[63u].w, fma(_1992, cbSceneParam._m0[63u].z, fma(_1988, cbSceneParam._m0[63u].y, _1984 * cbSceneParam._m0[63u].x)));
        float _2201 = fma(_1996, cbSceneParam._m0[60u].w, fma(_1992, cbSceneParam._m0[60u].z, fma(_1988, cbSceneParam._m0[60u].y, _1984 * cbSceneParam._m0[60u].x))) / _2200;
        float _2202 = fma(_1996, cbSceneParam._m0[61u].w, fma(_1992, cbSceneParam._m0[61u].z, fma(_1988, cbSceneParam._m0[61u].y, _1984 * cbSceneParam._m0[61u].x))) / _2200;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2201 >= cbSceneParam._m0[64u].x) && (_2202 >= cbSceneParam._m0[64u].y)) && (_2201 <= cbSceneParam._m0[64u].z)) && (_2202 <= cbSceneParam._m0[64u].w))
        {
            float _2538 = fma(_1996, cbSceneParam._m0[62u].w, fma(_1992, cbSceneParam._m0[62u].z, fma(_1988, cbSceneParam._m0[62u].y, _1984 * cbSceneParam._m0[62u].x))) / _2200;
            float _2542 = isnan(cbSceneParam._m0[41u].w) ? _2538 : (isnan(_2538) ? cbSceneParam._m0[41u].w : max(_2538, cbSceneParam._m0[41u].w));
            float _2585 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
            float _4417 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
            float _2592 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2201, cbSceneParam._m0[33u].w + _2202), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2201, _2202 - cbSceneParam._m0[33u].z), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].z, _2202 - cbSceneParam._m0[33u].w), _2542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2202), _2542), 0.0)).x), vec4(0.25)));
            float _2596 = 1.0 - (_2592 * cbSceneParam._m0[34u].x);
            float _2597 = 1.0 - (_2592 * cbSceneParam._m0[34u].y);
            float _2598 = 1.0 - (_2592 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2598) ? _2148 : (isnan(_2148) ? _2598 : min(_2148, _2598));
            frontier_phi_34_33_ladder_1 = isnan(_2597) ? _2147 : (isnan(_2147) ? _2597 : min(_2147, _2597));
            frontier_phi_34_33_ladder_2 = isnan(_2596) ? _2146 : (isnan(_2146) ? _2596 : min(_2146, _2596));
        }
        else
        {
            frontier_phi_34_33_ladder = _2148;
            frontier_phi_34_33_ladder_1 = _2147;
            frontier_phi_34_33_ladder_2 = _2146;
        }
        _2212 = frontier_phi_34_33_ladder_2;
        _2214 = frontier_phi_34_33_ladder_1;
        _2216 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2212 = _2146;
        _2214 = _2147;
        _2216 = _2148;
    }
    float _2256 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _930), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _938))).x));
    float _4443 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2261 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _930), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _938))).x));
    float _4454 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)));
    float _2264 = _2263 * _2212;
    float _2265 = _2263 * _2214;
    float _2266 = _2263 * _2216;
    uvec4 _2270 = floatBitsToUint(cbInstanceData._m0[_837 + 5u]);
    uint _2272 = _2270.x * 14u;
    uint _2273 = _2272 + 13u;
    float _2278 = _862 + (-1.0);
    float _2281 = (cbLight._m0[_2273].x * _2278) + 1.0;
    float _2282 = (cbLight._m0[_2273].y * _2278) + 1.0;
    uint _2283 = _2272 + 5u;
    float _2289 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2293 = _2272 + 4u;
    float _2302 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2306 = _2272 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_797, _798, _799));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_797, _798, _799));
    float _4475 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4486 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2283].x * _2289) * _2327) + (((cbLight._m0[_2293].x * _2264) * _2302) * _2325);
    float _2335 = ((_2289 * cbLight._m0[_2283].y) * _2327) + (((cbLight._m0[_2293].y * _2265) * _2302) * _2325);
    float _2336 = ((_2289 * cbLight._m0[_2283].z) * _2327) + (((cbLight._m0[_2293].z * _2266) * _2302) * _2325);
    uint _2338 = _2272 + 8u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _678) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2272].x + _754;
    float _2354 = cbLight._m0[_2272].y + _755;
    float _2355 = cbLight._m0[_2272].z + _756;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2272].xyz));
    float _4497 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _4508 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2367 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2368 = dot(vec3(_797, _798, _799), vec3(_2360, _2361, _2362));
    float _4519 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2360, _2361, _2362));
    float _4530 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2352 * _2352;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2392 = 1.0 - _2352;
    float _2403 = (0.5 / (((_2367 * ((_2366 * _2392) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2392) + _2352) * _2366))) * _2366;
    float _4541 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    uint _2419 = _2272 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _678) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2306].x + _754;
    float _2433 = cbLight._m0[_2306].y + _755;
    float _2434 = cbLight._m0[_2306].z + _756;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2306].xyz));
    float _4552 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2446 = dot(vec3(_797, _798, _799), vec3(_2439, _2440, _2441));
    float _4563 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2439, _2440, _2441));
    float _4574 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2468 = 1.0 - _2431;
    float _2478 = (0.5 / (((_2367 * ((_2445 * _2468) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2468) + _2431) * _2445))) * _2445;
    float _4585 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2490 = (((_2467 * cbLight._m0[_2419].x) * _2480) * _2289) + ((((cbLight._m0[_2338].x * _2264) * _2391) * _2405) * _2302);
    float _2491 = (((_2467 * cbLight._m0[_2419].y) * _2480) * _2289) + ((((cbLight._m0[_2338].y * _2265) * _2391) * _2405) * _2302);
    float _2492 = (((_2467 * cbLight._m0[_2419].z) * _2480) * _2289) + ((((cbLight._m0[_2338].z * _2266) * _2391) * _2405) * _2302);
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_2270.y == 0u)
    {
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2638;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2638;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2638;
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2654)));
        float _2675 = (log2(_2641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            uint _3119 = 0u;
            uint _3128;
            bool _3129;
            for (;;)
            {
                _3128 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                _3129 = _3128 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_3129)
                {
                    frontier_phi_58_pred = _3116;
                    frontier_phi_58_pred_1 = _3115;
                    frontier_phi_58_pred_2 = _3114;
                    frontier_phi_58_pred_3 = _3113;
                    frontier_phi_58_pred_4 = _3117;
                    frontier_phi_58_pred_5 = _3118;
                }
                else
                {
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    uint _3264;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3128;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    for (;;)
                    {
                        uint _3268 = uint(findLSB(_3264)) + (_3119 << 5u);
                        uint _3265 = (_3264 + 4294967295u) & _3264;
                        uint _3270 = _3268 * 48u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3290 = (_3268 * 48u) + 4u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3309 = (_3268 * 48u) + 8u;
                        vec3 _3320 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x));
                        float _3324 = _3284.x - _2639;
                        float _3325 = _3284.y - _2640;
                        float _3326 = _3284.z - _2641;
                        float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                        float _3330 = inversesqrt(_3327);
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3334 = dot(vec3(_818, _821, _824), vec3(_3331, _3332, _3333));
                        float _3339 = 1.0 - (_3327 * _3284.w);
                        float _4606 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3340 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3341 = sqrt(_3327) * _3303.w;
                        float _3344 = 1.39999997615814208984375 / (_3341 + 1.39999997615814208984375);
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3334) + _3345;
                        float _3351 = _3341 * _3341;
                        float _3355 = ((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3340) / ((_3351 * 0.699999988079071044921875) + 1.0);
                        float _3359 = (-0.0) - _2639;
                        float _3360 = (-0.0) - _2640;
                        float _3361 = (-0.0) - _2641;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3375 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _886;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3366 + _3331;
                        float _3387 = _3367 + _3332;
                        float _3388 = _3368 + _3333;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_818, _821, _824), vec3(_3366, _3367, _3368));
                        float _4622 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3400 = dot(vec3(_818, _821, _824), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4633 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3344 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3334) + _3409;
                        float _4644 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4655 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3407 * _3407) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125))) * _3340;
                        _3193 = (_3355 * _3303.x) + _3261;
                        _3194 = (_3355 * _3303.y) + _3262;
                        _3195 = (_3355 * _3303.z) + _3263;
                        _3190 = (_3435 * _3320.x) + _3258;
                        _3191 = (_3435 * _3320.y) + _3259;
                        _3192 = (_3435 * _3320.z) + _3260;
                        if (_3265 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3258 = _3190;
                            _3259 = _3191;
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3265;
                        }
                    }
                    frontier_phi_58_pred = _3193;
                    frontier_phi_58_pred_1 = _3192;
                    frontier_phi_58_pred_2 = _3191;
                    frontier_phi_58_pred_3 = _3190;
                    frontier_phi_58_pred_4 = _3194;
                    frontier_phi_58_pred_5 = _3195;
                }
                _2919 = frontier_phi_58_pred;
                _2917 = frontier_phi_58_pred_1;
                _2915 = frontier_phi_58_pred_2;
                _2913 = frontier_phi_58_pred_3;
                _2921 = frontier_phi_58_pred_4;
                _2923 = frontier_phi_58_pred_5;
                uint _3120 = _3119 + 1u;
                if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3113 = _2913;
                    _3114 = _2915;
                    _3115 = _2917;
                    _3116 = _2919;
                    _3117 = _2921;
                    _3118 = _2923;
                    _3119 = _3120;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((4294967295u << _2929) & _2685) == 0u)
        {
            _3081 = _2912;
            _3083 = _2914;
            _3085 = _2916;
            _3087 = _2918;
            _3089 = _2920;
            _3091 = _2922;
        }
        else
        {
            float _3106 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
            float _3107 = _3106 * _2639;
            float _3108 = _3106 * _2640;
            float _3109 = _3106 * _2641;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3241 = _2912;
                float _3242 = _2914;
                float _3243 = _2916;
                float _3244 = _2918;
                float _3245 = _2920;
                float _3246 = _2922;
                uint _3247 = _2929;
                uint _3256;
                bool _3257;
                for (;;)
                {
                    _3256 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                    _3257 = _3256 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_3257)
                    {
                        frontier_phi_64_pred = _3244;
                        frontier_phi_64_pred_1 = _3243;
                        frontier_phi_64_pred_2 = _3242;
                        frontier_phi_64_pred_3 = _3241;
                        frontier_phi_64_pred_4 = _3246;
                        frontier_phi_64_pred_5 = _3245;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3453 = _3241;
                        float _3454 = _3242;
                        float _3455 = _3243;
                        float _3456 = _3244;
                        float _3457 = _3245;
                        float _3458 = _3246;
                        uint _3459 = _3256;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3528;
                        vec4 _3543;
                        float _3589;
                        bool _3590;
                        for (;;)
                        {
                            uint _3470 = ((_3247 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3515 = (_3470 * 40u) + 16u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3470 * 40u) + 20u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3470 * 40u) + 24u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3564 = (_3470 * 40u) + 28u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3589 = fma(_2641, _3577.z, fma(_2640, _3577.y, _3577.x * _2639)) + _3577.w;
                            _3590 = !((fma(_2641, _3558.z, fma(_2640, _3558.y, _3558.x * _2639)) + _3558.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_3590)
                            {
                                float _3617 = _3485.x - _2639;
                                float _3618 = _3485.y - _2640;
                                float _3619 = _3485.z - _2641;
                                float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                                float _3623 = inversesqrt(_3620);
                                float _3624 = _3623 * _3617;
                                float _3625 = _3623 * _3618;
                                float _3626 = _3623 * _3619;
                                float _3630 = 1.0 - (_3620 / (_3486 * _3486));
                                float _4666 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3635 = sqrt(_3620) * _3501.w;
                                float _3637 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                                float _3638 = _3637 * _3637;
                                float _3641 = ((1.0 - _3638) * dot(vec3(_3624, _3625, _3626), vec3(_818, _821, _824))) + _3638;
                                float _3644 = _3635 * _3635;
                                float _3648 = (fma(_2641, _3528.z, fma(_2640, _3528.y, _3528.x * _2639)) + _3528.w) / _3589;
                                float _3649 = (fma(_2641, _3543.z, fma(_2640, _3543.y, _3543.x * _2639)) + _3543.w) / _3589;
                                float _3653 = 1.0 - dot(vec2(_3648, _3649), vec2(_3648, _3649));
                                float _4682 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3655 = _3654 * (((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3631) / ((_3644 * 0.699999988079071044921875) + 1.0));
                                float _3667 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                                float _3668 = 1.0 - _886;
                                float _3675 = sqrt(1.0 - ((1.0 - (_3668 * _3668)) * (1.0 - (_3667 * _3667))));
                                float _3676 = _3675 * _3675;
                                float _3677 = _3676 * _3676;
                                float _3678 = _3624 - _3107;
                                float _3679 = _3625 - _3108;
                                float _3680 = _3626 - _3109;
                                float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                                float _3688 = dot(vec3(_818, _821, _824), vec3((-0.0) - _3107, (-0.0) - _3108, (-0.0) - _3109));
                                float _4693 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3692 = dot(vec3(_818, _821, _824), vec3(_3684 * _3678, _3684 * _3679, _3684 * _3680));
                                float _4704 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3699 = ((_3695 * _3695) * (_3677 + (-1.0))) + 1.0;
                                float _3700 = _3637 * _3676;
                                float _3701 = _3700 * _3700;
                                float _3707 = ((1.0 - _3701) * dot(vec3(_818, _821, _824), vec3(_3624, _3625, _3626))) + _3701;
                                float _4715 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3709 = 1.0 - _3676;
                                float _3719 = (0.5 / (((_3708 * ((_3691 * _3709) + _3676)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3676) * _3691))) * _3708;
                                float _4726 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3729 = (_3654 * _3631) * (((_3677 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3699 * _3699) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3655 * _3501.x;
                                frontier_phi_70_pred_1 = _3729 * _3513.z;
                                frontier_phi_70_pred_2 = _3729 * _3513.y;
                                frontier_phi_70_pred_3 = _3729 * _3513.x;
                                frontier_phi_70_pred_4 = _3655 * _3501.z;
                                frontier_phi_70_pred_5 = _3655 * _3501.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3736 = frontier_phi_70_pred;
                            _3735 = frontier_phi_70_pred_1;
                            _3734 = frontier_phi_70_pred_2;
                            _3733 = frontier_phi_70_pred_3;
                            _3738 = frontier_phi_70_pred_4;
                            _3737 = frontier_phi_70_pred_5;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _3443;
                        frontier_phi_64_pred_1 = _3442;
                        frontier_phi_64_pred_2 = _3441;
                        frontier_phi_64_pred_3 = _3440;
                        frontier_phi_64_pred_4 = _3445;
                        frontier_phi_64_pred_5 = _3444;
                    }
                    _3088 = frontier_phi_64_pred;
                    _3086 = frontier_phi_64_pred_1;
                    _3084 = frontier_phi_64_pred_2;
                    _3082 = frontier_phi_64_pred_3;
                    _3092 = frontier_phi_64_pred_4;
                    _3090 = frontier_phi_64_pred_5;
                    uint _3248 = _3247 + 1u;
                    if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3241 = _3082;
                        _3242 = _3084;
                        _3243 = _3086;
                        _3244 = _3088;
                        _3245 = _3090;
                        _3246 = _3092;
                        _3247 = _3248;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _3092;
                frontier_phi_51_52_ladder_1 = _3090;
                frontier_phi_51_52_ladder_2 = _3086;
                frontier_phi_51_52_ladder_3 = _3084;
                frontier_phi_51_52_ladder_4 = _3088;
                frontier_phi_51_52_ladder_5 = _3082;
            }
            else
            {
                frontier_phi_51_52_ladder = _2922;
                frontier_phi_51_52_ladder_1 = _2920;
                frontier_phi_51_52_ladder_2 = _2916;
                frontier_phi_51_52_ladder_3 = _2914;
                frontier_phi_51_52_ladder_4 = _2918;
                frontier_phi_51_52_ladder_5 = _2912;
            }
            _3081 = frontier_phi_51_52_ladder_5;
            _3083 = frontier_phi_51_52_ladder_3;
            _3085 = frontier_phi_51_52_ladder_2;
            _3087 = frontier_phi_51_52_ladder_4;
            _3089 = frontier_phi_51_52_ladder_1;
            _3091 = frontier_phi_51_52_ladder;
        }
        float _3096 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2698 = (_3096 * _3087) + _2334;
        _2700 = (_3096 * _3089) + _2335;
        _2702 = (_3096 * _3091) + _2336;
        _2704 = ((_3081 * 0.039999999105930328369140625) * _3096) + _2490;
        _2706 = ((_3083 * 0.039999999105930328369140625) * _3096) + _2491;
        _2708 = ((_3085 * 0.039999999105930328369140625) * _3096) + _2492;
    }
    else
    {
        _2698 = _2334;
        _2700 = _2335;
        _2702 = _2336;
        _2704 = _2490;
        _2706 = _2491;
        _2708 = _2492;
    }
    float _2728 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2729 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2730 = cbSceneParam._m0[86u].x * ((_762 / cbSceneParam._m0[86u].x) + ((_885 * cbMtdParam._m0[15u].w) * dot(vec3(_797, _798, _799), vec3(_229, _230, _231))));
    float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
    float _2732 = isnan(_2729) ? _763 : (isnan(_763) ? _2729 : min(_763, _2729));
    vec4 _2734 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2731, _2732), 0.0);
    float _2736 = _2734.x;
    bool _2757 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2736)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2736))) > _697;
    float _2758 = _2757 ? _2731 : _762;
    float _2759 = _2757 ? _2732 : _763;
    vec4 _2761 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2758, _2759));
    vec4 _2766 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2758, _2759));
    float _2768 = _2766.x;
    float _2788 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2768)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2768))) - _697;
    bool _2797 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2801 = (isnan(_2788) ? 0.0 : (isnan(0.0) ? _2788 : max(0.0, _2788))) * (-1.44269502162933349609375);
    float _4757 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4768 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4779 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2828 = 0.959999978542327880859375 - (exp2(log2(1.0 - _877) * 5.0) * 0.959999978542327880859375);
    float _2831 = ((_2761.x * _2828) * exp2(_2801 * (_2797 ? 0.0 : (cbMtdParam._m0[25u].x + cbMtdParam._m0[24u].y)))) * cbSceneParam._m0[72u].w;
    float _2834 = ((_2761.y * _2828) * exp2(_2801 * (_2797 ? 0.0 : (cbMtdParam._m0[25u].y + cbMtdParam._m0[24u].z)))) * cbSceneParam._m0[72u].w;
    float _2837 = ((_2761.z * _2828) * exp2(_2801 * (_2797 ? 0.0 : (cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].w)))) * cbSceneParam._m0[72u].w;
    float _2858 = _762 / cbSceneParam._m0[86u].x;
    float _2859 = _763 / cbSceneParam._m0[86u].y;
    vec4 _2873 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2875 = _2873.x;
    float _2876 = _2873.y;
    float _2877 = _2873.z;
    float _2878 = _2873.w;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2938 = _2937 / _697;
        float _2949 = _2938 * _747;
        float _2950 = _748 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2952 = _2938 * _749;
        float _2954 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2950;
        float _2962 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3203;
        if (abs((_2951 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3203 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2971 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3142 = 1.0 / cbSceneParam._m0[80u].x;
            float _3143 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3144 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            _3203 = ((abs(_2962 / _2951) * cbSceneParam._m0[80u].y) * ((((_3153 - _3154) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))))) * _3142)) - ((exp2(_2971 * _3153) - exp2(_2971 * _3154)) * _3142))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3205 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, 1.0), 0.0);
        float _3214 = exp2((_3203 * (-1.44269502162933349609375)) * (1.0 - _3205.w));
        float _3215 = log2(_3214);
        float _3231 = log2(_2878);
        _2973 = (exp2(_3231 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].x)) * _3205.x) / cbSceneParam._m0[78u].x)) + _2875;
        _2975 = (exp2(_3231 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].y)) * _3205.y) / cbSceneParam._m0[78u].y)) + _2876;
        _2977 = (exp2(_3231 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].z)) * _3205.z) / cbSceneParam._m0[78u].z)) + _2877;
        _2979 = _3214 * _2878;
    }
    else
    {
        _2973 = _2875;
        _2975 = _2876;
        _2977 = _2877;
        _2979 = _2878;
    }
    bool _2991 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2992 = log2(_2979);
    float _2999 = exp2(_2992 * cbSceneParam._m0[78u].x) * ((_2831 + (((((_1881 * (_1929.x / _1935)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1676) * _1950)) + _2704) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2698 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _862))) - _2831) * cbMtdParam._m0[16u].x));
    float _3000 = exp2(_2992 * cbSceneParam._m0[78u].y) * ((_2834 + (((((_1881 * (_1929.y / _1935)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1676) * _1950)) + _2706) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2700 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _862))) - _2834) * cbMtdParam._m0[16u].x));
    float _3001 = exp2(_2992 * cbSceneParam._m0[78u].z) * ((_2837 + (((((_1881 * (_1929.z / _1935)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1676) * _1950)) + _2708) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2702 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _862))) - _2837) * cbMtdParam._m0[16u].x));
    vec4 _3009 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_762, _763));
    float _3011 = _3009.x;
    float _3032 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3011)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3011))) - _697) * cbMtdParam._m0[15u].y;
    float _4830 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
    float _3034 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * cbInstanceData._m0[_837 + 6u].w;
    float _3043 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3043 * (_2991 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.y = _3043 * (_2991 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.z = _3043 * (_2991 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.w = _3034;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3034;
}


