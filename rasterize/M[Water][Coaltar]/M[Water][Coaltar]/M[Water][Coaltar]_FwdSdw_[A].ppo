#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1286;
float _3967;
float _3968;
float _3969;
float _3970;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _293 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_284 * cbMtdParam._m0[21u].x);
    float _294 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_284 * cbMtdParam._m0[21u].y);
    float _329 = (cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _284);
    float _330 = (cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _284);
    vec4 _342 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_1, SS_DiffuseMap), vec2((_329 * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (_330 * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _347 = _342.x * cbMtdParam._m0[9u].x;
    float _348 = _342.y * cbMtdParam._m0[9u].y;
    float _349 = _342.z * cbMtdParam._m0[9u].z;
    vec4 _368 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    float _384 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_293 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_294 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _3979 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _392 = (((_368.x * cbMtdParam._m0[10u].x) - _347) * _385) + _347;
    float _393 = (((_368.y * cbMtdParam._m0[10u].y) - _348) * _385) + _348;
    float _394 = (((_368.z * cbMtdParam._m0[10u].z) - _349) * _385) + _349;
    float _418 = TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625));
    float _420 = _418 * (cbMtdParam._m0[17u].y + 1.0);
    float _3990 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _431 = (((cbMtdParam._m0[11u].x - _392) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.x) * (_392 - cbMtdParam._m0[11u].x))) * _421) + _392;
    float _432 = (((cbMtdParam._m0[11u].y - _393) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.y) * (_393 - cbMtdParam._m0[11u].y))) * _421) + _393;
    float _433 = (((cbMtdParam._m0[11u].z - _394) + ((cbMtdParam._m0[14u].x * TEXCOORD_6.z) * (_394 - cbMtdParam._m0[11u].z))) * _421) + _394;
    vec4 _435 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _437 = _435.w;
    vec4 _471 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[19u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].z * _284)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[19u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].w * _284)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _473 = _471.z;
    vec4 _490 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_8, SS_BumpMap), vec2((((cbMtdParam._m0[20u].x * TEXCOORD.x) + (cbMtdParam._m0[19u].x * _284)) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((cbMtdParam._m0[20u].y * TEXCOORD.y) + (cbMtdParam._m0[19u].y * _284)) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _492 = _490.z;
    float _493 = isnan(_492) ? _473 : (isnan(_473) ? _492 : max(_473, _492));
    float _508 = (_431 * 2.0) + ((((cbMtdParam._m0[12u].x * _437) * _493) - _431) * _493);
    float _510 = (_432 * 2.0) + ((((cbMtdParam._m0[12u].y * _437) * _493) - _432) * _493);
    float _512 = (_433 * 2.0) + ((((cbMtdParam._m0[12u].z * _437) * _493) - _433) * _493);
    vec4 _525 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    float _532 = (_525.x * 2.0) + (-1.0);
    float _534 = (_525.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_532, _534), vec2(_532, _534));
    float _4006 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    vec4 _556 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _329) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _330) + cbTextureTilingScale._m0[3u].w));
    float _563 = (_556.x * 2.0) + (-1.0);
    float _564 = (_556.y * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _4017 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))));
    float _572 = cbMtdParam._m0[14u].y + _556.z;
    float _581 = _418 * (cbMtdParam._m0[16u].w + 1.0);
    float _4028 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = ((((cbMtdParam._m0[14u].z + _525.z) - _572) * _385) + _572) + ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * cbMtdParam._m0[15u].z);
    float _591 = (_385 * (_532 - _563)) + _563;
    float _592 = (_385 * (_534 - _564)) + _564;
    float _593 = (_385 * (sqrt(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) - _570)) + _570;
    vec4 _615 = texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_9, SS_BumpMap), vec2((((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _621 = (_615.x * 2.0) + (-1.0);
    float _622 = (_615.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _4039 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _646 = ((((_621 - _591) + (_621 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _591)) * _421) + _591;
    float _647 = ((((_622 - _592) + (_622 * cbMtdParam._m0[14u].w)) + (cbMtdParam._m0[13u].z * _592)) * _421) + _592;
    float _648 = (_421 * (sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) - _593)) + _593;
    float _668 = fma(_648, _239 * NORMAL.x, fma(_647, _246 * TANGENT.x, _646 * _233));
    float _671 = fma(_648, _239 * NORMAL.y, fma(_647, _246 * TANGENT.y, _646 * _234));
    float _674 = fma(_648, _239 * NORMAL.z, fma(_647, _246 * TANGENT.z, _646 * _235));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _4050 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _682 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4072 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4083 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    vec4 _765 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _767 = _765.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _966 = sqrt(((_751 * _751) + (_752 * _752)) + (_753 * _753));
        float _972 = (cbMatDynParam._m0[5u].x * _966) + cbMatDynParam._m0[5u].y;
        float _4094 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _977 = (cbMatDynParam._m0[5u].z * _966) + cbMatDynParam._m0[5u].w;
        float _4105 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) - _973)) + _973) < ((_767 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _782 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _791 = (_782.x * 2.0) + (-1.0);
    float _792 = (_782.y * 2.0) + (-1.0);
    float _793 = (_782.z * 2.0) + (-1.0);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _808 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _782.w;
    float _815 = (((_791 * _797) - _679) * _808) + _679;
    float _816 = (((_792 * _797) - _680) * _808) + _680;
    float _817 = (((_793 * _797) - _681) * _808) + _681;
    float _835 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, _815 * cbSceneParam._m0[5u].x));
    float _838 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, _815 * cbSceneParam._m0[6u].x));
    float _841 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, _815 * cbSceneParam._m0[7u].x));
    uint _854 = uint(roundEven(NORMAL.w)) * 13u;
    uint _855 = _854 + 9u;
    uint _856 = _855 + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_856].z;
    float _4116 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _879 = _876.x * TEXCOORD_3.w;
    float _880 = dot(vec3(_815, _816, _817), vec3(_758, _759, _760));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _815) - _758;
    float _888 = (_883 * _816) - _759;
    float _889 = (_883 * _817) - _760;
    float _893 = abs(dot(vec3(_758, _759, _760), vec3(_815, _816, _817)));
    float _4149 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _902 = 10.0 / (_701 + 10.0);
    float _903 = sqrt(_682);
    float _915 = exp2((_903 * 5.0) * log2(1.0 - (_894 * 0.999000012874603271484375))) / (4.0 - (_903 * 3.0));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1010 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _1014 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _1018 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1043 = _947 + _815;
        float _1044 = _951 + _816;
        float _1045 = _955 + _817;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1010;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1014;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1018;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1010 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1014 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1018 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_815, _816, _817), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _4197 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_815, _816, _817), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4230 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_815, _816, _817), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4263 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1333 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1337 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1360 = _947 + _815;
        float _1361 = _951 + _816;
        float _1362 = _955 + _817;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_815, _816, _817), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4326 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_815, _816, _817), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4359 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_815, _816, _817), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4392 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = _1286;
        _1605 = _1286;
        _1606 = _1286;
        _1607 = _1286;
        _1608 = _1286;
        _1609 = _1286;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1298)) + _1298;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1299)) + _1299;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1300)) + _1300;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _887 * 0.5;
    float _1667 = _888 * 0.5;
    float _1668 = _889 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1796 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1799 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1827 = frontier_phi_17_15_ladder;
        }
        float _2053;
        if (_1796 > 0.0)
        {
            _2053 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2053 = frontier_phi_26_22_ladder;
        }
        float _2546;
        if (_1799 > 0.0)
        {
            _2546 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2546 = frontier_phi_38_33_ladder;
        }
        float _2548 = isnan(_2053) ? _1827 : (isnan(_1827) ? _2053 : min(_1827, _2053));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1793) + _1782;
        float _2554 = (_2549 * _1796) + _1786;
        float _2555 = (_2549 * _1799) + _1790;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2556;
        float _2560 = _2556 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 > _2560) || ((_2554 < _2558) || ((_2553 < _2558) || (_2553 > _2560))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2555, cbModelParam._m0[9u].z, fma(_2554, cbModelParam._m0[9u].y, _2553 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2555, cbModelParam._m0[10u].z, fma(_2554, cbModelParam._m0[10u].y, _2553 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2555, cbModelParam._m0[11u].z, fma(_2554, cbModelParam._m0[11u].y, _2553 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_16_38_ladder = _2951.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2951.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2951.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_16_38_ladder_2;
        _1817 = frontier_phi_16_38_ladder_1;
        _1819 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1891 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1894 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2058;
        if (_1888 > 0.0)
        {
            _2058 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2058 = frontier_phi_28_24_ladder;
        }
        float _2573;
        if (_1891 > 0.0)
        {
            _2573 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2573 = frontier_phi_40_35_ladder;
        }
        float _3111;
        if (_1894 > 0.0)
        {
            _3111 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _3111 = frontier_phi_52_47_ladder;
        }
        float _3113 = isnan(_2573) ? _2058 : (isnan(_2058) ? _2573 : min(_2058, _2573));
        float _3114 = isnan(_3111) ? _3113 : (isnan(_3113) ? _3111 : min(_3113, _3111));
        float _3118 = (_3114 * _1888) + _1877;
        float _3119 = (_3114 * _1891) + _1881;
        float _3120 = (_3114 * _1894) + _1885;
        float _3121 = _3114 * 9.9999997473787516355514526367188e-05;
        float _3122 = (-1.0) - _3121;
        float _3124 = _3121 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_3120 > _3124) || ((_3120 < _3122) || ((_3119 > _3124) || ((_3119 < _3122) || ((_3118 < _3122) || (_3118 > _3124))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3257 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3120, cbModelParam._m0[17u].z, fma(_3119, cbModelParam._m0[17u].y, _3118 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3120, cbModelParam._m0[18u].z, fma(_3119, cbModelParam._m0[18u].y, _3118 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3120, cbModelParam._m0[19u].z, fma(_3119, cbModelParam._m0[19u].y, _3118 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_25_52_ladder = _3257.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _3257.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _3257.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_25_52_ladder_2;
        _1915 = frontier_phi_25_52_ladder_1;
        _1917 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1824);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _915) * ((_903 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_915 * _903)) * _879;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1952 = _779 / cbSceneParam._m0[86u].x;
    float _1960 = (cbSceneParam._m0[88u].y * (1.0 - _682)) + cbSceneParam._m0[88u].z;
    float _4518 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 5.0;
    float _1967 = (_902 * cbMtdParam._m0[15u].x) * dot(vec3(_815, _816, _817), vec3(1.0, 0.0, 0.0));
    vec4 _1977 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1967 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1967 + _1952) * cbSceneParam._m0[86u].x, _780), _1962).w) + _1952) * cbSceneParam._m0[86u].x, _780), _1962);
    float _1982 = _1977.w;
    float _1983 = isnan(0.5) ? _1982 : (isnan(_1982) ? 0.5 : max(_1982, 0.5));
    float _1998 = 1.0 - (_1982 / _1983);
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2045 = _2032 / _2044;
    float _2046 = _2036 / _2044;
    float _2047 = _2040 / _2044;
    float _2194;
    float _2195;
    float _2196;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2074 = ((uint(_2047 > cbSceneParam._m0[59u].y) + uint(_2047 > cbSceneParam._m0[59u].x)) + uint(_2047 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2075 = _2074 + 43u;
        uint _2083 = _2074 + 44u;
        uint _2091 = _2074 + 45u;
        uint _2099 = _2074 + 46u;
        float _2110 = fma(_2044, cbSceneParam._m0[_2075].w, fma(_2040, cbSceneParam._m0[_2075].z, fma(_2036, cbSceneParam._m0[_2075].y, _2032 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2044, cbSceneParam._m0[_2083].w, fma(_2040, cbSceneParam._m0[_2083].z, fma(_2036, cbSceneParam._m0[_2083].y, _2032 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2044, cbSceneParam._m0[_2099].w, fma(_2040, cbSceneParam._m0[_2099].z, fma(_2036, cbSceneParam._m0[_2099].y, _2032 * cbSceneParam._m0[_2099].x)));
        float _2127 = cbSceneParam._m0[33u].z * _2122;
        float _2129 = cbSceneParam._m0[33u].w * _2122;
        float _2132 = fma(_2044, cbSceneParam._m0[_2091].w, fma(_2040, cbSceneParam._m0[_2091].z, fma(_2036, cbSceneParam._m0[_2091].y, _2032 * cbSceneParam._m0[_2091].x))) / _2122;
        float _2180 = (cbSceneParam._m0[33u].x - sqrt(((_2046 * _2046) + (_2045 * _2045)) + (_2047 * _2047))) * cbSceneParam._m0[33u].y;
        float _4534 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2187 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 + _2110) / _2122, (_2129 + _2114) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2110) / _2122, (_2114 - _2127) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 - _2127) / _2122, (_2114 - _2129) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 - _2129) / _2122, (_2127 + _2114) / _2122), _2132), 0.0)).x), vec4(0.25)));
        _2194 = 1.0 - (_2187 * cbSceneParam._m0[34u].x);
        _2195 = 1.0 - (_2187 * cbSceneParam._m0[34u].y);
        _2196 = 1.0 - (_2187 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2194 = 1.0;
        _2195 = 1.0;
        _2196 = 1.0;
    }
    float _2260;
    float _2262;
    float _2264;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2248 = fma(_2044, cbSceneParam._m0[63u].w, fma(_2040, cbSceneParam._m0[63u].z, fma(_2036, cbSceneParam._m0[63u].y, _2032 * cbSceneParam._m0[63u].x)));
        float _2249 = fma(_2044, cbSceneParam._m0[60u].w, fma(_2040, cbSceneParam._m0[60u].z, fma(_2036, cbSceneParam._m0[60u].y, _2032 * cbSceneParam._m0[60u].x))) / _2248;
        float _2250 = fma(_2044, cbSceneParam._m0[61u].w, fma(_2040, cbSceneParam._m0[61u].z, fma(_2036, cbSceneParam._m0[61u].y, _2032 * cbSceneParam._m0[61u].x))) / _2248;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2249 >= cbSceneParam._m0[64u].x) && (_2250 >= cbSceneParam._m0[64u].y)) && (_2249 <= cbSceneParam._m0[64u].z)) && (_2250 <= cbSceneParam._m0[64u].w))
        {
            float _2586 = fma(_2044, cbSceneParam._m0[62u].w, fma(_2040, cbSceneParam._m0[62u].z, fma(_2036, cbSceneParam._m0[62u].y, _2032 * cbSceneParam._m0[62u].x))) / _2248;
            float _2590 = isnan(cbSceneParam._m0[41u].w) ? _2586 : (isnan(_2586) ? cbSceneParam._m0[41u].w : max(_2586, cbSceneParam._m0[41u].w));
            float _2633 = (cbSceneParam._m0[33u].x - sqrt(((_2046 * _2046) + (_2045 * _2045)) + (_2047 * _2047))) * cbSceneParam._m0[33u].y;
            float _4550 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
            float _2640 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2249, cbSceneParam._m0[33u].w + _2250), _2590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2249, _2250 - cbSceneParam._m0[33u].z), _2590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2249 - cbSceneParam._m0[33u].z, _2250 - cbSceneParam._m0[33u].w), _2590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2249 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2250), _2590), 0.0)).x), vec4(0.25)));
            float _2644 = 1.0 - (_2640 * cbSceneParam._m0[34u].x);
            float _2645 = 1.0 - (_2640 * cbSceneParam._m0[34u].y);
            float _2646 = 1.0 - (_2640 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2646) ? _2196 : (isnan(_2196) ? _2646 : min(_2196, _2646));
            frontier_phi_37_36_ladder_1 = isnan(_2645) ? _2195 : (isnan(_2195) ? _2645 : min(_2195, _2645));
            frontier_phi_37_36_ladder_2 = isnan(_2644) ? _2194 : (isnan(_2194) ? _2644 : min(_2194, _2644));
        }
        else
        {
            frontier_phi_37_36_ladder = _2196;
            frontier_phi_37_36_ladder_1 = _2195;
            frontier_phi_37_36_ladder_2 = _2194;
        }
        _2260 = frontier_phi_37_36_ladder_2;
        _2262 = frontier_phi_37_36_ladder_1;
        _2264 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2260 = _2194;
        _2262 = _2195;
        _2264 = _2196;
    }
    float _2304 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _947), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _955))).x));
    float _4576 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2309 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _947), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _955))).x));
    float _4587 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)));
    float _2312 = _2311 * _2260;
    float _2313 = _2311 * _2262;
    float _2314 = _2311 * _2264;
    uvec4 _2318 = floatBitsToUint(cbInstanceData._m0[_854 + 5u]);
    uint _2320 = _2318.x * 14u;
    uint _2321 = _2320 + 13u;
    float _2326 = _879 + (-1.0);
    float _2329 = (cbLight._m0[_2321].x * _2326) + 1.0;
    float _2330 = (cbLight._m0[_2321].y * _2326) + 1.0;
    uint _2331 = _2320 + 5u;
    float _2337 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
    uint _2341 = _2320 + 4u;
    float _2350 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2354 = _2320 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_815, _816, _817));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_815, _816, _817));
    float _4608 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4619 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2312) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2313) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2314) * _2350) * _2373);
    uint _2386 = _2320 + 8u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _682) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2320].x + _758;
    float _2402 = cbLight._m0[_2320].y + _759;
    float _2403 = cbLight._m0[_2320].z + _760;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2320].xyz));
    float _4630 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _4641 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2415 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2416 = dot(vec3(_815, _816, _817), vec3(_2408, _2409, _2410));
    float _4652 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2420 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2408, _2409, _2410));
    float _4663 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2424 = _2400 * _2400;
    float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
    float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2440 = 1.0 - _2400;
    float _2451 = (0.5 / (((_2415 * ((_2414 * _2440) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2440) + _2400) * _2414))) * _2414;
    float _4674 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
    uint _2467 = _2320 + 9u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _682) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2354].x + _758;
    float _2481 = cbLight._m0[_2354].y + _759;
    float _2482 = cbLight._m0[_2354].z + _760;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2354].xyz));
    float _4685 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2494 = dot(vec3(_815, _816, _817), vec3(_2487, _2488, _2489));
    float _4696 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2487, _2488, _2489));
    float _4707 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2479 * _2479;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2516 = 1.0 - _2479;
    float _2526 = (0.5 / (((_2415 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2415 * _2516) + _2479) * _2493))) * _2493;
    float _4718 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    float _2538 = (((_2515 * cbLight._m0[_2467].x) * _2528) * _2337) + ((((cbLight._m0[_2386].x * _2312) * _2439) * _2453) * _2350);
    float _2539 = (((_2515 * cbLight._m0[_2467].y) * _2528) * _2337) + ((((cbLight._m0[_2386].y * _2313) * _2439) * _2453) * _2350);
    float _2540 = (((_2515 * cbLight._m0[_2467].z) * _2528) * _2337) + ((((cbLight._m0[_2386].z * _2314) * _2439) * _2453) * _2350);
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2318.y == 0u)
    {
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2686;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2686;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2686;
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2702)));
        float _2723 = (log2(_2689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
        }
        else
        {
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            uint _3175 = 0u;
            uint _3184;
            bool _3185;
            for (;;)
            {
                _3184 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                _3185 = _3184 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3185)
                {
                    frontier_phi_63_pred = _3174;
                    frontier_phi_63_pred_1 = _3173;
                    frontier_phi_63_pred_2 = _3172;
                    frontier_phi_63_pred_3 = _3171;
                    frontier_phi_63_pred_4 = _3170;
                    frontier_phi_63_pred_5 = _3169;
                }
                else
                {
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    uint _3341;
                    _3335 = _3169;
                    _3336 = _3170;
                    _3337 = _3171;
                    _3338 = _3172;
                    _3339 = _3173;
                    _3340 = _3174;
                    _3341 = _3184;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    for (;;)
                    {
                        uint _3345 = uint(findLSB(_3341)) + (_3175 << 5u);
                        uint _3342 = (_3341 + 4294967295u) & _3341;
                        uint _3347 = _3345 * 48u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3367 = (_3345 * 48u) + 4u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3386 = (_3345 * 48u) + 8u;
                        vec3 _3397 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x));
                        float _3401 = _3361.x - _2687;
                        float _3402 = _3361.y - _2688;
                        float _3403 = _3361.z - _2689;
                        float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                        float _3407 = inversesqrt(_3404);
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3411 = dot(vec3(_835, _838, _841), vec3(_3408, _3409, _3410));
                        float _3416 = 1.0 - (_3404 * _3361.w);
                        float _4739 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3418 = sqrt(_3404) * _3380.w;
                        float _3421 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3411) + _3422;
                        float _3428 = _3418 * _3418;
                        float _3432 = ((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3417) / ((_3428 * 0.699999988079071044921875) + 1.0);
                        float _3436 = (-0.0) - _2687;
                        float _3437 = (-0.0) - _2688;
                        float _3438 = (-0.0) - _2689;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3452 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                        float _3453 = 1.0 - _903;
                        float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                        float _3461 = _3460 * _3460;
                        float _3462 = _3461 * _3461;
                        float _3463 = _3443 + _3408;
                        float _3464 = _3444 + _3409;
                        float _3465 = _3445 + _3410;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3473 = dot(vec3(_835, _838, _841), vec3(_3443, _3444, _3445));
                        float _4755 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3477 = dot(vec3(_835, _838, _841), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                        float _4766 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                        float _3485 = _3421 * _3461;
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3411) + _3486;
                        float _4777 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3491 = 1.0 - _3461;
                        float _3501 = (0.5 / (((_3490 * ((_3476 * _3491) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3461) * _3476))) * _3490;
                        float _4788 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3512 = (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3484 * _3484) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125))) * _3417;
                        _3265 = (_3432 * _3380.x) + _3338;
                        _3266 = (_3432 * _3380.y) + _3339;
                        _3267 = (_3432 * _3380.z) + _3340;
                        _3262 = (_3512 * _3397.x) + _3335;
                        _3263 = (_3512 * _3397.y) + _3336;
                        _3264 = (_3512 * _3397.z) + _3337;
                        if (_3342 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3335 = _3262;
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3342;
                        }
                    }
                    frontier_phi_63_pred = _3267;
                    frontier_phi_63_pred_1 = _3266;
                    frontier_phi_63_pred_2 = _3265;
                    frontier_phi_63_pred_3 = _3264;
                    frontier_phi_63_pred_4 = _3263;
                    frontier_phi_63_pred_5 = _3262;
                }
                _2971 = frontier_phi_63_pred;
                _2969 = frontier_phi_63_pred_1;
                _2967 = frontier_phi_63_pred_2;
                _2965 = frontier_phi_63_pred_3;
                _2963 = frontier_phi_63_pred_4;
                _2961 = frontier_phi_63_pred_5;
                uint _3176 = _3175 + 1u;
                if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3169 = _2961;
                    _3170 = _2963;
                    _3171 = _2965;
                    _3172 = _2967;
                    _3173 = _2969;
                    _3174 = _2971;
                    _3175 = _3176;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
        }
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.z;
        uint _2977 = (_2975 >> 8u) & 15u;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        if (((4294967295u << _2977) & _2733) == 0u)
        {
            _3137 = _2960;
            _3139 = _2962;
            _3141 = _2964;
            _3143 = _2966;
            _3145 = _2968;
            _3147 = _2970;
        }
        else
        {
            float _3162 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
            float _3163 = _3162 * _2687;
            float _3164 = _3162 * _2688;
            float _3165 = _3162 * _2689;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2977 < ((_2975 >> 12u) & 15u))
            {
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3318 = _2960;
                float _3319 = _2962;
                float _3320 = _2964;
                float _3321 = _2966;
                float _3322 = _2968;
                float _3323 = _2970;
                uint _3324 = _2977;
                uint _3333;
                bool _3334;
                for (;;)
                {
                    _3333 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                    _3334 = _3333 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3334)
                    {
                        frontier_phi_74_pred = _3322;
                        frontier_phi_74_pred_1 = _3321;
                        frontier_phi_74_pred_2 = _3320;
                        frontier_phi_74_pred_3 = _3319;
                        frontier_phi_74_pred_4 = _3318;
                        frontier_phi_74_pred_5 = _3323;
                    }
                    else
                    {
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3539 = _3318;
                        float _3540 = _3319;
                        float _3541 = _3320;
                        float _3542 = _3321;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        uint _3545 = _3333;
                        uint _3546;
                        vec4 _3571;
                        float _3572;
                        vec4 _3587;
                        vec3 _3599;
                        vec4 _3614;
                        vec4 _3629;
                        float _3675;
                        bool _3676;
                        for (;;)
                        {
                            uint _3556 = ((_3324 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3545));
                            _3546 = (_3545 + 4294967295u) & _3545;
                            uint _3558 = _3556 * 40u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            _3572 = _3571.w;
                            uint _3574 = (_3556 * 40u) + 4u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3556 * 40u) + 8u;
                            _3599 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x));
                            uint _3601 = (_3556 * 40u) + 16u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3556 * 40u) + 20u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3556 * 40u) + 24u;
                            vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3650 = (_3556 * 40u) + 28u;
                            vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            _3675 = fma(_2689, _3663.z, fma(_2688, _3663.y, _3663.x * _2687)) + _3663.w;
                            _3676 = !((fma(_2689, _3644.z, fma(_2688, _3644.y, _3644.x * _2687)) + _3644.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3676)
                            {
                                float _3703 = _3571.x - _2687;
                                float _3704 = _3571.y - _2688;
                                float _3705 = _3571.z - _2689;
                                float _3706 = dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705));
                                float _3709 = inversesqrt(_3706);
                                float _3710 = _3709 * _3703;
                                float _3711 = _3709 * _3704;
                                float _3712 = _3709 * _3705;
                                float _3716 = 1.0 - (_3706 / (_3572 * _3572));
                                float _4799 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3721 = sqrt(_3706) * _3587.w;
                                float _3723 = 1.39999997615814208984375 / (_3721 + 1.39999997615814208984375);
                                float _3724 = _3723 * _3723;
                                float _3727 = ((1.0 - _3724) * dot(vec3(_3710, _3711, _3712), vec3(_835, _838, _841))) + _3724;
                                float _3730 = _3721 * _3721;
                                float _3734 = (fma(_2689, _3614.z, fma(_2688, _3614.y, _3614.x * _2687)) + _3614.w) / _3675;
                                float _3735 = (fma(_2689, _3629.z, fma(_2688, _3629.y, _3629.x * _2687)) + _3629.w) / _3675;
                                float _3739 = 1.0 - dot(vec2(_3734, _3735), vec2(_3734, _3735));
                                float _4815 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3741 = _3740 * (((isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0))) * _3717) / ((_3730 * 0.699999988079071044921875) + 1.0));
                                float _3753 = exp2(log2(1.0 / ((_3730 * 3.5) + 5.0)) * 0.25);
                                float _3754 = 1.0 - _903;
                                float _3761 = sqrt(1.0 - ((1.0 - (_3754 * _3754)) * (1.0 - (_3753 * _3753))));
                                float _3762 = _3761 * _3761;
                                float _3763 = _3762 * _3762;
                                float _3764 = _3710 - _3163;
                                float _3765 = _3711 - _3164;
                                float _3766 = _3712 - _3165;
                                float _3770 = inversesqrt(dot(vec3(_3764, _3765, _3766), vec3(_3764, _3765, _3766)));
                                float _3774 = dot(vec3(_835, _838, _841), vec3((-0.0) - _3163, (-0.0) - _3164, (-0.0) - _3165));
                                float _4826 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3777 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3778 = dot(vec3(_835, _838, _841), vec3(_3770 * _3764, _3770 * _3765, _3770 * _3766));
                                float _4837 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3785 = ((_3781 * _3781) * (_3763 + (-1.0))) + 1.0;
                                float _3786 = _3723 * _3762;
                                float _3787 = _3786 * _3786;
                                float _3793 = ((1.0 - _3787) * dot(vec3(_835, _838, _841), vec3(_3710, _3711, _3712))) + _3787;
                                float _4848 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3795 = 1.0 - _3762;
                                float _3805 = (0.5 / (((_3794 * ((_3777 * _3795) + _3762)) + 9.9999999392252902907785028219223e-09) + (((_3794 * _3795) + _3762) * _3777))) * _3794;
                                float _4859 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3815 = (_3740 * _3717) * (((_3763 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3785 * _3785) * ((_3730 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3741 * _3587.z;
                                frontier_phi_80_pred_1 = _3741 * _3587.y;
                                frontier_phi_80_pred_2 = _3741 * _3587.x;
                                frontier_phi_80_pred_3 = _3815 * _3599.z;
                                frontier_phi_80_pred_4 = _3815 * _3599.y;
                                frontier_phi_80_pred_5 = _3815 * _3599.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3824 = frontier_phi_80_pred;
                            _3823 = frontier_phi_80_pred_1;
                            _3822 = frontier_phi_80_pred_2;
                            _3821 = frontier_phi_80_pred_3;
                            _3820 = frontier_phi_80_pred_4;
                            _3819 = frontier_phi_80_pred_5;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3526 = _3819 + _3539;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            if (_3546 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3546;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3530;
                        frontier_phi_74_pred_1 = _3529;
                        frontier_phi_74_pred_2 = _3528;
                        frontier_phi_74_pred_3 = _3527;
                        frontier_phi_74_pred_4 = _3526;
                        frontier_phi_74_pred_5 = _3531;
                    }
                    _3146 = frontier_phi_74_pred;
                    _3144 = frontier_phi_74_pred_1;
                    _3142 = frontier_phi_74_pred_2;
                    _3140 = frontier_phi_74_pred_3;
                    _3138 = frontier_phi_74_pred_4;
                    _3148 = frontier_phi_74_pred_5;
                    uint _3325 = _3324 + 1u;
                    if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3318 = _3138;
                        _3319 = _3140;
                        _3320 = _3142;
                        _3321 = _3144;
                        _3322 = _3146;
                        _3323 = _3148;
                        _3324 = _3325;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _3148;
                frontier_phi_54_55_ladder_1 = _3146;
                frontier_phi_54_55_ladder_2 = _3144;
                frontier_phi_54_55_ladder_3 = _3142;
                frontier_phi_54_55_ladder_4 = _3138;
                frontier_phi_54_55_ladder_5 = _3140;
            }
            else
            {
                frontier_phi_54_55_ladder = _2970;
                frontier_phi_54_55_ladder_1 = _2968;
                frontier_phi_54_55_ladder_2 = _2966;
                frontier_phi_54_55_ladder_3 = _2964;
                frontier_phi_54_55_ladder_4 = _2960;
                frontier_phi_54_55_ladder_5 = _2962;
            }
            _3137 = frontier_phi_54_55_ladder_4;
            _3139 = frontier_phi_54_55_ladder_5;
            _3141 = frontier_phi_54_55_ladder_3;
            _3143 = frontier_phi_54_55_ladder_2;
            _3145 = frontier_phi_54_55_ladder_1;
            _3147 = frontier_phi_54_55_ladder;
        }
        float _3152 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2746 = (_3152 * _3143) + _2382;
        _2748 = (_3152 * _3145) + _2383;
        _2750 = (_3152 * _3147) + _2384;
        _2752 = ((_3137 * 0.039999999105930328369140625) * _3152) + _2538;
        _2754 = ((_3139 * 0.039999999105930328369140625) * _3152) + _2539;
        _2756 = ((_3141 * 0.039999999105930328369140625) * _3152) + _2540;
    }
    else
    {
        _2746 = _2382;
        _2748 = _2383;
        _2750 = _2384;
        _2752 = _2538;
        _2754 = _2539;
        _2756 = _2540;
    }
    float _2776 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2777 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2778 = cbSceneParam._m0[86u].x * ((_779 / cbSceneParam._m0[86u].x) + ((_902 * cbMtdParam._m0[15u].w) * dot(vec3(_815, _816, _817), vec3(_233, _234, _235))));
    float _2779 = isnan(_2776) ? _2778 : (isnan(_2778) ? _2776 : min(_2778, _2776));
    float _2780 = isnan(_2777) ? _780 : (isnan(_780) ? _2777 : min(_780, _2777));
    vec4 _2782 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2779, _2780), 0.0);
    float _2784 = _2782.x;
    bool _2805 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2784)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2784))) > _701;
    float _2806 = _2805 ? _2779 : _779;
    float _2807 = _2805 ? _2780 : _780;
    vec4 _2809 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2806, _2807));
    vec4 _2814 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2806, _2807));
    float _2816 = _2814.x;
    float _2836 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2816)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2816))) - _701;
    bool _2845 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2849 = (isnan(_2836) ? 0.0 : (isnan(0.0) ? _2836 : max(0.0, _2836))) * (-1.44269502162933349609375);
    float _4890 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4901 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4912 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2876 = 0.959999978542327880859375 - (exp2(log2(1.0 - _894) * 5.0) * 0.959999978542327880859375);
    float _2879 = ((_2809.x * _2876) * exp2(_2849 * (_2845 ? 0.0 : (cbMtdParam._m0[25u].x + cbMtdParam._m0[24u].y)))) * cbSceneParam._m0[72u].w;
    float _2882 = ((_2809.y * _2876) * exp2(_2849 * (_2845 ? 0.0 : (cbMtdParam._m0[25u].y + cbMtdParam._m0[24u].z)))) * cbSceneParam._m0[72u].w;
    float _2885 = ((_2809.z * _2876) * exp2(_2849 * (_2845 ? 0.0 : (cbMtdParam._m0[25u].z + cbMtdParam._m0[24u].w)))) * cbSceneParam._m0[72u].w;
    float _2893 = (_2879 + (((((_1929 * (_1977.x / _1983)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1724) * _1998)) + _2752) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2746 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _879))) - _2879) * cbMtdParam._m0[16u].x);
    float _2895 = (_2882 + (((((_1929 * (_1977.y / _1983)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1724) * _1998)) + _2754) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2748 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _879))) - _2882) * cbMtdParam._m0[16u].x);
    float _2897 = (_2885 + (((((_1929 * (_1977.z / _1983)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1724) * _1998)) + _2756) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2750 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _879))) - _2885) * cbMtdParam._m0[16u].x);
    uint _2898 = _854 + 6u;
    float _2906 = _779 / cbSceneParam._m0[86u].x;
    float _2907 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2921 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2923 = _2921.x;
    float _2924 = _2921.y;
    float _2925 = _2921.z;
    float _2926 = _2921.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2985 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2986 = _2985 / _701;
        float _2997 = _2986 * _751;
        float _2998 = _752 * _2986;
        float _2999 = (-0.0) - _2998;
        float _3000 = _2986 * _753;
        float _3002 = (cbSceneParam._m0[77u].w * _2999) / _2985;
        float _3003 = _3002 + cbSceneParam._m0[79u].w;
        float _3004 = cbSceneParam._m0[79u].w - _2998;
        float _3010 = sqrt(((_2997 * _2997) + (_2998 * _2998)) + (_3000 * _3000));
        float _3013 = (1.0 - (cbSceneParam._m0[77u].w / _2985)) * _3010;
        float _3018 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3275;
        if (abs((_2999 - _3002) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3275 = ((((_3003 > 0.0) ? exp2(_3018 * _3003) : (2.0 - exp2(_3019 * _3003))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3013;
        }
        else
        {
            float _3198 = 1.0 / cbSceneParam._m0[80u].x;
            float _3199 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : max(_3003, _3004));
            float _3200 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : min(_3003, _3004));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            _3275 = ((abs(_3010 / _2999) * cbSceneParam._m0[80u].y) * ((((_3209 - _3210) * 2.0) - ((exp2(_3018 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0)))) - exp2(_3018 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))))) * _3198)) - ((exp2(_3019 * _3209) - exp2(_3019 * _3210)) * _3198))) + (_3013 * cbSceneParam._m0[80u].z);
        }
        vec4 _3277 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, 1.0), 0.0);
        float _3286 = exp2((_3275 * (-1.44269502162933349609375)) * (1.0 - _3277.w));
        float _3287 = log2(_3286);
        float _3303 = log2(_2926);
        _3021 = (exp2(_3303 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].x)) * _3277.x) / cbSceneParam._m0[78u].x)) + _2923;
        _3023 = (exp2(_3303 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].y)) * _3277.y) / cbSceneParam._m0[78u].y)) + _2924;
        _3025 = (exp2(_3303 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].z)) * _3277.z) / cbSceneParam._m0[78u].z)) + _2925;
        _3027 = _3286 * _2926;
    }
    else
    {
        _3021 = _2923;
        _3023 = _2924;
        _3025 = _2925;
        _3027 = _2926;
    }
    bool _3313;
    float _3082;
    vec4 _3085;
    float _3087;
    vec4 _3089;
    float _3097;
    float _3098;
    float _3099;
    float _3100;
    bool _3110;
    for (;;)
    {
        bool _3039 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3040 = log2(_3027);
        float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * _2893;
        float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * _2895;
        float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * _2897;
        vec4 _3057 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_779, _780));
        float _3059 = _3057.x;
        float _3080 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3059)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3059))) - _701) * cbMtdParam._m0[15u].y;
        float _4963 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        _3082 = (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * cbInstanceData._m0[_2898].w;
        float _3083 = _767 + (-0.5);
        _3085 = cbMtdParam._m0[1u];
        _3087 = _3085.y * _3083;
        _3089 = cbMatDynParam._m0[0u];
        float _3096 = (roundEven(_3089.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3097 = _3096 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3021)));
        _3098 = _3096 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3023)));
        _3099 = _3096 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3025)));
        _3100 = _3083 * 0.999000012874603271484375;
        _3110 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3110)
        {
            if ((cbInstanceData._m0[_854 + 7u].x + _3100) < 0.5)
            {
                _3313 = true;
                break;
            }
        }
        uint _3233 = _855 + uint(_3089.w);
        if ((cbInstanceData._m0[_3233].w < 1.0) && ((cbInstanceData._m0[_3233].w + _3100) < 0.5))
        {
            _3313 = true;
            break;
        }
        if ((_3087 + 1.0) < _3085.x)
        {
            _3313 = true;
            break;
        }
        _3313 = false;
        break;
    }
    float _3517;
    if (_3313)
    {
        discard_state = true;
        _3517 = 0.0;
    }
    else
    {
        _3517 = _3082;
    }
    SV_Target.x = _3097;
    SV_Target.y = _3098;
    SV_Target.z = _3099;
    SV_Target.w = _3517;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3082;
    discard_exit();
}


