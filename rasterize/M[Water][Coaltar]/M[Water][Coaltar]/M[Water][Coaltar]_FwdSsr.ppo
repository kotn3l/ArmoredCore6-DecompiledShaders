#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_snp_0_Texture2D_14;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _113 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _114 = _113 * NORMAL.x;
    float _115 = _113 * NORMAL.y;
    float _116 = _113 * NORMAL.z;
    float _148 = cbMtdParam._m0[13u].w * cbPerFrame._m0[22u].x;
    float _157 = (cbMtdParam._m0[23u].x * TEXCOORD.x) + (_148 * cbMtdParam._m0[21u].x);
    float _158 = (cbMtdParam._m0[23u].y * TEXCOORD.y) + (_148 * cbMtdParam._m0[21u].y);
    float _224 = cbMtdParam._m0[14u].y + texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[20u].z * TEXCOORD.x) + (cbMtdParam._m0[18u].x * _148))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[20u].w * TEXCOORD.y) + (cbMtdParam._m0[18u].y * _148))) + cbTextureTilingScale._m0[3u].w)).z;
    float _233 = (TEXCOORD_3.x - ((cbMtdParam._m0[13u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_0, SS_WrapLinear), vec2((_157 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_158 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].y + 1.0);
    float _798 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _248 = (TEXCOORD_6.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_6.x)) * (texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].w + 1.0);
    float _809 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _251 = ((((cbMtdParam._m0[14u].z + texture(sampler2D(M_Water_Coaltar_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _157) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _158) + cbTextureTilingScale._m0[4u].w)).z) - _224) * (isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0)))) + _224) + ((isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0))) * cbMtdParam._m0[15u].z);
    float _820 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _252 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
    float _266 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _267 = POSITION_1.x / POSITION_1.w;
    float _268 = POSITION_1.y / POSITION_1.w;
    float _272 = (_267 * 0.5) + 0.5;
    float _273 = 0.5 - (_268 * 0.5);
    float _278;
    float _280;
    float _282;
    float _284;
    if (_252 < cbPerScene._m0[22u].z)
    {
        _278 = 0.0;
        _280 = 0.0;
        _282 = 0.0;
        _284 = 0.0;
    }
    else
    {
        float _290 = 1.0 / _266;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _290))
        {
            float _315 = fma(_116, cbPerScene._m0[8u].z, fma(_115, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _114));
            float _318 = fma(_116, cbPerScene._m0[9u].z, fma(_115, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _114));
            float _321 = fma(_116, cbPerScene._m0[10u].z, fma(_115, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _114));
            float _328 = (_266 * _267) * cbPerScene._m0[28u].x;
            float _330 = (_266 * _268) * cbPerScene._m0[28u].y;
            float _334 = inversesqrt(dot(vec3(_328, _330, _266), vec3(_328, _330, _266)));
            float _335 = _328 * _334;
            float _336 = _330 * _334;
            float _337 = _334 * _266;
            float _341 = dot(vec3(_335, _336, _337), vec3(_315, _318, _321)) * 2.0;
            float _346 = _335 - (_341 * _315);
            float _347 = _336 - (_341 * _318);
            float _348 = _337 - (_341 * _321);
            float _352 = inversesqrt(dot(vec3(_346, _347, _348), vec3(_346, _347, _348)));
            float _355 = _348 * _352;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_355 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _367 = abs(dot(vec3((-0.0) - _335, (-0.0) - _336, (-0.0) - _337), vec3(_315, _318, _321)));
                float _831 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
                float _378 = (((_252 * _252) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _387 = (cbPerScene._m0[29u].x * (1.0 - _252)) + cbPerScene._m0[29u].y;
                float _842 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
                float _395 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_378 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _398 = _355 - cbPerScene._m0[16u].x;
                    float _853 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
                    float _399 = isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0));
                    float _400 = _399 * _399;
                    float _402 = (_378 - cbPerScene._m0[22u].x) * 10.0;
                    float _864 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
                    float _404 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
                    float _405 = isnan(_404) ? _400 : (isnan(_400) ? _404 : min(_400, _404));
                    float _409 = (cbPerScene._m0[21u].x - _266) * cbPerScene._m0[21u].z;
                    float _880 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
                    float _410 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
                    float _411 = isnan(_410) ? _405 : (isnan(_405) ? _410 : min(_405, _410));
                    float _412 = (_346 * _352) + _328;
                    float _413 = (_347 * _352) + _330;
                    float _414 = _355 + _266;
                    float _446 = fma(_414, cbPerScene._m0[7u].z, fma(_413, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _412)) + cbPerScene._m0[7u].w;
                    float _450 = ((fma(_414, cbPerScene._m0[4u].z, fma(_413, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _412)) + cbPerScene._m0[4u].w) / _446) - _272;
                    float _451 = ((fma(_414, cbPerScene._m0[5u].z, fma(_413, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _412)) + cbPerScene._m0[5u].w) / _446) - _273;
                    float _457 = cbPerScene._m0[18u].x * _450;
                    float _458 = cbPerScene._m0[18u].y * _451;
                    float _463 = sqrt((_457 * _457) + (_458 * _458)) + 9.9999997473787516355514526367188e-06;
                    float _468 = (_450 / _463) * _395;
                    float _469 = (_451 / _463) * _395;
                    float _470 = (((1.0 / _414) - _290) / _463) * _395;
                    float _498 = abs(float(_468 > 0.0) - _272) / (abs(_468) + 1.0000000116860974230803549289703e-07);
                    float _499 = abs(float(_469 > 0.0) - _273) / (abs(_469) + 1.0000000116860974230803549289703e-07);
                    float _501 = (abs(((_470 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _290) / (abs(_470) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _502 = isnan(_499) ? _498 : (isnan(_498) ? _499 : min(_498, _499));
                    float _503 = isnan(_501) ? _502 : (isnan(_502) ? _501 : min(_502, _501));
                    uint _506 = uint(int(isnan(cbPerScene._m0[23u].y) ? _503 : (isnan(_503) ? cbPerScene._m0[23u].y : min(_503, cbPerScene._m0[23u].y))));
                    float _285;
                    float _511;
                    float _513;
                    float _515;
                    if (int(_506) > int(0u))
                    {
                        float _508 = _470 + _290;
                        float _509 = _469 + _273;
                        float _510 = _468 + _272;
                        float _512;
                        float _514;
                        float _516;
                        float _517;
                        uint _528;
                        float _530;
                        float _532;
                        float _534;
                        float _536;
                        float _538;
                        float _540;
                        float _542;
                        uint _544;
                        float _546;
                        float _548;
                        float _550;
                        float _523 = 0.0;
                        float _524 = 0.0;
                        float _525 = 0.0;
                        float _526 = 0.0;
                        uint _527 = 0u;
                        float _529 = _290;
                        float _531 = _510;
                        float _533 = _509;
                        float _535 = _508;
                        float _537 = _272;
                        float _539 = _273;
                        float _541 = _290;
                        uint _543 = 1u;
                        float _545 = 0.0;
                        float _547 = 0.0;
                        float _549 = 0.0;
                        float _561;
                        float _568;
                        float _569;
                        float _570;
                        float _571;
                        float _572;
                        float _573;
                        uint _574;
                        float _575;
                        bool _582;
                        for (;;)
                        {
                            _561 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _531, cbSceneParam._m0[86u].y * _533), 0.0).x;
                            bool _567 = _527 == (_506 + 4294967295u);
                            _568 = _567 ? _545 : _531;
                            _569 = _567 ? _547 : _533;
                            _570 = _567 ? _549 : _535;
                            _571 = _567 ? _545 : _537;
                            _572 = _567 ? _547 : _539;
                            _573 = _567 ? _549 : _541;
                            _574 = _567 ? 1u : _543;
                            _575 = _567 ? (-1.0) : (_535 - _561);
                            _582 = (_574 != 0u) && ((_575 <= 0.0) && ((_567 ? (-1.0) : (_561 - (_529 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_582)
                            {
                                uint _592 = uint(int(log2(_395) + 0.999000012874603271484375));
                                float _603;
                                float _605;
                                float _607;
                                float _609;
                                float _611;
                                float _613;
                                float _615;
                                if (int(_592) > int(0u))
                                {
                                    uint _713;
                                    float _715;
                                    float _716;
                                    float _717;
                                    float _718;
                                    float _719;
                                    float _720;
                                    float _721;
                                    _713 = 0u;
                                    _715 = _568;
                                    _716 = _569;
                                    _717 = _570;
                                    _718 = _571;
                                    _719 = _572;
                                    _720 = _573;
                                    _721 = _561;
                                    float _604;
                                    float _606;
                                    float _608;
                                    float _610;
                                    float _612;
                                    float _614;
                                    float _616;
                                    for (;;)
                                    {
                                        float _725 = (_718 + _715) * 0.5;
                                        float _726 = (_719 + _716) * 0.5;
                                        float _727 = (_720 + _717) * 0.5;
                                        vec4 _735 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _725, cbSceneParam._m0[86u].y * _726), 0.0);
                                        float _737 = _735.x;
                                        bool _739 = (_727 - _737) < 0.0;
                                        _604 = _739 ? _725 : _715;
                                        _606 = _739 ? _726 : _716;
                                        _608 = _739 ? _727 : _717;
                                        _610 = _739 ? _718 : _725;
                                        _612 = _739 ? _719 : _726;
                                        _614 = _739 ? _720 : _727;
                                        _616 = _739 ? _737 : _721;
                                        uint _714 = _713 + 1u;
                                        if (_714 == _592)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _713 = _714;
                                            _715 = _604;
                                            _716 = _606;
                                            _717 = _608;
                                            _718 = _610;
                                            _719 = _612;
                                            _720 = _614;
                                            _721 = _616;
                                        }
                                    }
                                    _603 = _604;
                                    _605 = _606;
                                    _607 = _608;
                                    _609 = _610;
                                    _611 = _612;
                                    _613 = _614;
                                    _615 = _616;
                                }
                                else
                                {
                                    _603 = _568;
                                    _605 = _569;
                                    _607 = _570;
                                    _609 = _571;
                                    _611 = _572;
                                    _613 = _573;
                                    _615 = _561;
                                }
                                float _625 = cbPerScene._m0[28u].x * ((_603 * 2.0) + (-1.0));
                                float _626 = cbPerScene._m0[28u].y * (1.0 - (_605 * 2.0));
                                float _658 = fma(_615, cbPerScene._m0[27u].w, fma(_626, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _625) + cbPerScene._m0[27u].z);
                                float _659 = fma(_615, cbPerScene._m0[24u].w, fma(_626, cbPerScene._m0[24u].y, _625 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _658;
                                float _660 = fma(_615, cbPerScene._m0[25u].w, fma(_626, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _625) + cbPerScene._m0[25u].z) / _658;
                                vec4 _669 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _659, cbSceneParam._m0[87u].w * _660), 0.0);
                                float _674 = isnan(_411) ? 1.0 : (isnan(1.0) ? _411 : min(1.0, _411));
                                float _675 = 0.5 - _659;
                                float _676 = 0.5 - _660;
                                float _677 = _675 * 2.0;
                                float _678 = _676 * 2.0;
                                float _679 = _677 * _677;
                                float _680 = _678 * _678;
                                float _916 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
                                float _927 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
                                float _689 = inversesqrt(dot(vec2(_468, _469), vec2(_468, _469)));
                                float _695 = inversesqrt(dot(vec2(_677, _678), vec2(_677, _678)));
                                float _701 = dot(vec2((_675 * (-2.0)) * _695, (_676 * (-2.0)) * _695), vec2(_689 * _468, _689 * _469));
                                float _938 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
                                float _708 = ((1.0 - (isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0)))) * (1.0 - (isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0))))) * (4.0 - ((isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0))) * 2.0));
                                float _949 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
                                float _709 = isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0));
                                float _710 = _709 * _709;
                                frontier_phi_14_pred = _549;
                                frontier_phi_14_pred_1 = _547;
                                frontier_phi_14_pred_2 = _545;
                                frontier_phi_14_pred_3 = _574;
                                frontier_phi_14_pred_4 = _613;
                                frontier_phi_14_pred_5 = _611;
                                frontier_phi_14_pred_6 = _609;
                                frontier_phi_14_pred_7 = _607;
                                frontier_phi_14_pred_8 = _605;
                                frontier_phi_14_pred_9 = _603;
                                frontier_phi_14_pred_10 = _529;
                                frontier_phi_14_pred_11 = isnan(_710) ? _674 : (isnan(_674) ? _710 : min(_674, _710));
                                frontier_phi_14_pred_12 = _669.z;
                                frontier_phi_14_pred_13 = _669.y;
                                frontier_phi_14_pred_14 = _669.x;
                                frontier_phi_14_pred_15 = _506;
                            }
                            else
                            {
                                bool _594 = _575 > 0.0;
                                frontier_phi_14_pred = _594 ? _570 : _549;
                                frontier_phi_14_pred_1 = _594 ? _569 : _547;
                                frontier_phi_14_pred_2 = _594 ? _568 : _545;
                                frontier_phi_14_pred_3 = uint(_594);
                                frontier_phi_14_pred_4 = _570;
                                frontier_phi_14_pred_5 = _569;
                                frontier_phi_14_pred_6 = _568;
                                frontier_phi_14_pred_7 = _570 + _470;
                                frontier_phi_14_pred_8 = _569 + _469;
                                frontier_phi_14_pred_9 = _568 + _468;
                                frontier_phi_14_pred_10 = _561;
                                frontier_phi_14_pred_11 = _526;
                                frontier_phi_14_pred_12 = _525;
                                frontier_phi_14_pred_13 = _524;
                                frontier_phi_14_pred_14 = _523;
                                frontier_phi_14_pred_15 = _527 + 1u;
                            }
                            _550 = frontier_phi_14_pred;
                            _548 = frontier_phi_14_pred_1;
                            _546 = frontier_phi_14_pred_2;
                            _544 = frontier_phi_14_pred_3;
                            _542 = frontier_phi_14_pred_4;
                            _540 = frontier_phi_14_pred_5;
                            _538 = frontier_phi_14_pred_6;
                            _536 = frontier_phi_14_pred_7;
                            _534 = frontier_phi_14_pred_8;
                            _532 = frontier_phi_14_pred_9;
                            _530 = frontier_phi_14_pred_10;
                            _517 = frontier_phi_14_pred_11;
                            _516 = frontier_phi_14_pred_12;
                            _514 = frontier_phi_14_pred_13;
                            _512 = frontier_phi_14_pred_14;
                            _528 = frontier_phi_14_pred_15;
                            if (int(_528) < int(_506))
                            {
                                _523 = _512;
                                _524 = _514;
                                _525 = _516;
                                _526 = _517;
                                _527 = _528;
                                _529 = _530;
                                _531 = _532;
                                _533 = _534;
                                _535 = _536;
                                _537 = _538;
                                _539 = _540;
                                _541 = _542;
                                _543 = _544;
                                _545 = _546;
                                _547 = _548;
                                _549 = _550;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _511 = _512;
                        _513 = _514;
                        _515 = _516;
                        _285 = _517;
                    }
                    else
                    {
                        _511 = 0.0;
                        _513 = 0.0;
                        _515 = 0.0;
                        _285 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_511) || isnan(_513)) || isnan(_515))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_285 * _511) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _285;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_285 * _515) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_285 * _513) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _278 = frontier_phi_1_2_ladder;
        _280 = frontier_phi_1_2_ladder_3;
        _282 = frontier_phi_1_2_ladder_2;
        _284 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _278;
    SV_Target.y = _280;
    SV_Target.z = _282;
    SV_Target.w = _284;
}


