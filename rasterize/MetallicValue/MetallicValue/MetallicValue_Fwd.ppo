#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicValue_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicValue_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _833;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    vec4 _224 = texture(sampler2D(MetallicValue_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _227 = _224.x;
    float _228 = _224.y;
    float _229 = _224.z;
    float _231 = _224.w * TEXCOORD_1.z;
    vec4 _247 = texture(sampler2D(MetallicValue_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _247.z;
    float _255 = (_247.x * 2.0) + (-1.0);
    float _257 = (_247.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3172 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))));
    float _267 = fma(_264, _208, fma(_257, _200 * TANGENT.x, (_186 * _178) * _255));
    float _270 = fma(_264, _209, fma(_257, _200 * TANGENT.y, (_186 * _179) * _255));
    float _273 = fma(_264, _210, fma(_257, _200 * TANGENT.z, (_186 * _180) * _255));
    float _277 = inversesqrt(dot(vec3(_267, _270, _273), vec3(_267, _270, _273)));
    float _278 = _277 * _267;
    float _279 = _277 * _270;
    float _280 = _277 * _273;
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _284 * _278;
    float _286 = _284 * _279;
    float _287 = _284 * _280;
    float _3183 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _288 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _289 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3216 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3227 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3238 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _293 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _351 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _361 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _351);
    float _362 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _351);
    float _363 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _351);
    float _367 = inversesqrt(dot(vec3(_361, _362, _363), vec3(_361, _362, _363)));
    float _368 = _361 * _367;
    float _369 = _362 * _367;
    float _370 = _363 * _367;
    float _376 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _377 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _398 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _401 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _404 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    uint _417 = uint(roundEven(NORMAL.w)) * 13u;
    uint _420 = (_417 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _426 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_420].x;
    float _427 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_420].y;
    float _428 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_420].z;
    float _3249 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _432 = 1.0 - _293;
    float _433 = _429 * _432;
    float _434 = _430 * _432;
    float _435 = _431 * _432;
    float _440 = (_429 + (-0.039999999105930328369140625)) * _293;
    float _441 = (_430 + (-0.039999999105930328369140625)) * _293;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _293;
    float _443 = _440 + 0.039999999105930328369140625;
    float _445 = _441 + 0.039999999105930328369140625;
    float _446 = _442 + 0.039999999105930328369140625;
    vec4 _455 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _376, cbSceneParam._m0[86u].y * _377));
    float _458 = _455.x * TEXCOORD_1.w;
    float _459 = dot(vec3(_285, _286, _287), vec3(_368, _369, _370));
    float _462 = _459 * 2.0;
    float _466 = (_462 * _285) - _368;
    float _467 = (_462 * _286) - _369;
    float _468 = (_462 * _287) - _370;
    float _472 = abs(dot(vec3(_368, _369, _370), vec3(_285, _286, _287)));
    float _3282 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _474 = sqrt(_289);
    float _487 = exp2((_474 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_474 * 3.0));
    float _493 = (1.0 - _487) * ((_474 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _494 = _487 * _474;
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _832;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _557 = fma(_530, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522));
        float _561 = fma(_530, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522));
        float _565 = fma(_530, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522));
        float _590 = _522 + _285;
        float _591 = _526 + _286;
        float _592 = _530 + _287;
        float _602 = fma(_592, cbModelParam._m0[26u].z, fma(_591, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590)) - _557;
        float _603 = fma(_592, cbModelParam._m0[27u].z, fma(_591, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590)) - _561;
        float _604 = fma(_592, cbModelParam._m0[28u].z, fma(_591, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590)) - _565;
        float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
        float _621 = ((_608 * _602) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_557 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_608 * _603) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_561 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_608 * _604) / cbModelParam._m0[34u].z) + ((((((_565 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        float _660 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_626.x + (-0.5));
        float _662 = _660 * (_626.y + (-0.5));
        float _663 = _660 * (_626.z + (-0.5));
        float _670 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_633.x + (-0.5));
        float _672 = _670 * (_633.y + (-0.5));
        float _673 = _670 * (_633.z + (-0.5));
        float _680 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_640.x + (-0.5));
        float _682 = _680 * (_640.y + (-0.5));
        float _683 = _680 * (_640.z + (-0.5));
        float _690 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_647.x + (-0.5));
        float _692 = _690 * (_647.y + (-0.5));
        float _693 = _690 * (_647.z + (-0.5));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = _661 * 0.5;
        float _698 = _671 * 0.5;
        float _699 = _681 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _714 = (dot(vec3(_285, _286, _287), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3308 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _724 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3319 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3330 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * (_726 + 1.0))) + _731) * _694;
        float _741 = _662 * 0.5;
        float _742 = _672 * 0.5;
        float _743 = _682 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(_285, _286, _287), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3363 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_768 + 1.0))) + _773) * _695;
        float _783 = _663 * 0.5;
        float _784 = _673 * 0.5;
        float _785 = _683 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_285, _286, _287), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3396 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_810 + 1.0))) + _815) * _696;
        _832 = _663;
        _834 = _662;
        _835 = _661;
        _836 = _673;
        _837 = _672;
        _838 = _671;
        _839 = _683;
        _840 = _682;
        _841 = _681;
        _842 = _696;
        _843 = _695;
        _844 = _694;
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
    }
    else
    {
        _832 = _833;
        _834 = _833;
        _835 = _833;
        _836 = _833;
        _837 = _833;
        _838 = _833;
        _839 = _833;
        _840 = _833;
        _841 = _833;
        _842 = _833;
        _843 = _833;
        _844 = _833;
        _845 = 0.0;
        _846 = 0.0;
        _847 = 0.0;
    }
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _873 = fma(_530, cbModelParam._m0[30u].z, fma(_526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _522));
        float _877 = fma(_530, cbModelParam._m0[31u].z, fma(_526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _522));
        float _881 = fma(_530, cbModelParam._m0[32u].z, fma(_526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _522));
        float _904 = _522 + _285;
        float _905 = _526 + _286;
        float _906 = _530 + _287;
        float _916 = fma(_906, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _904)) - _873;
        float _917 = fma(_906, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _904)) - _877;
        float _918 = fma(_906, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _904)) - _881;
        float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
        float _935 = ((_922 * _916) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_873 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_922 * _917) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_877 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_922 * _918) / cbModelParam._m0[35u].z) + ((((((_881 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        float _972 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_939.x + (-0.5));
        float _974 = _972 * (_939.y + (-0.5));
        float _975 = _972 * (_939.z + (-0.5));
        float _982 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_946.x + (-0.5));
        float _984 = _982 * (_946.y + (-0.5));
        float _985 = _982 * (_946.z + (-0.5));
        float _992 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_953.x + (-0.5));
        float _994 = _992 * (_953.y + (-0.5));
        float _995 = _992 * (_953.z + (-0.5));
        float _1002 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_960.x + (-0.5));
        float _1004 = _1002 * (_960.y + (-0.5));
        float _1005 = _1002 * (_960.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_285, _286, _287), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3459 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_1036 + 1.0))) + _1041) * _1006;
        float _1051 = _974 * 0.5;
        float _1052 = _984 * 0.5;
        float _1053 = _994 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_285, _286, _287), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3492 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1078 + 1.0))) + _1083) * _1007;
        float _1093 = _975 * 0.5;
        float _1094 = _985 * 0.5;
        float _1095 = _995 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_285, _286, _287), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3525 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1120 + 1.0))) + _1125) * _1008;
        _1142 = _975;
        _1143 = _974;
        _1144 = _973;
        _1145 = _985;
        _1146 = _984;
        _1147 = _983;
        _1148 = _995;
        _1149 = _994;
        _1150 = _993;
        _1151 = _1008;
        _1152 = _1007;
        _1153 = _1006;
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _833;
        _1143 = _833;
        _1144 = _833;
        _1145 = _833;
        _1146 = _833;
        _1147 = _833;
        _1148 = _833;
        _1149 = _833;
        _1150 = _833;
        _1151 = _833;
        _1152 = _833;
        _1153 = _833;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1189 = fma(_1168, cbSceneParam._m0[89u].z, fma(_1167, cbSceneParam._m0[89u].y, _1166 * cbSceneParam._m0[89u].x));
    float _1192 = fma(_1168, cbSceneParam._m0[90u].z, fma(_1167, cbSceneParam._m0[90u].y, _1166 * cbSceneParam._m0[90u].x));
    float _1195 = fma(_1168, cbSceneParam._m0[91u].z, fma(_1167, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1166));
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1216 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1219 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1253;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1226 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_832, _836, _839, _842));
        float _1230 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_834, _837, _840, _843));
        float _1234 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_835, _838, _841, _844));
        float _1241 = dot(vec4(cbModelParam._m0[39u]), vec4(_1210, _1211, _1212, 1.0));
        _1253 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1241) ? 0.0 : (isnan(0.0) ? _1241 : max(0.0, _1241))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1253 = 1.0;
    }
    float _1264;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1255 = dot(vec4(cbModelParam._m0[40u]), vec4(_1210, _1211, _1212, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1268 = (_1264 * cbModelParam._m0[1u].x) + (_1253 * (1.0 - cbModelParam._m0[1u].x));
    float _1278 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1279 = isnan(_1278) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1278 : min(cbModelParam._m0[25u].z, _1278));
    float _1361;
    float _1363;
    float _1365;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1328 = fma(_530, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522)) + cbModelParam._m0[13u].w;
        float _1332 = fma(_530, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522)) + cbModelParam._m0[14u].w;
        float _1336 = fma(_530, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522)) + cbModelParam._m0[15u].w;
        float _1339 = fma(_468, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _466));
        float _1342 = fma(_468, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _466));
        float _1345 = fma(_468, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _466));
        float _1373;
        if (_1339 > 0.0)
        {
            _1373 = abs((1.0 - _1328) / _1339);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1328 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1373 = frontier_phi_16_14_ladder;
        }
        float _1581;
        if (_1342 > 0.0)
        {
            _1581 = abs((1.0 - _1332) / _1342);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1332 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1581 = frontier_phi_25_21_ladder;
        }
        float _1835;
        if (_1345 > 0.0)
        {
            _1835 = abs((1.0 - _1336) / _1345);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1336 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1835 = frontier_phi_37_32_ladder;
        }
        float _1837 = isnan(_1581) ? _1373 : (isnan(_1373) ? _1581 : min(_1373, _1581));
        float _1838 = isnan(_1835) ? _1837 : (isnan(_1837) ? _1835 : min(_1837, _1835));
        float _1842 = (_1838 * _1339) + _1328;
        float _1843 = (_1838 * _1342) + _1332;
        float _1844 = (_1838 * _1345) + _1336;
        float _1845 = _1838 * 9.9999997473787516355514526367188e-05;
        float _1847 = (-1.0) - _1845;
        float _1849 = _1845 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1844 > _1849) || ((_1844 < _1847) || ((_1843 > _1849) || ((_1843 < _1847) || ((_1842 < _1847) || (_1842 > _1849))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1972 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1844, cbModelParam._m0[9u].z, fma(_1843, cbModelParam._m0[9u].y, _1842 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1844, cbModelParam._m0[10u].z, fma(_1843, cbModelParam._m0[10u].y, _1842 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1844, cbModelParam._m0[11u].z, fma(_1843, cbModelParam._m0[11u].y, _1842 * cbModelParam._m0[11u].x))), _1279);
            frontier_phi_15_37_ladder = _1972.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1972.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1972.x * cbModelParam._m0[1u].y;
        }
        _1361 = frontier_phi_15_37_ladder_2;
        _1363 = frontier_phi_15_37_ladder_1;
        _1365 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_466, _467, _468), _1279);
        _1361 = _1349.x * cbModelParam._m0[1u].y;
        _1363 = _1349.y * cbModelParam._m0[1u].y;
        _1365 = _1349.z * cbModelParam._m0[1u].y;
    }
    float _1369 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1370 = isnan(_1369) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1369 : min(cbModelParam._m0[25u].w, _1369));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1427 = fma(_530, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522)) + cbModelParam._m0[21u].w;
        float _1431 = fma(_530, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522)) + cbModelParam._m0[22u].w;
        float _1435 = fma(_530, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522)) + cbModelParam._m0[23u].w;
        float _1438 = fma(_468, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _466));
        float _1441 = fma(_468, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _466));
        float _1444 = fma(_468, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _466));
        float _1586;
        if (_1438 > 0.0)
        {
            _1586 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1586 = frontier_phi_27_23_ladder;
        }
        float _1862;
        if (_1441 > 0.0)
        {
            _1862 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1862 = frontier_phi_39_34_ladder;
        }
        float _2075;
        if (_1444 > 0.0)
        {
            _2075 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2075 = frontier_phi_48_45_ladder;
        }
        float _2077 = isnan(_1862) ? _1586 : (isnan(_1586) ? _1862 : min(_1586, _1862));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1438) + _1427;
        float _2083 = (_2078 * _1441) + _1431;
        float _2084 = (_2078 * _1444) + _1435;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2085;
        float _2088 = _2085 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2084 > _2088) || ((_2084 < _2086) || ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 < _2086) || (_2082 > _2088))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2084, cbModelParam._m0[17u].z, fma(_2083, cbModelParam._m0[17u].y, _2082 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2084, cbModelParam._m0[18u].z, fma(_2083, cbModelParam._m0[18u].y, _2082 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2084, cbModelParam._m0[19u].z, fma(_2083, cbModelParam._m0[19u].y, _2082 * cbModelParam._m0[19u].x))), _1370);
            frontier_phi_24_48_ladder = _2284.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2284.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2284.x * cbModelParam._m0[1u].z;
        }
        _1463 = frontier_phi_24_48_ladder_2;
        _1465 = frontier_phi_24_48_ladder_1;
        _1467 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_466, _467, _468), _1370);
        _1463 = _1447.x * cbModelParam._m0[1u].z;
        _1465 = _1447.y * cbModelParam._m0[1u].z;
        _1467 = _1447.z * cbModelParam._m0[1u].z;
    }
    float _1480 = (((_493 * _443) + _494) * _458) * ((cbModelParam._m0[1u].w * (_1463 - _1361)) + _1361);
    float _1482 = (((_493 * _445) + _494) * _458) * ((cbModelParam._m0[1u].w * (_1465 - _1363)) + _1363);
    float _1484 = (((_493 * _446) + _494) * _458) * ((cbModelParam._m0[1u].w * (_1467 - _1365)) + _1365);
    float _1487 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, _1480 * cbSceneParam._m0[91u].x));
    uvec4 _1503 = floatBitsToUint(cbInstanceData._m0[_417 + 5u]);
    uint _1505 = _1503.x * 14u;
    uint _1506 = _1505 + 13u;
    float _1513 = _458 + (-1.0);
    float _1518 = (cbLight._m0[_1506].x * _1513) + 1.0;
    float _1519 = (cbLight._m0[_1506].y * _1513) + 1.0;
    float _1520 = (cbLight._m0[_1506].z * _1513) + 1.0;
    float _1521 = (cbLight._m0[_1506].w * _1513) + 1.0;
    uint _1522 = _1505 + 5u;
    float _1528 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
    uint _1532 = _1505 + 4u;
    float _1539 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
    uint _1543 = _1505 | 1u;
    float _1554 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_285, _286, _287));
    float _1557 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_285, _286, _287));
    float _3661 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _3672 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1562 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.3183098733425140380859375;
    float _1564 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1571 = ((cbLight._m0[_1522].x * _1528) * _1564) + ((cbLight._m0[_1532].x * _1539) * _1562);
    float _1572 = ((_1528 * cbLight._m0[_1522].y) * _1564) + ((_1539 * cbLight._m0[_1532].y) * _1562);
    float _1573 = ((_1528 * cbLight._m0[_1522].z) * _1564) + ((_1539 * cbLight._m0[_1532].z) * _1562);
    uvec4 _1578 = floatBitsToUint(cbLight._m0[_1505 + 12u]);
    bool _1580 = _1578.x == 0u;
    float _1591;
    float _1593;
    float _1595;
    if (_1580)
    {
        _1591 = _1571;
        _1593 = _1572;
        _1595 = _1573;
    }
    else
    {
        uint _1599 = _1505 + 6u;
        float _1615 = (dot(vec3(cbLight._m0[_1505 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1616 = _1615 * _1615;
        float _3683 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1618 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1591 = (((cbLight._m0[_1599].x * 0.3183098733425140380859375) * _1617) * _1618) + _1571;
        _1593 = (((cbLight._m0[_1599].y * 0.3183098733425140380859375) * _1617) * _1618) + _1572;
        _1595 = (((cbLight._m0[_1599].z * 0.3183098733425140380859375) * _1617) * _1618) + _1573;
    }
    bool _1598 = _1578.y == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1598)
    {
        _1636 = _1591;
        _1638 = _1593;
        _1640 = _1595;
    }
    else
    {
        uint _1806 = _1505 + 7u;
        float _1822 = (dot(vec3(cbLight._m0[_1505 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3699 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1825 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1636 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1591;
        _1638 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1593;
        _1640 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1595;
    }
    uint _1643 = _1505 + 8u;
    float _1656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1505].w)) * _289) * 0.949999988079071044921875);
    float _1657 = _1656 * _1656;
    float _1658 = cbLight._m0[_1505].x + _368;
    float _1659 = cbLight._m0[_1505].y + _369;
    float _1660 = cbLight._m0[_1505].z + _370;
    float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
    float _1665 = _1664 * _1658;
    float _1666 = _1664 * _1659;
    float _1667 = _1664 * _1660;
    float _1668 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1505].xyz));
    float _3715 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1671 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _1672 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1673 = dot(vec3(_285, _286, _287), vec3(_1665, _1666, _1667));
    float _3737 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1676 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1677 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_1665, _1666, _1667));
    float _3748 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1681 = _1657 * _1657;
    float _1685 = ((_1676 * _1676) * (_1681 + (-1.0))) + 1.0;
    float _1693 = exp2(log2(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * 5.0);
    float _1694 = 0.959999978542327880859375 - _440;
    float _1696 = 0.959999978542327880859375 - _441;
    float _1697 = 0.959999978542327880859375 - _442;
    float _1704 = 1.0 - _1657;
    float _1715 = (0.5 / (((_1672 * ((_1671 * _1704) + _1657)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _1704) + _1657) * _1671))) * _1671;
    float _3759 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1717 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1681 / ((_1685 * _1685) * 3.141590118408203125));
    uint _1728 = _1505 + 9u;
    float _1739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1543].w)) * _289) * 0.949999988079071044921875);
    float _1740 = _1739 * _1739;
    float _1741 = cbLight._m0[_1543].x + _368;
    float _1742 = cbLight._m0[_1543].y + _369;
    float _1743 = cbLight._m0[_1543].z + _370;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1748 = _1747 * _1741;
    float _1749 = _1747 * _1742;
    float _1750 = _1747 * _1743;
    float _1751 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1543].xyz));
    float _3770 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1755 = dot(vec3(_285, _286, _287), vec3(_1748, _1749, _1750));
    float _3781 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1759 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_1748, _1749, _1750));
    float _3792 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1763 = _1740 * _1740;
    float _1767 = ((_1758 * _1758) * (_1763 + (-1.0))) + 1.0;
    float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0);
    float _1781 = 1.0 - _1740;
    float _1791 = (0.5 / (((_1672 * ((_1754 * _1781) + _1740)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _1781) + _1740) * _1754))) * _1754;
    float _3803 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1763 / ((_1767 * _1767) * 3.141590118408203125));
    float _1803 = (((((_1774 * _1694) + _443) * cbLight._m0[_1728].x) * _1793) * _1528) + (((((_1693 * _1694) + _443) * cbLight._m0[_1643].x) * _1717) * _1539);
    float _1804 = (((((_1774 * _1696) + _445) * cbLight._m0[_1728].y) * _1793) * _1528) + (((((_1693 * _1696) + _445) * cbLight._m0[_1643].y) * _1717) * _1539);
    float _1805 = (((((_1774 * _1697) + _446) * cbLight._m0[_1728].z) * _1793) * _1528) + (((((_1693 * _1697) + _446) * cbLight._m0[_1643].z) * _1717) * _1539);
    float _1867;
    float _1869;
    float _1871;
    if (_1580)
    {
        _1867 = _1803;
        _1869 = _1804;
        _1871 = _1805;
    }
    else
    {
        uint _1873 = _1505 + 2u;
        uint _1877 = _1505 + 10u;
        float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _289) * 0.949999988079071044921875);
        float _1892 = _1891 * _1891;
        float _1893 = cbLight._m0[_1873].x + _368;
        float _1894 = cbLight._m0[_1873].y + _369;
        float _1895 = cbLight._m0[_1873].z + _370;
        float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
        float _1900 = _1899 * _1893;
        float _1901 = _1899 * _1894;
        float _1902 = _1899 * _1895;
        float _1903 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1873].xyz));
        float _3814 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1906 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1907 = dot(vec3(_285, _286, _287), vec3(_1900, _1901, _1902));
        float _3825 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1910 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1911 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_1900, _1901, _1902));
        float _3836 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1915 = _1892 * _1892;
        float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
        float _1926 = exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0);
        float _1933 = 1.0 - _1892;
        float _1943 = (0.5 / (((_1672 * ((_1906 * _1933) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _1933) + _1892) * _1906))) * _1906;
        float _3847 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1945 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
        float _1946 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1867 = (((((_1926 * _1694) + _443) * cbLight._m0[_1877].x) * _1945) * _1946) + _1803;
        _1869 = (((((_1926 * _1696) + _445) * cbLight._m0[_1877].y) * _1945) * _1946) + _1804;
        _1871 = (((((_1926 * _1697) + _446) * cbLight._m0[_1877].z) * _1945) * _1946) + _1805;
    }
    float _1981;
    float _1983;
    float _1985;
    if (_1598)
    {
        _1981 = _1867;
        _1983 = _1869;
        _1985 = _1871;
    }
    else
    {
        uint _1992 = _1505 + 3u;
        uint _1996 = _1505 + 11u;
        float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _289) * 0.949999988079071044921875);
        float _2011 = _2010 * _2010;
        float _2012 = cbLight._m0[_1992].x + _368;
        float _2013 = cbLight._m0[_1992].y + _369;
        float _2014 = cbLight._m0[_1992].z + _370;
        float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
        float _2019 = _2018 * _2012;
        float _2020 = _2018 * _2013;
        float _2021 = _2018 * _2014;
        float _2022 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1992].xyz));
        float _3863 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _2026 = dot(vec3(_285, _286, _287), vec3(_2019, _2020, _2021));
        float _3874 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2029 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2030 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2019, _2020, _2021));
        float _3885 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2034 = _2011 * _2011;
        float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
        float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0);
        float _2052 = 1.0 - _2011;
        float _2062 = (0.5 / (((_1672 * ((_2025 * _2052) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1672 * _2052) + _2011) * _2025))) * _2025;
        float _3896 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2064 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
        float _2065 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1981 = (((((_2045 * _1694) + _443) * cbLight._m0[_1996].x) * _2064) * _2065) + _1867;
        _1983 = (((((_2045 * _1696) + _445) * cbLight._m0[_1996].y) * _2064) * _2065) + _1869;
        _1985 = (((((_2045 * _1697) + _446) * cbLight._m0[_1996].z) * _2064) * _2065) + _1871;
    }
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    float _2209;
    if (_1503.y == 0u)
    {
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2140;
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2140;
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2140;
        uvec4 _2155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2156 = _2155.x;
        uint _2167 = uint((float(_2155.y) * floor(float(uint(cbSceneParam._m0[85u].y * _377) / _2156))) + floor(float(uint(cbSceneParam._m0[85u].x * _376) / _2156)));
        float _2177 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2178 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        uint _2181 = uint(isnan(14.0) ? _2178 : (isnan(_2178) ? 14.0 : min(_2178, 14.0)));
        uvec4 _2186 = texelFetch(g_lightClusterGridBuffer, int(((_2181 << 2u) + (_2167 << 6u)) >> 2u));
        uint _2187 = _2186.x;
        uint _2188 = _2155.z;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        if (((((1u << ((_2188 >> 4u) & 15u)) + 4294967295u) & _2187) == 0u) || ((_2188 & 240u) == 0u))
        {
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
        }
        else
        {
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            uint _2439 = 0u;
            uint _2448;
            bool _2449;
            for (;;)
            {
                _2448 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2439 << 2u)) >> 2u)).x;
                _2449 = _2448 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2449)
                {
                    frontier_phi_63_pred = _2438;
                    frontier_phi_63_pred_1 = _2437;
                    frontier_phi_63_pred_2 = _2436;
                    frontier_phi_63_pred_3 = _2435;
                    frontier_phi_63_pred_4 = _2434;
                    frontier_phi_63_pred_5 = _2433;
                }
                else
                {
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    uint _2563;
                    _2557 = _2433;
                    _2558 = _2434;
                    _2559 = _2435;
                    _2560 = _2436;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2448;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    for (;;)
                    {
                        uint _2567 = uint(findLSB(_2563)) + (_2439 << 5u);
                        uint _2564 = (_2563 + 4294967295u) & _2563;
                        uint _2569 = _2567 * 48u;
                        vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 3u)).x));
                        uint _2589 = (_2567 * 48u) + 4u;
                        vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2589)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 3u)).x));
                        uint _2608 = (_2567 * 48u) + 8u;
                        vec3 _2619 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x));
                        float _2623 = _2583.x - _2141;
                        float _2624 = _2583.y - _2142;
                        float _2625 = _2583.z - _2143;
                        float _2626 = dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625));
                        float _2629 = inversesqrt(_2626);
                        float _2630 = _2629 * _2623;
                        float _2631 = _2629 * _2624;
                        float _2632 = _2629 * _2625;
                        float _2633 = dot(vec3(_398, _401, _404), vec3(_2630, _2631, _2632));
                        float _2638 = 1.0 - (_2626 * _2583.w);
                        float _3922 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2639 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2640 = sqrt(_2626) * _2602.w;
                        float _2643 = 1.39999997615814208984375 / (_2640 + 1.39999997615814208984375);
                        float _2644 = _2643 * _2643;
                        float _2647 = ((1.0 - _2644) * _2633) + _2644;
                        float _2650 = _2640 * _2640;
                        float _2654 = ((isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))) * _2639) / ((_2650 * 0.699999988079071044921875) + 1.0);
                        float _2658 = (-0.0) - _2141;
                        float _2659 = (-0.0) - _2142;
                        float _2660 = (-0.0) - _2143;
                        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2675 = exp2(log2(1.0 / ((_2650 * 3.5) + 5.0)) * 0.25);
                        float _2676 = 1.0 - _474;
                        float _2683 = sqrt(1.0 - ((1.0 - (_2676 * _2676)) * (1.0 - (_2675 * _2675))));
                        float _2684 = _2683 * _2683;
                        float _2685 = _2684 * _2684;
                        float _2686 = _2665 + _2630;
                        float _2687 = _2666 + _2631;
                        float _2688 = _2667 + _2632;
                        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
                        float _2696 = dot(vec3(_398, _401, _404), vec3(_2665, _2666, _2667));
                        float _3938 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2699 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2700 = dot(vec3(_398, _401, _404), vec3(_2692 * _2686, _2692 * _2687, _2692 * _2688));
                        float _3949 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2707 = ((_2703 * _2703) * (_2685 + (-1.0))) + 1.0;
                        float _2708 = _2643 * _2684;
                        float _2709 = _2708 * _2708;
                        float _2712 = ((1.0 - _2709) * _2633) + _2709;
                        float _3960 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2713 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2714 = 1.0 - _2684;
                        float _2724 = (0.5 / (((_2713 * ((_2699 * _2714) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2714) + _2684) * _2699))) * _2713;
                        float _3971 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2735 = (((_2685 * 3.1415927410125732421875) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) / ((_2707 * _2707) * ((_2650 * 2.1991131305694580078125) + 3.141590118408203125))) * _2639;
                        _2492 = (_2654 * _2602.x) + _2560;
                        _2493 = (_2654 * _2602.y) + _2561;
                        _2494 = (_2654 * _2602.z) + _2562;
                        _2489 = (_2735 * _2619.x) + _2557;
                        _2490 = (_2735 * _2619.y) + _2558;
                        _2491 = (_2735 * _2619.z) + _2559;
                        if (_2564 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2557 = _2489;
                            _2558 = _2490;
                            _2559 = _2491;
                            _2560 = _2492;
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2564;
                        }
                    }
                    frontier_phi_63_pred = _2494;
                    frontier_phi_63_pred_1 = _2493;
                    frontier_phi_63_pred_2 = _2492;
                    frontier_phi_63_pred_3 = _2491;
                    frontier_phi_63_pred_4 = _2490;
                    frontier_phi_63_pred_5 = _2489;
                }
                _2300 = frontier_phi_63_pred;
                _2298 = frontier_phi_63_pred_1;
                _2296 = frontier_phi_63_pred_2;
                _2294 = frontier_phi_63_pred_3;
                _2292 = frontier_phi_63_pred_4;
                _2290 = frontier_phi_63_pred_5;
                uint _2440 = _2439 + 1u;
                if (_2440 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2433 = _2290;
                    _2434 = _2292;
                    _2435 = _2294;
                    _2436 = _2296;
                    _2437 = _2298;
                    _2438 = _2300;
                    _2439 = _2440;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
        }
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.z;
        uint _2306 = (_2304 >> 8u) & 15u;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((4294967295u << _2306) & _2187) == 0u)
        {
            _2401 = _2289;
            _2403 = _2291;
            _2405 = _2293;
            _2407 = _2295;
            _2409 = _2297;
            _2411 = _2299;
        }
        else
        {
            float _2426 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _2427 = _2426 * _2141;
            float _2428 = _2426 * _2142;
            float _2429 = _2426 * _2143;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2306 < ((_2304 >> 12u) & 15u))
            {
                float _2402;
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2540 = _2289;
                float _2541 = _2291;
                float _2542 = _2293;
                float _2543 = _2295;
                float _2544 = _2297;
                float _2545 = _2299;
                uint _2546 = _2306;
                uint _2555;
                bool _2556;
                for (;;)
                {
                    _2555 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                    _2556 = _2555 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2556)
                    {
                        frontier_phi_69_pred = _2545;
                        frontier_phi_69_pred_1 = _2544;
                        frontier_phi_69_pred_2 = _2543;
                        frontier_phi_69_pred_3 = _2542;
                        frontier_phi_69_pred_4 = _2541;
                        frontier_phi_69_pred_5 = _2540;
                    }
                    else
                    {
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2753 = _2540;
                        float _2754 = _2541;
                        float _2755 = _2542;
                        float _2756 = _2543;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        uint _2759 = _2555;
                        uint _2760;
                        vec4 _2785;
                        float _2786;
                        vec4 _2801;
                        vec3 _2813;
                        vec4 _2829;
                        vec4 _2845;
                        float _2892;
                        bool _2893;
                        for (;;)
                        {
                            uint _2770 = ((_2546 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2759));
                            _2760 = (_2759 + 4294967295u) & _2759;
                            uint _2772 = _2770 * 40u;
                            _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            _2786 = _2785.w;
                            uint _2788 = (_2770 * 40u) + 4u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2803 = (_2770 * 40u) + 8u;
                            _2813 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x));
                            uint _2816 = (_2770 * 40u) + 16u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2832 = (_2770 * 40u) + 20u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2848 = (_2770 * 40u) + 24u;
                            vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2867 = (_2770 * 40u) + 28u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2892 = fma(_2143, _2880.z, fma(_2142, _2880.y, _2880.x * _2141)) + _2880.w;
                            _2893 = !((fma(_2143, _2861.z, fma(_2142, _2861.y, _2861.x * _2141)) + _2861.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2893)
                            {
                                float _2920 = _2785.x - _2141;
                                float _2921 = _2785.y - _2142;
                                float _2922 = _2785.z - _2143;
                                float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                                float _2926 = inversesqrt(_2923);
                                float _2927 = _2926 * _2920;
                                float _2928 = _2926 * _2921;
                                float _2929 = _2926 * _2922;
                                float _2933 = 1.0 - (_2923 / (_2786 * _2786));
                                float _3982 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2938 = sqrt(_2923) * _2801.w;
                                float _2940 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                                float _2941 = _2940 * _2940;
                                float _2944 = ((1.0 - _2941) * dot(vec3(_2927, _2928, _2929), vec3(_398, _401, _404))) + _2941;
                                float _2947 = _2938 * _2938;
                                float _2951 = (fma(_2143, _2829.z, fma(_2142, _2829.y, _2829.x * _2141)) + _2829.w) / _2892;
                                float _2952 = (fma(_2143, _2845.z, fma(_2142, _2845.y, _2845.x * _2141)) + _2845.w) / _2892;
                                float _2956 = 1.0 - dot(vec2(_2951, _2952), vec2(_2951, _2952));
                                float _3998 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _2958 = _2957 * (((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2934) / ((_2947 * 0.699999988079071044921875) + 1.0));
                                float _2970 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                                float _2971 = 1.0 - _474;
                                float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                                float _2979 = _2978 * _2978;
                                float _2980 = _2979 * _2979;
                                float _2981 = _2927 - _2427;
                                float _2982 = _2928 - _2428;
                                float _2983 = _2929 - _2429;
                                float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                                float _2991 = dot(vec3(_398, _401, _404), vec3((-0.0) - _2427, (-0.0) - _2428, (-0.0) - _2429));
                                float _4009 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _2995 = dot(vec3(_398, _401, _404), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                                float _4020 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                                float _3003 = _2940 * _2979;
                                float _3004 = _3003 * _3003;
                                float _3010 = ((1.0 - _3004) * dot(vec3(_398, _401, _404), vec3(_2927, _2928, _2929))) + _3004;
                                float _4031 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3012 = 1.0 - _2979;
                                float _3022 = (0.5 / (((_3011 * ((_2994 * _3012) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2979) * _2994))) * _3011;
                                float _4042 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3032 = (_2957 * _2934) * (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_3002 * _3002) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2958 * _2801.z;
                                frontier_phi_75_pred_1 = _2958 * _2801.y;
                                frontier_phi_75_pred_2 = _2958 * _2801.x;
                                frontier_phi_75_pred_3 = _3032 * _2813.z;
                                frontier_phi_75_pred_4 = _3032 * _2813.y;
                                frontier_phi_75_pred_5 = _3032 * _2813.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3041 = frontier_phi_75_pred;
                            _3040 = frontier_phi_75_pred_1;
                            _3039 = frontier_phi_75_pred_2;
                            _3038 = frontier_phi_75_pred_3;
                            _3037 = frontier_phi_75_pred_4;
                            _3036 = frontier_phi_75_pred_5;
                            _2743 = _3039 + _2756;
                            _2744 = _3040 + _2757;
                            _2745 = _3041 + _2758;
                            _2740 = _3036 + _2753;
                            _2741 = _3037 + _2754;
                            _2742 = _3038 + _2755;
                            if (_2760 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2760;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2745;
                        frontier_phi_69_pred_1 = _2744;
                        frontier_phi_69_pred_2 = _2743;
                        frontier_phi_69_pred_3 = _2742;
                        frontier_phi_69_pred_4 = _2741;
                        frontier_phi_69_pred_5 = _2740;
                    }
                    _2412 = frontier_phi_69_pred;
                    _2410 = frontier_phi_69_pred_1;
                    _2408 = frontier_phi_69_pred_2;
                    _2406 = frontier_phi_69_pred_3;
                    _2404 = frontier_phi_69_pred_4;
                    _2402 = frontier_phi_69_pred_5;
                    uint _2547 = _2546 + 1u;
                    if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2540 = _2402;
                        _2541 = _2404;
                        _2542 = _2406;
                        _2543 = _2408;
                        _2544 = _2410;
                        _2545 = _2412;
                        _2546 = _2547;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2412;
                frontier_phi_57_58_ladder_1 = _2410;
                frontier_phi_57_58_ladder_2 = _2408;
                frontier_phi_57_58_ladder_3 = _2406;
                frontier_phi_57_58_ladder_4 = _2404;
                frontier_phi_57_58_ladder_5 = _2402;
            }
            else
            {
                frontier_phi_57_58_ladder = _2299;
                frontier_phi_57_58_ladder_1 = _2297;
                frontier_phi_57_58_ladder_2 = _2295;
                frontier_phi_57_58_ladder_3 = _2293;
                frontier_phi_57_58_ladder_4 = _2291;
                frontier_phi_57_58_ladder_5 = _2289;
            }
            _2401 = frontier_phi_57_58_ladder_5;
            _2403 = frontier_phi_57_58_ladder_4;
            _2405 = frontier_phi_57_58_ladder_3;
            _2407 = frontier_phi_57_58_ladder_2;
            _2409 = frontier_phi_57_58_ladder_1;
            _2411 = frontier_phi_57_58_ladder;
        }
        float _2416 = isnan(1.0) ? _458 : (isnan(_458) ? 1.0 : min(_458, 1.0));
        _2199 = (_2416 * _2407) + _1636;
        _2201 = (_2416 * _2409) + _1638;
        _2203 = (_2416 * _2411) + _1640;
        _2205 = ((_2401 * _443) * _2416) + _1981;
        _2207 = ((_2403 * _445) * _2416) + _1983;
        _2209 = ((_2405 * _446) * _2416) + _1985;
    }
    else
    {
        _2199 = _1636;
        _2201 = _1638;
        _2203 = _1640;
        _2205 = _1981;
        _2207 = _1983;
        _2209 = _1985;
    }
    float _4058 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4069 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4080 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4091 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _2234 = cbInstanceData._m0[_417 + 6u].w * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)));
    float _2239 = _376 / cbSceneParam._m0[86u].x;
    float _2240 = _377 / cbSceneParam._m0[86u].y;
    vec4 _2254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2256 = _2254.x;
    float _2257 = _2254.y;
    float _2258 = _2254.z;
    float _2259 = _2254.w;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2314 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2315 = _2314 / _309;
        float _2326 = _2315 * _361;
        float _2327 = _362 * _2315;
        float _2328 = (-0.0) - _2327;
        float _2329 = _2315 * _363;
        float _2331 = (cbSceneParam._m0[77u].w * _2328) / _2314;
        float _2332 = _2331 + cbSceneParam._m0[79u].w;
        float _2333 = cbSceneParam._m0[79u].w - _2327;
        float _2339 = sqrt(((_2326 * _2326) + (_2327 * _2327)) + (_2329 * _2329));
        float _2342 = (1.0 - (cbSceneParam._m0[77u].w / _2314)) * _2339;
        float _2347 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2349 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2502;
        if (abs((_2328 - _2331) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2502 = ((((_2332 > 0.0) ? exp2(_2347 * _2332) : (2.0 - exp2(_2349 * _2332))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2342;
        }
        else
        {
            float _2462 = 1.0 / cbSceneParam._m0[80u].x;
            float _2463 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : max(_2332, _2333));
            float _2464 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : min(_2332, _2333));
            float _2473 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : min(_2463, 0.0));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            _2502 = ((abs(_2339 / _2328) * cbSceneParam._m0[80u].y) * ((((_2473 - _2474) * 2.0) - ((exp2(_2347 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)))) - exp2(_2347 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0))))) * _2462)) - ((exp2(_2349 * _2473) - exp2(_2349 * _2474)) * _2462))) + (_2342 * cbSceneParam._m0[80u].z);
        }
        vec4 _2504 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, 1.0), 0.0);
        float _2513 = exp2((_2502 * (-1.44269502162933349609375)) * (1.0 - _2504.w));
        float _2514 = log2(_2513);
        float _2530 = log2(_2259);
        _2351 = (exp2(_2530 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].x)) * _2504.x) / cbSceneParam._m0[78u].x)) + _2256;
        _2353 = (exp2(_2530 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].y)) * _2504.y) / cbSceneParam._m0[78u].y)) + _2257;
        _2355 = (exp2(_2530 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].z)) * _2504.z) / cbSceneParam._m0[78u].z)) + _2258;
        _2357 = _2513 * _2259;
    }
    else
    {
        _2351 = _2256;
        _2353 = _2257;
        _2355 = _2258;
        _2357 = _2259;
    }
    float _2369 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2370 = _2369 == 3.0;
    float _2371 = log2(_2357);
    float _2378 = exp2(_2371 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2199 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _458))) + ((_2205 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1268)) * cbPerFrame._m0[3u].x));
    float _2379 = exp2(_2371 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2201 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _458))) + ((_2207 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1268)) * cbPerFrame._m0[3u].x));
    float _2380 = exp2(_2371 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2203 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _458))) + ((_2209 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1268)) * cbPerFrame._m0[3u].x));
    float _2389 = (_2369 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2389 * (_2370 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2351)));
    SV_Target.y = _2389 * (_2370 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2353)));
    SV_Target.z = _2389 * (_2370 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.w = _2234;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2234;
}


