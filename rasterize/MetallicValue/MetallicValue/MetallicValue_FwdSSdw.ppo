#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicValue_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicValue_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _835;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(MetallicValue_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _226.x;
    float _230 = _226.y;
    float _231 = _226.z;
    float _233 = _226.w * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(MetallicValue_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3198 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))));
    float _269 = fma(_266, _210, fma(_259, _202 * TANGENT.x, (_188 * _180) * _257));
    float _272 = fma(_266, _211, fma(_259, _202 * TANGENT.y, (_188 * _181) * _257));
    float _275 = fma(_266, _212, fma(_259, _202 * TANGENT.z, (_188 * _182) * _257));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _286 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _287 = _286 * _280;
    float _288 = _286 * _281;
    float _289 = _286 * _282;
    float _3209 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _290 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _291 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3242 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3253 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3264 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _295 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _353 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _363 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _353);
    float _364 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _353);
    float _365 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _353);
    float _369 = inversesqrt(dot(vec3(_363, _364, _365), vec3(_363, _364, _365)));
    float _370 = _363 * _369;
    float _371 = _364 * _369;
    float _372 = _365 * _369;
    float _378 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _379 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _400 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _403 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _406 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _419 = uint(roundEven(NORMAL.w)) * 13u;
    uint _422 = (_419 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _428 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_422].x;
    float _429 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_422].y;
    float _430 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_422].z;
    float _3275 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _434 = 1.0 - _295;
    float _435 = _431 * _434;
    float _436 = _432 * _434;
    float _437 = _433 * _434;
    float _442 = (_431 + (-0.039999999105930328369140625)) * _295;
    float _443 = (_432 + (-0.039999999105930328369140625)) * _295;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _295;
    float _445 = _442 + 0.039999999105930328369140625;
    float _447 = _443 + 0.039999999105930328369140625;
    float _448 = _444 + 0.039999999105930328369140625;
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _378, cbSceneParam._m0[86u].y * _379));
    float _460 = _457.x * TEXCOORD_1.w;
    float _461 = dot(vec3(_287, _288, _289), vec3(_370, _371, _372));
    float _464 = _461 * 2.0;
    float _468 = (_464 * _287) - _370;
    float _469 = (_464 * _288) - _371;
    float _470 = (_464 * _289) - _372;
    float _474 = abs(dot(vec3(_370, _371, _372), vec3(_287, _288, _289)));
    float _3308 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _476 = sqrt(_291);
    float _489 = exp2((_476 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_476 * 3.0));
    float _495 = (1.0 - _489) * ((_476 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _496 = _489 * _476;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _834;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _559 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _563 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _567 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _592 = _524 + _287;
        float _593 = _528 + _288;
        float _594 = _532 + _289;
        float _604 = fma(_594, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592)) - _559;
        float _605 = fma(_594, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592)) - _563;
        float _606 = fma(_594, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592)) - _567;
        float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
        float _623 = ((_610 * _604) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_559 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_610 * _605) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_563 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_610 * _606) / cbModelParam._m0[34u].z) + ((((((_567 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        float _662 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_628.x + (-0.5));
        float _664 = _662 * (_628.y + (-0.5));
        float _665 = _662 * (_628.z + (-0.5));
        float _672 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_635.x + (-0.5));
        float _674 = _672 * (_635.y + (-0.5));
        float _675 = _672 * (_635.z + (-0.5));
        float _682 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_642.x + (-0.5));
        float _684 = _682 * (_642.y + (-0.5));
        float _685 = _682 * (_642.z + (-0.5));
        float _692 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_649.x + (-0.5));
        float _694 = _692 * (_649.y + (-0.5));
        float _695 = _692 * (_649.z + (-0.5));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = _663 * 0.5;
        float _700 = _673 * 0.5;
        float _701 = _683 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _716 = (dot(vec3(_287, _288, _289), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _726 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3356 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_728 + 1.0))) + _733) * _696;
        float _743 = _664 * 0.5;
        float _744 = _674 * 0.5;
        float _745 = _684 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _759 = (dot(vec3(_287, _288, _289), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _768 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3389 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_770 + 1.0))) + _775) * _697;
        float _785 = _665 * 0.5;
        float _786 = _675 * 0.5;
        float _787 = _685 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_287, _288, _289), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3422 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_812 + 1.0))) + _817) * _698;
        _834 = _665;
        _836 = _664;
        _837 = _663;
        _838 = _675;
        _839 = _674;
        _840 = _673;
        _841 = _685;
        _842 = _684;
        _843 = _683;
        _844 = _698;
        _845 = _697;
        _846 = _696;
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
    }
    else
    {
        _834 = _835;
        _836 = _835;
        _837 = _835;
        _838 = _835;
        _839 = _835;
        _840 = _835;
        _841 = _835;
        _842 = _835;
        _843 = _835;
        _844 = _835;
        _845 = _835;
        _846 = _835;
        _847 = 0.0;
        _848 = 0.0;
        _849 = 0.0;
    }
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _875 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _879 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _883 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _906 = _524 + _287;
        float _907 = _528 + _288;
        float _908 = _532 + _289;
        float _918 = fma(_908, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906)) - _875;
        float _919 = fma(_908, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906)) - _879;
        float _920 = fma(_908, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906)) - _883;
        float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
        float _937 = ((_924 * _918) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_875 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_924 * _919) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_879 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_924 * _920) / cbModelParam._m0[35u].z) + ((((((_883 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        float _974 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_941.x + (-0.5));
        float _976 = _974 * (_941.y + (-0.5));
        float _977 = _974 * (_941.z + (-0.5));
        float _984 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_948.x + (-0.5));
        float _986 = _984 * (_948.y + (-0.5));
        float _987 = _984 * (_948.z + (-0.5));
        float _994 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_955.x + (-0.5));
        float _996 = _994 * (_955.y + (-0.5));
        float _997 = _994 * (_955.z + (-0.5));
        float _1004 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_962.x + (-0.5));
        float _1006 = _1004 * (_962.y + (-0.5));
        float _1007 = _1004 * (_962.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_287, _288, _289), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3485 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1038 + 1.0))) + _1043) * _1008;
        float _1053 = _976 * 0.5;
        float _1054 = _986 * 0.5;
        float _1055 = _996 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_287, _288, _289), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3518 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1080 + 1.0))) + _1085) * _1009;
        float _1095 = _977 * 0.5;
        float _1096 = _987 * 0.5;
        float _1097 = _997 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_287, _288, _289), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3551 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1122 + 1.0))) + _1127) * _1010;
        _1144 = _977;
        _1145 = _976;
        _1146 = _975;
        _1147 = _987;
        _1148 = _986;
        _1149 = _985;
        _1150 = _997;
        _1151 = _996;
        _1152 = _995;
        _1153 = _1010;
        _1154 = _1009;
        _1155 = _1008;
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _835;
        _1145 = _835;
        _1146 = _835;
        _1147 = _835;
        _1148 = _835;
        _1149 = _835;
        _1150 = _835;
        _1151 = _835;
        _1152 = _835;
        _1153 = _835;
        _1154 = _835;
        _1155 = _835;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1191 = fma(_1170, cbSceneParam._m0[89u].z, fma(_1169, cbSceneParam._m0[89u].y, _1168 * cbSceneParam._m0[89u].x));
    float _1194 = fma(_1170, cbSceneParam._m0[90u].z, fma(_1169, cbSceneParam._m0[90u].y, _1168 * cbSceneParam._m0[90u].x));
    float _1197 = fma(_1170, cbSceneParam._m0[91u].z, fma(_1169, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1168));
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1218 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1221 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1255;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1228 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_834, _838, _841, _844));
        float _1232 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_836, _839, _842, _845));
        float _1236 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_837, _840, _843, _846));
        float _1243 = dot(vec4(cbModelParam._m0[39u]), vec4(_1212, _1213, _1214, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1243) ? 0.0 : (isnan(0.0) ? _1243 : max(0.0, _1243))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1266;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1257 = dot(vec4(cbModelParam._m0[40u]), vec4(_1212, _1213, _1214, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1270 = (_1266 * cbModelParam._m0[1u].x) + (_1255 * (1.0 - cbModelParam._m0[1u].x));
    float _1280 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1281 = isnan(_1280) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1280 : min(cbModelParam._m0[25u].z, _1280));
    float _1363;
    float _1365;
    float _1367;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1330 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1334 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1338 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1341 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _1344 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _1347 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _1375;
        if (_1341 > 0.0)
        {
            _1375 = abs((1.0 - _1330) / _1341);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1330 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1375 = frontier_phi_16_14_ladder;
        }
        float _1604;
        if (_1344 > 0.0)
        {
            _1604 = abs((1.0 - _1334) / _1344);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1334 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1604 = frontier_phi_25_21_ladder;
        }
        float _1861;
        if (_1347 > 0.0)
        {
            _1861 = abs((1.0 - _1338) / _1347);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1338 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1861 = frontier_phi_37_32_ladder;
        }
        float _1863 = isnan(_1604) ? _1375 : (isnan(_1375) ? _1604 : min(_1375, _1604));
        float _1864 = isnan(_1861) ? _1863 : (isnan(_1863) ? _1861 : min(_1863, _1861));
        float _1868 = (_1864 * _1341) + _1330;
        float _1869 = (_1864 * _1344) + _1334;
        float _1870 = (_1864 * _1347) + _1338;
        float _1871 = _1864 * 9.9999997473787516355514526367188e-05;
        float _1873 = (-1.0) - _1871;
        float _1875 = _1871 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1870 > _1875) || ((_1870 < _1873) || ((_1869 > _1875) || ((_1869 < _1873) || ((_1868 < _1873) || (_1868 > _1875))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1870, cbModelParam._m0[9u].z, fma(_1869, cbModelParam._m0[9u].y, _1868 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1870, cbModelParam._m0[10u].z, fma(_1869, cbModelParam._m0[10u].y, _1868 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1870, cbModelParam._m0[11u].z, fma(_1869, cbModelParam._m0[11u].y, _1868 * cbModelParam._m0[11u].x))), _1281);
            frontier_phi_15_37_ladder = _1998.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1998.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1998.x * cbModelParam._m0[1u].y;
        }
        _1363 = frontier_phi_15_37_ladder_2;
        _1365 = frontier_phi_15_37_ladder_1;
        _1367 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _1281);
        _1363 = _1351.x * cbModelParam._m0[1u].y;
        _1365 = _1351.y * cbModelParam._m0[1u].y;
        _1367 = _1351.z * cbModelParam._m0[1u].y;
    }
    float _1371 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1372 = isnan(_1371) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1371 : min(cbModelParam._m0[25u].w, _1371));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1429 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1433 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1437 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1440 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1443 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1446 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1609;
        if (_1440 > 0.0)
        {
            _1609 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1609 = frontier_phi_27_23_ladder;
        }
        float _1888;
        if (_1443 > 0.0)
        {
            _1888 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1888 = frontier_phi_39_34_ladder;
        }
        float _2101;
        if (_1446 > 0.0)
        {
            _2101 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2101 = frontier_phi_48_45_ladder;
        }
        float _2103 = isnan(_1888) ? _1609 : (isnan(_1609) ? _1888 : min(_1609, _1888));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1440) + _1429;
        float _2109 = (_2104 * _1443) + _1433;
        float _2110 = (_2104 * _1446) + _1437;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2111;
        float _2114 = _2111 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2110 > _2114) || ((_2110 < _2112) || ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 < _2112) || (_2108 > _2114))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2110, cbModelParam._m0[17u].z, fma(_2109, cbModelParam._m0[17u].y, _2108 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2110, cbModelParam._m0[18u].z, fma(_2109, cbModelParam._m0[18u].y, _2108 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2110, cbModelParam._m0[19u].z, fma(_2109, cbModelParam._m0[19u].y, _2108 * cbModelParam._m0[19u].x))), _1372);
            frontier_phi_24_48_ladder = _2310.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2310.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2310.x * cbModelParam._m0[1u].z;
        }
        _1465 = frontier_phi_24_48_ladder_2;
        _1467 = frontier_phi_24_48_ladder_1;
        _1469 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _1372);
        _1465 = _1449.x * cbModelParam._m0[1u].z;
        _1467 = _1449.y * cbModelParam._m0[1u].z;
        _1469 = _1449.z * cbModelParam._m0[1u].z;
    }
    float _1482 = (((_495 * _445) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1465 - _1363)) + _1363);
    float _1484 = (((_495 * _447) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1467 - _1365)) + _1365);
    float _1486 = (((_495 * _448) + _496) * _460) * ((cbModelParam._m0[1u].w * (_1469 - _1367)) + _1367);
    float _1489 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1484, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1484, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1484, cbSceneParam._m0[91u].y, _1482 * cbSceneParam._m0[91u].x));
    vec4 _1503 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_378, _379));
    float _1505 = _1503.w;
    float _1517 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1505);
    float _1518 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1505);
    float _1519 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1505);
    uvec4 _1523 = floatBitsToUint(cbInstanceData._m0[_419 + 5u]);
    uint _1525 = _1523.x * 14u;
    uint _1526 = _1525 + 13u;
    float _1533 = _460 + (-1.0);
    float _1538 = (cbLight._m0[_1526].x * _1533) + 1.0;
    float _1539 = (cbLight._m0[_1526].y * _1533) + 1.0;
    float _1540 = (cbLight._m0[_1526].z * _1533) + 1.0;
    float _1541 = (cbLight._m0[_1526].w * _1533) + 1.0;
    uint _1542 = _1525 + 5u;
    float _1548 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1552 = _1525 + 4u;
    float _1562 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
    uint _1566 = _1525 | 1u;
    float _1577 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_287, _288, _289));
    float _1580 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_287, _288, _289));
    float _3687 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _3698 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _1585 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.3183098733425140380859375;
    float _1587 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1594 = ((cbLight._m0[_1542].x * _1548) * _1587) + (((cbLight._m0[_1552].x * _1517) * _1562) * _1585);
    float _1595 = ((_1548 * cbLight._m0[_1542].y) * _1587) + (((cbLight._m0[_1552].y * _1518) * _1562) * _1585);
    float _1596 = ((_1548 * cbLight._m0[_1542].z) * _1587) + (((cbLight._m0[_1552].z * _1519) * _1562) * _1585);
    uvec4 _1601 = floatBitsToUint(cbLight._m0[_1525 + 12u]);
    bool _1603 = _1601.x == 0u;
    float _1614;
    float _1616;
    float _1618;
    if (_1603)
    {
        _1614 = _1594;
        _1616 = _1595;
        _1618 = _1596;
    }
    else
    {
        uint _1622 = _1525 + 6u;
        float _1638 = (dot(vec3(cbLight._m0[_1525 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1639 = _1638 * _1638;
        float _3709 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1641 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1614 = (((cbLight._m0[_1622].x * 0.3183098733425140380859375) * _1640) * _1641) + _1594;
        _1616 = (((cbLight._m0[_1622].y * 0.3183098733425140380859375) * _1640) * _1641) + _1595;
        _1618 = (((cbLight._m0[_1622].z * 0.3183098733425140380859375) * _1640) * _1641) + _1596;
    }
    bool _1621 = _1601.y == 0u;
    float _1659;
    float _1661;
    float _1663;
    if (_1621)
    {
        _1659 = _1614;
        _1661 = _1616;
        _1663 = _1618;
    }
    else
    {
        uint _1832 = _1525 + 7u;
        float _1848 = (dot(vec3(cbLight._m0[_1525 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3725 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1851 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1659 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1614;
        _1661 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1616;
        _1663 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1618;
    }
    uint _1666 = _1525 + 8u;
    float _1679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1525].w)) * _291) * 0.949999988079071044921875);
    float _1680 = _1679 * _1679;
    float _1681 = cbLight._m0[_1525].x + _370;
    float _1682 = cbLight._m0[_1525].y + _371;
    float _1683 = cbLight._m0[_1525].z + _372;
    float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
    float _1688 = _1687 * _1681;
    float _1689 = _1687 * _1682;
    float _1690 = _1687 * _1683;
    float _1691 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1525].xyz));
    float _3741 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1694 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _1695 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1696 = dot(vec3(_287, _288, _289), vec3(_1688, _1689, _1690));
    float _3763 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1699 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1700 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1688, _1689, _1690));
    float _3774 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1704 = _1680 * _1680;
    float _1708 = ((_1699 * _1699) * (_1704 + (-1.0))) + 1.0;
    float _1716 = exp2(log2(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * 5.0);
    float _1717 = 0.959999978542327880859375 - _442;
    float _1719 = 0.959999978542327880859375 - _443;
    float _1720 = 0.959999978542327880859375 - _444;
    float _1727 = 1.0 - _1680;
    float _1738 = (0.5 / (((_1695 * ((_1694 * _1727) + _1680)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _1727) + _1680) * _1694))) * _1694;
    float _3785 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1740 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1704 / ((_1708 * _1708) * 3.141590118408203125));
    uint _1754 = _1525 + 9u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1566].w)) * _291) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1566].x + _370;
    float _1768 = cbLight._m0[_1566].y + _371;
    float _1769 = cbLight._m0[_1566].z + _372;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1566].xyz));
    float _3796 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1781 = dot(vec3(_287, _288, _289), vec3(_1774, _1775, _1776));
    float _3807 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1785 = dot(vec3(cbLight._m0[_1566].xyz), vec3(_1774, _1775, _1776));
    float _3818 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1789 = _1766 * _1766;
    float _1793 = ((_1784 * _1784) * (_1789 + (-1.0))) + 1.0;
    float _1800 = exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0);
    float _1807 = 1.0 - _1766;
    float _1817 = (0.5 / (((_1695 * ((_1780 * _1807) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _1807) + _1766) * _1780))) * _1780;
    float _3829 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1789 / ((_1793 * _1793) * 3.141590118408203125));
    float _1829 = (((((_1800 * _1717) + _445) * cbLight._m0[_1754].x) * _1819) * _1548) + ((((cbLight._m0[_1666].x * _1517) * ((_1716 * _1717) + _445)) * _1740) * _1562);
    float _1830 = (((((_1800 * _1719) + _447) * cbLight._m0[_1754].y) * _1819) * _1548) + ((((cbLight._m0[_1666].y * _1518) * ((_1716 * _1719) + _447)) * _1740) * _1562);
    float _1831 = (((((_1800 * _1720) + _448) * cbLight._m0[_1754].z) * _1819) * _1548) + ((((cbLight._m0[_1666].z * _1519) * ((_1716 * _1720) + _448)) * _1740) * _1562);
    float _1893;
    float _1895;
    float _1897;
    if (_1603)
    {
        _1893 = _1829;
        _1895 = _1830;
        _1897 = _1831;
    }
    else
    {
        uint _1899 = _1525 + 2u;
        uint _1903 = _1525 + 10u;
        float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _291) * 0.949999988079071044921875);
        float _1918 = _1917 * _1917;
        float _1919 = cbLight._m0[_1899].x + _370;
        float _1920 = cbLight._m0[_1899].y + _371;
        float _1921 = cbLight._m0[_1899].z + _372;
        float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
        float _1926 = _1925 * _1919;
        float _1927 = _1925 * _1920;
        float _1928 = _1925 * _1921;
        float _1929 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1899].xyz));
        float _3840 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1932 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1933 = dot(vec3(_287, _288, _289), vec3(_1926, _1927, _1928));
        float _3851 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1936 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1937 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_1926, _1927, _1928));
        float _3862 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = _1918 * _1918;
        float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
        float _1952 = exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0);
        float _1959 = 1.0 - _1918;
        float _1969 = (0.5 / (((_1695 * ((_1932 * _1959) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _1959) + _1918) * _1932))) * _1932;
        float _3873 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1971 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
        float _1972 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1893 = (((((_1952 * _1717) + _445) * cbLight._m0[_1903].x) * _1971) * _1972) + _1829;
        _1895 = (((((_1952 * _1719) + _447) * cbLight._m0[_1903].y) * _1971) * _1972) + _1830;
        _1897 = (((((_1952 * _1720) + _448) * cbLight._m0[_1903].z) * _1971) * _1972) + _1831;
    }
    float _2007;
    float _2009;
    float _2011;
    if (_1621)
    {
        _2007 = _1893;
        _2009 = _1895;
        _2011 = _1897;
    }
    else
    {
        uint _2018 = _1525 + 3u;
        uint _2022 = _1525 + 11u;
        float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _291) * 0.949999988079071044921875);
        float _2037 = _2036 * _2036;
        float _2038 = cbLight._m0[_2018].x + _370;
        float _2039 = cbLight._m0[_2018].y + _371;
        float _2040 = cbLight._m0[_2018].z + _372;
        float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
        float _2045 = _2044 * _2038;
        float _2046 = _2044 * _2039;
        float _2047 = _2044 * _2040;
        float _2048 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2018].xyz));
        float _3889 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _2052 = dot(vec3(_287, _288, _289), vec3(_2045, _2046, _2047));
        float _3900 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2056 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2045, _2046, _2047));
        float _3911 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2060 = _2037 * _2037;
        float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
        float _2071 = exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0);
        float _2078 = 1.0 - _2037;
        float _2088 = (0.5 / (((_1695 * ((_2051 * _2078) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_1695 * _2078) + _2037) * _2051))) * _2051;
        float _3922 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _2007 = (((((_2071 * _1717) + _445) * cbLight._m0[_2022].x) * _2090) * _2091) + _1893;
        _2009 = (((((_2071 * _1719) + _447) * cbLight._m0[_2022].y) * _2090) * _2091) + _1895;
        _2011 = (((((_2071 * _1720) + _448) * cbLight._m0[_2022].z) * _2090) * _2091) + _1897;
    }
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    if (_1523.y == 0u)
    {
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2166;
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2166;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2166;
        uvec4 _2181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2182 = _2181.x;
        uint _2193 = uint((float(_2181.y) * floor(float(uint(cbSceneParam._m0[85u].y * _379) / _2182))) + floor(float(uint(cbSceneParam._m0[85u].x * _378) / _2182)));
        float _2203 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2204 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        uint _2207 = uint(isnan(14.0) ? _2204 : (isnan(_2204) ? 14.0 : min(_2204, 14.0)));
        uvec4 _2212 = texelFetch(g_lightClusterGridBuffer, int(((_2207 << 2u) + (_2193 << 6u)) >> 2u));
        uint _2213 = _2212.x;
        uint _2214 = _2181.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2214 >> 4u) & 15u)) + 4294967295u) & _2213) == 0u) || ((_2214 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            uint _2465 = 0u;
            uint _2474;
            bool _2475;
            for (;;)
            {
                _2474 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2465 << 2u)) >> 2u)).x;
                _2475 = _2474 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2475)
                {
                    frontier_phi_63_pred = _2464;
                    frontier_phi_63_pred_1 = _2463;
                    frontier_phi_63_pred_2 = _2462;
                    frontier_phi_63_pred_3 = _2461;
                    frontier_phi_63_pred_4 = _2460;
                    frontier_phi_63_pred_5 = _2459;
                }
                else
                {
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    uint _2589;
                    _2583 = _2459;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2474;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    for (;;)
                    {
                        uint _2593 = uint(findLSB(_2589)) + (_2465 << 5u);
                        uint _2590 = (_2589 + 4294967295u) & _2589;
                        uint _2595 = _2593 * 48u;
                        vec4 _2609 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2615 = (_2593 * 48u) + 4u;
                        vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2615)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 3u)).x));
                        uint _2634 = (_2593 * 48u) + 8u;
                        vec3 _2645 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x));
                        float _2649 = _2609.x - _2167;
                        float _2650 = _2609.y - _2168;
                        float _2651 = _2609.z - _2169;
                        float _2652 = dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651));
                        float _2655 = inversesqrt(_2652);
                        float _2656 = _2655 * _2649;
                        float _2657 = _2655 * _2650;
                        float _2658 = _2655 * _2651;
                        float _2659 = dot(vec3(_400, _403, _406), vec3(_2656, _2657, _2658));
                        float _2664 = 1.0 - (_2652 * _2609.w);
                        float _3948 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2665 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2666 = sqrt(_2652) * _2628.w;
                        float _2669 = 1.39999997615814208984375 / (_2666 + 1.39999997615814208984375);
                        float _2670 = _2669 * _2669;
                        float _2673 = ((1.0 - _2670) * _2659) + _2670;
                        float _2676 = _2666 * _2666;
                        float _2680 = ((isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))) * _2665) / ((_2676 * 0.699999988079071044921875) + 1.0);
                        float _2684 = (-0.0) - _2167;
                        float _2685 = (-0.0) - _2168;
                        float _2686 = (-0.0) - _2169;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2691 = _2690 * _2684;
                        float _2692 = _2690 * _2685;
                        float _2693 = _2690 * _2686;
                        float _2701 = exp2(log2(1.0 / ((_2676 * 3.5) + 5.0)) * 0.25);
                        float _2702 = 1.0 - _476;
                        float _2709 = sqrt(1.0 - ((1.0 - (_2702 * _2702)) * (1.0 - (_2701 * _2701))));
                        float _2710 = _2709 * _2709;
                        float _2711 = _2710 * _2710;
                        float _2712 = _2691 + _2656;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
                        float _2722 = dot(vec3(_400, _403, _406), vec3(_2691, _2692, _2693));
                        float _3964 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2725 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2726 = dot(vec3(_400, _403, _406), vec3(_2718 * _2712, _2718 * _2713, _2718 * _2714));
                        float _3975 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2733 = ((_2729 * _2729) * (_2711 + (-1.0))) + 1.0;
                        float _2734 = _2669 * _2710;
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * _2659) + _2735;
                        float _3986 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2740 = 1.0 - _2710;
                        float _2750 = (0.5 / (((_2739 * ((_2725 * _2740) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2740) + _2710) * _2725))) * _2739;
                        float _3997 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2761 = (((_2711 * 3.1415927410125732421875) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) / ((_2733 * _2733) * ((_2676 * 2.1991131305694580078125) + 3.141590118408203125))) * _2665;
                        _2518 = (_2680 * _2628.x) + _2586;
                        _2519 = (_2680 * _2628.y) + _2587;
                        _2520 = (_2680 * _2628.z) + _2588;
                        _2515 = (_2761 * _2645.x) + _2583;
                        _2516 = (_2761 * _2645.y) + _2584;
                        _2517 = (_2761 * _2645.z) + _2585;
                        if (_2590 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2583 = _2515;
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2590;
                        }
                    }
                    frontier_phi_63_pred = _2520;
                    frontier_phi_63_pred_1 = _2519;
                    frontier_phi_63_pred_2 = _2518;
                    frontier_phi_63_pred_3 = _2517;
                    frontier_phi_63_pred_4 = _2516;
                    frontier_phi_63_pred_5 = _2515;
                }
                _2326 = frontier_phi_63_pred;
                _2324 = frontier_phi_63_pred_1;
                _2322 = frontier_phi_63_pred_2;
                _2320 = frontier_phi_63_pred_3;
                _2318 = frontier_phi_63_pred_4;
                _2316 = frontier_phi_63_pred_5;
                uint _2466 = _2465 + 1u;
                if (_2466 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2459 = _2316;
                    _2460 = _2318;
                    _2461 = _2320;
                    _2462 = _2322;
                    _2463 = _2324;
                    _2464 = _2326;
                    _2465 = _2466;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((4294967295u << _2332) & _2213) == 0u)
        {
            _2427 = _2315;
            _2429 = _2317;
            _2431 = _2319;
            _2433 = _2321;
            _2435 = _2323;
            _2437 = _2325;
        }
        else
        {
            float _2452 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _2453 = _2452 * _2167;
            float _2454 = _2452 * _2168;
            float _2455 = _2452 * _2169;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2566 = _2315;
                float _2567 = _2317;
                float _2568 = _2319;
                float _2569 = _2321;
                float _2570 = _2323;
                float _2571 = _2325;
                uint _2572 = _2332;
                uint _2581;
                bool _2582;
                for (;;)
                {
                    _2581 = texelFetch(g_lightClassification, int((((_2207 << 5u) + (_2193 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                    _2582 = _2581 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2582)
                    {
                        frontier_phi_69_pred = _2571;
                        frontier_phi_69_pred_1 = _2570;
                        frontier_phi_69_pred_2 = _2569;
                        frontier_phi_69_pred_3 = _2568;
                        frontier_phi_69_pred_4 = _2567;
                        frontier_phi_69_pred_5 = _2566;
                    }
                    else
                    {
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _2779 = _2566;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        uint _2785 = _2581;
                        uint _2786;
                        vec4 _2811;
                        float _2812;
                        vec4 _2827;
                        vec3 _2839;
                        vec4 _2855;
                        vec4 _2871;
                        float _2918;
                        bool _2919;
                        for (;;)
                        {
                            uint _2796 = ((_2572 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2785));
                            _2786 = (_2785 + 4294967295u) & _2785;
                            uint _2798 = _2796 * 40u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2812 = _2811.w;
                            uint _2814 = (_2796 * 40u) + 4u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2829 = (_2796 * 40u) + 8u;
                            _2839 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x));
                            uint _2842 = (_2796 * 40u) + 16u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2858 = (_2796 * 40u) + 20u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2874 = (_2796 * 40u) + 24u;
                            vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2893 = (_2796 * 40u) + 28u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2918 = fma(_2169, _2906.z, fma(_2168, _2906.y, _2906.x * _2167)) + _2906.w;
                            _2919 = !((fma(_2169, _2887.z, fma(_2168, _2887.y, _2887.x * _2167)) + _2887.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2919)
                            {
                                float _2946 = _2811.x - _2167;
                                float _2947 = _2811.y - _2168;
                                float _2948 = _2811.z - _2169;
                                float _2949 = dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948));
                                float _2952 = inversesqrt(_2949);
                                float _2953 = _2952 * _2946;
                                float _2954 = _2952 * _2947;
                                float _2955 = _2952 * _2948;
                                float _2959 = 1.0 - (_2949 / (_2812 * _2812));
                                float _4008 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2964 = sqrt(_2949) * _2827.w;
                                float _2966 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                                float _2967 = _2966 * _2966;
                                float _2970 = ((1.0 - _2967) * dot(vec3(_2953, _2954, _2955), vec3(_400, _403, _406))) + _2967;
                                float _2973 = _2964 * _2964;
                                float _2977 = (fma(_2169, _2855.z, fma(_2168, _2855.y, _2855.x * _2167)) + _2855.w) / _2918;
                                float _2978 = (fma(_2169, _2871.z, fma(_2168, _2871.y, _2871.x * _2167)) + _2871.w) / _2918;
                                float _2982 = 1.0 - dot(vec2(_2977, _2978), vec2(_2977, _2978));
                                float _4024 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2984 = _2983 * (((isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))) * _2960) / ((_2973 * 0.699999988079071044921875) + 1.0));
                                float _2996 = exp2(log2(1.0 / ((_2973 * 3.5) + 5.0)) * 0.25);
                                float _2997 = 1.0 - _476;
                                float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                                float _3005 = _3004 * _3004;
                                float _3006 = _3005 * _3005;
                                float _3007 = _2953 - _2453;
                                float _3008 = _2954 - _2454;
                                float _3009 = _2955 - _2455;
                                float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                                float _3017 = dot(vec3(_400, _403, _406), vec3((-0.0) - _2453, (-0.0) - _2454, (-0.0) - _2455));
                                float _4035 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3020 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3021 = dot(vec3(_400, _403, _406), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                                float _4046 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3024 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                                float _3029 = _2966 * _3005;
                                float _3030 = _3029 * _3029;
                                float _3036 = ((1.0 - _3030) * dot(vec3(_400, _403, _406), vec3(_2953, _2954, _2955))) + _3030;
                                float _4057 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3038 = 1.0 - _3005;
                                float _3048 = (0.5 / (((_3037 * ((_3020 * _3038) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3005) * _3020))) * _3037;
                                float _4068 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3058 = (_2983 * _2960) * (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) / ((_3028 * _3028) * ((_2973 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2984 * _2827.z;
                                frontier_phi_75_pred_1 = _2984 * _2827.y;
                                frontier_phi_75_pred_2 = _2984 * _2827.x;
                                frontier_phi_75_pred_3 = _3058 * _2839.z;
                                frontier_phi_75_pred_4 = _3058 * _2839.y;
                                frontier_phi_75_pred_5 = _3058 * _2839.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3067 = frontier_phi_75_pred;
                            _3066 = frontier_phi_75_pred_1;
                            _3065 = frontier_phi_75_pred_2;
                            _3064 = frontier_phi_75_pred_3;
                            _3063 = frontier_phi_75_pred_4;
                            _3062 = frontier_phi_75_pred_5;
                            _2769 = _3065 + _2782;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2766 = _3062 + _2779;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            if (_2786 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2786;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2771;
                        frontier_phi_69_pred_1 = _2770;
                        frontier_phi_69_pred_2 = _2769;
                        frontier_phi_69_pred_3 = _2768;
                        frontier_phi_69_pred_4 = _2767;
                        frontier_phi_69_pred_5 = _2766;
                    }
                    _2438 = frontier_phi_69_pred;
                    _2436 = frontier_phi_69_pred_1;
                    _2434 = frontier_phi_69_pred_2;
                    _2432 = frontier_phi_69_pred_3;
                    _2430 = frontier_phi_69_pred_4;
                    _2428 = frontier_phi_69_pred_5;
                    uint _2573 = _2572 + 1u;
                    if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2566 = _2428;
                        _2567 = _2430;
                        _2568 = _2432;
                        _2569 = _2434;
                        _2570 = _2436;
                        _2571 = _2438;
                        _2572 = _2573;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2438;
                frontier_phi_57_58_ladder_1 = _2436;
                frontier_phi_57_58_ladder_2 = _2434;
                frontier_phi_57_58_ladder_3 = _2432;
                frontier_phi_57_58_ladder_4 = _2430;
                frontier_phi_57_58_ladder_5 = _2428;
            }
            else
            {
                frontier_phi_57_58_ladder = _2325;
                frontier_phi_57_58_ladder_1 = _2323;
                frontier_phi_57_58_ladder_2 = _2321;
                frontier_phi_57_58_ladder_3 = _2319;
                frontier_phi_57_58_ladder_4 = _2317;
                frontier_phi_57_58_ladder_5 = _2315;
            }
            _2427 = frontier_phi_57_58_ladder_5;
            _2429 = frontier_phi_57_58_ladder_4;
            _2431 = frontier_phi_57_58_ladder_3;
            _2433 = frontier_phi_57_58_ladder_2;
            _2435 = frontier_phi_57_58_ladder_1;
            _2437 = frontier_phi_57_58_ladder;
        }
        float _2442 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
        _2225 = (_2442 * _2433) + _1659;
        _2227 = (_2442 * _2435) + _1661;
        _2229 = (_2442 * _2437) + _1663;
        _2231 = ((_2427 * _445) * _2442) + _2007;
        _2233 = ((_2429 * _447) * _2442) + _2009;
        _2235 = ((_2431 * _448) * _2442) + _2011;
    }
    else
    {
        _2225 = _1659;
        _2227 = _1661;
        _2229 = _1663;
        _2231 = _2007;
        _2233 = _2009;
        _2235 = _2011;
    }
    float _4084 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4095 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4106 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4117 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _2260 = cbInstanceData._m0[_419 + 6u].w * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)));
    float _2265 = _378 / cbSceneParam._m0[86u].x;
    float _2266 = _379 / cbSceneParam._m0[86u].y;
    vec4 _2280 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2282 = _2280.x;
    float _2283 = _2280.y;
    float _2284 = _2280.z;
    float _2285 = _2280.w;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2340 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2341 = _2340 / _311;
        float _2352 = _2341 * _363;
        float _2353 = _364 * _2341;
        float _2354 = (-0.0) - _2353;
        float _2355 = _2341 * _365;
        float _2357 = (cbSceneParam._m0[77u].w * _2354) / _2340;
        float _2358 = _2357 + cbSceneParam._m0[79u].w;
        float _2359 = cbSceneParam._m0[79u].w - _2353;
        float _2365 = sqrt(((_2352 * _2352) + (_2353 * _2353)) + (_2355 * _2355));
        float _2368 = (1.0 - (cbSceneParam._m0[77u].w / _2340)) * _2365;
        float _2373 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2375 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2528;
        if (abs((_2354 - _2357) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2528 = ((((_2358 > 0.0) ? exp2(_2373 * _2358) : (2.0 - exp2(_2375 * _2358))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2368;
        }
        else
        {
            float _2488 = 1.0 / cbSceneParam._m0[80u].x;
            float _2489 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : max(_2358, _2359));
            float _2490 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : min(_2358, _2359));
            float _2499 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : min(_2489, 0.0));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            _2528 = ((abs(_2365 / _2354) * cbSceneParam._m0[80u].y) * ((((_2499 - _2500) * 2.0) - ((exp2(_2373 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)))) - exp2(_2373 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0))))) * _2488)) - ((exp2(_2375 * _2499) - exp2(_2375 * _2500)) * _2488))) + (_2368 * cbSceneParam._m0[80u].z);
        }
        vec4 _2530 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, 1.0), 0.0);
        float _2539 = exp2((_2528 * (-1.44269502162933349609375)) * (1.0 - _2530.w));
        float _2540 = log2(_2539);
        float _2556 = log2(_2285);
        _2377 = (exp2(_2556 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2540 * cbSceneParam._m0[78u].x)) * _2530.x) / cbSceneParam._m0[78u].x)) + _2282;
        _2379 = (exp2(_2556 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2540 * cbSceneParam._m0[78u].y)) * _2530.y) / cbSceneParam._m0[78u].y)) + _2283;
        _2381 = (exp2(_2556 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2540 * cbSceneParam._m0[78u].z)) * _2530.z) / cbSceneParam._m0[78u].z)) + _2284;
        _2383 = _2539 * _2285;
    }
    else
    {
        _2377 = _2282;
        _2379 = _2283;
        _2381 = _2284;
        _2383 = _2285;
    }
    float _2395 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2396 = _2395 == 3.0;
    float _2397 = log2(_2383);
    float _2404 = exp2(_2397 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2225 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _460))) + ((_2231 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1270)) * cbPerFrame._m0[3u].x));
    float _2405 = exp2(_2397 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2227 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _460))) + ((_2233 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1270)) * cbPerFrame._m0[3u].x));
    float _2406 = exp2(_2397 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2229 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _460))) + ((_2235 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1270)) * cbPerFrame._m0[3u].x));
    float _2415 = (_2395 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2415 * (_2396 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2377)));
    SV_Target.y = _2415 * (_2396 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.z = _2415 * (_2396 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.w = _2260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2260;
}


