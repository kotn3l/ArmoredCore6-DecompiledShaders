#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicValue_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicValue_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _878;
float _3271;
float _3272;
float _3273;
float _3274;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(MetallicValue_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _234 = _228.w;
    float _235 = _234 * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(MetallicValue_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3283 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))));
    float _271 = fma(_268, _212, fma(_261, _204 * TANGENT.x, (_190 * _182) * _259));
    float _274 = fma(_268, _213, fma(_261, _204 * TANGENT.y, (_190 * _183) * _259));
    float _277 = fma(_268, _214, fma(_261, _204 * TANGENT.z, (_190 * _184) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _289 = _288 * _282;
    float _290 = _288 * _283;
    float _291 = _288 * _284;
    float _3294 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _292 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _293 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3327 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3338 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3349 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _297 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _355 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _365 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _355);
    float _366 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _355);
    float _367 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _355);
    float _371 = inversesqrt(dot(vec3(_365, _366, _367), vec3(_365, _366, _367)));
    float _372 = _365 * _371;
    float _373 = _366 * _371;
    float _374 = _367 * _371;
    vec4 _379 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _381 = _379.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _557 = sqrt(((_365 * _365) + (_366 * _366)) + (_367 * _367));
        float _563 = (cbMatDynParam._m0[5u].x * _557) + cbMatDynParam._m0[5u].y;
        float _3360 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _564 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _568 = (cbMatDynParam._m0[5u].z * _557) + cbMatDynParam._m0[5u].w;
        float _3371 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) - _564)) + _564) < ((_381 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _417 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _420 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = _433 + 9u;
    uint _436 = _435 + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3382 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _448 = 1.0 - _297;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _297;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _297;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _297;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _474 = _471.x * TEXCOORD_1.w;
    float _475 = dot(vec3(_289, _290, _291), vec3(_372, _373, _374));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _289) - _372;
    float _483 = (_478 * _290) - _373;
    float _484 = (_478 * _291) - _374;
    float _488 = abs(dot(vec3(_372, _373, _374), vec3(_289, _290, _291)));
    float _3415 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_293);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _877;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _602 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _606 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _610 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _635 = _538 + _289;
        float _636 = _542 + _290;
        float _637 = _546 + _291;
        float _647 = fma(_637, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635)) - _602;
        float _648 = fma(_637, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635)) - _606;
        float _649 = fma(_637, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635)) - _610;
        float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
        float _666 = ((_653 * _647) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_602 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_653 * _648) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_606 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_653 * _649) / cbModelParam._m0[34u].z) + ((((((_610 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        float _705 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_671.x + (-0.5));
        float _707 = _705 * (_671.y + (-0.5));
        float _708 = _705 * (_671.z + (-0.5));
        float _715 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_678.x + (-0.5));
        float _717 = _715 * (_678.y + (-0.5));
        float _718 = _715 * (_678.z + (-0.5));
        float _725 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_685.x + (-0.5));
        float _727 = _725 * (_685.y + (-0.5));
        float _728 = _725 * (_685.z + (-0.5));
        float _735 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_692.x + (-0.5));
        float _737 = _735 * (_692.y + (-0.5));
        float _738 = _735 * (_692.z + (-0.5));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = _706 * 0.5;
        float _743 = _716 * 0.5;
        float _744 = _726 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _759 = (dot(vec3(_289, _290, _291), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _769 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3463 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_771 + 1.0))) + _776) * _739;
        float _786 = _707 * 0.5;
        float _787 = _717 * 0.5;
        float _788 = _727 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_289, _290, _291), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3496 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_813 + 1.0))) + _818) * _740;
        float _828 = _708 * 0.5;
        float _829 = _718 * 0.5;
        float _830 = _728 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_289, _290, _291), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3529 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_855 + 1.0))) + _860) * _741;
        _877 = _708;
        _879 = _707;
        _880 = _706;
        _881 = _718;
        _882 = _717;
        _883 = _716;
        _884 = _728;
        _885 = _727;
        _886 = _726;
        _887 = _741;
        _888 = _740;
        _889 = _739;
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
    }
    else
    {
        _877 = _878;
        _879 = _878;
        _880 = _878;
        _881 = _878;
        _882 = _878;
        _883 = _878;
        _884 = _878;
        _885 = _878;
        _886 = _878;
        _887 = _878;
        _888 = _878;
        _889 = _878;
        _890 = 0.0;
        _891 = 0.0;
        _892 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _925 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _929 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _952 = _538 + _289;
        float _953 = _542 + _290;
        float _954 = _546 + _291;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_289, _290, _291), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3592 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_289, _290, _291), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3625 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_289, _290, _291), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3658 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _878;
        _1191 = _878;
        _1192 = _878;
        _1193 = _878;
        _1194 = _878;
        _1195 = _878;
        _1196 = _878;
        _1197 = _878;
        _1198 = _878;
        _1199 = _878;
        _1200 = _878;
        _1201 = _878;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = _484 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_877, _881, _884, _887));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_879, _882, _885, _888));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _883, _886, _889));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1390 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1393 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1421;
        if (_1387 > 0.0)
        {
            _1421 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1421 = frontier_phi_19_17_ladder;
        }
        float _1629;
        if (_1390 > 0.0)
        {
            _1629 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1629 = frontier_phi_28_24_ladder;
        }
        float _1883;
        if (_1393 > 0.0)
        {
            _1883 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1883 = frontier_phi_40_35_ladder;
        }
        float _1885 = isnan(_1629) ? _1421 : (isnan(_1421) ? _1629 : min(_1421, _1629));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1387) + _1376;
        float _1891 = (_1886 * _1390) + _1380;
        float _1892 = (_1886 * _1393) + _1384;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1895 = (-1.0) - _1893;
        float _1897 = _1893 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1892 > _1897) || ((_1892 < _1895) || ((_1891 > _1897) || ((_1891 < _1895) || ((_1890 < _1895) || (_1890 > _1897))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_18_40_ladder = _2020.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2020.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_18_40_ladder_2;
        _1411 = frontier_phi_18_40_ladder_1;
        _1413 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1327);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1417 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1417 : min(cbModelParam._m0[25u].w, _1417));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1475 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1479 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1483 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1486 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1489 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1492 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1634;
        if (_1486 > 0.0)
        {
            _1634 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1634 = frontier_phi_30_26_ladder;
        }
        float _1910;
        if (_1489 > 0.0)
        {
            _1910 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1910 = frontier_phi_42_37_ladder;
        }
        float _2123;
        if (_1492 > 0.0)
        {
            _2123 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2123 = frontier_phi_51_48_ladder;
        }
        float _2125 = isnan(_1910) ? _1634 : (isnan(_1634) ? _1910 : min(_1634, _1910));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1486) + _1475;
        float _2131 = (_2126 * _1489) + _1479;
        float _2132 = (_2126 * _1492) + _1483;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2133;
        float _2136 = _2133 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2132 > _2136) || ((_2132 < _2134) || ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 < _2134) || (_2130 > _2136))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2132, cbModelParam._m0[17u].z, fma(_2131, cbModelParam._m0[17u].y, _2130 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2132, cbModelParam._m0[18u].z, fma(_2131, cbModelParam._m0[18u].y, _2130 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2132, cbModelParam._m0[19u].z, fma(_2131, cbModelParam._m0[19u].y, _2130 * cbModelParam._m0[19u].x))), _1418);
            frontier_phi_27_51_ladder = _2332.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2332.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2332.x * cbModelParam._m0[1u].z;
        }
        _1511 = frontier_phi_27_51_ladder_2;
        _1513 = frontier_phi_27_51_ladder_1;
        _1515 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1418);
        _1511 = _1495.x * cbModelParam._m0[1u].z;
        _1513 = _1495.y * cbModelParam._m0[1u].z;
        _1515 = _1495.z * cbModelParam._m0[1u].z;
    }
    float _1528 = (((_509 * _459) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1511 - _1409)) + _1409);
    float _1530 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1532 = (((_509 * _462) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1535 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, _1528 * cbSceneParam._m0[91u].x));
    uvec4 _1551 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1553 = _1551.x * 14u;
    uint _1554 = _1553 + 13u;
    float _1561 = _474 + (-1.0);
    float _1566 = (cbLight._m0[_1554].x * _1561) + 1.0;
    float _1567 = (cbLight._m0[_1554].y * _1561) + 1.0;
    float _1568 = (cbLight._m0[_1554].z * _1561) + 1.0;
    float _1569 = (cbLight._m0[_1554].w * _1561) + 1.0;
    uint _1570 = _1553 + 5u;
    float _1576 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1580 = _1553 + 4u;
    float _1587 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1591 = _1553 | 1u;
    float _1602 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_289, _290, _291));
    float _1605 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_289, _290, _291));
    float _3794 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _3805 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1610 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1612 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1619 = ((cbLight._m0[_1570].x * _1576) * _1612) + ((cbLight._m0[_1580].x * _1587) * _1610);
    float _1620 = ((_1576 * cbLight._m0[_1570].y) * _1612) + ((_1587 * cbLight._m0[_1580].y) * _1610);
    float _1621 = ((_1576 * cbLight._m0[_1570].z) * _1612) + ((_1587 * cbLight._m0[_1580].z) * _1610);
    uvec4 _1626 = floatBitsToUint(cbLight._m0[_1553 + 12u]);
    bool _1628 = _1626.x == 0u;
    float _1639;
    float _1641;
    float _1643;
    if (_1628)
    {
        _1639 = _1619;
        _1641 = _1620;
        _1643 = _1621;
    }
    else
    {
        uint _1647 = _1553 + 6u;
        float _1663 = (dot(vec3(cbLight._m0[_1553 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1664 = _1663 * _1663;
        float _3816 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1666 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1639 = (((cbLight._m0[_1647].x * 0.3183098733425140380859375) * _1665) * _1666) + _1619;
        _1641 = (((cbLight._m0[_1647].y * 0.3183098733425140380859375) * _1665) * _1666) + _1620;
        _1643 = (((cbLight._m0[_1647].z * 0.3183098733425140380859375) * _1665) * _1666) + _1621;
    }
    bool _1646 = _1626.y == 0u;
    float _1684;
    float _1686;
    float _1688;
    if (_1646)
    {
        _1684 = _1639;
        _1686 = _1641;
        _1688 = _1643;
    }
    else
    {
        uint _1854 = _1553 + 7u;
        float _1870 = (dot(vec3(cbLight._m0[_1553 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3832 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1873 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1684 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1639;
        _1686 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1641;
        _1688 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1643;
    }
    uint _1691 = _1553 + 8u;
    float _1704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _293) * 0.949999988079071044921875);
    float _1705 = _1704 * _1704;
    float _1706 = cbLight._m0[_1553].x + _372;
    float _1707 = cbLight._m0[_1553].y + _373;
    float _1708 = cbLight._m0[_1553].z + _374;
    float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
    float _1713 = _1712 * _1706;
    float _1714 = _1712 * _1707;
    float _1715 = _1712 * _1708;
    float _1716 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1553].xyz));
    float _3848 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1720 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1721 = dot(vec3(_289, _290, _291), vec3(_1713, _1714, _1715));
    float _3870 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1725 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1713, _1714, _1715));
    float _3881 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = _1705 * _1705;
    float _1733 = ((_1724 * _1724) * (_1729 + (-1.0))) + 1.0;
    float _1741 = exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0);
    float _1742 = 0.959999978542327880859375 - _456;
    float _1744 = 0.959999978542327880859375 - _457;
    float _1745 = 0.959999978542327880859375 - _458;
    float _1752 = 1.0 - _1705;
    float _1763 = (0.5 / (((_1720 * ((_1719 * _1752) + _1705)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1752) + _1705) * _1719))) * _1719;
    float _3892 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1729 / ((_1733 * _1733) * 3.141590118408203125));
    uint _1776 = _1553 + 9u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1591].w)) * _293) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1591].x + _372;
    float _1790 = cbLight._m0[_1591].y + _373;
    float _1791 = cbLight._m0[_1591].z + _374;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1591].xyz));
    float _3903 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1803 = dot(vec3(_289, _290, _291), vec3(_1796, _1797, _1798));
    float _3914 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1591].xyz), vec3(_1796, _1797, _1798));
    float _3925 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1788 * _1788;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1822 = exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0);
    float _1829 = 1.0 - _1788;
    float _1839 = (0.5 / (((_1720 * ((_1802 * _1829) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1829) + _1788) * _1802))) * _1802;
    float _3936 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    float _1851 = (((((_1822 * _1742) + _459) * cbLight._m0[_1776].x) * _1841) * _1576) + (((((_1741 * _1742) + _459) * cbLight._m0[_1691].x) * _1765) * _1587);
    float _1852 = (((((_1822 * _1744) + _461) * cbLight._m0[_1776].y) * _1841) * _1576) + (((((_1741 * _1744) + _461) * cbLight._m0[_1691].y) * _1765) * _1587);
    float _1853 = (((((_1822 * _1745) + _462) * cbLight._m0[_1776].z) * _1841) * _1576) + (((((_1741 * _1745) + _462) * cbLight._m0[_1691].z) * _1765) * _1587);
    float _1915;
    float _1917;
    float _1919;
    if (_1628)
    {
        _1915 = _1851;
        _1917 = _1852;
        _1919 = _1853;
    }
    else
    {
        uint _1921 = _1553 + 2u;
        uint _1925 = _1553 + 10u;
        float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _293) * 0.949999988079071044921875);
        float _1940 = _1939 * _1939;
        float _1941 = cbLight._m0[_1921].x + _372;
        float _1942 = cbLight._m0[_1921].y + _373;
        float _1943 = cbLight._m0[_1921].z + _374;
        float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
        float _1948 = _1947 * _1941;
        float _1949 = _1947 * _1942;
        float _1950 = _1947 * _1943;
        float _1951 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1921].xyz));
        float _3947 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1955 = dot(vec3(_289, _290, _291), vec3(_1948, _1949, _1950));
        float _3958 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_1948, _1949, _1950));
        float _3969 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1963 = _1940 * _1940;
        float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
        float _1974 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
        float _1981 = 1.0 - _1940;
        float _1991 = (0.5 / (((_1720 * ((_1954 * _1981) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _1981) + _1940) * _1954))) * _1954;
        float _3980 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1993 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
        float _1994 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1915 = (((((_1974 * _1742) + _459) * cbLight._m0[_1925].x) * _1993) * _1994) + _1851;
        _1917 = (((((_1974 * _1744) + _461) * cbLight._m0[_1925].y) * _1993) * _1994) + _1852;
        _1919 = (((((_1974 * _1745) + _462) * cbLight._m0[_1925].z) * _1993) * _1994) + _1853;
    }
    float _2029;
    float _2031;
    float _2033;
    if (_1646)
    {
        _2029 = _1915;
        _2031 = _1917;
        _2033 = _1919;
    }
    else
    {
        uint _2040 = _1553 + 3u;
        uint _2044 = _1553 + 11u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _293) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _372;
        float _2061 = cbLight._m0[_2040].y + _373;
        float _2062 = cbLight._m0[_2040].z + _374;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2040].xyz));
        float _3996 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2074 = dot(vec3(_289, _290, _291), vec3(_2067, _2068, _2069));
        float _4007 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _4018 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
        float _2100 = 1.0 - _2059;
        float _2110 = (0.5 / (((_1720 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1720 * _2100) + _2059) * _2073))) * _2073;
        float _4029 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2112 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2113 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _2029 = (((((_2093 * _1742) + _459) * cbLight._m0[_2044].x) * _2112) * _2113) + _1915;
        _2031 = (((((_2093 * _1744) + _461) * cbLight._m0[_2044].y) * _2112) * _2113) + _1917;
        _2033 = (((((_2093 * _1745) + _462) * cbLight._m0[_2044].z) * _2112) * _2113) + _1919;
    }
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_1551.y == 0u)
    {
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2188;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2188;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2188;
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.x;
        uint _2215 = uint((float(_2203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2204))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2204)));
        float _2225 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        uint _2229 = uint(isnan(14.0) ? _2226 : (isnan(_2226) ? 14.0 : min(_2226, 14.0)));
        uvec4 _2234 = texelFetch(g_lightClusterGridBuffer, int(((_2229 << 2u) + (_2215 << 6u)) >> 2u));
        uint _2235 = _2234.x;
        uint _2236 = _2203.z;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        if (((((1u << ((_2236 >> 4u) & 15u)) + 4294967295u) & _2235) == 0u) || ((_2236 & 240u) == 0u))
        {
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
        }
        else
        {
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            uint _2495 = 0u;
            uint _2504;
            bool _2505;
            for (;;)
            {
                _2504 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2495 << 2u)) >> 2u)).x;
                _2505 = _2504 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2505)
                {
                    frontier_phi_68_pred = _2491;
                    frontier_phi_68_pred_1 = _2494;
                    frontier_phi_68_pred_2 = _2493;
                    frontier_phi_68_pred_3 = _2492;
                    frontier_phi_68_pred_4 = _2490;
                    frontier_phi_68_pred_5 = _2489;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2489;
                    _2635 = _2490;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2494;
                    _2640 = _2504;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2495 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2189;
                        float _2701 = _2660.y - _2190;
                        float _2702 = _2660.z - _2191;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_414, _417, _420), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _4055 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2189;
                        float _2736 = (-0.0) - _2190;
                        float _2737 = (-0.0) - _2191;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _490;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_414, _417, _420), vec3(_2742, _2743, _2744));
                        float _4071 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2777 = dot(vec3(_414, _417, _420), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _4082 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _4093 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _4104 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2564 = (_2731 * _2679.x) + _2637;
                        _2565 = (_2731 * _2679.y) + _2638;
                        _2566 = (_2731 * _2679.z) + _2639;
                        _2561 = (_2812 * _2696.x) + _2634;
                        _2562 = (_2812 * _2696.y) + _2635;
                        _2563 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2566;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_68_pred = _2563;
                    frontier_phi_68_pred_1 = _2566;
                    frontier_phi_68_pred_2 = _2565;
                    frontier_phi_68_pred_3 = _2564;
                    frontier_phi_68_pred_4 = _2562;
                    frontier_phi_68_pred_5 = _2561;
                }
                _2342 = frontier_phi_68_pred;
                _2348 = frontier_phi_68_pred_1;
                _2346 = frontier_phi_68_pred_2;
                _2344 = frontier_phi_68_pred_3;
                _2340 = frontier_phi_68_pred_4;
                _2338 = frontier_phi_68_pred_5;
                uint _2496 = _2495 + 1u;
                if (_2496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2489 = _2338;
                    _2490 = _2340;
                    _2491 = _2342;
                    _2492 = _2344;
                    _2493 = _2346;
                    _2494 = _2348;
                    _2495 = _2496;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
        }
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.z;
        uint _2354 = (_2352 >> 8u) & 15u;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        if (((4294967295u << _2354) & _2235) == 0u)
        {
            _2457 = _2337;
            _2459 = _2339;
            _2461 = _2341;
            _2463 = _2343;
            _2465 = _2345;
            _2467 = _2347;
        }
        else
        {
            float _2482 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _2483 = _2482 * _2189;
            float _2484 = _2482 * _2190;
            float _2485 = _2482 * _2191;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2354 < ((_2352 >> 12u) & 15u))
            {
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2617 = _2337;
                float _2618 = _2339;
                float _2619 = _2341;
                float _2620 = _2343;
                float _2621 = _2345;
                float _2622 = _2347;
                uint _2623 = _2354;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2633)
                    {
                        frontier_phi_79_pred = _2622;
                        frontier_phi_79_pred_1 = _2621;
                        frontier_phi_79_pred_2 = _2620;
                        frontier_phi_79_pred_3 = _2619;
                        frontier_phi_79_pred_4 = _2618;
                        frontier_phi_79_pred_5 = _2617;
                    }
                    else
                    {
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _2839 = _2617;
                        float _2840 = _2618;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        float _2844 = _2622;
                        uint _2845 = _2632;
                        uint _2846;
                        vec4 _2871;
                        float _2872;
                        vec4 _2887;
                        vec3 _2899;
                        vec4 _2915;
                        vec4 _2931;
                        float _2978;
                        bool _2979;
                        for (;;)
                        {
                            uint _2856 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2845));
                            _2846 = (_2845 + 4294967295u) & _2845;
                            uint _2858 = _2856 * 40u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            _2872 = _2871.w;
                            uint _2874 = (_2856 * 40u) + 4u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2889 = (_2856 * 40u) + 8u;
                            _2899 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x));
                            uint _2902 = (_2856 * 40u) + 16u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2856 * 40u) + 20u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2934 = (_2856 * 40u) + 24u;
                            vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2953 = (_2856 * 40u) + 28u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2978 = fma(_2191, _2966.z, fma(_2190, _2966.y, _2966.x * _2189)) + _2966.w;
                            _2979 = !((fma(_2191, _2947.z, fma(_2190, _2947.y, _2947.x * _2189)) + _2947.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2979)
                            {
                                float _3006 = _2871.x - _2189;
                                float _3007 = _2871.y - _2190;
                                float _3008 = _2871.z - _2191;
                                float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                                float _3012 = inversesqrt(_3009);
                                float _3013 = _3012 * _3006;
                                float _3014 = _3012 * _3007;
                                float _3015 = _3012 * _3008;
                                float _3019 = 1.0 - (_3009 / (_2872 * _2872));
                                float _4115 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3024 = sqrt(_3009) * _2887.w;
                                float _3026 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                                float _3027 = _3026 * _3026;
                                float _3030 = ((1.0 - _3027) * dot(vec3(_3013, _3014, _3015), vec3(_414, _417, _420))) + _3027;
                                float _3033 = _3024 * _3024;
                                float _3037 = (fma(_2191, _2915.z, fma(_2190, _2915.y, _2915.x * _2189)) + _2915.w) / _2978;
                                float _3038 = (fma(_2191, _2931.z, fma(_2190, _2931.y, _2931.x * _2189)) + _2931.w) / _2978;
                                float _3042 = 1.0 - dot(vec2(_3037, _3038), vec2(_3037, _3038));
                                float _4131 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3044 = _3043 * (((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3020) / ((_3033 * 0.699999988079071044921875) + 1.0));
                                float _3056 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                                float _3057 = 1.0 - _490;
                                float _3064 = sqrt(1.0 - ((1.0 - (_3057 * _3057)) * (1.0 - (_3056 * _3056))));
                                float _3065 = _3064 * _3064;
                                float _3066 = _3065 * _3065;
                                float _3067 = _3013 - _2483;
                                float _3068 = _3014 - _2484;
                                float _3069 = _3015 - _2485;
                                float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                                float _3077 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2483, (-0.0) - _2484, (-0.0) - _2485));
                                float _4142 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3081 = dot(vec3(_414, _417, _420), vec3(_3073 * _3067, _3073 * _3068, _3073 * _3069));
                                float _4153 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3088 = ((_3084 * _3084) * (_3066 + (-1.0))) + 1.0;
                                float _3089 = _3026 * _3065;
                                float _3090 = _3089 * _3089;
                                float _3096 = ((1.0 - _3090) * dot(vec3(_414, _417, _420), vec3(_3013, _3014, _3015))) + _3090;
                                float _4164 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3098 = 1.0 - _3065;
                                float _3108 = (0.5 / (((_3097 * ((_3080 * _3098) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3065) * _3080))) * _3097;
                                float _4175 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3118 = (_3043 * _3020) * (((_3066 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_3088 * _3088) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3044 * _2887.z;
                                frontier_phi_85_pred_1 = _3044 * _2887.y;
                                frontier_phi_85_pred_2 = _3044 * _2887.x;
                                frontier_phi_85_pred_3 = _3118 * _2899.z;
                                frontier_phi_85_pred_4 = _3118 * _2899.y;
                                frontier_phi_85_pred_5 = _3118 * _2899.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3127 = frontier_phi_85_pred;
                            _3126 = frontier_phi_85_pred_1;
                            _3125 = frontier_phi_85_pred_2;
                            _3124 = frontier_phi_85_pred_3;
                            _3123 = frontier_phi_85_pred_4;
                            _3122 = frontier_phi_85_pred_5;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            if (_2846 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2846;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2831;
                        frontier_phi_79_pred_1 = _2830;
                        frontier_phi_79_pred_2 = _2829;
                        frontier_phi_79_pred_3 = _2828;
                        frontier_phi_79_pred_4 = _2827;
                        frontier_phi_79_pred_5 = _2826;
                    }
                    _2468 = frontier_phi_79_pred;
                    _2466 = frontier_phi_79_pred_1;
                    _2464 = frontier_phi_79_pred_2;
                    _2462 = frontier_phi_79_pred_3;
                    _2460 = frontier_phi_79_pred_4;
                    _2458 = frontier_phi_79_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2458;
                        _2618 = _2460;
                        _2619 = _2462;
                        _2620 = _2464;
                        _2621 = _2466;
                        _2622 = _2468;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2464;
                frontier_phi_60_61_ladder_1 = _2468;
                frontier_phi_60_61_ladder_2 = _2466;
                frontier_phi_60_61_ladder_3 = _2462;
                frontier_phi_60_61_ladder_4 = _2460;
                frontier_phi_60_61_ladder_5 = _2458;
            }
            else
            {
                frontier_phi_60_61_ladder = _2343;
                frontier_phi_60_61_ladder_1 = _2347;
                frontier_phi_60_61_ladder_2 = _2345;
                frontier_phi_60_61_ladder_3 = _2341;
                frontier_phi_60_61_ladder_4 = _2339;
                frontier_phi_60_61_ladder_5 = _2337;
            }
            _2457 = frontier_phi_60_61_ladder_5;
            _2459 = frontier_phi_60_61_ladder_4;
            _2461 = frontier_phi_60_61_ladder_3;
            _2463 = frontier_phi_60_61_ladder;
            _2465 = frontier_phi_60_61_ladder_2;
            _2467 = frontier_phi_60_61_ladder_1;
        }
        float _2472 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2247 = (_2472 * _2463) + _1684;
        _2249 = (_2472 * _2465) + _1686;
        _2251 = (_2472 * _2467) + _1688;
        _2253 = ((_2457 * _459) * _2472) + _2029;
        _2255 = ((_2459 * _461) * _2472) + _2031;
        _2257 = ((_2461 * _462) * _2472) + _2033;
    }
    else
    {
        _2247 = _1684;
        _2249 = _1686;
        _2251 = _1688;
        _2253 = _2029;
        _2255 = _2031;
        _2257 = _2033;
    }
    float _4191 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4202 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4213 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4224 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _2275 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2247 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _474))) + ((_2253 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2276 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2249 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _474))) + ((_2255 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2277 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2251 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _474))) + ((_2257 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2282 = cbInstanceData._m0[_433 + 6u].w * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)));
    float _2287 = _393 / cbSceneParam._m0[86u].x;
    float _2288 = _394 / cbSceneParam._m0[86u].y;
    vec4 _2302 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2304 = _2302.x;
    float _2305 = _2302.y;
    float _2306 = _2302.z;
    float _2307 = _2302.w;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2362 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2363 = _2362 / _313;
        float _2374 = _2363 * _365;
        float _2375 = _366 * _2363;
        float _2376 = (-0.0) - _2375;
        float _2377 = _2363 * _367;
        float _2379 = (cbSceneParam._m0[77u].w * _2376) / _2362;
        float _2380 = _2379 + cbSceneParam._m0[79u].w;
        float _2381 = cbSceneParam._m0[79u].w - _2375;
        float _2387 = sqrt(((_2374 * _2374) + (_2375 * _2375)) + (_2377 * _2377));
        float _2390 = (1.0 - (cbSceneParam._m0[77u].w / _2362)) * _2387;
        float _2395 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2397 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2574;
        if (abs((_2376 - _2379) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2574 = ((((_2380 > 0.0) ? exp2(_2395 * _2380) : (2.0 - exp2(_2397 * _2380))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2390;
        }
        else
        {
            float _2518 = 1.0 / cbSceneParam._m0[80u].x;
            float _2519 = isnan(_2381) ? _2380 : (isnan(_2380) ? _2381 : max(_2380, _2381));
            float _2520 = isnan(_2381) ? _2380 : (isnan(_2380) ? _2381 : min(_2380, _2381));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            float _2530 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : min(_2520, 0.0));
            _2574 = ((abs(_2387 / _2376) * cbSceneParam._m0[80u].y) * ((((_2529 - _2530) * 2.0) - ((exp2(_2395 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0)))) - exp2(_2395 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0))))) * _2518)) - ((exp2(_2397 * _2529) - exp2(_2397 * _2530)) * _2518))) + (_2390 * cbSceneParam._m0[80u].z);
        }
        vec4 _2576 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, 1.0), 0.0);
        float _2585 = exp2((_2574 * (-1.44269502162933349609375)) * (1.0 - _2576.w));
        float _2586 = log2(_2585);
        float _2602 = log2(_2307);
        _2399 = (exp2(_2602 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].x)) * _2576.x) / cbSceneParam._m0[78u].x)) + _2304;
        _2401 = (exp2(_2602 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].y)) * _2576.y) / cbSceneParam._m0[78u].y)) + _2305;
        _2403 = (exp2(_2602 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].z)) * _2576.z) / cbSceneParam._m0[78u].z)) + _2306;
        _2405 = _2585 * _2307;
    }
    else
    {
        _2399 = _2304;
        _2401 = _2305;
        _2403 = _2306;
        _2405 = _2307;
    }
    bool _2612;
    vec4 _2415;
    vec4 _2437;
    float _2439;
    float _2443;
    float _2444;
    float _2445;
    float _2446;
    bool _2456;
    for (;;)
    {
        _2415 = cbMatDynParam._m0[0u];
        float _2417 = roundEven(_2415.y);
        bool _2418 = _2417 == 3.0;
        float _2419 = log2(_2405);
        float _2426 = exp2(_2419 * cbSceneParam._m0[78u].x) * _2275;
        float _2427 = exp2(_2419 * cbSceneParam._m0[78u].y) * _2276;
        float _2428 = exp2(_2419 * cbSceneParam._m0[78u].z) * _2277;
        float _2435 = _381 + (-0.5);
        _2437 = cbMtdParam._m0[1u];
        _2439 = _2437.y * _2435;
        float _2442 = (_2417 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2443 = _2442 * (_2418 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2399)));
        _2444 = _2442 * (_2418 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2401)));
        _2445 = _2442 * (_2418 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2403)));
        _2446 = _2435 * 0.999000012874603271484375;
        _2456 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2456)
        {
            if ((cbInstanceData._m0[_433 + 7u].x + _2446) < 0.5)
            {
                _2612 = true;
                break;
            }
        }
        uint _2553 = _435 + uint(_2415.w);
        if ((cbInstanceData._m0[_2553].w < 1.0) && ((cbInstanceData._m0[_2553].w + _2446) < 0.5))
        {
            _2612 = true;
            break;
        }
        if ((_2439 + _234) < _2437.x)
        {
            _2612 = true;
            break;
        }
        _2612 = false;
        break;
    }
    float _2817;
    if (_2612)
    {
        discard_state = true;
        _2817 = 0.0;
    }
    else
    {
        _2817 = _2282;
    }
    SV_Target.x = _2443;
    SV_Target.y = _2444;
    SV_Target.z = _2445;
    SV_Target.w = _2817;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2282;
    discard_exit();
}


