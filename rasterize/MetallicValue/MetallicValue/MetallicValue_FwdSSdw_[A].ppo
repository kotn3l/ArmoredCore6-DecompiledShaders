#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicValue_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicValue_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _880;
float _3297;
float _3298;
float _3299;
float _3300;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(MetallicValue_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _236 = _230.w;
    float _237 = _236 * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(MetallicValue_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3309 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))));
    float _273 = fma(_270, _214, fma(_263, _206 * TANGENT.x, (_192 * _184) * _261));
    float _276 = fma(_270, _215, fma(_263, _206 * TANGENT.y, (_192 * _185) * _261));
    float _279 = fma(_270, _216, fma(_263, _206 * TANGENT.z, (_192 * _186) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _290 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _291 = _290 * _284;
    float _292 = _290 * _285;
    float _293 = _290 * _286;
    float _3320 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _294 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _295 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3353 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3364 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3375 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _299 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _357 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _367 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _357);
    float _368 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _357);
    float _369 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _357);
    float _373 = inversesqrt(dot(vec3(_367, _368, _369), vec3(_367, _368, _369)));
    float _374 = _367 * _373;
    float _375 = _368 * _373;
    float _376 = _369 * _373;
    vec4 _381 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _383 = _381.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _559 = sqrt(((_367 * _367) + (_368 * _368)) + (_369 * _369));
        float _565 = (cbMatDynParam._m0[5u].x * _559) + cbMatDynParam._m0[5u].y;
        float _3386 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        float _566 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _570 = (cbMatDynParam._m0[5u].z * _559) + cbMatDynParam._m0[5u].w;
        float _3397 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) - _566)) + _566) < ((_383 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _395 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _396 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _416 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _419 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _422 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _435 = uint(roundEven(NORMAL.w)) * 13u;
    uint _437 = _435 + 9u;
    uint _438 = _437 + uint(cbMatDynParam._m0[0u].w);
    float _444 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_438].x;
    float _445 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_438].y;
    float _446 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_438].z;
    float _3408 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _450 = 1.0 - _299;
    float _451 = _447 * _450;
    float _452 = _448 * _450;
    float _453 = _449 * _450;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _299;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _299;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _299;
    float _461 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    vec4 _473 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _395, cbSceneParam._m0[86u].y * _396));
    float _476 = _473.x * TEXCOORD_1.w;
    float _477 = dot(vec3(_291, _292, _293), vec3(_374, _375, _376));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _291) - _374;
    float _485 = (_480 * _292) - _375;
    float _486 = (_480 * _293) - _376;
    float _490 = abs(dot(vec3(_374, _375, _376), vec3(_291, _292, _293)));
    float _3441 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _492 = sqrt(_295);
    float _505 = exp2((_492 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_492 * 3.0));
    float _511 = (1.0 - _505) * ((_492 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _512 = _505 * _492;
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _879;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _604 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _608 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _612 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _637 = _540 + _291;
        float _638 = _544 + _292;
        float _639 = _548 + _293;
        float _649 = fma(_639, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637)) - _604;
        float _650 = fma(_639, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637)) - _608;
        float _651 = fma(_639, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637)) - _612;
        float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
        float _668 = ((_655 * _649) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_604 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_655 * _650) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_608 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_655 * _651) / cbModelParam._m0[34u].z) + ((((((_612 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        float _707 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_673.x + (-0.5));
        float _709 = _707 * (_673.y + (-0.5));
        float _710 = _707 * (_673.z + (-0.5));
        float _717 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_680.x + (-0.5));
        float _719 = _717 * (_680.y + (-0.5));
        float _720 = _717 * (_680.z + (-0.5));
        float _727 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_687.x + (-0.5));
        float _729 = _727 * (_687.y + (-0.5));
        float _730 = _727 * (_687.z + (-0.5));
        float _737 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_694.x + (-0.5));
        float _739 = _737 * (_694.y + (-0.5));
        float _740 = _737 * (_694.z + (-0.5));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = _708 * 0.5;
        float _745 = _718 * 0.5;
        float _746 = _728 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _761 = (dot(vec3(_291, _292, _293), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _771 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3489 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_773 + 1.0))) + _778) * _741;
        float _788 = _709 * 0.5;
        float _789 = _719 * 0.5;
        float _790 = _729 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _804 = (dot(vec3(_291, _292, _293), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _813 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3522 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_815 + 1.0))) + _820) * _742;
        float _830 = _710 * 0.5;
        float _831 = _720 * 0.5;
        float _832 = _730 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_291, _292, _293), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3555 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_857 + 1.0))) + _862) * _743;
        _879 = _710;
        _881 = _709;
        _882 = _708;
        _883 = _720;
        _884 = _719;
        _885 = _718;
        _886 = _730;
        _887 = _729;
        _888 = _728;
        _889 = _743;
        _890 = _742;
        _891 = _741;
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
    }
    else
    {
        _879 = _880;
        _881 = _880;
        _882 = _880;
        _883 = _880;
        _884 = _880;
        _885 = _880;
        _886 = _880;
        _887 = _880;
        _888 = _880;
        _889 = _880;
        _890 = _880;
        _891 = _880;
        _892 = 0.0;
        _893 = 0.0;
        _894 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _927 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _931 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _954 = _540 + _291;
        float _955 = _544 + _292;
        float _956 = _548 + _293;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_291, _292, _293), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3618 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_291, _292, _293), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3651 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_291, _292, _293), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3684 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _880;
        _1193 = _880;
        _1194 = _880;
        _1195 = _880;
        _1196 = _880;
        _1197 = _880;
        _1198 = _880;
        _1199 = _880;
        _1200 = _880;
        _1201 = _880;
        _1202 = _880;
        _1203 = _880;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _484 * 0.5;
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_879, _883, _886, _889));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_881, _884, _887, _890));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _885, _888, _891));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1328 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1329 = isnan(_1328) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1328 : min(cbModelParam._m0[25u].z, _1328));
    float _1411;
    float _1413;
    float _1415;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1378 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1382 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1386 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1389 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1392 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1395 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1423;
        if (_1389 > 0.0)
        {
            _1423 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1423 = frontier_phi_19_17_ladder;
        }
        float _1652;
        if (_1392 > 0.0)
        {
            _1652 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_28_24_ladder;
        }
        float _1909;
        if (_1395 > 0.0)
        {
            _1909 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1909 = frontier_phi_40_35_ladder;
        }
        float _1911 = isnan(_1652) ? _1423 : (isnan(_1423) ? _1652 : min(_1423, _1652));
        float _1912 = isnan(_1909) ? _1911 : (isnan(_1911) ? _1909 : min(_1911, _1909));
        float _1916 = (_1912 * _1389) + _1378;
        float _1917 = (_1912 * _1392) + _1382;
        float _1918 = (_1912 * _1395) + _1386;
        float _1919 = _1912 * 9.9999997473787516355514526367188e-05;
        float _1921 = (-1.0) - _1919;
        float _1923 = _1919 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1918 > _1923) || ((_1918 < _1921) || ((_1917 > _1923) || ((_1917 < _1921) || ((_1916 < _1921) || (_1916 > _1923))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1918, cbModelParam._m0[9u].z, fma(_1917, cbModelParam._m0[9u].y, _1916 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1918, cbModelParam._m0[10u].z, fma(_1917, cbModelParam._m0[10u].y, _1916 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1918, cbModelParam._m0[11u].z, fma(_1917, cbModelParam._m0[11u].y, _1916 * cbModelParam._m0[11u].x))), _1329);
            frontier_phi_18_40_ladder = _2046.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2046.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2046.x * cbModelParam._m0[1u].y;
        }
        _1411 = frontier_phi_18_40_ladder_2;
        _1413 = frontier_phi_18_40_ladder_1;
        _1415 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1329);
        _1411 = _1399.x * cbModelParam._m0[1u].y;
        _1413 = _1399.y * cbModelParam._m0[1u].y;
        _1415 = _1399.z * cbModelParam._m0[1u].y;
    }
    float _1419 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1419 : min(cbModelParam._m0[25u].w, _1419));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1477 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1481 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1485 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1488 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1491 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1494 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1657;
        if (_1488 > 0.0)
        {
            _1657 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1657 = frontier_phi_30_26_ladder;
        }
        float _1936;
        if (_1491 > 0.0)
        {
            _1936 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1936 = frontier_phi_42_37_ladder;
        }
        float _2149;
        if (_1494 > 0.0)
        {
            _2149 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2149 = frontier_phi_51_48_ladder;
        }
        float _2151 = isnan(_1936) ? _1657 : (isnan(_1657) ? _1936 : min(_1657, _1936));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1488) + _1477;
        float _2157 = (_2152 * _1491) + _1481;
        float _2158 = (_2152 * _1494) + _1485;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2159;
        float _2162 = _2159 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2158 > _2162) || ((_2158 < _2160) || ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 < _2160) || (_2156 > _2162))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2158, cbModelParam._m0[17u].z, fma(_2157, cbModelParam._m0[17u].y, _2156 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2158, cbModelParam._m0[18u].z, fma(_2157, cbModelParam._m0[18u].y, _2156 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2158, cbModelParam._m0[19u].z, fma(_2157, cbModelParam._m0[19u].y, _2156 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_27_51_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1513 = frontier_phi_27_51_ladder_2;
        _1515 = frontier_phi_27_51_ladder_1;
        _1517 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1420);
        _1513 = _1497.x * cbModelParam._m0[1u].z;
        _1515 = _1497.y * cbModelParam._m0[1u].z;
        _1517 = _1497.z * cbModelParam._m0[1u].z;
    }
    float _1530 = (((_511 * _461) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1532 = (((_511 * _463) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1534 = (((_511 * _464) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1537 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1530 * cbSceneParam._m0[91u].x));
    vec4 _1551 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_395, _396));
    float _1553 = _1551.w;
    float _1565 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1553);
    float _1566 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1553);
    float _1567 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1553);
    uvec4 _1571 = floatBitsToUint(cbInstanceData._m0[_435 + 5u]);
    uint _1573 = _1571.x * 14u;
    uint _1574 = _1573 + 13u;
    float _1581 = _476 + (-1.0);
    float _1586 = (cbLight._m0[_1574].x * _1581) + 1.0;
    float _1587 = (cbLight._m0[_1574].y * _1581) + 1.0;
    float _1588 = (cbLight._m0[_1574].z * _1581) + 1.0;
    float _1589 = (cbLight._m0[_1574].w * _1581) + 1.0;
    uint _1590 = _1573 + 5u;
    float _1596 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1600 = _1573 + 4u;
    float _1610 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
    uint _1614 = _1573 | 1u;
    float _1625 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_291, _292, _293));
    float _1628 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_291, _292, _293));
    float _3820 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _3831 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1633 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1635 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1642 = ((cbLight._m0[_1590].x * _1596) * _1635) + (((cbLight._m0[_1600].x * _1565) * _1610) * _1633);
    float _1643 = ((_1596 * cbLight._m0[_1590].y) * _1635) + (((cbLight._m0[_1600].y * _1566) * _1610) * _1633);
    float _1644 = ((_1596 * cbLight._m0[_1590].z) * _1635) + (((cbLight._m0[_1600].z * _1567) * _1610) * _1633);
    uvec4 _1649 = floatBitsToUint(cbLight._m0[_1573 + 12u]);
    bool _1651 = _1649.x == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1651)
    {
        _1662 = _1642;
        _1664 = _1643;
        _1666 = _1644;
    }
    else
    {
        uint _1670 = _1573 + 6u;
        float _1686 = (dot(vec3(cbLight._m0[_1573 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1687 = _1686 * _1686;
        float _3842 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1689 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _1662 = (((cbLight._m0[_1670].x * 0.3183098733425140380859375) * _1688) * _1689) + _1642;
        _1664 = (((cbLight._m0[_1670].y * 0.3183098733425140380859375) * _1688) * _1689) + _1643;
        _1666 = (((cbLight._m0[_1670].z * 0.3183098733425140380859375) * _1688) * _1689) + _1644;
    }
    bool _1669 = _1649.y == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1669)
    {
        _1707 = _1662;
        _1709 = _1664;
        _1711 = _1666;
    }
    else
    {
        uint _1880 = _1573 + 7u;
        float _1896 = (dot(vec3(cbLight._m0[_1573 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _3858 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1899 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1707 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1662;
        _1709 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1664;
        _1711 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1666;
    }
    uint _1714 = _1573 + 8u;
    float _1727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1573].w)) * _295) * 0.949999988079071044921875);
    float _1728 = _1727 * _1727;
    float _1729 = cbLight._m0[_1573].x + _374;
    float _1730 = cbLight._m0[_1573].y + _375;
    float _1731 = cbLight._m0[_1573].z + _376;
    float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
    float _1736 = _1735 * _1729;
    float _1737 = _1735 * _1730;
    float _1738 = _1735 * _1731;
    float _1739 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1573].xyz));
    float _3874 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _1743 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1744 = dot(vec3(_291, _292, _293), vec3(_1736, _1737, _1738));
    float _3896 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1748 = dot(vec3(cbLight._m0[_1573].xyz), vec3(_1736, _1737, _1738));
    float _3907 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1752 = _1728 * _1728;
    float _1756 = ((_1747 * _1747) * (_1752 + (-1.0))) + 1.0;
    float _1764 = exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0);
    float _1765 = 0.959999978542327880859375 - _458;
    float _1767 = 0.959999978542327880859375 - _459;
    float _1768 = 0.959999978542327880859375 - _460;
    float _1775 = 1.0 - _1728;
    float _1786 = (0.5 / (((_1743 * ((_1742 * _1775) + _1728)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1775) + _1728) * _1742))) * _1742;
    float _3918 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1752 / ((_1756 * _1756) * 3.141590118408203125));
    uint _1802 = _1573 + 9u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1614].w)) * _295) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1614].x + _374;
    float _1816 = cbLight._m0[_1614].y + _375;
    float _1817 = cbLight._m0[_1614].z + _376;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1614].xyz));
    float _3929 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1829 = dot(vec3(_291, _292, _293), vec3(_1822, _1823, _1824));
    float _3940 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_1822, _1823, _1824));
    float _3951 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1814 * _1814;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1848 = exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0);
    float _1855 = 1.0 - _1814;
    float _1865 = (0.5 / (((_1743 * ((_1828 * _1855) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1855) + _1814) * _1828))) * _1828;
    float _3962 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    float _1877 = (((((_1848 * _1765) + _461) * cbLight._m0[_1802].x) * _1867) * _1596) + ((((cbLight._m0[_1714].x * _1565) * ((_1764 * _1765) + _461)) * _1788) * _1610);
    float _1878 = (((((_1848 * _1767) + _463) * cbLight._m0[_1802].y) * _1867) * _1596) + ((((cbLight._m0[_1714].y * _1566) * ((_1764 * _1767) + _463)) * _1788) * _1610);
    float _1879 = (((((_1848 * _1768) + _464) * cbLight._m0[_1802].z) * _1867) * _1596) + ((((cbLight._m0[_1714].z * _1567) * ((_1764 * _1768) + _464)) * _1788) * _1610);
    float _1941;
    float _1943;
    float _1945;
    if (_1651)
    {
        _1941 = _1877;
        _1943 = _1878;
        _1945 = _1879;
    }
    else
    {
        uint _1947 = _1573 + 2u;
        uint _1951 = _1573 + 10u;
        float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _295) * 0.949999988079071044921875);
        float _1966 = _1965 * _1965;
        float _1967 = cbLight._m0[_1947].x + _374;
        float _1968 = cbLight._m0[_1947].y + _375;
        float _1969 = cbLight._m0[_1947].z + _376;
        float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
        float _1974 = _1973 * _1967;
        float _1975 = _1973 * _1968;
        float _1976 = _1973 * _1969;
        float _1977 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1947].xyz));
        float _3973 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1981 = dot(vec3(_291, _292, _293), vec3(_1974, _1975, _1976));
        float _3984 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1985 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_1974, _1975, _1976));
        float _3995 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1989 = _1966 * _1966;
        float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
        float _2000 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
        float _2007 = 1.0 - _1966;
        float _2017 = (0.5 / (((_1743 * ((_1980 * _2007) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2007) + _1966) * _1980))) * _1980;
        float _4006 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
        _1941 = (((((_2000 * _1765) + _461) * cbLight._m0[_1951].x) * _2019) * _2020) + _1877;
        _1943 = (((((_2000 * _1767) + _463) * cbLight._m0[_1951].y) * _2019) * _2020) + _1878;
        _1945 = (((((_2000 * _1768) + _464) * cbLight._m0[_1951].z) * _2019) * _2020) + _1879;
    }
    float _2055;
    float _2057;
    float _2059;
    if (_1669)
    {
        _2055 = _1941;
        _2057 = _1943;
        _2059 = _1945;
    }
    else
    {
        uint _2066 = _1573 + 3u;
        uint _2070 = _1573 + 11u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _295) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _374;
        float _2087 = cbLight._m0[_2066].y + _375;
        float _2088 = cbLight._m0[_2066].z + _376;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2066].xyz));
        float _4022 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2100 = dot(vec3(_291, _292, _293), vec3(_2093, _2094, _2095));
        float _4033 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _4044 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
        float _2126 = 1.0 - _2085;
        float _2136 = (0.5 / (((_1743 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _2126) + _2085) * _2099))) * _2099;
        float _4055 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _2055 = (((((_2119 * _1765) + _461) * cbLight._m0[_2070].x) * _2138) * _2139) + _1941;
        _2057 = (((((_2119 * _1767) + _463) * cbLight._m0[_2070].y) * _2138) * _2139) + _1943;
        _2059 = (((((_2119 * _1768) + _464) * cbLight._m0[_2070].z) * _2138) * _2139) + _1945;
    }
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1571.y == 0u)
    {
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2214;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2214;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2214;
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.x;
        uint _2241 = uint((float(_2229.y) * floor(float(uint(cbSceneParam._m0[85u].y * _396) / _2230))) + floor(float(uint(cbSceneParam._m0[85u].x * _395) / _2230)));
        float _2251 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2252 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        uint _2255 = uint(isnan(14.0) ? _2252 : (isnan(_2252) ? 14.0 : min(_2252, 14.0)));
        uvec4 _2260 = texelFetch(g_lightClusterGridBuffer, int(((_2255 << 2u) + (_2241 << 6u)) >> 2u));
        uint _2261 = _2260.x;
        uint _2262 = _2229.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2262 >> 4u) & 15u)) + 4294967295u) & _2261) == 0u) || ((_2262 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            uint _2521 = 0u;
            uint _2530;
            bool _2531;
            for (;;)
            {
                _2530 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                _2531 = _2530 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2531)
                {
                    frontier_phi_68_pred = _2517;
                    frontier_phi_68_pred_1 = _2520;
                    frontier_phi_68_pred_2 = _2519;
                    frontier_phi_68_pred_3 = _2518;
                    frontier_phi_68_pred_4 = _2516;
                    frontier_phi_68_pred_5 = _2515;
                }
                else
                {
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    uint _2666;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2530;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    for (;;)
                    {
                        uint _2670 = uint(findLSB(_2666)) + (_2521 << 5u);
                        uint _2667 = (_2666 + 4294967295u) & _2666;
                        uint _2672 = _2670 * 48u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2692 = (_2670 * 48u) + 4u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2711 = (_2670 * 48u) + 8u;
                        vec3 _2722 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x));
                        float _2726 = _2686.x - _2215;
                        float _2727 = _2686.y - _2216;
                        float _2728 = _2686.z - _2217;
                        float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                        float _2732 = inversesqrt(_2729);
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2736 = dot(vec3(_416, _419, _422), vec3(_2733, _2734, _2735));
                        float _2741 = 1.0 - (_2729 * _2686.w);
                        float _4081 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2743 = sqrt(_2729) * _2705.w;
                        float _2746 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2736) + _2747;
                        float _2753 = _2743 * _2743;
                        float _2757 = ((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2742) / ((_2753 * 0.699999988079071044921875) + 1.0);
                        float _2761 = (-0.0) - _2215;
                        float _2762 = (-0.0) - _2216;
                        float _2763 = (-0.0) - _2217;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2768 = _2767 * _2761;
                        float _2769 = _2767 * _2762;
                        float _2770 = _2767 * _2763;
                        float _2778 = exp2(log2(1.0 / ((_2753 * 3.5) + 5.0)) * 0.25);
                        float _2779 = 1.0 - _492;
                        float _2786 = sqrt(1.0 - ((1.0 - (_2779 * _2779)) * (1.0 - (_2778 * _2778))));
                        float _2787 = _2786 * _2786;
                        float _2788 = _2787 * _2787;
                        float _2789 = _2768 + _2733;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2799 = dot(vec3(_416, _419, _422), vec3(_2768, _2769, _2770));
                        float _4097 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2803 = dot(vec3(_416, _419, _422), vec3(_2795 * _2789, _2795 * _2790, _2795 * _2791));
                        float _4108 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2810 = ((_2806 * _2806) * (_2788 + (-1.0))) + 1.0;
                        float _2811 = _2746 * _2787;
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2736) + _2812;
                        float _4119 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2817 = 1.0 - _2787;
                        float _2827 = (0.5 / (((_2816 * ((_2802 * _2817) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2816 * _2817) + _2787) * _2802))) * _2816;
                        float _4130 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2838 = (((_2788 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2810 * _2810) * ((_2753 * 2.1991131305694580078125) + 3.141590118408203125))) * _2742;
                        _2590 = (_2757 * _2705.x) + _2663;
                        _2591 = (_2757 * _2705.y) + _2664;
                        _2592 = (_2757 * _2705.z) + _2665;
                        _2587 = (_2838 * _2722.x) + _2660;
                        _2588 = (_2838 * _2722.y) + _2661;
                        _2589 = (_2838 * _2722.z) + _2662;
                        if (_2667 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2667;
                        }
                    }
                    frontier_phi_68_pred = _2589;
                    frontier_phi_68_pred_1 = _2592;
                    frontier_phi_68_pred_2 = _2591;
                    frontier_phi_68_pred_3 = _2590;
                    frontier_phi_68_pred_4 = _2588;
                    frontier_phi_68_pred_5 = _2587;
                }
                _2368 = frontier_phi_68_pred;
                _2374 = frontier_phi_68_pred_1;
                _2372 = frontier_phi_68_pred_2;
                _2370 = frontier_phi_68_pred_3;
                _2366 = frontier_phi_68_pred_4;
                _2364 = frontier_phi_68_pred_5;
                uint _2522 = _2521 + 1u;
                if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2515 = _2364;
                    _2516 = _2366;
                    _2517 = _2368;
                    _2518 = _2370;
                    _2519 = _2372;
                    _2520 = _2374;
                    _2521 = _2522;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        if (((4294967295u << _2380) & _2261) == 0u)
        {
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
            _2489 = _2369;
            _2491 = _2371;
            _2493 = _2373;
        }
        else
        {
            float _2508 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _2509 = _2508 * _2215;
            float _2510 = _2508 * _2216;
            float _2511 = _2508 * _2217;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2643 = _2363;
                float _2644 = _2365;
                float _2645 = _2367;
                float _2646 = _2369;
                float _2647 = _2371;
                float _2648 = _2373;
                uint _2649 = _2380;
                uint _2658;
                bool _2659;
                for (;;)
                {
                    _2658 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                    _2659 = _2658 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2659)
                    {
                        frontier_phi_79_pred = _2648;
                        frontier_phi_79_pred_1 = _2647;
                        frontier_phi_79_pred_2 = _2646;
                        frontier_phi_79_pred_3 = _2645;
                        frontier_phi_79_pred_4 = _2644;
                        frontier_phi_79_pred_5 = _2643;
                    }
                    else
                    {
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        uint _2871 = _2658;
                        uint _2872;
                        vec4 _2897;
                        float _2898;
                        vec4 _2913;
                        vec3 _2925;
                        vec4 _2941;
                        vec4 _2957;
                        float _3004;
                        bool _3005;
                        for (;;)
                        {
                            uint _2882 = ((_2649 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2871));
                            _2872 = (_2871 + 4294967295u) & _2871;
                            uint _2884 = _2882 * 40u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            _2898 = _2897.w;
                            uint _2900 = (_2882 * 40u) + 4u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2915 = (_2882 * 40u) + 8u;
                            _2925 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x));
                            uint _2928 = (_2882 * 40u) + 16u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2882 * 40u) + 20u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2960 = (_2882 * 40u) + 24u;
                            vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2979 = (_2882 * 40u) + 28u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            _3004 = fma(_2217, _2992.z, fma(_2216, _2992.y, _2992.x * _2215)) + _2992.w;
                            _3005 = !((fma(_2217, _2973.z, fma(_2216, _2973.y, _2973.x * _2215)) + _2973.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3005)
                            {
                                float _3032 = _2897.x - _2215;
                                float _3033 = _2897.y - _2216;
                                float _3034 = _2897.z - _2217;
                                float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                                float _3038 = inversesqrt(_3035);
                                float _3039 = _3038 * _3032;
                                float _3040 = _3038 * _3033;
                                float _3041 = _3038 * _3034;
                                float _3045 = 1.0 - (_3035 / (_2898 * _2898));
                                float _4141 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3050 = sqrt(_3035) * _2913.w;
                                float _3052 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                                float _3053 = _3052 * _3052;
                                float _3056 = ((1.0 - _3053) * dot(vec3(_3039, _3040, _3041), vec3(_416, _419, _422))) + _3053;
                                float _3059 = _3050 * _3050;
                                float _3063 = (fma(_2217, _2941.z, fma(_2216, _2941.y, _2941.x * _2215)) + _2941.w) / _3004;
                                float _3064 = (fma(_2217, _2957.z, fma(_2216, _2957.y, _2957.x * _2215)) + _2957.w) / _3004;
                                float _3068 = 1.0 - dot(vec2(_3063, _3064), vec2(_3063, _3064));
                                float _4157 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3070 = _3069 * (((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3046) / ((_3059 * 0.699999988079071044921875) + 1.0));
                                float _3082 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                                float _3083 = 1.0 - _492;
                                float _3090 = sqrt(1.0 - ((1.0 - (_3083 * _3083)) * (1.0 - (_3082 * _3082))));
                                float _3091 = _3090 * _3090;
                                float _3092 = _3091 * _3091;
                                float _3093 = _3039 - _2509;
                                float _3094 = _3040 - _2510;
                                float _3095 = _3041 - _2511;
                                float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                                float _3103 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2509, (-0.0) - _2510, (-0.0) - _2511));
                                float _4168 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3107 = dot(vec3(_416, _419, _422), vec3(_3099 * _3093, _3099 * _3094, _3099 * _3095));
                                float _4179 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3114 = ((_3110 * _3110) * (_3092 + (-1.0))) + 1.0;
                                float _3115 = _3052 * _3091;
                                float _3116 = _3115 * _3115;
                                float _3122 = ((1.0 - _3116) * dot(vec3(_416, _419, _422), vec3(_3039, _3040, _3041))) + _3116;
                                float _4190 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3124 = 1.0 - _3091;
                                float _3134 = (0.5 / (((_3123 * ((_3106 * _3124) + _3091)) + 9.9999999392252902907785028219223e-09) + (((_3123 * _3124) + _3091) * _3106))) * _3123;
                                float _4201 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3144 = (_3069 * _3046) * (((_3092 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3114 * _3114) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3070 * _2913.z;
                                frontier_phi_85_pred_1 = _3070 * _2913.y;
                                frontier_phi_85_pred_2 = _3070 * _2913.x;
                                frontier_phi_85_pred_3 = _3144 * _2925.z;
                                frontier_phi_85_pred_4 = _3144 * _2925.y;
                                frontier_phi_85_pred_5 = _3144 * _2925.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_85_pred;
                            _3152 = frontier_phi_85_pred_1;
                            _3151 = frontier_phi_85_pred_2;
                            _3150 = frontier_phi_85_pred_3;
                            _3149 = frontier_phi_85_pred_4;
                            _3148 = frontier_phi_85_pred_5;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            if (_2872 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2872;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2857;
                        frontier_phi_79_pred_1 = _2856;
                        frontier_phi_79_pred_2 = _2855;
                        frontier_phi_79_pred_3 = _2854;
                        frontier_phi_79_pred_4 = _2853;
                        frontier_phi_79_pred_5 = _2852;
                    }
                    _2494 = frontier_phi_79_pred;
                    _2492 = frontier_phi_79_pred_1;
                    _2490 = frontier_phi_79_pred_2;
                    _2488 = frontier_phi_79_pred_3;
                    _2486 = frontier_phi_79_pred_4;
                    _2484 = frontier_phi_79_pred_5;
                    uint _2650 = _2649 + 1u;
                    if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2643 = _2484;
                        _2644 = _2486;
                        _2645 = _2488;
                        _2646 = _2490;
                        _2647 = _2492;
                        _2648 = _2494;
                        _2649 = _2650;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2490;
                frontier_phi_60_61_ladder_1 = _2494;
                frontier_phi_60_61_ladder_2 = _2492;
                frontier_phi_60_61_ladder_3 = _2488;
                frontier_phi_60_61_ladder_4 = _2486;
                frontier_phi_60_61_ladder_5 = _2484;
            }
            else
            {
                frontier_phi_60_61_ladder = _2369;
                frontier_phi_60_61_ladder_1 = _2373;
                frontier_phi_60_61_ladder_2 = _2371;
                frontier_phi_60_61_ladder_3 = _2367;
                frontier_phi_60_61_ladder_4 = _2365;
                frontier_phi_60_61_ladder_5 = _2363;
            }
            _2483 = frontier_phi_60_61_ladder_5;
            _2485 = frontier_phi_60_61_ladder_4;
            _2487 = frontier_phi_60_61_ladder_3;
            _2489 = frontier_phi_60_61_ladder;
            _2491 = frontier_phi_60_61_ladder_2;
            _2493 = frontier_phi_60_61_ladder_1;
        }
        float _2498 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2273 = (_2498 * _2489) + _1707;
        _2275 = (_2498 * _2491) + _1709;
        _2277 = (_2498 * _2493) + _1711;
        _2279 = ((_2483 * _461) * _2498) + _2055;
        _2281 = ((_2485 * _463) * _2498) + _2057;
        _2283 = ((_2487 * _464) * _2498) + _2059;
    }
    else
    {
        _2273 = _1707;
        _2275 = _1709;
        _2277 = _1711;
        _2279 = _2055;
        _2281 = _2057;
        _2283 = _2059;
    }
    float _4217 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4228 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4239 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4250 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2301 = ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2273 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _476))) + ((_2279 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1318)) * cbPerFrame._m0[3u].x);
    float _2302 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2275 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _476))) + ((_2281 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1318)) * cbPerFrame._m0[3u].x);
    float _2303 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2277 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _476))) + ((_2283 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1318)) * cbPerFrame._m0[3u].x);
    float _2308 = cbInstanceData._m0[_435 + 6u].w * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)));
    float _2313 = _395 / cbSceneParam._m0[86u].x;
    float _2314 = _396 / cbSceneParam._m0[86u].y;
    vec4 _2328 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2330 = _2328.x;
    float _2331 = _2328.y;
    float _2332 = _2328.z;
    float _2333 = _2328.w;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2389 = _2388 / _315;
        float _2400 = _2389 * _367;
        float _2401 = _368 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2403 = _2389 * _369;
        float _2405 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2406 = _2405 + cbSceneParam._m0[79u].w;
        float _2407 = cbSceneParam._m0[79u].w - _2401;
        float _2413 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2403 * _2403));
        float _2416 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2413;
        float _2421 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2423 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2600;
        if (abs((_2402 - _2405) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2600 = ((((_2406 > 0.0) ? exp2(_2421 * _2406) : (2.0 - exp2(_2423 * _2406))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2416;
        }
        else
        {
            float _2544 = 1.0 / cbSceneParam._m0[80u].x;
            float _2545 = isnan(_2407) ? _2406 : (isnan(_2406) ? _2407 : max(_2406, _2407));
            float _2546 = isnan(_2407) ? _2406 : (isnan(_2406) ? _2407 : min(_2406, _2407));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            _2600 = ((abs(_2413 / _2402) * cbSceneParam._m0[80u].y) * ((((_2555 - _2556) * 2.0) - ((exp2(_2421 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)))) - exp2(_2421 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))))) * _2544)) - ((exp2(_2423 * _2555) - exp2(_2423 * _2556)) * _2544))) + (_2416 * cbSceneParam._m0[80u].z);
        }
        vec4 _2602 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, 1.0), 0.0);
        float _2611 = exp2((_2600 * (-1.44269502162933349609375)) * (1.0 - _2602.w));
        float _2612 = log2(_2611);
        float _2628 = log2(_2333);
        _2425 = (exp2(_2628 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].x)) * _2602.x) / cbSceneParam._m0[78u].x)) + _2330;
        _2427 = (exp2(_2628 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].y)) * _2602.y) / cbSceneParam._m0[78u].y)) + _2331;
        _2429 = (exp2(_2628 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].z)) * _2602.z) / cbSceneParam._m0[78u].z)) + _2332;
        _2431 = _2611 * _2333;
    }
    else
    {
        _2425 = _2330;
        _2427 = _2331;
        _2429 = _2332;
        _2431 = _2333;
    }
    bool _2638;
    vec4 _2441;
    vec4 _2463;
    float _2465;
    float _2469;
    float _2470;
    float _2471;
    float _2472;
    bool _2482;
    for (;;)
    {
        _2441 = cbMatDynParam._m0[0u];
        float _2443 = roundEven(_2441.y);
        bool _2444 = _2443 == 3.0;
        float _2445 = log2(_2431);
        float _2452 = exp2(_2445 * cbSceneParam._m0[78u].x) * _2301;
        float _2453 = exp2(_2445 * cbSceneParam._m0[78u].y) * _2302;
        float _2454 = exp2(_2445 * cbSceneParam._m0[78u].z) * _2303;
        float _2461 = _383 + (-0.5);
        _2463 = cbMtdParam._m0[1u];
        _2465 = _2463.y * _2461;
        float _2468 = (_2443 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2469 = _2468 * (_2444 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2425)));
        _2470 = _2468 * (_2444 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2427)));
        _2471 = _2468 * (_2444 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2429)));
        _2472 = _2461 * 0.999000012874603271484375;
        _2482 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2482)
        {
            if ((cbInstanceData._m0[_435 + 7u].x + _2472) < 0.5)
            {
                _2638 = true;
                break;
            }
        }
        uint _2579 = _437 + uint(_2441.w);
        if ((cbInstanceData._m0[_2579].w < 1.0) && ((cbInstanceData._m0[_2579].w + _2472) < 0.5))
        {
            _2638 = true;
            break;
        }
        if ((_2465 + _236) < _2463.x)
        {
            _2638 = true;
            break;
        }
        _2638 = false;
        break;
    }
    float _2843;
    if (_2638)
    {
        discard_state = true;
        _2843 = 0.0;
    }
    else
    {
        _2843 = _2308;
    }
    SV_Target.x = _2469;
    SV_Target.y = _2470;
    SV_Target.z = _2471;
    SV_Target.w = _2843;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2308;
    discard_exit();
}


