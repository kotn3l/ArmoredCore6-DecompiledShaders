#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MetallicValue_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D MetallicValue_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _837;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(MetallicValue_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _235 = _228.w * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(MetallicValue_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3459 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))));
    float _271 = fma(_268, _212, fma(_261, _204 * TANGENT.x, (_190 * _182) * _259));
    float _274 = fma(_268, _213, fma(_261, _204 * TANGENT.y, (_190 * _183) * _259));
    float _277 = fma(_268, _214, fma(_261, _204 * TANGENT.z, (_190 * _184) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _289 = _288 * _282;
    float _290 = _288 * _283;
    float _291 = _288 * _284;
    float _3470 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _292 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _293 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3503 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3514 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3525 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _297 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _355 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _365 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _355);
    float _366 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _355);
    float _367 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _355);
    float _371 = inversesqrt(dot(vec3(_365, _366, _367), vec3(_365, _366, _367)));
    float _372 = _365 * _371;
    float _373 = _366 * _371;
    float _374 = _367 * _371;
    float _380 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _381 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _402 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _405 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _408 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _421 = uint(roundEven(NORMAL.w)) * 13u;
    uint _424 = (_421 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _430 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_424].x;
    float _431 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_424].y;
    float _432 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_424].z;
    float _3536 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _436 = 1.0 - _297;
    float _437 = _433 * _436;
    float _438 = _434 * _436;
    float _439 = _435 * _436;
    float _444 = (_433 + (-0.039999999105930328369140625)) * _297;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _297;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _297;
    float _447 = _444 + 0.039999999105930328369140625;
    float _449 = _445 + 0.039999999105930328369140625;
    float _450 = _446 + 0.039999999105930328369140625;
    vec4 _459 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _380, cbSceneParam._m0[86u].y * _381));
    float _462 = _459.x * TEXCOORD_1.w;
    float _463 = dot(vec3(_289, _290, _291), vec3(_372, _373, _374));
    float _466 = _463 * 2.0;
    float _470 = (_466 * _289) - _372;
    float _471 = (_466 * _290) - _373;
    float _472 = (_466 * _291) - _374;
    float _476 = abs(dot(vec3(_372, _373, _374), vec3(_289, _290, _291)));
    float _3569 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _478 = sqrt(_293);
    float _491 = exp2((_478 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_478 * 3.0));
    float _497 = (1.0 - _491) * ((_478 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _498 = _491 * _478;
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _836;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _561 = fma(_534, cbModelParam._m0[26u].z, fma(_530, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526));
        float _565 = fma(_534, cbModelParam._m0[27u].z, fma(_530, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526));
        float _569 = fma(_534, cbModelParam._m0[28u].z, fma(_530, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526));
        float _594 = _526 + _289;
        float _595 = _530 + _290;
        float _596 = _534 + _291;
        float _606 = fma(_596, cbModelParam._m0[26u].z, fma(_595, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594)) - _561;
        float _607 = fma(_596, cbModelParam._m0[27u].z, fma(_595, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594)) - _565;
        float _608 = fma(_596, cbModelParam._m0[28u].z, fma(_595, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594)) - _569;
        float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
        float _625 = ((_612 * _606) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_561 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_612 * _607) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_565 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _627 = ((_612 * _608) / cbModelParam._m0[34u].z) + ((((((_569 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        float _664 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_630.x + (-0.5));
        float _666 = _664 * (_630.y + (-0.5));
        float _667 = _664 * (_630.z + (-0.5));
        float _674 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_637.x + (-0.5));
        float _676 = _674 * (_637.y + (-0.5));
        float _677 = _674 * (_637.z + (-0.5));
        float _684 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_644.x + (-0.5));
        float _686 = _684 * (_644.y + (-0.5));
        float _687 = _684 * (_644.z + (-0.5));
        float _694 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_651.x + (-0.5));
        float _696 = _694 * (_651.y + (-0.5));
        float _697 = _694 * (_651.z + (-0.5));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _701 = _665 * 0.5;
        float _702 = _675 * 0.5;
        float _703 = _685 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _718 = (dot(vec3(_289, _290, _291), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _728 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _3617 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_730 + 1.0))) + _735) * _698;
        float _745 = _666 * 0.5;
        float _746 = _676 * 0.5;
        float _747 = _686 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _761 = (dot(vec3(_289, _290, _291), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _770 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3650 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_772 + 1.0))) + _777) * _699;
        float _787 = _667 * 0.5;
        float _788 = _677 * 0.5;
        float _789 = _687 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_289, _290, _291), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_700 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3683 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_814 + 1.0))) + _819) * _700;
        _836 = _667;
        _838 = _666;
        _839 = _665;
        _840 = _677;
        _841 = _676;
        _842 = _675;
        _843 = _687;
        _844 = _686;
        _845 = _685;
        _846 = _700;
        _847 = _699;
        _848 = _698;
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
    }
    else
    {
        _836 = _837;
        _838 = _837;
        _839 = _837;
        _840 = _837;
        _841 = _837;
        _842 = _837;
        _843 = _837;
        _844 = _837;
        _845 = _837;
        _846 = _837;
        _847 = _837;
        _848 = _837;
        _849 = 0.0;
        _850 = 0.0;
        _851 = 0.0;
    }
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _877 = fma(_534, cbModelParam._m0[30u].z, fma(_530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _526));
        float _881 = fma(_534, cbModelParam._m0[31u].z, fma(_530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _526));
        float _885 = fma(_534, cbModelParam._m0[32u].z, fma(_530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _526));
        float _908 = _526 + _289;
        float _909 = _530 + _290;
        float _910 = _534 + _291;
        float _920 = fma(_910, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908)) - _877;
        float _921 = fma(_910, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908)) - _881;
        float _922 = fma(_910, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908)) - _885;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_877 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_881 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[35u].z) + ((((((_885 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _976 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_943.x + (-0.5));
        float _978 = _976 * (_943.y + (-0.5));
        float _979 = _976 * (_943.z + (-0.5));
        float _986 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_950.x + (-0.5));
        float _988 = _986 * (_950.y + (-0.5));
        float _989 = _986 * (_950.z + (-0.5));
        float _996 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_957.x + (-0.5));
        float _998 = _996 * (_957.y + (-0.5));
        float _999 = _996 * (_957.z + (-0.5));
        float _1006 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_964.x + (-0.5));
        float _1008 = _1006 * (_964.y + (-0.5));
        float _1009 = _1006 * (_964.z + (-0.5));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = _977 * 0.5;
        float _1014 = _987 * 0.5;
        float _1015 = _997 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_289, _290, _291), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3746 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1040 + 1.0))) + _1045) * _1010;
        float _1055 = _978 * 0.5;
        float _1056 = _988 * 0.5;
        float _1057 = _998 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_289, _290, _291), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3779 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1082 + 1.0))) + _1087) * _1011;
        float _1097 = _979 * 0.5;
        float _1098 = _989 * 0.5;
        float _1099 = _999 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_289, _290, _291), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3812 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1124 + 1.0))) + _1129) * _1012;
        _1146 = _979;
        _1147 = _978;
        _1148 = _977;
        _1149 = _989;
        _1150 = _988;
        _1151 = _987;
        _1152 = _999;
        _1153 = _998;
        _1154 = _997;
        _1155 = _1012;
        _1156 = _1011;
        _1157 = _1010;
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
    }
    else
    {
        _1146 = _837;
        _1147 = _837;
        _1148 = _837;
        _1149 = _837;
        _1150 = _837;
        _1151 = _837;
        _1152 = _837;
        _1153 = _837;
        _1154 = _837;
        _1155 = _837;
        _1156 = _837;
        _1157 = _837;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _851)) + _851;
    float _1193 = fma(_1172, cbSceneParam._m0[89u].z, fma(_1171, cbSceneParam._m0[89u].y, _1170 * cbSceneParam._m0[89u].x));
    float _1196 = fma(_1172, cbSceneParam._m0[90u].z, fma(_1171, cbSceneParam._m0[90u].y, _1170 * cbSceneParam._m0[90u].x));
    float _1199 = fma(_1172, cbSceneParam._m0[91u].z, fma(_1171, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1170));
    float _1214 = _470 * 0.5;
    float _1215 = _471 * 0.5;
    float _1216 = _472 * 0.5;
    float _1217 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_1148, _1151, _1154, _1157));
    float _1220 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1223 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1257;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1230 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_836, _840, _843, _846));
        float _1234 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_838, _841, _844, _847));
        float _1238 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_839, _842, _845, _848));
        float _1245 = dot(vec4(cbModelParam._m0[39u]), vec4(_1214, _1215, _1216, 1.0));
        _1257 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1245) ? 0.0 : (isnan(0.0) ? _1245 : max(0.0, _1245))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1257 = 1.0;
    }
    float _1268;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1259 = dot(vec4(cbModelParam._m0[40u]), vec4(_1214, _1215, _1216, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1272 = (_1268 * cbModelParam._m0[1u].x) + (_1257 * (1.0 - cbModelParam._m0[1u].x));
    float _1282 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1283 = isnan(_1282) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1282 : min(cbModelParam._m0[25u].z, _1282));
    float _1365;
    float _1367;
    float _1369;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1332 = fma(_534, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526)) + cbModelParam._m0[13u].w;
        float _1336 = fma(_534, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526)) + cbModelParam._m0[14u].w;
        float _1340 = fma(_534, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526)) + cbModelParam._m0[15u].w;
        float _1343 = fma(_472, cbModelParam._m0[13u].z, fma(_471, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _470));
        float _1346 = fma(_472, cbModelParam._m0[14u].z, fma(_471, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _470));
        float _1349 = fma(_472, cbModelParam._m0[15u].z, fma(_471, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _470));
        float _1377;
        if (_1343 > 0.0)
        {
            _1377 = abs((1.0 - _1332) / _1343);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1332 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1377 = frontier_phi_16_14_ladder;
        }
        float _1553;
        if (_1346 > 0.0)
        {
            _1553 = abs((1.0 - _1336) / _1346);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1336 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1553 = frontier_phi_25_21_ladder;
        }
        float _1849;
        if (_1349 > 0.0)
        {
            _1849 = abs((1.0 - _1340) / _1349);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1340 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1849 = frontier_phi_37_32_ladder;
        }
        float _1851 = isnan(_1553) ? _1377 : (isnan(_1377) ? _1553 : min(_1377, _1553));
        float _1852 = isnan(_1849) ? _1851 : (isnan(_1851) ? _1849 : min(_1851, _1849));
        float _1856 = (_1852 * _1343) + _1332;
        float _1857 = (_1852 * _1346) + _1336;
        float _1858 = (_1852 * _1349) + _1340;
        float _1859 = _1852 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1859;
        float _1863 = _1859 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 > _1863) || ((_1857 < _1861) || ((_1856 < _1861) || (_1856 > _1863))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2003 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1858, cbModelParam._m0[9u].z, fma(_1857, cbModelParam._m0[9u].y, _1856 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1858, cbModelParam._m0[10u].z, fma(_1857, cbModelParam._m0[10u].y, _1856 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1858, cbModelParam._m0[11u].z, fma(_1857, cbModelParam._m0[11u].y, _1856 * cbModelParam._m0[11u].x))), _1283);
            frontier_phi_15_37_ladder = _2003.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2003.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2003.z * cbModelParam._m0[1u].y;
        }
        _1365 = frontier_phi_15_37_ladder_1;
        _1367 = frontier_phi_15_37_ladder;
        _1369 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_470, _471, _472), _1283);
        _1365 = _1353.x * cbModelParam._m0[1u].y;
        _1367 = _1353.y * cbModelParam._m0[1u].y;
        _1369 = _1353.z * cbModelParam._m0[1u].y;
    }
    float _1373 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1374 = isnan(_1373) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1373 : min(cbModelParam._m0[25u].w, _1373));
    float _1467;
    float _1469;
    float _1471;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1431 = fma(_534, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526)) + cbModelParam._m0[21u].w;
        float _1435 = fma(_534, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526)) + cbModelParam._m0[22u].w;
        float _1439 = fma(_534, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526)) + cbModelParam._m0[23u].w;
        float _1442 = fma(_472, cbModelParam._m0[21u].z, fma(_471, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _470));
        float _1445 = fma(_472, cbModelParam._m0[22u].z, fma(_471, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _470));
        float _1448 = fma(_472, cbModelParam._m0[23u].z, fma(_471, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _470));
        float _1558;
        if (_1442 > 0.0)
        {
            _1558 = abs((1.0 - _1431) / _1442);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1431 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1558 = frontier_phi_27_23_ladder;
        }
        float _1876;
        if (_1445 > 0.0)
        {
            _1876 = abs((1.0 - _1435) / _1445);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1435 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1876 = frontier_phi_39_34_ladder;
        }
        float _2214;
        if (_1448 > 0.0)
        {
            _2214 = abs((1.0 - _1439) / _1448);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1439 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2214 = frontier_phi_49_46_ladder;
        }
        float _2216 = isnan(_1876) ? _1558 : (isnan(_1558) ? _1876 : min(_1558, _1876));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1442) + _1431;
        float _2222 = (_2217 * _1445) + _1435;
        float _2223 = (_2217 * _1448) + _1439;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1374);
            frontier_phi_24_49_ladder = _2345.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2345.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2345.x * cbModelParam._m0[1u].z;
        }
        _1467 = frontier_phi_24_49_ladder_2;
        _1469 = frontier_phi_24_49_ladder_1;
        _1471 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_470, _471, _472), _1374);
        _1467 = _1451.x * cbModelParam._m0[1u].z;
        _1469 = _1451.y * cbModelParam._m0[1u].z;
        _1471 = _1451.z * cbModelParam._m0[1u].z;
    }
    float _1484 = (((_497 * _447) + _498) * _462) * ((cbModelParam._m0[1u].w * (_1467 - _1365)) + _1365);
    float _1486 = (((_497 * _449) + _498) * _462) * ((cbModelParam._m0[1u].w * (_1469 - _1367)) + _1367);
    float _1488 = (((_497 * _450) + _498) * _462) * ((cbModelParam._m0[1u].w * (_1471 - _1369)) + _1369);
    float _1491 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1486, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1486, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1486, cbSceneParam._m0[91u].y, _1484 * cbSceneParam._m0[91u].x));
    float _1532 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1536 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1540 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1544 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1545 = _1532 / _1544;
    float _1546 = _1536 / _1544;
    float _1547 = _1540 / _1544;
    float _1694;
    float _1695;
    float _1696;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1574 = ((uint(_1547 > cbSceneParam._m0[59u].y) + uint(_1547 > cbSceneParam._m0[59u].x)) + uint(_1547 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1575 = _1574 + 43u;
        uint _1583 = _1574 + 44u;
        uint _1591 = _1574 + 45u;
        uint _1599 = _1574 + 46u;
        float _1610 = fma(_1544, cbSceneParam._m0[_1575].w, fma(_1540, cbSceneParam._m0[_1575].z, fma(_1536, cbSceneParam._m0[_1575].y, _1532 * cbSceneParam._m0[_1575].x)));
        float _1614 = fma(_1544, cbSceneParam._m0[_1583].w, fma(_1540, cbSceneParam._m0[_1583].z, fma(_1536, cbSceneParam._m0[_1583].y, _1532 * cbSceneParam._m0[_1583].x)));
        float _1622 = fma(_1544, cbSceneParam._m0[_1599].w, fma(_1540, cbSceneParam._m0[_1599].z, fma(_1536, cbSceneParam._m0[_1599].y, _1532 * cbSceneParam._m0[_1599].x)));
        float _1627 = cbSceneParam._m0[33u].z * _1622;
        float _1629 = cbSceneParam._m0[33u].w * _1622;
        float _1632 = fma(_1544, cbSceneParam._m0[_1591].w, fma(_1540, cbSceneParam._m0[_1591].z, fma(_1536, cbSceneParam._m0[_1591].y, _1532 * cbSceneParam._m0[_1591].x))) / _1622;
        float _1680 = (cbSceneParam._m0[33u].x - sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547))) * cbSceneParam._m0[33u].y;
        float _3938 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1687 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 + _1610) / _1622, (_1629 + _1614) / _1622), _1632), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1629 + _1610) / _1622, (_1614 - _1627) / _1622), _1632), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1610 - _1627) / _1622, (_1614 - _1629) / _1622), _1632), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1610 - _1629) / _1622, (_1627 + _1614) / _1622), _1632), 0.0)).x), vec4(0.25)));
        _1694 = 1.0 - (_1687 * cbSceneParam._m0[34u].x);
        _1695 = 1.0 - (_1687 * cbSceneParam._m0[34u].y);
        _1696 = 1.0 - (_1687 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1694 = 1.0;
        _1695 = 1.0;
        _1696 = 1.0;
    }
    float _1760;
    float _1762;
    float _1764;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1748 = fma(_1544, cbSceneParam._m0[63u].w, fma(_1540, cbSceneParam._m0[63u].z, fma(_1536, cbSceneParam._m0[63u].y, _1532 * cbSceneParam._m0[63u].x)));
        float _1749 = fma(_1544, cbSceneParam._m0[60u].w, fma(_1540, cbSceneParam._m0[60u].z, fma(_1536, cbSceneParam._m0[60u].y, _1532 * cbSceneParam._m0[60u].x))) / _1748;
        float _1750 = fma(_1544, cbSceneParam._m0[61u].w, fma(_1540, cbSceneParam._m0[61u].z, fma(_1536, cbSceneParam._m0[61u].y, _1532 * cbSceneParam._m0[61u].x))) / _1748;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1749 >= cbSceneParam._m0[64u].x) && (_1750 >= cbSceneParam._m0[64u].y)) && (_1749 <= cbSceneParam._m0[64u].z)) && (_1750 <= cbSceneParam._m0[64u].w))
        {
            float _1889 = fma(_1544, cbSceneParam._m0[62u].w, fma(_1540, cbSceneParam._m0[62u].z, fma(_1536, cbSceneParam._m0[62u].y, _1532 * cbSceneParam._m0[62u].x))) / _1748;
            float _1893 = isnan(cbSceneParam._m0[41u].w) ? _1889 : (isnan(_1889) ? cbSceneParam._m0[41u].w : max(_1889, cbSceneParam._m0[41u].w));
            float _1936 = (cbSceneParam._m0[33u].x - sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547))) * cbSceneParam._m0[33u].y;
            float _3954 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
            float _1943 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1749, cbSceneParam._m0[33u].w + _1750), _1893), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1749, _1750 - cbSceneParam._m0[33u].z), _1893), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1749 - cbSceneParam._m0[33u].z, _1750 - cbSceneParam._m0[33u].w), _1893), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1749 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1750), _1893), 0.0)).x), vec4(0.25)));
            float _1947 = 1.0 - (_1943 * cbSceneParam._m0[34u].x);
            float _1948 = 1.0 - (_1943 * cbSceneParam._m0[34u].y);
            float _1949 = 1.0 - (_1943 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1948) ? _1695 : (isnan(_1695) ? _1948 : min(_1695, _1948));
            frontier_phi_36_35_ladder_1 = isnan(_1949) ? _1696 : (isnan(_1696) ? _1949 : min(_1696, _1949));
            frontier_phi_36_35_ladder_2 = isnan(_1947) ? _1694 : (isnan(_1694) ? _1947 : min(_1694, _1947));
        }
        else
        {
            frontier_phi_36_35_ladder = _1695;
            frontier_phi_36_35_ladder_1 = _1696;
            frontier_phi_36_35_ladder_2 = _1694;
        }
        _1760 = frontier_phi_36_35_ladder_2;
        _1762 = frontier_phi_36_35_ladder;
        _1764 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1760 = _1694;
        _1762 = _1695;
        _1764 = _1696;
    }
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_421 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _462 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1808 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1812 = _1771 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_289, _290, _291));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_289, _290, _291));
    float _3990 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _4001 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1788].x * _1794) * _1833) + (((cbLight._m0[_1798].x * _1760) * _1808) * _1831);
    float _1841 = ((_1794 * cbLight._m0[_1788].y) * _1833) + (((cbLight._m0[_1798].y * _1762) * _1808) * _1831);
    float _1842 = ((_1794 * cbLight._m0[_1788].z) * _1833) + (((cbLight._m0[_1798].z * _1764) * _1808) * _1831);
    uvec4 _1846 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1848 = _1846.x == 0u;
    float _1950;
    float _1952;
    float _1954;
    if (_1848)
    {
        _1950 = _1840;
        _1952 = _1841;
        _1954 = _1842;
    }
    else
    {
        uint _1958 = _1771 + 6u;
        float _1974 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _4012 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1977 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1950 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1840;
        _1952 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1841;
        _1954 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1842;
    }
    bool _1957 = _1846.y == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_1957)
    {
        _2012 = _1950;
        _2014 = _1952;
        _2016 = _1954;
    }
    else
    {
        uint _2185 = _1771 + 7u;
        float _2201 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4028 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2204 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2012 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _1950;
        _2014 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _1952;
        _2016 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _1954;
    }
    uint _2019 = _1771 + 8u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _293) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1771].x + _372;
    float _2035 = cbLight._m0[_1771].y + _373;
    float _2036 = cbLight._m0[_1771].z + _374;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1771].xyz));
    float _4044 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2048 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2049 = dot(vec3(_289, _290, _291), vec3(_2041, _2042, _2043));
    float _4066 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_2041, _2042, _2043));
    float _4077 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2033 * _2033;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2069 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
    float _2070 = 0.959999978542327880859375 - _444;
    float _2072 = 0.959999978542327880859375 - _445;
    float _2073 = 0.959999978542327880859375 - _446;
    float _2080 = 1.0 - _2033;
    float _2091 = (0.5 / (((_2048 * ((_2047 * _2080) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2080) + _2033) * _2047))) * _2047;
    float _4088 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    uint _2107 = _1771 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _293) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1812].x + _372;
    float _2121 = cbLight._m0[_1812].y + _373;
    float _2122 = cbLight._m0[_1812].z + _374;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1812].xyz));
    float _4099 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2134 = dot(vec3(_289, _290, _291), vec3(_2127, _2128, _2129));
    float _4110 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2127, _2128, _2129));
    float _4121 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
    float _2160 = 1.0 - _2119;
    float _2170 = (0.5 / (((_2048 * ((_2133 * _2160) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2160) + _2119) * _2133))) * _2133;
    float _4132 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2182 = (((((_2153 * _2070) + _447) * cbLight._m0[_2107].x) * _2172) * _1794) + ((((cbLight._m0[_2019].x * _1760) * ((_2069 * _2070) + _447)) * _2093) * _1808);
    float _2183 = (((((_2153 * _2072) + _449) * cbLight._m0[_2107].y) * _2172) * _1794) + ((((cbLight._m0[_2019].y * _1762) * ((_2069 * _2072) + _449)) * _2093) * _1808);
    float _2184 = (((((_2153 * _2073) + _450) * cbLight._m0[_2107].z) * _2172) * _1794) + ((((cbLight._m0[_2019].z * _1764) * ((_2069 * _2073) + _450)) * _2093) * _1808);
    float _2240;
    float _2242;
    float _2244;
    if (_1848)
    {
        _2240 = _2182;
        _2242 = _2183;
        _2244 = _2184;
    }
    else
    {
        uint _2246 = _1771 + 2u;
        uint _2250 = _1771 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _293) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _372;
        float _2267 = cbLight._m0[_2246].y + _373;
        float _2268 = cbLight._m0[_2246].z + _374;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2246].xyz));
        float _4143 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2280 = dot(vec3(_289, _290, _291), vec3(_2273, _2274, _2275));
        float _4154 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4165 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_2048 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2306) + _2265) * _2279))) * _2279;
        float _4176 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2240 = (((((_2299 * _2070) + _447) * cbLight._m0[_2250].x) * _2318) * _2319) + _2182;
        _2242 = (((((_2299 * _2072) + _449) * cbLight._m0[_2250].y) * _2318) * _2319) + _2183;
        _2244 = (((((_2299 * _2073) + _450) * cbLight._m0[_2250].z) * _2318) * _2319) + _2184;
    }
    float _2350;
    float _2352;
    float _2354;
    if (_1957)
    {
        _2350 = _2240;
        _2352 = _2242;
        _2354 = _2244;
    }
    else
    {
        uint _2361 = _1771 + 3u;
        uint _2365 = _1771 + 11u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _293) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _372;
        float _2382 = cbLight._m0[_2361].y + _373;
        float _2383 = cbLight._m0[_2361].z + _374;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2361].xyz));
        float _4192 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2395 = dot(vec3(_289, _290, _291), vec3(_2388, _2389, _2390));
        float _4203 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4214 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
        float _2421 = 1.0 - _2380;
        float _2431 = (0.5 / (((_2048 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2421) + _2380) * _2394))) * _2394;
        float _4225 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2350 = (((((_2414 * _2070) + _447) * cbLight._m0[_2365].x) * _2433) * _2434) + _2240;
        _2352 = (((((_2414 * _2072) + _449) * cbLight._m0[_2365].y) * _2433) * _2434) + _2242;
        _2354 = (((((_2414 * _2073) + _450) * cbLight._m0[_2365].z) * _2433) * _2434) + _2244;
    }
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_1769.y == 0u)
    {
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.x;
        uint _2467 = uint((float(_2455.y) * floor(float(uint(cbSceneParam._m0[85u].y * _381) / _2456))) + floor(float(uint(cbSceneParam._m0[85u].x * _380) / _2456)));
        float _2477 = (log2(_1547 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2478 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        uint _2481 = uint(isnan(14.0) ? _2478 : (isnan(_2478) ? 14.0 : min(_2478, 14.0)));
        uvec4 _2486 = texelFetch(g_lightClusterGridBuffer, int(((_2481 << 2u) + (_2467 << 6u)) >> 2u));
        uint _2487 = _2486.x;
        uint _2488 = _2455.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2488 >> 4u) & 15u)) + 4294967295u) & _2487) == 0u) || ((_2488 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            uint _2718 = 0u;
            uint _2727;
            bool _2728;
            for (;;)
            {
                _2727 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                _2728 = _2727 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2728)
                {
                    frontier_phi_68_pred = _2717;
                    frontier_phi_68_pred_1 = _2716;
                    frontier_phi_68_pred_2 = _2715;
                    frontier_phi_68_pred_3 = _2713;
                    frontier_phi_68_pred_4 = _2712;
                    frontier_phi_68_pred_5 = _2714;
                }
                else
                {
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    uint _2842;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2727;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    for (;;)
                    {
                        uint _2846 = uint(findLSB(_2842)) + (_2718 << 5u);
                        uint _2843 = (_2842 + 4294967295u) & _2842;
                        uint _2848 = _2846 * 48u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 3u)).x));
                        uint _2868 = (_2846 * 48u) + 4u;
                        vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 3u)).x));
                        uint _2887 = (_2846 * 48u) + 8u;
                        vec3 _2898 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x));
                        float _2902 = _2862.x - _1545;
                        float _2903 = _2862.y - _1546;
                        float _2904 = _2862.z - _1547;
                        float _2905 = dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904));
                        float _2908 = inversesqrt(_2905);
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2912 = dot(vec3(_402, _405, _408), vec3(_2909, _2910, _2911));
                        float _2917 = 1.0 - (_2905 * _2862.w);
                        float _4251 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2918 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2919 = sqrt(_2905) * _2881.w;
                        float _2922 = 1.39999997615814208984375 / (_2919 + 1.39999997615814208984375);
                        float _2923 = _2922 * _2922;
                        float _2926 = ((1.0 - _2923) * _2912) + _2923;
                        float _2929 = _2919 * _2919;
                        float _2933 = ((isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))) * _2918) / ((_2929 * 0.699999988079071044921875) + 1.0);
                        float _2937 = (-0.0) - _1545;
                        float _2938 = (-0.0) - _1546;
                        float _2939 = (-0.0) - _1547;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2944 = _2943 * _2937;
                        float _2945 = _2943 * _2938;
                        float _2946 = _2943 * _2939;
                        float _2953 = exp2(log2(1.0 / ((_2929 * 3.5) + 5.0)) * 0.25);
                        float _2954 = 1.0 - _478;
                        float _2961 = sqrt(1.0 - ((1.0 - (_2954 * _2954)) * (1.0 - (_2953 * _2953))));
                        float _2962 = _2961 * _2961;
                        float _2963 = _2962 * _2962;
                        float _2964 = _2944 + _2909;
                        float _2965 = _2945 + _2910;
                        float _2966 = _2946 + _2911;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2974 = dot(vec3(_402, _405, _408), vec3(_2944, _2945, _2946));
                        float _4267 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2978 = dot(vec3(_402, _405, _408), vec3(_2970 * _2964, _2970 * _2965, _2970 * _2966));
                        float _4278 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2985 = ((_2981 * _2981) * (_2963 + (-1.0))) + 1.0;
                        float _2986 = _2922 * _2962;
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2912) + _2987;
                        float _4289 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2992 = 1.0 - _2962;
                        float _3002 = (0.5 / (((_2991 * ((_2977 * _2992) + _2962)) + 9.9999999392252902907785028219223e-09) + (((_2991 * _2992) + _2962) * _2977))) * _2991;
                        float _4300 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3013 = (((_2963 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_2985 * _2985) * ((_2929 * 2.1991131305694580078125) + 3.141590118408203125))) * _2918;
                        _2771 = (_2933 * _2881.x) + _2839;
                        _2772 = (_2933 * _2881.y) + _2840;
                        _2773 = (_2933 * _2881.z) + _2841;
                        _2768 = (_3013 * _2898.x) + _2836;
                        _2769 = (_3013 * _2898.y) + _2837;
                        _2770 = (_3013 * _2898.z) + _2838;
                        if (_2843 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2843;
                        }
                    }
                    frontier_phi_68_pred = _2773;
                    frontier_phi_68_pred_1 = _2772;
                    frontier_phi_68_pred_2 = _2771;
                    frontier_phi_68_pred_3 = _2769;
                    frontier_phi_68_pred_4 = _2768;
                    frontier_phi_68_pred_5 = _2770;
                }
                _2579 = frontier_phi_68_pred;
                _2577 = frontier_phi_68_pred_1;
                _2575 = frontier_phi_68_pred_2;
                _2571 = frontier_phi_68_pred_3;
                _2569 = frontier_phi_68_pred_4;
                _2573 = frontier_phi_68_pred_5;
                uint _2719 = _2718 + 1u;
                if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2712 = _2569;
                    _2713 = _2571;
                    _2714 = _2573;
                    _2715 = _2575;
                    _2716 = _2577;
                    _2717 = _2579;
                    _2718 = _2719;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((4294967295u << _2585) & _2487) == 0u)
        {
            _2680 = _2568;
            _2682 = _2570;
            _2684 = _2572;
            _2686 = _2574;
            _2688 = _2576;
            _2690 = _2578;
        }
        else
        {
            float _2705 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
            float _2706 = _2705 * _1545;
            float _2707 = _2705 * _1546;
            float _2708 = _2705 * _1547;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2819 = _2568;
                float _2820 = _2570;
                float _2821 = _2572;
                float _2822 = _2574;
                float _2823 = _2576;
                float _2824 = _2578;
                uint _2825 = _2585;
                uint _2834;
                bool _2835;
                for (;;)
                {
                    _2834 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                    _2835 = _2834 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2835)
                    {
                        frontier_phi_74_pred = _2821;
                        frontier_phi_74_pred_1 = _2820;
                        frontier_phi_74_pred_2 = _2819;
                        frontier_phi_74_pred_3 = _2824;
                        frontier_phi_74_pred_4 = _2823;
                        frontier_phi_74_pred_5 = _2822;
                    }
                    else
                    {
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3031 = _2819;
                        float _3032 = _2820;
                        float _3033 = _2821;
                        float _3034 = _2822;
                        float _3035 = _2823;
                        float _3036 = _2824;
                        uint _3037 = _2834;
                        uint _3038;
                        vec4 _3063;
                        float _3064;
                        vec4 _3079;
                        vec3 _3091;
                        vec4 _3107;
                        vec4 _3123;
                        float _3170;
                        bool _3171;
                        for (;;)
                        {
                            uint _3048 = ((_2825 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3037));
                            _3038 = (_3037 + 4294967295u) & _3037;
                            uint _3050 = _3048 * 40u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3064 = _3063.w;
                            uint _3066 = (_3048 * 40u) + 4u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3081 = (_3048 * 40u) + 8u;
                            _3091 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x));
                            uint _3094 = (_3048 * 40u) + 16u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3110 = (_3048 * 40u) + 20u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3126 = (_3048 * 40u) + 24u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3145 = (_3048 * 40u) + 28u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3170 = fma(_1547, _3158.z, fma(_1546, _3158.y, _3158.x * _1545)) + _3158.w;
                            _3171 = !((fma(_1547, _3139.z, fma(_1546, _3139.y, _3139.x * _1545)) + _3139.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3171)
                            {
                                float _3198 = _3063.x - _1545;
                                float _3199 = _3063.y - _1546;
                                float _3200 = _3063.z - _1547;
                                float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                                float _3204 = inversesqrt(_3201);
                                float _3205 = _3204 * _3198;
                                float _3206 = _3204 * _3199;
                                float _3207 = _3204 * _3200;
                                float _3211 = 1.0 - (_3201 / (_3064 * _3064));
                                float _4311 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3216 = sqrt(_3201) * _3079.w;
                                float _3218 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                                float _3219 = _3218 * _3218;
                                float _3222 = ((1.0 - _3219) * dot(vec3(_3205, _3206, _3207), vec3(_402, _405, _408))) + _3219;
                                float _3225 = _3216 * _3216;
                                float _3229 = (fma(_1547, _3107.z, fma(_1546, _3107.y, _3107.x * _1545)) + _3107.w) / _3170;
                                float _3230 = (fma(_1547, _3123.z, fma(_1546, _3123.y, _3123.x * _1545)) + _3123.w) / _3170;
                                float _3234 = 1.0 - dot(vec2(_3229, _3230), vec2(_3229, _3230));
                                float _4327 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3236 = _3235 * (((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3212) / ((_3225 * 0.699999988079071044921875) + 1.0));
                                float _3248 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                                float _3249 = 1.0 - _478;
                                float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                                float _3257 = _3256 * _3256;
                                float _3258 = _3257 * _3257;
                                float _3259 = _3205 - _2706;
                                float _3260 = _3206 - _2707;
                                float _3261 = _3207 - _2708;
                                float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                                float _3269 = dot(vec3(_402, _405, _408), vec3((-0.0) - _2706, (-0.0) - _2707, (-0.0) - _2708));
                                float _4338 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3273 = dot(vec3(_402, _405, _408), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                                float _4349 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                                float _3281 = _3218 * _3257;
                                float _3282 = _3281 * _3281;
                                float _3288 = ((1.0 - _3282) * dot(vec3(_402, _405, _408), vec3(_3205, _3206, _3207))) + _3282;
                                float _4360 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3290 = 1.0 - _3257;
                                float _3300 = (0.5 / (((_3289 * ((_3272 * _3290) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3257) * _3272))) * _3289;
                                float _4371 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3310 = (_3235 * _3212) * (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3280 * _3280) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3310 * _3091.z;
                                frontier_phi_80_pred_1 = _3310 * _3091.y;
                                frontier_phi_80_pred_2 = _3310 * _3091.x;
                                frontier_phi_80_pred_3 = _3236 * _3079.z;
                                frontier_phi_80_pred_4 = _3236 * _3079.y;
                                frontier_phi_80_pred_5 = _3236 * _3079.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3316 = frontier_phi_80_pred;
                            _3315 = frontier_phi_80_pred_1;
                            _3314 = frontier_phi_80_pred_2;
                            _3319 = frontier_phi_80_pred_3;
                            _3318 = frontier_phi_80_pred_4;
                            _3317 = frontier_phi_80_pred_5;
                            _3021 = _3317 + _3034;
                            _3022 = _3318 + _3035;
                            _3023 = _3319 + _3036;
                            _3018 = _3314 + _3031;
                            _3019 = _3315 + _3032;
                            _3020 = _3316 + _3033;
                            if (_3038 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3038;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3020;
                        frontier_phi_74_pred_1 = _3019;
                        frontier_phi_74_pred_2 = _3018;
                        frontier_phi_74_pred_3 = _3023;
                        frontier_phi_74_pred_4 = _3022;
                        frontier_phi_74_pred_5 = _3021;
                    }
                    _2685 = frontier_phi_74_pred;
                    _2683 = frontier_phi_74_pred_1;
                    _2681 = frontier_phi_74_pred_2;
                    _2691 = frontier_phi_74_pred_3;
                    _2689 = frontier_phi_74_pred_4;
                    _2687 = frontier_phi_74_pred_5;
                    uint _2826 = _2825 + 1u;
                    if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2819 = _2681;
                        _2820 = _2683;
                        _2821 = _2685;
                        _2822 = _2687;
                        _2823 = _2689;
                        _2824 = _2691;
                        _2825 = _2826;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2689;
                frontier_phi_62_63_ladder_1 = _2687;
                frontier_phi_62_63_ladder_2 = _2685;
                frontier_phi_62_63_ladder_3 = _2691;
                frontier_phi_62_63_ladder_4 = _2683;
                frontier_phi_62_63_ladder_5 = _2681;
            }
            else
            {
                frontier_phi_62_63_ladder = _2576;
                frontier_phi_62_63_ladder_1 = _2574;
                frontier_phi_62_63_ladder_2 = _2572;
                frontier_phi_62_63_ladder_3 = _2578;
                frontier_phi_62_63_ladder_4 = _2570;
                frontier_phi_62_63_ladder_5 = _2568;
            }
            _2680 = frontier_phi_62_63_ladder_5;
            _2682 = frontier_phi_62_63_ladder_4;
            _2684 = frontier_phi_62_63_ladder_2;
            _2686 = frontier_phi_62_63_ladder_1;
            _2688 = frontier_phi_62_63_ladder;
            _2690 = frontier_phi_62_63_ladder_3;
        }
        float _2695 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
        _2499 = (_2695 * _2686) + _2012;
        _2501 = (_2695 * _2688) + _2014;
        _2503 = (_2695 * _2690) + _2016;
        _2505 = ((_2680 * _447) * _2695) + _2350;
        _2507 = ((_2682 * _449) * _2695) + _2352;
        _2509 = ((_2684 * _450) * _2695) + _2354;
    }
    else
    {
        _2499 = _2012;
        _2501 = _2014;
        _2503 = _2016;
        _2505 = _2350;
        _2507 = _2352;
        _2509 = _2354;
    }
    float _4387 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4398 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4409 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4420 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _2534 = cbInstanceData._m0[_421 + 6u].w * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)));
    float _2539 = _380 / cbSceneParam._m0[86u].x;
    float _2540 = _381 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2594 = _2593 / _313;
        float _2605 = _2594 * _365;
        float _2606 = _366 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2608 = _2594 * _367;
        float _2610 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2611 = _2610 + cbSceneParam._m0[79u].w;
        float _2612 = cbSceneParam._m0[79u].w - _2606;
        float _2618 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2608 * _2608));
        float _2621 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2618;
        float _2626 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2628 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2781;
        if (abs((_2607 - _2610) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2781 = ((((_2611 > 0.0) ? exp2(_2626 * _2611) : (2.0 - exp2(_2628 * _2611))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2621;
        }
        else
        {
            float _2741 = 1.0 / cbSceneParam._m0[80u].x;
            float _2742 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : max(_2611, _2612));
            float _2743 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : min(_2611, _2612));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            _2781 = ((abs(_2618 / _2607) * cbSceneParam._m0[80u].y) * ((((_2752 - _2753) * 2.0) - ((exp2(_2626 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0)))) - exp2(_2626 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))))) * _2741)) - ((exp2(_2628 * _2752) - exp2(_2628 * _2753)) * _2741))) + (_2621 * cbSceneParam._m0[80u].z);
        }
        vec4 _2783 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2792 = exp2((_2781 * (-1.44269502162933349609375)) * (1.0 - _2783.w));
        float _2793 = log2(_2792);
        float _2809 = log2(_2559);
        _2630 = (exp2(_2809 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2793 * cbSceneParam._m0[78u].x)) * _2783.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2632 = (exp2(_2809 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2793 * cbSceneParam._m0[78u].y)) * _2783.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2634 = (exp2(_2809 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2793 * cbSceneParam._m0[78u].z)) * _2783.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2636 = _2792 * _2559;
    }
    else
    {
        _2630 = _2556;
        _2632 = _2557;
        _2634 = _2558;
        _2636 = _2559;
    }
    float _2648 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2649 = _2648 == 3.0;
    float _2650 = log2(_2636);
    float _2657 = exp2(_2650 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2499 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _462))) + ((_2505 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1272)) * cbPerFrame._m0[3u].x));
    float _2658 = exp2(_2650 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2501 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _462))) + ((_2507 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1272)) * cbPerFrame._m0[3u].x));
    float _2659 = exp2(_2650 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2503 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _462))) + ((_2509 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1272)) * cbPerFrame._m0[3u].x));
    float _2668 = (_2648 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2668 * (_2649 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.y = _2668 * (_2649 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.z = _2668 * (_2649 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2634)));
    SV_Target.w = _2534;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2534;
}


