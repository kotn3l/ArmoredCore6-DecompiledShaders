#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1693;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _316 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _318 = (sqrt(((_298 * _298) + (_299 * _299)) + (_300 * _300)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0)));
    float _322 = _318 / cbMtdParam._m0[22u].z;
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(8.0) ? _323 : (isnan(_323) ? 8.0 : min(_323, 8.0));
    float _331 = cbMtdParam._m0[10u].x * _324;
    float _332 = cbMtdParam._m0[10u].y * _324;
    float _333 = cbMtdParam._m0[10u].z * _324;
    float _334 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _335 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _347 = cbMtdParam._m0[21u].y + _318;
    float _351 = _347 * cbMtdParam._m0[23u].z;
    float _4234 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    vec4 _370 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _373 = _370.x;
    float _397 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _373)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _373))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _4245 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _403 = 1.0 - (isnan(cbMtdParam._m0[24u].w) ? _398 : (isnan(_398) ? cbMtdParam._m0[24u].w : max(_398, cbMtdParam._m0[24u].w)));
    float _405 = (cbMtdParam._m0[24u].z + TEXCOORD_3.x) - (_403 * cbMtdParam._m0[20u].z);
    float _421 = (cbMtdParam._m0[27u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[19u].z;
    float _426 = cbMtdParam._m0[33u].x * TEXCOORD.x;
    float _427 = cbMtdParam._m0[33u].y * TEXCOORD.y;
    vec4 _441 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_2, SS_BumpMap), vec2((((_421 * cbMtdParam._m0[33u].z) + _426) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_427 + (_421 * cbMtdParam._m0[33u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _4261 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _447 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _448 = _441.z - _447;
    float _4272 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _461 = (_449 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _463 = (_449 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _476 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_461 + (cbMtdParam._m0[29u].z * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_463 + (cbMtdParam._m0[29u].w * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _480 = _476.z;
    vec4 _491 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_461 + (cbMtdParam._m0[29u].x * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_463 + (cbMtdParam._m0[29u].y * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _495 = _491.z;
    float _498 = (_403 - _441.w) + (isnan(_495) ? _480 : (isnan(_480) ? _495 : max(_480, _495)));
    float _4288 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = (_405 * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)));
    float _501 = _500 * TEXCOORD_7.w;
    float _513 = ((_500 + cbMtdParam._m0[9u].x) - _501) + (cbMtdParam._m0[15u].x * _449);
    float _516 = ((_500 + cbMtdParam._m0[9u].y) - _501) + (cbMtdParam._m0[15u].y * _449);
    float _519 = ((_500 + cbMtdParam._m0[9u].z) - _501) + (cbMtdParam._m0[15u].z * _449);
    vec4 _565 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].x * _421))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].y * _421))) + cbTextureTilingScale._m0[1u].w));
    float _570 = _565.z * 0.099999986588954925537109375;
    float _4299 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _572 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _576 = cbMtdParam._m0[23u].x * _318;
    float _4310 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _591 = (_513 + (isnan(0.07999999821186065673828125) ? _334 : (isnan(_334) ? 0.07999999821186065673828125 : min(_334, 0.07999999821186065673828125)))) + (_577 * (((1.0 - _513) - _572) + _570));
    float _593 = (_516 + (isnan(0.07999999821186065673828125) ? _335 : (isnan(_335) ? 0.07999999821186065673828125 : min(_335, 0.07999999821186065673828125)))) + (_577 * (((1.0 - _516) - _572) + _570));
    float _595 = (_519 + (isnan(0.07999999821186065673828125) ? _336 : (isnan(_336) ? 0.07999999821186065673828125 : min(_336, 0.07999999821186065673828125)))) + (_577 * (((1.0 - _519) + _570) - _572));
    float _4321 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _597 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _605 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _447) + cbMtdParam._m0[19u].x;
    float _617 = (POSITION_1.w - cbMtdParam._m0[27u].y) * (1.0 / cbMtdParam._m0[27u].x);
    float _4354 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _631 = (cbMtdParam._m0[32u].x * _421) + _426;
    float _632 = (cbMtdParam._m0[32u].y * _421) + _427;
    vec4 _659 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[31u].z * _421) + _426)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[31u].w * _421) + _427)) + cbTextureTilingScale._m0[3u].w));
    float _666 = (_659.x * 2.0) + (-1.0);
    float _668 = (_659.y * 2.0) + (-1.0);
    float _672 = 1.0 - dot(vec2(_666, _668), vec2(_666, _668));
    float _4365 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = sqrt(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)));
    float _677 = fma(_674, _235, fma(_668, _242, _666 * _228));
    float _680 = fma(_674, _236, fma(_668, _243, _666 * _229));
    float _683 = fma(_674, _237, fma(_668, _244, _666 * _230));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = cbPerFrame._m0[22u].x * 2.0;
    float _689 = _688 * cbMtdParam._m0[25u].w;
    float _693 = ((_677 * 0.5) * _687) + (-0.25);
    float _697 = ((_680 * 0.5) * _687) + (-0.25);
    float _698 = _697 * cbMtdParam._m0[26u].x;
    float _700 = (-0.0) - (cbMtdParam._m0[26u].x * _693);
    float _701 = fract(_689);
    float _703 = fract(_689 + 0.5);
    float _714 = abs((_701 * 2.0) + (-1.0));
    vec4 _731 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_701 * _700) + _631) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_698 * _701) + _632) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _735 = _731.z;
    vec4 _736 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_703 * _700) + _631) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_698 * _703) + _632) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _747 = ((_736.x - _733) * _714) + _733;
    float _748 = ((_736.y - _734) * _714) + _734;
    float _749 = ((_736.z - _735) * _714) + _735;
    float _763 = (cbMtdParam._m0[31u].x * _421) + _426;
    float _764 = (cbMtdParam._m0[31u].y * _421) + _427;
    float _767 = _688 * cbMtdParam._m0[25u].z;
    float _768 = _697 * cbMtdParam._m0[25u].y;
    float _770 = (-0.0) - (cbMtdParam._m0[25u].y * _693);
    float _771 = fract(_767);
    float _773 = fract(_767 + 0.5);
    float _784 = abs((_771 * 2.0) + (-1.0));
    vec4 _801 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_771 * _770) + _763) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_768 * _771) + _764) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    vec4 _806 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_773 * _770) + _763) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_768 * _773) + _764) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _840 = (((((cbMtdParam._m0[16u].x - cbMtdParam._m0[18u].x) * _747) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].x) * (((_806.x - _801.x) * _784) + _801.x)) + (_747 * cbMtdParam._m0[17u].x);
    float _843 = (((((cbMtdParam._m0[16u].y - cbMtdParam._m0[18u].y) * _748) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].y) * (((_806.y - _801.y) * _784) + _801.y)) + (_748 * cbMtdParam._m0[17u].y);
    float _846 = ((((cbMtdParam._m0[28u].x * _749) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_806.z - _801.z) * _784) + _801.z)) + (_749 * cbMtdParam._m0[17u].z);
    float _850 = _840 - (_840 * _618);
    float _851 = _843 - (_843 * _618);
    float _852 = _846 - (_846 * _618);
    float _857 = (POSITION_1.w - cbMtdParam._m0[26u].w) * (1.0 / cbMtdParam._m0[26u].z);
    float _4376 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _868 = (cbMtdParam._m0[32u].z * _421) + _426;
    float _869 = (cbMtdParam._m0[32u].w * _421) + _427;
    vec4 _882 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_868 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_869 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _884 = _882.x;
    float _885 = _882.y;
    float _886 = _882.z;
    vec4 _908 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _868) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _869) + cbTextureTilingScale._m0[7u].w));
    float _948 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].x) * (((((_884 * cbMtdParam._m0[11u].x) - _850) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _884) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].x) * _908.x)) * _858) + _850);
    float _950 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].y) * (((((_885 * cbMtdParam._m0[11u].y) - _851) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _885) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].y) * _908.y)) * _858) + _851);
    float _952 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].z) * (((((_886 * cbMtdParam._m0[11u].z) - _852) + ((((cbMtdParam._m0[28u].y * _886) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _908.z)) * _858) + _852);
    float _4387 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _959 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _969 = _318 / cbMtdParam._m0[22u].w;
    float _4398 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _970 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _971 = _449 * 0.23999999463558197021484375;
    float _973 = _449 * (-0.20000000298023223876953125);
    float _984 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _985 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _994 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].z * _421) + _971) + _984) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[34u].w * _421) + _973) + _985) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1010 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_984 + _971) + (cbMtdParam._m0[35u].z * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_985 + _973) + (cbMtdParam._m0[35u].w * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1030 = (((_491.x + (-0.5)) * 0.5) + _476.x) + (((_994.x + (-1.0)) + _1010.x) * cbMtdParam._m0[24u].y);
    float _1031 = (((_491.y + (-0.5)) * 0.5) + _476.y) + (((_994.y + (-1.0)) + _1010.y) * cbMtdParam._m0[24u].y);
    float _1036 = ((_565.x - _1030) * _970) + _1030;
    float _1037 = ((_565.y - _1031) * _970) + _1031;
    float _1039 = _318 / cbMtdParam._m0[22u].y;
    float _4409 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1040 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _1056 = ((((_959 * (0.5 - _443)) + _443) + (((_1036 + (-0.5)) + ((0.5 - _1036) * _1040)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1057 = ((((_959 * (0.5 - _444)) + _444) + (((_1037 + (-0.5)) + ((0.5 - _1037) * _1040)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1058 = dot(vec2(_1056, _1057), vec2(_1056, _1057));
    float _4420 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1063 = sqrt(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))));
    float _1065 = cbMtdParam._m0[23u].w * _347;
    float _4431 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1072 = cbMtdParam._m0[21u].w * _347;
    float _4442 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * cbMtdParam._m0[26u].y;
    float _4453 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1075 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _1080 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1085 = _1056 - (_1080 * _1056);
    float _1086 = _1057 - (_1080 * _1057);
    float _1087 = (_1080 * (1.0 - _1063)) + _1063;
    float _1106 = fma(_1063, _235, fma(_1057, _242, _1056 * _228));
    float _1109 = fma(_1063, _236, fma(_1057, _243, _1056 * _229));
    float _1112 = fma(_1063, _237, fma(_1057, _244, _1056 * _230));
    float _1116 = inversesqrt(dot(vec3(_1106, _1109, _1112), vec3(_1106, _1109, _1112)));
    float _1117 = _1116 * _1106;
    float _1118 = _1116 * _1109;
    float _1119 = _1116 * _1112;
    float _1122 = fma(_1087, _235, fma(_1086, _242, _1085 * _228));
    float _1125 = fma(_1087, _236, fma(_1086, _243, _1085 * _229));
    float _1128 = fma(_1087, _237, fma(_1086, _244, _1085 * _230));
    float _1132 = inversesqrt(dot(vec3(_1122, _1125, _1128), vec3(_1122, _1125, _1128)));
    float _1133 = _1132 * _1122;
    float _1134 = _1132 * _1125;
    float _1135 = _1132 * _1128;
    float _4464 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _1136 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4486 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4497 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1153 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1202 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1193);
    float _1203 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1193);
    float _1204 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1193);
    float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
    float _1209 = _1202 * _1208;
    float _1210 = _1203 * _1208;
    float _1211 = _1204 * _1208;
    float _1216 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1217 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1219 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1228 = (_1219.x * 2.0) + (-1.0);
    float _1229 = (_1219.y * 2.0) + (-1.0);
    float _1230 = (_1219.z * 2.0) + (-1.0);
    float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
    float _1245 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1219.w;
    float _1252 = (((_1228 * _1234) - _1117) * _1245) + _1117;
    float _1253 = (((_1229 * _1234) - _1118) * _1245) + _1118;
    float _1254 = (((_1230 * _1234) - _1119) * _1245) + _1119;
    float _1272 = fma(_1254, cbSceneParam._m0[5u].z, fma(_1253, cbSceneParam._m0[5u].y, _1252 * cbSceneParam._m0[5u].x));
    float _1275 = fma(_1254, cbSceneParam._m0[6u].z, fma(_1253, cbSceneParam._m0[6u].y, _1252 * cbSceneParam._m0[6u].x));
    float _1278 = fma(_1254, cbSceneParam._m0[7u].z, fma(_1253, cbSceneParam._m0[7u].y, _1252 * cbSceneParam._m0[7u].x));
    uint _1291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1292 = _1291 + 9u;
    uint _1293 = _1292 + uint(cbMatDynParam._m0[0u].w);
    float _1299 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * cbInstanceData._m0[_1293].x;
    float _1300 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * cbInstanceData._m0[_1293].y;
    float _1301 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * cbInstanceData._m0[_1293].z;
    float _4508 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _1302 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _4519 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _1303 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _1304 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    vec4 _1313 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1216, cbSceneParam._m0[86u].y * _1217));
    float _1316 = _1313.x * TEXCOORD_3.w;
    float _1320 = abs(dot(vec3(_1209, _1210, _1211), vec3(_1252, _1253, _1254)));
    float _4541 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _1333 = dot(vec3(_1133, _1134, _1135), vec3(_1209, _1210, _1211)) * 2.0;
    float _1337 = (_1333 * _1133) - _1209;
    float _1338 = (_1333 * _1134) - _1210;
    float _1339 = (_1333 * _1135) - _1211;
    float _1343 = abs(dot(vec3(_1209, _1210, _1211), vec3(_1133, _1134, _1135)));
    float _4552 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
    float _1345 = sqrt(_1136);
    float _1357 = exp2((_1345 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1345 * 3.0));
    float _1388 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1392 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1396 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1692;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1421 = fma(_1396, cbModelParam._m0[26u].z, fma(_1392, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1388));
        float _1425 = fma(_1396, cbModelParam._m0[27u].z, fma(_1392, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1388));
        float _1429 = fma(_1396, cbModelParam._m0[28u].z, fma(_1392, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1388));
        float _1451 = _1388 + _1133;
        float _1452 = _1392 + _1134;
        float _1453 = _1396 + _1135;
        float _1463 = fma(_1453, cbModelParam._m0[26u].z, fma(_1452, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1451)) - _1421;
        float _1464 = fma(_1453, cbModelParam._m0[27u].z, fma(_1452, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1451)) - _1425;
        float _1465 = fma(_1453, cbModelParam._m0[28u].z, fma(_1452, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1451)) - _1429;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1481 = ((_1469 * _1463) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1421 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1469 * _1464) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1425 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1465) / cbModelParam._m0[34u].z) + ((((((_1429 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1520 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1486.x + (-0.5));
        float _1522 = _1520 * (_1486.y + (-0.5));
        float _1523 = _1520 * (_1486.z + (-0.5));
        float _1530 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1493.x + (-0.5));
        float _1532 = _1530 * (_1493.y + (-0.5));
        float _1533 = _1530 * (_1493.z + (-0.5));
        float _1540 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1500.x + (-0.5));
        float _1542 = _1540 * (_1500.y + (-0.5));
        float _1543 = _1540 * (_1500.z + (-0.5));
        float _1550 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1507.x + (-0.5));
        float _1552 = _1550 * (_1507.y + (-0.5));
        float _1553 = _1550 * (_1507.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1574 = (dot(vec3(_1133, _1134, _1135), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1584 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4600 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1586 + 1.0))) + _1591) * _1554;
        float _1601 = _1522 * 0.5;
        float _1602 = _1532 * 0.5;
        float _1603 = _1542 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1133, _1134, _1135), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4633 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1628 + 1.0))) + _1633) * _1555;
        float _1643 = _1523 * 0.5;
        float _1644 = _1533 * 0.5;
        float _1645 = _1543 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_1133, _1134, _1135), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4644 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4655 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4666 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_1670 + 1.0))) + _1675) * _1556;
        _1692 = _1523;
        _1694 = _1522;
        _1695 = _1521;
        _1696 = _1533;
        _1697 = _1532;
        _1698 = _1531;
        _1699 = _1543;
        _1700 = _1542;
        _1701 = _1541;
        _1702 = _1556;
        _1703 = _1555;
        _1704 = _1554;
        _1705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1706 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1693;
        _1694 = _1693;
        _1695 = _1693;
        _1696 = _1693;
        _1697 = _1693;
        _1698 = _1693;
        _1699 = _1693;
        _1700 = _1693;
        _1701 = _1693;
        _1702 = _1693;
        _1703 = _1693;
        _1704 = _1693;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1998;
    float _1999;
    float _2000;
    float _2001;
    float _2002;
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1731 = fma(_1396, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388));
        float _1735 = fma(_1396, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388));
        float _1739 = fma(_1396, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388));
        float _1761 = _1388 + _1133;
        float _1762 = _1392 + _1134;
        float _1763 = _1396 + _1135;
        float _1773 = fma(_1763, cbModelParam._m0[30u].z, fma(_1762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1761)) - _1731;
        float _1774 = fma(_1763, cbModelParam._m0[31u].z, fma(_1762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1761)) - _1735;
        float _1775 = fma(_1763, cbModelParam._m0[32u].z, fma(_1762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1761)) - _1739;
        float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
        float _1791 = ((_1779 * _1773) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1731 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1792 = ((_1779 * _1774) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1735 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1793 = ((_1779 * _1775) / cbModelParam._m0[35u].z) + ((((((_1739 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1795 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1791, _1792, _1793), 0.0);
        vec4 _1802 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1791, _1792, _1793), 0.0);
        vec4 _1809 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1791, _1792, _1793), 0.0);
        vec4 _1816 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1791, _1792, _1793), 0.0);
        float _1828 = exp2((_1795.w + (-0.5)) * 20.0) * 2.0;
        float _1829 = _1828 * (_1795.x + (-0.5));
        float _1830 = _1828 * (_1795.y + (-0.5));
        float _1831 = _1828 * (_1795.z + (-0.5));
        float _1838 = exp2((_1802.w + (-0.5)) * 20.0) * 2.0;
        float _1839 = _1838 * (_1802.x + (-0.5));
        float _1840 = _1838 * (_1802.y + (-0.5));
        float _1841 = _1838 * (_1802.z + (-0.5));
        float _1848 = exp2((_1809.w + (-0.5)) * 20.0) * 2.0;
        float _1849 = _1848 * (_1809.x + (-0.5));
        float _1850 = _1848 * (_1809.y + (-0.5));
        float _1851 = _1848 * (_1809.z + (-0.5));
        float _1858 = exp2((_1816.w + (-0.5)) * 20.0) * 2.0;
        float _1859 = _1858 * (_1816.x + (-0.5));
        float _1860 = _1858 * (_1816.y + (-0.5));
        float _1861 = _1858 * (_1816.z + (-0.5));
        float _1862 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1863 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1864 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1865 = _1829 * 0.5;
        float _1866 = _1839 * 0.5;
        float _1867 = _1849 * 0.5;
        float _1868 = dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867));
        float _1873 = (_1868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1868);
        float _1881 = (dot(vec3(_1133, _1134, _1135), vec3(_1873 * _1865, _1873 * _1866, _1873 * _1867)) + 1.0) * 0.5;
        float _4707 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1890 = sqrt(((_1866 * _1866) + (_1865 * _1865)) + (_1867 * _1867)) / (_1862 + 9.9999997473787516355514526367188e-06);
        float _4718 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _1892 = _1891 * 2.0;
        float _1896 = (1.0 - _1891) / (_1891 + 1.0);
        float _4729 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _1906 = ((((1.0 - _1897) * (_1892 + 2.0)) * exp2(log2(isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_1892 + 1.0))) + _1897) * _1862;
        float _1907 = _1830 * 0.5;
        float _1908 = _1840 * 0.5;
        float _1909 = _1850 * 0.5;
        float _1910 = dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909));
        float _1915 = (_1910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1910);
        float _1923 = (dot(vec3(_1133, _1134, _1135), vec3(_1915 * _1907, _1915 * _1908, _1915 * _1909)) + 1.0) * 0.5;
        float _4740 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1932 = sqrt(((_1908 * _1908) + (_1907 * _1907)) + (_1909 * _1909)) / (_1863 + 9.9999997473787516355514526367188e-06);
        float _4751 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _1934 = _1933 * 2.0;
        float _1938 = (1.0 - _1933) / (_1933 + 1.0);
        float _4762 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _1948 = ((((1.0 - _1939) * (_1934 + 2.0)) * exp2(log2(isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_1934 + 1.0))) + _1939) * _1863;
        float _1949 = _1831 * 0.5;
        float _1950 = _1841 * 0.5;
        float _1951 = _1851 * 0.5;
        float _1952 = dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951));
        float _1957 = (_1952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1952);
        float _1965 = (dot(vec3(_1133, _1134, _1135), vec3(_1957 * _1949, _1957 * _1950, _1957 * _1951)) + 1.0) * 0.5;
        float _4773 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1974 = sqrt(((_1950 * _1950) + (_1949 * _1949)) + (_1951 * _1951)) / (_1864 + 9.9999997473787516355514526367188e-06);
        float _4784 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _1976 = _1975 * 2.0;
        float _1980 = (1.0 - _1975) / (_1975 + 1.0);
        float _4795 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _1990 = ((((1.0 - _1981) * (_1976 + 2.0)) * exp2(log2(isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_1976 + 1.0))) + _1981) * _1864;
        _1998 = _1831;
        _1999 = _1830;
        _2000 = _1829;
        _2001 = _1841;
        _2002 = _1840;
        _2003 = _1839;
        _2004 = _1851;
        _2005 = _1850;
        _2006 = _1849;
        _2007 = _1864;
        _2008 = _1863;
        _2009 = _1862;
        _2010 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)));
        _2011 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0)));
        _2012 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)));
    }
    else
    {
        _1998 = _1693;
        _1999 = _1693;
        _2000 = _1693;
        _2001 = _1693;
        _2002 = _1693;
        _2003 = _1693;
        _2004 = _1693;
        _2005 = _1693;
        _2006 = _1693;
        _2007 = _1693;
        _2008 = _1693;
        _2009 = _1693;
        _2010 = 0.0;
        _2011 = 0.0;
        _2012 = 0.0;
    }
    float _2022 = (cbModelParam._m0[1u].x * (_2010 - _1705)) + _1705;
    float _2023 = (cbModelParam._m0[1u].x * (_2011 - _1706)) + _1706;
    float _2024 = (cbModelParam._m0[1u].x * (_2012 - _1707)) + _1707;
    float _2045 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2022));
    float _2066 = _1337 * 0.5;
    float _2067 = _1338 * 0.5;
    float _2068 = _1339 * 0.5;
    float _2069 = dot(vec4(_2066, _2067, _2068, 1.0), vec4(_2000, _2003, _2006, _2009));
    float _2072 = dot(vec4(_2066, _2067, _2068, 1.0), vec4(_1999, _2002, _2005, _2008));
    float _2075 = dot(vec4(_2066, _2067, _2068, 1.0), vec4(_1998, _2001, _2004, _2007));
    float _2109;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2082 = dot(vec4(_2066, _2067, _2068, 1.0), vec4(_1692, _1696, _1699, _1702));
        float _2086 = dot(vec4(_2066, _2067, _2068, 1.0), vec4(_1694, _1697, _1700, _1703));
        float _2090 = dot(vec4(_2066, _2067, _2068, 1.0), vec4(_1695, _1698, _1701, _1704));
        float _2097 = dot(vec4(cbModelParam._m0[39u]), vec4(_2066, _2067, _2068, 1.0));
        _2109 = dot(vec3(isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0)), isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0)), isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2097) ? 0.0 : (isnan(0.0) ? _2097 : max(0.0, _2097))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2109 = 1.0;
    }
    float _2120;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2111 = dot(vec4(cbModelParam._m0[40u]), vec4(_2066, _2067, _2068, 1.0));
        _2120 = dot(vec3(isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0)), isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0)), isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2111) ? 0.0 : (isnan(0.0) ? _2111 : max(0.0, _2111))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2120 = 1.0;
    }
    float _2124 = (_2120 * cbModelParam._m0[1u].x) + (_2109 * (1.0 - cbModelParam._m0[1u].x));
    float _2134 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1136);
    float _2135 = isnan(_2134) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2134 : min(cbModelParam._m0[25u].z, _2134));
    float _2215;
    float _2217;
    float _2219;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2182 = fma(_1396, cbModelParam._m0[13u].z, fma(_1392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1388)) + cbModelParam._m0[13u].w;
        float _2186 = fma(_1396, cbModelParam._m0[14u].z, fma(_1392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1388)) + cbModelParam._m0[14u].w;
        float _2190 = fma(_1396, cbModelParam._m0[15u].z, fma(_1392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1388)) + cbModelParam._m0[15u].w;
        float _2193 = fma(_1339, cbModelParam._m0[13u].z, fma(_1338, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1337));
        float _2196 = fma(_1339, cbModelParam._m0[14u].z, fma(_1338, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1337));
        float _2199 = fma(_1339, cbModelParam._m0[15u].z, fma(_1338, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1337));
        float _2227;
        if (_2193 > 0.0)
        {
            _2227 = abs((1.0 - _2182) / _2193);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2193 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2182 + 1.0) / _2193);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2227 = frontier_phi_14_12_ladder;
        }
        float _2396;
        if (_2196 > 0.0)
        {
            _2396 = abs((1.0 - _2186) / _2196);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2186 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2396 = frontier_phi_23_19_ladder;
        }
        float _2842;
        if (_2199 > 0.0)
        {
            _2842 = abs((1.0 - _2190) / _2199);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2190 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2842 = frontier_phi_35_30_ladder;
        }
        float _2844 = isnan(_2396) ? _2227 : (isnan(_2227) ? _2396 : min(_2227, _2396));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _2193) + _2182;
        float _2850 = (_2845 * _2196) + _2186;
        float _2851 = (_2845 * _2199) + _2190;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2854 = (-1.0) - _2852;
        float _2856 = _2852 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2851 > _2856) || ((_2851 < _2854) || ((_2850 > _2856) || ((_2850 < _2854) || ((_2849 < _2854) || (_2849 > _2856))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2851, cbModelParam._m0[9u].z, fma(_2850, cbModelParam._m0[9u].y, _2849 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2851, cbModelParam._m0[10u].z, fma(_2850, cbModelParam._m0[10u].y, _2849 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2851, cbModelParam._m0[11u].z, fma(_2850, cbModelParam._m0[11u].y, _2849 * cbModelParam._m0[11u].x))), _2135);
            frontier_phi_13_35_ladder = _3224.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _3224.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _3224.x * cbModelParam._m0[1u].y;
        }
        _2215 = frontier_phi_13_35_ladder_2;
        _2217 = frontier_phi_13_35_ladder_1;
        _2219 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1337, _1338, _1339), _2135);
        _2215 = _2203.x * cbModelParam._m0[1u].y;
        _2217 = _2203.y * cbModelParam._m0[1u].y;
        _2219 = _2203.z * cbModelParam._m0[1u].y;
    }
    float _2223 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1136);
    float _2224 = isnan(_2223) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2223 : min(cbModelParam._m0[25u].w, _2223));
    float _2313;
    float _2315;
    float _2317;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2277 = fma(_1396, cbModelParam._m0[21u].z, fma(_1392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1388)) + cbModelParam._m0[21u].w;
        float _2281 = fma(_1396, cbModelParam._m0[22u].z, fma(_1392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1388)) + cbModelParam._m0[22u].w;
        float _2285 = fma(_1396, cbModelParam._m0[23u].z, fma(_1392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1388)) + cbModelParam._m0[23u].w;
        float _2288 = fma(_1339, cbModelParam._m0[21u].z, fma(_1338, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1337));
        float _2291 = fma(_1339, cbModelParam._m0[22u].z, fma(_1338, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1337));
        float _2294 = fma(_1339, cbModelParam._m0[23u].z, fma(_1338, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1337));
        float _2401;
        if (_2288 > 0.0)
        {
            _2401 = abs((1.0 - _2277) / _2288);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2288 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2277 + 1.0) / _2288);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2401 = frontier_phi_25_21_ladder;
        }
        float _2869;
        if (_2291 > 0.0)
        {
            _2869 = abs((1.0 - _2281) / _2291);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2291 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2281 + 1.0) / _2291);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2869 = frontier_phi_37_32_ladder;
        }
        float _3376;
        if (_2294 > 0.0)
        {
            _3376 = abs((1.0 - _2285) / _2294);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_2294 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_2285 + 1.0) / _2294);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _3376 = frontier_phi_49_44_ladder;
        }
        float _3378 = isnan(_2869) ? _2401 : (isnan(_2401) ? _2869 : min(_2401, _2869));
        float _3379 = isnan(_3376) ? _3378 : (isnan(_3378) ? _3376 : min(_3378, _3376));
        float _3383 = (_3379 * _2288) + _2277;
        float _3384 = (_3379 * _2291) + _2281;
        float _3385 = (_3379 * _2294) + _2285;
        float _3386 = _3379 * 9.9999997473787516355514526367188e-05;
        float _3387 = (-1.0) - _3386;
        float _3389 = _3386 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_3385 > _3389) || ((_3385 < _3387) || ((_3384 > _3389) || ((_3384 < _3387) || ((_3383 < _3387) || (_3383 > _3389))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3385, cbModelParam._m0[17u].z, fma(_3384, cbModelParam._m0[17u].y, _3383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3385, cbModelParam._m0[18u].z, fma(_3384, cbModelParam._m0[18u].y, _3383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3385, cbModelParam._m0[19u].z, fma(_3384, cbModelParam._m0[19u].y, _3383 * cbModelParam._m0[19u].x))), _2224);
            frontier_phi_22_49_ladder = _3506.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _3506.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _3506.x * cbModelParam._m0[1u].z;
        }
        _2313 = frontier_phi_22_49_ladder_2;
        _2315 = frontier_phi_22_49_ladder_1;
        _2317 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _2297 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1337, _1338, _1339), _2224);
        _2313 = _2297.x * cbModelParam._m0[1u].z;
        _2315 = _2297.y * cbModelParam._m0[1u].z;
        _2317 = _2297.z * cbModelParam._m0[1u].z;
    }
    float _2329 = ((((1.0 - _1357) * ((_1345 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1357 * _1345)) * _1316;
    float _2330 = _2329 * ((cbModelParam._m0[1u].w * (_2313 - _2215)) + _2215);
    float _2331 = _2329 * ((cbModelParam._m0[1u].w * (_2315 - _2217)) + _2217);
    float _2332 = _2329 * ((cbModelParam._m0[1u].w * (_2317 - _2219)) + _2219);
    float _2335 = fma(_2332, cbSceneParam._m0[89u].z, fma(_2331, cbSceneParam._m0[89u].y, _2330 * cbSceneParam._m0[89u].x));
    float _2338 = fma(_2332, cbSceneParam._m0[90u].z, fma(_2331, cbSceneParam._m0[90u].y, _2330 * cbSceneParam._m0[90u].x));
    float _2341 = fma(_2332, cbSceneParam._m0[91u].z, fma(_2331, cbSceneParam._m0[91u].y, _2330 * cbSceneParam._m0[91u].x));
    float _2375 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2379 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2383 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2387 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2388 = _2375 / _2387;
    float _2389 = _2379 / _2387;
    float _2390 = _2383 / _2387;
    float _2536;
    float _2537;
    float _2538;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2417 = ((uint(_2390 > cbSceneParam._m0[59u].y) + uint(_2390 > cbSceneParam._m0[59u].x)) + uint(_2390 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2418 = _2417 + 43u;
        uint _2426 = _2417 + 44u;
        uint _2434 = _2417 + 45u;
        uint _2442 = _2417 + 46u;
        float _2453 = fma(_2387, cbSceneParam._m0[_2418].w, fma(_2383, cbSceneParam._m0[_2418].z, fma(_2379, cbSceneParam._m0[_2418].y, _2375 * cbSceneParam._m0[_2418].x)));
        float _2457 = fma(_2387, cbSceneParam._m0[_2426].w, fma(_2383, cbSceneParam._m0[_2426].z, fma(_2379, cbSceneParam._m0[_2426].y, _2375 * cbSceneParam._m0[_2426].x)));
        float _2465 = fma(_2387, cbSceneParam._m0[_2442].w, fma(_2383, cbSceneParam._m0[_2442].z, fma(_2379, cbSceneParam._m0[_2442].y, _2375 * cbSceneParam._m0[_2442].x)));
        float _2469 = cbSceneParam._m0[33u].z * _2465;
        float _2471 = cbSceneParam._m0[33u].w * _2465;
        float _2474 = fma(_2387, cbSceneParam._m0[_2434].w, fma(_2383, cbSceneParam._m0[_2434].z, fma(_2379, cbSceneParam._m0[_2434].y, _2375 * cbSceneParam._m0[_2434].x))) / _2465;
        float _2522 = (cbSceneParam._m0[33u].x - sqrt(((_2389 * _2389) + (_2388 * _2388)) + (_2390 * _2390))) * cbSceneParam._m0[33u].y;
        float _4921 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2529 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2469 + _2453) / _2465, (_2471 + _2457) / _2465), _2474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2471 + _2453) / _2465, (_2457 - _2469) / _2465), _2474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2453 - _2469) / _2465, (_2457 - _2471) / _2465), _2474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2453 - _2471) / _2465, (_2469 + _2457) / _2465), _2474), 0.0)).x), vec4(0.25)));
        _2536 = 1.0 - (_2529 * cbSceneParam._m0[34u].x);
        _2537 = 1.0 - (_2529 * cbSceneParam._m0[34u].y);
        _2538 = 1.0 - (_2529 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2536 = 1.0;
        _2537 = 1.0;
        _2538 = 1.0;
    }
    float _2602;
    float _2604;
    float _2606;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2590 = fma(_2387, cbSceneParam._m0[63u].w, fma(_2383, cbSceneParam._m0[63u].z, fma(_2379, cbSceneParam._m0[63u].y, _2375 * cbSceneParam._m0[63u].x)));
        float _2591 = fma(_2387, cbSceneParam._m0[60u].w, fma(_2383, cbSceneParam._m0[60u].z, fma(_2379, cbSceneParam._m0[60u].y, _2375 * cbSceneParam._m0[60u].x))) / _2590;
        float _2592 = fma(_2387, cbSceneParam._m0[61u].w, fma(_2383, cbSceneParam._m0[61u].z, fma(_2379, cbSceneParam._m0[61u].y, _2375 * cbSceneParam._m0[61u].x))) / _2590;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2591 >= cbSceneParam._m0[64u].x) && (_2592 >= cbSceneParam._m0[64u].y)) && (_2591 <= cbSceneParam._m0[64u].z)) && (_2592 <= cbSceneParam._m0[64u].w))
        {
            float _2882 = fma(_2387, cbSceneParam._m0[62u].w, fma(_2383, cbSceneParam._m0[62u].z, fma(_2379, cbSceneParam._m0[62u].y, _2375 * cbSceneParam._m0[62u].x))) / _2590;
            float _2886 = isnan(cbSceneParam._m0[41u].w) ? _2882 : (isnan(_2882) ? cbSceneParam._m0[41u].w : max(_2882, cbSceneParam._m0[41u].w));
            float _2929 = (cbSceneParam._m0[33u].x - sqrt(((_2389 * _2389) + (_2388 * _2388)) + (_2390 * _2390))) * cbSceneParam._m0[33u].y;
            float _4937 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
            float _2936 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2591, cbSceneParam._m0[33u].w + _2592), _2886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2591, _2592 - cbSceneParam._m0[33u].z), _2886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2591 - cbSceneParam._m0[33u].z, _2592 - cbSceneParam._m0[33u].w), _2886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2591 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2592), _2886), 0.0)).x), vec4(0.25)));
            float _2940 = 1.0 - (_2936 * cbSceneParam._m0[34u].x);
            float _2941 = 1.0 - (_2936 * cbSceneParam._m0[34u].y);
            float _2942 = 1.0 - (_2936 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2942) ? _2538 : (isnan(_2538) ? _2942 : min(_2538, _2942));
            frontier_phi_34_33_ladder_1 = isnan(_2941) ? _2537 : (isnan(_2537) ? _2941 : min(_2537, _2941));
            frontier_phi_34_33_ladder_2 = isnan(_2940) ? _2536 : (isnan(_2536) ? _2940 : min(_2536, _2940));
        }
        else
        {
            frontier_phi_34_33_ladder = _2538;
            frontier_phi_34_33_ladder_1 = _2537;
            frontier_phi_34_33_ladder_2 = _2536;
        }
        _2602 = frontier_phi_34_33_ladder_2;
        _2604 = frontier_phi_34_33_ladder_1;
        _2606 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2602 = _2536;
        _2604 = _2537;
        _2606 = _2538;
    }
    uvec4 _2611 = floatBitsToUint(cbInstanceData._m0[_1291 + 5u]);
    uint _2613 = _2611.x * 14u;
    uint _2614 = _2613 + 13u;
    float _2619 = _1316 + (-1.0);
    float _2622 = (cbLight._m0[_2614].x * _2619) + 1.0;
    float _2623 = (cbLight._m0[_2614].y * _2619) + 1.0;
    uint _2624 = _2613 + 5u;
    float _2630 = isnan(1.0) ? _2623 : (isnan(_2623) ? 1.0 : min(_2623, 1.0));
    uint _2634 = _2613 + 4u;
    float _2643 = isnan(1.0) ? _2622 : (isnan(_2622) ? 1.0 : min(_2622, 1.0));
    uint _2647 = _2613 | 1u;
    float _2658 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_1252, _1253, _1254));
    float _2661 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_1252, _1253, _1254));
    float _4973 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _4984 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2666 = (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * 0.3183098733425140380859375;
    float _2668 = (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * 0.3183098733425140380859375;
    float _2675 = ((cbLight._m0[_2624].x * _2630) * _2668) + (((cbLight._m0[_2634].x * _2602) * _2643) * _2666);
    float _2676 = ((_2630 * cbLight._m0[_2624].y) * _2668) + (((cbLight._m0[_2634].y * _2604) * _2643) * _2666);
    float _2677 = ((_2630 * cbLight._m0[_2624].z) * _2668) + (((cbLight._m0[_2634].z * _2606) * _2643) * _2666);
    uint _2679 = _2613 + 8u;
    float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _1136) * 0.949999988079071044921875);
    float _2693 = _2692 * _2692;
    float _2694 = cbLight._m0[_2613].x + _1209;
    float _2695 = cbLight._m0[_2613].y + _1210;
    float _2696 = cbLight._m0[_2613].z + _1211;
    float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
    float _2701 = _2700 * _2694;
    float _2702 = _2700 * _2695;
    float _2703 = _2700 * _2696;
    float _2704 = dot(vec3(_1252, _1253, _1254), vec3(cbLight._m0[_2613].xyz));
    float _4995 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
    float _2708 = dot(vec3(_1252, _1253, _1254), vec3(_1209, _1210, _1211));
    float _5006 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
    float _2712 = dot(vec3(_1252, _1253, _1254), vec3(_2701, _2702, _2703));
    float _5017 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2701, _2702, _2703));
    float _5028 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2693 * _2693;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2736 = 1.0 - _2693;
    float _2747 = (0.5 / (((_2711 * ((_2707 * _2736) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2736) + _2693) * _2707))) * _2707;
    float _5039 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2749 = (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    uint _2763 = _2613 + 9u;
    float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _1136) * 0.949999988079071044921875);
    float _2775 = _2774 * _2774;
    float _2776 = cbLight._m0[_2647].x + _1209;
    float _2777 = cbLight._m0[_2647].y + _1210;
    float _2778 = cbLight._m0[_2647].z + _1211;
    float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
    float _2783 = _2782 * _2776;
    float _2784 = _2782 * _2777;
    float _2785 = _2782 * _2778;
    float _2786 = dot(vec3(_1252, _1253, _1254), vec3(cbLight._m0[_2647].xyz));
    float _5050 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
    float _2790 = dot(vec3(_1252, _1253, _1254), vec3(_2783, _2784, _2785));
    float _5061 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
    float _2794 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2783, _2784, _2785));
    float _5072 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2798 = _2775 * _2775;
    float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
    float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2812 = 1.0 - _2775;
    float _2822 = (0.5 / (((_2711 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2812) + _2775) * _2789))) * _2789;
    float _5083 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
    float _2834 = (((_2811 * cbLight._m0[_2763].x) * _2824) * _2630) + ((((cbLight._m0[_2679].x * _2602) * _2735) * _2749) * _2643);
    float _2835 = (((_2811 * cbLight._m0[_2763].y) * _2824) * _2630) + ((((cbLight._m0[_2679].y * _2604) * _2735) * _2749) * _2643);
    float _2836 = (((_2811 * cbLight._m0[_2763].z) * _2824) * _2630) + ((((cbLight._m0[_2679].z * _2606) * _2735) * _2749) * _2643);
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_2611.y == 0u)
    {
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.x;
        uint _2966 = uint((float(_2954.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1217) / _2955))) + floor(float(uint(cbSceneParam._m0[85u].x * _1216) / _2955)));
        float _2976 = (log2(_2390 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2977 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        uint _2980 = uint(isnan(14.0) ? _2977 : (isnan(_2977) ? 14.0 : min(_2977, 14.0)));
        uvec4 _2985 = texelFetch(g_lightClusterGridBuffer, int(((_2980 << 2u) + (_2966 << 6u)) >> 2u));
        uint _2986 = _2985.x;
        uint _2987 = _2954.z;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        if (((((1u << ((_2987 >> 4u) & 15u)) + 4294967295u) & _2986) == 0u) || ((_2987 & 240u) == 0u))
        {
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
        }
        else
        {
            float _3234;
            float _3236;
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3434 = 0.0;
            float _3435 = 0.0;
            float _3436 = 0.0;
            float _3437 = 0.0;
            float _3438 = 0.0;
            float _3439 = 0.0;
            uint _3440 = 0u;
            uint _3449;
            bool _3450;
            for (;;)
            {
                _3449 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3440 << 2u)) >> 2u)).x;
                _3450 = _3449 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_3450)
                {
                    frontier_phi_58_pred = _3437;
                    frontier_phi_58_pred_1 = _3436;
                    frontier_phi_58_pred_2 = _3435;
                    frontier_phi_58_pred_3 = _3434;
                    frontier_phi_58_pred_4 = _3438;
                    frontier_phi_58_pred_5 = _3439;
                }
                else
                {
                    float _3579;
                    float _3580;
                    float _3581;
                    float _3582;
                    float _3583;
                    float _3584;
                    uint _3585;
                    _3579 = _3434;
                    _3580 = _3435;
                    _3581 = _3436;
                    _3582 = _3437;
                    _3583 = _3438;
                    _3584 = _3439;
                    _3585 = _3449;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    float _3515;
                    float _3516;
                    for (;;)
                    {
                        uint _3589 = uint(findLSB(_3585)) + (_3440 << 5u);
                        uint _3586 = (_3585 + 4294967295u) & _3585;
                        uint _3591 = _3589 * 48u;
                        vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3591)).x, texelFetch(g_PointLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3591 + 3u)).x));
                        uint _3611 = (_3589 * 48u) + 4u;
                        vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3611)).x, texelFetch(g_PointLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3611 + 3u)).x));
                        uint _3630 = (_3589 * 48u) + 8u;
                        vec3 _3641 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3630)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 2u)).x));
                        float _3645 = _3605.x - _2388;
                        float _3646 = _3605.y - _2389;
                        float _3647 = _3605.z - _2390;
                        float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                        float _3651 = inversesqrt(_3648);
                        float _3652 = _3651 * _3645;
                        float _3653 = _3651 * _3646;
                        float _3654 = _3651 * _3647;
                        float _3655 = dot(vec3(_1272, _1275, _1278), vec3(_3652, _3653, _3654));
                        float _3660 = 1.0 - (_3648 * _3605.w);
                        float _5104 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3661 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3662 = sqrt(_3648) * _3624.w;
                        float _3665 = 1.39999997615814208984375 / (_3662 + 1.39999997615814208984375);
                        float _3666 = _3665 * _3665;
                        float _3669 = ((1.0 - _3666) * _3655) + _3666;
                        float _3672 = _3662 * _3662;
                        float _3676 = ((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3661) / ((_3672 * 0.699999988079071044921875) + 1.0);
                        float _3680 = (-0.0) - _2388;
                        float _3681 = (-0.0) - _2389;
                        float _3682 = (-0.0) - _2390;
                        float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                        float _3687 = _3686 * _3680;
                        float _3688 = _3686 * _3681;
                        float _3689 = _3686 * _3682;
                        float _3696 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                        float _3697 = 1.0 - _1345;
                        float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                        float _3705 = _3704 * _3704;
                        float _3706 = _3705 * _3705;
                        float _3707 = _3687 + _3652;
                        float _3708 = _3688 + _3653;
                        float _3709 = _3689 + _3654;
                        float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                        float _3717 = dot(vec3(_1272, _1275, _1278), vec3(_3687, _3688, _3689));
                        float _5120 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                        float _3720 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                        float _3721 = dot(vec3(_1272, _1275, _1278), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                        float _5131 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                        float _3724 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                        float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                        float _3729 = _3665 * _3705;
                        float _3730 = _3729 * _3729;
                        float _3733 = ((1.0 - _3730) * _3655) + _3730;
                        float _5142 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                        float _3734 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                        float _3735 = 1.0 - _3705;
                        float _3745 = (0.5 / (((_3734 * ((_3720 * _3735) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3734 * _3735) + _3705) * _3720))) * _3734;
                        float _5153 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                        float _3756 = (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0)))) / ((_3728 * _3728) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125))) * _3661;
                        _3514 = (_3676 * _3624.x) + _3582;
                        _3515 = (_3676 * _3624.y) + _3583;
                        _3516 = (_3676 * _3624.z) + _3584;
                        _3511 = (_3756 * _3641.x) + _3579;
                        _3512 = (_3756 * _3641.y) + _3580;
                        _3513 = (_3756 * _3641.z) + _3581;
                        if (_3586 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3579 = _3511;
                            _3580 = _3512;
                            _3581 = _3513;
                            _3582 = _3514;
                            _3583 = _3515;
                            _3584 = _3516;
                            _3585 = _3586;
                        }
                    }
                    frontier_phi_58_pred = _3514;
                    frontier_phi_58_pred_1 = _3513;
                    frontier_phi_58_pred_2 = _3512;
                    frontier_phi_58_pred_3 = _3511;
                    frontier_phi_58_pred_4 = _3515;
                    frontier_phi_58_pred_5 = _3516;
                }
                _3240 = frontier_phi_58_pred;
                _3238 = frontier_phi_58_pred_1;
                _3236 = frontier_phi_58_pred_2;
                _3234 = frontier_phi_58_pred_3;
                _3242 = frontier_phi_58_pred_4;
                _3244 = frontier_phi_58_pred_5;
                uint _3441 = _3440 + 1u;
                if (_3441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3434 = _3234;
                    _3435 = _3236;
                    _3436 = _3238;
                    _3437 = _3240;
                    _3438 = _3242;
                    _3439 = _3244;
                    _3440 = _3441;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
        }
        uvec4 _3247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3248 = _3247.z;
        uint _3250 = (_3248 >> 8u) & 15u;
        float _3402;
        float _3404;
        float _3406;
        float _3408;
        float _3410;
        float _3412;
        if (((4294967295u << _3250) & _2986) == 0u)
        {
            _3402 = _3233;
            _3404 = _3235;
            _3406 = _3237;
            _3408 = _3239;
            _3410 = _3241;
            _3412 = _3243;
        }
        else
        {
            float _3427 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
            float _3428 = _3427 * _2388;
            float _3429 = _3427 * _2389;
            float _3430 = _3427 * _2390;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_3250 < ((_3248 >> 12u) & 15u))
            {
                float _3403;
                float _3405;
                float _3407;
                float _3409;
                float _3411;
                float _3413;
                float _3562 = _3233;
                float _3563 = _3235;
                float _3564 = _3237;
                float _3565 = _3239;
                float _3566 = _3241;
                float _3567 = _3243;
                uint _3568 = _3250;
                uint _3577;
                bool _3578;
                for (;;)
                {
                    _3577 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3568 << 2u)) >> 2u)).x;
                    _3578 = _3577 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_3578)
                    {
                        frontier_phi_64_pred = _3565;
                        frontier_phi_64_pred_1 = _3564;
                        frontier_phi_64_pred_2 = _3563;
                        frontier_phi_64_pred_3 = _3562;
                        frontier_phi_64_pred_4 = _3567;
                        frontier_phi_64_pred_5 = _3566;
                    }
                    else
                    {
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _4054;
                        float _4055;
                        float _4056;
                        float _4057;
                        float _4058;
                        float _4059;
                        float _3774 = _3562;
                        float _3775 = _3563;
                        float _3776 = _3564;
                        float _3777 = _3565;
                        float _3778 = _3566;
                        float _3779 = _3567;
                        uint _3780 = _3577;
                        uint _3781;
                        vec4 _3806;
                        float _3807;
                        vec4 _3822;
                        vec3 _3834;
                        vec4 _3849;
                        vec4 _3864;
                        float _3910;
                        bool _3911;
                        for (;;)
                        {
                            uint _3791 = ((_3568 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3780));
                            _3781 = (_3780 + 4294967295u) & _3780;
                            uint _3793 = _3791 * 40u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            _3807 = _3806.w;
                            uint _3809 = (_3791 * 40u) + 4u;
                            _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            uint _3824 = (_3791 * 40u) + 8u;
                            _3834 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x));
                            uint _3836 = (_3791 * 40u) + 16u;
                            _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3851 = (_3791 * 40u) + 20u;
                            _3864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 3u)).x));
                            uint _3866 = (_3791 * 40u) + 24u;
                            vec4 _3879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3866 + 3u)).x));
                            uint _3885 = (_3791 * 40u) + 28u;
                            vec4 _3898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 3u)).x));
                            _3910 = fma(_2390, _3898.z, fma(_2389, _3898.y, _3898.x * _2388)) + _3898.w;
                            _3911 = !((fma(_2390, _3879.z, fma(_2389, _3879.y, _3879.x * _2388)) + _3879.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_3911)
                            {
                                float _3938 = _3806.x - _2388;
                                float _3939 = _3806.y - _2389;
                                float _3940 = _3806.z - _2390;
                                float _3941 = dot(vec3(_3938, _3939, _3940), vec3(_3938, _3939, _3940));
                                float _3944 = inversesqrt(_3941);
                                float _3945 = _3944 * _3938;
                                float _3946 = _3944 * _3939;
                                float _3947 = _3944 * _3940;
                                float _3951 = 1.0 - (_3941 / (_3807 * _3807));
                                float _5164 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3952 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3956 = sqrt(_3941) * _3822.w;
                                float _3958 = 1.39999997615814208984375 / (_3956 + 1.39999997615814208984375);
                                float _3959 = _3958 * _3958;
                                float _3962 = ((1.0 - _3959) * dot(vec3(_3945, _3946, _3947), vec3(_1272, _1275, _1278))) + _3959;
                                float _3965 = _3956 * _3956;
                                float _3969 = (fma(_2390, _3849.z, fma(_2389, _3849.y, _3849.x * _2388)) + _3849.w) / _3910;
                                float _3970 = (fma(_2390, _3864.z, fma(_2389, _3864.y, _3864.x * _2388)) + _3864.w) / _3910;
                                float _3974 = 1.0 - dot(vec2(_3969, _3970), vec2(_3969, _3970));
                                float _5180 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3975 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3976 = _3975 * (((isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0))) * _3952) / ((_3965 * 0.699999988079071044921875) + 1.0));
                                float _3988 = exp2(log2(1.0 / ((_3965 * 3.5) + 5.0)) * 0.25);
                                float _3989 = 1.0 - _1345;
                                float _3996 = sqrt(1.0 - ((1.0 - (_3989 * _3989)) * (1.0 - (_3988 * _3988))));
                                float _3997 = _3996 * _3996;
                                float _3998 = _3997 * _3997;
                                float _3999 = _3945 - _3428;
                                float _4000 = _3946 - _3429;
                                float _4001 = _3947 - _3430;
                                float _4005 = inversesqrt(dot(vec3(_3999, _4000, _4001), vec3(_3999, _4000, _4001)));
                                float _4009 = dot(vec3(_1272, _1275, _1278), vec3((-0.0) - _3428, (-0.0) - _3429, (-0.0) - _3430));
                                float _5191 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4012 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                                float _4013 = dot(vec3(_1272, _1275, _1278), vec3(_4005 * _3999, _4005 * _4000, _4005 * _4001));
                                float _5202 = isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0));
                                float _4016 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
                                float _4020 = ((_4016 * _4016) * (_3998 + (-1.0))) + 1.0;
                                float _4021 = _3958 * _3997;
                                float _4022 = _4021 * _4021;
                                float _4028 = ((1.0 - _4022) * dot(vec3(_1272, _1275, _1278), vec3(_3945, _3946, _3947))) + _4022;
                                float _5213 = isnan(0.0) ? _4028 : (isnan(_4028) ? 0.0 : max(_4028, 0.0));
                                float _4029 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
                                float _4030 = 1.0 - _3997;
                                float _4040 = (0.5 / (((_4029 * ((_4012 * _4030) + _3997)) + 9.9999999392252902907785028219223e-09) + (((_4029 * _4030) + _3997) * _4012))) * _4029;
                                float _5224 = isnan(0.0) ? _4040 : (isnan(_4040) ? 0.0 : max(_4040, 0.0));
                                float _4050 = (_3975 * _3952) * (((_3998 * 3.1415927410125732421875) * (isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0)))) / ((_4020 * _4020) * ((_3965 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3976 * _3822.x;
                                frontier_phi_70_pred_1 = _4050 * _3834.z;
                                frontier_phi_70_pred_2 = _4050 * _3834.y;
                                frontier_phi_70_pred_3 = _4050 * _3834.x;
                                frontier_phi_70_pred_4 = _3976 * _3822.z;
                                frontier_phi_70_pred_5 = _3976 * _3822.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _4057 = frontier_phi_70_pred;
                            _4056 = frontier_phi_70_pred_1;
                            _4055 = frontier_phi_70_pred_2;
                            _4054 = frontier_phi_70_pred_3;
                            _4059 = frontier_phi_70_pred_4;
                            _4058 = frontier_phi_70_pred_5;
                            _3764 = _4057 + _3777;
                            _3765 = _4058 + _3778;
                            _3766 = _4059 + _3779;
                            _3761 = _4054 + _3774;
                            _3762 = _4055 + _3775;
                            _3763 = _4056 + _3776;
                            if (_3781 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3774 = _3761;
                                _3775 = _3762;
                                _3776 = _3763;
                                _3777 = _3764;
                                _3778 = _3765;
                                _3779 = _3766;
                                _3780 = _3781;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _3764;
                        frontier_phi_64_pred_1 = _3763;
                        frontier_phi_64_pred_2 = _3762;
                        frontier_phi_64_pred_3 = _3761;
                        frontier_phi_64_pred_4 = _3766;
                        frontier_phi_64_pred_5 = _3765;
                    }
                    _3409 = frontier_phi_64_pred;
                    _3407 = frontier_phi_64_pred_1;
                    _3405 = frontier_phi_64_pred_2;
                    _3403 = frontier_phi_64_pred_3;
                    _3413 = frontier_phi_64_pred_4;
                    _3411 = frontier_phi_64_pred_5;
                    uint _3569 = _3568 + 1u;
                    if (_3569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3562 = _3403;
                        _3563 = _3405;
                        _3564 = _3407;
                        _3565 = _3409;
                        _3566 = _3411;
                        _3567 = _3413;
                        _3568 = _3569;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _3413;
                frontier_phi_51_52_ladder_1 = _3411;
                frontier_phi_51_52_ladder_2 = _3407;
                frontier_phi_51_52_ladder_3 = _3405;
                frontier_phi_51_52_ladder_4 = _3409;
                frontier_phi_51_52_ladder_5 = _3403;
            }
            else
            {
                frontier_phi_51_52_ladder = _3243;
                frontier_phi_51_52_ladder_1 = _3241;
                frontier_phi_51_52_ladder_2 = _3237;
                frontier_phi_51_52_ladder_3 = _3235;
                frontier_phi_51_52_ladder_4 = _3239;
                frontier_phi_51_52_ladder_5 = _3233;
            }
            _3402 = frontier_phi_51_52_ladder_5;
            _3404 = frontier_phi_51_52_ladder_3;
            _3406 = frontier_phi_51_52_ladder_2;
            _3408 = frontier_phi_51_52_ladder_4;
            _3410 = frontier_phi_51_52_ladder_1;
            _3412 = frontier_phi_51_52_ladder;
        }
        float _3417 = isnan(1.0) ? _1316 : (isnan(_1316) ? 1.0 : min(_1316, 1.0));
        _2999 = (_3417 * _3408) + _2675;
        _3001 = (_3417 * _3410) + _2676;
        _3003 = (_3417 * _3412) + _2677;
        _3005 = ((_3402 * 0.039999999105930328369140625) * _3417) + _2834;
        _3007 = ((_3404 * 0.039999999105930328369140625) * _3417) + _2835;
        _3009 = ((_3406 * 0.039999999105930328369140625) * _3417) + _2836;
    }
    else
    {
        _2999 = _2675;
        _3001 = _2676;
        _3003 = _2677;
        _3005 = _2834;
        _3007 = _2835;
        _3009 = _2836;
    }
    uint _3015 = _1292 + uint(cbMatDynParam._m0[0u].w);
    float _3042 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _3043 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _3044 = cbSceneParam._m0[86u].x * ((_1216 / cbSceneParam._m0[86u].x) + (((10.0 / (_1153 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1252, _1253, _1254), vec3(_228, _229, _230))));
    float _3045 = isnan(_3042) ? _3044 : (isnan(_3044) ? _3042 : min(_3044, _3042));
    float _3046 = isnan(_3043) ? _1217 : (isnan(_1217) ? _3043 : min(_1217, _3043));
    vec4 _3048 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3045, _3046), 0.0);
    float _3050 = _3048.x;
    bool _3070 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3050)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3050))) > _1153;
    float _3071 = _3070 ? _3045 : _1216;
    float _3072 = _3070 ? _3046 : _1217;
    vec4 _3074 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_3071, _3072));
    vec4 _3079 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3071, _3072));
    float _3081 = _3079.x;
    float _3101 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3081)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3081))) - _1153;
    bool _3111 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _3115 = (isnan(_3101) ? 0.0 : (isnan(0.0) ? _3101 : max(0.0, _3101))) * (-1.44269502162933349609375);
    float _5255 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
    float _5266 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
    float _5277 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _3143 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _3146 = ((_3074.x * _3143) * exp2(_3115 * (_3111 ? 0.0 : (cbMtdParam._m0[38u].x + cbMtdParam._m0[36u].z)))) * cbSceneParam._m0[72u].w;
    float _3149 = ((_3074.y * _3143) * exp2(_3115 * (_3111 ? 0.0 : (cbMtdParam._m0[38u].y + cbMtdParam._m0[36u].w)))) * cbSceneParam._m0[72u].w;
    float _3152 = ((_3074.z * _3143) * exp2(_3115 * (_3111 ? 0.0 : (cbMtdParam._m0[38u].z + cbMtdParam._m0[37u].x)))) * cbSceneParam._m0[72u].w;
    float _3161 = (((cbInstanceData._m0[_3015].x * (_948 - (_948 * TEXCOORD_7.x))) + ((_3005 + ((isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0))) * _2124)) * cbPerFrame._m0[3u].x)) + _3146) + ((((isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0))) * (_2999 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1316))) - _3146) * _1075);
    float _3164 = (((cbInstanceData._m0[_3015].y * (_950 - (_950 * TEXCOORD_7.y))) + ((_3007 + ((isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0))) * _2124)) * cbPerFrame._m0[3u].x)) + _3149) + ((((isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0))) * (_3001 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1316))) - _3149) * _1075);
    float _3167 = (((cbInstanceData._m0[_3015].z * (_952 - (_952 * TEXCOORD_7.z))) + ((_3009 + ((isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0))) * _2124)) * cbPerFrame._m0[3u].x)) + _3152) + ((((isnan(1.0) ? _5277 : (isnan(_5277) ? 1.0 : min(_5277, 1.0))) * (_3003 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1316))) - _3152) * _1075);
    float _3179 = _1216 / cbSceneParam._m0[86u].x;
    float _3180 = _1217 / cbSceneParam._m0[86u].y;
    vec4 _3194 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, (log2((isnan(cbSceneParam._m0[77u].w) ? _1153 : (isnan(_1153) ? cbSceneParam._m0[77u].w : min(_1153, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3196 = _3194.x;
    float _3197 = _3194.y;
    float _3198 = _3194.z;
    float _3199 = _3194.w;
    float _3294;
    float _3296;
    float _3298;
    float _3300;
    if (_1153 > cbSceneParam._m0[78u].w)
    {
        float _3258 = isnan(_1153) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1153 : min(cbSceneParam._m0[80u].w, _1153));
        float _3259 = _3258 / _1153;
        float _3270 = _3259 * _1202;
        float _3271 = _1203 * _3259;
        float _3272 = (-0.0) - _3271;
        float _3273 = _3259 * _1204;
        float _3275 = (cbSceneParam._m0[77u].w * _3272) / _3258;
        float _3276 = _3275 + cbSceneParam._m0[79u].w;
        float _3277 = cbSceneParam._m0[79u].w - _3271;
        float _3283 = sqrt(((_3270 * _3270) + (_3271 * _3271)) + (_3273 * _3273));
        float _3286 = (1.0 - (cbSceneParam._m0[77u].w / _3258)) * _3283;
        float _3291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3292 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3524;
        if (abs((_3272 - _3275) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3524 = ((((_3276 > 0.0) ? exp2(_3291 * _3276) : (2.0 - exp2(_3292 * _3276))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3286;
        }
        else
        {
            float _3463 = 1.0 / cbSceneParam._m0[80u].x;
            float _3464 = isnan(_3277) ? _3276 : (isnan(_3276) ? _3277 : max(_3276, _3277));
            float _3465 = isnan(_3277) ? _3276 : (isnan(_3276) ? _3277 : min(_3276, _3277));
            float _3474 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : min(_3464, 0.0));
            float _3475 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : min(_3465, 0.0));
            _3524 = ((abs(_3283 / _3272) * cbSceneParam._m0[80u].y) * ((((_3474 - _3475) * 2.0) - ((exp2(_3291 * (isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0)))) - exp2(_3291 * (isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))))) * _3463)) - ((exp2(_3292 * _3474) - exp2(_3292 * _3475)) * _3463))) + (_3286 * cbSceneParam._m0[80u].z);
        }
        vec4 _3526 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, 1.0), 0.0);
        float _3535 = exp2((_3524 * (-1.44269502162933349609375)) * (1.0 - _3526.w));
        float _3536 = log2(_3535);
        float _3552 = log2(_3199);
        _3294 = (exp2(_3552 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3536 * cbSceneParam._m0[78u].x)) * _3526.x) / cbSceneParam._m0[78u].x)) + _3196;
        _3296 = (exp2(_3552 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3536 * cbSceneParam._m0[78u].y)) * _3526.y) / cbSceneParam._m0[78u].y)) + _3197;
        _3298 = (exp2(_3552 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3536 * cbSceneParam._m0[78u].z)) * _3526.z) / cbSceneParam._m0[78u].z)) + _3198;
        _3300 = _3535 * _3199;
    }
    else
    {
        _3294 = _3196;
        _3296 = _3197;
        _3298 = _3198;
        _3300 = _3199;
    }
    bool _3312 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3313 = log2(_3300);
    float _3320 = exp2(_3313 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)));
    float _3321 = exp2(_3313 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)));
    float _3322 = exp2(_3313 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0)));
    vec4 _3330 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1216, _1217));
    float _3332 = _3330.x;
    float _3353 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3332)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3332))) - _1153) * cbMtdParam._m0[23u].y;
    float _5343 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
    float _3355 = (isnan(1.0) ? _5343 : (isnan(_5343) ? 1.0 : min(_5343, 1.0))) * cbInstanceData._m0[_1291 + 6u].w;
    float _3364 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3364 * (_3312 ? _3320 : (_3320 + (cbSceneParam._m0[72u].w * _3294)));
    SV_Target.y = _3364 * (_3312 ? _3321 : (_3321 + (cbSceneParam._m0[72u].w * _3296)));
    SV_Target.z = _3364 * (_3312 ? _3322 : (_3322 + (cbSceneParam._m0[72u].w * _3298)));
    SV_Target.w = _3355;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3355;
}


