#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1735;
float _4027;
float _4028;
float _4029;
float _4030;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _318 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _320 = (sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0)));
    float _324 = _320 / cbMtdParam._m0[22u].z;
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(8.0) ? _325 : (isnan(_325) ? 8.0 : min(_325, 8.0));
    float _333 = cbMtdParam._m0[10u].x * _326;
    float _334 = cbMtdParam._m0[10u].y * _326;
    float _335 = cbMtdParam._m0[10u].z * _326;
    float _336 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _337 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _349 = cbMtdParam._m0[21u].y + _320;
    float _353 = _349 * cbMtdParam._m0[23u].z;
    float _4084 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    vec4 _372 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _375 = _372.x;
    float _399 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _375)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _375))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _4095 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _405 = 1.0 - (isnan(cbMtdParam._m0[24u].w) ? _400 : (isnan(_400) ? cbMtdParam._m0[24u].w : max(_400, cbMtdParam._m0[24u].w)));
    float _407 = (cbMtdParam._m0[24u].z + TEXCOORD_3.x) - (_405 * cbMtdParam._m0[20u].z);
    float _423 = (cbMtdParam._m0[27u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[19u].z;
    float _428 = cbMtdParam._m0[33u].x * TEXCOORD.x;
    float _429 = cbMtdParam._m0[33u].y * TEXCOORD.y;
    vec4 _443 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_2, SS_BumpMap), vec2((((_423 * cbMtdParam._m0[33u].z) + _428) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_429 + (_423 * cbMtdParam._m0[33u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _4111 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _449 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _450 = _443.z - _449;
    float _4122 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _463 = (_451 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _465 = (_451 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _478 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_463 + (cbMtdParam._m0[29u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_465 + (cbMtdParam._m0[29u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _482 = _478.z;
    vec4 _493 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_463 + (cbMtdParam._m0[29u].x * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_465 + (cbMtdParam._m0[29u].y * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _497 = _493.z;
    float _500 = (_405 - _443.w) + (isnan(_497) ? _482 : (isnan(_482) ? _497 : max(_482, _497)));
    float _4138 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = (_407 * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)));
    float _503 = _502 * TEXCOORD_7.w;
    float _515 = ((_502 + cbMtdParam._m0[9u].x) - _503) + (cbMtdParam._m0[15u].x * _451);
    float _518 = ((_502 + cbMtdParam._m0[9u].y) - _503) + (cbMtdParam._m0[15u].y * _451);
    float _521 = ((_502 + cbMtdParam._m0[9u].z) - _503) + (cbMtdParam._m0[15u].z * _451);
    vec4 _567 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].x * _423))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].y * _423))) + cbTextureTilingScale._m0[1u].w));
    float _572 = _567.z * 0.099999986588954925537109375;
    float _4149 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _574 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _578 = cbMtdParam._m0[23u].x * _320;
    float _4160 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _593 = (_515 + (isnan(0.07999999821186065673828125) ? _336 : (isnan(_336) ? 0.07999999821186065673828125 : min(_336, 0.07999999821186065673828125)))) + (_579 * (((1.0 - _515) - _574) + _572));
    float _595 = (_518 + (isnan(0.07999999821186065673828125) ? _337 : (isnan(_337) ? 0.07999999821186065673828125 : min(_337, 0.07999999821186065673828125)))) + (_579 * (((1.0 - _518) - _574) + _572));
    float _597 = (_521 + (isnan(0.07999999821186065673828125) ? _338 : (isnan(_338) ? 0.07999999821186065673828125 : min(_338, 0.07999999821186065673828125)))) + (_579 * (((1.0 - _521) + _572) - _574));
    float _4171 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _598 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _599 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _4193 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _607 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _449) + cbMtdParam._m0[19u].x;
    float _619 = (POSITION_1.w - cbMtdParam._m0[27u].y) * (1.0 / cbMtdParam._m0[27u].x);
    float _4204 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _633 = (cbMtdParam._m0[32u].x * _423) + _428;
    float _634 = (cbMtdParam._m0[32u].y * _423) + _429;
    vec4 _661 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[31u].z * _423) + _428)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[31u].w * _423) + _429)) + cbTextureTilingScale._m0[3u].w));
    float _668 = (_661.x * 2.0) + (-1.0);
    float _670 = (_661.y * 2.0) + (-1.0);
    float _674 = 1.0 - dot(vec2(_668, _670), vec2(_668, _670));
    float _4215 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _676 = sqrt(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)));
    float _679 = fma(_676, _237, fma(_670, _244, _668 * _230));
    float _682 = fma(_676, _238, fma(_670, _245, _668 * _231));
    float _685 = fma(_676, _239, fma(_670, _246, _668 * _232));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    float _690 = cbPerFrame._m0[22u].x * 2.0;
    float _691 = _690 * cbMtdParam._m0[25u].w;
    float _695 = ((_679 * 0.5) * _689) + (-0.25);
    float _699 = ((_682 * 0.5) * _689) + (-0.25);
    float _700 = _699 * cbMtdParam._m0[26u].x;
    float _702 = (-0.0) - (cbMtdParam._m0[26u].x * _695);
    float _703 = fract(_691);
    float _705 = fract(_691 + 0.5);
    float _716 = abs((_703 * 2.0) + (-1.0));
    vec4 _733 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_703 * _702) + _633) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_700 * _703) + _634) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _735 = _733.x;
    float _736 = _733.y;
    float _737 = _733.z;
    vec4 _738 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_705 * _702) + _633) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_700 * _705) + _634) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _749 = ((_738.x - _735) * _716) + _735;
    float _750 = ((_738.y - _736) * _716) + _736;
    float _751 = ((_738.z - _737) * _716) + _737;
    float _765 = (cbMtdParam._m0[31u].x * _423) + _428;
    float _766 = (cbMtdParam._m0[31u].y * _423) + _429;
    float _769 = _690 * cbMtdParam._m0[25u].z;
    float _770 = _699 * cbMtdParam._m0[25u].y;
    float _772 = (-0.0) - (cbMtdParam._m0[25u].y * _695);
    float _773 = fract(_769);
    float _775 = fract(_769 + 0.5);
    float _786 = abs((_773 * 2.0) + (-1.0));
    vec4 _803 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_773 * _772) + _765) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_770 * _773) + _766) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    vec4 _808 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_775 * _772) + _765) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_770 * _775) + _766) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _842 = (((((cbMtdParam._m0[16u].x - cbMtdParam._m0[18u].x) * _749) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].x) * (((_808.x - _803.x) * _786) + _803.x)) + (_749 * cbMtdParam._m0[17u].x);
    float _845 = (((((cbMtdParam._m0[16u].y - cbMtdParam._m0[18u].y) * _750) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].y) * (((_808.y - _803.y) * _786) + _803.y)) + (_750 * cbMtdParam._m0[17u].y);
    float _848 = ((((cbMtdParam._m0[28u].x * _751) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_808.z - _803.z) * _786) + _803.z)) + (_751 * cbMtdParam._m0[17u].z);
    float _852 = _842 - (_842 * _620);
    float _853 = _845 - (_845 * _620);
    float _854 = _848 - (_848 * _620);
    float _859 = (POSITION_1.w - cbMtdParam._m0[26u].w) * (1.0 / cbMtdParam._m0[26u].z);
    float _4226 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _870 = (cbMtdParam._m0[32u].z * _423) + _428;
    float _871 = (cbMtdParam._m0[32u].w * _423) + _429;
    vec4 _884 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_870 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_871 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _886 = _884.x;
    float _887 = _884.y;
    float _888 = _884.z;
    vec4 _910 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _870) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _871) + cbTextureTilingScale._m0[7u].w));
    float _950 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].x) * (((((_886 * cbMtdParam._m0[11u].x) - _852) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _886) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].x) * _910.x)) * _860) + _852);
    float _952 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].y) * (((((_887 * cbMtdParam._m0[11u].y) - _853) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _887) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].y) * _910.y)) * _860) + _853);
    float _954 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].z) * (((((_888 * cbMtdParam._m0[11u].z) - _854) + ((((cbMtdParam._m0[28u].y * _888) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _910.z)) * _860) + _854);
    float _4237 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _961 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _971 = _320 / cbMtdParam._m0[22u].w;
    float _4248 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _972 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _973 = _451 * 0.23999999463558197021484375;
    float _975 = _451 * (-0.20000000298023223876953125);
    float _986 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _987 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _996 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].z * _423) + _973) + _986) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[34u].w * _423) + _975) + _987) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1012 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_986 + _973) + (cbMtdParam._m0[35u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_987 + _975) + (cbMtdParam._m0[35u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1032 = (((_493.x + (-0.5)) * 0.5) + _478.x) + (((_996.x + (-1.0)) + _1012.x) * cbMtdParam._m0[24u].y);
    float _1033 = (((_493.y + (-0.5)) * 0.5) + _478.y) + (((_996.y + (-1.0)) + _1012.y) * cbMtdParam._m0[24u].y);
    float _1038 = ((_567.x - _1032) * _972) + _1032;
    float _1039 = ((_567.y - _1033) * _972) + _1033;
    float _1041 = _320 / cbMtdParam._m0[22u].y;
    float _4259 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1042 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _1058 = ((((_961 * (0.5 - _445)) + _445) + (((_1038 + (-0.5)) + ((0.5 - _1038) * _1042)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1059 = ((((_961 * (0.5 - _446)) + _446) + (((_1039 + (-0.5)) + ((0.5 - _1039) * _1042)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1060 = dot(vec2(_1058, _1059), vec2(_1058, _1059));
    float _4270 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1065 = sqrt(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))));
    float _1067 = cbMtdParam._m0[23u].w * _349;
    float _4281 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1074 = cbMtdParam._m0[21u].w * _349;
    float _4292 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1076 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * cbMtdParam._m0[26u].y;
    float _4303 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1077 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _1082 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1087 = _1058 - (_1082 * _1058);
    float _1088 = _1059 - (_1082 * _1059);
    float _1089 = (_1082 * (1.0 - _1065)) + _1065;
    float _1108 = fma(_1065, _237, fma(_1059, _244, _1058 * _230));
    float _1111 = fma(_1065, _238, fma(_1059, _245, _1058 * _231));
    float _1114 = fma(_1065, _239, fma(_1059, _246, _1058 * _232));
    float _1118 = inversesqrt(dot(vec3(_1108, _1111, _1114), vec3(_1108, _1111, _1114)));
    float _1119 = _1118 * _1108;
    float _1120 = _1118 * _1111;
    float _1121 = _1118 * _1114;
    float _1124 = fma(_1089, _237, fma(_1088, _244, _1087 * _230));
    float _1127 = fma(_1089, _238, fma(_1088, _245, _1087 * _231));
    float _1130 = fma(_1089, _239, fma(_1088, _246, _1087 * _232));
    float _1134 = inversesqrt(dot(vec3(_1124, _1127, _1130), vec3(_1124, _1127, _1130)));
    float _1135 = _1134 * _1124;
    float _1136 = _1134 * _1127;
    float _1137 = _1134 * _1130;
    float _4314 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _1138 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4336 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4347 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _1155 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1204 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1195);
    float _1205 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1195);
    float _1206 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1195);
    float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
    float _1211 = _1204 * _1210;
    float _1212 = _1205 * _1210;
    float _1213 = _1206 * _1210;
    vec4 _1218 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1220 = _1218.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1420 = sqrt(((_1204 * _1204) + (_1205 * _1205)) + (_1206 * _1206));
        float _1426 = (cbMatDynParam._m0[5u].x * _1420) + cbMatDynParam._m0[5u].y;
        float _4358 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1431 = (cbMatDynParam._m0[5u].z * _1420) + cbMatDynParam._m0[5u].w;
        float _4369 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) - _1427)) + _1427) < ((_1220 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1230 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1231 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1233 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1242 = (_1233.x * 2.0) + (-1.0);
    float _1243 = (_1233.y * 2.0) + (-1.0);
    float _1244 = (_1233.z * 2.0) + (-1.0);
    float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
    float _1259 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1233.w;
    float _1266 = (((_1242 * _1248) - _1119) * _1259) + _1119;
    float _1267 = (((_1243 * _1248) - _1120) * _1259) + _1120;
    float _1268 = (((_1244 * _1248) - _1121) * _1259) + _1121;
    float _1286 = fma(_1268, cbSceneParam._m0[5u].z, fma(_1267, cbSceneParam._m0[5u].y, _1266 * cbSceneParam._m0[5u].x));
    float _1289 = fma(_1268, cbSceneParam._m0[6u].z, fma(_1267, cbSceneParam._m0[6u].y, _1266 * cbSceneParam._m0[6u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[7u].z, fma(_1267, cbSceneParam._m0[7u].y, _1266 * cbSceneParam._m0[7u].x));
    uint _1305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1306 = _1305 + 9u;
    uint _1307 = _1306 + uint(cbMatDynParam._m0[0u].w);
    float _1313 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * cbInstanceData._m0[_1307].x;
    float _1314 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1307].y;
    float _1315 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1307].z;
    float _4380 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _1317 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _4402 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1318 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    vec4 _1327 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1230, cbSceneParam._m0[86u].y * _1231));
    float _1330 = _1327.x * TEXCOORD_3.w;
    float _1334 = abs(dot(vec3(_1211, _1212, _1213), vec3(_1266, _1267, _1268)));
    float _4413 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _1347 = dot(vec3(_1135, _1136, _1137), vec3(_1211, _1212, _1213)) * 2.0;
    float _1351 = (_1347 * _1135) - _1211;
    float _1352 = (_1347 * _1136) - _1212;
    float _1353 = (_1347 * _1137) - _1213;
    float _1357 = abs(dot(vec3(_1211, _1212, _1213), vec3(_1135, _1136, _1137)));
    float _4424 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
    float _1359 = sqrt(_1138);
    float _1371 = exp2((_1359 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1359 * 3.0));
    float _1402 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1406 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1410 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1734;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1463 = fma(_1410, cbModelParam._m0[26u].z, fma(_1406, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1402));
        float _1467 = fma(_1410, cbModelParam._m0[27u].z, fma(_1406, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1402));
        float _1471 = fma(_1410, cbModelParam._m0[28u].z, fma(_1406, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1402));
        float _1493 = _1402 + _1135;
        float _1494 = _1406 + _1136;
        float _1495 = _1410 + _1137;
        float _1505 = fma(_1495, cbModelParam._m0[26u].z, fma(_1494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1493)) - _1463;
        float _1506 = fma(_1495, cbModelParam._m0[27u].z, fma(_1494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1493)) - _1467;
        float _1507 = fma(_1495, cbModelParam._m0[28u].z, fma(_1494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1493)) - _1471;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1523 = ((_1511 * _1505) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1463 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1511 * _1506) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1467 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1507) / cbModelParam._m0[34u].z) + ((((((_1471 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        float _1562 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1528.x + (-0.5));
        float _1564 = _1562 * (_1528.y + (-0.5));
        float _1565 = _1562 * (_1528.z + (-0.5));
        float _1572 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1535.x + (-0.5));
        float _1574 = _1572 * (_1535.y + (-0.5));
        float _1575 = _1572 * (_1535.z + (-0.5));
        float _1582 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1542.x + (-0.5));
        float _1584 = _1582 * (_1542.y + (-0.5));
        float _1585 = _1582 * (_1542.z + (-0.5));
        float _1592 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1549.x + (-0.5));
        float _1594 = _1592 * (_1549.y + (-0.5));
        float _1595 = _1592 * (_1549.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1616 = (dot(vec3(_1135, _1136, _1137), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1626 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4472 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1628 + 1.0))) + _1633) * _1596;
        float _1643 = _1564 * 0.5;
        float _1644 = _1574 * 0.5;
        float _1645 = _1584 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_1135, _1136, _1137), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4483 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4494 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4505 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_1670 + 1.0))) + _1675) * _1597;
        float _1685 = _1565 * 0.5;
        float _1686 = _1575 * 0.5;
        float _1687 = _1585 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_1135, _1136, _1137), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4538 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1712 + 1.0))) + _1717) * _1598;
        _1734 = _1565;
        _1736 = _1564;
        _1737 = _1563;
        _1738 = _1575;
        _1739 = _1574;
        _1740 = _1573;
        _1741 = _1585;
        _1742 = _1584;
        _1743 = _1583;
        _1744 = _1598;
        _1745 = _1597;
        _1746 = _1596;
        _1747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
    }
    else
    {
        _1734 = _1735;
        _1736 = _1735;
        _1737 = _1735;
        _1738 = _1735;
        _1739 = _1735;
        _1740 = _1735;
        _1741 = _1735;
        _1742 = _1735;
        _1743 = _1735;
        _1744 = _1735;
        _1745 = _1735;
        _1746 = _1735;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    float _2047;
    float _2048;
    float _2049;
    float _2050;
    float _2051;
    float _2052;
    float _2053;
    float _2054;
    float _2055;
    float _2056;
    float _2057;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1776 = fma(_1410, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1402));
        float _1780 = fma(_1410, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1402));
        float _1784 = fma(_1410, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1402));
        float _1806 = _1402 + _1135;
        float _1807 = _1406 + _1136;
        float _1808 = _1410 + _1137;
        float _1818 = fma(_1808, cbModelParam._m0[30u].z, fma(_1807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1806)) - _1776;
        float _1819 = fma(_1808, cbModelParam._m0[31u].z, fma(_1807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1806)) - _1780;
        float _1820 = fma(_1808, cbModelParam._m0[32u].z, fma(_1807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1806)) - _1784;
        float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
        float _1836 = ((_1824 * _1818) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1776 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1837 = ((_1824 * _1819) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1780 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1838 = ((_1824 * _1820) / cbModelParam._m0[35u].z) + ((((((_1784 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1840 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1836, _1837, _1838), 0.0);
        vec4 _1847 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1836, _1837, _1838), 0.0);
        vec4 _1854 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1836, _1837, _1838), 0.0);
        vec4 _1861 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1836, _1837, _1838), 0.0);
        float _1873 = exp2((_1840.w + (-0.5)) * 20.0) * 2.0;
        float _1874 = _1873 * (_1840.x + (-0.5));
        float _1875 = _1873 * (_1840.y + (-0.5));
        float _1876 = _1873 * (_1840.z + (-0.5));
        float _1883 = exp2((_1847.w + (-0.5)) * 20.0) * 2.0;
        float _1884 = _1883 * (_1847.x + (-0.5));
        float _1885 = _1883 * (_1847.y + (-0.5));
        float _1886 = _1883 * (_1847.z + (-0.5));
        float _1893 = exp2((_1854.w + (-0.5)) * 20.0) * 2.0;
        float _1894 = _1893 * (_1854.x + (-0.5));
        float _1895 = _1893 * (_1854.y + (-0.5));
        float _1896 = _1893 * (_1854.z + (-0.5));
        float _1903 = exp2((_1861.w + (-0.5)) * 20.0) * 2.0;
        float _1904 = _1903 * (_1861.x + (-0.5));
        float _1905 = _1903 * (_1861.y + (-0.5));
        float _1906 = _1903 * (_1861.z + (-0.5));
        float _1907 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1908 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1909 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1910 = _1874 * 0.5;
        float _1911 = _1884 * 0.5;
        float _1912 = _1894 * 0.5;
        float _1913 = dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912));
        float _1918 = (_1913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1913);
        float _1926 = (dot(vec3(_1135, _1136, _1137), vec3(_1918 * _1910, _1918 * _1911, _1918 * _1912)) + 1.0) * 0.5;
        float _4579 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1935 = sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912)) / (_1907 + 9.9999997473787516355514526367188e-06);
        float _4590 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1937 = _1936 * 2.0;
        float _1941 = (1.0 - _1936) / (_1936 + 1.0);
        float _4601 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1951 = ((((1.0 - _1942) * (_1937 + 2.0)) * exp2(log2(isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_1937 + 1.0))) + _1942) * _1907;
        float _1952 = _1875 * 0.5;
        float _1953 = _1885 * 0.5;
        float _1954 = _1895 * 0.5;
        float _1955 = dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954));
        float _1960 = (_1955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1955);
        float _1968 = (dot(vec3(_1135, _1136, _1137), vec3(_1960 * _1952, _1960 * _1953, _1960 * _1954)) + 1.0) * 0.5;
        float _4612 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1977 = sqrt(((_1953 * _1953) + (_1952 * _1952)) + (_1954 * _1954)) / (_1908 + 9.9999997473787516355514526367188e-06);
        float _4623 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1979 = _1978 * 2.0;
        float _1983 = (1.0 - _1978) / (_1978 + 1.0);
        float _4634 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _1993 = ((((1.0 - _1984) * (_1979 + 2.0)) * exp2(log2(isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_1979 + 1.0))) + _1984) * _1908;
        float _1994 = _1876 * 0.5;
        float _1995 = _1886 * 0.5;
        float _1996 = _1896 * 0.5;
        float _1997 = dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996));
        float _2002 = (_1997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1997);
        float _2010 = (dot(vec3(_1135, _1136, _1137), vec3(_2002 * _1994, _2002 * _1995, _2002 * _1996)) + 1.0) * 0.5;
        float _4645 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2019 = sqrt(((_1995 * _1995) + (_1994 * _1994)) + (_1996 * _1996)) / (_1909 + 9.9999997473787516355514526367188e-06);
        float _4656 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2021 = _2020 * 2.0;
        float _2025 = (1.0 - _2020) / (_2020 + 1.0);
        float _4667 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2035 = ((((1.0 - _2026) * (_2021 + 2.0)) * exp2(log2(isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2021 + 1.0))) + _2026) * _1909;
        _2043 = _1876;
        _2044 = _1875;
        _2045 = _1874;
        _2046 = _1886;
        _2047 = _1885;
        _2048 = _1884;
        _2049 = _1896;
        _2050 = _1895;
        _2051 = _1894;
        _2052 = _1909;
        _2053 = _1908;
        _2054 = _1907;
        _2055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)));
        _2056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)));
        _2057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)));
    }
    else
    {
        _2043 = _1735;
        _2044 = _1735;
        _2045 = _1735;
        _2046 = _1735;
        _2047 = _1735;
        _2048 = _1735;
        _2049 = _1735;
        _2050 = _1735;
        _2051 = _1735;
        _2052 = _1735;
        _2053 = _1735;
        _2054 = _1735;
        _2055 = 0.0;
        _2056 = 0.0;
        _2057 = 0.0;
    }
    float _2067 = (cbModelParam._m0[1u].x * (_2055 - _1747)) + _1747;
    float _2068 = (cbModelParam._m0[1u].x * (_2056 - _1748)) + _1748;
    float _2069 = (cbModelParam._m0[1u].x * (_2057 - _1749)) + _1749;
    float _2090 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2068, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2093 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2068, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2096 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2068, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2067));
    float _2111 = _1351 * 0.5;
    float _2112 = _1352 * 0.5;
    float _2113 = _1353 * 0.5;
    float _2114 = dot(vec4(_2111, _2112, _2113, 1.0), vec4(_2045, _2048, _2051, _2054));
    float _2117 = dot(vec4(_2111, _2112, _2113, 1.0), vec4(_2044, _2047, _2050, _2053));
    float _2120 = dot(vec4(_2111, _2112, _2113, 1.0), vec4(_2043, _2046, _2049, _2052));
    float _2154;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2127 = dot(vec4(_2111, _2112, _2113, 1.0), vec4(_1734, _1738, _1741, _1744));
        float _2131 = dot(vec4(_2111, _2112, _2113, 1.0), vec4(_1736, _1739, _1742, _1745));
        float _2135 = dot(vec4(_2111, _2112, _2113, 1.0), vec4(_1737, _1740, _1743, _1746));
        float _2142 = dot(vec4(cbModelParam._m0[39u]), vec4(_2111, _2112, _2113, 1.0));
        _2154 = dot(vec3(isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0)), isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)), isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2142) ? 0.0 : (isnan(0.0) ? _2142 : max(0.0, _2142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2154 = 1.0;
    }
    float _2165;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2156 = dot(vec4(cbModelParam._m0[40u]), vec4(_2111, _2112, _2113, 1.0));
        _2165 = dot(vec3(isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0)), isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0)), isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2156) ? 0.0 : (isnan(0.0) ? _2156 : max(0.0, _2156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2165 = 1.0;
    }
    float _2169 = (_2165 * cbModelParam._m0[1u].x) + (_2154 * (1.0 - cbModelParam._m0[1u].x));
    float _2179 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1138);
    float _2180 = isnan(_2179) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2179 : min(cbModelParam._m0[25u].z, _2179));
    float _2260;
    float _2262;
    float _2264;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2227 = fma(_1410, cbModelParam._m0[13u].z, fma(_1406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1402)) + cbModelParam._m0[13u].w;
        float _2231 = fma(_1410, cbModelParam._m0[14u].z, fma(_1406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1402)) + cbModelParam._m0[14u].w;
        float _2235 = fma(_1410, cbModelParam._m0[15u].z, fma(_1406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1402)) + cbModelParam._m0[15u].w;
        float _2238 = fma(_1353, cbModelParam._m0[13u].z, fma(_1352, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1351));
        float _2241 = fma(_1353, cbModelParam._m0[14u].z, fma(_1352, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1351));
        float _2244 = fma(_1353, cbModelParam._m0[15u].z, fma(_1352, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1351));
        float _2272;
        if (_2238 > 0.0)
        {
            _2272 = abs((1.0 - _2227) / _2238);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2238 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2227 + 1.0) / _2238);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2272 = frontier_phi_17_15_ladder;
        }
        float _2645;
        if (_2241 > 0.0)
        {
            _2645 = abs((1.0 - _2231) / _2241);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2241 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2231 + 1.0) / _2241);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2645 = frontier_phi_26_22_ladder;
        }
        float _3123;
        if (_2244 > 0.0)
        {
            _3123 = abs((1.0 - _2235) / _2244);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_2244 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_2235 + 1.0) / _2244);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _3123 = frontier_phi_40_33_ladder;
        }
        float _3125 = isnan(_2645) ? _2272 : (isnan(_2272) ? _2645 : min(_2272, _2645));
        float _3126 = isnan(_3123) ? _3125 : (isnan(_3125) ? _3123 : min(_3125, _3123));
        float _3130 = (_3126 * _2238) + _2227;
        float _3131 = (_3126 * _2241) + _2231;
        float _3132 = (_3126 * _2244) + _2235;
        float _3133 = _3126 * 9.9999997473787516355514526367188e-05;
        float _3134 = (-1.0) - _3133;
        float _3136 = _3133 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_3132 > _3136) || ((_3132 < _3134) || ((_3131 > _3136) || ((_3131 < _3134) || ((_3130 < _3134) || (_3130 > _3136))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3132, cbModelParam._m0[9u].z, fma(_3131, cbModelParam._m0[9u].y, _3130 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3132, cbModelParam._m0[10u].z, fma(_3131, cbModelParam._m0[10u].y, _3130 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3132, cbModelParam._m0[11u].z, fma(_3131, cbModelParam._m0[11u].y, _3130 * cbModelParam._m0[11u].x))), _2180);
            frontier_phi_16_40_ladder = _3274.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _3274.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _3274.x * cbModelParam._m0[1u].y;
        }
        _2260 = frontier_phi_16_40_ladder_2;
        _2262 = frontier_phi_16_40_ladder_1;
        _2264 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1351, _1352, _1353), _2180);
        _2260 = _2248.x * cbModelParam._m0[1u].y;
        _2262 = _2248.y * cbModelParam._m0[1u].y;
        _2264 = _2248.z * cbModelParam._m0[1u].y;
    }
    float _2268 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1138);
    float _2269 = isnan(_2268) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2268 : min(cbModelParam._m0[25u].w, _2268));
    float _2358;
    float _2360;
    float _2362;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2322 = fma(_1410, cbModelParam._m0[21u].z, fma(_1406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1402)) + cbModelParam._m0[21u].w;
        float _2326 = fma(_1410, cbModelParam._m0[22u].z, fma(_1406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1402)) + cbModelParam._m0[22u].w;
        float _2330 = fma(_1410, cbModelParam._m0[23u].z, fma(_1406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1402)) + cbModelParam._m0[23u].w;
        float _2333 = fma(_1353, cbModelParam._m0[21u].z, fma(_1352, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1351));
        float _2336 = fma(_1353, cbModelParam._m0[22u].z, fma(_1352, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1351));
        float _2339 = fma(_1353, cbModelParam._m0[23u].z, fma(_1352, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1351));
        float _2650;
        if (_2333 > 0.0)
        {
            _2650 = abs((1.0 - _2322) / _2333);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2333 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2322 + 1.0) / _2333);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2650 = frontier_phi_28_24_ladder;
        }
        float _3149;
        if (_2336 > 0.0)
        {
            _3149 = abs((1.0 - _2326) / _2336);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2336 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2326 + 1.0) / _2336);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3149 = frontier_phi_42_35_ladder;
        }
        float _3339;
        if (_2339 > 0.0)
        {
            _3339 = abs((1.0 - _2330) / _2339);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2339 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2330 + 1.0) / _2339);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _3339 = frontier_phi_60_53_ladder;
        }
        float _3341 = isnan(_3149) ? _2650 : (isnan(_2650) ? _3149 : min(_2650, _3149));
        float _3342 = isnan(_3339) ? _3341 : (isnan(_3341) ? _3339 : min(_3341, _3339));
        float _3346 = (_3342 * _2333) + _2322;
        float _3347 = (_3342 * _2336) + _2326;
        float _3348 = (_3342 * _2339) + _2330;
        float _3349 = _3342 * 9.9999997473787516355514526367188e-05;
        float _3350 = (-1.0) - _3349;
        float _3352 = _3349 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_3348 > _3352) || ((_3348 < _3350) || ((_3347 > _3352) || ((_3347 < _3350) || ((_3346 < _3350) || (_3346 > _3352))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3348, cbModelParam._m0[17u].z, fma(_3347, cbModelParam._m0[17u].y, _3346 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3348, cbModelParam._m0[18u].z, fma(_3347, cbModelParam._m0[18u].y, _3346 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3348, cbModelParam._m0[19u].z, fma(_3347, cbModelParam._m0[19u].y, _3346 * cbModelParam._m0[19u].x))), _2269);
            frontier_phi_25_60_ladder = _3590.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3590.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3590.y * cbModelParam._m0[1u].z;
        }
        _2358 = frontier_phi_25_60_ladder;
        _2360 = frontier_phi_25_60_ladder_2;
        _2362 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _2342 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1351, _1352, _1353), _2269);
        _2358 = _2342.x * cbModelParam._m0[1u].z;
        _2360 = _2342.y * cbModelParam._m0[1u].z;
        _2362 = _2342.z * cbModelParam._m0[1u].z;
    }
    float _2374 = ((((1.0 - _1371) * ((_1359 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1371 * _1359)) * _1330;
    float _2375 = _2374 * ((cbModelParam._m0[1u].w * (_2358 - _2260)) + _2260);
    float _2376 = _2374 * ((cbModelParam._m0[1u].w * (_2360 - _2262)) + _2262);
    float _2377 = _2374 * ((cbModelParam._m0[1u].w * (_2362 - _2264)) + _2264);
    float _2380 = fma(_2377, cbSceneParam._m0[89u].z, fma(_2376, cbSceneParam._m0[89u].y, _2375 * cbSceneParam._m0[89u].x));
    float _2383 = fma(_2377, cbSceneParam._m0[90u].z, fma(_2376, cbSceneParam._m0[90u].y, _2375 * cbSceneParam._m0[90u].x));
    float _2386 = fma(_2377, cbSceneParam._m0[91u].z, fma(_2376, cbSceneParam._m0[91u].y, _2375 * cbSceneParam._m0[91u].x));
    vec4 _2394 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1230, _1231));
    float _2396 = _2394.w;
    float _2408 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2396);
    float _2409 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2396);
    float _2410 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2396);
    uvec4 _2414 = floatBitsToUint(cbInstanceData._m0[_1305 + 5u]);
    uint _2416 = _2414.x * 14u;
    uint _2417 = _2416 + 13u;
    float _2422 = _1330 + (-1.0);
    float _2425 = (cbLight._m0[_2417].x * _2422) + 1.0;
    float _2426 = (cbLight._m0[_2417].y * _2422) + 1.0;
    uint _2427 = _2416 + 5u;
    float _2433 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2437 = _2416 + 4u;
    float _2446 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
    uint _2450 = _2416 | 1u;
    float _2461 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_1266, _1267, _1268));
    float _2464 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_1266, _1267, _1268));
    float _4803 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _4814 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2469 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * 0.3183098733425140380859375;
    float _2471 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * 0.3183098733425140380859375;
    float _2478 = ((cbLight._m0[_2427].x * _2433) * _2471) + (((cbLight._m0[_2437].x * _2408) * _2446) * _2469);
    float _2479 = ((_2433 * cbLight._m0[_2427].y) * _2471) + (((cbLight._m0[_2437].y * _2409) * _2446) * _2469);
    float _2480 = ((_2433 * cbLight._m0[_2427].z) * _2471) + (((cbLight._m0[_2437].z * _2410) * _2446) * _2469);
    uint _2482 = _2416 + 8u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _1138) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2416].x + _1211;
    float _2498 = cbLight._m0[_2416].y + _1212;
    float _2499 = cbLight._m0[_2416].z + _1213;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_1266, _1267, _1268), vec3(cbLight._m0[_2416].xyz));
    float _4825 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2511 = dot(vec3(_1266, _1267, _1268), vec3(_1211, _1212, _1213));
    float _4836 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2515 = dot(vec3(_1266, _1267, _1268), vec3(_2504, _2505, _2506));
    float _4847 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2504, _2505, _2506));
    float _4858 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2496 * _2496;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2538 = (exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2539 = 1.0 - _2496;
    float _2550 = (0.5 / (((_2514 * ((_2510 * _2539) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2539) + _2496) * _2510))) * _2510;
    float _4869 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2552 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    uint _2566 = _2416 + 9u;
    float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _1138) * 0.949999988079071044921875);
    float _2578 = _2577 * _2577;
    float _2579 = cbLight._m0[_2450].x + _1211;
    float _2580 = cbLight._m0[_2450].y + _1212;
    float _2581 = cbLight._m0[_2450].z + _1213;
    float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
    float _2586 = _2585 * _2579;
    float _2587 = _2585 * _2580;
    float _2588 = _2585 * _2581;
    float _2589 = dot(vec3(_1266, _1267, _1268), vec3(cbLight._m0[_2450].xyz));
    float _4880 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2593 = dot(vec3(_1266, _1267, _1268), vec3(_2586, _2587, _2588));
    float _4891 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2597 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2586, _2587, _2588));
    float _4902 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2601 = _2578 * _2578;
    float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
    float _2614 = (exp2(log2(1.0 - (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2615 = 1.0 - _2578;
    float _2625 = (0.5 / (((_2514 * ((_2592 * _2615) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2615) + _2578) * _2592))) * _2592;
    float _4913 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
    float _2637 = (((_2614 * cbLight._m0[_2566].x) * _2627) * _2433) + ((((cbLight._m0[_2482].x * _2408) * _2538) * _2552) * _2446);
    float _2638 = (((_2614 * cbLight._m0[_2566].y) * _2627) * _2433) + ((((cbLight._m0[_2482].y * _2409) * _2538) * _2552) * _2446);
    float _2639 = (((_2614 * cbLight._m0[_2566].z) * _2627) * _2433) + ((((cbLight._m0[_2482].z * _2410) * _2538) * _2552) * _2446);
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_2414.y == 0u)
    {
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2694;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2694;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2694;
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.x;
        uint _2721 = uint((float(_2709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1231) / _2710))) + floor(float(uint(cbSceneParam._m0[85u].x * _1230) / _2710)));
        float _2731 = (log2(_2697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        uint _2735 = uint(isnan(14.0) ? _2732 : (isnan(_2732) ? 14.0 : min(_2732, 14.0)));
        uvec4 _2740 = texelFetch(g_lightClusterGridBuffer, int(((_2735 << 2u) + (_2721 << 6u)) >> 2u));
        uint _2741 = _2740.x;
        uint _2742 = _2709.z;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((((1u << ((_2742 >> 4u) & 15u)) + 4294967295u) & _2741) == 0u) || ((_2742 & 240u) == 0u))
        {
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
        }
        else
        {
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3202)
                {
                    frontier_phi_55_pred = _3190;
                    frontier_phi_55_pred_1 = _3191;
                    frontier_phi_55_pred_2 = _3189;
                    frontier_phi_55_pred_3 = _3188;
                    frontier_phi_55_pred_4 = _3187;
                    frontier_phi_55_pred_5 = _3186;
                }
                else
                {
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    uint _3388;
                    _3382 = _3186;
                    _3383 = _3187;
                    _3384 = _3188;
                    _3385 = _3189;
                    _3386 = _3190;
                    _3387 = _3191;
                    _3388 = _3201;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    for (;;)
                    {
                        uint _3392 = uint(findLSB(_3388)) + (_3192 << 5u);
                        uint _3389 = (_3388 + 4294967295u) & _3388;
                        uint _3394 = _3392 * 48u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3414 = (_3392 * 48u) + 4u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3433 = (_3392 * 48u) + 8u;
                        vec3 _3444 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x));
                        float _3448 = _3408.x - _2695;
                        float _3449 = _3408.y - _2696;
                        float _3450 = _3408.z - _2697;
                        float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                        float _3454 = inversesqrt(_3451);
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3458 = dot(vec3(_1286, _1289, _1292), vec3(_3455, _3456, _3457));
                        float _3463 = 1.0 - (_3451 * _3408.w);
                        float _4934 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3465 = sqrt(_3451) * _3427.w;
                        float _3468 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3458) + _3469;
                        float _3475 = _3465 * _3465;
                        float _3479 = ((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3464) / ((_3475 * 0.699999988079071044921875) + 1.0);
                        float _3483 = (-0.0) - _2695;
                        float _3484 = (-0.0) - _2696;
                        float _3485 = (-0.0) - _2697;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3490 = _3489 * _3483;
                        float _3491 = _3489 * _3484;
                        float _3492 = _3489 * _3485;
                        float _3500 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                        float _3501 = 1.0 - _1359;
                        float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                        float _3509 = _3508 * _3508;
                        float _3510 = _3509 * _3509;
                        float _3511 = _3490 + _3455;
                        float _3512 = _3491 + _3456;
                        float _3513 = _3492 + _3457;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3521 = dot(vec3(_1286, _1289, _1292), vec3(_3490, _3491, _3492));
                        float _4950 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3524 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3525 = dot(vec3(_1286, _1289, _1292), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                        float _4961 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                        float _3533 = _3468 * _3509;
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3458) + _3534;
                        float _4972 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3539 = 1.0 - _3509;
                        float _3549 = (0.5 / (((_3538 * ((_3524 * _3539) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3509) * _3524))) * _3538;
                        float _4983 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3560 = (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) / ((_3532 * _3532) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125))) * _3464;
                        _3286 = (_3479 * _3427.x) + _3385;
                        _3287 = (_3479 * _3427.y) + _3386;
                        _3288 = (_3479 * _3427.z) + _3387;
                        _3283 = (_3560 * _3444.x) + _3382;
                        _3284 = (_3560 * _3444.y) + _3383;
                        _3285 = (_3560 * _3444.z) + _3384;
                        if (_3389 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3382 = _3283;
                            _3383 = _3284;
                            _3384 = _3285;
                            _3385 = _3286;
                            _3386 = _3287;
                            _3387 = _3288;
                            _3388 = _3389;
                        }
                    }
                    frontier_phi_55_pred = _3287;
                    frontier_phi_55_pred_1 = _3288;
                    frontier_phi_55_pred_2 = _3286;
                    frontier_phi_55_pred_3 = _3285;
                    frontier_phi_55_pred_4 = _3284;
                    frontier_phi_55_pred_5 = _3283;
                }
                _2980 = frontier_phi_55_pred;
                _2982 = frontier_phi_55_pred_1;
                _2978 = frontier_phi_55_pred_2;
                _2976 = frontier_phi_55_pred_3;
                _2974 = frontier_phi_55_pred_4;
                _2972 = frontier_phi_55_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _2972;
                    _3187 = _2974;
                    _3188 = _2976;
                    _3189 = _2978;
                    _3190 = _2980;
                    _3191 = _2982;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
        }
        uvec4 _2985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2986 = _2985.z;
        uint _2988 = (_2986 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _2988) & _2741) == 0u)
        {
            _3154 = _2971;
            _3156 = _2973;
            _3158 = _2975;
            _3160 = _2977;
            _3162 = _2979;
            _3164 = _2981;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
            float _3180 = _3179 * _2695;
            float _3181 = _3179 * _2696;
            float _3182 = _3179 * _2697;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2988 < ((_2986 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3365 = _2971;
                float _3366 = _2973;
                float _3367 = _2975;
                float _3368 = _2977;
                float _3369 = _2979;
                float _3370 = _2981;
                uint _3371 = _2988;
                uint _3380;
                bool _3381;
                for (;;)
                {
                    _3380 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                    _3381 = _3380 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3381)
                    {
                        frontier_phi_69_pred = _3370;
                        frontier_phi_69_pred_1 = _3369;
                        frontier_phi_69_pred_2 = _3368;
                        frontier_phi_69_pred_3 = _3367;
                        frontier_phi_69_pred_4 = _3366;
                        frontier_phi_69_pred_5 = _3365;
                    }
                    else
                    {
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3608 = _3365;
                        float _3609 = _3366;
                        float _3610 = _3367;
                        float _3611 = _3368;
                        float _3612 = _3369;
                        float _3613 = _3370;
                        uint _3614 = _3380;
                        uint _3615;
                        vec4 _3640;
                        float _3641;
                        vec4 _3656;
                        vec3 _3668;
                        vec4 _3683;
                        vec4 _3698;
                        float _3744;
                        bool _3745;
                        for (;;)
                        {
                            uint _3625 = ((_3371 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3614));
                            _3615 = (_3614 + 4294967295u) & _3614;
                            uint _3627 = _3625 * 40u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3641 = _3640.w;
                            uint _3643 = (_3625 * 40u) + 4u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3625 * 40u) + 8u;
                            _3668 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x));
                            uint _3670 = (_3625 * 40u) + 16u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3625 * 40u) + 20u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3625 * 40u) + 24u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3719 = (_3625 * 40u) + 28u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            _3744 = fma(_2697, _3732.z, fma(_2696, _3732.y, _3732.x * _2695)) + _3732.w;
                            _3745 = !((fma(_2697, _3713.z, fma(_2696, _3713.y, _3713.x * _2695)) + _3713.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3745)
                            {
                                float _3772 = _3640.x - _2695;
                                float _3773 = _3640.y - _2696;
                                float _3774 = _3640.z - _2697;
                                float _3775 = dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774));
                                float _3778 = inversesqrt(_3775);
                                float _3779 = _3778 * _3772;
                                float _3780 = _3778 * _3773;
                                float _3781 = _3778 * _3774;
                                float _3785 = 1.0 - (_3775 / (_3641 * _3641));
                                float _4994 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3790 = sqrt(_3775) * _3656.w;
                                float _3792 = 1.39999997615814208984375 / (_3790 + 1.39999997615814208984375);
                                float _3793 = _3792 * _3792;
                                float _3796 = ((1.0 - _3793) * dot(vec3(_3779, _3780, _3781), vec3(_1286, _1289, _1292))) + _3793;
                                float _3799 = _3790 * _3790;
                                float _3803 = (fma(_2697, _3683.z, fma(_2696, _3683.y, _3683.x * _2695)) + _3683.w) / _3744;
                                float _3804 = (fma(_2697, _3698.z, fma(_2696, _3698.y, _3698.x * _2695)) + _3698.w) / _3744;
                                float _3808 = 1.0 - dot(vec2(_3803, _3804), vec2(_3803, _3804));
                                float _5010 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3810 = _3809 * (((isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0))) * _3786) / ((_3799 * 0.699999988079071044921875) + 1.0));
                                float _3822 = exp2(log2(1.0 / ((_3799 * 3.5) + 5.0)) * 0.25);
                                float _3823 = 1.0 - _1359;
                                float _3830 = sqrt(1.0 - ((1.0 - (_3823 * _3823)) * (1.0 - (_3822 * _3822))));
                                float _3831 = _3830 * _3830;
                                float _3832 = _3831 * _3831;
                                float _3833 = _3779 - _3180;
                                float _3834 = _3780 - _3181;
                                float _3835 = _3781 - _3182;
                                float _3839 = inversesqrt(dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835)));
                                float _3843 = dot(vec3(_1286, _1289, _1292), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _5021 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3847 = dot(vec3(_1286, _1289, _1292), vec3(_3839 * _3833, _3839 * _3834, _3839 * _3835));
                                float _5032 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3854 = ((_3850 * _3850) * (_3832 + (-1.0))) + 1.0;
                                float _3855 = _3792 * _3831;
                                float _3856 = _3855 * _3855;
                                float _3862 = ((1.0 - _3856) * dot(vec3(_1286, _1289, _1292), vec3(_3779, _3780, _3781))) + _3856;
                                float _5043 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3864 = 1.0 - _3831;
                                float _3874 = (0.5 / (((_3863 * ((_3846 * _3864) + _3831)) + 9.9999999392252902907785028219223e-09) + (((_3863 * _3864) + _3831) * _3846))) * _3863;
                                float _5054 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3884 = (_3809 * _3786) * (((_3832 * 3.1415927410125732421875) * (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0)))) / ((_3854 * _3854) * ((_3799 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3810 * _3656.x;
                                frontier_phi_75_pred_1 = _3810 * _3656.z;
                                frontier_phi_75_pred_2 = _3810 * _3656.y;
                                frontier_phi_75_pred_3 = _3884 * _3668.z;
                                frontier_phi_75_pred_4 = _3884 * _3668.y;
                                frontier_phi_75_pred_5 = _3884 * _3668.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3891 = frontier_phi_75_pred;
                            _3893 = frontier_phi_75_pred_1;
                            _3892 = frontier_phi_75_pred_2;
                            _3890 = frontier_phi_75_pred_3;
                            _3889 = frontier_phi_75_pred_4;
                            _3888 = frontier_phi_75_pred_5;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            if (_3615 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3615;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3600;
                        frontier_phi_69_pred_1 = _3599;
                        frontier_phi_69_pred_2 = _3598;
                        frontier_phi_69_pred_3 = _3597;
                        frontier_phi_69_pred_4 = _3596;
                        frontier_phi_69_pred_5 = _3595;
                    }
                    _3165 = frontier_phi_69_pred;
                    _3163 = frontier_phi_69_pred_1;
                    _3161 = frontier_phi_69_pred_2;
                    _3159 = frontier_phi_69_pred_3;
                    _3157 = frontier_phi_69_pred_4;
                    _3155 = frontier_phi_69_pred_5;
                    uint _3372 = _3371 + 1u;
                    if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3365 = _3155;
                        _3366 = _3157;
                        _3367 = _3159;
                        _3368 = _3161;
                        _3369 = _3163;
                        _3370 = _3165;
                        _3371 = _3372;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _3157;
                frontier_phi_44_45_ladder_1 = _3165;
                frontier_phi_44_45_ladder_2 = _3163;
                frontier_phi_44_45_ladder_3 = _3161;
                frontier_phi_44_45_ladder_4 = _3159;
                frontier_phi_44_45_ladder_5 = _3155;
            }
            else
            {
                frontier_phi_44_45_ladder = _2973;
                frontier_phi_44_45_ladder_1 = _2981;
                frontier_phi_44_45_ladder_2 = _2979;
                frontier_phi_44_45_ladder_3 = _2977;
                frontier_phi_44_45_ladder_4 = _2975;
                frontier_phi_44_45_ladder_5 = _2971;
            }
            _3154 = frontier_phi_44_45_ladder_5;
            _3156 = frontier_phi_44_45_ladder;
            _3158 = frontier_phi_44_45_ladder_4;
            _3160 = frontier_phi_44_45_ladder_3;
            _3162 = frontier_phi_44_45_ladder_2;
            _3164 = frontier_phi_44_45_ladder_1;
        }
        float _3169 = isnan(1.0) ? _1330 : (isnan(_1330) ? 1.0 : min(_1330, 1.0));
        _2754 = (_3169 * _3160) + _2478;
        _2756 = (_3169 * _3162) + _2479;
        _2758 = (_3169 * _3164) + _2480;
        _2760 = ((_3154 * 0.039999999105930328369140625) * _3169) + _2637;
        _2762 = ((_3156 * 0.039999999105930328369140625) * _3169) + _2638;
        _2764 = ((_3158 * 0.039999999105930328369140625) * _3169) + _2639;
    }
    else
    {
        _2754 = _2478;
        _2756 = _2479;
        _2758 = _2480;
        _2760 = _2637;
        _2762 = _2638;
        _2764 = _2639;
    }
    uint _2770 = _1306 + uint(cbMatDynParam._m0[0u].w);
    float _2797 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2798 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2799 = cbSceneParam._m0[86u].x * ((_1230 / cbSceneParam._m0[86u].x) + (((10.0 / (_1155 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1266, _1267, _1268), vec3(_230, _231, _232))));
    float _2800 = isnan(_2797) ? _2799 : (isnan(_2799) ? _2797 : min(_2799, _2797));
    float _2801 = isnan(_2798) ? _1231 : (isnan(_1231) ? _2798 : min(_1231, _2798));
    vec4 _2803 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2800, _2801), 0.0);
    float _2805 = _2803.x;
    bool _2825 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2805)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2805))) > _1155;
    float _2826 = _2825 ? _2800 : _1230;
    float _2827 = _2825 ? _2801 : _1231;
    vec4 _2829 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2826, _2827));
    vec4 _2834 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2826, _2827));
    float _2836 = _2834.x;
    float _2856 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2836)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2836))) - _1155;
    bool _2866 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2870 = (isnan(_2856) ? 0.0 : (isnan(0.0) ? _2856 : max(0.0, _2856))) * (-1.44269502162933349609375);
    float _5085 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _5096 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _5107 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _2898 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2901 = ((_2829.x * _2898) * exp2(_2870 * (_2866 ? 0.0 : (cbMtdParam._m0[38u].x + cbMtdParam._m0[36u].z)))) * cbSceneParam._m0[72u].w;
    float _2904 = ((_2829.y * _2898) * exp2(_2870 * (_2866 ? 0.0 : (cbMtdParam._m0[38u].y + cbMtdParam._m0[36u].w)))) * cbSceneParam._m0[72u].w;
    float _2907 = ((_2829.z * _2898) * exp2(_2870 * (_2866 ? 0.0 : (cbMtdParam._m0[38u].z + cbMtdParam._m0[37u].x)))) * cbSceneParam._m0[72u].w;
    float _2916 = (((cbInstanceData._m0[_2770].x * (_950 - (_950 * TEXCOORD_7.x))) + ((_2760 + ((isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))) * _2169)) * cbPerFrame._m0[3u].x)) + _2901) + ((((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_2754 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1330))) - _2901) * _1077);
    float _2919 = (((cbInstanceData._m0[_2770].y * (_952 - (_952 * TEXCOORD_7.y))) + ((_2762 + ((isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0))) * _2169)) * cbPerFrame._m0[3u].x)) + _2904) + ((((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_2756 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1330))) - _2904) * _1077);
    float _2922 = (((cbInstanceData._m0[_2770].z * (_954 - (_954 * TEXCOORD_7.z))) + ((_2764 + ((isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0))) * _2169)) * cbPerFrame._m0[3u].x)) + _2907) + ((((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_2758 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1330))) - _2907) * _1077);
    float _2923 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
    float _2924 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
    float _2925 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    uint _2926 = _1305 + 6u;
    float _2934 = _1230 / cbSceneParam._m0[86u].x;
    float _2935 = _1231 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _1155 : (isnan(_1155) ? cbSceneParam._m0[77u].w : min(_1155, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_1155 > cbSceneParam._m0[78u].w)
    {
        float _2996 = isnan(_1155) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1155 : min(cbSceneParam._m0[80u].w, _1155));
        float _2997 = _2996 / _1155;
        float _3008 = _2997 * _1204;
        float _3009 = _1205 * _2997;
        float _3010 = (-0.0) - _3009;
        float _3011 = _2997 * _1206;
        float _3013 = (cbSceneParam._m0[77u].w * _3010) / _2996;
        float _3014 = _3013 + cbSceneParam._m0[79u].w;
        float _3015 = cbSceneParam._m0[79u].w - _3009;
        float _3021 = sqrt(((_3008 * _3008) + (_3009 * _3009)) + (_3011 * _3011));
        float _3024 = (1.0 - (cbSceneParam._m0[77u].w / _2996)) * _3021;
        float _3030 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3031 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3296;
        if (abs((_3010 - _3013) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3296 = ((((_3014 > 0.0) ? exp2(_3030 * _3014) : (2.0 - exp2(_3031 * _3014))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3024;
        }
        else
        {
            float _3215 = 1.0 / cbSceneParam._m0[80u].x;
            float _3216 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : max(_3014, _3015));
            float _3217 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : min(_3014, _3015));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            _3296 = ((abs(_3021 / _3010) * cbSceneParam._m0[80u].y) * ((((_3226 - _3227) * 2.0) - ((exp2(_3030 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0)))) - exp2(_3030 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))))) * _3215)) - ((exp2(_3031 * _3226) - exp2(_3031 * _3227)) * _3215))) + (_3024 * cbSceneParam._m0[80u].z);
        }
        vec4 _3298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3307 = exp2((_3296 * (-1.44269502162933349609375)) * (1.0 - _3298.w));
        float _3308 = log2(_3307);
        float _3324 = log2(_2954);
        _3033 = (exp2(_3324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].x)) * _3298.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3035 = (exp2(_3324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].y)) * _3298.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3037 = (exp2(_3324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].z)) * _3298.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3039 = _3307 * _2954;
    }
    else
    {
        _3033 = _2951;
        _3035 = _2952;
        _3037 = _2953;
        _3039 = _2954;
    }
    bool _3334;
    float _3094;
    vec4 _3097;
    float _3099;
    vec4 _3101;
    float _3109;
    float _3110;
    float _3111;
    float _3112;
    bool _3122;
    for (;;)
    {
        bool _3051 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3052 = log2(_3039);
        float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * _2923;
        float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * _2924;
        float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * _2925;
        vec4 _3069 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1230, _1231));
        float _3071 = _3069.x;
        float _3092 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3071)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3071))) - _1155) * cbMtdParam._m0[23u].y;
        float _5173 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        _3094 = (isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0))) * cbInstanceData._m0[_2926].w;
        float _3095 = _1220 + (-0.5);
        _3097 = cbMtdParam._m0[1u];
        _3099 = _3097.y * _3095;
        _3101 = cbMatDynParam._m0[0u];
        float _3108 = (roundEven(_3101.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3109 = _3108 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3033)));
        _3110 = _3108 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3035)));
        _3111 = _3108 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3037)));
        _3112 = _3095 * 0.999000012874603271484375;
        _3122 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3122)
        {
            if ((cbInstanceData._m0[_1305 + 7u].x + _3112) < 0.5)
            {
                _3334 = true;
                break;
            }
        }
        uint _3250 = _1306 + uint(_3101.w);
        if ((cbInstanceData._m0[_3250].w < 1.0) && ((cbInstanceData._m0[_3250].w + _3112) < 0.5))
        {
            _3334 = true;
            break;
        }
        if ((_3099 + 1.0) < _3097.x)
        {
            _3334 = true;
            break;
        }
        _3334 = false;
        break;
    }
    float _3565;
    if (_3334)
    {
        discard_state = true;
        _3565 = 0.0;
    }
    else
    {
        _3565 = _3094;
    }
    SV_Target.x = _3109;
    SV_Target.y = _3110;
    SV_Target.z = _3111;
    SV_Target.w = _3565;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3094;
    discard_exit();
}


