#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1737;
float _4287;
float _4288;
float _4289;
float _4290;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _320 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _322 = (sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0)));
    float _326 = _322 / cbMtdParam._m0[22u].z;
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(8.0) ? _327 : (isnan(_327) ? 8.0 : min(_327, 8.0));
    float _335 = cbMtdParam._m0[10u].x * _328;
    float _336 = cbMtdParam._m0[10u].y * _328;
    float _337 = cbMtdParam._m0[10u].z * _328;
    float _338 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _339 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _351 = cbMtdParam._m0[21u].y + _322;
    float _355 = _351 * cbMtdParam._m0[23u].z;
    float _4344 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    vec4 _374 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _377 = _374.x;
    float _401 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _377)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _377))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _4355 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _407 = 1.0 - (isnan(cbMtdParam._m0[24u].w) ? _402 : (isnan(_402) ? cbMtdParam._m0[24u].w : max(_402, cbMtdParam._m0[24u].w)));
    float _409 = (cbMtdParam._m0[24u].z + TEXCOORD_3.x) - (_407 * cbMtdParam._m0[20u].z);
    float _425 = (cbMtdParam._m0[27u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[19u].z;
    float _430 = cbMtdParam._m0[33u].x * TEXCOORD.x;
    float _431 = cbMtdParam._m0[33u].y * TEXCOORD.y;
    vec4 _445 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_2, SS_BumpMap), vec2((((_425 * cbMtdParam._m0[33u].z) + _430) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_431 + (_425 * cbMtdParam._m0[33u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _4371 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _451 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _452 = _445.z - _451;
    float _4382 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _465 = (_453 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _467 = (_453 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _480 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_465 + (cbMtdParam._m0[29u].z * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_467 + (cbMtdParam._m0[29u].w * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _484 = _480.z;
    vec4 _495 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_465 + (cbMtdParam._m0[29u].x * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_467 + (cbMtdParam._m0[29u].y * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _499 = _495.z;
    float _502 = (_407 - _445.w) + (isnan(_499) ? _484 : (isnan(_484) ? _499 : max(_484, _499)));
    float _4398 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = (_409 * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)));
    float _505 = _504 * TEXCOORD_7.w;
    float _517 = ((_504 + cbMtdParam._m0[9u].x) - _505) + (cbMtdParam._m0[15u].x * _453);
    float _520 = ((_504 + cbMtdParam._m0[9u].y) - _505) + (cbMtdParam._m0[15u].y * _453);
    float _523 = ((_504 + cbMtdParam._m0[9u].z) - _505) + (cbMtdParam._m0[15u].z * _453);
    vec4 _569 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].x * _425))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].y * _425))) + cbTextureTilingScale._m0[1u].w));
    float _574 = _569.z * 0.099999986588954925537109375;
    float _4409 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _576 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _580 = cbMtdParam._m0[23u].x * _322;
    float _4420 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _581 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _595 = (_517 + (isnan(0.07999999821186065673828125) ? _338 : (isnan(_338) ? 0.07999999821186065673828125 : min(_338, 0.07999999821186065673828125)))) + (_581 * (((1.0 - _517) - _576) + _574));
    float _597 = (_520 + (isnan(0.07999999821186065673828125) ? _339 : (isnan(_339) ? 0.07999999821186065673828125 : min(_339, 0.07999999821186065673828125)))) + (_581 * (((1.0 - _520) - _576) + _574));
    float _599 = (_523 + (isnan(0.07999999821186065673828125) ? _340 : (isnan(_340) ? 0.07999999821186065673828125 : min(_340, 0.07999999821186065673828125)))) + (_581 * (((1.0 - _523) + _574) - _576));
    float _4431 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _600 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _601 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _609 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _451) + cbMtdParam._m0[19u].x;
    float _621 = (POSITION_1.w - cbMtdParam._m0[27u].y) * (1.0 / cbMtdParam._m0[27u].x);
    float _4464 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _635 = (cbMtdParam._m0[32u].x * _425) + _430;
    float _636 = (cbMtdParam._m0[32u].y * _425) + _431;
    vec4 _663 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[31u].z * _425) + _430)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[31u].w * _425) + _431)) + cbTextureTilingScale._m0[3u].w));
    float _670 = (_663.x * 2.0) + (-1.0);
    float _672 = (_663.y * 2.0) + (-1.0);
    float _676 = 1.0 - dot(vec2(_670, _672), vec2(_670, _672));
    float _4475 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _678 = sqrt(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)));
    float _681 = fma(_678, _239, fma(_672, _246, _670 * _232));
    float _684 = fma(_678, _240, fma(_672, _247, _670 * _233));
    float _687 = fma(_678, _241, fma(_672, _248, _670 * _234));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = cbPerFrame._m0[22u].x * 2.0;
    float _693 = _692 * cbMtdParam._m0[25u].w;
    float _697 = ((_681 * 0.5) * _691) + (-0.25);
    float _701 = ((_684 * 0.5) * _691) + (-0.25);
    float _702 = _701 * cbMtdParam._m0[26u].x;
    float _704 = (-0.0) - (cbMtdParam._m0[26u].x * _697);
    float _705 = fract(_693);
    float _707 = fract(_693 + 0.5);
    float _718 = abs((_705 * 2.0) + (-1.0));
    vec4 _735 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_705 * _704) + _635) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_702 * _705) + _636) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _737 = _735.x;
    float _738 = _735.y;
    float _739 = _735.z;
    vec4 _740 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_707 * _704) + _635) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_702 * _707) + _636) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _751 = ((_740.x - _737) * _718) + _737;
    float _752 = ((_740.y - _738) * _718) + _738;
    float _753 = ((_740.z - _739) * _718) + _739;
    float _767 = (cbMtdParam._m0[31u].x * _425) + _430;
    float _768 = (cbMtdParam._m0[31u].y * _425) + _431;
    float _771 = _692 * cbMtdParam._m0[25u].z;
    float _772 = _701 * cbMtdParam._m0[25u].y;
    float _774 = (-0.0) - (cbMtdParam._m0[25u].y * _697);
    float _775 = fract(_771);
    float _777 = fract(_771 + 0.5);
    float _788 = abs((_775 * 2.0) + (-1.0));
    vec4 _805 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_775 * _774) + _767) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_772 * _775) + _768) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    vec4 _810 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_777 * _774) + _767) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_772 * _777) + _768) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _844 = (((((cbMtdParam._m0[16u].x - cbMtdParam._m0[18u].x) * _751) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].x) * (((_810.x - _805.x) * _788) + _805.x)) + (_751 * cbMtdParam._m0[17u].x);
    float _847 = (((((cbMtdParam._m0[16u].y - cbMtdParam._m0[18u].y) * _752) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].y) * (((_810.y - _805.y) * _788) + _805.y)) + (_752 * cbMtdParam._m0[17u].y);
    float _850 = ((((cbMtdParam._m0[28u].x * _753) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_810.z - _805.z) * _788) + _805.z)) + (_753 * cbMtdParam._m0[17u].z);
    float _854 = _844 - (_844 * _622);
    float _855 = _847 - (_847 * _622);
    float _856 = _850 - (_850 * _622);
    float _861 = (POSITION_1.w - cbMtdParam._m0[26u].w) * (1.0 / cbMtdParam._m0[26u].z);
    float _4486 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _862 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _872 = (cbMtdParam._m0[32u].z * _425) + _430;
    float _873 = (cbMtdParam._m0[32u].w * _425) + _431;
    vec4 _886 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_872 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_873 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _888 = _886.x;
    float _889 = _886.y;
    float _890 = _886.z;
    vec4 _912 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _872) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _873) + cbTextureTilingScale._m0[7u].w));
    float _952 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].x) * (((((_888 * cbMtdParam._m0[11u].x) - _854) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _888) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].x) * _912.x)) * _862) + _854);
    float _954 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].y) * (((((_889 * cbMtdParam._m0[11u].y) - _855) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _889) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].y) * _912.y)) * _862) + _855);
    float _956 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].z) * (((((_890 * cbMtdParam._m0[11u].z) - _856) + ((((cbMtdParam._m0[28u].y * _890) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _912.z)) * _862) + _856);
    float _4497 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _963 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _973 = _322 / cbMtdParam._m0[22u].w;
    float _4508 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _974 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _975 = _453 * 0.23999999463558197021484375;
    float _977 = _453 * (-0.20000000298023223876953125);
    float _988 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _989 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _998 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].z * _425) + _975) + _988) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[34u].w * _425) + _977) + _989) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1014 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_988 + _975) + (cbMtdParam._m0[35u].z * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_989 + _977) + (cbMtdParam._m0[35u].w * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1034 = (((_495.x + (-0.5)) * 0.5) + _480.x) + (((_998.x + (-1.0)) + _1014.x) * cbMtdParam._m0[24u].y);
    float _1035 = (((_495.y + (-0.5)) * 0.5) + _480.y) + (((_998.y + (-1.0)) + _1014.y) * cbMtdParam._m0[24u].y);
    float _1040 = ((_569.x - _1034) * _974) + _1034;
    float _1041 = ((_569.y - _1035) * _974) + _1035;
    float _1043 = _322 / cbMtdParam._m0[22u].y;
    float _4519 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1044 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _1060 = ((((_963 * (0.5 - _447)) + _447) + (((_1040 + (-0.5)) + ((0.5 - _1040) * _1044)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1061 = ((((_963 * (0.5 - _448)) + _448) + (((_1041 + (-0.5)) + ((0.5 - _1041) * _1044)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1062 = dot(vec2(_1060, _1061), vec2(_1060, _1061));
    float _4530 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1067 = sqrt(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))));
    float _1069 = cbMtdParam._m0[23u].w * _351;
    float _4541 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1076 = cbMtdParam._m0[21u].w * _351;
    float _4552 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1078 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * cbMtdParam._m0[26u].y;
    float _4563 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1079 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _1084 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1089 = _1060 - (_1084 * _1060);
    float _1090 = _1061 - (_1084 * _1061);
    float _1091 = (_1084 * (1.0 - _1067)) + _1067;
    float _1110 = fma(_1067, _239, fma(_1061, _246, _1060 * _232));
    float _1113 = fma(_1067, _240, fma(_1061, _247, _1060 * _233));
    float _1116 = fma(_1067, _241, fma(_1061, _248, _1060 * _234));
    float _1120 = inversesqrt(dot(vec3(_1110, _1113, _1116), vec3(_1110, _1113, _1116)));
    float _1121 = _1120 * _1110;
    float _1122 = _1120 * _1113;
    float _1123 = _1120 * _1116;
    float _1126 = fma(_1091, _239, fma(_1090, _246, _1089 * _232));
    float _1129 = fma(_1091, _240, fma(_1090, _247, _1089 * _233));
    float _1132 = fma(_1091, _241, fma(_1090, _248, _1089 * _234));
    float _1136 = inversesqrt(dot(vec3(_1126, _1129, _1132), vec3(_1126, _1129, _1132)));
    float _1137 = _1136 * _1126;
    float _1138 = _1136 * _1129;
    float _1139 = _1136 * _1132;
    float _4574 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _1140 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4596 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4607 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1157 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1206 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1197);
    float _1207 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1197);
    float _1208 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1197);
    float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
    float _1213 = _1206 * _1212;
    float _1214 = _1207 * _1212;
    float _1215 = _1208 * _1212;
    vec4 _1220 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1222 = _1220.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1422 = sqrt(((_1206 * _1206) + (_1207 * _1207)) + (_1208 * _1208));
        float _1428 = (cbMatDynParam._m0[5u].x * _1422) + cbMatDynParam._m0[5u].y;
        float _4618 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1433 = (cbMatDynParam._m0[5u].z * _1422) + cbMatDynParam._m0[5u].w;
        float _4629 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) - _1429)) + _1429) < ((_1222 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1232 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1233 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1235 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1244 = (_1235.x * 2.0) + (-1.0);
    float _1245 = (_1235.y * 2.0) + (-1.0);
    float _1246 = (_1235.z * 2.0) + (-1.0);
    float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
    float _1261 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1235.w;
    float _1268 = (((_1244 * _1250) - _1121) * _1261) + _1121;
    float _1269 = (((_1245 * _1250) - _1122) * _1261) + _1122;
    float _1270 = (((_1246 * _1250) - _1123) * _1261) + _1123;
    float _1288 = fma(_1270, cbSceneParam._m0[5u].z, fma(_1269, cbSceneParam._m0[5u].y, _1268 * cbSceneParam._m0[5u].x));
    float _1291 = fma(_1270, cbSceneParam._m0[6u].z, fma(_1269, cbSceneParam._m0[6u].y, _1268 * cbSceneParam._m0[6u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[7u].z, fma(_1269, cbSceneParam._m0[7u].y, _1268 * cbSceneParam._m0[7u].x));
    uint _1307 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1308 = _1307 + 9u;
    uint _1309 = _1308 + uint(cbMatDynParam._m0[0u].w);
    float _1315 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * cbInstanceData._m0[_1309].x;
    float _1316 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * cbInstanceData._m0[_1309].y;
    float _1317 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * cbInstanceData._m0[_1309].z;
    float _4640 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1318 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _4651 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1319 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _4662 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1320 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    vec4 _1329 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1232, cbSceneParam._m0[86u].y * _1233));
    float _1332 = _1329.x * TEXCOORD_3.w;
    float _1336 = abs(dot(vec3(_1213, _1214, _1215), vec3(_1268, _1269, _1270)));
    float _4673 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1349 = dot(vec3(_1137, _1138, _1139), vec3(_1213, _1214, _1215)) * 2.0;
    float _1353 = (_1349 * _1137) - _1213;
    float _1354 = (_1349 * _1138) - _1214;
    float _1355 = (_1349 * _1139) - _1215;
    float _1359 = abs(dot(vec3(_1213, _1214, _1215), vec3(_1137, _1138, _1139)));
    float _4684 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
    float _1361 = sqrt(_1140);
    float _1373 = exp2((_1361 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1361 * 3.0));
    float _1404 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1408 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1412 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1736;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1465 = fma(_1412, cbModelParam._m0[26u].z, fma(_1408, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1404));
        float _1469 = fma(_1412, cbModelParam._m0[27u].z, fma(_1408, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1404));
        float _1473 = fma(_1412, cbModelParam._m0[28u].z, fma(_1408, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1404));
        float _1495 = _1404 + _1137;
        float _1496 = _1408 + _1138;
        float _1497 = _1412 + _1139;
        float _1507 = fma(_1497, cbModelParam._m0[26u].z, fma(_1496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1495)) - _1465;
        float _1508 = fma(_1497, cbModelParam._m0[27u].z, fma(_1496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1495)) - _1469;
        float _1509 = fma(_1497, cbModelParam._m0[28u].z, fma(_1496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1495)) - _1473;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1525 = ((_1513 * _1507) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1465 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1513 * _1508) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1469 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1509) / cbModelParam._m0[34u].z) + ((((((_1473 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1564 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1530.x + (-0.5));
        float _1566 = _1564 * (_1530.y + (-0.5));
        float _1567 = _1564 * (_1530.z + (-0.5));
        float _1574 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1537.x + (-0.5));
        float _1576 = _1574 * (_1537.y + (-0.5));
        float _1577 = _1574 * (_1537.z + (-0.5));
        float _1584 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1544.x + (-0.5));
        float _1586 = _1584 * (_1544.y + (-0.5));
        float _1587 = _1584 * (_1544.z + (-0.5));
        float _1594 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1551.x + (-0.5));
        float _1596 = _1594 * (_1551.y + (-0.5));
        float _1597 = _1594 * (_1551.z + (-0.5));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = _1565 * 0.5;
        float _1602 = _1575 * 0.5;
        float _1603 = _1585 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1618 = (dot(vec3(_1137, _1138, _1139), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4710 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1628 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4721 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4732 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_1630 + 1.0))) + _1635) * _1598;
        float _1645 = _1566 * 0.5;
        float _1646 = _1576 * 0.5;
        float _1647 = _1586 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_1137, _1138, _1139), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4743 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4754 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4765 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_1672 + 1.0))) + _1677) * _1599;
        float _1687 = _1567 * 0.5;
        float _1688 = _1577 * 0.5;
        float _1689 = _1587 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_1137, _1138, _1139), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4776 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4787 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4798 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_1714 + 1.0))) + _1719) * _1600;
        _1736 = _1567;
        _1738 = _1566;
        _1739 = _1565;
        _1740 = _1577;
        _1741 = _1576;
        _1742 = _1575;
        _1743 = _1587;
        _1744 = _1586;
        _1745 = _1585;
        _1746 = _1600;
        _1747 = _1599;
        _1748 = _1598;
        _1749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1737;
        _1738 = _1737;
        _1739 = _1737;
        _1740 = _1737;
        _1741 = _1737;
        _1742 = _1737;
        _1743 = _1737;
        _1744 = _1737;
        _1745 = _1737;
        _1746 = _1737;
        _1747 = _1737;
        _1748 = _1737;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _2045;
    float _2046;
    float _2047;
    float _2048;
    float _2049;
    float _2050;
    float _2051;
    float _2052;
    float _2053;
    float _2054;
    float _2055;
    float _2056;
    float _2057;
    float _2058;
    float _2059;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1778 = fma(_1412, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404));
        float _1782 = fma(_1412, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404));
        float _1786 = fma(_1412, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404));
        float _1808 = _1404 + _1137;
        float _1809 = _1408 + _1138;
        float _1810 = _1412 + _1139;
        float _1820 = fma(_1810, cbModelParam._m0[30u].z, fma(_1809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1808)) - _1778;
        float _1821 = fma(_1810, cbModelParam._m0[31u].z, fma(_1809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1808)) - _1782;
        float _1822 = fma(_1810, cbModelParam._m0[32u].z, fma(_1809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1808)) - _1786;
        float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
        float _1838 = ((_1826 * _1820) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1778 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1839 = ((_1826 * _1821) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1782 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1840 = ((_1826 * _1822) / cbModelParam._m0[35u].z) + ((((((_1786 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1842 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1838, _1839, _1840), 0.0);
        vec4 _1849 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1838, _1839, _1840), 0.0);
        vec4 _1856 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1838, _1839, _1840), 0.0);
        vec4 _1863 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1838, _1839, _1840), 0.0);
        float _1875 = exp2((_1842.w + (-0.5)) * 20.0) * 2.0;
        float _1876 = _1875 * (_1842.x + (-0.5));
        float _1877 = _1875 * (_1842.y + (-0.5));
        float _1878 = _1875 * (_1842.z + (-0.5));
        float _1885 = exp2((_1849.w + (-0.5)) * 20.0) * 2.0;
        float _1886 = _1885 * (_1849.x + (-0.5));
        float _1887 = _1885 * (_1849.y + (-0.5));
        float _1888 = _1885 * (_1849.z + (-0.5));
        float _1895 = exp2((_1856.w + (-0.5)) * 20.0) * 2.0;
        float _1896 = _1895 * (_1856.x + (-0.5));
        float _1897 = _1895 * (_1856.y + (-0.5));
        float _1898 = _1895 * (_1856.z + (-0.5));
        float _1905 = exp2((_1863.w + (-0.5)) * 20.0) * 2.0;
        float _1906 = _1905 * (_1863.x + (-0.5));
        float _1907 = _1905 * (_1863.y + (-0.5));
        float _1908 = _1905 * (_1863.z + (-0.5));
        float _1909 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1910 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1911 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1912 = _1876 * 0.5;
        float _1913 = _1886 * 0.5;
        float _1914 = _1896 * 0.5;
        float _1915 = dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914));
        float _1920 = (_1915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1915);
        float _1928 = (dot(vec3(_1137, _1138, _1139), vec3(_1920 * _1912, _1920 * _1913, _1920 * _1914)) + 1.0) * 0.5;
        float _4839 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1937 = sqrt(((_1913 * _1913) + (_1912 * _1912)) + (_1914 * _1914)) / (_1909 + 9.9999997473787516355514526367188e-06);
        float _4850 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _1939 = _1938 * 2.0;
        float _1943 = (1.0 - _1938) / (_1938 + 1.0);
        float _4861 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _1953 = ((((1.0 - _1944) * (_1939 + 2.0)) * exp2(log2(isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_1939 + 1.0))) + _1944) * _1909;
        float _1954 = _1877 * 0.5;
        float _1955 = _1887 * 0.5;
        float _1956 = _1897 * 0.5;
        float _1957 = dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956));
        float _1962 = (_1957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1957);
        float _1970 = (dot(vec3(_1137, _1138, _1139), vec3(_1962 * _1954, _1962 * _1955, _1962 * _1956)) + 1.0) * 0.5;
        float _4872 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1979 = sqrt(((_1955 * _1955) + (_1954 * _1954)) + (_1956 * _1956)) / (_1910 + 9.9999997473787516355514526367188e-06);
        float _4883 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1980 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _1981 = _1980 * 2.0;
        float _1985 = (1.0 - _1980) / (_1980 + 1.0);
        float _4894 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _1995 = ((((1.0 - _1986) * (_1981 + 2.0)) * exp2(log2(isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_1981 + 1.0))) + _1986) * _1910;
        float _1996 = _1878 * 0.5;
        float _1997 = _1888 * 0.5;
        float _1998 = _1898 * 0.5;
        float _1999 = dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998));
        float _2004 = (_1999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1999);
        float _2012 = (dot(vec3(_1137, _1138, _1139), vec3(_2004 * _1996, _2004 * _1997, _2004 * _1998)) + 1.0) * 0.5;
        float _4905 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2021 = sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998)) / (_1911 + 9.9999997473787516355514526367188e-06);
        float _4916 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _2023 = _2022 * 2.0;
        float _2027 = (1.0 - _2022) / (_2022 + 1.0);
        float _4927 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2037 = ((((1.0 - _2028) * (_2023 + 2.0)) * exp2(log2(isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2023 + 1.0))) + _2028) * _1911;
        _2045 = _1878;
        _2046 = _1877;
        _2047 = _1876;
        _2048 = _1888;
        _2049 = _1887;
        _2050 = _1886;
        _2051 = _1898;
        _2052 = _1897;
        _2053 = _1896;
        _2054 = _1911;
        _2055 = _1910;
        _2056 = _1909;
        _2057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)));
        _2058 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)));
        _2059 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)));
    }
    else
    {
        _2045 = _1737;
        _2046 = _1737;
        _2047 = _1737;
        _2048 = _1737;
        _2049 = _1737;
        _2050 = _1737;
        _2051 = _1737;
        _2052 = _1737;
        _2053 = _1737;
        _2054 = _1737;
        _2055 = _1737;
        _2056 = _1737;
        _2057 = 0.0;
        _2058 = 0.0;
        _2059 = 0.0;
    }
    float _2069 = (cbModelParam._m0[1u].x * (_2057 - _1749)) + _1749;
    float _2070 = (cbModelParam._m0[1u].x * (_2058 - _1750)) + _1750;
    float _2071 = (cbModelParam._m0[1u].x * (_2059 - _1751)) + _1751;
    float _2092 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2070, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2095 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2070, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2098 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2070, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2069));
    float _2113 = _1353 * 0.5;
    float _2114 = _1354 * 0.5;
    float _2115 = _1355 * 0.5;
    float _2116 = dot(vec4(_2113, _2114, _2115, 1.0), vec4(_2047, _2050, _2053, _2056));
    float _2119 = dot(vec4(_2113, _2114, _2115, 1.0), vec4(_2046, _2049, _2052, _2055));
    float _2122 = dot(vec4(_2113, _2114, _2115, 1.0), vec4(_2045, _2048, _2051, _2054));
    float _2156;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2129 = dot(vec4(_2113, _2114, _2115, 1.0), vec4(_1736, _1740, _1743, _1746));
        float _2133 = dot(vec4(_2113, _2114, _2115, 1.0), vec4(_1738, _1741, _1744, _1747));
        float _2137 = dot(vec4(_2113, _2114, _2115, 1.0), vec4(_1739, _1742, _1745, _1748));
        float _2144 = dot(vec4(cbModelParam._m0[39u]), vec4(_2113, _2114, _2115, 1.0));
        _2156 = dot(vec3(isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0)), isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)), isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2144) ? 0.0 : (isnan(0.0) ? _2144 : max(0.0, _2144))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2156 = 1.0;
    }
    float _2167;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2158 = dot(vec4(cbModelParam._m0[40u]), vec4(_2113, _2114, _2115, 1.0));
        _2167 = dot(vec3(isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0)), isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0)), isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2158) ? 0.0 : (isnan(0.0) ? _2158 : max(0.0, _2158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2167 = 1.0;
    }
    float _2171 = (_2167 * cbModelParam._m0[1u].x) + (_2156 * (1.0 - cbModelParam._m0[1u].x));
    float _2181 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1140);
    float _2182 = isnan(_2181) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2181 : min(cbModelParam._m0[25u].z, _2181));
    float _2262;
    float _2264;
    float _2266;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2229 = fma(_1412, cbModelParam._m0[13u].z, fma(_1408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1404)) + cbModelParam._m0[13u].w;
        float _2233 = fma(_1412, cbModelParam._m0[14u].z, fma(_1408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1404)) + cbModelParam._m0[14u].w;
        float _2237 = fma(_1412, cbModelParam._m0[15u].z, fma(_1408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1404)) + cbModelParam._m0[15u].w;
        float _2240 = fma(_1355, cbModelParam._m0[13u].z, fma(_1354, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1353));
        float _2243 = fma(_1355, cbModelParam._m0[14u].z, fma(_1354, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1353));
        float _2246 = fma(_1355, cbModelParam._m0[15u].z, fma(_1354, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1353));
        float _2274;
        if (_2240 > 0.0)
        {
            _2274 = abs((1.0 - _2229) / _2240);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2240 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2229 + 1.0) / _2240);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2274 = frontier_phi_17_15_ladder;
        }
        float _2443;
        if (_2243 > 0.0)
        {
            _2443 = abs((1.0 - _2233) / _2243);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2233 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2443 = frontier_phi_26_22_ladder;
        }
        float _2889;
        if (_2246 > 0.0)
        {
            _2889 = abs((1.0 - _2237) / _2246);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2246 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2237 + 1.0) / _2246);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2889 = frontier_phi_38_33_ladder;
        }
        float _2891 = isnan(_2443) ? _2274 : (isnan(_2274) ? _2443 : min(_2274, _2443));
        float _2892 = isnan(_2889) ? _2891 : (isnan(_2891) ? _2889 : min(_2891, _2889));
        float _2896 = (_2892 * _2240) + _2229;
        float _2897 = (_2892 * _2243) + _2233;
        float _2898 = (_2892 * _2246) + _2237;
        float _2899 = _2892 * 9.9999997473787516355514526367188e-05;
        float _2901 = (-1.0) - _2899;
        float _2903 = _2899 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2898 > _2903) || ((_2898 < _2901) || ((_2897 > _2903) || ((_2897 < _2901) || ((_2896 < _2901) || (_2896 > _2903))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2898, cbModelParam._m0[9u].z, fma(_2897, cbModelParam._m0[9u].y, _2896 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2898, cbModelParam._m0[10u].z, fma(_2897, cbModelParam._m0[10u].y, _2896 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2898, cbModelParam._m0[11u].z, fma(_2897, cbModelParam._m0[11u].y, _2896 * cbModelParam._m0[11u].x))), _2182);
            frontier_phi_16_38_ladder = _3271.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _3271.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _3271.x * cbModelParam._m0[1u].y;
        }
        _2262 = frontier_phi_16_38_ladder_2;
        _2264 = frontier_phi_16_38_ladder_1;
        _2266 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1353, _1354, _1355), _2182);
        _2262 = _2250.x * cbModelParam._m0[1u].y;
        _2264 = _2250.y * cbModelParam._m0[1u].y;
        _2266 = _2250.z * cbModelParam._m0[1u].y;
    }
    float _2270 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1140);
    float _2271 = isnan(_2270) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2270 : min(cbModelParam._m0[25u].w, _2270));
    float _2360;
    float _2362;
    float _2364;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2324 = fma(_1412, cbModelParam._m0[21u].z, fma(_1408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1404)) + cbModelParam._m0[21u].w;
        float _2328 = fma(_1412, cbModelParam._m0[22u].z, fma(_1408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1404)) + cbModelParam._m0[22u].w;
        float _2332 = fma(_1412, cbModelParam._m0[23u].z, fma(_1408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1404)) + cbModelParam._m0[23u].w;
        float _2335 = fma(_1355, cbModelParam._m0[21u].z, fma(_1354, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1353));
        float _2338 = fma(_1355, cbModelParam._m0[22u].z, fma(_1354, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1353));
        float _2341 = fma(_1355, cbModelParam._m0[23u].z, fma(_1354, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1353));
        float _2448;
        if (_2335 > 0.0)
        {
            _2448 = abs((1.0 - _2324) / _2335);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2335 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2324 + 1.0) / _2335);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2448 = frontier_phi_28_24_ladder;
        }
        float _2916;
        if (_2338 > 0.0)
        {
            _2916 = abs((1.0 - _2328) / _2338);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2338 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2328 + 1.0) / _2338);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2916 = frontier_phi_40_35_ladder;
        }
        float _3431;
        if (_2341 > 0.0)
        {
            _3431 = abs((1.0 - _2332) / _2341);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_2341 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_2332 + 1.0) / _2341);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _3431 = frontier_phi_52_47_ladder;
        }
        float _3433 = isnan(_2916) ? _2448 : (isnan(_2448) ? _2916 : min(_2448, _2916));
        float _3434 = isnan(_3431) ? _3433 : (isnan(_3433) ? _3431 : min(_3433, _3431));
        float _3438 = (_3434 * _2335) + _2324;
        float _3439 = (_3434 * _2338) + _2328;
        float _3440 = (_3434 * _2341) + _2332;
        float _3441 = _3434 * 9.9999997473787516355514526367188e-05;
        float _3442 = (-1.0) - _3441;
        float _3444 = _3441 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_3440 > _3444) || ((_3440 < _3442) || ((_3439 > _3444) || ((_3439 < _3442) || ((_3438 < _3442) || (_3438 > _3444))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3577 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3440, cbModelParam._m0[17u].z, fma(_3439, cbModelParam._m0[17u].y, _3438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3440, cbModelParam._m0[18u].z, fma(_3439, cbModelParam._m0[18u].y, _3438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3440, cbModelParam._m0[19u].z, fma(_3439, cbModelParam._m0[19u].y, _3438 * cbModelParam._m0[19u].x))), _2271);
            frontier_phi_25_52_ladder = _3577.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _3577.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _3577.x * cbModelParam._m0[1u].z;
        }
        _2360 = frontier_phi_25_52_ladder_2;
        _2362 = frontier_phi_25_52_ladder_1;
        _2364 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1353, _1354, _1355), _2271);
        _2360 = _2344.x * cbModelParam._m0[1u].z;
        _2362 = _2344.y * cbModelParam._m0[1u].z;
        _2364 = _2344.z * cbModelParam._m0[1u].z;
    }
    float _2376 = ((((1.0 - _1373) * ((_1361 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1373 * _1361)) * _1332;
    float _2377 = _2376 * ((cbModelParam._m0[1u].w * (_2360 - _2262)) + _2262);
    float _2378 = _2376 * ((cbModelParam._m0[1u].w * (_2362 - _2264)) + _2264);
    float _2379 = _2376 * ((cbModelParam._m0[1u].w * (_2364 - _2266)) + _2266);
    float _2382 = fma(_2379, cbSceneParam._m0[89u].z, fma(_2378, cbSceneParam._m0[89u].y, _2377 * cbSceneParam._m0[89u].x));
    float _2385 = fma(_2379, cbSceneParam._m0[90u].z, fma(_2378, cbSceneParam._m0[90u].y, _2377 * cbSceneParam._m0[90u].x));
    float _2388 = fma(_2379, cbSceneParam._m0[91u].z, fma(_2378, cbSceneParam._m0[91u].y, _2377 * cbSceneParam._m0[91u].x));
    float _2422 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2426 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2430 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2434 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2435 = _2422 / _2434;
    float _2436 = _2426 / _2434;
    float _2437 = _2430 / _2434;
    float _2583;
    float _2584;
    float _2585;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2464 = ((uint(_2437 > cbSceneParam._m0[59u].y) + uint(_2437 > cbSceneParam._m0[59u].x)) + uint(_2437 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2465 = _2464 + 43u;
        uint _2473 = _2464 + 44u;
        uint _2481 = _2464 + 45u;
        uint _2489 = _2464 + 46u;
        float _2500 = fma(_2434, cbSceneParam._m0[_2465].w, fma(_2430, cbSceneParam._m0[_2465].z, fma(_2426, cbSceneParam._m0[_2465].y, _2422 * cbSceneParam._m0[_2465].x)));
        float _2504 = fma(_2434, cbSceneParam._m0[_2473].w, fma(_2430, cbSceneParam._m0[_2473].z, fma(_2426, cbSceneParam._m0[_2473].y, _2422 * cbSceneParam._m0[_2473].x)));
        float _2512 = fma(_2434, cbSceneParam._m0[_2489].w, fma(_2430, cbSceneParam._m0[_2489].z, fma(_2426, cbSceneParam._m0[_2489].y, _2422 * cbSceneParam._m0[_2489].x)));
        float _2516 = cbSceneParam._m0[33u].z * _2512;
        float _2518 = cbSceneParam._m0[33u].w * _2512;
        float _2521 = fma(_2434, cbSceneParam._m0[_2481].w, fma(_2430, cbSceneParam._m0[_2481].z, fma(_2426, cbSceneParam._m0[_2481].y, _2422 * cbSceneParam._m0[_2481].x))) / _2512;
        float _2569 = (cbSceneParam._m0[33u].x - sqrt(((_2436 * _2436) + (_2435 * _2435)) + (_2437 * _2437))) * cbSceneParam._m0[33u].y;
        float _5053 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2576 = (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2516 + _2500) / _2512, (_2518 + _2504) / _2512), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2518 + _2500) / _2512, (_2504 - _2516) / _2512), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2500 - _2516) / _2512, (_2504 - _2518) / _2512), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2500 - _2518) / _2512, (_2516 + _2504) / _2512), _2521), 0.0)).x), vec4(0.25)));
        _2583 = 1.0 - (_2576 * cbSceneParam._m0[34u].x);
        _2584 = 1.0 - (_2576 * cbSceneParam._m0[34u].y);
        _2585 = 1.0 - (_2576 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2583 = 1.0;
        _2584 = 1.0;
        _2585 = 1.0;
    }
    float _2649;
    float _2651;
    float _2653;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2637 = fma(_2434, cbSceneParam._m0[63u].w, fma(_2430, cbSceneParam._m0[63u].z, fma(_2426, cbSceneParam._m0[63u].y, _2422 * cbSceneParam._m0[63u].x)));
        float _2638 = fma(_2434, cbSceneParam._m0[60u].w, fma(_2430, cbSceneParam._m0[60u].z, fma(_2426, cbSceneParam._m0[60u].y, _2422 * cbSceneParam._m0[60u].x))) / _2637;
        float _2639 = fma(_2434, cbSceneParam._m0[61u].w, fma(_2430, cbSceneParam._m0[61u].z, fma(_2426, cbSceneParam._m0[61u].y, _2422 * cbSceneParam._m0[61u].x))) / _2637;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2638 >= cbSceneParam._m0[64u].x) && (_2639 >= cbSceneParam._m0[64u].y)) && (_2638 <= cbSceneParam._m0[64u].z)) && (_2639 <= cbSceneParam._m0[64u].w))
        {
            float _2929 = fma(_2434, cbSceneParam._m0[62u].w, fma(_2430, cbSceneParam._m0[62u].z, fma(_2426, cbSceneParam._m0[62u].y, _2422 * cbSceneParam._m0[62u].x))) / _2637;
            float _2933 = isnan(cbSceneParam._m0[41u].w) ? _2929 : (isnan(_2929) ? cbSceneParam._m0[41u].w : max(_2929, cbSceneParam._m0[41u].w));
            float _2976 = (cbSceneParam._m0[33u].x - sqrt(((_2436 * _2436) + (_2435 * _2435)) + (_2437 * _2437))) * cbSceneParam._m0[33u].y;
            float _5069 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
            float _2983 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2638, cbSceneParam._m0[33u].w + _2639), _2933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2638, _2639 - cbSceneParam._m0[33u].z), _2933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2638 - cbSceneParam._m0[33u].z, _2639 - cbSceneParam._m0[33u].w), _2933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2638 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2639), _2933), 0.0)).x), vec4(0.25)));
            float _2987 = 1.0 - (_2983 * cbSceneParam._m0[34u].x);
            float _2988 = 1.0 - (_2983 * cbSceneParam._m0[34u].y);
            float _2989 = 1.0 - (_2983 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2989) ? _2585 : (isnan(_2585) ? _2989 : min(_2585, _2989));
            frontier_phi_37_36_ladder_1 = isnan(_2988) ? _2584 : (isnan(_2584) ? _2988 : min(_2584, _2988));
            frontier_phi_37_36_ladder_2 = isnan(_2987) ? _2583 : (isnan(_2583) ? _2987 : min(_2583, _2987));
        }
        else
        {
            frontier_phi_37_36_ladder = _2585;
            frontier_phi_37_36_ladder_1 = _2584;
            frontier_phi_37_36_ladder_2 = _2583;
        }
        _2649 = frontier_phi_37_36_ladder_2;
        _2651 = frontier_phi_37_36_ladder_1;
        _2653 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2649 = _2583;
        _2651 = _2584;
        _2653 = _2585;
    }
    uvec4 _2658 = floatBitsToUint(cbInstanceData._m0[_1307 + 5u]);
    uint _2660 = _2658.x * 14u;
    uint _2661 = _2660 + 13u;
    float _2666 = _1332 + (-1.0);
    float _2669 = (cbLight._m0[_2661].x * _2666) + 1.0;
    float _2670 = (cbLight._m0[_2661].y * _2666) + 1.0;
    uint _2671 = _2660 + 5u;
    float _2677 = isnan(1.0) ? _2670 : (isnan(_2670) ? 1.0 : min(_2670, 1.0));
    uint _2681 = _2660 + 4u;
    float _2690 = isnan(1.0) ? _2669 : (isnan(_2669) ? 1.0 : min(_2669, 1.0));
    uint _2694 = _2660 | 1u;
    float _2705 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_1268, _1269, _1270));
    float _2708 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_1268, _1269, _1270));
    float _5105 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _5116 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2713 = (isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * 0.3183098733425140380859375;
    float _2715 = (isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * 0.3183098733425140380859375;
    float _2722 = ((cbLight._m0[_2671].x * _2677) * _2715) + (((cbLight._m0[_2681].x * _2649) * _2690) * _2713);
    float _2723 = ((_2677 * cbLight._m0[_2671].y) * _2715) + (((cbLight._m0[_2681].y * _2651) * _2690) * _2713);
    float _2724 = ((_2677 * cbLight._m0[_2671].z) * _2715) + (((cbLight._m0[_2681].z * _2653) * _2690) * _2713);
    uint _2726 = _2660 + 8u;
    float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2660].w)) * _1140) * 0.949999988079071044921875);
    float _2740 = _2739 * _2739;
    float _2741 = cbLight._m0[_2660].x + _1213;
    float _2742 = cbLight._m0[_2660].y + _1214;
    float _2743 = cbLight._m0[_2660].z + _1215;
    float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
    float _2748 = _2747 * _2741;
    float _2749 = _2747 * _2742;
    float _2750 = _2747 * _2743;
    float _2751 = dot(vec3(_1268, _1269, _1270), vec3(cbLight._m0[_2660].xyz));
    float _5127 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2754 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
    float _2755 = dot(vec3(_1268, _1269, _1270), vec3(_1213, _1214, _1215));
    float _5138 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
    float _2759 = dot(vec3(_1268, _1269, _1270), vec3(_2748, _2749, _2750));
    float _5149 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2762 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
    float _2763 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_2748, _2749, _2750));
    float _5160 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2767 = _2740 * _2740;
    float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
    float _2782 = (exp2(log2(1.0 - (isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2783 = 1.0 - _2740;
    float _2794 = (0.5 / (((_2758 * ((_2754 * _2783) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2783) + _2740) * _2754))) * _2754;
    float _5171 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2796 = (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
    uint _2810 = _2660 + 9u;
    float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _1140) * 0.949999988079071044921875);
    float _2822 = _2821 * _2821;
    float _2823 = cbLight._m0[_2694].x + _1213;
    float _2824 = cbLight._m0[_2694].y + _1214;
    float _2825 = cbLight._m0[_2694].z + _1215;
    float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
    float _2830 = _2829 * _2823;
    float _2831 = _2829 * _2824;
    float _2832 = _2829 * _2825;
    float _2833 = dot(vec3(_1268, _1269, _1270), vec3(cbLight._m0[_2694].xyz));
    float _5182 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2836 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
    float _2837 = dot(vec3(_1268, _1269, _1270), vec3(_2830, _2831, _2832));
    float _5193 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2840 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
    float _2841 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2830, _2831, _2832));
    float _5204 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
    float _2845 = _2822 * _2822;
    float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
    float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2859 = 1.0 - _2822;
    float _2869 = (0.5 / (((_2758 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2859) + _2822) * _2836))) * _2836;
    float _5215 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2871 = (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
    float _2881 = (((_2858 * cbLight._m0[_2810].x) * _2871) * _2677) + ((((cbLight._m0[_2726].x * _2649) * _2782) * _2796) * _2690);
    float _2882 = (((_2858 * cbLight._m0[_2810].y) * _2871) * _2677) + ((((cbLight._m0[_2726].y * _2651) * _2782) * _2796) * _2690);
    float _2883 = (((_2858 * cbLight._m0[_2810].z) * _2871) * _2677) + ((((cbLight._m0[_2726].z * _2653) * _2782) * _2796) * _2690);
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_2658.y == 0u)
    {
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.x;
        uint _3013 = uint((float(_3001.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1233) / _3002))) + floor(float(uint(cbSceneParam._m0[85u].x * _1232) / _3002)));
        float _3023 = (log2(_2437 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3024 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        uint _3027 = uint(isnan(14.0) ? _3024 : (isnan(_3024) ? 14.0 : min(_3024, 14.0)));
        uvec4 _3032 = texelFetch(g_lightClusterGridBuffer, int(((_3027 << 2u) + (_3013 << 6u)) >> 2u));
        uint _3033 = _3032.x;
        uint _3034 = _3001.z;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        if (((((1u << ((_3034 >> 4u) & 15u)) + 4294967295u) & _3033) == 0u) || ((_3034 & 240u) == 0u))
        {
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
            _3290 = 0.0;
        }
        else
        {
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3289;
            float _3291;
            float _3489 = 0.0;
            float _3490 = 0.0;
            float _3491 = 0.0;
            float _3492 = 0.0;
            float _3493 = 0.0;
            float _3494 = 0.0;
            uint _3495 = 0u;
            uint _3504;
            bool _3505;
            for (;;)
            {
                _3504 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3495 << 2u)) >> 2u)).x;
                _3505 = _3504 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3505)
                {
                    frontier_phi_63_pred = _3494;
                    frontier_phi_63_pred_1 = _3493;
                    frontier_phi_63_pred_2 = _3492;
                    frontier_phi_63_pred_3 = _3491;
                    frontier_phi_63_pred_4 = _3490;
                    frontier_phi_63_pred_5 = _3489;
                }
                else
                {
                    float _3655;
                    float _3656;
                    float _3657;
                    float _3658;
                    float _3659;
                    float _3660;
                    uint _3661;
                    _3655 = _3489;
                    _3656 = _3490;
                    _3657 = _3491;
                    _3658 = _3492;
                    _3659 = _3493;
                    _3660 = _3494;
                    _3661 = _3504;
                    float _3582;
                    float _3583;
                    float _3584;
                    float _3585;
                    float _3586;
                    float _3587;
                    for (;;)
                    {
                        uint _3665 = uint(findLSB(_3661)) + (_3495 << 5u);
                        uint _3662 = (_3661 + 4294967295u) & _3661;
                        uint _3667 = _3665 * 48u;
                        vec4 _3681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3667)).x, texelFetch(g_PointLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3667 + 3u)).x));
                        uint _3687 = (_3665 * 48u) + 4u;
                        vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3687)).x, texelFetch(g_PointLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3687 + 3u)).x));
                        uint _3706 = (_3665 * 48u) + 8u;
                        vec3 _3717 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3706)).x, texelFetch(g_PointLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3706 + 2u)).x));
                        float _3721 = _3681.x - _2435;
                        float _3722 = _3681.y - _2436;
                        float _3723 = _3681.z - _2437;
                        float _3724 = dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723));
                        float _3727 = inversesqrt(_3724);
                        float _3728 = _3727 * _3721;
                        float _3729 = _3727 * _3722;
                        float _3730 = _3727 * _3723;
                        float _3731 = dot(vec3(_1288, _1291, _1294), vec3(_3728, _3729, _3730));
                        float _3736 = 1.0 - (_3724 * _3681.w);
                        float _5236 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                        float _3737 = isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0));
                        float _3738 = sqrt(_3724) * _3700.w;
                        float _3741 = 1.39999997615814208984375 / (_3738 + 1.39999997615814208984375);
                        float _3742 = _3741 * _3741;
                        float _3745 = ((1.0 - _3742) * _3731) + _3742;
                        float _3748 = _3738 * _3738;
                        float _3752 = ((isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0))) * _3737) / ((_3748 * 0.699999988079071044921875) + 1.0);
                        float _3756 = (-0.0) - _2435;
                        float _3757 = (-0.0) - _2436;
                        float _3758 = (-0.0) - _2437;
                        float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                        float _3763 = _3762 * _3756;
                        float _3764 = _3762 * _3757;
                        float _3765 = _3762 * _3758;
                        float _3772 = exp2(log2(1.0 / ((_3748 * 3.5) + 5.0)) * 0.25);
                        float _3773 = 1.0 - _1361;
                        float _3780 = sqrt(1.0 - ((1.0 - (_3773 * _3773)) * (1.0 - (_3772 * _3772))));
                        float _3781 = _3780 * _3780;
                        float _3782 = _3781 * _3781;
                        float _3783 = _3763 + _3728;
                        float _3784 = _3764 + _3729;
                        float _3785 = _3765 + _3730;
                        float _3789 = inversesqrt(dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785)));
                        float _3793 = dot(vec3(_1288, _1291, _1294), vec3(_3763, _3764, _3765));
                        float _5252 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                        float _3796 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                        float _3797 = dot(vec3(_1288, _1291, _1294), vec3(_3789 * _3783, _3789 * _3784, _3789 * _3785));
                        float _5263 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                        float _3800 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                        float _3804 = ((_3800 * _3800) * (_3782 + (-1.0))) + 1.0;
                        float _3805 = _3741 * _3781;
                        float _3806 = _3805 * _3805;
                        float _3809 = ((1.0 - _3806) * _3731) + _3806;
                        float _5274 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                        float _3810 = isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0));
                        float _3811 = 1.0 - _3781;
                        float _3821 = (0.5 / (((_3810 * ((_3796 * _3811) + _3781)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3781) * _3796))) * _3810;
                        float _5285 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                        float _3832 = (((_3782 * 3.1415927410125732421875) * (isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0)))) / ((_3804 * _3804) * ((_3748 * 2.1991131305694580078125) + 3.141590118408203125))) * _3737;
                        _3585 = (_3752 * _3700.x) + _3658;
                        _3586 = (_3752 * _3700.y) + _3659;
                        _3587 = (_3752 * _3700.z) + _3660;
                        _3582 = (_3832 * _3717.x) + _3655;
                        _3583 = (_3832 * _3717.y) + _3656;
                        _3584 = (_3832 * _3717.z) + _3657;
                        if (_3662 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3655 = _3582;
                            _3656 = _3583;
                            _3657 = _3584;
                            _3658 = _3585;
                            _3659 = _3586;
                            _3660 = _3587;
                            _3661 = _3662;
                        }
                    }
                    frontier_phi_63_pred = _3587;
                    frontier_phi_63_pred_1 = _3586;
                    frontier_phi_63_pred_2 = _3585;
                    frontier_phi_63_pred_3 = _3584;
                    frontier_phi_63_pred_4 = _3583;
                    frontier_phi_63_pred_5 = _3582;
                }
                _3291 = frontier_phi_63_pred;
                _3289 = frontier_phi_63_pred_1;
                _3287 = frontier_phi_63_pred_2;
                _3285 = frontier_phi_63_pred_3;
                _3283 = frontier_phi_63_pred_4;
                _3281 = frontier_phi_63_pred_5;
                uint _3496 = _3495 + 1u;
                if (_3496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3489 = _3281;
                    _3490 = _3283;
                    _3491 = _3285;
                    _3492 = _3287;
                    _3493 = _3289;
                    _3494 = _3291;
                    _3495 = _3496;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
            _3290 = _3291;
        }
        uvec4 _3294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3295 = _3294.z;
        uint _3297 = (_3295 >> 8u) & 15u;
        float _3457;
        float _3459;
        float _3461;
        float _3463;
        float _3465;
        float _3467;
        if (((4294967295u << _3297) & _3033) == 0u)
        {
            _3457 = _3280;
            _3459 = _3282;
            _3461 = _3284;
            _3463 = _3286;
            _3465 = _3288;
            _3467 = _3290;
        }
        else
        {
            float _3482 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
            float _3483 = _3482 * _2435;
            float _3484 = _3482 * _2436;
            float _3485 = _3482 * _2437;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_3297 < ((_3295 >> 12u) & 15u))
            {
                float _3458;
                float _3460;
                float _3462;
                float _3464;
                float _3466;
                float _3468;
                float _3638 = _3280;
                float _3639 = _3282;
                float _3640 = _3284;
                float _3641 = _3286;
                float _3642 = _3288;
                float _3643 = _3290;
                uint _3644 = _3297;
                uint _3653;
                bool _3654;
                for (;;)
                {
                    _3653 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3644 << 2u)) >> 2u)).x;
                    _3654 = _3653 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3654)
                    {
                        frontier_phi_74_pred = _3642;
                        frontier_phi_74_pred_1 = _3641;
                        frontier_phi_74_pred_2 = _3640;
                        frontier_phi_74_pred_3 = _3639;
                        frontier_phi_74_pred_4 = _3638;
                        frontier_phi_74_pred_5 = _3643;
                    }
                    else
                    {
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _4139;
                        float _4140;
                        float _4141;
                        float _4142;
                        float _4143;
                        float _4144;
                        float _3859 = _3638;
                        float _3860 = _3639;
                        float _3861 = _3640;
                        float _3862 = _3641;
                        float _3863 = _3642;
                        float _3864 = _3643;
                        uint _3865 = _3653;
                        uint _3866;
                        vec4 _3891;
                        float _3892;
                        vec4 _3907;
                        vec3 _3919;
                        vec4 _3934;
                        vec4 _3949;
                        float _3995;
                        bool _3996;
                        for (;;)
                        {
                            uint _3876 = ((_3644 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3865));
                            _3866 = (_3865 + 4294967295u) & _3865;
                            uint _3878 = _3876 * 40u;
                            _3891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 3u)).x));
                            _3892 = _3891.w;
                            uint _3894 = (_3876 * 40u) + 4u;
                            _3907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 3u)).x));
                            uint _3909 = (_3876 * 40u) + 8u;
                            _3919 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 2u)).x));
                            uint _3921 = (_3876 * 40u) + 16u;
                            _3934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 3u)).x));
                            uint _3936 = (_3876 * 40u) + 20u;
                            _3949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3936 + 3u)).x));
                            uint _3951 = (_3876 * 40u) + 24u;
                            vec4 _3964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3951 + 3u)).x));
                            uint _3970 = (_3876 * 40u) + 28u;
                            vec4 _3983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3970 + 3u)).x));
                            _3995 = fma(_2437, _3983.z, fma(_2436, _3983.y, _3983.x * _2435)) + _3983.w;
                            _3996 = !((fma(_2437, _3964.z, fma(_2436, _3964.y, _3964.x * _2435)) + _3964.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3996)
                            {
                                float _4023 = _3891.x - _2435;
                                float _4024 = _3891.y - _2436;
                                float _4025 = _3891.z - _2437;
                                float _4026 = dot(vec3(_4023, _4024, _4025), vec3(_4023, _4024, _4025));
                                float _4029 = inversesqrt(_4026);
                                float _4030 = _4029 * _4023;
                                float _4031 = _4029 * _4024;
                                float _4032 = _4029 * _4025;
                                float _4036 = 1.0 - (_4026 / (_3892 * _3892));
                                float _5296 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4037 = isnan(1.0) ? _5296 : (isnan(_5296) ? 1.0 : min(_5296, 1.0));
                                float _4041 = sqrt(_4026) * _3907.w;
                                float _4043 = 1.39999997615814208984375 / (_4041 + 1.39999997615814208984375);
                                float _4044 = _4043 * _4043;
                                float _4047 = ((1.0 - _4044) * dot(vec3(_4030, _4031, _4032), vec3(_1288, _1291, _1294))) + _4044;
                                float _4050 = _4041 * _4041;
                                float _4054 = (fma(_2437, _3934.z, fma(_2436, _3934.y, _3934.x * _2435)) + _3934.w) / _3995;
                                float _4055 = (fma(_2437, _3949.z, fma(_2436, _3949.y, _3949.x * _2435)) + _3949.w) / _3995;
                                float _4059 = 1.0 - dot(vec2(_4054, _4055), vec2(_4054, _4055));
                                float _5312 = isnan(0.0) ? _4059 : (isnan(_4059) ? 0.0 : max(_4059, 0.0));
                                float _4060 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4061 = _4060 * (((isnan(0.0) ? _4047 : (isnan(_4047) ? 0.0 : max(_4047, 0.0))) * _4037) / ((_4050 * 0.699999988079071044921875) + 1.0));
                                float _4073 = exp2(log2(1.0 / ((_4050 * 3.5) + 5.0)) * 0.25);
                                float _4074 = 1.0 - _1361;
                                float _4081 = sqrt(1.0 - ((1.0 - (_4074 * _4074)) * (1.0 - (_4073 * _4073))));
                                float _4082 = _4081 * _4081;
                                float _4083 = _4082 * _4082;
                                float _4084 = _4030 - _3483;
                                float _4085 = _4031 - _3484;
                                float _4086 = _4032 - _3485;
                                float _4090 = inversesqrt(dot(vec3(_4084, _4085, _4086), vec3(_4084, _4085, _4086)));
                                float _4094 = dot(vec3(_1288, _1291, _1294), vec3((-0.0) - _3483, (-0.0) - _3484, (-0.0) - _3485));
                                float _5323 = isnan(0.0) ? _4094 : (isnan(_4094) ? 0.0 : max(_4094, 0.0));
                                float _4097 = isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0));
                                float _4098 = dot(vec3(_1288, _1291, _1294), vec3(_4090 * _4084, _4090 * _4085, _4090 * _4086));
                                float _5334 = isnan(0.0) ? _4098 : (isnan(_4098) ? 0.0 : max(_4098, 0.0));
                                float _4101 = isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0));
                                float _4105 = ((_4101 * _4101) * (_4083 + (-1.0))) + 1.0;
                                float _4106 = _4043 * _4082;
                                float _4107 = _4106 * _4106;
                                float _4113 = ((1.0 - _4107) * dot(vec3(_1288, _1291, _1294), vec3(_4030, _4031, _4032))) + _4107;
                                float _5345 = isnan(0.0) ? _4113 : (isnan(_4113) ? 0.0 : max(_4113, 0.0));
                                float _4114 = isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0));
                                float _4115 = 1.0 - _4082;
                                float _4125 = (0.5 / (((_4114 * ((_4097 * _4115) + _4082)) + 9.9999999392252902907785028219223e-09) + (((_4114 * _4115) + _4082) * _4097))) * _4114;
                                float _5356 = isnan(0.0) ? _4125 : (isnan(_4125) ? 0.0 : max(_4125, 0.0));
                                float _4135 = (_4060 * _4037) * (((_4083 * 3.1415927410125732421875) * (isnan(1.0) ? _5356 : (isnan(_5356) ? 1.0 : min(_5356, 1.0)))) / ((_4105 * _4105) * ((_4050 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _4061 * _3907.z;
                                frontier_phi_80_pred_1 = _4061 * _3907.y;
                                frontier_phi_80_pred_2 = _4061 * _3907.x;
                                frontier_phi_80_pred_3 = _4135 * _3919.z;
                                frontier_phi_80_pred_4 = _4135 * _3919.y;
                                frontier_phi_80_pred_5 = _4135 * _3919.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _4144 = frontier_phi_80_pred;
                            _4143 = frontier_phi_80_pred_1;
                            _4142 = frontier_phi_80_pred_2;
                            _4141 = frontier_phi_80_pred_3;
                            _4140 = frontier_phi_80_pred_4;
                            _4139 = frontier_phi_80_pred_5;
                            _3849 = _4142 + _3862;
                            _3850 = _4143 + _3863;
                            _3851 = _4144 + _3864;
                            _3846 = _4139 + _3859;
                            _3847 = _4140 + _3860;
                            _3848 = _4141 + _3861;
                            if (_3866 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3859 = _3846;
                                _3860 = _3847;
                                _3861 = _3848;
                                _3862 = _3849;
                                _3863 = _3850;
                                _3864 = _3851;
                                _3865 = _3866;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3850;
                        frontier_phi_74_pred_1 = _3849;
                        frontier_phi_74_pred_2 = _3848;
                        frontier_phi_74_pred_3 = _3847;
                        frontier_phi_74_pred_4 = _3846;
                        frontier_phi_74_pred_5 = _3851;
                    }
                    _3466 = frontier_phi_74_pred;
                    _3464 = frontier_phi_74_pred_1;
                    _3462 = frontier_phi_74_pred_2;
                    _3460 = frontier_phi_74_pred_3;
                    _3458 = frontier_phi_74_pred_4;
                    _3468 = frontier_phi_74_pred_5;
                    uint _3645 = _3644 + 1u;
                    if (_3645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3638 = _3458;
                        _3639 = _3460;
                        _3640 = _3462;
                        _3641 = _3464;
                        _3642 = _3466;
                        _3643 = _3468;
                        _3644 = _3645;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _3468;
                frontier_phi_54_55_ladder_1 = _3466;
                frontier_phi_54_55_ladder_2 = _3464;
                frontier_phi_54_55_ladder_3 = _3462;
                frontier_phi_54_55_ladder_4 = _3458;
                frontier_phi_54_55_ladder_5 = _3460;
            }
            else
            {
                frontier_phi_54_55_ladder = _3290;
                frontier_phi_54_55_ladder_1 = _3288;
                frontier_phi_54_55_ladder_2 = _3286;
                frontier_phi_54_55_ladder_3 = _3284;
                frontier_phi_54_55_ladder_4 = _3280;
                frontier_phi_54_55_ladder_5 = _3282;
            }
            _3457 = frontier_phi_54_55_ladder_4;
            _3459 = frontier_phi_54_55_ladder_5;
            _3461 = frontier_phi_54_55_ladder_3;
            _3463 = frontier_phi_54_55_ladder_2;
            _3465 = frontier_phi_54_55_ladder_1;
            _3467 = frontier_phi_54_55_ladder;
        }
        float _3472 = isnan(1.0) ? _1332 : (isnan(_1332) ? 1.0 : min(_1332, 1.0));
        _3046 = (_3472 * _3463) + _2722;
        _3048 = (_3472 * _3465) + _2723;
        _3050 = (_3472 * _3467) + _2724;
        _3052 = ((_3457 * 0.039999999105930328369140625) * _3472) + _2881;
        _3054 = ((_3459 * 0.039999999105930328369140625) * _3472) + _2882;
        _3056 = ((_3461 * 0.039999999105930328369140625) * _3472) + _2883;
    }
    else
    {
        _3046 = _2722;
        _3048 = _2723;
        _3050 = _2724;
        _3052 = _2881;
        _3054 = _2882;
        _3056 = _2883;
    }
    uint _3062 = _1308 + uint(cbMatDynParam._m0[0u].w);
    float _3089 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _3090 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _3091 = cbSceneParam._m0[86u].x * ((_1232 / cbSceneParam._m0[86u].x) + (((10.0 / (_1157 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1268, _1269, _1270), vec3(_232, _233, _234))));
    float _3092 = isnan(_3089) ? _3091 : (isnan(_3091) ? _3089 : min(_3091, _3089));
    float _3093 = isnan(_3090) ? _1233 : (isnan(_1233) ? _3090 : min(_1233, _3090));
    vec4 _3095 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3092, _3093), 0.0);
    float _3097 = _3095.x;
    bool _3117 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3097)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3097))) > _1157;
    float _3118 = _3117 ? _3092 : _1232;
    float _3119 = _3117 ? _3093 : _1233;
    vec4 _3121 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_3118, _3119));
    vec4 _3126 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3118, _3119));
    float _3128 = _3126.x;
    float _3148 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3128)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3128))) - _1157;
    bool _3158 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _3162 = (isnan(_3148) ? 0.0 : (isnan(0.0) ? _3148 : max(0.0, _3148))) * (-1.44269502162933349609375);
    float _5387 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _5398 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _5409 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _3190 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _3193 = ((_3121.x * _3190) * exp2(_3162 * (_3158 ? 0.0 : (cbMtdParam._m0[38u].x + cbMtdParam._m0[36u].z)))) * cbSceneParam._m0[72u].w;
    float _3196 = ((_3121.y * _3190) * exp2(_3162 * (_3158 ? 0.0 : (cbMtdParam._m0[38u].y + cbMtdParam._m0[36u].w)))) * cbSceneParam._m0[72u].w;
    float _3199 = ((_3121.z * _3190) * exp2(_3162 * (_3158 ? 0.0 : (cbMtdParam._m0[38u].z + cbMtdParam._m0[37u].x)))) * cbSceneParam._m0[72u].w;
    float _3208 = (((cbInstanceData._m0[_3062].x * (_952 - (_952 * TEXCOORD_7.x))) + ((_3052 + ((isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0))) * _2171)) * cbPerFrame._m0[3u].x)) + _3193) + ((((isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0))) * (_3046 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1332))) - _3193) * _1079);
    float _3211 = (((cbInstanceData._m0[_3062].y * (_954 - (_954 * TEXCOORD_7.y))) + ((_3054 + ((isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0))) * _2171)) * cbPerFrame._m0[3u].x)) + _3196) + ((((isnan(1.0) ? _5398 : (isnan(_5398) ? 1.0 : min(_5398, 1.0))) * (_3048 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1332))) - _3196) * _1079);
    float _3214 = (((cbInstanceData._m0[_3062].z * (_956 - (_956 * TEXCOORD_7.z))) + ((_3056 + ((isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0))) * _2171)) * cbPerFrame._m0[3u].x)) + _3199) + ((((isnan(1.0) ? _5409 : (isnan(_5409) ? 1.0 : min(_5409, 1.0))) * (_3050 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1332))) - _3199) * _1079);
    float _3215 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
    float _3216 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
    float _3217 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
    uint _3218 = _1307 + 6u;
    float _3226 = _1232 / cbSceneParam._m0[86u].x;
    float _3227 = _1233 / cbSceneParam._m0[86u].y;
    vec4 _3241 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3226, _3227, (log2((isnan(cbSceneParam._m0[77u].w) ? _1157 : (isnan(_1157) ? cbSceneParam._m0[77u].w : min(_1157, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3243 = _3241.x;
    float _3244 = _3241.y;
    float _3245 = _3241.z;
    float _3246 = _3241.w;
    float _3341;
    float _3343;
    float _3345;
    float _3347;
    if (_1157 > cbSceneParam._m0[78u].w)
    {
        float _3305 = isnan(_1157) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1157 : min(cbSceneParam._m0[80u].w, _1157));
        float _3306 = _3305 / _1157;
        float _3317 = _3306 * _1206;
        float _3318 = _1207 * _3306;
        float _3319 = (-0.0) - _3318;
        float _3320 = _3306 * _1208;
        float _3322 = (cbSceneParam._m0[77u].w * _3319) / _3305;
        float _3323 = _3322 + cbSceneParam._m0[79u].w;
        float _3324 = cbSceneParam._m0[79u].w - _3318;
        float _3330 = sqrt(((_3317 * _3317) + (_3318 * _3318)) + (_3320 * _3320));
        float _3333 = (1.0 - (cbSceneParam._m0[77u].w / _3305)) * _3330;
        float _3338 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3339 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3595;
        if (abs((_3319 - _3322) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3595 = ((((_3323 > 0.0) ? exp2(_3338 * _3323) : (2.0 - exp2(_3339 * _3323))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3333;
        }
        else
        {
            float _3518 = 1.0 / cbSceneParam._m0[80u].x;
            float _3519 = isnan(_3324) ? _3323 : (isnan(_3323) ? _3324 : max(_3323, _3324));
            float _3520 = isnan(_3324) ? _3323 : (isnan(_3323) ? _3324 : min(_3323, _3324));
            float _3529 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : min(_3519, 0.0));
            float _3530 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : min(_3520, 0.0));
            _3595 = ((abs(_3330 / _3319) * cbSceneParam._m0[80u].y) * ((((_3529 - _3530) * 2.0) - ((exp2(_3338 * (isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0)))) - exp2(_3338 * (isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))))) * _3518)) - ((exp2(_3339 * _3529) - exp2(_3339 * _3530)) * _3518))) + (_3333 * cbSceneParam._m0[80u].z);
        }
        vec4 _3597 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3226, _3227, 1.0), 0.0);
        float _3606 = exp2((_3595 * (-1.44269502162933349609375)) * (1.0 - _3597.w));
        float _3607 = log2(_3606);
        float _3623 = log2(_3246);
        _3341 = (exp2(_3623 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3607 * cbSceneParam._m0[78u].x)) * _3597.x) / cbSceneParam._m0[78u].x)) + _3243;
        _3343 = (exp2(_3623 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3607 * cbSceneParam._m0[78u].y)) * _3597.y) / cbSceneParam._m0[78u].y)) + _3244;
        _3345 = (exp2(_3623 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3607 * cbSceneParam._m0[78u].z)) * _3597.z) / cbSceneParam._m0[78u].z)) + _3245;
        _3347 = _3606 * _3246;
    }
    else
    {
        _3341 = _3243;
        _3343 = _3244;
        _3345 = _3245;
        _3347 = _3246;
    }
    bool _3633;
    float _3402;
    vec4 _3405;
    float _3407;
    vec4 _3409;
    float _3417;
    float _3418;
    float _3419;
    float _3420;
    bool _3430;
    for (;;)
    {
        bool _3359 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3360 = log2(_3347);
        float _3367 = exp2(_3360 * cbSceneParam._m0[78u].x) * _3215;
        float _3368 = exp2(_3360 * cbSceneParam._m0[78u].y) * _3216;
        float _3369 = exp2(_3360 * cbSceneParam._m0[78u].z) * _3217;
        vec4 _3377 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1232, _1233));
        float _3379 = _3377.x;
        float _3400 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3379)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3379))) - _1157) * cbMtdParam._m0[23u].y;
        float _5475 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
        _3402 = (isnan(1.0) ? _5475 : (isnan(_5475) ? 1.0 : min(_5475, 1.0))) * cbInstanceData._m0[_3218].w;
        float _3403 = _1222 + (-0.5);
        _3405 = cbMtdParam._m0[1u];
        _3407 = _3405.y * _3403;
        _3409 = cbMatDynParam._m0[0u];
        float _3416 = (roundEven(_3409.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3417 = _3416 * (_3359 ? _3367 : (_3367 + (cbSceneParam._m0[72u].w * _3341)));
        _3418 = _3416 * (_3359 ? _3368 : (_3368 + (cbSceneParam._m0[72u].w * _3343)));
        _3419 = _3416 * (_3359 ? _3369 : (_3369 + (cbSceneParam._m0[72u].w * _3345)));
        _3420 = _3403 * 0.999000012874603271484375;
        _3430 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3430)
        {
            if ((cbInstanceData._m0[_1307 + 7u].x + _3420) < 0.5)
            {
                _3633 = true;
                break;
            }
        }
        uint _3553 = _1308 + uint(_3409.w);
        if ((cbInstanceData._m0[_3553].w < 1.0) && ((cbInstanceData._m0[_3553].w + _3420) < 0.5))
        {
            _3633 = true;
            break;
        }
        if ((_3407 + 1.0) < _3405.x)
        {
            _3633 = true;
            break;
        }
        _3633 = false;
        break;
    }
    float _3837;
    if (_3633)
    {
        discard_state = true;
        _3837 = 0.0;
    }
    else
    {
        _3837 = _3402;
    }
    SV_Target.x = _3417;
    SV_Target.y = _3418;
    SV_Target.z = _3419;
    SV_Target.w = _3837;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3402;
    discard_exit();
}


