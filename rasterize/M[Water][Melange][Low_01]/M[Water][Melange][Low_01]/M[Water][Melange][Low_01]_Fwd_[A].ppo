#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1733;
float _4001;
float _4002;
float _4003;
float _4004;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _316 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _318 = (sqrt(((_298 * _298) + (_299 * _299)) + (_300 * _300)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0)));
    float _322 = _318 / cbMtdParam._m0[22u].z;
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(8.0) ? _323 : (isnan(_323) ? 8.0 : min(_323, 8.0));
    float _331 = cbMtdParam._m0[10u].x * _324;
    float _332 = cbMtdParam._m0[10u].y * _324;
    float _333 = cbMtdParam._m0[10u].z * _324;
    float _334 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _335 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _347 = cbMtdParam._m0[21u].y + _318;
    float _351 = _347 * cbMtdParam._m0[23u].z;
    float _4058 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    vec4 _370 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _373 = _370.x;
    float _397 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _373)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _373))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _4069 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _403 = 1.0 - (isnan(cbMtdParam._m0[24u].w) ? _398 : (isnan(_398) ? cbMtdParam._m0[24u].w : max(_398, cbMtdParam._m0[24u].w)));
    float _405 = (cbMtdParam._m0[24u].z + TEXCOORD_3.x) - (_403 * cbMtdParam._m0[20u].z);
    float _421 = (cbMtdParam._m0[27u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[19u].z;
    float _426 = cbMtdParam._m0[33u].x * TEXCOORD.x;
    float _427 = cbMtdParam._m0[33u].y * TEXCOORD.y;
    vec4 _441 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_2, SS_BumpMap), vec2((((_421 * cbMtdParam._m0[33u].z) + _426) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_427 + (_421 * cbMtdParam._m0[33u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _4085 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _447 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _448 = _441.z - _447;
    float _4096 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _461 = (_449 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _463 = (_449 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _476 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_461 + (cbMtdParam._m0[29u].z * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_463 + (cbMtdParam._m0[29u].w * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _480 = _476.z;
    vec4 _491 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_461 + (cbMtdParam._m0[29u].x * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_463 + (cbMtdParam._m0[29u].y * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _495 = _491.z;
    float _498 = (_403 - _441.w) + (isnan(_495) ? _480 : (isnan(_480) ? _495 : max(_480, _495)));
    float _4112 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = (_405 * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)));
    float _501 = _500 * TEXCOORD_7.w;
    float _513 = ((_500 + cbMtdParam._m0[9u].x) - _501) + (cbMtdParam._m0[15u].x * _449);
    float _516 = ((_500 + cbMtdParam._m0[9u].y) - _501) + (cbMtdParam._m0[15u].y * _449);
    float _519 = ((_500 + cbMtdParam._m0[9u].z) - _501) + (cbMtdParam._m0[15u].z * _449);
    vec4 _565 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].x * _421))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].y * _421))) + cbTextureTilingScale._m0[1u].w));
    float _570 = _565.z * 0.099999986588954925537109375;
    float _4123 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _572 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _576 = cbMtdParam._m0[23u].x * _318;
    float _4134 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _591 = (_513 + (isnan(0.07999999821186065673828125) ? _334 : (isnan(_334) ? 0.07999999821186065673828125 : min(_334, 0.07999999821186065673828125)))) + (_577 * (((1.0 - _513) - _572) + _570));
    float _593 = (_516 + (isnan(0.07999999821186065673828125) ? _335 : (isnan(_335) ? 0.07999999821186065673828125 : min(_335, 0.07999999821186065673828125)))) + (_577 * (((1.0 - _516) - _572) + _570));
    float _595 = (_519 + (isnan(0.07999999821186065673828125) ? _336 : (isnan(_336) ? 0.07999999821186065673828125 : min(_336, 0.07999999821186065673828125)))) + (_577 * (((1.0 - _519) + _570) - _572));
    float _4145 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _597 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _605 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _447) + cbMtdParam._m0[19u].x;
    float _617 = (POSITION_1.w - cbMtdParam._m0[27u].y) * (1.0 / cbMtdParam._m0[27u].x);
    float _4178 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _631 = (cbMtdParam._m0[32u].x * _421) + _426;
    float _632 = (cbMtdParam._m0[32u].y * _421) + _427;
    vec4 _659 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[31u].z * _421) + _426)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[31u].w * _421) + _427)) + cbTextureTilingScale._m0[3u].w));
    float _666 = (_659.x * 2.0) + (-1.0);
    float _668 = (_659.y * 2.0) + (-1.0);
    float _672 = 1.0 - dot(vec2(_666, _668), vec2(_666, _668));
    float _4189 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = sqrt(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)));
    float _677 = fma(_674, _235, fma(_668, _242, _666 * _228));
    float _680 = fma(_674, _236, fma(_668, _243, _666 * _229));
    float _683 = fma(_674, _237, fma(_668, _244, _666 * _230));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = cbPerFrame._m0[22u].x * 2.0;
    float _689 = _688 * cbMtdParam._m0[25u].w;
    float _693 = ((_677 * 0.5) * _687) + (-0.25);
    float _697 = ((_680 * 0.5) * _687) + (-0.25);
    float _698 = _697 * cbMtdParam._m0[26u].x;
    float _700 = (-0.0) - (cbMtdParam._m0[26u].x * _693);
    float _701 = fract(_689);
    float _703 = fract(_689 + 0.5);
    float _714 = abs((_701 * 2.0) + (-1.0));
    vec4 _731 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_701 * _700) + _631) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_698 * _701) + _632) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _735 = _731.z;
    vec4 _736 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_703 * _700) + _631) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_698 * _703) + _632) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _747 = ((_736.x - _733) * _714) + _733;
    float _748 = ((_736.y - _734) * _714) + _734;
    float _749 = ((_736.z - _735) * _714) + _735;
    float _763 = (cbMtdParam._m0[31u].x * _421) + _426;
    float _764 = (cbMtdParam._m0[31u].y * _421) + _427;
    float _767 = _688 * cbMtdParam._m0[25u].z;
    float _768 = _697 * cbMtdParam._m0[25u].y;
    float _770 = (-0.0) - (cbMtdParam._m0[25u].y * _693);
    float _771 = fract(_767);
    float _773 = fract(_767 + 0.5);
    float _784 = abs((_771 * 2.0) + (-1.0));
    vec4 _801 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_771 * _770) + _763) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_768 * _771) + _764) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    vec4 _806 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_773 * _770) + _763) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_768 * _773) + _764) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _840 = (((((cbMtdParam._m0[16u].x - cbMtdParam._m0[18u].x) * _747) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].x) * (((_806.x - _801.x) * _784) + _801.x)) + (_747 * cbMtdParam._m0[17u].x);
    float _843 = (((((cbMtdParam._m0[16u].y - cbMtdParam._m0[18u].y) * _748) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].y) * (((_806.y - _801.y) * _784) + _801.y)) + (_748 * cbMtdParam._m0[17u].y);
    float _846 = ((((cbMtdParam._m0[28u].x * _749) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_806.z - _801.z) * _784) + _801.z)) + (_749 * cbMtdParam._m0[17u].z);
    float _850 = _840 - (_840 * _618);
    float _851 = _843 - (_843 * _618);
    float _852 = _846 - (_846 * _618);
    float _857 = (POSITION_1.w - cbMtdParam._m0[26u].w) * (1.0 / cbMtdParam._m0[26u].z);
    float _4200 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _868 = (cbMtdParam._m0[32u].z * _421) + _426;
    float _869 = (cbMtdParam._m0[32u].w * _421) + _427;
    vec4 _882 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_868 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_869 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _884 = _882.x;
    float _885 = _882.y;
    float _886 = _882.z;
    vec4 _908 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _868) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _869) + cbTextureTilingScale._m0[7u].w));
    float _948 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].x) * (((((_884 * cbMtdParam._m0[11u].x) - _850) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _884) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].x) * _908.x)) * _858) + _850);
    float _950 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].y) * (((((_885 * cbMtdParam._m0[11u].y) - _851) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _885) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].y) * _908.y)) * _858) + _851);
    float _952 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].z) * (((((_886 * cbMtdParam._m0[11u].z) - _852) + ((((cbMtdParam._m0[28u].y * _886) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _908.z)) * _858) + _852);
    float _4211 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _959 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _969 = _318 / cbMtdParam._m0[22u].w;
    float _4222 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _970 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _971 = _449 * 0.23999999463558197021484375;
    float _973 = _449 * (-0.20000000298023223876953125);
    float _984 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _985 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _994 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].z * _421) + _971) + _984) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[34u].w * _421) + _973) + _985) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1010 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_984 + _971) + (cbMtdParam._m0[35u].z * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_985 + _973) + (cbMtdParam._m0[35u].w * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1030 = (((_491.x + (-0.5)) * 0.5) + _476.x) + (((_994.x + (-1.0)) + _1010.x) * cbMtdParam._m0[24u].y);
    float _1031 = (((_491.y + (-0.5)) * 0.5) + _476.y) + (((_994.y + (-1.0)) + _1010.y) * cbMtdParam._m0[24u].y);
    float _1036 = ((_565.x - _1030) * _970) + _1030;
    float _1037 = ((_565.y - _1031) * _970) + _1031;
    float _1039 = _318 / cbMtdParam._m0[22u].y;
    float _4233 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1040 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _1056 = ((((_959 * (0.5 - _443)) + _443) + (((_1036 + (-0.5)) + ((0.5 - _1036) * _1040)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1057 = ((((_959 * (0.5 - _444)) + _444) + (((_1037 + (-0.5)) + ((0.5 - _1037) * _1040)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1058 = dot(vec2(_1056, _1057), vec2(_1056, _1057));
    float _4244 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1063 = sqrt(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))));
    float _1065 = cbMtdParam._m0[23u].w * _347;
    float _4255 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1072 = cbMtdParam._m0[21u].w * _347;
    float _4266 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * cbMtdParam._m0[26u].y;
    float _4277 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1075 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _1080 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1085 = _1056 - (_1080 * _1056);
    float _1086 = _1057 - (_1080 * _1057);
    float _1087 = (_1080 * (1.0 - _1063)) + _1063;
    float _1106 = fma(_1063, _235, fma(_1057, _242, _1056 * _228));
    float _1109 = fma(_1063, _236, fma(_1057, _243, _1056 * _229));
    float _1112 = fma(_1063, _237, fma(_1057, _244, _1056 * _230));
    float _1116 = inversesqrt(dot(vec3(_1106, _1109, _1112), vec3(_1106, _1109, _1112)));
    float _1117 = _1116 * _1106;
    float _1118 = _1116 * _1109;
    float _1119 = _1116 * _1112;
    float _1122 = fma(_1087, _235, fma(_1086, _242, _1085 * _228));
    float _1125 = fma(_1087, _236, fma(_1086, _243, _1085 * _229));
    float _1128 = fma(_1087, _237, fma(_1086, _244, _1085 * _230));
    float _1132 = inversesqrt(dot(vec3(_1122, _1125, _1128), vec3(_1122, _1125, _1128)));
    float _1133 = _1132 * _1122;
    float _1134 = _1132 * _1125;
    float _1135 = _1132 * _1128;
    float _4288 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _1136 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4310 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4321 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1153 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1202 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1193);
    float _1203 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1193);
    float _1204 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1193);
    float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
    float _1209 = _1202 * _1208;
    float _1210 = _1203 * _1208;
    float _1211 = _1204 * _1208;
    vec4 _1216 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1218 = _1216.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1418 = sqrt(((_1202 * _1202) + (_1203 * _1203)) + (_1204 * _1204));
        float _1424 = (cbMatDynParam._m0[5u].x * _1418) + cbMatDynParam._m0[5u].y;
        float _4332 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1429 = (cbMatDynParam._m0[5u].z * _1418) + cbMatDynParam._m0[5u].w;
        float _4343 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) - _1425)) + _1425) < ((_1218 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1228 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1229 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1231 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1240 = (_1231.x * 2.0) + (-1.0);
    float _1241 = (_1231.y * 2.0) + (-1.0);
    float _1242 = (_1231.z * 2.0) + (-1.0);
    float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
    float _1257 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1231.w;
    float _1264 = (((_1240 * _1246) - _1117) * _1257) + _1117;
    float _1265 = (((_1241 * _1246) - _1118) * _1257) + _1118;
    float _1266 = (((_1242 * _1246) - _1119) * _1257) + _1119;
    float _1284 = fma(_1266, cbSceneParam._m0[5u].z, fma(_1265, cbSceneParam._m0[5u].y, _1264 * cbSceneParam._m0[5u].x));
    float _1287 = fma(_1266, cbSceneParam._m0[6u].z, fma(_1265, cbSceneParam._m0[6u].y, _1264 * cbSceneParam._m0[6u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[7u].z, fma(_1265, cbSceneParam._m0[7u].y, _1264 * cbSceneParam._m0[7u].x));
    uint _1303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1304 = _1303 + 9u;
    uint _1305 = _1304 + uint(cbMatDynParam._m0[0u].w);
    float _1311 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * cbInstanceData._m0[_1305].x;
    float _1312 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * cbInstanceData._m0[_1305].y;
    float _1313 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * cbInstanceData._m0[_1305].z;
    float _4354 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1314 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
    float _1315 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    vec4 _1325 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1228, cbSceneParam._m0[86u].y * _1229));
    float _1328 = _1325.x * TEXCOORD_3.w;
    float _1332 = abs(dot(vec3(_1209, _1210, _1211), vec3(_1264, _1265, _1266)));
    float _4387 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1345 = dot(vec3(_1133, _1134, _1135), vec3(_1209, _1210, _1211)) * 2.0;
    float _1349 = (_1345 * _1133) - _1209;
    float _1350 = (_1345 * _1134) - _1210;
    float _1351 = (_1345 * _1135) - _1211;
    float _1355 = abs(dot(vec3(_1209, _1210, _1211), vec3(_1133, _1134, _1135)));
    float _4398 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    float _1357 = sqrt(_1136);
    float _1369 = exp2((_1357 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1357 * 3.0));
    float _1400 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1404 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1408 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1732;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1461 = fma(_1408, cbModelParam._m0[26u].z, fma(_1404, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1400));
        float _1465 = fma(_1408, cbModelParam._m0[27u].z, fma(_1404, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1400));
        float _1469 = fma(_1408, cbModelParam._m0[28u].z, fma(_1404, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1400));
        float _1491 = _1400 + _1133;
        float _1492 = _1404 + _1134;
        float _1493 = _1408 + _1135;
        float _1503 = fma(_1493, cbModelParam._m0[26u].z, fma(_1492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1491)) - _1461;
        float _1504 = fma(_1493, cbModelParam._m0[27u].z, fma(_1492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1491)) - _1465;
        float _1505 = fma(_1493, cbModelParam._m0[28u].z, fma(_1492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1491)) - _1469;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1521 = ((_1509 * _1503) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1461 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1509 * _1504) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1465 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1505) / cbModelParam._m0[34u].z) + ((((((_1469 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        float _1560 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1526.x + (-0.5));
        float _1562 = _1560 * (_1526.y + (-0.5));
        float _1563 = _1560 * (_1526.z + (-0.5));
        float _1570 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1533.x + (-0.5));
        float _1572 = _1570 * (_1533.y + (-0.5));
        float _1573 = _1570 * (_1533.z + (-0.5));
        float _1580 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1540.x + (-0.5));
        float _1582 = _1580 * (_1540.y + (-0.5));
        float _1583 = _1580 * (_1540.z + (-0.5));
        float _1590 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1547.x + (-0.5));
        float _1592 = _1590 * (_1547.y + (-0.5));
        float _1593 = _1590 * (_1547.z + (-0.5));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = _1561 * 0.5;
        float _1598 = _1571 * 0.5;
        float _1599 = _1581 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1614 = (dot(vec3(_1133, _1134, _1135), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1624 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4446 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1626 + 1.0))) + _1631) * _1594;
        float _1641 = _1562 * 0.5;
        float _1642 = _1572 * 0.5;
        float _1643 = _1582 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_1133, _1134, _1135), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4479 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1668 + 1.0))) + _1673) * _1595;
        float _1683 = _1563 * 0.5;
        float _1684 = _1573 * 0.5;
        float _1685 = _1583 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_1133, _1134, _1135), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4512 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1710 + 1.0))) + _1715) * _1596;
        _1732 = _1563;
        _1734 = _1562;
        _1735 = _1561;
        _1736 = _1573;
        _1737 = _1572;
        _1738 = _1571;
        _1739 = _1583;
        _1740 = _1582;
        _1741 = _1581;
        _1742 = _1596;
        _1743 = _1595;
        _1744 = _1594;
        _1745 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1733;
        _1734 = _1733;
        _1735 = _1733;
        _1736 = _1733;
        _1737 = _1733;
        _1738 = _1733;
        _1739 = _1733;
        _1740 = _1733;
        _1741 = _1733;
        _1742 = _1733;
        _1743 = _1733;
        _1744 = _1733;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    float _2047;
    float _2048;
    float _2049;
    float _2050;
    float _2051;
    float _2052;
    float _2053;
    float _2054;
    float _2055;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1774 = fma(_1408, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1400));
        float _1778 = fma(_1408, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1400));
        float _1782 = fma(_1408, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1400));
        float _1804 = _1400 + _1133;
        float _1805 = _1404 + _1134;
        float _1806 = _1408 + _1135;
        float _1816 = fma(_1806, cbModelParam._m0[30u].z, fma(_1805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1804)) - _1774;
        float _1817 = fma(_1806, cbModelParam._m0[31u].z, fma(_1805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1804)) - _1778;
        float _1818 = fma(_1806, cbModelParam._m0[32u].z, fma(_1805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1804)) - _1782;
        float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
        float _1834 = ((_1822 * _1816) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1774 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1835 = ((_1822 * _1817) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1778 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1836 = ((_1822 * _1818) / cbModelParam._m0[35u].z) + ((((((_1782 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1838 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1834, _1835, _1836), 0.0);
        vec4 _1845 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1834, _1835, _1836), 0.0);
        vec4 _1852 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1834, _1835, _1836), 0.0);
        vec4 _1859 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1834, _1835, _1836), 0.0);
        float _1871 = exp2((_1838.w + (-0.5)) * 20.0) * 2.0;
        float _1872 = _1871 * (_1838.x + (-0.5));
        float _1873 = _1871 * (_1838.y + (-0.5));
        float _1874 = _1871 * (_1838.z + (-0.5));
        float _1881 = exp2((_1845.w + (-0.5)) * 20.0) * 2.0;
        float _1882 = _1881 * (_1845.x + (-0.5));
        float _1883 = _1881 * (_1845.y + (-0.5));
        float _1884 = _1881 * (_1845.z + (-0.5));
        float _1891 = exp2((_1852.w + (-0.5)) * 20.0) * 2.0;
        float _1892 = _1891 * (_1852.x + (-0.5));
        float _1893 = _1891 * (_1852.y + (-0.5));
        float _1894 = _1891 * (_1852.z + (-0.5));
        float _1901 = exp2((_1859.w + (-0.5)) * 20.0) * 2.0;
        float _1902 = _1901 * (_1859.x + (-0.5));
        float _1903 = _1901 * (_1859.y + (-0.5));
        float _1904 = _1901 * (_1859.z + (-0.5));
        float _1905 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1906 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1907 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1908 = _1872 * 0.5;
        float _1909 = _1882 * 0.5;
        float _1910 = _1892 * 0.5;
        float _1911 = dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910));
        float _1916 = (_1911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1911);
        float _1924 = (dot(vec3(_1133, _1134, _1135), vec3(_1916 * _1908, _1916 * _1909, _1916 * _1910)) + 1.0) * 0.5;
        float _4553 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1933 = sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910)) / (_1905 + 9.9999997473787516355514526367188e-06);
        float _4564 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1935 = _1934 * 2.0;
        float _1939 = (1.0 - _1934) / (_1934 + 1.0);
        float _4575 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1949 = ((((1.0 - _1940) * (_1935 + 2.0)) * exp2(log2(isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_1935 + 1.0))) + _1940) * _1905;
        float _1950 = _1873 * 0.5;
        float _1951 = _1883 * 0.5;
        float _1952 = _1893 * 0.5;
        float _1953 = dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952));
        float _1958 = (_1953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1953);
        float _1966 = (dot(vec3(_1133, _1134, _1135), vec3(_1958 * _1950, _1958 * _1951, _1958 * _1952)) + 1.0) * 0.5;
        float _4586 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1975 = sqrt(((_1951 * _1951) + (_1950 * _1950)) + (_1952 * _1952)) / (_1906 + 9.9999997473787516355514526367188e-06);
        float _4597 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1977 = _1976 * 2.0;
        float _1981 = (1.0 - _1976) / (_1976 + 1.0);
        float _4608 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1991 = ((((1.0 - _1982) * (_1977 + 2.0)) * exp2(log2(isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_1977 + 1.0))) + _1982) * _1906;
        float _1992 = _1874 * 0.5;
        float _1993 = _1884 * 0.5;
        float _1994 = _1894 * 0.5;
        float _1995 = dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994));
        float _2000 = (_1995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1995);
        float _2008 = (dot(vec3(_1133, _1134, _1135), vec3(_2000 * _1992, _2000 * _1993, _2000 * _1994)) + 1.0) * 0.5;
        float _4619 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2017 = sqrt(((_1993 * _1993) + (_1992 * _1992)) + (_1994 * _1994)) / (_1907 + 9.9999997473787516355514526367188e-06);
        float _4630 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2019 = _2018 * 2.0;
        float _2023 = (1.0 - _2018) / (_2018 + 1.0);
        float _4641 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2024 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2033 = ((((1.0 - _2024) * (_2019 + 2.0)) * exp2(log2(isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2019 + 1.0))) + _2024) * _1907;
        _2041 = _1874;
        _2042 = _1873;
        _2043 = _1872;
        _2044 = _1884;
        _2045 = _1883;
        _2046 = _1882;
        _2047 = _1894;
        _2048 = _1893;
        _2049 = _1892;
        _2050 = _1907;
        _2051 = _1906;
        _2052 = _1905;
        _2053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)));
        _2054 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)));
        _2055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)));
    }
    else
    {
        _2041 = _1733;
        _2042 = _1733;
        _2043 = _1733;
        _2044 = _1733;
        _2045 = _1733;
        _2046 = _1733;
        _2047 = _1733;
        _2048 = _1733;
        _2049 = _1733;
        _2050 = _1733;
        _2051 = _1733;
        _2052 = _1733;
        _2053 = 0.0;
        _2054 = 0.0;
        _2055 = 0.0;
    }
    float _2065 = (cbModelParam._m0[1u].x * (_2053 - _1745)) + _1745;
    float _2066 = (cbModelParam._m0[1u].x * (_2054 - _1746)) + _1746;
    float _2067 = (cbModelParam._m0[1u].x * (_2055 - _1747)) + _1747;
    float _2088 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2066, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2091 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2066, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2094 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2066, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2065));
    float _2109 = _1349 * 0.5;
    float _2110 = _1350 * 0.5;
    float _2111 = _1351 * 0.5;
    float _2112 = dot(vec4(_2109, _2110, _2111, 1.0), vec4(_2043, _2046, _2049, _2052));
    float _2115 = dot(vec4(_2109, _2110, _2111, 1.0), vec4(_2042, _2045, _2048, _2051));
    float _2118 = dot(vec4(_2109, _2110, _2111, 1.0), vec4(_2041, _2044, _2047, _2050));
    float _2152;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2125 = dot(vec4(_2109, _2110, _2111, 1.0), vec4(_1732, _1736, _1739, _1742));
        float _2129 = dot(vec4(_2109, _2110, _2111, 1.0), vec4(_1734, _1737, _1740, _1743));
        float _2133 = dot(vec4(_2109, _2110, _2111, 1.0), vec4(_1735, _1738, _1741, _1744));
        float _2140 = dot(vec4(cbModelParam._m0[39u]), vec4(_2109, _2110, _2111, 1.0));
        _2152 = dot(vec3(isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)), isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)), isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2140) ? 0.0 : (isnan(0.0) ? _2140 : max(0.0, _2140))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2152 = 1.0;
    }
    float _2163;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2154 = dot(vec4(cbModelParam._m0[40u]), vec4(_2109, _2110, _2111, 1.0));
        _2163 = dot(vec3(isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0)), isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0)), isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2154) ? 0.0 : (isnan(0.0) ? _2154 : max(0.0, _2154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2163 = 1.0;
    }
    float _2167 = (_2163 * cbModelParam._m0[1u].x) + (_2152 * (1.0 - cbModelParam._m0[1u].x));
    float _2177 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1136);
    float _2178 = isnan(_2177) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2177 : min(cbModelParam._m0[25u].z, _2177));
    float _2258;
    float _2260;
    float _2262;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2225 = fma(_1408, cbModelParam._m0[13u].z, fma(_1404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1400)) + cbModelParam._m0[13u].w;
        float _2229 = fma(_1408, cbModelParam._m0[14u].z, fma(_1404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1400)) + cbModelParam._m0[14u].w;
        float _2233 = fma(_1408, cbModelParam._m0[15u].z, fma(_1404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1400)) + cbModelParam._m0[15u].w;
        float _2236 = fma(_1351, cbModelParam._m0[13u].z, fma(_1350, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1349));
        float _2239 = fma(_1351, cbModelParam._m0[14u].z, fma(_1350, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1349));
        float _2242 = fma(_1351, cbModelParam._m0[15u].z, fma(_1350, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1349));
        float _2270;
        if (_2236 > 0.0)
        {
            _2270 = abs((1.0 - _2225) / _2236);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2236 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2225 + 1.0) / _2236);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2270 = frontier_phi_17_15_ladder;
        }
        float _2619;
        if (_2239 > 0.0)
        {
            _2619 = abs((1.0 - _2229) / _2239);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2239 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2229 + 1.0) / _2239);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2619 = frontier_phi_26_22_ladder;
        }
        float _3097;
        if (_2242 > 0.0)
        {
            _3097 = abs((1.0 - _2233) / _2242);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_2242 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_2233 + 1.0) / _2242);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _3097 = frontier_phi_40_33_ladder;
        }
        float _3099 = isnan(_2619) ? _2270 : (isnan(_2270) ? _2619 : min(_2270, _2619));
        float _3100 = isnan(_3097) ? _3099 : (isnan(_3099) ? _3097 : min(_3099, _3097));
        float _3104 = (_3100 * _2236) + _2225;
        float _3105 = (_3100 * _2239) + _2229;
        float _3106 = (_3100 * _2242) + _2233;
        float _3107 = _3100 * 9.9999997473787516355514526367188e-05;
        float _3108 = (-1.0) - _3107;
        float _3110 = _3107 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_3106 > _3110) || ((_3106 < _3108) || ((_3105 > _3110) || ((_3105 < _3108) || ((_3104 < _3108) || (_3104 > _3110))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3106, cbModelParam._m0[9u].z, fma(_3105, cbModelParam._m0[9u].y, _3104 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3106, cbModelParam._m0[10u].z, fma(_3105, cbModelParam._m0[10u].y, _3104 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3106, cbModelParam._m0[11u].z, fma(_3105, cbModelParam._m0[11u].y, _3104 * cbModelParam._m0[11u].x))), _2178);
            frontier_phi_16_40_ladder = _3248.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _3248.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _3248.x * cbModelParam._m0[1u].y;
        }
        _2258 = frontier_phi_16_40_ladder_2;
        _2260 = frontier_phi_16_40_ladder_1;
        _2262 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1349, _1350, _1351), _2178);
        _2258 = _2246.x * cbModelParam._m0[1u].y;
        _2260 = _2246.y * cbModelParam._m0[1u].y;
        _2262 = _2246.z * cbModelParam._m0[1u].y;
    }
    float _2266 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1136);
    float _2267 = isnan(_2266) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2266 : min(cbModelParam._m0[25u].w, _2266));
    float _2356;
    float _2358;
    float _2360;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2320 = fma(_1408, cbModelParam._m0[21u].z, fma(_1404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1400)) + cbModelParam._m0[21u].w;
        float _2324 = fma(_1408, cbModelParam._m0[22u].z, fma(_1404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1400)) + cbModelParam._m0[22u].w;
        float _2328 = fma(_1408, cbModelParam._m0[23u].z, fma(_1404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1400)) + cbModelParam._m0[23u].w;
        float _2331 = fma(_1351, cbModelParam._m0[21u].z, fma(_1350, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1349));
        float _2334 = fma(_1351, cbModelParam._m0[22u].z, fma(_1350, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1349));
        float _2337 = fma(_1351, cbModelParam._m0[23u].z, fma(_1350, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1349));
        float _2624;
        if (_2331 > 0.0)
        {
            _2624 = abs((1.0 - _2320) / _2331);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2331 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2320 + 1.0) / _2331);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2624 = frontier_phi_28_24_ladder;
        }
        float _3123;
        if (_2334 > 0.0)
        {
            _3123 = abs((1.0 - _2324) / _2334);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2334 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2324 + 1.0) / _2334);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3123 = frontier_phi_42_35_ladder;
        }
        float _3313;
        if (_2337 > 0.0)
        {
            _3313 = abs((1.0 - _2328) / _2337);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2337 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2328 + 1.0) / _2337);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _3313 = frontier_phi_60_53_ladder;
        }
        float _3315 = isnan(_3123) ? _2624 : (isnan(_2624) ? _3123 : min(_2624, _3123));
        float _3316 = isnan(_3313) ? _3315 : (isnan(_3315) ? _3313 : min(_3315, _3313));
        float _3320 = (_3316 * _2331) + _2320;
        float _3321 = (_3316 * _2334) + _2324;
        float _3322 = (_3316 * _2337) + _2328;
        float _3323 = _3316 * 9.9999997473787516355514526367188e-05;
        float _3324 = (-1.0) - _3323;
        float _3326 = _3323 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_3322 > _3326) || ((_3322 < _3324) || ((_3321 > _3326) || ((_3321 < _3324) || ((_3320 < _3324) || (_3320 > _3326))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3322, cbModelParam._m0[17u].z, fma(_3321, cbModelParam._m0[17u].y, _3320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3322, cbModelParam._m0[18u].z, fma(_3321, cbModelParam._m0[18u].y, _3320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3322, cbModelParam._m0[19u].z, fma(_3321, cbModelParam._m0[19u].y, _3320 * cbModelParam._m0[19u].x))), _2267);
            frontier_phi_25_60_ladder = _3564.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3564.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3564.y * cbModelParam._m0[1u].z;
        }
        _2356 = frontier_phi_25_60_ladder;
        _2358 = frontier_phi_25_60_ladder_2;
        _2360 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _2340 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1349, _1350, _1351), _2267);
        _2356 = _2340.x * cbModelParam._m0[1u].z;
        _2358 = _2340.y * cbModelParam._m0[1u].z;
        _2360 = _2340.z * cbModelParam._m0[1u].z;
    }
    float _2372 = ((((1.0 - _1369) * ((_1357 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1369 * _1357)) * _1328;
    float _2373 = _2372 * ((cbModelParam._m0[1u].w * (_2356 - _2258)) + _2258);
    float _2374 = _2372 * ((cbModelParam._m0[1u].w * (_2358 - _2260)) + _2260);
    float _2375 = _2372 * ((cbModelParam._m0[1u].w * (_2360 - _2262)) + _2262);
    float _2378 = fma(_2375, cbSceneParam._m0[89u].z, fma(_2374, cbSceneParam._m0[89u].y, _2373 * cbSceneParam._m0[89u].x));
    float _2381 = fma(_2375, cbSceneParam._m0[90u].z, fma(_2374, cbSceneParam._m0[90u].y, _2373 * cbSceneParam._m0[90u].x));
    float _2384 = fma(_2375, cbSceneParam._m0[91u].z, fma(_2374, cbSceneParam._m0[91u].y, _2373 * cbSceneParam._m0[91u].x));
    uvec4 _2394 = floatBitsToUint(cbInstanceData._m0[_1303 + 5u]);
    uint _2396 = _2394.x * 14u;
    uint _2397 = _2396 + 13u;
    float _2402 = _1328 + (-1.0);
    float _2405 = (cbLight._m0[_2397].x * _2402) + 1.0;
    float _2406 = (cbLight._m0[_2397].y * _2402) + 1.0;
    uint _2407 = _2396 + 5u;
    float _2413 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
    uint _2417 = _2396 + 4u;
    float _2423 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
    uint _2427 = _2396 | 1u;
    float _2438 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_1264, _1265, _1266));
    float _2441 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_1264, _1265, _1266));
    float _4777 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _4788 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2446 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * 0.3183098733425140380859375;
    float _2448 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * 0.3183098733425140380859375;
    float _2455 = ((cbLight._m0[_2407].x * _2413) * _2448) + ((cbLight._m0[_2417].x * _2423) * _2446);
    float _2456 = ((_2413 * cbLight._m0[_2407].y) * _2448) + ((_2423 * cbLight._m0[_2417].y) * _2446);
    float _2457 = ((_2413 * cbLight._m0[_2407].z) * _2448) + ((_2423 * cbLight._m0[_2417].z) * _2446);
    uint _2459 = _2396 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _1136) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2396].x + _1209;
    float _2475 = cbLight._m0[_2396].y + _1210;
    float _2476 = cbLight._m0[_2396].z + _1211;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_1264, _1265, _1266), vec3(cbLight._m0[_2396].xyz));
    float _4799 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2488 = dot(vec3(_1264, _1265, _1266), vec3(_1209, _1210, _1211));
    float _4810 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2492 = dot(vec3(_1264, _1265, _1266), vec3(_2481, _2482, _2483));
    float _4821 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2496 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2481, _2482, _2483));
    float _4832 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2500 = _2473 * _2473;
    float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
    float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2516 = 1.0 - _2473;
    float _2527 = (0.5 / (((_2491 * ((_2487 * _2516) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2516) + _2473) * _2487))) * _2487;
    float _4843 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2529 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
    uint _2540 = _2396 + 9u;
    float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _1136) * 0.949999988079071044921875);
    float _2552 = _2551 * _2551;
    float _2553 = cbLight._m0[_2427].x + _1209;
    float _2554 = cbLight._m0[_2427].y + _1210;
    float _2555 = cbLight._m0[_2427].z + _1211;
    float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
    float _2560 = _2559 * _2553;
    float _2561 = _2559 * _2554;
    float _2562 = _2559 * _2555;
    float _2563 = dot(vec3(_1264, _1265, _1266), vec3(cbLight._m0[_2427].xyz));
    float _4854 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _2567 = dot(vec3(_1264, _1265, _1266), vec3(_2560, _2561, _2562));
    float _4865 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2560, _2561, _2562));
    float _4876 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2552 * _2552;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2589 = 1.0 - _2552;
    float _2599 = (0.5 / (((_2491 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2589) + _2552) * _2566))) * _2566;
    float _4887 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    float _2611 = (((_2588 * cbLight._m0[_2540].x) * _2601) * _2413) + (((_2515 * cbLight._m0[_2459].x) * _2529) * _2423);
    float _2612 = (((_2588 * cbLight._m0[_2540].y) * _2601) * _2413) + (((_2515 * cbLight._m0[_2459].y) * _2529) * _2423);
    float _2613 = (((_2588 * cbLight._m0[_2540].z) * _2601) * _2413) + (((_2515 * cbLight._m0[_2459].z) * _2529) * _2423);
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_2394.y == 0u)
    {
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2668;
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2668;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2668;
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.x;
        uint _2695 = uint((float(_2683.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1229) / _2684))) + floor(float(uint(cbSceneParam._m0[85u].x * _1228) / _2684)));
        float _2705 = (log2(_2671 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2706 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        uint _2709 = uint(isnan(14.0) ? _2706 : (isnan(_2706) ? 14.0 : min(_2706, 14.0)));
        uvec4 _2714 = texelFetch(g_lightClusterGridBuffer, int(((_2709 << 2u) + (_2695 << 6u)) >> 2u));
        uint _2715 = _2714.x;
        uint _2716 = _2683.z;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((((1u << ((_2716 >> 4u) & 15u)) + 4294967295u) & _2715) == 0u) || ((_2716 & 240u) == 0u))
        {
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
        }
        else
        {
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            uint _3166 = 0u;
            uint _3175;
            bool _3176;
            for (;;)
            {
                _3175 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                _3176 = _3175 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3176)
                {
                    frontier_phi_55_pred = _3164;
                    frontier_phi_55_pred_1 = _3165;
                    frontier_phi_55_pred_2 = _3163;
                    frontier_phi_55_pred_3 = _3162;
                    frontier_phi_55_pred_4 = _3161;
                    frontier_phi_55_pred_5 = _3160;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3160;
                    _3357 = _3161;
                    _3358 = _3162;
                    _3359 = _3163;
                    _3360 = _3164;
                    _3361 = _3165;
                    _3362 = _3175;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3166 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2669;
                        float _3423 = _3382.y - _2670;
                        float _3424 = _3382.z - _2671;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_1284, _1287, _1290), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4908 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2669;
                        float _3458 = (-0.0) - _2670;
                        float _3459 = (-0.0) - _2671;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3474 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _1357;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3464 + _3429;
                        float _3486 = _3465 + _3430;
                        float _3487 = _3466 + _3431;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_1284, _1287, _1290), vec3(_3464, _3465, _3466));
                        float _4924 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3499 = dot(vec3(_1284, _1287, _1290), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4935 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3442 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3432) + _3508;
                        float _4946 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4957 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3506 * _3506) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3260 = (_3453 * _3401.x) + _3359;
                        _3261 = (_3453 * _3401.y) + _3360;
                        _3262 = (_3453 * _3401.z) + _3361;
                        _3257 = (_3534 * _3418.x) + _3356;
                        _3258 = (_3534 * _3418.y) + _3357;
                        _3259 = (_3534 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3257;
                            _3357 = _3258;
                            _3358 = _3259;
                            _3359 = _3260;
                            _3360 = _3261;
                            _3361 = _3262;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_55_pred = _3261;
                    frontier_phi_55_pred_1 = _3262;
                    frontier_phi_55_pred_2 = _3260;
                    frontier_phi_55_pred_3 = _3259;
                    frontier_phi_55_pred_4 = _3258;
                    frontier_phi_55_pred_5 = _3257;
                }
                _2954 = frontier_phi_55_pred;
                _2956 = frontier_phi_55_pred_1;
                _2952 = frontier_phi_55_pred_2;
                _2950 = frontier_phi_55_pred_3;
                _2948 = frontier_phi_55_pred_4;
                _2946 = frontier_phi_55_pred_5;
                uint _3167 = _3166 + 1u;
                if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3160 = _2946;
                    _3161 = _2948;
                    _3162 = _2950;
                    _3163 = _2952;
                    _3164 = _2954;
                    _3165 = _2956;
                    _3166 = _3167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
        }
        uvec4 _2959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2960 = _2959.z;
        uint _2962 = (_2960 >> 8u) & 15u;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((4294967295u << _2962) & _2715) == 0u)
        {
            _3128 = _2945;
            _3130 = _2947;
            _3132 = _2949;
            _3134 = _2951;
            _3136 = _2953;
            _3138 = _2955;
        }
        else
        {
            float _3153 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
            float _3154 = _3153 * _2669;
            float _3155 = _3153 * _2670;
            float _3156 = _3153 * _2671;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2962 < ((_2960 >> 12u) & 15u))
            {
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3339 = _2945;
                float _3340 = _2947;
                float _3341 = _2949;
                float _3342 = _2951;
                float _3343 = _2953;
                float _3344 = _2955;
                uint _3345 = _2962;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3355)
                    {
                        frontier_phi_69_pred = _3344;
                        frontier_phi_69_pred_1 = _3343;
                        frontier_phi_69_pred_2 = _3342;
                        frontier_phi_69_pred_3 = _3341;
                        frontier_phi_69_pred_4 = _3340;
                        frontier_phi_69_pred_5 = _3339;
                    }
                    else
                    {
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3582 = _3339;
                        float _3583 = _3340;
                        float _3584 = _3341;
                        float _3585 = _3342;
                        float _3586 = _3343;
                        float _3587 = _3344;
                        uint _3588 = _3354;
                        uint _3589;
                        vec4 _3614;
                        float _3615;
                        vec4 _3630;
                        vec3 _3642;
                        vec4 _3657;
                        vec4 _3672;
                        float _3718;
                        bool _3719;
                        for (;;)
                        {
                            uint _3599 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3588));
                            _3589 = (_3588 + 4294967295u) & _3588;
                            uint _3601 = _3599 * 40u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3615 = _3614.w;
                            uint _3617 = (_3599 * 40u) + 4u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3599 * 40u) + 8u;
                            _3642 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x));
                            uint _3644 = (_3599 * 40u) + 16u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3599 * 40u) + 20u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3599 * 40u) + 24u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3693 = (_3599 * 40u) + 28u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3718 = fma(_2671, _3706.z, fma(_2670, _3706.y, _3706.x * _2669)) + _3706.w;
                            _3719 = !((fma(_2671, _3687.z, fma(_2670, _3687.y, _3687.x * _2669)) + _3687.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3719)
                            {
                                float _3746 = _3614.x - _2669;
                                float _3747 = _3614.y - _2670;
                                float _3748 = _3614.z - _2671;
                                float _3749 = dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748));
                                float _3752 = inversesqrt(_3749);
                                float _3753 = _3752 * _3746;
                                float _3754 = _3752 * _3747;
                                float _3755 = _3752 * _3748;
                                float _3759 = 1.0 - (_3749 / (_3615 * _3615));
                                float _4968 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3764 = sqrt(_3749) * _3630.w;
                                float _3766 = 1.39999997615814208984375 / (_3764 + 1.39999997615814208984375);
                                float _3767 = _3766 * _3766;
                                float _3770 = ((1.0 - _3767) * dot(vec3(_3753, _3754, _3755), vec3(_1284, _1287, _1290))) + _3767;
                                float _3773 = _3764 * _3764;
                                float _3777 = (fma(_2671, _3657.z, fma(_2670, _3657.y, _3657.x * _2669)) + _3657.w) / _3718;
                                float _3778 = (fma(_2671, _3672.z, fma(_2670, _3672.y, _3672.x * _2669)) + _3672.w) / _3718;
                                float _3782 = 1.0 - dot(vec2(_3777, _3778), vec2(_3777, _3778));
                                float _4984 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3784 = _3783 * (((isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0))) * _3760) / ((_3773 * 0.699999988079071044921875) + 1.0));
                                float _3796 = exp2(log2(1.0 / ((_3773 * 3.5) + 5.0)) * 0.25);
                                float _3797 = 1.0 - _1357;
                                float _3804 = sqrt(1.0 - ((1.0 - (_3797 * _3797)) * (1.0 - (_3796 * _3796))));
                                float _3805 = _3804 * _3804;
                                float _3806 = _3805 * _3805;
                                float _3807 = _3753 - _3154;
                                float _3808 = _3754 - _3155;
                                float _3809 = _3755 - _3156;
                                float _3813 = inversesqrt(dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809)));
                                float _3817 = dot(vec3(_1284, _1287, _1290), vec3((-0.0) - _3154, (-0.0) - _3155, (-0.0) - _3156));
                                float _4995 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3821 = dot(vec3(_1284, _1287, _1290), vec3(_3813 * _3807, _3813 * _3808, _3813 * _3809));
                                float _5006 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3828 = ((_3824 * _3824) * (_3806 + (-1.0))) + 1.0;
                                float _3829 = _3766 * _3805;
                                float _3830 = _3829 * _3829;
                                float _3836 = ((1.0 - _3830) * dot(vec3(_1284, _1287, _1290), vec3(_3753, _3754, _3755))) + _3830;
                                float _5017 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3838 = 1.0 - _3805;
                                float _3848 = (0.5 / (((_3837 * ((_3820 * _3838) + _3805)) + 9.9999999392252902907785028219223e-09) + (((_3837 * _3838) + _3805) * _3820))) * _3837;
                                float _5028 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3858 = (_3783 * _3760) * (((_3806 * 3.1415927410125732421875) * (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) / ((_3828 * _3828) * ((_3773 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3784 * _3630.x;
                                frontier_phi_75_pred_1 = _3784 * _3630.z;
                                frontier_phi_75_pred_2 = _3784 * _3630.y;
                                frontier_phi_75_pred_3 = _3858 * _3642.z;
                                frontier_phi_75_pred_4 = _3858 * _3642.y;
                                frontier_phi_75_pred_5 = _3858 * _3642.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3865 = frontier_phi_75_pred;
                            _3867 = frontier_phi_75_pred_1;
                            _3866 = frontier_phi_75_pred_2;
                            _3864 = frontier_phi_75_pred_3;
                            _3863 = frontier_phi_75_pred_4;
                            _3862 = frontier_phi_75_pred_5;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            if (_3589 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3589;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3574;
                        frontier_phi_69_pred_1 = _3573;
                        frontier_phi_69_pred_2 = _3572;
                        frontier_phi_69_pred_3 = _3571;
                        frontier_phi_69_pred_4 = _3570;
                        frontier_phi_69_pred_5 = _3569;
                    }
                    _3139 = frontier_phi_69_pred;
                    _3137 = frontier_phi_69_pred_1;
                    _3135 = frontier_phi_69_pred_2;
                    _3133 = frontier_phi_69_pred_3;
                    _3131 = frontier_phi_69_pred_4;
                    _3129 = frontier_phi_69_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3129;
                        _3340 = _3131;
                        _3341 = _3133;
                        _3342 = _3135;
                        _3343 = _3137;
                        _3344 = _3139;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _3131;
                frontier_phi_44_45_ladder_1 = _3139;
                frontier_phi_44_45_ladder_2 = _3137;
                frontier_phi_44_45_ladder_3 = _3135;
                frontier_phi_44_45_ladder_4 = _3133;
                frontier_phi_44_45_ladder_5 = _3129;
            }
            else
            {
                frontier_phi_44_45_ladder = _2947;
                frontier_phi_44_45_ladder_1 = _2955;
                frontier_phi_44_45_ladder_2 = _2953;
                frontier_phi_44_45_ladder_3 = _2951;
                frontier_phi_44_45_ladder_4 = _2949;
                frontier_phi_44_45_ladder_5 = _2945;
            }
            _3128 = frontier_phi_44_45_ladder_5;
            _3130 = frontier_phi_44_45_ladder;
            _3132 = frontier_phi_44_45_ladder_4;
            _3134 = frontier_phi_44_45_ladder_3;
            _3136 = frontier_phi_44_45_ladder_2;
            _3138 = frontier_phi_44_45_ladder_1;
        }
        float _3143 = isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0));
        _2728 = (_3143 * _3134) + _2455;
        _2730 = (_3143 * _3136) + _2456;
        _2732 = (_3143 * _3138) + _2457;
        _2734 = ((_3128 * 0.039999999105930328369140625) * _3143) + _2611;
        _2736 = ((_3130 * 0.039999999105930328369140625) * _3143) + _2612;
        _2738 = ((_3132 * 0.039999999105930328369140625) * _3143) + _2613;
    }
    else
    {
        _2728 = _2455;
        _2730 = _2456;
        _2732 = _2457;
        _2734 = _2611;
        _2736 = _2612;
        _2738 = _2613;
    }
    uint _2744 = _1304 + uint(cbMatDynParam._m0[0u].w);
    float _2771 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2772 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2773 = cbSceneParam._m0[86u].x * ((_1228 / cbSceneParam._m0[86u].x) + (((10.0 / (_1153 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1264, _1265, _1266), vec3(_228, _229, _230))));
    float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
    float _2775 = isnan(_2772) ? _1229 : (isnan(_1229) ? _2772 : min(_1229, _2772));
    vec4 _2777 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2774, _2775), 0.0);
    float _2779 = _2777.x;
    bool _2799 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2779)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2779))) > _1153;
    float _2800 = _2799 ? _2774 : _1228;
    float _2801 = _2799 ? _2775 : _1229;
    vec4 _2803 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2800, _2801));
    vec4 _2808 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2800, _2801));
    float _2810 = _2808.x;
    float _2830 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2810)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2810))) - _1153;
    bool _2840 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2844 = (isnan(_2830) ? 0.0 : (isnan(0.0) ? _2830 : max(0.0, _2830))) * (-1.44269502162933349609375);
    float _5059 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _5070 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _5081 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _2872 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2875 = ((_2803.x * _2872) * exp2(_2844 * (_2840 ? 0.0 : (cbMtdParam._m0[38u].x + cbMtdParam._m0[36u].z)))) * cbSceneParam._m0[72u].w;
    float _2878 = ((_2803.y * _2872) * exp2(_2844 * (_2840 ? 0.0 : (cbMtdParam._m0[38u].y + cbMtdParam._m0[36u].w)))) * cbSceneParam._m0[72u].w;
    float _2881 = ((_2803.z * _2872) * exp2(_2844 * (_2840 ? 0.0 : (cbMtdParam._m0[38u].z + cbMtdParam._m0[37u].x)))) * cbSceneParam._m0[72u].w;
    float _2890 = (((cbInstanceData._m0[_2744].x * (_948 - (_948 * TEXCOORD_7.x))) + ((_2734 + ((isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0))) * _2167)) * cbPerFrame._m0[3u].x)) + _2875) + ((((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_2728 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1328))) - _2875) * _1075);
    float _2893 = (((cbInstanceData._m0[_2744].y * (_950 - (_950 * TEXCOORD_7.y))) + ((_2736 + ((isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0))) * _2167)) * cbPerFrame._m0[3u].x)) + _2878) + ((((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_2730 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1328))) - _2878) * _1075);
    float _2896 = (((cbInstanceData._m0[_2744].z * (_952 - (_952 * TEXCOORD_7.z))) + ((_2738 + ((isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0))) * _2167)) * cbPerFrame._m0[3u].x)) + _2881) + ((((isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0))) * (_2732 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1328))) - _2881) * _1075);
    float _2897 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2898 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
    float _2899 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    uint _2900 = _1303 + 6u;
    float _2908 = _1228 / cbSceneParam._m0[86u].x;
    float _2909 = _1229 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _1153 : (isnan(_1153) ? cbSceneParam._m0[77u].w : min(_1153, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_1153 > cbSceneParam._m0[78u].w)
    {
        float _2970 = isnan(_1153) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1153 : min(cbSceneParam._m0[80u].w, _1153));
        float _2971 = _2970 / _1153;
        float _2982 = _2971 * _1202;
        float _2983 = _1203 * _2971;
        float _2984 = (-0.0) - _2983;
        float _2985 = _2971 * _1204;
        float _2987 = (cbSceneParam._m0[77u].w * _2984) / _2970;
        float _2988 = _2987 + cbSceneParam._m0[79u].w;
        float _2989 = cbSceneParam._m0[79u].w - _2983;
        float _2995 = sqrt(((_2982 * _2982) + (_2983 * _2983)) + (_2985 * _2985));
        float _2998 = (1.0 - (cbSceneParam._m0[77u].w / _2970)) * _2995;
        float _3004 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3005 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3270;
        if (abs((_2984 - _2987) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3270 = ((((_2988 > 0.0) ? exp2(_3004 * _2988) : (2.0 - exp2(_3005 * _2988))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2998;
        }
        else
        {
            float _3189 = 1.0 / cbSceneParam._m0[80u].x;
            float _3190 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : max(_2988, _2989));
            float _3191 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : min(_2988, _2989));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            _3270 = ((abs(_2995 / _2984) * cbSceneParam._m0[80u].y) * ((((_3200 - _3201) * 2.0) - ((exp2(_3004 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0)))) - exp2(_3004 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))))) * _3189)) - ((exp2(_3005 * _3200) - exp2(_3005 * _3201)) * _3189))) + (_2998 * cbSceneParam._m0[80u].z);
        }
        vec4 _3272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3281 = exp2((_3270 * (-1.44269502162933349609375)) * (1.0 - _3272.w));
        float _3282 = log2(_3281);
        float _3298 = log2(_2928);
        _3007 = (exp2(_3298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].x)) * _3272.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3009 = (exp2(_3298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].y)) * _3272.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3011 = (exp2(_3298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].z)) * _3272.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3013 = _3281 * _2928;
    }
    else
    {
        _3007 = _2925;
        _3009 = _2926;
        _3011 = _2927;
        _3013 = _2928;
    }
    bool _3308;
    float _3068;
    vec4 _3071;
    float _3073;
    vec4 _3075;
    float _3083;
    float _3084;
    float _3085;
    float _3086;
    bool _3096;
    for (;;)
    {
        bool _3025 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3026 = log2(_3013);
        float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * _2897;
        float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * _2898;
        float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * _2899;
        vec4 _3043 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1228, _1229));
        float _3045 = _3043.x;
        float _3066 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3045)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3045))) - _1153) * cbMtdParam._m0[23u].y;
        float _5147 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
        _3068 = (isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0))) * cbInstanceData._m0[_2900].w;
        float _3069 = _1218 + (-0.5);
        _3071 = cbMtdParam._m0[1u];
        _3073 = _3071.y * _3069;
        _3075 = cbMatDynParam._m0[0u];
        float _3082 = (roundEven(_3075.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3083 = _3082 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3007)));
        _3084 = _3082 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3009)));
        _3085 = _3082 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3011)));
        _3086 = _3069 * 0.999000012874603271484375;
        _3096 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3096)
        {
            if ((cbInstanceData._m0[_1303 + 7u].x + _3086) < 0.5)
            {
                _3308 = true;
                break;
            }
        }
        uint _3224 = _1304 + uint(_3075.w);
        if ((cbInstanceData._m0[_3224].w < 1.0) && ((cbInstanceData._m0[_3224].w + _3086) < 0.5))
        {
            _3308 = true;
            break;
        }
        if ((_3073 + 1.0) < _3071.x)
        {
            _3308 = true;
            break;
        }
        _3308 = false;
        break;
    }
    float _3539;
    if (_3308)
    {
        discard_state = true;
        _3539 = 0.0;
    }
    else
    {
        _3539 = _3068;
    }
    SV_Target.x = _3083;
    SV_Target.y = _3084;
    SV_Target.z = _3085;
    SV_Target.w = _3539;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3068;
    discard_exit();
}


