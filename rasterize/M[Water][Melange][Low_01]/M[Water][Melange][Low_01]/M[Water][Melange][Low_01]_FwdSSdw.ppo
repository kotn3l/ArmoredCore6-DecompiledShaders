#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1691;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _296 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _286);
    float _297 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _286);
    float _298 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _286);
    float _314 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _316 = (sqrt(((_296 * _296) + (_297 * _297)) + (_298 * _298)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0)));
    float _320 = _316 / cbMtdParam._m0[22u].z;
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(8.0) ? _321 : (isnan(_321) ? 8.0 : min(_321, 8.0));
    float _329 = cbMtdParam._m0[10u].x * _322;
    float _330 = cbMtdParam._m0[10u].y * _322;
    float _331 = cbMtdParam._m0[10u].z * _322;
    float _332 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _333 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _334 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _345 = cbMtdParam._m0[21u].y + _316;
    float _349 = _345 * cbMtdParam._m0[23u].z;
    float _3974 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    vec4 _368 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _371 = _368.x;
    float _395 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _371)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _371))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _3985 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _401 = 1.0 - (isnan(cbMtdParam._m0[24u].w) ? _396 : (isnan(_396) ? cbMtdParam._m0[24u].w : max(_396, cbMtdParam._m0[24u].w)));
    float _403 = (cbMtdParam._m0[24u].z + TEXCOORD_3.x) - (_401 * cbMtdParam._m0[20u].z);
    float _419 = (cbMtdParam._m0[27u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[19u].z;
    float _424 = cbMtdParam._m0[33u].x * TEXCOORD.x;
    float _425 = cbMtdParam._m0[33u].y * TEXCOORD.y;
    vec4 _439 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_2, SS_BumpMap), vec2((((_419 * cbMtdParam._m0[33u].z) + _424) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_425 + (_419 * cbMtdParam._m0[33u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _4001 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _445 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _446 = _439.z - _445;
    float _4012 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _459 = (_447 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _461 = (_447 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _474 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_459 + (cbMtdParam._m0[29u].z * _419)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_461 + (cbMtdParam._m0[29u].w * _419)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _478 = _474.z;
    vec4 _489 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_459 + (cbMtdParam._m0[29u].x * _419)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_461 + (cbMtdParam._m0[29u].y * _419)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _493 = _489.z;
    float _496 = (_401 - _439.w) + (isnan(_493) ? _478 : (isnan(_478) ? _493 : max(_478, _493)));
    float _4028 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _498 = (_403 * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)));
    float _499 = _498 * TEXCOORD_7.w;
    float _511 = ((_498 + cbMtdParam._m0[9u].x) - _499) + (cbMtdParam._m0[15u].x * _447);
    float _514 = ((_498 + cbMtdParam._m0[9u].y) - _499) + (cbMtdParam._m0[15u].y * _447);
    float _517 = ((_498 + cbMtdParam._m0[9u].z) - _499) + (cbMtdParam._m0[15u].z * _447);
    vec4 _563 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].x * _419))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].y * _419))) + cbTextureTilingScale._m0[1u].w));
    float _568 = _563.z * 0.099999986588954925537109375;
    float _4039 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _570 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _574 = cbMtdParam._m0[23u].x * _316;
    float _4050 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _589 = (_511 + (isnan(0.07999999821186065673828125) ? _332 : (isnan(_332) ? 0.07999999821186065673828125 : min(_332, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _511) - _570) + _568));
    float _591 = (_514 + (isnan(0.07999999821186065673828125) ? _333 : (isnan(_333) ? 0.07999999821186065673828125 : min(_333, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _514) - _570) + _568));
    float _593 = (_517 + (isnan(0.07999999821186065673828125) ? _334 : (isnan(_334) ? 0.07999999821186065673828125 : min(_334, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _517) + _568) - _570));
    float _4061 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _594 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _595 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _603 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _445) + cbMtdParam._m0[19u].x;
    float _615 = (POSITION_1.w - cbMtdParam._m0[27u].y) * (1.0 / cbMtdParam._m0[27u].x);
    float _4094 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _629 = (cbMtdParam._m0[32u].x * _419) + _424;
    float _630 = (cbMtdParam._m0[32u].y * _419) + _425;
    vec4 _657 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[31u].z * _419) + _424)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[31u].w * _419) + _425)) + cbTextureTilingScale._m0[3u].w));
    float _664 = (_657.x * 2.0) + (-1.0);
    float _666 = (_657.y * 2.0) + (-1.0);
    float _670 = 1.0 - dot(vec2(_664, _666), vec2(_664, _666));
    float _4105 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = sqrt(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)));
    float _675 = fma(_672, _233, fma(_666, _240, _664 * _226));
    float _678 = fma(_672, _234, fma(_666, _241, _664 * _227));
    float _681 = fma(_672, _235, fma(_666, _242, _664 * _228));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = cbPerFrame._m0[22u].x * 2.0;
    float _687 = _686 * cbMtdParam._m0[25u].w;
    float _691 = ((_675 * 0.5) * _685) + (-0.25);
    float _695 = ((_678 * 0.5) * _685) + (-0.25);
    float _696 = _695 * cbMtdParam._m0[26u].x;
    float _698 = (-0.0) - (cbMtdParam._m0[26u].x * _691);
    float _699 = fract(_687);
    float _701 = fract(_687 + 0.5);
    float _712 = abs((_699 * 2.0) + (-1.0));
    vec4 _729 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_699 * _698) + _629) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_696 * _699) + _630) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _731 = _729.x;
    float _732 = _729.y;
    float _733 = _729.z;
    vec4 _734 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_701 * _698) + _629) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_696 * _701) + _630) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _745 = ((_734.x - _731) * _712) + _731;
    float _746 = ((_734.y - _732) * _712) + _732;
    float _747 = ((_734.z - _733) * _712) + _733;
    float _761 = (cbMtdParam._m0[31u].x * _419) + _424;
    float _762 = (cbMtdParam._m0[31u].y * _419) + _425;
    float _765 = _686 * cbMtdParam._m0[25u].z;
    float _766 = _695 * cbMtdParam._m0[25u].y;
    float _768 = (-0.0) - (cbMtdParam._m0[25u].y * _691);
    float _769 = fract(_765);
    float _771 = fract(_765 + 0.5);
    float _782 = abs((_769 * 2.0) + (-1.0));
    vec4 _799 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_769 * _768) + _761) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_766 * _769) + _762) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    vec4 _804 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_771 * _768) + _761) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_766 * _771) + _762) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _838 = (((((cbMtdParam._m0[16u].x - cbMtdParam._m0[18u].x) * _745) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].x) * (((_804.x - _799.x) * _782) + _799.x)) + (_745 * cbMtdParam._m0[17u].x);
    float _841 = (((((cbMtdParam._m0[16u].y - cbMtdParam._m0[18u].y) * _746) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].y) * (((_804.y - _799.y) * _782) + _799.y)) + (_746 * cbMtdParam._m0[17u].y);
    float _844 = ((((cbMtdParam._m0[28u].x * _747) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_804.z - _799.z) * _782) + _799.z)) + (_747 * cbMtdParam._m0[17u].z);
    float _848 = _838 - (_838 * _616);
    float _849 = _841 - (_841 * _616);
    float _850 = _844 - (_844 * _616);
    float _855 = (POSITION_1.w - cbMtdParam._m0[26u].w) * (1.0 / cbMtdParam._m0[26u].z);
    float _4116 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _856 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _866 = (cbMtdParam._m0[32u].z * _419) + _424;
    float _867 = (cbMtdParam._m0[32u].w * _419) + _425;
    vec4 _880 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_866 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_867 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _882 = _880.x;
    float _883 = _880.y;
    float _884 = _880.z;
    vec4 _906 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _866) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _867) + cbTextureTilingScale._m0[7u].w));
    float _946 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].x) * (((((_882 * cbMtdParam._m0[11u].x) - _848) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _882) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].x) * _906.x)) * _856) + _848);
    float _948 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].y) * (((((_883 * cbMtdParam._m0[11u].y) - _849) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _883) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].y) * _906.y)) * _856) + _849);
    float _950 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].z) * (((((_884 * cbMtdParam._m0[11u].z) - _850) + ((((cbMtdParam._m0[28u].y * _884) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _906.z)) * _856) + _850);
    float _4127 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _957 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _967 = _316 / cbMtdParam._m0[22u].w;
    float _4138 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _968 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _969 = _447 * 0.23999999463558197021484375;
    float _971 = _447 * (-0.20000000298023223876953125);
    float _982 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _983 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _992 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].z * _419) + _969) + _982) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[34u].w * _419) + _971) + _983) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1008 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_982 + _969) + (cbMtdParam._m0[35u].z * _419)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_983 + _971) + (cbMtdParam._m0[35u].w * _419)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1028 = (((_489.x + (-0.5)) * 0.5) + _474.x) + (((_992.x + (-1.0)) + _1008.x) * cbMtdParam._m0[24u].y);
    float _1029 = (((_489.y + (-0.5)) * 0.5) + _474.y) + (((_992.y + (-1.0)) + _1008.y) * cbMtdParam._m0[24u].y);
    float _1034 = ((_563.x - _1028) * _968) + _1028;
    float _1035 = ((_563.y - _1029) * _968) + _1029;
    float _1037 = _316 / cbMtdParam._m0[22u].y;
    float _4149 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1038 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1054 = ((((_957 * (0.5 - _441)) + _441) + (((_1034 + (-0.5)) + ((0.5 - _1034) * _1038)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1055 = ((((_957 * (0.5 - _442)) + _442) + (((_1035 + (-0.5)) + ((0.5 - _1035) * _1038)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1056 = dot(vec2(_1054, _1055), vec2(_1054, _1055));
    float _4160 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1061 = sqrt(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))));
    float _1063 = cbMtdParam._m0[23u].w * _345;
    float _4171 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1070 = cbMtdParam._m0[21u].w * _345;
    float _4182 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * cbMtdParam._m0[26u].y;
    float _4193 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1073 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _1078 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1083 = _1054 - (_1078 * _1054);
    float _1084 = _1055 - (_1078 * _1055);
    float _1085 = (_1078 * (1.0 - _1061)) + _1061;
    float _1104 = fma(_1061, _233, fma(_1055, _240, _1054 * _226));
    float _1107 = fma(_1061, _234, fma(_1055, _241, _1054 * _227));
    float _1110 = fma(_1061, _235, fma(_1055, _242, _1054 * _228));
    float _1114 = inversesqrt(dot(vec3(_1104, _1107, _1110), vec3(_1104, _1107, _1110)));
    float _1115 = _1114 * _1104;
    float _1116 = _1114 * _1107;
    float _1117 = _1114 * _1110;
    float _1120 = fma(_1085, _233, fma(_1084, _240, _1083 * _226));
    float _1123 = fma(_1085, _234, fma(_1084, _241, _1083 * _227));
    float _1126 = fma(_1085, _235, fma(_1084, _242, _1083 * _228));
    float _1130 = inversesqrt(dot(vec3(_1120, _1123, _1126), vec3(_1120, _1123, _1126)));
    float _1131 = _1130 * _1120;
    float _1132 = _1130 * _1123;
    float _1133 = _1130 * _1126;
    float _4204 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _1134 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4226 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4237 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _1151 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1200 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1191);
    float _1201 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1191);
    float _1202 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1191);
    float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
    float _1207 = _1200 * _1206;
    float _1208 = _1201 * _1206;
    float _1209 = _1202 * _1206;
    float _1214 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1215 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1217 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1226 = (_1217.x * 2.0) + (-1.0);
    float _1227 = (_1217.y * 2.0) + (-1.0);
    float _1228 = (_1217.z * 2.0) + (-1.0);
    float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
    float _1243 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1217.w;
    float _1250 = (((_1226 * _1232) - _1115) * _1243) + _1115;
    float _1251 = (((_1227 * _1232) - _1116) * _1243) + _1116;
    float _1252 = (((_1228 * _1232) - _1117) * _1243) + _1117;
    float _1270 = fma(_1252, cbSceneParam._m0[5u].z, fma(_1251, cbSceneParam._m0[5u].y, _1250 * cbSceneParam._m0[5u].x));
    float _1273 = fma(_1252, cbSceneParam._m0[6u].z, fma(_1251, cbSceneParam._m0[6u].y, _1250 * cbSceneParam._m0[6u].x));
    float _1276 = fma(_1252, cbSceneParam._m0[7u].z, fma(_1251, cbSceneParam._m0[7u].y, _1250 * cbSceneParam._m0[7u].x));
    uint _1289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1290 = _1289 + 9u;
    uint _1291 = _1290 + uint(cbMatDynParam._m0[0u].w);
    float _1297 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * cbInstanceData._m0[_1291].x;
    float _1298 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1291].y;
    float _1299 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1291].z;
    float _4248 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
    float _1300 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1301 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _1302 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    vec4 _1311 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1214, cbSceneParam._m0[86u].y * _1215));
    float _1314 = _1311.x * TEXCOORD_3.w;
    float _1318 = abs(dot(vec3(_1207, _1208, _1209), vec3(_1250, _1251, _1252)));
    float _4281 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1331 = dot(vec3(_1131, _1132, _1133), vec3(_1207, _1208, _1209)) * 2.0;
    float _1335 = (_1331 * _1131) - _1207;
    float _1336 = (_1331 * _1132) - _1208;
    float _1337 = (_1331 * _1133) - _1209;
    float _1341 = abs(dot(vec3(_1207, _1208, _1209), vec3(_1131, _1132, _1133)));
    float _4292 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _1343 = sqrt(_1134);
    float _1355 = exp2((_1343 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1343 * 3.0));
    float _1386 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1390 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1394 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1690;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1419 = fma(_1394, cbModelParam._m0[26u].z, fma(_1390, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1386));
        float _1423 = fma(_1394, cbModelParam._m0[27u].z, fma(_1390, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1386));
        float _1427 = fma(_1394, cbModelParam._m0[28u].z, fma(_1390, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1386));
        float _1449 = _1386 + _1131;
        float _1450 = _1390 + _1132;
        float _1451 = _1394 + _1133;
        float _1461 = fma(_1451, cbModelParam._m0[26u].z, fma(_1450, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1449)) - _1419;
        float _1462 = fma(_1451, cbModelParam._m0[27u].z, fma(_1450, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1449)) - _1423;
        float _1463 = fma(_1451, cbModelParam._m0[28u].z, fma(_1450, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1449)) - _1427;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1479 = ((_1467 * _1461) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1419 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1467 * _1462) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1423 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1463) / cbModelParam._m0[34u].z) + ((((((_1427 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1518 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1484.x + (-0.5));
        float _1520 = _1518 * (_1484.y + (-0.5));
        float _1521 = _1518 * (_1484.z + (-0.5));
        float _1528 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1491.x + (-0.5));
        float _1530 = _1528 * (_1491.y + (-0.5));
        float _1531 = _1528 * (_1491.z + (-0.5));
        float _1538 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1498.x + (-0.5));
        float _1540 = _1538 * (_1498.y + (-0.5));
        float _1541 = _1538 * (_1498.z + (-0.5));
        float _1548 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1505.x + (-0.5));
        float _1550 = _1548 * (_1505.y + (-0.5));
        float _1551 = _1548 * (_1505.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1572 = (dot(vec3(_1131, _1132, _1133), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1582 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4340 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1584 + 1.0))) + _1589) * _1552;
        float _1599 = _1520 * 0.5;
        float _1600 = _1530 * 0.5;
        float _1601 = _1540 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_1131, _1132, _1133), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4373 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1626 + 1.0))) + _1631) * _1553;
        float _1641 = _1521 * 0.5;
        float _1642 = _1531 * 0.5;
        float _1643 = _1541 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_1131, _1132, _1133), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4406 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1668 + 1.0))) + _1673) * _1554;
        _1690 = _1521;
        _1692 = _1520;
        _1693 = _1519;
        _1694 = _1531;
        _1695 = _1530;
        _1696 = _1529;
        _1697 = _1541;
        _1698 = _1540;
        _1699 = _1539;
        _1700 = _1554;
        _1701 = _1553;
        _1702 = _1552;
        _1703 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1704 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1691;
        _1692 = _1691;
        _1693 = _1691;
        _1694 = _1691;
        _1695 = _1691;
        _1696 = _1691;
        _1697 = _1691;
        _1698 = _1691;
        _1699 = _1691;
        _1700 = _1691;
        _1701 = _1691;
        _1702 = _1691;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1996;
    float _1997;
    float _1998;
    float _1999;
    float _2000;
    float _2001;
    float _2002;
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1729 = fma(_1394, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1386));
        float _1733 = fma(_1394, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1386));
        float _1737 = fma(_1394, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1386));
        float _1759 = _1386 + _1131;
        float _1760 = _1390 + _1132;
        float _1761 = _1394 + _1133;
        float _1771 = fma(_1761, cbModelParam._m0[30u].z, fma(_1760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1759)) - _1729;
        float _1772 = fma(_1761, cbModelParam._m0[31u].z, fma(_1760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1759)) - _1733;
        float _1773 = fma(_1761, cbModelParam._m0[32u].z, fma(_1760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1759)) - _1737;
        float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
        float _1789 = ((_1777 * _1771) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1729 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1790 = ((_1777 * _1772) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1733 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1791 = ((_1777 * _1773) / cbModelParam._m0[35u].z) + ((((((_1737 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1793 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1789, _1790, _1791), 0.0);
        vec4 _1800 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1789, _1790, _1791), 0.0);
        vec4 _1807 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1789, _1790, _1791), 0.0);
        vec4 _1814 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1789, _1790, _1791), 0.0);
        float _1826 = exp2((_1793.w + (-0.5)) * 20.0) * 2.0;
        float _1827 = _1826 * (_1793.x + (-0.5));
        float _1828 = _1826 * (_1793.y + (-0.5));
        float _1829 = _1826 * (_1793.z + (-0.5));
        float _1836 = exp2((_1800.w + (-0.5)) * 20.0) * 2.0;
        float _1837 = _1836 * (_1800.x + (-0.5));
        float _1838 = _1836 * (_1800.y + (-0.5));
        float _1839 = _1836 * (_1800.z + (-0.5));
        float _1846 = exp2((_1807.w + (-0.5)) * 20.0) * 2.0;
        float _1847 = _1846 * (_1807.x + (-0.5));
        float _1848 = _1846 * (_1807.y + (-0.5));
        float _1849 = _1846 * (_1807.z + (-0.5));
        float _1856 = exp2((_1814.w + (-0.5)) * 20.0) * 2.0;
        float _1857 = _1856 * (_1814.x + (-0.5));
        float _1858 = _1856 * (_1814.y + (-0.5));
        float _1859 = _1856 * (_1814.z + (-0.5));
        float _1860 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1861 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1862 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1863 = _1827 * 0.5;
        float _1864 = _1837 * 0.5;
        float _1865 = _1847 * 0.5;
        float _1866 = dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865));
        float _1871 = (_1866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1866);
        float _1879 = (dot(vec3(_1131, _1132, _1133), vec3(_1871 * _1863, _1871 * _1864, _1871 * _1865)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1888 = sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865)) / (_1860 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1890 = _1889 * 2.0;
        float _1894 = (1.0 - _1889) / (_1889 + 1.0);
        float _4469 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1904 = ((((1.0 - _1895) * (_1890 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1890 + 1.0))) + _1895) * _1860;
        float _1905 = _1828 * 0.5;
        float _1906 = _1838 * 0.5;
        float _1907 = _1848 * 0.5;
        float _1908 = dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907));
        float _1913 = (_1908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1908);
        float _1921 = (dot(vec3(_1131, _1132, _1133), vec3(_1913 * _1905, _1913 * _1906, _1913 * _1907)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1930 = sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907)) / (_1861 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1931 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1932 = _1931 * 2.0;
        float _1936 = (1.0 - _1931) / (_1931 + 1.0);
        float _4502 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1946 = ((((1.0 - _1937) * (_1932 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1932 + 1.0))) + _1937) * _1861;
        float _1947 = _1829 * 0.5;
        float _1948 = _1839 * 0.5;
        float _1949 = _1849 * 0.5;
        float _1950 = dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949));
        float _1955 = (_1950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1950);
        float _1963 = (dot(vec3(_1131, _1132, _1133), vec3(_1955 * _1947, _1955 * _1948, _1955 * _1949)) + 1.0) * 0.5;
        float _4513 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1972 = sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949)) / (_1862 + 9.9999997473787516355514526367188e-06);
        float _4524 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1974 = _1973 * 2.0;
        float _1978 = (1.0 - _1973) / (_1973 + 1.0);
        float _4535 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1988 = ((((1.0 - _1979) * (_1974 + 2.0)) * exp2(log2(isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_1974 + 1.0))) + _1979) * _1862;
        _1996 = _1829;
        _1997 = _1828;
        _1998 = _1827;
        _1999 = _1839;
        _2000 = _1838;
        _2001 = _1837;
        _2002 = _1849;
        _2003 = _1848;
        _2004 = _1847;
        _2005 = _1862;
        _2006 = _1861;
        _2007 = _1860;
        _2008 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)));
        _2009 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0)));
        _2010 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)));
    }
    else
    {
        _1996 = _1691;
        _1997 = _1691;
        _1998 = _1691;
        _1999 = _1691;
        _2000 = _1691;
        _2001 = _1691;
        _2002 = _1691;
        _2003 = _1691;
        _2004 = _1691;
        _2005 = _1691;
        _2006 = _1691;
        _2007 = _1691;
        _2008 = 0.0;
        _2009 = 0.0;
        _2010 = 0.0;
    }
    float _2020 = (cbModelParam._m0[1u].x * (_2008 - _1703)) + _1703;
    float _2021 = (cbModelParam._m0[1u].x * (_2009 - _1704)) + _1704;
    float _2022 = (cbModelParam._m0[1u].x * (_2010 - _1705)) + _1705;
    float _2043 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2021, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2046 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2021, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2049 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2021, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2020));
    float _2064 = _1335 * 0.5;
    float _2065 = _1336 * 0.5;
    float _2066 = _1337 * 0.5;
    float _2067 = dot(vec4(_2064, _2065, _2066, 1.0), vec4(_1998, _2001, _2004, _2007));
    float _2070 = dot(vec4(_2064, _2065, _2066, 1.0), vec4(_1997, _2000, _2003, _2006));
    float _2073 = dot(vec4(_2064, _2065, _2066, 1.0), vec4(_1996, _1999, _2002, _2005));
    float _2107;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2080 = dot(vec4(_2064, _2065, _2066, 1.0), vec4(_1690, _1694, _1697, _1700));
        float _2084 = dot(vec4(_2064, _2065, _2066, 1.0), vec4(_1692, _1695, _1698, _1701));
        float _2088 = dot(vec4(_2064, _2065, _2066, 1.0), vec4(_1693, _1696, _1699, _1702));
        float _2095 = dot(vec4(cbModelParam._m0[39u]), vec4(_2064, _2065, _2066, 1.0));
        _2107 = dot(vec3(isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0)), isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0)), isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2095) ? 0.0 : (isnan(0.0) ? _2095 : max(0.0, _2095))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2107 = 1.0;
    }
    float _2118;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2109 = dot(vec4(cbModelParam._m0[40u]), vec4(_2064, _2065, _2066, 1.0));
        _2118 = dot(vec3(isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0)), isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0)), isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2109) ? 0.0 : (isnan(0.0) ? _2109 : max(0.0, _2109))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2118 = 1.0;
    }
    float _2122 = (_2118 * cbModelParam._m0[1u].x) + (_2107 * (1.0 - cbModelParam._m0[1u].x));
    float _2132 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1134);
    float _2133 = isnan(_2132) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2132 : min(cbModelParam._m0[25u].z, _2132));
    float _2213;
    float _2215;
    float _2217;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2180 = fma(_1394, cbModelParam._m0[13u].z, fma(_1390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1386)) + cbModelParam._m0[13u].w;
        float _2184 = fma(_1394, cbModelParam._m0[14u].z, fma(_1390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1386)) + cbModelParam._m0[14u].w;
        float _2188 = fma(_1394, cbModelParam._m0[15u].z, fma(_1390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1386)) + cbModelParam._m0[15u].w;
        float _2191 = fma(_1337, cbModelParam._m0[13u].z, fma(_1336, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1335));
        float _2194 = fma(_1337, cbModelParam._m0[14u].z, fma(_1336, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1335));
        float _2197 = fma(_1337, cbModelParam._m0[15u].z, fma(_1336, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1335));
        float _2225;
        if (_2191 > 0.0)
        {
            _2225 = abs((1.0 - _2180) / _2191);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2191 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2180 + 1.0) / _2191);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2225 = frontier_phi_14_12_ladder;
        }
        float _2598;
        if (_2194 > 0.0)
        {
            _2598 = abs((1.0 - _2184) / _2194);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2194 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2184 + 1.0) / _2194);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2598 = frontier_phi_23_19_ladder;
        }
        float _3068;
        if (_2197 > 0.0)
        {
            _3068 = abs((1.0 - _2188) / _2197);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_2188 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _3068 = frontier_phi_37_30_ladder;
        }
        float _3070 = isnan(_2598) ? _2225 : (isnan(_2225) ? _2598 : min(_2225, _2598));
        float _3071 = isnan(_3068) ? _3070 : (isnan(_3070) ? _3068 : min(_3070, _3068));
        float _3075 = (_3071 * _2191) + _2180;
        float _3076 = (_3071 * _2194) + _2184;
        float _3077 = (_3071 * _2197) + _2188;
        float _3078 = _3071 * 9.9999997473787516355514526367188e-05;
        float _3079 = (-1.0) - _3078;
        float _3081 = _3078 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_3077 > _3081) || ((_3077 < _3079) || ((_3076 > _3081) || ((_3076 < _3079) || ((_3075 < _3079) || (_3075 > _3081))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3077, cbModelParam._m0[9u].z, fma(_3076, cbModelParam._m0[9u].y, _3075 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3077, cbModelParam._m0[10u].z, fma(_3076, cbModelParam._m0[10u].y, _3075 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3077, cbModelParam._m0[11u].z, fma(_3076, cbModelParam._m0[11u].y, _3075 * cbModelParam._m0[11u].x))), _2133);
            frontier_phi_13_37_ladder = _3203.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _3203.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _3203.x * cbModelParam._m0[1u].y;
        }
        _2213 = frontier_phi_13_37_ladder_2;
        _2215 = frontier_phi_13_37_ladder_1;
        _2217 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _2201 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1335, _1336, _1337), _2133);
        _2213 = _2201.x * cbModelParam._m0[1u].y;
        _2215 = _2201.y * cbModelParam._m0[1u].y;
        _2217 = _2201.z * cbModelParam._m0[1u].y;
    }
    float _2221 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1134);
    float _2222 = isnan(_2221) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2221 : min(cbModelParam._m0[25u].w, _2221));
    float _2311;
    float _2313;
    float _2315;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2275 = fma(_1394, cbModelParam._m0[21u].z, fma(_1390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1386)) + cbModelParam._m0[21u].w;
        float _2279 = fma(_1394, cbModelParam._m0[22u].z, fma(_1390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1386)) + cbModelParam._m0[22u].w;
        float _2283 = fma(_1394, cbModelParam._m0[23u].z, fma(_1390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1386)) + cbModelParam._m0[23u].w;
        float _2286 = fma(_1337, cbModelParam._m0[21u].z, fma(_1336, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1335));
        float _2289 = fma(_1337, cbModelParam._m0[22u].z, fma(_1336, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1335));
        float _2292 = fma(_1337, cbModelParam._m0[23u].z, fma(_1336, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1335));
        float _2603;
        if (_2286 > 0.0)
        {
            _2603 = abs((1.0 - _2275) / _2286);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2286 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2275 + 1.0) / _2286);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2603 = frontier_phi_25_21_ladder;
        }
        float _3094;
        if (_2289 > 0.0)
        {
            _3094 = abs((1.0 - _2279) / _2289);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2289 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2279 + 1.0) / _2289);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3094 = frontier_phi_39_32_ladder;
        }
        float _3263;
        if (_2292 > 0.0)
        {
            _3263 = abs((1.0 - _2283) / _2292);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_2292 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_2283 + 1.0) / _2292);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _3263 = frontier_phi_53_48_ladder;
        }
        float _3265 = isnan(_3094) ? _2603 : (isnan(_2603) ? _3094 : min(_2603, _3094));
        float _3266 = isnan(_3263) ? _3265 : (isnan(_3265) ? _3263 : min(_3265, _3263));
        float _3270 = (_3266 * _2286) + _2275;
        float _3271 = (_3266 * _2289) + _2279;
        float _3272 = (_3266 * _2292) + _2283;
        float _3273 = _3266 * 9.9999997473787516355514526367188e-05;
        float _3274 = (-1.0) - _3273;
        float _3276 = _3273 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_3272 > _3276) || ((_3272 < _3274) || ((_3271 > _3276) || ((_3271 < _3274) || ((_3270 < _3274) || (_3270 > _3276))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3272, cbModelParam._m0[17u].z, fma(_3271, cbModelParam._m0[17u].y, _3270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3272, cbModelParam._m0[18u].z, fma(_3271, cbModelParam._m0[18u].y, _3270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3272, cbModelParam._m0[19u].z, fma(_3271, cbModelParam._m0[19u].y, _3270 * cbModelParam._m0[19u].x))), _2222);
            frontier_phi_22_53_ladder = _3505.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3505.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3505.x * cbModelParam._m0[1u].z;
        }
        _2311 = frontier_phi_22_53_ladder_2;
        _2313 = frontier_phi_22_53_ladder;
        _2315 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _2295 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1335, _1336, _1337), _2222);
        _2311 = _2295.x * cbModelParam._m0[1u].z;
        _2313 = _2295.y * cbModelParam._m0[1u].z;
        _2315 = _2295.z * cbModelParam._m0[1u].z;
    }
    float _2327 = ((((1.0 - _1355) * ((_1343 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1355 * _1343)) * _1314;
    float _2328 = _2327 * ((cbModelParam._m0[1u].w * (_2311 - _2213)) + _2213);
    float _2329 = _2327 * ((cbModelParam._m0[1u].w * (_2313 - _2215)) + _2215);
    float _2330 = _2327 * ((cbModelParam._m0[1u].w * (_2315 - _2217)) + _2217);
    float _2333 = fma(_2330, cbSceneParam._m0[89u].z, fma(_2329, cbSceneParam._m0[89u].y, _2328 * cbSceneParam._m0[89u].x));
    float _2336 = fma(_2330, cbSceneParam._m0[90u].z, fma(_2329, cbSceneParam._m0[90u].y, _2328 * cbSceneParam._m0[90u].x));
    float _2339 = fma(_2330, cbSceneParam._m0[91u].z, fma(_2329, cbSceneParam._m0[91u].y, _2328 * cbSceneParam._m0[91u].x));
    vec4 _2347 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1214, _1215));
    float _2349 = _2347.w;
    float _2361 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2349);
    float _2362 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2349);
    float _2363 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2349);
    uvec4 _2367 = floatBitsToUint(cbInstanceData._m0[_1289 + 5u]);
    uint _2369 = _2367.x * 14u;
    uint _2370 = _2369 + 13u;
    float _2375 = _1314 + (-1.0);
    float _2378 = (cbLight._m0[_2370].x * _2375) + 1.0;
    float _2379 = (cbLight._m0[_2370].y * _2375) + 1.0;
    uint _2380 = _2369 + 5u;
    float _2386 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
    uint _2390 = _2369 + 4u;
    float _2399 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    uint _2403 = _2369 | 1u;
    float _2414 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_1250, _1251, _1252));
    float _2417 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_1250, _1251, _1252));
    float _4671 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _4682 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2422 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2424 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2431 = ((cbLight._m0[_2380].x * _2386) * _2424) + (((cbLight._m0[_2390].x * _2361) * _2399) * _2422);
    float _2432 = ((_2386 * cbLight._m0[_2380].y) * _2424) + (((cbLight._m0[_2390].y * _2362) * _2399) * _2422);
    float _2433 = ((_2386 * cbLight._m0[_2380].z) * _2424) + (((cbLight._m0[_2390].z * _2363) * _2399) * _2422);
    uint _2435 = _2369 + 8u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _1134) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2369].x + _1207;
    float _2451 = cbLight._m0[_2369].y + _1208;
    float _2452 = cbLight._m0[_2369].z + _1209;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_1250, _1251, _1252), vec3(cbLight._m0[_2369].xyz));
    float _4693 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2464 = dot(vec3(_1250, _1251, _1252), vec3(_1207, _1208, _1209));
    float _4704 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2468 = dot(vec3(_1250, _1251, _1252), vec3(_2457, _2458, _2459));
    float _4715 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2457, _2458, _2459));
    float _4726 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2449 * _2449;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2492 = 1.0 - _2449;
    float _2503 = (0.5 / (((_2467 * ((_2463 * _2492) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2492) + _2449) * _2463))) * _2463;
    float _4737 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    uint _2519 = _2369 + 9u;
    float _2530 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _1134) * 0.949999988079071044921875);
    float _2531 = _2530 * _2530;
    float _2532 = cbLight._m0[_2403].x + _1207;
    float _2533 = cbLight._m0[_2403].y + _1208;
    float _2534 = cbLight._m0[_2403].z + _1209;
    float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
    float _2539 = _2538 * _2532;
    float _2540 = _2538 * _2533;
    float _2541 = _2538 * _2534;
    float _2542 = dot(vec3(_1250, _1251, _1252), vec3(cbLight._m0[_2403].xyz));
    float _4748 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2546 = dot(vec3(_1250, _1251, _1252), vec3(_2539, _2540, _2541));
    float _4759 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2539, _2540, _2541));
    float _4770 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2531 * _2531;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2567 = (exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2568 = 1.0 - _2531;
    float _2578 = (0.5 / (((_2467 * ((_2545 * _2568) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2467 * _2568) + _2531) * _2545))) * _2545;
    float _4781 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    float _2590 = (((_2567 * cbLight._m0[_2519].x) * _2580) * _2386) + ((((cbLight._m0[_2435].x * _2361) * _2491) * _2505) * _2399);
    float _2591 = (((_2567 * cbLight._m0[_2519].y) * _2580) * _2386) + ((((cbLight._m0[_2435].y * _2362) * _2491) * _2505) * _2399);
    float _2592 = (((_2567 * cbLight._m0[_2519].z) * _2580) * _2386) + ((((cbLight._m0[_2435].z * _2363) * _2491) * _2505) * _2399);
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_2367.y == 0u)
    {
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2647;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2647;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2647;
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1215) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _1214) / _2663)));
        float _2684 = (log2(_2650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
        }
        else
        {
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_3147)
                {
                    frontier_phi_50_pred = _3134;
                    frontier_phi_50_pred_1 = _3136;
                    frontier_phi_50_pred_2 = _3135;
                    frontier_phi_50_pred_3 = _3133;
                    frontier_phi_50_pred_4 = _3132;
                    frontier_phi_50_pred_5 = _3131;
                }
                else
                {
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    uint _3312;
                    _3306 = _3131;
                    _3307 = _3132;
                    _3308 = _3133;
                    _3309 = _3134;
                    _3310 = _3135;
                    _3311 = _3136;
                    _3312 = _3146;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3316 = uint(findLSB(_3312)) + (_3137 << 5u);
                        uint _3313 = (_3312 + 4294967295u) & _3312;
                        uint _3318 = _3316 * 48u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3338 = (_3316 * 48u) + 4u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3357 = (_3316 * 48u) + 8u;
                        vec3 _3368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x));
                        float _3372 = _3332.x - _2648;
                        float _3373 = _3332.y - _2649;
                        float _3374 = _3332.z - _2650;
                        float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                        float _3378 = inversesqrt(_3375);
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3382 = dot(vec3(_1270, _1273, _1276), vec3(_3379, _3380, _3381));
                        float _3387 = 1.0 - (_3375 * _3332.w);
                        float _4802 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3389 = sqrt(_3375) * _3351.w;
                        float _3392 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3382) + _3393;
                        float _3399 = _3389 * _3389;
                        float _3403 = ((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3388) / ((_3399 * 0.699999988079071044921875) + 1.0);
                        float _3407 = (-0.0) - _2648;
                        float _3408 = (-0.0) - _2649;
                        float _3409 = (-0.0) - _2650;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3424 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                        float _3425 = 1.0 - _1343;
                        float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                        float _3433 = _3432 * _3432;
                        float _3434 = _3433 * _3433;
                        float _3435 = _3414 + _3379;
                        float _3436 = _3415 + _3380;
                        float _3437 = _3416 + _3381;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3445 = dot(vec3(_1270, _1273, _1276), vec3(_3414, _3415, _3416));
                        float _4818 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3449 = dot(vec3(_1270, _1273, _1276), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                        float _4829 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                        float _3457 = _3392 * _3433;
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3382) + _3458;
                        float _4840 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3463 = 1.0 - _3433;
                        float _3473 = (0.5 / (((_3462 * ((_3448 * _3463) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3433) * _3448))) * _3462;
                        float _4851 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3484 = (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3456 * _3456) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125))) * _3388;
                        _3215 = (_3403 * _3351.x) + _3309;
                        _3216 = (_3403 * _3351.y) + _3310;
                        _3217 = (_3403 * _3351.z) + _3311;
                        _3212 = (_3484 * _3368.x) + _3306;
                        _3213 = (_3484 * _3368.y) + _3307;
                        _3214 = (_3484 * _3368.z) + _3308;
                        if (_3313 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3306 = _3212;
                            _3307 = _3213;
                            _3308 = _3214;
                            _3309 = _3215;
                            _3310 = _3216;
                            _3311 = _3217;
                            _3312 = _3313;
                        }
                    }
                    frontier_phi_50_pred = _3215;
                    frontier_phi_50_pred_1 = _3217;
                    frontier_phi_50_pred_2 = _3216;
                    frontier_phi_50_pred_3 = _3214;
                    frontier_phi_50_pred_4 = _3213;
                    frontier_phi_50_pred_5 = _3212;
                }
                _2931 = frontier_phi_50_pred;
                _2935 = frontier_phi_50_pred_1;
                _2933 = frontier_phi_50_pred_2;
                _2929 = frontier_phi_50_pred_3;
                _2927 = frontier_phi_50_pred_4;
                _2925 = frontier_phi_50_pred_5;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3131 = _2925;
                    _3132 = _2927;
                    _3133 = _2929;
                    _3134 = _2931;
                    _3135 = _2933;
                    _3136 = _2935;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
        }
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.z;
        uint _2941 = (_2939 >> 8u) & 15u;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((4294967295u << _2941) & _2694) == 0u)
        {
            _3099 = _2924;
            _3101 = _2926;
            _3103 = _2928;
            _3105 = _2930;
            _3107 = _2932;
            _3109 = _2934;
        }
        else
        {
            float _3124 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
            float _3125 = _3124 * _2648;
            float _3126 = _3124 * _2649;
            float _3127 = _3124 * _2650;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2941 < ((_2939 >> 12u) & 15u))
            {
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3289 = _2924;
                float _3290 = _2926;
                float _3291 = _2928;
                float _3292 = _2930;
                float _3293 = _2932;
                float _3294 = _2934;
                uint _3295 = _2941;
                uint _3304;
                bool _3305;
                for (;;)
                {
                    _3304 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3295 << 2u)) >> 2u)).x;
                    _3305 = _3304 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_3305)
                    {
                        frontier_phi_59_pred = _3294;
                        frontier_phi_59_pred_1 = _3293;
                        frontier_phi_59_pred_2 = _3292;
                        frontier_phi_59_pred_3 = _3291;
                        frontier_phi_59_pred_4 = _3290;
                        frontier_phi_59_pred_5 = _3289;
                    }
                    else
                    {
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3523 = _3289;
                        float _3524 = _3290;
                        float _3525 = _3291;
                        float _3526 = _3292;
                        float _3527 = _3293;
                        float _3528 = _3294;
                        uint _3529 = _3304;
                        uint _3530;
                        vec4 _3555;
                        float _3556;
                        vec4 _3571;
                        vec3 _3583;
                        vec4 _3598;
                        vec4 _3613;
                        float _3659;
                        bool _3660;
                        for (;;)
                        {
                            uint _3540 = ((_3295 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3529));
                            _3530 = (_3529 + 4294967295u) & _3529;
                            uint _3542 = _3540 * 40u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3556 = _3555.w;
                            uint _3558 = (_3540 * 40u) + 4u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3540 * 40u) + 8u;
                            _3583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x));
                            uint _3585 = (_3540 * 40u) + 16u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3540 * 40u) + 20u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3540 * 40u) + 24u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3634 = (_3540 * 40u) + 28u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3659 = fma(_2650, _3647.z, fma(_2649, _3647.y, _3647.x * _2648)) + _3647.w;
                            _3660 = !((fma(_2650, _3628.z, fma(_2649, _3628.y, _3628.x * _2648)) + _3628.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_3660)
                            {
                                float _3687 = _3555.x - _2648;
                                float _3688 = _3555.y - _2649;
                                float _3689 = _3555.z - _2650;
                                float _3690 = dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689));
                                float _3693 = inversesqrt(_3690);
                                float _3694 = _3693 * _3687;
                                float _3695 = _3693 * _3688;
                                float _3696 = _3693 * _3689;
                                float _3700 = 1.0 - (_3690 / (_3556 * _3556));
                                float _4862 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3705 = sqrt(_3690) * _3571.w;
                                float _3707 = 1.39999997615814208984375 / (_3705 + 1.39999997615814208984375);
                                float _3708 = _3707 * _3707;
                                float _3711 = ((1.0 - _3708) * dot(vec3(_3694, _3695, _3696), vec3(_1270, _1273, _1276))) + _3708;
                                float _3714 = _3705 * _3705;
                                float _3718 = (fma(_2650, _3598.z, fma(_2649, _3598.y, _3598.x * _2648)) + _3598.w) / _3659;
                                float _3719 = (fma(_2650, _3613.z, fma(_2649, _3613.y, _3613.x * _2648)) + _3613.w) / _3659;
                                float _3723 = 1.0 - dot(vec2(_3718, _3719), vec2(_3718, _3719));
                                float _4878 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3725 = _3724 * (((isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0))) * _3701) / ((_3714 * 0.699999988079071044921875) + 1.0));
                                float _3737 = exp2(log2(1.0 / ((_3714 * 3.5) + 5.0)) * 0.25);
                                float _3738 = 1.0 - _1343;
                                float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                                float _3746 = _3745 * _3745;
                                float _3747 = _3746 * _3746;
                                float _3748 = _3694 - _3125;
                                float _3749 = _3695 - _3126;
                                float _3750 = _3696 - _3127;
                                float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                                float _3758 = dot(vec3(_1270, _1273, _1276), vec3((-0.0) - _3125, (-0.0) - _3126, (-0.0) - _3127));
                                float _4889 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3762 = dot(vec3(_1270, _1273, _1276), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                                float _4900 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3765 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                                float _3770 = _3707 * _3746;
                                float _3771 = _3770 * _3770;
                                float _3777 = ((1.0 - _3771) * dot(vec3(_1270, _1273, _1276), vec3(_3694, _3695, _3696))) + _3771;
                                float _4911 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3779 = 1.0 - _3746;
                                float _3789 = (0.5 / (((_3778 * ((_3761 * _3779) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3778 * _3779) + _3746) * _3761))) * _3778;
                                float _4922 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3799 = (_3724 * _3701) * (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3769 * _3769) * ((_3714 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3725 * _3571.z;
                                frontier_phi_65_pred_1 = _3725 * _3571.y;
                                frontier_phi_65_pred_2 = _3725 * _3571.x;
                                frontier_phi_65_pred_3 = _3799 * _3583.z;
                                frontier_phi_65_pred_4 = _3799 * _3583.y;
                                frontier_phi_65_pred_5 = _3799 * _3583.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3808 = frontier_phi_65_pred;
                            _3807 = frontier_phi_65_pred_1;
                            _3806 = frontier_phi_65_pred_2;
                            _3805 = frontier_phi_65_pred_3;
                            _3804 = frontier_phi_65_pred_4;
                            _3803 = frontier_phi_65_pred_5;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            if (_3530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3530;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3515;
                        frontier_phi_59_pred_1 = _3514;
                        frontier_phi_59_pred_2 = _3513;
                        frontier_phi_59_pred_3 = _3512;
                        frontier_phi_59_pred_4 = _3511;
                        frontier_phi_59_pred_5 = _3510;
                    }
                    _3110 = frontier_phi_59_pred;
                    _3108 = frontier_phi_59_pred_1;
                    _3106 = frontier_phi_59_pred_2;
                    _3104 = frontier_phi_59_pred_3;
                    _3102 = frontier_phi_59_pred_4;
                    _3100 = frontier_phi_59_pred_5;
                    uint _3296 = _3295 + 1u;
                    if (_3296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3289 = _3100;
                        _3290 = _3102;
                        _3291 = _3104;
                        _3292 = _3106;
                        _3293 = _3108;
                        _3294 = _3110;
                        _3295 = _3296;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _3106;
                frontier_phi_41_42_ladder_1 = _3110;
                frontier_phi_41_42_ladder_2 = _3108;
                frontier_phi_41_42_ladder_3 = _3104;
                frontier_phi_41_42_ladder_4 = _3102;
                frontier_phi_41_42_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_41_42_ladder = _2930;
                frontier_phi_41_42_ladder_1 = _2934;
                frontier_phi_41_42_ladder_2 = _2932;
                frontier_phi_41_42_ladder_3 = _2928;
                frontier_phi_41_42_ladder_4 = _2926;
                frontier_phi_41_42_ladder_5 = _2924;
            }
            _3099 = frontier_phi_41_42_ladder_5;
            _3101 = frontier_phi_41_42_ladder_4;
            _3103 = frontier_phi_41_42_ladder_3;
            _3105 = frontier_phi_41_42_ladder;
            _3107 = frontier_phi_41_42_ladder_2;
            _3109 = frontier_phi_41_42_ladder_1;
        }
        float _3114 = isnan(1.0) ? _1314 : (isnan(_1314) ? 1.0 : min(_1314, 1.0));
        _2707 = (_3114 * _3105) + _2431;
        _2709 = (_3114 * _3107) + _2432;
        _2711 = (_3114 * _3109) + _2433;
        _2713 = ((_3099 * 0.039999999105930328369140625) * _3114) + _2590;
        _2715 = ((_3101 * 0.039999999105930328369140625) * _3114) + _2591;
        _2717 = ((_3103 * 0.039999999105930328369140625) * _3114) + _2592;
    }
    else
    {
        _2707 = _2431;
        _2709 = _2432;
        _2711 = _2433;
        _2713 = _2590;
        _2715 = _2591;
        _2717 = _2592;
    }
    uint _2723 = _1290 + uint(cbMatDynParam._m0[0u].w);
    float _2750 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2751 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2752 = cbSceneParam._m0[86u].x * ((_1214 / cbSceneParam._m0[86u].x) + (((10.0 / (_1151 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1250, _1251, _1252), vec3(_226, _227, _228))));
    float _2753 = isnan(_2750) ? _2752 : (isnan(_2752) ? _2750 : min(_2752, _2750));
    float _2754 = isnan(_2751) ? _1215 : (isnan(_1215) ? _2751 : min(_1215, _2751));
    vec4 _2756 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2753, _2754), 0.0);
    float _2758 = _2756.x;
    bool _2778 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2758)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2758))) > _1151;
    float _2779 = _2778 ? _2753 : _1214;
    float _2780 = _2778 ? _2754 : _1215;
    vec4 _2782 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2779, _2780));
    vec4 _2787 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2779, _2780));
    float _2789 = _2787.x;
    float _2809 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2789)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2789))) - _1151;
    bool _2819 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2823 = (isnan(_2809) ? 0.0 : (isnan(0.0) ? _2809 : max(0.0, _2809))) * (-1.44269502162933349609375);
    float _4953 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _4964 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _4975 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
    float _2851 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2854 = ((_2782.x * _2851) * exp2(_2823 * (_2819 ? 0.0 : (cbMtdParam._m0[38u].x + cbMtdParam._m0[36u].z)))) * cbSceneParam._m0[72u].w;
    float _2857 = ((_2782.y * _2851) * exp2(_2823 * (_2819 ? 0.0 : (cbMtdParam._m0[38u].y + cbMtdParam._m0[36u].w)))) * cbSceneParam._m0[72u].w;
    float _2860 = ((_2782.z * _2851) * exp2(_2823 * (_2819 ? 0.0 : (cbMtdParam._m0[38u].z + cbMtdParam._m0[37u].x)))) * cbSceneParam._m0[72u].w;
    float _2869 = (((cbInstanceData._m0[_2723].x * (_946 - (_946 * TEXCOORD_7.x))) + ((_2713 + ((isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0))) * _2122)) * cbPerFrame._m0[3u].x)) + _2854) + ((((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2707 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1314))) - _2854) * _1073);
    float _2872 = (((cbInstanceData._m0[_2723].y * (_948 - (_948 * TEXCOORD_7.y))) + ((_2715 + ((isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0))) * _2122)) * cbPerFrame._m0[3u].x)) + _2857) + ((((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2709 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1314))) - _2857) * _1073);
    float _2875 = (((cbInstanceData._m0[_2723].z * (_950 - (_950 * TEXCOORD_7.z))) + ((_2717 + ((isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0))) * _2122)) * cbPerFrame._m0[3u].x)) + _2860) + ((((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2711 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1314))) - _2860) * _1073);
    float _2887 = _1214 / cbSceneParam._m0[86u].x;
    float _2888 = _1215 / cbSceneParam._m0[86u].y;
    vec4 _2902 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, (log2((isnan(cbSceneParam._m0[77u].w) ? _1151 : (isnan(_1151) ? cbSceneParam._m0[77u].w : min(_1151, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2904 = _2902.x;
    float _2905 = _2902.y;
    float _2906 = _2902.z;
    float _2907 = _2902.w;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_1151 > cbSceneParam._m0[78u].w)
    {
        float _2949 = isnan(_1151) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1151 : min(cbSceneParam._m0[80u].w, _1151));
        float _2950 = _2949 / _1151;
        float _2961 = _2950 * _1200;
        float _2962 = _1201 * _2950;
        float _2963 = (-0.0) - _2962;
        float _2964 = _2950 * _1202;
        float _2966 = (cbSceneParam._m0[77u].w * _2963) / _2949;
        float _2967 = _2966 + cbSceneParam._m0[79u].w;
        float _2968 = cbSceneParam._m0[79u].w - _2962;
        float _2974 = sqrt(((_2961 * _2961) + (_2962 * _2962)) + (_2964 * _2964));
        float _2977 = (1.0 - (cbSceneParam._m0[77u].w / _2949)) * _2974;
        float _2983 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2984 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_2963 - _2966) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_2967 > 0.0) ? exp2(_2983 * _2967) : (2.0 - exp2(_2984 * _2967))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2977;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : max(_2967, _2968));
            float _3162 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : min(_2967, _2968));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3225 = ((abs(_2974 / _2963) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_2983 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_2983 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_2984 * _3171) - exp2(_2984 * _3172)) * _3160))) + (_2977 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2887, _2888, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_2907);
        _2986 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2904;
        _2988 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _2905;
        _2990 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _2906;
        _2992 = _3236 * _2907;
    }
    else
    {
        _2986 = _2904;
        _2988 = _2905;
        _2990 = _2906;
        _2992 = _2907;
    }
    bool _3004 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3005 = log2(_2992);
    float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0)));
    float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0)));
    float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)));
    vec4 _3022 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1214, _1215));
    float _3024 = _3022.x;
    float _3045 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3024)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3024))) - _1151) * cbMtdParam._m0[23u].y;
    float _5041 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
    float _3047 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * cbInstanceData._m0[_1289 + 6u].w;
    float _3056 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3056 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.y = _3056 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.z = _3056 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.w = _3047;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3047;
}


