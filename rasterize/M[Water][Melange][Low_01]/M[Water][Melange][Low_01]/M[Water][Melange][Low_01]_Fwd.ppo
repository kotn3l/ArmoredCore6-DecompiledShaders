#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Low_01_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1689;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    float _284 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _294 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _284);
    float _295 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _284);
    float _296 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _284);
    float _312 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _314 = (sqrt(((_294 * _294) + (_295 * _295)) + (_296 * _296)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0)));
    float _318 = _314 / cbMtdParam._m0[22u].z;
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(8.0) ? _319 : (isnan(_319) ? 8.0 : min(_319, 8.0));
    float _327 = cbMtdParam._m0[10u].x * _320;
    float _328 = cbMtdParam._m0[10u].y * _320;
    float _329 = cbMtdParam._m0[10u].z * _320;
    float _330 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _331 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _332 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _343 = cbMtdParam._m0[21u].y + _314;
    float _347 = _343 * cbMtdParam._m0[23u].z;
    float _3948 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    vec4 _366 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _369 = _366.x;
    float _393 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _369)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _369))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _3959 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _399 = 1.0 - (isnan(cbMtdParam._m0[24u].w) ? _394 : (isnan(_394) ? cbMtdParam._m0[24u].w : max(_394, cbMtdParam._m0[24u].w)));
    float _401 = (cbMtdParam._m0[24u].z + TEXCOORD_3.x) - (_399 * cbMtdParam._m0[20u].z);
    float _417 = (cbMtdParam._m0[27u].w + cbPerFrame._m0[22u].x) * cbMtdParam._m0[19u].z;
    float _422 = cbMtdParam._m0[33u].x * TEXCOORD.x;
    float _423 = cbMtdParam._m0[33u].y * TEXCOORD.y;
    vec4 _437 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_2, SS_BumpMap), vec2((((_417 * cbMtdParam._m0[33u].z) + _422) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_423 + (_417 * cbMtdParam._m0[33u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _3975 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _443 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _444 = _437.z - _443;
    float _3986 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _457 = (_445 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _459 = (_445 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _472 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_457 + (cbMtdParam._m0[29u].z * _417)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_459 + (cbMtdParam._m0[29u].w * _417)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _476 = _472.z;
    vec4 _487 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((_457 + (cbMtdParam._m0[29u].x * _417)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_459 + (cbMtdParam._m0[29u].y * _417)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _491 = _487.z;
    float _494 = (_399 - _437.w) + (isnan(_491) ? _476 : (isnan(_476) ? _491 : max(_476, _491)));
    float _4002 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = (_401 * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)));
    float _497 = _496 * TEXCOORD_7.w;
    float _509 = ((_496 + cbMtdParam._m0[9u].x) - _497) + (cbMtdParam._m0[15u].x * _445);
    float _512 = ((_496 + cbMtdParam._m0[9u].y) - _497) + (cbMtdParam._m0[15u].y * _445);
    float _515 = ((_496 + cbMtdParam._m0[9u].z) - _497) + (cbMtdParam._m0[15u].z * _445);
    vec4 _561 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].x * _417))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[34u].y * _417))) + cbTextureTilingScale._m0[1u].w));
    float _566 = _561.z * 0.099999986588954925537109375;
    float _4013 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _568 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _572 = cbMtdParam._m0[23u].x * _314;
    float _4024 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _587 = (_509 + (isnan(0.07999999821186065673828125) ? _330 : (isnan(_330) ? 0.07999999821186065673828125 : min(_330, 0.07999999821186065673828125)))) + (_573 * (((1.0 - _509) - _568) + _566));
    float _589 = (_512 + (isnan(0.07999999821186065673828125) ? _331 : (isnan(_331) ? 0.07999999821186065673828125 : min(_331, 0.07999999821186065673828125)))) + (_573 * (((1.0 - _512) - _568) + _566));
    float _591 = (_515 + (isnan(0.07999999821186065673828125) ? _332 : (isnan(_332) ? 0.07999999821186065673828125 : min(_332, 0.07999999821186065673828125)))) + (_573 * (((1.0 - _515) + _566) - _568));
    float _4035 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _592 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _593 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _601 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _443) + cbMtdParam._m0[19u].x;
    float _613 = (POSITION_1.w - cbMtdParam._m0[27u].y) * (1.0 / cbMtdParam._m0[27u].x);
    float _4068 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _627 = (cbMtdParam._m0[32u].x * _417) + _422;
    float _628 = (cbMtdParam._m0[32u].y * _417) + _423;
    vec4 _655 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[31u].z * _417) + _422)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[31u].w * _417) + _423)) + cbTextureTilingScale._m0[3u].w));
    float _662 = (_655.x * 2.0) + (-1.0);
    float _664 = (_655.y * 2.0) + (-1.0);
    float _668 = 1.0 - dot(vec2(_662, _664), vec2(_662, _664));
    float _4079 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = sqrt(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)));
    float _673 = fma(_670, _231, fma(_664, _238, _662 * _224));
    float _676 = fma(_670, _232, fma(_664, _239, _662 * _225));
    float _679 = fma(_670, _233, fma(_664, _240, _662 * _226));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = cbPerFrame._m0[22u].x * 2.0;
    float _685 = _684 * cbMtdParam._m0[25u].w;
    float _689 = ((_673 * 0.5) * _683) + (-0.25);
    float _693 = ((_676 * 0.5) * _683) + (-0.25);
    float _694 = _693 * cbMtdParam._m0[26u].x;
    float _696 = (-0.0) - (cbMtdParam._m0[26u].x * _689);
    float _697 = fract(_685);
    float _699 = fract(_685 + 0.5);
    float _710 = abs((_697 * 2.0) + (-1.0));
    vec4 _727 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_697 * _696) + _627) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_694 * _697) + _628) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _731 = _727.z;
    vec4 _732 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_699 * _696) + _627) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_694 * _699) + _628) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _743 = ((_732.x - _729) * _710) + _729;
    float _744 = ((_732.y - _730) * _710) + _730;
    float _745 = ((_732.z - _731) * _710) + _731;
    float _759 = (cbMtdParam._m0[31u].x * _417) + _422;
    float _760 = (cbMtdParam._m0[31u].y * _417) + _423;
    float _763 = _684 * cbMtdParam._m0[25u].z;
    float _764 = _693 * cbMtdParam._m0[25u].y;
    float _766 = (-0.0) - (cbMtdParam._m0[25u].y * _689);
    float _767 = fract(_763);
    float _769 = fract(_763 + 0.5);
    float _780 = abs((_767 * 2.0) + (-1.0));
    vec4 _797 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_767 * _766) + _759) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_764 * _767) + _760) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    vec4 _802 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_769 * _766) + _759) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_764 * _769) + _760) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _836 = (((((cbMtdParam._m0[16u].x - cbMtdParam._m0[18u].x) * _743) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].x) * (((_802.x - _797.x) * _780) + _797.x)) + (_743 * cbMtdParam._m0[17u].x);
    float _839 = (((((cbMtdParam._m0[16u].y - cbMtdParam._m0[18u].y) * _744) * cbMtdParam._m0[28u].x) + cbMtdParam._m0[18u].y) * (((_802.y - _797.y) * _780) + _797.y)) + (_744 * cbMtdParam._m0[17u].y);
    float _842 = ((((cbMtdParam._m0[28u].x * _745) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_802.z - _797.z) * _780) + _797.z)) + (_745 * cbMtdParam._m0[17u].z);
    float _846 = _836 - (_836 * _614);
    float _847 = _839 - (_839 * _614);
    float _848 = _842 - (_842 * _614);
    float _853 = (POSITION_1.w - cbMtdParam._m0[26u].w) * (1.0 / cbMtdParam._m0[26u].z);
    float _4090 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _854 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _864 = (cbMtdParam._m0[32u].z * _417) + _422;
    float _865 = (cbMtdParam._m0[32u].w * _417) + _423;
    vec4 _878 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_864 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_865 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _880 = _878.x;
    float _881 = _878.y;
    float _882 = _878.z;
    vec4 _904 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _864) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _865) + cbTextureTilingScale._m0[7u].w));
    float _944 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].x) * (((((_880 * cbMtdParam._m0[11u].x) - _846) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _880) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].x) * _904.x)) * _854) + _846);
    float _946 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].y) * (((((_881 * cbMtdParam._m0[11u].y) - _847) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _881) * cbMtdParam._m0[28u].y) + cbMtdParam._m0[12u].y) * _904.y)) * _854) + _847);
    float _948 = (cbMtdParam._m0[27u].z * cbMtdParam._m0[14u].z) * (((((_882 * cbMtdParam._m0[11u].z) - _848) + ((((cbMtdParam._m0[28u].y * _882) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _904.z)) * _854) + _848);
    float _4101 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _955 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _965 = _314 / cbMtdParam._m0[22u].w;
    float _4112 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _966 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _967 = _445 * 0.23999999463558197021484375;
    float _969 = _445 * (-0.20000000298023223876953125);
    float _980 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _981 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _990 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[34u].z * _417) + _967) + _980) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[34u].w * _417) + _969) + _981) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1006 = texture(sampler2D(M_Water_Melange_Low_01_snp_0_Texture2D_0, SS_BumpMap), vec2((((_980 + _967) + (cbMtdParam._m0[35u].z * _417)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_981 + _969) + (cbMtdParam._m0[35u].w * _417)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1026 = (((_487.x + (-0.5)) * 0.5) + _472.x) + (((_990.x + (-1.0)) + _1006.x) * cbMtdParam._m0[24u].y);
    float _1027 = (((_487.y + (-0.5)) * 0.5) + _472.y) + (((_990.y + (-1.0)) + _1006.y) * cbMtdParam._m0[24u].y);
    float _1032 = ((_561.x - _1026) * _966) + _1026;
    float _1033 = ((_561.y - _1027) * _966) + _1027;
    float _1035 = _314 / cbMtdParam._m0[22u].y;
    float _4123 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1036 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1052 = ((((_955 * (0.5 - _439)) + _439) + (((_1032 + (-0.5)) + ((0.5 - _1032) * _1036)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1053 = ((((_955 * (0.5 - _440)) + _440) + (((_1033 + (-0.5)) + ((0.5 - _1033) * _1036)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1054 = dot(vec2(_1052, _1053), vec2(_1052, _1053));
    float _4134 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1059 = sqrt(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))));
    float _1061 = cbMtdParam._m0[23u].w * _343;
    float _4145 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1068 = cbMtdParam._m0[21u].w * _343;
    float _4156 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1070 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * cbMtdParam._m0[26u].y;
    float _4167 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1071 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _1076 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1081 = _1052 - (_1076 * _1052);
    float _1082 = _1053 - (_1076 * _1053);
    float _1083 = (_1076 * (1.0 - _1059)) + _1059;
    float _1102 = fma(_1059, _231, fma(_1053, _238, _1052 * _224));
    float _1105 = fma(_1059, _232, fma(_1053, _239, _1052 * _225));
    float _1108 = fma(_1059, _233, fma(_1053, _240, _1052 * _226));
    float _1112 = inversesqrt(dot(vec3(_1102, _1105, _1108), vec3(_1102, _1105, _1108)));
    float _1113 = _1112 * _1102;
    float _1114 = _1112 * _1105;
    float _1115 = _1112 * _1108;
    float _1118 = fma(_1083, _231, fma(_1082, _238, _1081 * _224));
    float _1121 = fma(_1083, _232, fma(_1082, _239, _1081 * _225));
    float _1124 = fma(_1083, _233, fma(_1082, _240, _1081 * _226));
    float _1128 = inversesqrt(dot(vec3(_1118, _1121, _1124), vec3(_1118, _1121, _1124)));
    float _1129 = _1128 * _1118;
    float _1130 = _1128 * _1121;
    float _1131 = _1128 * _1124;
    float _4178 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _1132 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4200 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4211 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _1149 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1198 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1189);
    float _1199 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1189);
    float _1200 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1189);
    float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
    float _1205 = _1198 * _1204;
    float _1206 = _1199 * _1204;
    float _1207 = _1200 * _1204;
    float _1212 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1213 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1215 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1224 = (_1215.x * 2.0) + (-1.0);
    float _1225 = (_1215.y * 2.0) + (-1.0);
    float _1226 = (_1215.z * 2.0) + (-1.0);
    float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
    float _1241 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1215.w;
    float _1248 = (((_1224 * _1230) - _1113) * _1241) + _1113;
    float _1249 = (((_1225 * _1230) - _1114) * _1241) + _1114;
    float _1250 = (((_1226 * _1230) - _1115) * _1241) + _1115;
    float _1268 = fma(_1250, cbSceneParam._m0[5u].z, fma(_1249, cbSceneParam._m0[5u].y, _1248 * cbSceneParam._m0[5u].x));
    float _1271 = fma(_1250, cbSceneParam._m0[6u].z, fma(_1249, cbSceneParam._m0[6u].y, _1248 * cbSceneParam._m0[6u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[7u].z, fma(_1249, cbSceneParam._m0[7u].y, _1248 * cbSceneParam._m0[7u].x));
    uint _1287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1288 = _1287 + 9u;
    uint _1289 = _1288 + uint(cbMatDynParam._m0[0u].w);
    float _1295 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbInstanceData._m0[_1289].x;
    float _1296 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1289].y;
    float _1297 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_1289].z;
    float _4222 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
    float _1298 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
    float _1299 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
    float _1300 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    vec4 _1309 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1212, cbSceneParam._m0[86u].y * _1213));
    float _1312 = _1309.x * TEXCOORD_3.w;
    float _1316 = abs(dot(vec3(_1205, _1206, _1207), vec3(_1248, _1249, _1250)));
    float _4255 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1329 = dot(vec3(_1129, _1130, _1131), vec3(_1205, _1206, _1207)) * 2.0;
    float _1333 = (_1329 * _1129) - _1205;
    float _1334 = (_1329 * _1130) - _1206;
    float _1335 = (_1329 * _1131) - _1207;
    float _1339 = abs(dot(vec3(_1205, _1206, _1207), vec3(_1129, _1130, _1131)));
    float _4266 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _1341 = sqrt(_1132);
    float _1353 = exp2((_1341 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1341 * 3.0));
    float _1384 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1388 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1392 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1688;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1417 = fma(_1392, cbModelParam._m0[26u].z, fma(_1388, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1384));
        float _1421 = fma(_1392, cbModelParam._m0[27u].z, fma(_1388, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1384));
        float _1425 = fma(_1392, cbModelParam._m0[28u].z, fma(_1388, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1384));
        float _1447 = _1384 + _1129;
        float _1448 = _1388 + _1130;
        float _1449 = _1392 + _1131;
        float _1459 = fma(_1449, cbModelParam._m0[26u].z, fma(_1448, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1447)) - _1417;
        float _1460 = fma(_1449, cbModelParam._m0[27u].z, fma(_1448, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1447)) - _1421;
        float _1461 = fma(_1449, cbModelParam._m0[28u].z, fma(_1448, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1447)) - _1425;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1477 = ((_1465 * _1459) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1417 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1465 * _1460) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1421 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1461) / cbModelParam._m0[34u].z) + ((((((_1425 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        float _1516 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1482.x + (-0.5));
        float _1518 = _1516 * (_1482.y + (-0.5));
        float _1519 = _1516 * (_1482.z + (-0.5));
        float _1526 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1489.x + (-0.5));
        float _1528 = _1526 * (_1489.y + (-0.5));
        float _1529 = _1526 * (_1489.z + (-0.5));
        float _1536 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1496.x + (-0.5));
        float _1538 = _1536 * (_1496.y + (-0.5));
        float _1539 = _1536 * (_1496.z + (-0.5));
        float _1546 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1503.x + (-0.5));
        float _1548 = _1546 * (_1503.y + (-0.5));
        float _1549 = _1546 * (_1503.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1570 = (dot(vec3(_1129, _1130, _1131), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1580 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4314 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1582 + 1.0))) + _1587) * _1550;
        float _1597 = _1518 * 0.5;
        float _1598 = _1528 * 0.5;
        float _1599 = _1538 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_1129, _1130, _1131), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4347 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1624 + 1.0))) + _1629) * _1551;
        float _1639 = _1519 * 0.5;
        float _1640 = _1529 * 0.5;
        float _1641 = _1539 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_1129, _1130, _1131), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4380 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1666 + 1.0))) + _1671) * _1552;
        _1688 = _1519;
        _1690 = _1518;
        _1691 = _1517;
        _1692 = _1529;
        _1693 = _1528;
        _1694 = _1527;
        _1695 = _1539;
        _1696 = _1538;
        _1697 = _1537;
        _1698 = _1552;
        _1699 = _1551;
        _1700 = _1550;
        _1701 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1702 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1703 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1689;
        _1690 = _1689;
        _1691 = _1689;
        _1692 = _1689;
        _1693 = _1689;
        _1694 = _1689;
        _1695 = _1689;
        _1696 = _1689;
        _1697 = _1689;
        _1698 = _1689;
        _1699 = _1689;
        _1700 = _1689;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1994;
    float _1995;
    float _1996;
    float _1997;
    float _1998;
    float _1999;
    float _2000;
    float _2001;
    float _2002;
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1727 = fma(_1392, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1384));
        float _1731 = fma(_1392, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1384));
        float _1735 = fma(_1392, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1384));
        float _1757 = _1384 + _1129;
        float _1758 = _1388 + _1130;
        float _1759 = _1392 + _1131;
        float _1769 = fma(_1759, cbModelParam._m0[30u].z, fma(_1758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1757)) - _1727;
        float _1770 = fma(_1759, cbModelParam._m0[31u].z, fma(_1758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1757)) - _1731;
        float _1771 = fma(_1759, cbModelParam._m0[32u].z, fma(_1758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1757)) - _1735;
        float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
        float _1787 = ((_1775 * _1769) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1727 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1788 = ((_1775 * _1770) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1731 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1789 = ((_1775 * _1771) / cbModelParam._m0[35u].z) + ((((((_1735 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1791 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1787, _1788, _1789), 0.0);
        vec4 _1798 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1787, _1788, _1789), 0.0);
        vec4 _1805 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1787, _1788, _1789), 0.0);
        vec4 _1812 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1787, _1788, _1789), 0.0);
        float _1824 = exp2((_1791.w + (-0.5)) * 20.0) * 2.0;
        float _1825 = _1824 * (_1791.x + (-0.5));
        float _1826 = _1824 * (_1791.y + (-0.5));
        float _1827 = _1824 * (_1791.z + (-0.5));
        float _1834 = exp2((_1798.w + (-0.5)) * 20.0) * 2.0;
        float _1835 = _1834 * (_1798.x + (-0.5));
        float _1836 = _1834 * (_1798.y + (-0.5));
        float _1837 = _1834 * (_1798.z + (-0.5));
        float _1844 = exp2((_1805.w + (-0.5)) * 20.0) * 2.0;
        float _1845 = _1844 * (_1805.x + (-0.5));
        float _1846 = _1844 * (_1805.y + (-0.5));
        float _1847 = _1844 * (_1805.z + (-0.5));
        float _1854 = exp2((_1812.w + (-0.5)) * 20.0) * 2.0;
        float _1855 = _1854 * (_1812.x + (-0.5));
        float _1856 = _1854 * (_1812.y + (-0.5));
        float _1857 = _1854 * (_1812.z + (-0.5));
        float _1858 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1859 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1860 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1861 = _1825 * 0.5;
        float _1862 = _1835 * 0.5;
        float _1863 = _1845 * 0.5;
        float _1864 = dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863));
        float _1869 = (_1864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1864);
        float _1877 = (dot(vec3(_1129, _1130, _1131), vec3(_1869 * _1861, _1869 * _1862, _1869 * _1863)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1886 = sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863)) / (_1858 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1888 = _1887 * 2.0;
        float _1892 = (1.0 - _1887) / (_1887 + 1.0);
        float _4443 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1902 = ((((1.0 - _1893) * (_1888 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1888 + 1.0))) + _1893) * _1858;
        float _1903 = _1826 * 0.5;
        float _1904 = _1836 * 0.5;
        float _1905 = _1846 * 0.5;
        float _1906 = dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905));
        float _1911 = (_1906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1906);
        float _1919 = (dot(vec3(_1129, _1130, _1131), vec3(_1911 * _1903, _1911 * _1904, _1911 * _1905)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1928 = sqrt(((_1904 * _1904) + (_1903 * _1903)) + (_1905 * _1905)) / (_1859 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1930 = _1929 * 2.0;
        float _1934 = (1.0 - _1929) / (_1929 + 1.0);
        float _4476 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1944 = ((((1.0 - _1935) * (_1930 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1930 + 1.0))) + _1935) * _1859;
        float _1945 = _1827 * 0.5;
        float _1946 = _1837 * 0.5;
        float _1947 = _1847 * 0.5;
        float _1948 = dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947));
        float _1953 = (_1948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1948);
        float _1961 = (dot(vec3(_1129, _1130, _1131), vec3(_1953 * _1945, _1953 * _1946, _1953 * _1947)) + 1.0) * 0.5;
        float _4487 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1970 = sqrt(((_1946 * _1946) + (_1945 * _1945)) + (_1947 * _1947)) / (_1860 + 9.9999997473787516355514526367188e-06);
        float _4498 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1972 = _1971 * 2.0;
        float _1976 = (1.0 - _1971) / (_1971 + 1.0);
        float _4509 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1986 = ((((1.0 - _1977) * (_1972 + 2.0)) * exp2(log2(isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_1972 + 1.0))) + _1977) * _1860;
        _1994 = _1827;
        _1995 = _1826;
        _1996 = _1825;
        _1997 = _1837;
        _1998 = _1836;
        _1999 = _1835;
        _2000 = _1847;
        _2001 = _1846;
        _2002 = _1845;
        _2003 = _1860;
        _2004 = _1859;
        _2005 = _1858;
        _2006 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)));
        _2007 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)));
        _2008 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0)));
    }
    else
    {
        _1994 = _1689;
        _1995 = _1689;
        _1996 = _1689;
        _1997 = _1689;
        _1998 = _1689;
        _1999 = _1689;
        _2000 = _1689;
        _2001 = _1689;
        _2002 = _1689;
        _2003 = _1689;
        _2004 = _1689;
        _2005 = _1689;
        _2006 = 0.0;
        _2007 = 0.0;
        _2008 = 0.0;
    }
    float _2018 = (cbModelParam._m0[1u].x * (_2006 - _1701)) + _1701;
    float _2019 = (cbModelParam._m0[1u].x * (_2007 - _1702)) + _1702;
    float _2020 = (cbModelParam._m0[1u].x * (_2008 - _1703)) + _1703;
    float _2041 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2018));
    float _2062 = _1333 * 0.5;
    float _2063 = _1334 * 0.5;
    float _2064 = _1335 * 0.5;
    float _2065 = dot(vec4(_2062, _2063, _2064, 1.0), vec4(_1996, _1999, _2002, _2005));
    float _2068 = dot(vec4(_2062, _2063, _2064, 1.0), vec4(_1995, _1998, _2001, _2004));
    float _2071 = dot(vec4(_2062, _2063, _2064, 1.0), vec4(_1994, _1997, _2000, _2003));
    float _2105;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2078 = dot(vec4(_2062, _2063, _2064, 1.0), vec4(_1688, _1692, _1695, _1698));
        float _2082 = dot(vec4(_2062, _2063, _2064, 1.0), vec4(_1690, _1693, _1696, _1699));
        float _2086 = dot(vec4(_2062, _2063, _2064, 1.0), vec4(_1691, _1694, _1697, _1700));
        float _2093 = dot(vec4(cbModelParam._m0[39u]), vec4(_2062, _2063, _2064, 1.0));
        _2105 = dot(vec3(isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0)), isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0)), isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2093) ? 0.0 : (isnan(0.0) ? _2093 : max(0.0, _2093))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2105 = 1.0;
    }
    float _2116;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2107 = dot(vec4(cbModelParam._m0[40u]), vec4(_2062, _2063, _2064, 1.0));
        _2116 = dot(vec3(isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0)), isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)), isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2107) ? 0.0 : (isnan(0.0) ? _2107 : max(0.0, _2107))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2116 = 1.0;
    }
    float _2120 = (_2116 * cbModelParam._m0[1u].x) + (_2105 * (1.0 - cbModelParam._m0[1u].x));
    float _2130 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1132);
    float _2131 = isnan(_2130) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2130 : min(cbModelParam._m0[25u].z, _2130));
    float _2211;
    float _2213;
    float _2215;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2178 = fma(_1392, cbModelParam._m0[13u].z, fma(_1388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1384)) + cbModelParam._m0[13u].w;
        float _2182 = fma(_1392, cbModelParam._m0[14u].z, fma(_1388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1384)) + cbModelParam._m0[14u].w;
        float _2186 = fma(_1392, cbModelParam._m0[15u].z, fma(_1388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1384)) + cbModelParam._m0[15u].w;
        float _2189 = fma(_1335, cbModelParam._m0[13u].z, fma(_1334, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1333));
        float _2192 = fma(_1335, cbModelParam._m0[14u].z, fma(_1334, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1333));
        float _2195 = fma(_1335, cbModelParam._m0[15u].z, fma(_1334, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1333));
        float _2223;
        if (_2189 > 0.0)
        {
            _2223 = abs((1.0 - _2178) / _2189);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2189 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2178 + 1.0) / _2189);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2223 = frontier_phi_14_12_ladder;
        }
        float _2572;
        if (_2192 > 0.0)
        {
            _2572 = abs((1.0 - _2182) / _2192);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2192 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2182 + 1.0) / _2192);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2572 = frontier_phi_23_19_ladder;
        }
        float _3042;
        if (_2195 > 0.0)
        {
            _3042 = abs((1.0 - _2186) / _2195);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_2186 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _3042 = frontier_phi_37_30_ladder;
        }
        float _3044 = isnan(_2572) ? _2223 : (isnan(_2223) ? _2572 : min(_2223, _2572));
        float _3045 = isnan(_3042) ? _3044 : (isnan(_3044) ? _3042 : min(_3044, _3042));
        float _3049 = (_3045 * _2189) + _2178;
        float _3050 = (_3045 * _2192) + _2182;
        float _3051 = (_3045 * _2195) + _2186;
        float _3052 = _3045 * 9.9999997473787516355514526367188e-05;
        float _3053 = (-1.0) - _3052;
        float _3055 = _3052 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_3051 > _3055) || ((_3051 < _3053) || ((_3050 > _3055) || ((_3050 < _3053) || ((_3049 < _3053) || (_3049 > _3055))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3051, cbModelParam._m0[9u].z, fma(_3050, cbModelParam._m0[9u].y, _3049 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3051, cbModelParam._m0[10u].z, fma(_3050, cbModelParam._m0[10u].y, _3049 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3051, cbModelParam._m0[11u].z, fma(_3050, cbModelParam._m0[11u].y, _3049 * cbModelParam._m0[11u].x))), _2131);
            frontier_phi_13_37_ladder = _3177.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _3177.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _3177.x * cbModelParam._m0[1u].y;
        }
        _2211 = frontier_phi_13_37_ladder_2;
        _2213 = frontier_phi_13_37_ladder_1;
        _2215 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1333, _1334, _1335), _2131);
        _2211 = _2199.x * cbModelParam._m0[1u].y;
        _2213 = _2199.y * cbModelParam._m0[1u].y;
        _2215 = _2199.z * cbModelParam._m0[1u].y;
    }
    float _2219 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1132);
    float _2220 = isnan(_2219) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2219 : min(cbModelParam._m0[25u].w, _2219));
    float _2309;
    float _2311;
    float _2313;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2273 = fma(_1392, cbModelParam._m0[21u].z, fma(_1388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1384)) + cbModelParam._m0[21u].w;
        float _2277 = fma(_1392, cbModelParam._m0[22u].z, fma(_1388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1384)) + cbModelParam._m0[22u].w;
        float _2281 = fma(_1392, cbModelParam._m0[23u].z, fma(_1388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1384)) + cbModelParam._m0[23u].w;
        float _2284 = fma(_1335, cbModelParam._m0[21u].z, fma(_1334, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1333));
        float _2287 = fma(_1335, cbModelParam._m0[22u].z, fma(_1334, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1333));
        float _2290 = fma(_1335, cbModelParam._m0[23u].z, fma(_1334, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1333));
        float _2577;
        if (_2284 > 0.0)
        {
            _2577 = abs((1.0 - _2273) / _2284);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2284 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2273 + 1.0) / _2284);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2577 = frontier_phi_25_21_ladder;
        }
        float _3068;
        if (_2287 > 0.0)
        {
            _3068 = abs((1.0 - _2277) / _2287);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2287 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2277 + 1.0) / _2287);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3068 = frontier_phi_39_32_ladder;
        }
        float _3237;
        if (_2290 > 0.0)
        {
            _3237 = abs((1.0 - _2281) / _2290);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_2290 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_2281 + 1.0) / _2290);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _3237 = frontier_phi_53_48_ladder;
        }
        float _3239 = isnan(_3068) ? _2577 : (isnan(_2577) ? _3068 : min(_2577, _3068));
        float _3240 = isnan(_3237) ? _3239 : (isnan(_3239) ? _3237 : min(_3239, _3237));
        float _3244 = (_3240 * _2284) + _2273;
        float _3245 = (_3240 * _2287) + _2277;
        float _3246 = (_3240 * _2290) + _2281;
        float _3247 = _3240 * 9.9999997473787516355514526367188e-05;
        float _3248 = (-1.0) - _3247;
        float _3250 = _3247 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_3246 > _3250) || ((_3246 < _3248) || ((_3245 > _3250) || ((_3245 < _3248) || ((_3244 < _3248) || (_3244 > _3250))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3246, cbModelParam._m0[17u].z, fma(_3245, cbModelParam._m0[17u].y, _3244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3246, cbModelParam._m0[18u].z, fma(_3245, cbModelParam._m0[18u].y, _3244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3246, cbModelParam._m0[19u].z, fma(_3245, cbModelParam._m0[19u].y, _3244 * cbModelParam._m0[19u].x))), _2220);
            frontier_phi_22_53_ladder = _3479.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3479.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3479.x * cbModelParam._m0[1u].z;
        }
        _2309 = frontier_phi_22_53_ladder_2;
        _2311 = frontier_phi_22_53_ladder;
        _2313 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _2293 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1333, _1334, _1335), _2220);
        _2309 = _2293.x * cbModelParam._m0[1u].z;
        _2311 = _2293.y * cbModelParam._m0[1u].z;
        _2313 = _2293.z * cbModelParam._m0[1u].z;
    }
    float _2325 = ((((1.0 - _1353) * ((_1341 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1353 * _1341)) * _1312;
    float _2326 = _2325 * ((cbModelParam._m0[1u].w * (_2309 - _2211)) + _2211);
    float _2327 = _2325 * ((cbModelParam._m0[1u].w * (_2311 - _2213)) + _2213);
    float _2328 = _2325 * ((cbModelParam._m0[1u].w * (_2313 - _2215)) + _2215);
    float _2331 = fma(_2328, cbSceneParam._m0[89u].z, fma(_2327, cbSceneParam._m0[89u].y, _2326 * cbSceneParam._m0[89u].x));
    float _2334 = fma(_2328, cbSceneParam._m0[90u].z, fma(_2327, cbSceneParam._m0[90u].y, _2326 * cbSceneParam._m0[90u].x));
    float _2337 = fma(_2328, cbSceneParam._m0[91u].z, fma(_2327, cbSceneParam._m0[91u].y, _2326 * cbSceneParam._m0[91u].x));
    uvec4 _2347 = floatBitsToUint(cbInstanceData._m0[_1287 + 5u]);
    uint _2349 = _2347.x * 14u;
    uint _2350 = _2349 + 13u;
    float _2355 = _1312 + (-1.0);
    float _2358 = (cbLight._m0[_2350].x * _2355) + 1.0;
    float _2359 = (cbLight._m0[_2350].y * _2355) + 1.0;
    uint _2360 = _2349 + 5u;
    float _2366 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
    uint _2370 = _2349 + 4u;
    float _2376 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
    uint _2380 = _2349 | 1u;
    float _2391 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_1248, _1249, _1250));
    float _2394 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_1248, _1249, _1250));
    float _4645 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _4656 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2399 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2401 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2408 = ((cbLight._m0[_2360].x * _2366) * _2401) + ((cbLight._m0[_2370].x * _2376) * _2399);
    float _2409 = ((_2366 * cbLight._m0[_2360].y) * _2401) + ((_2376 * cbLight._m0[_2370].y) * _2399);
    float _2410 = ((_2366 * cbLight._m0[_2360].z) * _2401) + ((_2376 * cbLight._m0[_2370].z) * _2399);
    uint _2412 = _2349 + 8u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _1132) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2349].x + _1205;
    float _2428 = cbLight._m0[_2349].y + _1206;
    float _2429 = cbLight._m0[_2349].z + _1207;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_1248, _1249, _1250), vec3(cbLight._m0[_2349].xyz));
    float _4667 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2441 = dot(vec3(_1248, _1249, _1250), vec3(_1205, _1206, _1207));
    float _4678 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2445 = dot(vec3(_1248, _1249, _1250), vec3(_2434, _2435, _2436));
    float _4689 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2434, _2435, _2436));
    float _4700 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2426 * _2426;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2469 = 1.0 - _2426;
    float _2480 = (0.5 / (((_2444 * ((_2440 * _2469) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2444 * _2469) + _2426) * _2440))) * _2440;
    float _4711 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    uint _2493 = _2349 + 9u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _1132) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2380].x + _1205;
    float _2507 = cbLight._m0[_2380].y + _1206;
    float _2508 = cbLight._m0[_2380].z + _1207;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_1248, _1249, _1250), vec3(cbLight._m0[_2380].xyz));
    float _4722 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2520 = dot(vec3(_1248, _1249, _1250), vec3(_2513, _2514, _2515));
    float _4733 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2513, _2514, _2515));
    float _4744 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2505 * _2505;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2542 = 1.0 - _2505;
    float _2552 = (0.5 / (((_2444 * ((_2519 * _2542) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2444 * _2542) + _2505) * _2519))) * _2519;
    float _4755 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2554 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    float _2564 = (((_2541 * cbLight._m0[_2493].x) * _2554) * _2366) + (((_2468 * cbLight._m0[_2412].x) * _2482) * _2376);
    float _2565 = (((_2541 * cbLight._m0[_2493].y) * _2554) * _2366) + (((_2468 * cbLight._m0[_2412].y) * _2482) * _2376);
    float _2566 = (((_2541 * cbLight._m0[_2493].z) * _2554) * _2366) + (((_2468 * cbLight._m0[_2412].z) * _2482) * _2376);
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_2347.y == 0u)
    {
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2621;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2621;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2621;
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.x;
        uint _2648 = uint((float(_2636.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1213) / _2637))) + floor(float(uint(cbSceneParam._m0[85u].x * _1212) / _2637)));
        float _2658 = (log2(_2624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        uint _2662 = uint(isnan(14.0) ? _2659 : (isnan(_2659) ? 14.0 : min(_2659, 14.0)));
        uvec4 _2667 = texelFetch(g_lightClusterGridBuffer, int(((_2662 << 2u) + (_2648 << 6u)) >> 2u));
        uint _2668 = _2667.x;
        uint _2669 = _2636.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2669 >> 4u) & 15u)) + 4294967295u) & _2668) == 0u) || ((_2669 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            uint _3111 = 0u;
            uint _3120;
            bool _3121;
            for (;;)
            {
                _3120 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                _3121 = _3120 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_3121)
                {
                    frontier_phi_50_pred = _3108;
                    frontier_phi_50_pred_1 = _3110;
                    frontier_phi_50_pred_2 = _3109;
                    frontier_phi_50_pred_3 = _3107;
                    frontier_phi_50_pred_4 = _3106;
                    frontier_phi_50_pred_5 = _3105;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3105;
                    _3281 = _3106;
                    _3282 = _3107;
                    _3283 = _3108;
                    _3284 = _3109;
                    _3285 = _3110;
                    _3286 = _3120;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3111 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _2622;
                        float _3347 = _3306.y - _2623;
                        float _3348 = _3306.z - _2624;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_1268, _1271, _1274), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4776 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _2622;
                        float _3382 = (-0.0) - _2623;
                        float _3383 = (-0.0) - _2624;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3398 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _1341;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3388 + _3353;
                        float _3410 = _3389 + _3354;
                        float _3411 = _3390 + _3355;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_1268, _1271, _1274), vec3(_3388, _3389, _3390));
                        float _4792 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3423 = dot(vec3(_1268, _1271, _1274), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4803 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3366 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3356) + _3432;
                        float _4814 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4825 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3430 * _3430) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3189 = (_3377 * _3325.x) + _3283;
                        _3190 = (_3377 * _3325.y) + _3284;
                        _3191 = (_3377 * _3325.z) + _3285;
                        _3186 = (_3458 * _3342.x) + _3280;
                        _3187 = (_3458 * _3342.y) + _3281;
                        _3188 = (_3458 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3186;
                            _3281 = _3187;
                            _3282 = _3188;
                            _3283 = _3189;
                            _3284 = _3190;
                            _3285 = _3191;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_50_pred = _3189;
                    frontier_phi_50_pred_1 = _3191;
                    frontier_phi_50_pred_2 = _3190;
                    frontier_phi_50_pred_3 = _3188;
                    frontier_phi_50_pred_4 = _3187;
                    frontier_phi_50_pred_5 = _3186;
                }
                _2905 = frontier_phi_50_pred;
                _2909 = frontier_phi_50_pred_1;
                _2907 = frontier_phi_50_pred_2;
                _2903 = frontier_phi_50_pred_3;
                _2901 = frontier_phi_50_pred_4;
                _2899 = frontier_phi_50_pred_5;
                uint _3112 = _3111 + 1u;
                if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3105 = _2899;
                    _3106 = _2901;
                    _3107 = _2903;
                    _3108 = _2905;
                    _3109 = _2907;
                    _3110 = _2909;
                    _3111 = _3112;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((4294967295u << _2915) & _2668) == 0u)
        {
            _3073 = _2898;
            _3075 = _2900;
            _3077 = _2902;
            _3079 = _2904;
            _3081 = _2906;
            _3083 = _2908;
        }
        else
        {
            float _3098 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
            float _3099 = _3098 * _2622;
            float _3100 = _3098 * _2623;
            float _3101 = _3098 * _2624;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3263 = _2898;
                float _3264 = _2900;
                float _3265 = _2902;
                float _3266 = _2904;
                float _3267 = _2906;
                float _3268 = _2908;
                uint _3269 = _2915;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_3279)
                    {
                        frontier_phi_59_pred = _3268;
                        frontier_phi_59_pred_1 = _3267;
                        frontier_phi_59_pred_2 = _3266;
                        frontier_phi_59_pred_3 = _3265;
                        frontier_phi_59_pred_4 = _3264;
                        frontier_phi_59_pred_5 = _3263;
                    }
                    else
                    {
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3497 = _3263;
                        float _3498 = _3264;
                        float _3499 = _3265;
                        float _3500 = _3266;
                        float _3501 = _3267;
                        float _3502 = _3268;
                        uint _3503 = _3278;
                        uint _3504;
                        vec4 _3529;
                        float _3530;
                        vec4 _3545;
                        vec3 _3557;
                        vec4 _3572;
                        vec4 _3587;
                        float _3633;
                        bool _3634;
                        for (;;)
                        {
                            uint _3514 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3503));
                            _3504 = (_3503 + 4294967295u) & _3503;
                            uint _3516 = _3514 * 40u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3530 = _3529.w;
                            uint _3532 = (_3514 * 40u) + 4u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3514 * 40u) + 8u;
                            _3557 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x));
                            uint _3559 = (_3514 * 40u) + 16u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3514 * 40u) + 20u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3514 * 40u) + 24u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3608 = (_3514 * 40u) + 28u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3633 = fma(_2624, _3621.z, fma(_2623, _3621.y, _3621.x * _2622)) + _3621.w;
                            _3634 = !((fma(_2624, _3602.z, fma(_2623, _3602.y, _3602.x * _2622)) + _3602.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_3634)
                            {
                                float _3661 = _3529.x - _2622;
                                float _3662 = _3529.y - _2623;
                                float _3663 = _3529.z - _2624;
                                float _3664 = dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663));
                                float _3667 = inversesqrt(_3664);
                                float _3668 = _3667 * _3661;
                                float _3669 = _3667 * _3662;
                                float _3670 = _3667 * _3663;
                                float _3674 = 1.0 - (_3664 / (_3530 * _3530));
                                float _4836 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3679 = sqrt(_3664) * _3545.w;
                                float _3681 = 1.39999997615814208984375 / (_3679 + 1.39999997615814208984375);
                                float _3682 = _3681 * _3681;
                                float _3685 = ((1.0 - _3682) * dot(vec3(_3668, _3669, _3670), vec3(_1268, _1271, _1274))) + _3682;
                                float _3688 = _3679 * _3679;
                                float _3692 = (fma(_2624, _3572.z, fma(_2623, _3572.y, _3572.x * _2622)) + _3572.w) / _3633;
                                float _3693 = (fma(_2624, _3587.z, fma(_2623, _3587.y, _3587.x * _2622)) + _3587.w) / _3633;
                                float _3697 = 1.0 - dot(vec2(_3692, _3693), vec2(_3692, _3693));
                                float _4852 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3699 = _3698 * (((isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0))) * _3675) / ((_3688 * 0.699999988079071044921875) + 1.0));
                                float _3711 = exp2(log2(1.0 / ((_3688 * 3.5) + 5.0)) * 0.25);
                                float _3712 = 1.0 - _1341;
                                float _3719 = sqrt(1.0 - ((1.0 - (_3712 * _3712)) * (1.0 - (_3711 * _3711))));
                                float _3720 = _3719 * _3719;
                                float _3721 = _3720 * _3720;
                                float _3722 = _3668 - _3099;
                                float _3723 = _3669 - _3100;
                                float _3724 = _3670 - _3101;
                                float _3728 = inversesqrt(dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724)));
                                float _3732 = dot(vec3(_1268, _1271, _1274), vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101));
                                float _4863 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3736 = dot(vec3(_1268, _1271, _1274), vec3(_3728 * _3722, _3728 * _3723, _3728 * _3724));
                                float _4874 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3743 = ((_3739 * _3739) * (_3721 + (-1.0))) + 1.0;
                                float _3744 = _3681 * _3720;
                                float _3745 = _3744 * _3744;
                                float _3751 = ((1.0 - _3745) * dot(vec3(_1268, _1271, _1274), vec3(_3668, _3669, _3670))) + _3745;
                                float _4885 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3753 = 1.0 - _3720;
                                float _3763 = (0.5 / (((_3752 * ((_3735 * _3753) + _3720)) + 9.9999999392252902907785028219223e-09) + (((_3752 * _3753) + _3720) * _3735))) * _3752;
                                float _4896 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3773 = (_3698 * _3675) * (((_3721 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3743 * _3743) * ((_3688 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3699 * _3545.z;
                                frontier_phi_65_pred_1 = _3699 * _3545.y;
                                frontier_phi_65_pred_2 = _3699 * _3545.x;
                                frontier_phi_65_pred_3 = _3773 * _3557.z;
                                frontier_phi_65_pred_4 = _3773 * _3557.y;
                                frontier_phi_65_pred_5 = _3773 * _3557.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3782 = frontier_phi_65_pred;
                            _3781 = frontier_phi_65_pred_1;
                            _3780 = frontier_phi_65_pred_2;
                            _3779 = frontier_phi_65_pred_3;
                            _3778 = frontier_phi_65_pred_4;
                            _3777 = frontier_phi_65_pred_5;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            _3486 = _3779 + _3499;
                            if (_3504 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3504;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3489;
                        frontier_phi_59_pred_1 = _3488;
                        frontier_phi_59_pred_2 = _3487;
                        frontier_phi_59_pred_3 = _3486;
                        frontier_phi_59_pred_4 = _3485;
                        frontier_phi_59_pred_5 = _3484;
                    }
                    _3084 = frontier_phi_59_pred;
                    _3082 = frontier_phi_59_pred_1;
                    _3080 = frontier_phi_59_pred_2;
                    _3078 = frontier_phi_59_pred_3;
                    _3076 = frontier_phi_59_pred_4;
                    _3074 = frontier_phi_59_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3074;
                        _3264 = _3076;
                        _3265 = _3078;
                        _3266 = _3080;
                        _3267 = _3082;
                        _3268 = _3084;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _3080;
                frontier_phi_41_42_ladder_1 = _3084;
                frontier_phi_41_42_ladder_2 = _3082;
                frontier_phi_41_42_ladder_3 = _3078;
                frontier_phi_41_42_ladder_4 = _3076;
                frontier_phi_41_42_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_41_42_ladder = _2904;
                frontier_phi_41_42_ladder_1 = _2908;
                frontier_phi_41_42_ladder_2 = _2906;
                frontier_phi_41_42_ladder_3 = _2902;
                frontier_phi_41_42_ladder_4 = _2900;
                frontier_phi_41_42_ladder_5 = _2898;
            }
            _3073 = frontier_phi_41_42_ladder_5;
            _3075 = frontier_phi_41_42_ladder_4;
            _3077 = frontier_phi_41_42_ladder_3;
            _3079 = frontier_phi_41_42_ladder;
            _3081 = frontier_phi_41_42_ladder_2;
            _3083 = frontier_phi_41_42_ladder_1;
        }
        float _3088 = isnan(1.0) ? _1312 : (isnan(_1312) ? 1.0 : min(_1312, 1.0));
        _2681 = (_3088 * _3079) + _2408;
        _2683 = (_3088 * _3081) + _2409;
        _2685 = (_3088 * _3083) + _2410;
        _2687 = ((_3073 * 0.039999999105930328369140625) * _3088) + _2564;
        _2689 = ((_3075 * 0.039999999105930328369140625) * _3088) + _2565;
        _2691 = ((_3077 * 0.039999999105930328369140625) * _3088) + _2566;
    }
    else
    {
        _2681 = _2408;
        _2683 = _2409;
        _2685 = _2410;
        _2687 = _2564;
        _2689 = _2565;
        _2691 = _2566;
    }
    uint _2697 = _1288 + uint(cbMatDynParam._m0[0u].w);
    float _2724 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2725 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2726 = cbSceneParam._m0[86u].x * ((_1212 / cbSceneParam._m0[86u].x) + (((10.0 / (_1149 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1248, _1249, _1250), vec3(_224, _225, _226))));
    float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
    float _2728 = isnan(_2725) ? _1213 : (isnan(_1213) ? _2725 : min(_1213, _2725));
    vec4 _2730 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2727, _2728), 0.0);
    float _2732 = _2730.x;
    bool _2752 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2732)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2732))) > _1149;
    float _2753 = _2752 ? _2727 : _1212;
    float _2754 = _2752 ? _2728 : _1213;
    vec4 _2756 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2753, _2754));
    vec4 _2761 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2753, _2754));
    float _2763 = _2761.x;
    float _2783 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2763)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2763))) - _1149;
    bool _2793 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2797 = (isnan(_2783) ? 0.0 : (isnan(0.0) ? _2783 : max(0.0, _2783))) * (-1.44269502162933349609375);
    float _4927 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _4938 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _4949 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _2825 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2828 = ((_2756.x * _2825) * exp2(_2797 * (_2793 ? 0.0 : (cbMtdParam._m0[38u].x + cbMtdParam._m0[36u].z)))) * cbSceneParam._m0[72u].w;
    float _2831 = ((_2756.y * _2825) * exp2(_2797 * (_2793 ? 0.0 : (cbMtdParam._m0[38u].y + cbMtdParam._m0[36u].w)))) * cbSceneParam._m0[72u].w;
    float _2834 = ((_2756.z * _2825) * exp2(_2797 * (_2793 ? 0.0 : (cbMtdParam._m0[38u].z + cbMtdParam._m0[37u].x)))) * cbSceneParam._m0[72u].w;
    float _2843 = (((cbInstanceData._m0[_2697].x * (_944 - (_944 * TEXCOORD_7.x))) + ((_2687 + ((isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0))) * _2120)) * cbPerFrame._m0[3u].x)) + _2828) + ((((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2681 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1312))) - _2828) * _1071);
    float _2846 = (((cbInstanceData._m0[_2697].y * (_946 - (_946 * TEXCOORD_7.y))) + ((_2689 + ((isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))) * _2120)) * cbPerFrame._m0[3u].x)) + _2831) + ((((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2683 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1312))) - _2831) * _1071);
    float _2849 = (((cbInstanceData._m0[_2697].z * (_948 - (_948 * TEXCOORD_7.z))) + ((_2691 + ((isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0))) * _2120)) * cbPerFrame._m0[3u].x)) + _2834) + ((((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2685 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1312))) - _2834) * _1071);
    float _2861 = _1212 / cbSceneParam._m0[86u].x;
    float _2862 = _1213 / cbSceneParam._m0[86u].y;
    vec4 _2876 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, (log2((isnan(cbSceneParam._m0[77u].w) ? _1149 : (isnan(_1149) ? cbSceneParam._m0[77u].w : min(_1149, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2878 = _2876.x;
    float _2879 = _2876.y;
    float _2880 = _2876.z;
    float _2881 = _2876.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_1149 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_1149) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1149 : min(cbSceneParam._m0[80u].w, _1149));
        float _2924 = _2923 / _1149;
        float _2935 = _2924 * _1198;
        float _2936 = _1199 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2938 = _2924 * _1200;
        float _2940 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2936;
        float _2948 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2948;
        float _2957 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_2937 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_2941 > 0.0) ? exp2(_2957 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3134 = 1.0 / cbSceneParam._m0[80u].x;
            float _3135 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3136 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            _3199 = ((abs(_2948 / _2937) * cbSceneParam._m0[80u].y) * ((((_3145 - _3146) * 2.0) - ((exp2(_2957 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0)))) - exp2(_2957 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))))) * _3134)) - ((exp2(_2958 * _3145) - exp2(_2958 * _3146)) * _3134))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2861, _2862, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2881);
        _2960 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2878;
        _2962 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2879;
        _2964 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2880;
        _2966 = _3210 * _2881;
    }
    else
    {
        _2960 = _2878;
        _2962 = _2879;
        _2964 = _2880;
        _2966 = _2881;
    }
    bool _2978 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2979 = log2(_2966);
    float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)));
    float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0)));
    float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)));
    vec4 _2996 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1212, _1213));
    float _2998 = _2996.x;
    float _3019 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2998)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2998))) - _1149) * cbMtdParam._m0[23u].y;
    float _5015 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
    float _3021 = (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * cbInstanceData._m0[_1287 + 6u].w;
    float _3030 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3030 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.y = _3030 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.z = _3030 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.w = _3021;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3021;
}


