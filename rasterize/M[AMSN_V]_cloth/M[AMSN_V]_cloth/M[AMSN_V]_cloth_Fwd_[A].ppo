#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _879;
float _3272;
float _3273;
float _3274;
float _3275;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.w;
    float _241 = _234.x * cbMtdParam._m0[9u].x;
    float _242 = _234.y * cbMtdParam._m0[9u].y;
    float _243 = _234.z * cbMtdParam._m0[9u].z;
    float _244 = _240 * TEXCOORD_1.z;
    vec4 _260 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3284 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))));
    float _280 = fma(_277, _212, fma(_270, _204 * TANGENT.x, (_190 * _182) * _268));
    float _283 = fma(_277, _213, fma(_270, _204 * TANGENT.y, (_190 * _183) * _268));
    float _286 = fma(_277, _214, fma(_270, _204 * TANGENT.z, (_190 * _184) * _268));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3295 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _294 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _295 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3328 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3339 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3350 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _299 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _558 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _564 = (cbMatDynParam._m0[5u].x * _558) + cbMatDynParam._m0[5u].y;
        float _3361 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _565 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _569 = (cbMatDynParam._m0[5u].z * _558) + cbMatDynParam._m0[5u].w;
        float _3372 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) - _565)) + _565) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _418 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _421 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3383 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _449 = 1.0 - _299;
    float _450 = _446 * _449;
    float _451 = _447 * _449;
    float _452 = _448 * _449;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _299;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _299;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _299;
    float _460 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _475 = _472.x * TEXCOORD_1.w;
    float _476 = dot(vec3(_291, _292, _293), vec3(_373, _374, _375));
    float _479 = _476 * 2.0;
    float _483 = (_479 * _291) - _373;
    float _484 = (_479 * _292) - _374;
    float _485 = (_479 * _293) - _375;
    float _489 = abs(dot(vec3(_373, _374, _375), vec3(_291, _292, _293)));
    float _3416 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _491 = sqrt(_295);
    float _504 = exp2((_491 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_491 * 3.0));
    float _510 = (1.0 - _504) * ((_491 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _511 = _504 * _491;
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_547, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _539));
        float _607 = fma(_547, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _539));
        float _611 = fma(_547, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _539));
        float _636 = _539 + _291;
        float _637 = _543 + _292;
        float _638 = _547 + _293;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_291, _292, _293), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3464 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_291, _292, _293), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3497 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_291, _292, _293), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3530 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _922 = fma(_547, cbModelParam._m0[30u].z, fma(_543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _539));
        float _926 = fma(_547, cbModelParam._m0[31u].z, fma(_543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _539));
        float _930 = fma(_547, cbModelParam._m0[32u].z, fma(_543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _539));
        float _953 = _539 + _291;
        float _954 = _543 + _292;
        float _955 = _547 + _293;
        float _965 = fma(_955, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953)) - _922;
        float _966 = fma(_955, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953)) - _926;
        float _967 = fma(_955, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953)) - _930;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_922 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_926 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[35u].z) + ((((((_930 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_291, _292, _293), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3593 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_291, _292, _293), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3626 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_291, _292, _293), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3659 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = _879;
        _1200 = _879;
        _1201 = _879;
        _1202 = _879;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _483 * 0.5;
    float _1260 = _484 * 0.5;
    float _1261 = _485 * 0.5;
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_878, _882, _885, _888));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_880, _883, _886, _889));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_881, _884, _887, _890));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1327 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1328 = isnan(_1327) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1327 : min(cbModelParam._m0[25u].z, _1327));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1377 = fma(_547, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539)) + cbModelParam._m0[13u].w;
        float _1381 = fma(_547, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539)) + cbModelParam._m0[14u].w;
        float _1385 = fma(_547, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539)) + cbModelParam._m0[15u].w;
        float _1388 = fma(_485, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483));
        float _1391 = fma(_485, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483));
        float _1394 = fma(_485, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483));
        float _1422;
        if (_1388 > 0.0)
        {
            _1422 = abs((1.0 - _1377) / _1388);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1377 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1422 = frontier_phi_19_17_ladder;
        }
        float _1630;
        if (_1391 > 0.0)
        {
            _1630 = abs((1.0 - _1381) / _1391);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1381 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1630 = frontier_phi_28_24_ladder;
        }
        float _1884;
        if (_1394 > 0.0)
        {
            _1884 = abs((1.0 - _1385) / _1394);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1385 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1884 = frontier_phi_40_35_ladder;
        }
        float _1886 = isnan(_1630) ? _1422 : (isnan(_1422) ? _1630 : min(_1422, _1630));
        float _1887 = isnan(_1884) ? _1886 : (isnan(_1886) ? _1884 : min(_1886, _1884));
        float _1891 = (_1887 * _1388) + _1377;
        float _1892 = (_1887 * _1391) + _1381;
        float _1893 = (_1887 * _1394) + _1385;
        float _1894 = _1887 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1894;
        float _1898 = _1894 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 > _1898) || ((_1892 < _1896) || ((_1891 < _1896) || (_1891 > _1898))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1893, cbModelParam._m0[9u].z, fma(_1892, cbModelParam._m0[9u].y, _1891 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1893, cbModelParam._m0[10u].z, fma(_1892, cbModelParam._m0[10u].y, _1891 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1893, cbModelParam._m0[11u].z, fma(_1892, cbModelParam._m0[11u].y, _1891 * cbModelParam._m0[11u].x))), _1328);
            frontier_phi_18_40_ladder = _2021.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2021.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2021.x * cbModelParam._m0[1u].y;
        }
        _1410 = frontier_phi_18_40_ladder_2;
        _1412 = frontier_phi_18_40_ladder_1;
        _1414 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_483, _484, _485), _1328);
        _1410 = _1398.x * cbModelParam._m0[1u].y;
        _1412 = _1398.y * cbModelParam._m0[1u].y;
        _1414 = _1398.z * cbModelParam._m0[1u].y;
    }
    float _1418 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1418 : min(cbModelParam._m0[25u].w, _1418));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1476 = fma(_547, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539)) + cbModelParam._m0[21u].w;
        float _1480 = fma(_547, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539)) + cbModelParam._m0[22u].w;
        float _1484 = fma(_547, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539)) + cbModelParam._m0[23u].w;
        float _1487 = fma(_485, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483));
        float _1490 = fma(_485, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483));
        float _1493 = fma(_485, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483));
        float _1635;
        if (_1487 > 0.0)
        {
            _1635 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1635 = frontier_phi_30_26_ladder;
        }
        float _1911;
        if (_1490 > 0.0)
        {
            _1911 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1911 = frontier_phi_42_37_ladder;
        }
        float _2124;
        if (_1493 > 0.0)
        {
            _2124 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2124 = frontier_phi_51_48_ladder;
        }
        float _2126 = isnan(_1911) ? _1635 : (isnan(_1635) ? _1911 : min(_1635, _1911));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1487) + _1476;
        float _2132 = (_2127 * _1490) + _1480;
        float _2133 = (_2127 * _1493) + _1484;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2135 = (-1.0) - _2134;
        float _2137 = _2134 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2133 > _2137) || ((_2133 < _2135) || ((_2132 > _2137) || ((_2132 < _2135) || ((_2131 < _2135) || (_2131 > _2137))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2133, cbModelParam._m0[17u].z, fma(_2132, cbModelParam._m0[17u].y, _2131 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2133, cbModelParam._m0[18u].z, fma(_2132, cbModelParam._m0[18u].y, _2131 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2133, cbModelParam._m0[19u].z, fma(_2132, cbModelParam._m0[19u].y, _2131 * cbModelParam._m0[19u].x))), _1419);
            frontier_phi_27_51_ladder = _2333.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2333.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2333.x * cbModelParam._m0[1u].z;
        }
        _1512 = frontier_phi_27_51_ladder_2;
        _1514 = frontier_phi_27_51_ladder_1;
        _1516 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_483, _484, _485), _1419);
        _1512 = _1496.x * cbModelParam._m0[1u].z;
        _1514 = _1496.y * cbModelParam._m0[1u].z;
        _1516 = _1496.z * cbModelParam._m0[1u].z;
    }
    float _1529 = (((_510 * _460) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1531 = (((_510 * _462) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_510 * _463) + _511) * _475) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1536 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, _1529 * cbSceneParam._m0[91u].x));
    uvec4 _1552 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1554 = _1552.x * 14u;
    uint _1555 = _1554 + 13u;
    float _1562 = _475 + (-1.0);
    float _1567 = (cbLight._m0[_1555].x * _1562) + 1.0;
    float _1568 = (cbLight._m0[_1555].y * _1562) + 1.0;
    float _1569 = (cbLight._m0[_1555].z * _1562) + 1.0;
    float _1570 = (cbLight._m0[_1555].w * _1562) + 1.0;
    uint _1571 = _1554 + 5u;
    float _1577 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
    uint _1581 = _1554 + 4u;
    float _1588 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1592 = _1554 | 1u;
    float _1603 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_291, _292, _293));
    float _1606 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_291, _292, _293));
    float _3795 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _3806 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1611 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _1613 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.3183098733425140380859375;
    float _1620 = ((cbLight._m0[_1571].x * _1577) * _1613) + ((cbLight._m0[_1581].x * _1588) * _1611);
    float _1621 = ((_1577 * cbLight._m0[_1571].y) * _1613) + ((_1588 * cbLight._m0[_1581].y) * _1611);
    float _1622 = ((_1577 * cbLight._m0[_1571].z) * _1613) + ((_1588 * cbLight._m0[_1581].z) * _1611);
    uvec4 _1627 = floatBitsToUint(cbLight._m0[_1554 + 12u]);
    bool _1629 = _1627.x == 0u;
    float _1640;
    float _1642;
    float _1644;
    if (_1629)
    {
        _1640 = _1620;
        _1642 = _1621;
        _1644 = _1622;
    }
    else
    {
        uint _1648 = _1554 + 6u;
        float _1664 = (dot(vec3(cbLight._m0[_1554 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1665 = _1664 * _1664;
        float _3817 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1667 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1640 = (((cbLight._m0[_1648].x * 0.3183098733425140380859375) * _1666) * _1667) + _1620;
        _1642 = (((cbLight._m0[_1648].y * 0.3183098733425140380859375) * _1666) * _1667) + _1621;
        _1644 = (((cbLight._m0[_1648].z * 0.3183098733425140380859375) * _1666) * _1667) + _1622;
    }
    bool _1647 = _1627.y == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1647)
    {
        _1685 = _1640;
        _1687 = _1642;
        _1689 = _1644;
    }
    else
    {
        uint _1855 = _1554 + 7u;
        float _1871 = (dot(vec3(cbLight._m0[_1554 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3833 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1874 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _1685 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1640;
        _1687 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1642;
        _1689 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1644;
    }
    uint _1692 = _1554 + 8u;
    float _1705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _295) * 0.949999988079071044921875);
    float _1706 = _1705 * _1705;
    float _1707 = cbLight._m0[_1554].x + _373;
    float _1708 = cbLight._m0[_1554].y + _374;
    float _1709 = cbLight._m0[_1554].z + _375;
    float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
    float _1714 = _1713 * _1707;
    float _1715 = _1713 * _1708;
    float _1716 = _1713 * _1709;
    float _1717 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1554].xyz));
    float _3849 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _1721 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1722 = dot(vec3(_291, _292, _293), vec3(_1714, _1715, _1716));
    float _3871 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1726 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1714, _1715, _1716));
    float _3882 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1730 = _1706 * _1706;
    float _1734 = ((_1725 * _1725) * (_1730 + (-1.0))) + 1.0;
    float _1742 = exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0);
    float _1743 = 0.959999978542327880859375 - _457;
    float _1745 = 0.959999978542327880859375 - _458;
    float _1746 = 0.959999978542327880859375 - _459;
    float _1753 = 1.0 - _1706;
    float _1764 = (0.5 / (((_1721 * ((_1720 * _1753) + _1706)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1753) + _1706) * _1720))) * _1720;
    float _3893 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1766 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1730 / ((_1734 * _1734) * 3.141590118408203125));
    uint _1777 = _1554 + 9u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _295) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1592].x + _373;
    float _1791 = cbLight._m0[_1592].y + _374;
    float _1792 = cbLight._m0[_1592].z + _375;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1592].xyz));
    float _3904 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1804 = dot(vec3(_291, _292, _293), vec3(_1797, _1798, _1799));
    float _3915 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1797, _1798, _1799));
    float _3926 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = _1789 * _1789;
    float _1816 = ((_1807 * _1807) * (_1812 + (-1.0))) + 1.0;
    float _1823 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
    float _1830 = 1.0 - _1789;
    float _1840 = (0.5 / (((_1721 * ((_1803 * _1830) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1830) + _1789) * _1803))) * _1803;
    float _3937 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1812 / ((_1816 * _1816) * 3.141590118408203125));
    float _1852 = (((((_1823 * _1743) + _460) * cbLight._m0[_1777].x) * _1842) * _1577) + (((((_1742 * _1743) + _460) * cbLight._m0[_1692].x) * _1766) * _1588);
    float _1853 = (((((_1823 * _1745) + _462) * cbLight._m0[_1777].y) * _1842) * _1577) + (((((_1742 * _1745) + _462) * cbLight._m0[_1692].y) * _1766) * _1588);
    float _1854 = (((((_1823 * _1746) + _463) * cbLight._m0[_1777].z) * _1842) * _1577) + (((((_1742 * _1746) + _463) * cbLight._m0[_1692].z) * _1766) * _1588);
    float _1916;
    float _1918;
    float _1920;
    if (_1629)
    {
        _1916 = _1852;
        _1918 = _1853;
        _1920 = _1854;
    }
    else
    {
        uint _1922 = _1554 + 2u;
        uint _1926 = _1554 + 10u;
        float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _295) * 0.949999988079071044921875);
        float _1941 = _1940 * _1940;
        float _1942 = cbLight._m0[_1922].x + _373;
        float _1943 = cbLight._m0[_1922].y + _374;
        float _1944 = cbLight._m0[_1922].z + _375;
        float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
        float _1949 = _1948 * _1942;
        float _1950 = _1948 * _1943;
        float _1951 = _1948 * _1944;
        float _1952 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1922].xyz));
        float _3948 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1955 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1956 = dot(vec3(_291, _292, _293), vec3(_1949, _1950, _1951));
        float _3959 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1960 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_1949, _1950, _1951));
        float _3970 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1964 = _1941 * _1941;
        float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
        float _1975 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
        float _1982 = 1.0 - _1941;
        float _1992 = (0.5 / (((_1721 * ((_1955 * _1982) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _1982) + _1941) * _1955))) * _1955;
        float _3981 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1994 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
        float _1995 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1916 = (((((_1975 * _1743) + _460) * cbLight._m0[_1926].x) * _1994) * _1995) + _1852;
        _1918 = (((((_1975 * _1745) + _462) * cbLight._m0[_1926].y) * _1994) * _1995) + _1853;
        _1920 = (((((_1975 * _1746) + _463) * cbLight._m0[_1926].z) * _1994) * _1995) + _1854;
    }
    float _2030;
    float _2032;
    float _2034;
    if (_1647)
    {
        _2030 = _1916;
        _2032 = _1918;
        _2034 = _1920;
    }
    else
    {
        uint _2041 = _1554 + 3u;
        uint _2045 = _1554 + 11u;
        float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _295) * 0.949999988079071044921875);
        float _2060 = _2059 * _2059;
        float _2061 = cbLight._m0[_2041].x + _373;
        float _2062 = cbLight._m0[_2041].y + _374;
        float _2063 = cbLight._m0[_2041].z + _375;
        float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
        float _2068 = _2067 * _2061;
        float _2069 = _2067 * _2062;
        float _2070 = _2067 * _2063;
        float _2071 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2041].xyz));
        float _3997 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2075 = dot(vec3(_291, _292, _293), vec3(_2068, _2069, _2070));
        float _4008 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2079 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2068, _2069, _2070));
        float _4019 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2083 = _2060 * _2060;
        float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
        float _2094 = exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0);
        float _2101 = 1.0 - _2060;
        float _2111 = (0.5 / (((_1721 * ((_2074 * _2101) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1721 * _2101) + _2060) * _2074))) * _2074;
        float _4030 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2113 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
        float _2114 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
        _2030 = (((((_2094 * _1743) + _460) * cbLight._m0[_2045].x) * _2113) * _2114) + _1916;
        _2032 = (((((_2094 * _1745) + _462) * cbLight._m0[_2045].y) * _2113) * _2114) + _1918;
        _2034 = (((((_2094 * _1746) + _463) * cbLight._m0[_2045].z) * _2113) * _2114) + _1920;
    }
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_1552.y == 0u)
    {
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2189;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2189;
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2189;
        uvec4 _2204 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2205 = _2204.x;
        uint _2216 = uint((float(_2204.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2205))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2205)));
        float _2226 = (log2(_2192 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2227 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        uint _2230 = uint(isnan(14.0) ? _2227 : (isnan(_2227) ? 14.0 : min(_2227, 14.0)));
        uvec4 _2235 = texelFetch(g_lightClusterGridBuffer, int(((_2230 << 2u) + (_2216 << 6u)) >> 2u));
        uint _2236 = _2235.x;
        uint _2237 = _2204.z;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((((1u << ((_2237 >> 4u) & 15u)) + 4294967295u) & _2236) == 0u) || ((_2237 & 240u) == 0u))
        {
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
        }
        else
        {
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            uint _2496 = 0u;
            uint _2505;
            bool _2506;
            for (;;)
            {
                _2505 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2496 << 2u)) >> 2u)).x;
                _2506 = _2505 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2506)
                {
                    frontier_phi_68_pred = _2492;
                    frontier_phi_68_pred_1 = _2495;
                    frontier_phi_68_pred_2 = _2494;
                    frontier_phi_68_pred_3 = _2493;
                    frontier_phi_68_pred_4 = _2491;
                    frontier_phi_68_pred_5 = _2490;
                }
                else
                {
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    uint _2641;
                    _2635 = _2490;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2494;
                    _2640 = _2495;
                    _2641 = _2505;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    for (;;)
                    {
                        uint _2645 = uint(findLSB(_2641)) + (_2496 << 5u);
                        uint _2642 = (_2641 + 4294967295u) & _2641;
                        uint _2647 = _2645 * 48u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2667 = (_2645 * 48u) + 4u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2686 = (_2645 * 48u) + 8u;
                        vec3 _2697 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x));
                        float _2701 = _2661.x - _2190;
                        float _2702 = _2661.y - _2191;
                        float _2703 = _2661.z - _2192;
                        float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                        float _2707 = inversesqrt(_2704);
                        float _2708 = _2707 * _2701;
                        float _2709 = _2707 * _2702;
                        float _2710 = _2707 * _2703;
                        float _2711 = dot(vec3(_415, _418, _421), vec3(_2708, _2709, _2710));
                        float _2716 = 1.0 - (_2704 * _2661.w);
                        float _4056 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2718 = sqrt(_2704) * _2680.w;
                        float _2721 = 1.39999997615814208984375 / (_2718 + 1.39999997615814208984375);
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2711) + _2722;
                        float _2728 = _2718 * _2718;
                        float _2732 = ((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2717) / ((_2728 * 0.699999988079071044921875) + 1.0);
                        float _2736 = (-0.0) - _2190;
                        float _2737 = (-0.0) - _2191;
                        float _2738 = (-0.0) - _2192;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2753 = exp2(log2(1.0 / ((_2728 * 3.5) + 5.0)) * 0.25);
                        float _2754 = 1.0 - _491;
                        float _2761 = sqrt(1.0 - ((1.0 - (_2754 * _2754)) * (1.0 - (_2753 * _2753))));
                        float _2762 = _2761 * _2761;
                        float _2763 = _2762 * _2762;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2774 = dot(vec3(_415, _418, _421), vec3(_2743, _2744, _2745));
                        float _4072 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2777 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2778 = dot(vec3(_415, _418, _421), vec3(_2770 * _2764, _2770 * _2765, _2770 * _2766));
                        float _4083 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2785 = ((_2781 * _2781) * (_2763 + (-1.0))) + 1.0;
                        float _2786 = _2721 * _2762;
                        float _2787 = _2786 * _2786;
                        float _2790 = ((1.0 - _2787) * _2711) + _2787;
                        float _4094 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2792 = 1.0 - _2762;
                        float _2802 = (0.5 / (((_2791 * ((_2777 * _2792) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2791 * _2792) + _2762) * _2777))) * _2791;
                        float _4105 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2813 = (((_2763 * 3.1415927410125732421875) * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) / ((_2785 * _2785) * ((_2728 * 2.1991131305694580078125) + 3.141590118408203125))) * _2717;
                        _2565 = (_2732 * _2680.x) + _2638;
                        _2566 = (_2732 * _2680.y) + _2639;
                        _2567 = (_2732 * _2680.z) + _2640;
                        _2562 = (_2813 * _2697.x) + _2635;
                        _2563 = (_2813 * _2697.y) + _2636;
                        _2564 = (_2813 * _2697.z) + _2637;
                        if (_2642 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2635 = _2562;
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2566;
                            _2640 = _2567;
                            _2641 = _2642;
                        }
                    }
                    frontier_phi_68_pred = _2564;
                    frontier_phi_68_pred_1 = _2567;
                    frontier_phi_68_pred_2 = _2566;
                    frontier_phi_68_pred_3 = _2565;
                    frontier_phi_68_pred_4 = _2563;
                    frontier_phi_68_pred_5 = _2562;
                }
                _2343 = frontier_phi_68_pred;
                _2349 = frontier_phi_68_pred_1;
                _2347 = frontier_phi_68_pred_2;
                _2345 = frontier_phi_68_pred_3;
                _2341 = frontier_phi_68_pred_4;
                _2339 = frontier_phi_68_pred_5;
                uint _2497 = _2496 + 1u;
                if (_2497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2490 = _2339;
                    _2491 = _2341;
                    _2492 = _2343;
                    _2493 = _2345;
                    _2494 = _2347;
                    _2495 = _2349;
                    _2496 = _2497;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
        }
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.z;
        uint _2355 = (_2353 >> 8u) & 15u;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((4294967295u << _2355) & _2236) == 0u)
        {
            _2458 = _2338;
            _2460 = _2340;
            _2462 = _2342;
            _2464 = _2344;
            _2466 = _2346;
            _2468 = _2348;
        }
        else
        {
            float _2483 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
            float _2484 = _2483 * _2190;
            float _2485 = _2483 * _2191;
            float _2486 = _2483 * _2192;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2355 < ((_2353 >> 12u) & 15u))
            {
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2618 = _2338;
                float _2619 = _2340;
                float _2620 = _2342;
                float _2621 = _2344;
                float _2622 = _2346;
                float _2623 = _2348;
                uint _2624 = _2355;
                uint _2633;
                bool _2634;
                for (;;)
                {
                    _2633 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                    _2634 = _2633 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2634)
                    {
                        frontier_phi_79_pred = _2623;
                        frontier_phi_79_pred_1 = _2622;
                        frontier_phi_79_pred_2 = _2621;
                        frontier_phi_79_pred_3 = _2620;
                        frontier_phi_79_pred_4 = _2619;
                        frontier_phi_79_pred_5 = _2618;
                    }
                    else
                    {
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _2840 = _2618;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        float _2844 = _2622;
                        float _2845 = _2623;
                        uint _2846 = _2633;
                        uint _2847;
                        vec4 _2872;
                        float _2873;
                        vec4 _2888;
                        vec3 _2900;
                        vec4 _2916;
                        vec4 _2932;
                        float _2979;
                        bool _2980;
                        for (;;)
                        {
                            uint _2857 = ((_2624 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2846));
                            _2847 = (_2846 + 4294967295u) & _2846;
                            uint _2859 = _2857 * 40u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            _2873 = _2872.w;
                            uint _2875 = (_2857 * 40u) + 4u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2890 = (_2857 * 40u) + 8u;
                            _2900 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x));
                            uint _2903 = (_2857 * 40u) + 16u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2919 = (_2857 * 40u) + 20u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2935 = (_2857 * 40u) + 24u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2954 = (_2857 * 40u) + 28u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2979 = fma(_2192, _2967.z, fma(_2191, _2967.y, _2967.x * _2190)) + _2967.w;
                            _2980 = !((fma(_2192, _2948.z, fma(_2191, _2948.y, _2948.x * _2190)) + _2948.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2980)
                            {
                                float _3007 = _2872.x - _2190;
                                float _3008 = _2872.y - _2191;
                                float _3009 = _2872.z - _2192;
                                float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                                float _3013 = inversesqrt(_3010);
                                float _3014 = _3013 * _3007;
                                float _3015 = _3013 * _3008;
                                float _3016 = _3013 * _3009;
                                float _3020 = 1.0 - (_3010 / (_2873 * _2873));
                                float _4116 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3025 = sqrt(_3010) * _2888.w;
                                float _3027 = 1.39999997615814208984375 / (_3025 + 1.39999997615814208984375);
                                float _3028 = _3027 * _3027;
                                float _3031 = ((1.0 - _3028) * dot(vec3(_3014, _3015, _3016), vec3(_415, _418, _421))) + _3028;
                                float _3034 = _3025 * _3025;
                                float _3038 = (fma(_2192, _2916.z, fma(_2191, _2916.y, _2916.x * _2190)) + _2916.w) / _2979;
                                float _3039 = (fma(_2192, _2932.z, fma(_2191, _2932.y, _2932.x * _2190)) + _2932.w) / _2979;
                                float _3043 = 1.0 - dot(vec2(_3038, _3039), vec2(_3038, _3039));
                                float _4132 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3045 = _3044 * (((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3021) / ((_3034 * 0.699999988079071044921875) + 1.0));
                                float _3057 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                                float _3058 = 1.0 - _491;
                                float _3065 = sqrt(1.0 - ((1.0 - (_3058 * _3058)) * (1.0 - (_3057 * _3057))));
                                float _3066 = _3065 * _3065;
                                float _3067 = _3066 * _3066;
                                float _3068 = _3014 - _2484;
                                float _3069 = _3015 - _2485;
                                float _3070 = _3016 - _2486;
                                float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                                float _3078 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2484, (-0.0) - _2485, (-0.0) - _2486));
                                float _4143 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3081 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3082 = dot(vec3(_415, _418, _421), vec3(_3074 * _3068, _3074 * _3069, _3074 * _3070));
                                float _4154 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3085 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3089 = ((_3085 * _3085) * (_3067 + (-1.0))) + 1.0;
                                float _3090 = _3027 * _3066;
                                float _3091 = _3090 * _3090;
                                float _3097 = ((1.0 - _3091) * dot(vec3(_415, _418, _421), vec3(_3014, _3015, _3016))) + _3091;
                                float _4165 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3099 = 1.0 - _3066;
                                float _3109 = (0.5 / (((_3098 * ((_3081 * _3099) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_3098 * _3099) + _3066) * _3081))) * _3098;
                                float _4176 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3119 = (_3044 * _3021) * (((_3067 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_3089 * _3089) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3045 * _2888.z;
                                frontier_phi_85_pred_1 = _3045 * _2888.y;
                                frontier_phi_85_pred_2 = _3045 * _2888.x;
                                frontier_phi_85_pred_3 = _3119 * _2900.z;
                                frontier_phi_85_pred_4 = _3119 * _2900.y;
                                frontier_phi_85_pred_5 = _3119 * _2900.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3128 = frontier_phi_85_pred;
                            _3127 = frontier_phi_85_pred_1;
                            _3126 = frontier_phi_85_pred_2;
                            _3125 = frontier_phi_85_pred_3;
                            _3124 = frontier_phi_85_pred_4;
                            _3123 = frontier_phi_85_pred_5;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            if (_2847 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2847;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2832;
                        frontier_phi_79_pred_1 = _2831;
                        frontier_phi_79_pred_2 = _2830;
                        frontier_phi_79_pred_3 = _2829;
                        frontier_phi_79_pred_4 = _2828;
                        frontier_phi_79_pred_5 = _2827;
                    }
                    _2469 = frontier_phi_79_pred;
                    _2467 = frontier_phi_79_pred_1;
                    _2465 = frontier_phi_79_pred_2;
                    _2463 = frontier_phi_79_pred_3;
                    _2461 = frontier_phi_79_pred_4;
                    _2459 = frontier_phi_79_pred_5;
                    uint _2625 = _2624 + 1u;
                    if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2618 = _2459;
                        _2619 = _2461;
                        _2620 = _2463;
                        _2621 = _2465;
                        _2622 = _2467;
                        _2623 = _2469;
                        _2624 = _2625;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2465;
                frontier_phi_60_61_ladder_1 = _2469;
                frontier_phi_60_61_ladder_2 = _2467;
                frontier_phi_60_61_ladder_3 = _2463;
                frontier_phi_60_61_ladder_4 = _2461;
                frontier_phi_60_61_ladder_5 = _2459;
            }
            else
            {
                frontier_phi_60_61_ladder = _2344;
                frontier_phi_60_61_ladder_1 = _2348;
                frontier_phi_60_61_ladder_2 = _2346;
                frontier_phi_60_61_ladder_3 = _2342;
                frontier_phi_60_61_ladder_4 = _2340;
                frontier_phi_60_61_ladder_5 = _2338;
            }
            _2458 = frontier_phi_60_61_ladder_5;
            _2460 = frontier_phi_60_61_ladder_4;
            _2462 = frontier_phi_60_61_ladder_3;
            _2464 = frontier_phi_60_61_ladder;
            _2466 = frontier_phi_60_61_ladder_2;
            _2468 = frontier_phi_60_61_ladder_1;
        }
        float _2473 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        _2248 = (_2473 * _2464) + _1685;
        _2250 = (_2473 * _2466) + _1687;
        _2252 = (_2473 * _2468) + _1689;
        _2254 = ((_2458 * _460) * _2473) + _2030;
        _2256 = ((_2460 * _462) * _2473) + _2032;
        _2258 = ((_2462 * _463) * _2473) + _2034;
    }
    else
    {
        _2248 = _1685;
        _2250 = _1687;
        _2252 = _1689;
        _2254 = _2030;
        _2256 = _2032;
        _2258 = _2034;
    }
    float _4192 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4203 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4214 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4225 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2276 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2248 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _475))) + ((_2254 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2277 = ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2250 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _475))) + ((_2256 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2278 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2252 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _475))) + ((_2258 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _2283 = cbInstanceData._m0[_434 + 6u].w * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)));
    float _2288 = _394 / cbSceneParam._m0[86u].x;
    float _2289 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2303 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2305 = _2303.x;
    float _2306 = _2303.y;
    float _2307 = _2303.z;
    float _2308 = _2303.w;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2363 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2364 = _2363 / _315;
        float _2375 = _2364 * _366;
        float _2376 = _367 * _2364;
        float _2377 = (-0.0) - _2376;
        float _2378 = _2364 * _368;
        float _2380 = (cbSceneParam._m0[77u].w * _2377) / _2363;
        float _2381 = _2380 + cbSceneParam._m0[79u].w;
        float _2382 = cbSceneParam._m0[79u].w - _2376;
        float _2388 = sqrt(((_2375 * _2375) + (_2376 * _2376)) + (_2378 * _2378));
        float _2391 = (1.0 - (cbSceneParam._m0[77u].w / _2363)) * _2388;
        float _2396 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2398 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2575;
        if (abs((_2377 - _2380) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2575 = ((((_2381 > 0.0) ? exp2(_2396 * _2381) : (2.0 - exp2(_2398 * _2381))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2391;
        }
        else
        {
            float _2519 = 1.0 / cbSceneParam._m0[80u].x;
            float _2520 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : max(_2381, _2382));
            float _2521 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : min(_2381, _2382));
            float _2530 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : min(_2520, 0.0));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            _2575 = ((abs(_2388 / _2377) * cbSceneParam._m0[80u].y) * ((((_2530 - _2531) * 2.0) - ((exp2(_2396 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)))) - exp2(_2396 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0))))) * _2519)) - ((exp2(_2398 * _2530) - exp2(_2398 * _2531)) * _2519))) + (_2391 * cbSceneParam._m0[80u].z);
        }
        vec4 _2577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2288, _2289, 1.0), 0.0);
        float _2586 = exp2((_2575 * (-1.44269502162933349609375)) * (1.0 - _2577.w));
        float _2587 = log2(_2586);
        float _2603 = log2(_2308);
        _2400 = (exp2(_2603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].x)) * _2577.x) / cbSceneParam._m0[78u].x)) + _2305;
        _2402 = (exp2(_2603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].y)) * _2577.y) / cbSceneParam._m0[78u].y)) + _2306;
        _2404 = (exp2(_2603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].z)) * _2577.z) / cbSceneParam._m0[78u].z)) + _2307;
        _2406 = _2586 * _2308;
    }
    else
    {
        _2400 = _2305;
        _2402 = _2306;
        _2404 = _2307;
        _2406 = _2308;
    }
    bool _2613;
    vec4 _2416;
    vec4 _2438;
    float _2440;
    float _2444;
    float _2445;
    float _2446;
    float _2447;
    bool _2457;
    for (;;)
    {
        _2416 = cbMatDynParam._m0[0u];
        float _2418 = roundEven(_2416.y);
        bool _2419 = _2418 == 3.0;
        float _2420 = log2(_2406);
        float _2427 = exp2(_2420 * cbSceneParam._m0[78u].x) * _2276;
        float _2428 = exp2(_2420 * cbSceneParam._m0[78u].y) * _2277;
        float _2429 = exp2(_2420 * cbSceneParam._m0[78u].z) * _2278;
        float _2436 = _382 + (-0.5);
        _2438 = cbMtdParam._m0[1u];
        _2440 = _2438.y * _2436;
        float _2443 = (_2418 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2444 = _2443 * (_2419 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2400)));
        _2445 = _2443 * (_2419 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2402)));
        _2446 = _2443 * (_2419 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2404)));
        _2447 = _2436 * 0.999000012874603271484375;
        _2457 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2457)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2447) < 0.5)
            {
                _2613 = true;
                break;
            }
        }
        uint _2554 = _436 + uint(_2416.w);
        if ((cbInstanceData._m0[_2554].w < 1.0) && ((cbInstanceData._m0[_2554].w + _2447) < 0.5))
        {
            _2613 = true;
            break;
        }
        if ((_2440 + _240) < _2438.x)
        {
            _2613 = true;
            break;
        }
        _2613 = false;
        break;
    }
    float _2818;
    if (_2613)
    {
        discard_state = true;
        _2818 = 0.0;
    }
    else
    {
        _2818 = _2283;
    }
    SV_Target.x = _2444;
    SV_Target.y = _2445;
    SV_Target.z = _2446;
    SV_Target.w = _2818;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2283;
    discard_exit();
}


