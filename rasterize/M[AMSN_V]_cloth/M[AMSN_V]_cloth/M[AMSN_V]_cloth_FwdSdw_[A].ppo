#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _883;
float _3559;
float _3560;
float _3561;
float _3562;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = _238.w;
    float _245 = _238.x * cbMtdParam._m0[9u].x;
    float _246 = _238.y * cbMtdParam._m0[9u].y;
    float _247 = _238.z * cbMtdParam._m0[9u].z;
    float _248 = _244 * TEXCOORD_1.z;
    vec4 _264 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3571 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))));
    float _284 = fma(_281, _216, fma(_274, _208 * TANGENT.x, (_194 * _186) * _272));
    float _287 = fma(_281, _217, fma(_274, _208 * TANGENT.y, (_194 * _187) * _272));
    float _290 = fma(_281, _218, fma(_274, _208 * TANGENT.z, (_194 * _188) * _272));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _295 = _294 * _284;
    float _296 = _294 * _287;
    float _297 = _294 * _290;
    float _3582 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _298 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _299 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3615 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3626 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3637 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _303 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    vec4 _384 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _386 = _384.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _562 = sqrt(((_370 * _370) + (_371 * _371)) + (_372 * _372));
        float _568 = (cbMatDynParam._m0[5u].x * _562) + cbMatDynParam._m0[5u].y;
        float _3648 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _569 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _573 = (cbMatDynParam._m0[5u].z * _562) + cbMatDynParam._m0[5u].w;
        float _3659 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) - _569)) + _569) < ((_386 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _419 = fma(_297, cbSceneParam._m0[5u].z, fma(_296, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _295));
    float _422 = fma(_297, cbSceneParam._m0[6u].z, fma(_296, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _295));
    float _425 = fma(_297, cbSceneParam._m0[7u].z, fma(_296, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _295));
    uint _438 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = _438 + 9u;
    uint _441 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3670 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _453 = 1.0 - _303;
    float _454 = _450 * _453;
    float _455 = _451 * _453;
    float _456 = _452 * _453;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _303;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _303;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _303;
    float _464 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    vec4 _476 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _479 = _476.x * TEXCOORD_1.w;
    float _480 = dot(vec3(_295, _296, _297), vec3(_377, _378, _379));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _295) - _377;
    float _488 = (_483 * _296) - _378;
    float _489 = (_483 * _297) - _379;
    float _493 = abs(dot(vec3(_377, _378, _379), vec3(_295, _296, _297)));
    float _3703 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_299);
    float _508 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _514 = (1.0 - _508) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _515 = _508 * _495;
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_551, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _543));
        float _611 = fma(_551, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _543));
        float _615 = fma(_551, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _543));
        float _640 = _543 + _295;
        float _641 = _547 + _296;
        float _642 = _551 + _297;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_295, _296, _297), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3751 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_295, _296, _297), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3784 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_295, _296, _297), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3817 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _926 = fma(_551, cbModelParam._m0[30u].z, fma(_547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _543));
        float _930 = fma(_551, cbModelParam._m0[31u].z, fma(_547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _543));
        float _934 = fma(_551, cbModelParam._m0[32u].z, fma(_547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _543));
        float _957 = _543 + _295;
        float _958 = _547 + _296;
        float _959 = _551 + _297;
        float _969 = fma(_959, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957)) - _926;
        float _970 = fma(_959, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957)) - _930;
        float _971 = fma(_959, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957)) - _934;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_926 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_930 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[35u].z) + ((((((_934 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_295, _296, _297), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3880 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_295, _296, _297), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3913 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_295, _296, _297), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3946 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = _883;
        _1205 = _883;
        _1206 = _883;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _896)) + _896;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _897)) + _897;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _487 * 0.5;
    float _1264 = _488 * 0.5;
    float _1265 = _489 * 0.5;
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_882, _886, _889, _892));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_884, _887, _890, _893));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_885, _888, _891, _894));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1331 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _299);
    float _1332 = isnan(_1331) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1331 : min(cbModelParam._m0[25u].z, _1331));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1381 = fma(_551, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543)) + cbModelParam._m0[13u].w;
        float _1385 = fma(_551, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543)) + cbModelParam._m0[14u].w;
        float _1389 = fma(_551, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543)) + cbModelParam._m0[15u].w;
        float _1392 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1395 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1398 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1426;
        if (_1392 > 0.0)
        {
            _1426 = abs((1.0 - _1381) / _1392);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1381 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1426 = frontier_phi_19_17_ladder;
        }
        float _1602;
        if (_1395 > 0.0)
        {
            _1602 = abs((1.0 - _1385) / _1395);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1385 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1602 = frontier_phi_28_24_ladder;
        }
        float _1898;
        if (_1398 > 0.0)
        {
            _1898 = abs((1.0 - _1389) / _1398);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1389 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1898 = frontier_phi_40_35_ladder;
        }
        float _1900 = isnan(_1602) ? _1426 : (isnan(_1426) ? _1602 : min(_1426, _1602));
        float _1901 = isnan(_1898) ? _1900 : (isnan(_1900) ? _1898 : min(_1900, _1898));
        float _1905 = (_1901 * _1392) + _1381;
        float _1906 = (_1901 * _1395) + _1385;
        float _1907 = (_1901 * _1398) + _1389;
        float _1908 = _1901 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1908;
        float _1912 = _1908 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 > _1912) || ((_1906 < _1910) || ((_1905 < _1910) || (_1905 > _1912))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1907, cbModelParam._m0[9u].z, fma(_1906, cbModelParam._m0[9u].y, _1905 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1907, cbModelParam._m0[10u].z, fma(_1906, cbModelParam._m0[10u].y, _1905 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1907, cbModelParam._m0[11u].z, fma(_1906, cbModelParam._m0[11u].y, _1905 * cbModelParam._m0[11u].x))), _1332);
            frontier_phi_18_40_ladder = _2052.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2052.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2052.x * cbModelParam._m0[1u].y;
        }
        _1414 = frontier_phi_18_40_ladder_2;
        _1416 = frontier_phi_18_40_ladder_1;
        _1418 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1332);
        _1414 = _1402.x * cbModelParam._m0[1u].y;
        _1416 = _1402.y * cbModelParam._m0[1u].y;
        _1418 = _1402.z * cbModelParam._m0[1u].y;
    }
    float _1422 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _299);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1422 : min(cbModelParam._m0[25u].w, _1422));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1480 = fma(_551, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543)) + cbModelParam._m0[21u].w;
        float _1484 = fma(_551, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543)) + cbModelParam._m0[22u].w;
        float _1488 = fma(_551, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543)) + cbModelParam._m0[23u].w;
        float _1491 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1494 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1497 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1607;
        if (_1491 > 0.0)
        {
            _1607 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1607 = frontier_phi_30_26_ladder;
        }
        float _1925;
        if (_1494 > 0.0)
        {
            _1925 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1925 = frontier_phi_42_37_ladder;
        }
        float _2263;
        if (_1497 > 0.0)
        {
            _2263 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2263 = frontier_phi_52_49_ladder;
        }
        float _2265 = isnan(_1925) ? _1607 : (isnan(_1607) ? _1925 : min(_1607, _1925));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1491) + _1480;
        float _2271 = (_2266 * _1494) + _1484;
        float _2272 = (_2266 * _1497) + _1488;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2273;
        float _2276 = _2273 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2272 > _2276) || ((_2272 < _2274) || ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 < _2274) || (_2270 > _2276))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2272, cbModelParam._m0[17u].z, fma(_2271, cbModelParam._m0[17u].y, _2270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2272, cbModelParam._m0[18u].z, fma(_2271, cbModelParam._m0[18u].y, _2270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2272, cbModelParam._m0[19u].z, fma(_2271, cbModelParam._m0[19u].y, _2270 * cbModelParam._m0[19u].x))), _1423);
            frontier_phi_27_52_ladder = _2394.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2394.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2394.x * cbModelParam._m0[1u].z;
        }
        _1516 = frontier_phi_27_52_ladder_2;
        _1518 = frontier_phi_27_52_ladder_1;
        _1520 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1423);
        _1516 = _1500.x * cbModelParam._m0[1u].z;
        _1518 = _1500.y * cbModelParam._m0[1u].z;
        _1520 = _1500.z * cbModelParam._m0[1u].z;
    }
    float _1533 = (((_514 * _464) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_514 * _466) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1537 = (((_514 * _467) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1540 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, _1533 * cbSceneParam._m0[91u].x));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1589 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1594 = _1581 / _1593;
    float _1595 = _1585 / _1593;
    float _1596 = _1589 / _1593;
    float _1743;
    float _1744;
    float _1745;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1623 = ((uint(_1596 > cbSceneParam._m0[59u].y) + uint(_1596 > cbSceneParam._m0[59u].x)) + uint(_1596 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1624 = _1623 + 43u;
        uint _1632 = _1623 + 44u;
        uint _1640 = _1623 + 45u;
        uint _1648 = _1623 + 46u;
        float _1659 = fma(_1593, cbSceneParam._m0[_1624].w, fma(_1589, cbSceneParam._m0[_1624].z, fma(_1585, cbSceneParam._m0[_1624].y, _1581 * cbSceneParam._m0[_1624].x)));
        float _1663 = fma(_1593, cbSceneParam._m0[_1632].w, fma(_1589, cbSceneParam._m0[_1632].z, fma(_1585, cbSceneParam._m0[_1632].y, _1581 * cbSceneParam._m0[_1632].x)));
        float _1671 = fma(_1593, cbSceneParam._m0[_1648].w, fma(_1589, cbSceneParam._m0[_1648].z, fma(_1585, cbSceneParam._m0[_1648].y, _1581 * cbSceneParam._m0[_1648].x)));
        float _1676 = cbSceneParam._m0[33u].z * _1671;
        float _1678 = cbSceneParam._m0[33u].w * _1671;
        float _1681 = fma(_1593, cbSceneParam._m0[_1640].w, fma(_1589, cbSceneParam._m0[_1640].z, fma(_1585, cbSceneParam._m0[_1640].y, _1581 * cbSceneParam._m0[_1640].x))) / _1671;
        float _1729 = (cbSceneParam._m0[33u].x - sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596))) * cbSceneParam._m0[33u].y;
        float _4072 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1736 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1676 + _1659) / _1671, (_1678 + _1663) / _1671), _1681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1678 + _1659) / _1671, (_1663 - _1676) / _1671), _1681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 - _1676) / _1671, (_1663 - _1678) / _1671), _1681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 - _1678) / _1671, (_1676 + _1663) / _1671), _1681), 0.0)).x), vec4(0.25)));
        _1743 = 1.0 - (_1736 * cbSceneParam._m0[34u].x);
        _1744 = 1.0 - (_1736 * cbSceneParam._m0[34u].y);
        _1745 = 1.0 - (_1736 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1743 = 1.0;
        _1744 = 1.0;
        _1745 = 1.0;
    }
    float _1809;
    float _1811;
    float _1813;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1797 = fma(_1593, cbSceneParam._m0[63u].w, fma(_1589, cbSceneParam._m0[63u].z, fma(_1585, cbSceneParam._m0[63u].y, _1581 * cbSceneParam._m0[63u].x)));
        float _1798 = fma(_1593, cbSceneParam._m0[60u].w, fma(_1589, cbSceneParam._m0[60u].z, fma(_1585, cbSceneParam._m0[60u].y, _1581 * cbSceneParam._m0[60u].x))) / _1797;
        float _1799 = fma(_1593, cbSceneParam._m0[61u].w, fma(_1589, cbSceneParam._m0[61u].z, fma(_1585, cbSceneParam._m0[61u].y, _1581 * cbSceneParam._m0[61u].x))) / _1797;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1798 >= cbSceneParam._m0[64u].x) && (_1799 >= cbSceneParam._m0[64u].y)) && (_1798 <= cbSceneParam._m0[64u].z)) && (_1799 <= cbSceneParam._m0[64u].w))
        {
            float _1938 = fma(_1593, cbSceneParam._m0[62u].w, fma(_1589, cbSceneParam._m0[62u].z, fma(_1585, cbSceneParam._m0[62u].y, _1581 * cbSceneParam._m0[62u].x))) / _1797;
            float _1942 = isnan(cbSceneParam._m0[41u].w) ? _1938 : (isnan(_1938) ? cbSceneParam._m0[41u].w : max(_1938, cbSceneParam._m0[41u].w));
            float _1985 = (cbSceneParam._m0[33u].x - sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596))) * cbSceneParam._m0[33u].y;
            float _4088 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
            float _1992 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1798, cbSceneParam._m0[33u].w + _1799), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1798, _1799 - cbSceneParam._m0[33u].z), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1798 - cbSceneParam._m0[33u].z, _1799 - cbSceneParam._m0[33u].w), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1798 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1799), _1942), 0.0)).x), vec4(0.25)));
            float _1996 = 1.0 - (_1992 * cbSceneParam._m0[34u].x);
            float _1997 = 1.0 - (_1992 * cbSceneParam._m0[34u].y);
            float _1998 = 1.0 - (_1992 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1997) ? _1744 : (isnan(_1744) ? _1997 : min(_1744, _1997));
            frontier_phi_39_38_ladder_1 = isnan(_1996) ? _1743 : (isnan(_1743) ? _1996 : min(_1743, _1996));
            frontier_phi_39_38_ladder_2 = isnan(_1998) ? _1745 : (isnan(_1745) ? _1998 : min(_1745, _1998));
        }
        else
        {
            frontier_phi_39_38_ladder = _1744;
            frontier_phi_39_38_ladder_1 = _1743;
            frontier_phi_39_38_ladder_2 = _1745;
        }
        _1809 = frontier_phi_39_38_ladder_1;
        _1811 = frontier_phi_39_38_ladder;
        _1813 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1809 = _1743;
        _1811 = _1744;
        _1813 = _1745;
    }
    uvec4 _1818 = floatBitsToUint(cbInstanceData._m0[_438 + 5u]);
    uint _1820 = _1818.x * 14u;
    uint _1821 = _1820 + 13u;
    float _1828 = _479 + (-1.0);
    float _1833 = (cbLight._m0[_1821].x * _1828) + 1.0;
    float _1834 = (cbLight._m0[_1821].y * _1828) + 1.0;
    float _1835 = (cbLight._m0[_1821].z * _1828) + 1.0;
    float _1836 = (cbLight._m0[_1821].w * _1828) + 1.0;
    uint _1837 = _1820 + 5u;
    float _1843 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1847 = _1820 + 4u;
    float _1857 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1861 = _1820 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_295, _296, _297));
    float _1875 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_295, _296, _297));
    float _4124 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _4135 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1880 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1882 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1889 = ((cbLight._m0[_1837].x * _1843) * _1882) + (((cbLight._m0[_1847].x * _1809) * _1857) * _1880);
    float _1890 = ((_1843 * cbLight._m0[_1837].y) * _1882) + (((cbLight._m0[_1847].y * _1811) * _1857) * _1880);
    float _1891 = ((_1843 * cbLight._m0[_1837].z) * _1882) + (((cbLight._m0[_1847].z * _1813) * _1857) * _1880);
    uvec4 _1895 = floatBitsToUint(cbLight._m0[_1820 + 12u]);
    bool _1897 = _1895.x == 0u;
    float _1999;
    float _2001;
    float _2003;
    if (_1897)
    {
        _1999 = _1889;
        _2001 = _1890;
        _2003 = _1891;
    }
    else
    {
        uint _2007 = _1820 + 6u;
        float _2023 = (dot(vec3(cbLight._m0[_1820 + 2u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _2024 = _2023 * _2023;
        float _4146 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2026 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1999 = (((cbLight._m0[_2007].x * 0.3183098733425140380859375) * _2025) * _2026) + _1889;
        _2001 = (((cbLight._m0[_2007].y * 0.3183098733425140380859375) * _2025) * _2026) + _1890;
        _2003 = (((cbLight._m0[_2007].z * 0.3183098733425140380859375) * _2025) * _2026) + _1891;
    }
    bool _2006 = _1895.y == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_2006)
    {
        _2061 = _1999;
        _2063 = _2001;
        _2065 = _2003;
    }
    else
    {
        uint _2234 = _1820 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1820 + 3u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4162 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2253 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2061 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _1999;
        _2063 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2001;
        _2065 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2003;
    }
    uint _2068 = _1820 + 8u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _299) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1820].x + _377;
    float _2084 = cbLight._m0[_1820].y + _378;
    float _2085 = cbLight._m0[_1820].z + _379;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1820].xyz));
    float _4178 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _2097 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2098 = dot(vec3(_295, _296, _297), vec3(_2090, _2091, _2092));
    float _4200 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_2090, _2091, _2092));
    float _4211 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2082 * _2082;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2119 = 0.959999978542327880859375 - _461;
    float _2121 = 0.959999978542327880859375 - _462;
    float _2122 = 0.959999978542327880859375 - _463;
    float _2129 = 1.0 - _2082;
    float _2140 = (0.5 / (((_2097 * ((_2096 * _2129) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2129) + _2082) * _2096))) * _2096;
    float _4222 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    uint _2156 = _1820 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _299) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1861].x + _377;
    float _2170 = cbLight._m0[_1861].y + _378;
    float _2171 = cbLight._m0[_1861].z + _379;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1861].xyz));
    float _4233 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2183 = dot(vec3(_295, _296, _297), vec3(_2176, _2177, _2178));
    float _4244 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2176, _2177, _2178));
    float _4255 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2209 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2097 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2209) + _2168) * _2182))) * _2182;
    float _4266 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2231 = (((((_2202 * _2119) + _464) * cbLight._m0[_2156].x) * _2221) * _1843) + ((((cbLight._m0[_2068].x * _1809) * ((_2118 * _2119) + _464)) * _2142) * _1857);
    float _2232 = (((((_2202 * _2121) + _466) * cbLight._m0[_2156].y) * _2221) * _1843) + ((((cbLight._m0[_2068].y * _1811) * ((_2118 * _2121) + _466)) * _2142) * _1857);
    float _2233 = (((((_2202 * _2122) + _467) * cbLight._m0[_2156].z) * _2221) * _1843) + ((((cbLight._m0[_2068].z * _1813) * ((_2118 * _2122) + _467)) * _2142) * _1857);
    float _2289;
    float _2291;
    float _2293;
    if (_1897)
    {
        _2289 = _2231;
        _2291 = _2232;
        _2293 = _2233;
    }
    else
    {
        uint _2295 = _1820 + 2u;
        uint _2299 = _1820 + 10u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _299) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _377;
        float _2316 = cbLight._m0[_2295].y + _378;
        float _2317 = cbLight._m0[_2295].z + _379;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2295].xyz));
        float _4277 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2329 = dot(vec3(_295, _296, _297), vec3(_2322, _2323, _2324));
        float _4288 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4299 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2355 = 1.0 - _2314;
        float _2365 = (0.5 / (((_2097 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2355) + _2314) * _2328))) * _2328;
        float _4310 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2367 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2368 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2289 = (((((_2348 * _2119) + _464) * cbLight._m0[_2299].x) * _2367) * _2368) + _2231;
        _2291 = (((((_2348 * _2121) + _466) * cbLight._m0[_2299].y) * _2367) * _2368) + _2232;
        _2293 = (((((_2348 * _2122) + _467) * cbLight._m0[_2299].z) * _2367) * _2368) + _2233;
    }
    float _2399;
    float _2401;
    float _2403;
    if (_2006)
    {
        _2399 = _2289;
        _2401 = _2291;
        _2403 = _2293;
    }
    else
    {
        uint _2410 = _1820 + 3u;
        uint _2414 = _1820 + 11u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _299) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _377;
        float _2431 = cbLight._m0[_2410].y + _378;
        float _2432 = cbLight._m0[_2410].z + _379;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2410].xyz));
        float _4326 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2444 = dot(vec3(_295, _296, _297), vec3(_2437, _2438, _2439));
        float _4337 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4348 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2470 = 1.0 - _2429;
        float _2480 = (0.5 / (((_2097 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2470) + _2429) * _2443))) * _2443;
        float _4359 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2482 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2483 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2399 = (((((_2463 * _2119) + _464) * cbLight._m0[_2414].x) * _2482) * _2483) + _2289;
        _2401 = (((((_2463 * _2121) + _466) * cbLight._m0[_2414].y) * _2482) * _2483) + _2291;
        _2403 = (((((_2463 * _2122) + _467) * cbLight._m0[_2414].z) * _2482) * _2483) + _2293;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1818.y == 0u)
    {
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.x;
        uint _2516 = uint((float(_2504.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2505))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2505)));
        float _2526 = (log2(_1596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2527 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        uint _2530 = uint(isnan(14.0) ? _2527 : (isnan(_2527) ? 14.0 : min(_2527, 14.0)));
        uvec4 _2535 = texelFetch(g_lightClusterGridBuffer, int(((_2530 << 2u) + (_2516 << 6u)) >> 2u));
        uint _2536 = _2535.x;
        uint _2537 = _2504.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2537 >> 4u) & 15u)) + 4294967295u) & _2536) == 0u) || ((_2537 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2785)
                {
                    frontier_phi_73_pred = _2774;
                    frontier_phi_73_pred_1 = _2773;
                    frontier_phi_73_pred_2 = _2772;
                    frontier_phi_73_pred_3 = _2771;
                    frontier_phi_73_pred_4 = _2770;
                    frontier_phi_73_pred_5 = _2769;
                }
                else
                {
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    uint _2920;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2784;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    for (;;)
                    {
                        uint _2924 = uint(findLSB(_2920)) + (_2775 << 5u);
                        uint _2921 = (_2920 + 4294967295u) & _2920;
                        uint _2926 = _2924 * 48u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2946 = (_2924 * 48u) + 4u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2965 = (_2924 * 48u) + 8u;
                        vec3 _2976 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x));
                        float _2980 = _2940.x - _1594;
                        float _2981 = _2940.y - _1595;
                        float _2982 = _2940.z - _1596;
                        float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                        float _2986 = inversesqrt(_2983);
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2990 = dot(vec3(_419, _422, _425), vec3(_2987, _2988, _2989));
                        float _2995 = 1.0 - (_2983 * _2940.w);
                        float _4385 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _2997 = sqrt(_2983) * _2959.w;
                        float _3000 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2990) + _3001;
                        float _3007 = _2997 * _2997;
                        float _3011 = ((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2996) / ((_3007 * 0.699999988079071044921875) + 1.0);
                        float _3015 = (-0.0) - _1594;
                        float _3016 = (-0.0) - _1595;
                        float _3017 = (-0.0) - _1596;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3031 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _495;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3022 + _2987;
                        float _3043 = _3023 + _2988;
                        float _3044 = _3024 + _2989;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_419, _422, _425), vec3(_3022, _3023, _3024));
                        float _4401 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3056 = dot(vec3(_419, _422, _425), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4412 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _3000 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2990) + _3065;
                        float _4423 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4434 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3063 * _3063) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2996;
                        _2844 = (_3011 * _2959.x) + _2917;
                        _2845 = (_3011 * _2959.y) + _2918;
                        _2846 = (_3011 * _2959.z) + _2919;
                        _2841 = (_3091 * _2976.x) + _2914;
                        _2842 = (_3091 * _2976.y) + _2915;
                        _2843 = (_3091 * _2976.z) + _2916;
                        if (_2921 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2921;
                        }
                    }
                    frontier_phi_73_pred = _2846;
                    frontier_phi_73_pred_1 = _2845;
                    frontier_phi_73_pred_2 = _2844;
                    frontier_phi_73_pred_3 = _2843;
                    frontier_phi_73_pred_4 = _2842;
                    frontier_phi_73_pred_5 = _2841;
                }
                _2628 = frontier_phi_73_pred;
                _2626 = frontier_phi_73_pred_1;
                _2624 = frontier_phi_73_pred_2;
                _2622 = frontier_phi_73_pred_3;
                _2620 = frontier_phi_73_pred_4;
                _2618 = frontier_phi_73_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2618;
                    _2770 = _2620;
                    _2771 = _2622;
                    _2772 = _2624;
                    _2773 = _2626;
                    _2774 = _2628;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2634) & _2536) == 0u)
        {
            _2737 = _2617;
            _2739 = _2619;
            _2741 = _2621;
            _2743 = _2623;
            _2745 = _2625;
            _2747 = _2627;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596)));
            float _2763 = _2762 * _1594;
            float _2764 = _2762 * _1595;
            float _2765 = _2762 * _1596;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2897 = _2617;
                float _2898 = _2619;
                float _2899 = _2621;
                float _2900 = _2623;
                float _2901 = _2625;
                float _2902 = _2627;
                uint _2903 = _2634;
                uint _2912;
                bool _2913;
                for (;;)
                {
                    _2912 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                    _2913 = _2912 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2913)
                    {
                        frontier_phi_84_pred = _2901;
                        frontier_phi_84_pred_1 = _2900;
                        frontier_phi_84_pred_2 = _2899;
                        frontier_phi_84_pred_3 = _2898;
                        frontier_phi_84_pred_4 = _2897;
                        frontier_phi_84_pred_5 = _2902;
                    }
                    else
                    {
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3118 = _2897;
                        float _3119 = _2898;
                        float _3120 = _2899;
                        float _3121 = _2900;
                        float _3122 = _2901;
                        float _3123 = _2902;
                        uint _3124 = _2912;
                        uint _3125;
                        vec4 _3150;
                        float _3151;
                        vec4 _3166;
                        vec3 _3178;
                        vec4 _3194;
                        vec4 _3210;
                        float _3257;
                        bool _3258;
                        for (;;)
                        {
                            uint _3135 = ((_2903 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3124));
                            _3125 = (_3124 + 4294967295u) & _3124;
                            uint _3137 = _3135 * 40u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3151 = _3150.w;
                            uint _3153 = (_3135 * 40u) + 4u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3135 * 40u) + 8u;
                            _3178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x));
                            uint _3181 = (_3135 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3197 = (_3135 * 40u) + 20u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3213 = (_3135 * 40u) + 24u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3232 = (_3135 * 40u) + 28u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3257 = fma(_1596, _3245.z, fma(_1595, _3245.y, _3245.x * _1594)) + _3245.w;
                            _3258 = !((fma(_1596, _3226.z, fma(_1595, _3226.y, _3226.x * _1594)) + _3226.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3258)
                            {
                                float _3285 = _3150.x - _1594;
                                float _3286 = _3150.y - _1595;
                                float _3287 = _3150.z - _1596;
                                float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                                float _3291 = inversesqrt(_3288);
                                float _3292 = _3291 * _3285;
                                float _3293 = _3291 * _3286;
                                float _3294 = _3291 * _3287;
                                float _3298 = 1.0 - (_3288 / (_3151 * _3151));
                                float _4445 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3303 = sqrt(_3288) * _3166.w;
                                float _3305 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                                float _3306 = _3305 * _3305;
                                float _3309 = ((1.0 - _3306) * dot(vec3(_3292, _3293, _3294), vec3(_419, _422, _425))) + _3306;
                                float _3312 = _3303 * _3303;
                                float _3316 = (fma(_1596, _3194.z, fma(_1595, _3194.y, _3194.x * _1594)) + _3194.w) / _3257;
                                float _3317 = (fma(_1596, _3210.z, fma(_1595, _3210.y, _3210.x * _1594)) + _3210.w) / _3257;
                                float _3321 = 1.0 - dot(vec2(_3316, _3317), vec2(_3316, _3317));
                                float _4461 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3322 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3323 = _3322 * (((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3299) / ((_3312 * 0.699999988079071044921875) + 1.0));
                                float _3335 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                                float _3336 = 1.0 - _495;
                                float _3343 = sqrt(1.0 - ((1.0 - (_3336 * _3336)) * (1.0 - (_3335 * _3335))));
                                float _3344 = _3343 * _3343;
                                float _3345 = _3344 * _3344;
                                float _3346 = _3292 - _2763;
                                float _3347 = _3293 - _2764;
                                float _3348 = _3294 - _2765;
                                float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                                float _3356 = dot(vec3(_419, _422, _425), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4472 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3360 = dot(vec3(_419, _422, _425), vec3(_3352 * _3346, _3352 * _3347, _3352 * _3348));
                                float _4483 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3367 = ((_3363 * _3363) * (_3345 + (-1.0))) + 1.0;
                                float _3368 = _3305 * _3344;
                                float _3369 = _3368 * _3368;
                                float _3375 = ((1.0 - _3369) * dot(vec3(_419, _422, _425), vec3(_3292, _3293, _3294))) + _3369;
                                float _4494 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3377 = 1.0 - _3344;
                                float _3387 = (0.5 / (((_3376 * ((_3359 * _3377) + _3344)) + 9.9999999392252902907785028219223e-09) + (((_3376 * _3377) + _3344) * _3359))) * _3376;
                                float _4505 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3397 = (_3322 * _3299) * (((_3345 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3367 * _3367) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3323 * _3166.y;
                                frontier_phi_90_pred_1 = _3323 * _3166.x;
                                frontier_phi_90_pred_2 = _3397 * _3178.z;
                                frontier_phi_90_pred_3 = _3397 * _3178.y;
                                frontier_phi_90_pred_4 = _3397 * _3178.x;
                                frontier_phi_90_pred_5 = _3323 * _3166.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3405 = frontier_phi_90_pred;
                            _3404 = frontier_phi_90_pred_1;
                            _3403 = frontier_phi_90_pred_2;
                            _3402 = frontier_phi_90_pred_3;
                            _3401 = frontier_phi_90_pred_4;
                            _3406 = frontier_phi_90_pred_5;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            _3105 = _3401 + _3118;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            if (_3125 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3125;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3109;
                        frontier_phi_84_pred_1 = _3108;
                        frontier_phi_84_pred_2 = _3107;
                        frontier_phi_84_pred_3 = _3106;
                        frontier_phi_84_pred_4 = _3105;
                        frontier_phi_84_pred_5 = _3110;
                    }
                    _2746 = frontier_phi_84_pred;
                    _2744 = frontier_phi_84_pred_1;
                    _2742 = frontier_phi_84_pred_2;
                    _2740 = frontier_phi_84_pred_3;
                    _2738 = frontier_phi_84_pred_4;
                    _2748 = frontier_phi_84_pred_5;
                    uint _2904 = _2903 + 1u;
                    if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2897 = _2738;
                        _2898 = _2740;
                        _2899 = _2742;
                        _2900 = _2744;
                        _2901 = _2746;
                        _2902 = _2748;
                        _2903 = _2904;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2748;
                frontier_phi_65_66_ladder_1 = _2744;
                frontier_phi_65_66_ladder_2 = _2746;
                frontier_phi_65_66_ladder_3 = _2740;
                frontier_phi_65_66_ladder_4 = _2738;
                frontier_phi_65_66_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_65_66_ladder = _2627;
                frontier_phi_65_66_ladder_1 = _2623;
                frontier_phi_65_66_ladder_2 = _2625;
                frontier_phi_65_66_ladder_3 = _2619;
                frontier_phi_65_66_ladder_4 = _2617;
                frontier_phi_65_66_ladder_5 = _2621;
            }
            _2737 = frontier_phi_65_66_ladder_4;
            _2739 = frontier_phi_65_66_ladder_3;
            _2741 = frontier_phi_65_66_ladder_5;
            _2743 = frontier_phi_65_66_ladder_1;
            _2745 = frontier_phi_65_66_ladder_2;
            _2747 = frontier_phi_65_66_ladder;
        }
        float _2752 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _2548 = (_2752 * _2743) + _2061;
        _2550 = (_2752 * _2745) + _2063;
        _2552 = (_2752 * _2747) + _2065;
        _2554 = ((_2737 * _464) * _2752) + _2399;
        _2556 = ((_2739 * _466) * _2752) + _2401;
        _2558 = ((_2741 * _467) * _2752) + _2403;
    }
    else
    {
        _2548 = _2061;
        _2550 = _2063;
        _2552 = _2065;
        _2554 = _2399;
        _2556 = _2401;
        _2558 = _2403;
    }
    float _4521 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4532 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4543 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4554 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _2576 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2548 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _479))) + ((_2554 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2550 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _479))) + ((_2556 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2578 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2552 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _479))) + ((_2558 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2583 = cbInstanceData._m0[_438 + 6u].w * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)));
    float _2588 = _398 / cbSceneParam._m0[86u].x;
    float _2589 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2603 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2605 = _2603.x;
    float _2606 = _2603.y;
    float _2607 = _2603.z;
    float _2608 = _2603.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2643 = _2642 / _319;
        float _2654 = _2643 * _370;
        float _2655 = _371 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2657 = _2643 * _372;
        float _2659 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2655;
        float _2667 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2854;
        if (abs((_2656 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2854 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2800 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2854 = ((abs(_2667 / _2656) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2677 * _2809) - exp2(_2677 * _2810)) * _2798))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, 1.0), 0.0);
        float _2865 = exp2((_2854 * (-1.44269502162933349609375)) * (1.0 - _2856.w));
        float _2866 = log2(_2865);
        float _2882 = log2(_2608);
        _2679 = (exp2(_2882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].x)) * _2856.x) / cbSceneParam._m0[78u].x)) + _2605;
        _2681 = (exp2(_2882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].y)) * _2856.y) / cbSceneParam._m0[78u].y)) + _2606;
        _2683 = (exp2(_2882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].z)) * _2856.z) / cbSceneParam._m0[78u].z)) + _2607;
        _2685 = _2865 * _2608;
    }
    else
    {
        _2679 = _2605;
        _2681 = _2606;
        _2683 = _2607;
        _2685 = _2608;
    }
    bool _2892;
    vec4 _2695;
    vec4 _2717;
    float _2719;
    float _2723;
    float _2724;
    float _2725;
    float _2726;
    bool _2736;
    for (;;)
    {
        _2695 = cbMatDynParam._m0[0u];
        float _2697 = roundEven(_2695.y);
        bool _2698 = _2697 == 3.0;
        float _2699 = log2(_2685);
        float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * _2576;
        float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * _2577;
        float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * _2578;
        float _2715 = _386 + (-0.5);
        _2717 = cbMtdParam._m0[1u];
        _2719 = _2717.y * _2715;
        float _2722 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2723 = _2722 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
        _2724 = _2722 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
        _2725 = _2722 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
        _2726 = _2715 * 0.999000012874603271484375;
        _2736 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2736)
        {
            if ((cbInstanceData._m0[_438 + 7u].x + _2726) < 0.5)
            {
                _2892 = true;
                break;
            }
        }
        uint _2833 = _440 + uint(_2695.w);
        if ((cbInstanceData._m0[_2833].w < 1.0) && ((cbInstanceData._m0[_2833].w + _2726) < 0.5))
        {
            _2892 = true;
            break;
        }
        if ((_2719 + _244) < _2717.x)
        {
            _2892 = true;
            break;
        }
        _2892 = false;
        break;
    }
    float _3096;
    if (_2892)
    {
        discard_state = true;
        _3096 = 0.0;
    }
    else
    {
        _3096 = _2583;
    }
    SV_Target.x = _2723;
    SV_Target.y = _2724;
    SV_Target.z = _2725;
    SV_Target.w = _3096;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2583;
    discard_exit();
}


