#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _881;
float _3298;
float _3299;
float _3300;
float _3301;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.w;
    float _243 = _236.x * cbMtdParam._m0[9u].x;
    float _244 = _236.y * cbMtdParam._m0[9u].y;
    float _245 = _236.z * cbMtdParam._m0[9u].z;
    float _246 = _242 * TEXCOORD_1.z;
    vec4 _262 = texture(sampler2D(M_AMSN_V_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3310 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))));
    float _282 = fma(_279, _214, fma(_272, _206 * TANGENT.x, (_192 * _184) * _270));
    float _285 = fma(_279, _215, fma(_272, _206 * TANGENT.y, (_192 * _185) * _270));
    float _288 = fma(_279, _216, fma(_272, _206 * TANGENT.z, (_192 * _186) * _270));
    float _292 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    float _293 = _292 * _282;
    float _294 = _292 * _285;
    float _295 = _292 * _288;
    float _3321 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _296 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _297 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3354 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3365 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3376 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _301 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _560 = sqrt(((_368 * _368) + (_369 * _369)) + (_370 * _370));
        float _566 = (cbMatDynParam._m0[5u].x * _560) + cbMatDynParam._m0[5u].y;
        float _3387 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _567 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _571 = (cbMatDynParam._m0[5u].z * _560) + cbMatDynParam._m0[5u].w;
        float _3398 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) - _567)) + _567) < ((_384 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_295, cbSceneParam._m0[5u].z, fma(_294, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _293));
    float _420 = fma(_295, cbSceneParam._m0[6u].z, fma(_294, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _293));
    float _423 = fma(_295, cbSceneParam._m0[7u].z, fma(_294, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _293));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3409 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _451 = 1.0 - _301;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _301;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _301;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _301;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _477 = _474.x * TEXCOORD_1.w;
    float _478 = dot(vec3(_293, _294, _295), vec3(_375, _376, _377));
    float _481 = _478 * 2.0;
    float _485 = (_481 * _293) - _375;
    float _486 = (_481 * _294) - _376;
    float _487 = (_481 * _295) - _377;
    float _491 = abs(dot(vec3(_375, _376, _377), vec3(_293, _294, _295)));
    float _3442 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_297);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _512 = (1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _513 = _506 * _493;
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _605 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _609 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _613 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _638 = _541 + _293;
        float _639 = _545 + _294;
        float _640 = _549 + _295;
        float _650 = fma(_640, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638)) - _605;
        float _651 = fma(_640, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638)) - _609;
        float _652 = fma(_640, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638)) - _613;
        float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
        float _669 = ((_656 * _650) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_605 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_656 * _651) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_609 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_656 * _652) / cbModelParam._m0[34u].z) + ((((((_613 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_669, _670, _671), 0.0);
        float _708 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_674.x + (-0.5));
        float _710 = _708 * (_674.y + (-0.5));
        float _711 = _708 * (_674.z + (-0.5));
        float _718 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_681.x + (-0.5));
        float _720 = _718 * (_681.y + (-0.5));
        float _721 = _718 * (_681.z + (-0.5));
        float _728 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_688.x + (-0.5));
        float _730 = _728 * (_688.y + (-0.5));
        float _731 = _728 * (_688.z + (-0.5));
        float _738 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_695.x + (-0.5));
        float _740 = _738 * (_695.y + (-0.5));
        float _741 = _738 * (_695.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(_293, _294, _295), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3490 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_293, _294, _295), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3523 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(_293, _294, _295), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3556 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _924 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _928 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _932 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _955 = _541 + _293;
        float _956 = _545 + _294;
        float _957 = _549 + _295;
        float _967 = fma(_957, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955)) - _924;
        float _968 = fma(_957, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955)) - _928;
        float _969 = fma(_957, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955)) - _932;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_924 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_928 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[35u].z) + ((((((_932 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1023 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_990.x + (-0.5));
        float _1025 = _1023 * (_990.y + (-0.5));
        float _1026 = _1023 * (_990.z + (-0.5));
        float _1033 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_997.x + (-0.5));
        float _1035 = _1033 * (_997.y + (-0.5));
        float _1036 = _1033 * (_997.z + (-0.5));
        float _1043 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1004.x + (-0.5));
        float _1045 = _1043 * (_1004.y + (-0.5));
        float _1046 = _1043 * (_1004.z + (-0.5));
        float _1053 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1011.x + (-0.5));
        float _1055 = _1053 * (_1011.y + (-0.5));
        float _1056 = _1053 * (_1011.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_293, _294, _295), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3619 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1087 + 1.0))) + _1092) * _1057;
        float _1102 = _1025 * 0.5;
        float _1103 = _1035 * 0.5;
        float _1104 = _1045 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_293, _294, _295), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3652 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1129 + 1.0))) + _1134) * _1058;
        float _1144 = _1026 * 0.5;
        float _1145 = _1036 * 0.5;
        float _1146 = _1046 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_293, _294, _295), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3685 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1171 + 1.0))) + _1176) * _1059;
        _1193 = _1026;
        _1194 = _1025;
        _1195 = _1024;
        _1196 = _1036;
        _1197 = _1035;
        _1198 = _1034;
        _1199 = _1046;
        _1200 = _1045;
        _1201 = _1044;
        _1202 = _1059;
        _1203 = _1058;
        _1204 = _1057;
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _881;
        _1194 = _881;
        _1195 = _881;
        _1196 = _881;
        _1197 = _881;
        _1198 = _881;
        _1199 = _881;
        _1200 = _881;
        _1201 = _881;
        _1202 = _881;
        _1203 = _881;
        _1204 = _881;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1240 = fma(_1219, cbSceneParam._m0[89u].z, fma(_1218, cbSceneParam._m0[89u].y, _1217 * cbSceneParam._m0[89u].x));
    float _1243 = fma(_1219, cbSceneParam._m0[90u].z, fma(_1218, cbSceneParam._m0[90u].y, _1217 * cbSceneParam._m0[90u].x));
    float _1246 = fma(_1219, cbSceneParam._m0[91u].z, fma(_1218, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1217));
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1267 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1270 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1304;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1277 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_880, _884, _887, _890));
        float _1281 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_882, _885, _888, _891));
        float _1285 = dot(vec4(_1261, _1262, _1263, 1.0), vec4(_883, _886, _889, _892));
        float _1292 = dot(vec4(cbModelParam._m0[39u]), vec4(_1261, _1262, _1263, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1315;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1306 = dot(vec4(cbModelParam._m0[40u]), vec4(_1261, _1262, _1263, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1319 = (_1315 * cbModelParam._m0[1u].x) + (_1304 * (1.0 - cbModelParam._m0[1u].x));
    float _1329 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1330 = isnan(_1329) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1329 : min(cbModelParam._m0[25u].z, _1329));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_549, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_549, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_549, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1393 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1396 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1424;
        if (_1390 > 0.0)
        {
            _1424 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1424 = frontier_phi_19_17_ladder;
        }
        float _1653;
        if (_1393 > 0.0)
        {
            _1653 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1653 = frontier_phi_28_24_ladder;
        }
        float _1910;
        if (_1396 > 0.0)
        {
            _1910 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1910 = frontier_phi_40_35_ladder;
        }
        float _1912 = isnan(_1653) ? _1424 : (isnan(_1424) ? _1653 : min(_1424, _1653));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1390) + _1379;
        float _1918 = (_1913 * _1393) + _1383;
        float _1919 = (_1913 * _1396) + _1387;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_18_40_ladder = _2047.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2047.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2047.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_18_40_ladder_2;
        _1414 = frontier_phi_18_40_ladder_1;
        _1416 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1420 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1420 : min(cbModelParam._m0[25u].w, _1420));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_549, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_549, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_549, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1492 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1495 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1658;
        if (_1489 > 0.0)
        {
            _1658 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1658 = frontier_phi_30_26_ladder;
        }
        float _1937;
        if (_1492 > 0.0)
        {
            _1937 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1937 = frontier_phi_42_37_ladder;
        }
        float _2150;
        if (_1495 > 0.0)
        {
            _2150 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2150 = frontier_phi_51_48_ladder;
        }
        float _2152 = isnan(_1937) ? _1658 : (isnan(_1658) ? _1937 : min(_1658, _1937));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1489) + _1478;
        float _2158 = (_2153 * _1492) + _1482;
        float _2159 = (_2153 * _1495) + _1486;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2160;
        float _2163 = _2160 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2159 > _2163) || ((_2159 < _2161) || ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 < _2161) || (_2157 > _2163))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2159, cbModelParam._m0[17u].z, fma(_2158, cbModelParam._m0[17u].y, _2157 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2159, cbModelParam._m0[18u].z, fma(_2158, cbModelParam._m0[18u].y, _2157 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2159, cbModelParam._m0[19u].z, fma(_2158, cbModelParam._m0[19u].y, _2157 * cbModelParam._m0[19u].x))), _1421);
            frontier_phi_27_51_ladder = _2359.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2359.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2359.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_27_51_ladder_2;
        _1516 = frontier_phi_27_51_ladder_1;
        _1518 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1421);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1531 = (((_512 * _462) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1514 - _1412)) + _1412);
    float _1533 = (((_512 * _464) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_512 * _465) + _513) * _477) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1538 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    vec4 _1552 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_396, _397));
    float _1554 = _1552.w;
    float _1566 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1554);
    float _1567 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1554);
    float _1568 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1554);
    uvec4 _1572 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1574 = _1572.x * 14u;
    uint _1575 = _1574 + 13u;
    float _1582 = _477 + (-1.0);
    float _1587 = (cbLight._m0[_1575].x * _1582) + 1.0;
    float _1588 = (cbLight._m0[_1575].y * _1582) + 1.0;
    float _1589 = (cbLight._m0[_1575].z * _1582) + 1.0;
    float _1590 = (cbLight._m0[_1575].w * _1582) + 1.0;
    uint _1591 = _1574 + 5u;
    float _1597 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1601 = _1574 + 4u;
    float _1611 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1615 = _1574 | 1u;
    float _1626 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_293, _294, _295));
    float _1629 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_293, _294, _295));
    float _3821 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _3832 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1634 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.3183098733425140380859375;
    float _1636 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.3183098733425140380859375;
    float _1643 = ((cbLight._m0[_1591].x * _1597) * _1636) + (((cbLight._m0[_1601].x * _1566) * _1611) * _1634);
    float _1644 = ((_1597 * cbLight._m0[_1591].y) * _1636) + (((cbLight._m0[_1601].y * _1567) * _1611) * _1634);
    float _1645 = ((_1597 * cbLight._m0[_1591].z) * _1636) + (((cbLight._m0[_1601].z * _1568) * _1611) * _1634);
    uvec4 _1650 = floatBitsToUint(cbLight._m0[_1574 + 12u]);
    bool _1652 = _1650.x == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1652)
    {
        _1663 = _1643;
        _1665 = _1644;
        _1667 = _1645;
    }
    else
    {
        uint _1671 = _1574 + 6u;
        float _1687 = (dot(vec3(cbLight._m0[_1574 + 2u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1688 = _1687 * _1687;
        float _3843 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1690 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1663 = (((cbLight._m0[_1671].x * 0.3183098733425140380859375) * _1689) * _1690) + _1643;
        _1665 = (((cbLight._m0[_1671].y * 0.3183098733425140380859375) * _1689) * _1690) + _1644;
        _1667 = (((cbLight._m0[_1671].z * 0.3183098733425140380859375) * _1689) * _1690) + _1645;
    }
    bool _1670 = _1650.y == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1670)
    {
        _1708 = _1663;
        _1710 = _1665;
        _1712 = _1667;
    }
    else
    {
        uint _1881 = _1574 + 7u;
        float _1897 = (dot(vec3(cbLight._m0[_1574 + 3u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _3859 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1900 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _1708 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1663;
        _1710 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1665;
        _1712 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1667;
    }
    uint _1715 = _1574 + 8u;
    float _1728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1574].w)) * _297) * 0.949999988079071044921875);
    float _1729 = _1728 * _1728;
    float _1730 = cbLight._m0[_1574].x + _375;
    float _1731 = cbLight._m0[_1574].y + _376;
    float _1732 = cbLight._m0[_1574].z + _377;
    float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
    float _1737 = _1736 * _1730;
    float _1738 = _1736 * _1731;
    float _1739 = _1736 * _1732;
    float _1740 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1574].xyz));
    float _3875 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _1744 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1745 = dot(vec3(_293, _294, _295), vec3(_1737, _1738, _1739));
    float _3897 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1749 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1737, _1738, _1739));
    float _3908 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1753 = _1729 * _1729;
    float _1757 = ((_1748 * _1748) * (_1753 + (-1.0))) + 1.0;
    float _1765 = exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0);
    float _1766 = 0.959999978542327880859375 - _459;
    float _1768 = 0.959999978542327880859375 - _460;
    float _1769 = 0.959999978542327880859375 - _461;
    float _1776 = 1.0 - _1729;
    float _1787 = (0.5 / (((_1744 * ((_1743 * _1776) + _1729)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1776) + _1729) * _1743))) * _1743;
    float _3919 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1753 / ((_1757 * _1757) * 3.141590118408203125));
    uint _1803 = _1574 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _297) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1615].x + _375;
    float _1817 = cbLight._m0[_1615].y + _376;
    float _1818 = cbLight._m0[_1615].z + _377;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1615].xyz));
    float _3930 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _1830 = dot(vec3(_293, _294, _295), vec3(_1823, _1824, _1825));
    float _3941 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1823, _1824, _1825));
    float _3952 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0);
    float _1856 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1744 * ((_1829 * _1856) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1856) + _1815) * _1829))) * _1829;
    float _3963 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1878 = (((((_1849 * _1766) + _462) * cbLight._m0[_1803].x) * _1868) * _1597) + ((((cbLight._m0[_1715].x * _1566) * ((_1765 * _1766) + _462)) * _1789) * _1611);
    float _1879 = (((((_1849 * _1768) + _464) * cbLight._m0[_1803].y) * _1868) * _1597) + ((((cbLight._m0[_1715].y * _1567) * ((_1765 * _1768) + _464)) * _1789) * _1611);
    float _1880 = (((((_1849 * _1769) + _465) * cbLight._m0[_1803].z) * _1868) * _1597) + ((((cbLight._m0[_1715].z * _1568) * ((_1765 * _1769) + _465)) * _1789) * _1611);
    float _1942;
    float _1944;
    float _1946;
    if (_1652)
    {
        _1942 = _1878;
        _1944 = _1879;
        _1946 = _1880;
    }
    else
    {
        uint _1948 = _1574 + 2u;
        uint _1952 = _1574 + 10u;
        float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _297) * 0.949999988079071044921875);
        float _1967 = _1966 * _1966;
        float _1968 = cbLight._m0[_1948].x + _375;
        float _1969 = cbLight._m0[_1948].y + _376;
        float _1970 = cbLight._m0[_1948].z + _377;
        float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
        float _1975 = _1974 * _1968;
        float _1976 = _1974 * _1969;
        float _1977 = _1974 * _1970;
        float _1978 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1948].xyz));
        float _3974 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1982 = dot(vec3(_293, _294, _295), vec3(_1975, _1976, _1977));
        float _3985 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1986 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_1975, _1976, _1977));
        float _3996 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1990 = _1967 * _1967;
        float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
        float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
        float _2008 = 1.0 - _1967;
        float _2018 = (0.5 / (((_1744 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _2008) + _1967) * _1981))) * _1981;
        float _4007 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2020 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
        float _2021 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
        _1942 = (((((_2001 * _1766) + _462) * cbLight._m0[_1952].x) * _2020) * _2021) + _1878;
        _1944 = (((((_2001 * _1768) + _464) * cbLight._m0[_1952].y) * _2020) * _2021) + _1879;
        _1946 = (((((_2001 * _1769) + _465) * cbLight._m0[_1952].z) * _2020) * _2021) + _1880;
    }
    float _2056;
    float _2058;
    float _2060;
    if (_1670)
    {
        _2056 = _1942;
        _2058 = _1944;
        _2060 = _1946;
    }
    else
    {
        uint _2067 = _1574 + 3u;
        uint _2071 = _1574 + 11u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _297) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _375;
        float _2088 = cbLight._m0[_2067].y + _376;
        float _2089 = cbLight._m0[_2067].z + _377;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_2067].xyz));
        float _4023 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2101 = dot(vec3(_293, _294, _295), vec3(_2094, _2095, _2096));
        float _4034 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4045 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * 5.0);
        float _2127 = 1.0 - _2086;
        float _2137 = (0.5 / (((_1744 * ((_2100 * _2127) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _2127) + _2086) * _2100))) * _2100;
        float _4056 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2139 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2140 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
        _2056 = (((((_2120 * _1766) + _462) * cbLight._m0[_2071].x) * _2139) * _2140) + _1942;
        _2058 = (((((_2120 * _1768) + _464) * cbLight._m0[_2071].y) * _2139) * _2140) + _1944;
        _2060 = (((((_2120 * _1769) + _465) * cbLight._m0[_2071].z) * _2139) * _2140) + _1946;
    }
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_1572.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            uint _2522 = 0u;
            uint _2531;
            bool _2532;
            for (;;)
            {
                _2531 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2522 << 2u)) >> 2u)).x;
                _2532 = _2531 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2532)
                {
                    frontier_phi_68_pred = _2518;
                    frontier_phi_68_pred_1 = _2521;
                    frontier_phi_68_pred_2 = _2520;
                    frontier_phi_68_pred_3 = _2519;
                    frontier_phi_68_pred_4 = _2517;
                    frontier_phi_68_pred_5 = _2516;
                }
                else
                {
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    uint _2667;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2531;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2671 = uint(findLSB(_2667)) + (_2522 << 5u);
                        uint _2668 = (_2667 + 4294967295u) & _2667;
                        uint _2673 = _2671 * 48u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2693 = (_2671 * 48u) + 4u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2712 = (_2671 * 48u) + 8u;
                        vec3 _2723 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x));
                        float _2727 = _2687.x - _2216;
                        float _2728 = _2687.y - _2217;
                        float _2729 = _2687.z - _2218;
                        float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                        float _2733 = inversesqrt(_2730);
                        float _2734 = _2733 * _2727;
                        float _2735 = _2733 * _2728;
                        float _2736 = _2733 * _2729;
                        float _2737 = dot(vec3(_417, _420, _423), vec3(_2734, _2735, _2736));
                        float _2742 = 1.0 - (_2730 * _2687.w);
                        float _4082 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2744 = sqrt(_2730) * _2706.w;
                        float _2747 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2737) + _2748;
                        float _2754 = _2744 * _2744;
                        float _2758 = ((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2743) / ((_2754 * 0.699999988079071044921875) + 1.0);
                        float _2762 = (-0.0) - _2216;
                        float _2763 = (-0.0) - _2217;
                        float _2764 = (-0.0) - _2218;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2779 = exp2(log2(1.0 / ((_2754 * 3.5) + 5.0)) * 0.25);
                        float _2780 = 1.0 - _493;
                        float _2787 = sqrt(1.0 - ((1.0 - (_2780 * _2780)) * (1.0 - (_2779 * _2779))));
                        float _2788 = _2787 * _2787;
                        float _2789 = _2788 * _2788;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2800 = dot(vec3(_417, _420, _423), vec3(_2769, _2770, _2771));
                        float _4098 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2804 = dot(vec3(_417, _420, _423), vec3(_2796 * _2790, _2796 * _2791, _2796 * _2792));
                        float _4109 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                        float _2811 = ((_2807 * _2807) * (_2789 + (-1.0))) + 1.0;
                        float _2812 = _2747 * _2788;
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2737) + _2813;
                        float _4120 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                        float _2818 = 1.0 - _2788;
                        float _2828 = (0.5 / (((_2817 * ((_2803 * _2818) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2818) + _2788) * _2803))) * _2817;
                        float _4131 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2839 = (((_2789 * 3.1415927410125732421875) * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) / ((_2811 * _2811) * ((_2754 * 2.1991131305694580078125) + 3.141590118408203125))) * _2743;
                        _2591 = (_2758 * _2706.x) + _2664;
                        _2592 = (_2758 * _2706.y) + _2665;
                        _2593 = (_2758 * _2706.z) + _2666;
                        _2588 = (_2839 * _2723.x) + _2661;
                        _2589 = (_2839 * _2723.y) + _2662;
                        _2590 = (_2839 * _2723.z) + _2663;
                        if (_2668 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2661 = _2588;
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2668;
                        }
                    }
                    frontier_phi_68_pred = _2590;
                    frontier_phi_68_pred_1 = _2593;
                    frontier_phi_68_pred_2 = _2592;
                    frontier_phi_68_pred_3 = _2591;
                    frontier_phi_68_pred_4 = _2589;
                    frontier_phi_68_pred_5 = _2588;
                }
                _2369 = frontier_phi_68_pred;
                _2375 = frontier_phi_68_pred_1;
                _2373 = frontier_phi_68_pred_2;
                _2371 = frontier_phi_68_pred_3;
                _2367 = frontier_phi_68_pred_4;
                _2365 = frontier_phi_68_pred_5;
                uint _2523 = _2522 + 1u;
                if (_2523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2516 = _2365;
                    _2517 = _2367;
                    _2518 = _2369;
                    _2519 = _2371;
                    _2520 = _2373;
                    _2521 = _2375;
                    _2522 = _2523;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((4294967295u << _2381) & _2262) == 0u)
        {
            _2484 = _2364;
            _2486 = _2366;
            _2488 = _2368;
            _2490 = _2370;
            _2492 = _2372;
            _2494 = _2374;
        }
        else
        {
            float _2509 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2510 = _2509 * _2216;
            float _2511 = _2509 * _2217;
            float _2512 = _2509 * _2218;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2644 = _2364;
                float _2645 = _2366;
                float _2646 = _2368;
                float _2647 = _2370;
                float _2648 = _2372;
                float _2649 = _2374;
                uint _2650 = _2381;
                uint _2659;
                bool _2660;
                for (;;)
                {
                    _2659 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                    _2660 = _2659 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2660)
                    {
                        frontier_phi_79_pred = _2649;
                        frontier_phi_79_pred_1 = _2648;
                        frontier_phi_79_pred_2 = _2647;
                        frontier_phi_79_pred_3 = _2646;
                        frontier_phi_79_pred_4 = _2645;
                        frontier_phi_79_pred_5 = _2644;
                    }
                    else
                    {
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _2866 = _2644;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        uint _2872 = _2659;
                        uint _2873;
                        vec4 _2898;
                        float _2899;
                        vec4 _2914;
                        vec3 _2926;
                        vec4 _2942;
                        vec4 _2958;
                        float _3005;
                        bool _3006;
                        for (;;)
                        {
                            uint _2883 = ((_2650 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2872));
                            _2873 = (_2872 + 4294967295u) & _2872;
                            uint _2885 = _2883 * 40u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2899 = _2898.w;
                            uint _2901 = (_2883 * 40u) + 4u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2883 * 40u) + 8u;
                            _2926 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x));
                            uint _2929 = (_2883 * 40u) + 16u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2883 * 40u) + 20u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2883 * 40u) + 24u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2980 = (_2883 * 40u) + 28u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _3005 = fma(_2218, _2993.z, fma(_2217, _2993.y, _2993.x * _2216)) + _2993.w;
                            _3006 = !((fma(_2218, _2974.z, fma(_2217, _2974.y, _2974.x * _2216)) + _2974.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3006)
                            {
                                float _3033 = _2898.x - _2216;
                                float _3034 = _2898.y - _2217;
                                float _3035 = _2898.z - _2218;
                                float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                                float _3039 = inversesqrt(_3036);
                                float _3040 = _3039 * _3033;
                                float _3041 = _3039 * _3034;
                                float _3042 = _3039 * _3035;
                                float _3046 = 1.0 - (_3036 / (_2899 * _2899));
                                float _4142 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3051 = sqrt(_3036) * _2914.w;
                                float _3053 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                                float _3054 = _3053 * _3053;
                                float _3057 = ((1.0 - _3054) * dot(vec3(_3040, _3041, _3042), vec3(_417, _420, _423))) + _3054;
                                float _3060 = _3051 * _3051;
                                float _3064 = (fma(_2218, _2942.z, fma(_2217, _2942.y, _2942.x * _2216)) + _2942.w) / _3005;
                                float _3065 = (fma(_2218, _2958.z, fma(_2217, _2958.y, _2958.x * _2216)) + _2958.w) / _3005;
                                float _3069 = 1.0 - dot(vec2(_3064, _3065), vec2(_3064, _3065));
                                float _4158 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3071 = _3070 * (((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3047) / ((_3060 * 0.699999988079071044921875) + 1.0));
                                float _3083 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                                float _3084 = 1.0 - _493;
                                float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                                float _3092 = _3091 * _3091;
                                float _3093 = _3092 * _3092;
                                float _3094 = _3040 - _2510;
                                float _3095 = _3041 - _2511;
                                float _3096 = _3042 - _2512;
                                float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                                float _3104 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2510, (-0.0) - _2511, (-0.0) - _2512));
                                float _4169 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3108 = dot(vec3(_417, _420, _423), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                                float _4180 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                                float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                                float _3116 = _3053 * _3092;
                                float _3117 = _3116 * _3116;
                                float _3123 = ((1.0 - _3117) * dot(vec3(_417, _420, _423), vec3(_3040, _3041, _3042))) + _3117;
                                float _4191 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3125 = 1.0 - _3092;
                                float _3135 = (0.5 / (((_3124 * ((_3107 * _3125) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3092) * _3107))) * _3124;
                                float _4202 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3145 = (_3070 * _3047) * (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_3115 * _3115) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3071 * _2914.z;
                                frontier_phi_85_pred_1 = _3071 * _2914.y;
                                frontier_phi_85_pred_2 = _3071 * _2914.x;
                                frontier_phi_85_pred_3 = _3145 * _2926.z;
                                frontier_phi_85_pred_4 = _3145 * _2926.y;
                                frontier_phi_85_pred_5 = _3145 * _2926.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3154 = frontier_phi_85_pred;
                            _3153 = frontier_phi_85_pred_1;
                            _3152 = frontier_phi_85_pred_2;
                            _3151 = frontier_phi_85_pred_3;
                            _3150 = frontier_phi_85_pred_4;
                            _3149 = frontier_phi_85_pred_5;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            if (_2873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2873;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2858;
                        frontier_phi_79_pred_1 = _2857;
                        frontier_phi_79_pred_2 = _2856;
                        frontier_phi_79_pred_3 = _2855;
                        frontier_phi_79_pred_4 = _2854;
                        frontier_phi_79_pred_5 = _2853;
                    }
                    _2495 = frontier_phi_79_pred;
                    _2493 = frontier_phi_79_pred_1;
                    _2491 = frontier_phi_79_pred_2;
                    _2489 = frontier_phi_79_pred_3;
                    _2487 = frontier_phi_79_pred_4;
                    _2485 = frontier_phi_79_pred_5;
                    uint _2651 = _2650 + 1u;
                    if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2644 = _2485;
                        _2645 = _2487;
                        _2646 = _2489;
                        _2647 = _2491;
                        _2648 = _2493;
                        _2649 = _2495;
                        _2650 = _2651;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2491;
                frontier_phi_60_61_ladder_1 = _2495;
                frontier_phi_60_61_ladder_2 = _2493;
                frontier_phi_60_61_ladder_3 = _2489;
                frontier_phi_60_61_ladder_4 = _2487;
                frontier_phi_60_61_ladder_5 = _2485;
            }
            else
            {
                frontier_phi_60_61_ladder = _2370;
                frontier_phi_60_61_ladder_1 = _2374;
                frontier_phi_60_61_ladder_2 = _2372;
                frontier_phi_60_61_ladder_3 = _2368;
                frontier_phi_60_61_ladder_4 = _2366;
                frontier_phi_60_61_ladder_5 = _2364;
            }
            _2484 = frontier_phi_60_61_ladder_5;
            _2486 = frontier_phi_60_61_ladder_4;
            _2488 = frontier_phi_60_61_ladder_3;
            _2490 = frontier_phi_60_61_ladder;
            _2492 = frontier_phi_60_61_ladder_2;
            _2494 = frontier_phi_60_61_ladder_1;
        }
        float _2499 = isnan(1.0) ? _477 : (isnan(_477) ? 1.0 : min(_477, 1.0));
        _2274 = (_2499 * _2490) + _1708;
        _2276 = (_2499 * _2492) + _1710;
        _2278 = (_2499 * _2494) + _1712;
        _2280 = ((_2484 * _462) * _2499) + _2056;
        _2282 = ((_2486 * _464) * _2499) + _2058;
        _2284 = ((_2488 * _465) * _2499) + _2060;
    }
    else
    {
        _2274 = _1708;
        _2276 = _1710;
        _2278 = _1712;
        _2280 = _2056;
        _2282 = _2058;
        _2284 = _2060;
    }
    float _4218 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4229 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4240 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4251 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _2302 = ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2274 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _477))) + ((_2280 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2303 = ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2276 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _477))) + ((_2282 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2304 = ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2278 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _477))) + ((_2284 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1319)) * cbPerFrame._m0[3u].x);
    float _2309 = cbInstanceData._m0[_436 + 6u].w * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)));
    float _2314 = _396 / cbSceneParam._m0[86u].x;
    float _2315 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2329 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2331 = _2329.x;
    float _2332 = _2329.y;
    float _2333 = _2329.z;
    float _2334 = _2329.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2390 = _2389 / _317;
        float _2401 = _2390 * _368;
        float _2402 = _369 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2404 = _2390 * _370;
        float _2406 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2402;
        float _2414 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2601;
        if (abs((_2403 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2601 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2545 = 1.0 / cbSceneParam._m0[80u].x;
            float _2546 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2547 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            _2601 = ((abs(_2414 / _2403) * cbSceneParam._m0[80u].y) * ((((_2556 - _2557) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))))) * _2545)) - ((exp2(_2424 * _2556) - exp2(_2424 * _2557)) * _2545))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2603 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, 1.0), 0.0);
        float _2612 = exp2((_2601 * (-1.44269502162933349609375)) * (1.0 - _2603.w));
        float _2613 = log2(_2612);
        float _2629 = log2(_2334);
        _2426 = (exp2(_2629 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].x)) * _2603.x) / cbSceneParam._m0[78u].x)) + _2331;
        _2428 = (exp2(_2629 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].y)) * _2603.y) / cbSceneParam._m0[78u].y)) + _2332;
        _2430 = (exp2(_2629 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].z)) * _2603.z) / cbSceneParam._m0[78u].z)) + _2333;
        _2432 = _2612 * _2334;
    }
    else
    {
        _2426 = _2331;
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
    }
    bool _2639;
    vec4 _2442;
    vec4 _2464;
    float _2466;
    float _2470;
    float _2471;
    float _2472;
    float _2473;
    bool _2483;
    for (;;)
    {
        _2442 = cbMatDynParam._m0[0u];
        float _2444 = roundEven(_2442.y);
        bool _2445 = _2444 == 3.0;
        float _2446 = log2(_2432);
        float _2453 = exp2(_2446 * cbSceneParam._m0[78u].x) * _2302;
        float _2454 = exp2(_2446 * cbSceneParam._m0[78u].y) * _2303;
        float _2455 = exp2(_2446 * cbSceneParam._m0[78u].z) * _2304;
        float _2462 = _384 + (-0.5);
        _2464 = cbMtdParam._m0[1u];
        _2466 = _2464.y * _2462;
        float _2469 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2470 = _2469 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2426)));
        _2471 = _2469 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
        _2472 = _2469 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
        _2473 = _2462 * 0.999000012874603271484375;
        _2483 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2483)
        {
            if ((cbInstanceData._m0[_436 + 7u].x + _2473) < 0.5)
            {
                _2639 = true;
                break;
            }
        }
        uint _2580 = _438 + uint(_2442.w);
        if ((cbInstanceData._m0[_2580].w < 1.0) && ((cbInstanceData._m0[_2580].w + _2473) < 0.5))
        {
            _2639 = true;
            break;
        }
        if ((_2466 + _242) < _2464.x)
        {
            _2639 = true;
            break;
        }
        _2639 = false;
        break;
    }
    float _2844;
    if (_2639)
    {
        discard_state = true;
        _2844 = 0.0;
    }
    else
    {
        _2844 = _2309;
    }
    SV_Target.x = _2470;
    SV_Target.y = _2471;
    SV_Target.z = _2472;
    SV_Target.w = _2844;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2309;
    discard_exit();
}


