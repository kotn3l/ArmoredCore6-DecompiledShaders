#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _854;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _255.x + cbMtdParam._m0[10u].x;
    vec4 _270 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3191 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))));
    float _290 = fma(_287, _209, fma(_280, _201 * TANGENT.x, (_187 * _180) * _278));
    float _293 = fma(_287, _210, fma(_280, _201 * TANGENT.y, (_187 * _181) * _278));
    float _296 = fma(_287, _211, fma(_280, _201 * TANGENT.z, (_187 * _182) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _301;
    float _309 = _307 * _302;
    float _310 = _307 * _303;
    float _3202 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _311 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3224 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3235 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3246 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _315 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _372 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _382 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _372);
    float _383 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _372);
    float _384 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _372);
    float _388 = inversesqrt(dot(vec3(_382, _383, _384), vec3(_382, _383, _384)));
    float _389 = _382 * _388;
    float _390 = _383 * _388;
    float _391 = _384 * _388;
    float _397 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _398 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _419 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _422 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _425 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _438 = uint(roundEven(NORMAL.w)) * 13u;
    uint _441 = (_438 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3257 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _453 = 1.0 - _315;
    float _454 = _450 * _453;
    float _455 = _451 * _453;
    float _456 = _452 * _453;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _315;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _315;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _315;
    float _464 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    vec4 _476 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _397, cbSceneParam._m0[86u].y * _398));
    float _479 = _476.x * TEXCOORD.z;
    float _480 = dot(vec3(_308, _309, _310), vec3(_389, _390, _391));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _308) - _389;
    float _488 = (_483 * _309) - _390;
    float _489 = (_483 * _310) - _391;
    float _493 = abs(dot(vec3(_389, _390, _391), vec3(_308, _309, _310)));
    float _3290 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_311);
    float _508 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _514 = (1.0 - _508) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _515 = _508 * _495;
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _578 = fma(_551, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _543));
        float _582 = fma(_551, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _543));
        float _586 = fma(_551, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _543));
        float _611 = _543 + _308;
        float _612 = _547 + _309;
        float _613 = _551 + _310;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _578;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _582;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _586;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_578 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_582 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_586 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_308, _309, _310), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3338 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_308, _309, _310), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3371 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_308, _309, _310), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3404 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _894 = fma(_551, cbModelParam._m0[30u].z, fma(_547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _543));
        float _898 = fma(_551, cbModelParam._m0[31u].z, fma(_547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _543));
        float _902 = fma(_551, cbModelParam._m0[32u].z, fma(_547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _543));
        float _925 = _543 + _308;
        float _926 = _547 + _309;
        float _927 = _551 + _310;
        float _937 = fma(_927, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925)) - _894;
        float _938 = fma(_927, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925)) - _898;
        float _939 = fma(_927, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925)) - _902;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_894 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_898 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[35u].z) + ((((((_902 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _993 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_960.x + (-0.5));
        float _995 = _993 * (_960.y + (-0.5));
        float _996 = _993 * (_960.z + (-0.5));
        float _1003 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_967.x + (-0.5));
        float _1005 = _1003 * (_967.y + (-0.5));
        float _1006 = _1003 * (_967.z + (-0.5));
        float _1013 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_974.x + (-0.5));
        float _1015 = _1013 * (_974.y + (-0.5));
        float _1016 = _1013 * (_974.z + (-0.5));
        float _1023 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_981.x + (-0.5));
        float _1025 = _1023 * (_981.y + (-0.5));
        float _1026 = _1023 * (_981.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_308, _309, _310), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3467 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_1057 + 1.0))) + _1062) * _1027;
        float _1072 = _995 * 0.5;
        float _1073 = _1005 * 0.5;
        float _1074 = _1015 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_308, _309, _310), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3500 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_1099 + 1.0))) + _1104) * _1028;
        float _1114 = _996 * 0.5;
        float _1115 = _1006 * 0.5;
        float _1116 = _1016 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_308, _309, _310), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3533 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1141 + 1.0))) + _1146) * _1029;
        _1163 = _996;
        _1164 = _995;
        _1165 = _994;
        _1166 = _1006;
        _1167 = _1005;
        _1168 = _1004;
        _1169 = _1016;
        _1170 = _1015;
        _1171 = _1014;
        _1172 = _1029;
        _1173 = _1028;
        _1174 = _1027;
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _854;
        _1164 = _854;
        _1165 = _854;
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1210 = fma(_1189, cbSceneParam._m0[89u].z, fma(_1188, cbSceneParam._m0[89u].y, _1187 * cbSceneParam._m0[89u].x));
    float _1213 = fma(_1189, cbSceneParam._m0[90u].z, fma(_1188, cbSceneParam._m0[90u].y, _1187 * cbSceneParam._m0[90u].x));
    float _1216 = fma(_1189, cbSceneParam._m0[91u].z, fma(_1188, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1187));
    float _1231 = _487 * 0.5;
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1237 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1240 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1274;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1247 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_853, _857, _860, _863));
        float _1251 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_855, _858, _861, _864));
        float _1255 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_856, _859, _862, _865));
        float _1262 = dot(vec4(cbModelParam._m0[39u]), vec4(_1231, _1232, _1233, 1.0));
        _1274 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1274 = 1.0;
    }
    float _1285;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1276 = dot(vec4(cbModelParam._m0[40u]), vec4(_1231, _1232, _1233, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1289 = (_1285 * cbModelParam._m0[1u].x) + (_1274 * (1.0 - cbModelParam._m0[1u].x));
    float _1299 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1300 = isnan(_1299) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1299 : min(cbModelParam._m0[25u].z, _1299));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1349 = fma(_551, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543)) + cbModelParam._m0[13u].w;
        float _1353 = fma(_551, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543)) + cbModelParam._m0[14u].w;
        float _1357 = fma(_551, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543)) + cbModelParam._m0[15u].w;
        float _1360 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1363 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1366 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1394;
        if (_1360 > 0.0)
        {
            _1394 = abs((1.0 - _1349) / _1360);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1349 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1394 = frontier_phi_16_14_ladder;
        }
        float _1602;
        if (_1363 > 0.0)
        {
            _1602 = abs((1.0 - _1353) / _1363);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1353 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1602 = frontier_phi_25_21_ladder;
        }
        float _1856;
        if (_1366 > 0.0)
        {
            _1856 = abs((1.0 - _1357) / _1366);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1357 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1856 = frontier_phi_37_32_ladder;
        }
        float _1858 = isnan(_1602) ? _1394 : (isnan(_1394) ? _1602 : min(_1394, _1602));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1360) + _1349;
        float _1864 = (_1859 * _1363) + _1353;
        float _1865 = (_1859 * _1366) + _1357;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1300);
            frontier_phi_15_37_ladder = _1993.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1993.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1993.x * cbModelParam._m0[1u].y;
        }
        _1382 = frontier_phi_15_37_ladder_2;
        _1384 = frontier_phi_15_37_ladder_1;
        _1386 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1300);
        _1382 = _1370.x * cbModelParam._m0[1u].y;
        _1384 = _1370.y * cbModelParam._m0[1u].y;
        _1386 = _1370.z * cbModelParam._m0[1u].y;
    }
    float _1390 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1390 : min(cbModelParam._m0[25u].w, _1390));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_551, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_551, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_551, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1462 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1465 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1607;
        if (_1459 > 0.0)
        {
            _1607 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1607 = frontier_phi_27_23_ladder;
        }
        float _1883;
        if (_1462 > 0.0)
        {
            _1883 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1883 = frontier_phi_39_34_ladder;
        }
        float _2096;
        if (_1465 > 0.0)
        {
            _2096 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2096 = frontier_phi_48_45_ladder;
        }
        float _2098 = isnan(_1883) ? _1607 : (isnan(_1607) ? _1883 : min(_1607, _1883));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1459) + _1448;
        float _2104 = (_2099 * _1462) + _1452;
        float _2105 = (_2099 * _1465) + _1456;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2106;
        float _2109 = _2106 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2105 > _2109) || ((_2105 < _2107) || ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 < _2107) || (_2103 > _2109))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2105, cbModelParam._m0[17u].z, fma(_2104, cbModelParam._m0[17u].y, _2103 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2105, cbModelParam._m0[18u].z, fma(_2104, cbModelParam._m0[18u].y, _2103 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2105, cbModelParam._m0[19u].z, fma(_2104, cbModelParam._m0[19u].y, _2103 * cbModelParam._m0[19u].x))), _1391);
            frontier_phi_24_48_ladder = _2303.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2303.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2303.x * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_24_48_ladder_2;
        _1486 = frontier_phi_24_48_ladder_1;
        _1488 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1391);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1501 = (((_514 * _464) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1503 = (((_514 * _466) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1505 = (((_514 * _467) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1508 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1501 * cbSceneParam._m0[91u].x));
    uvec4 _1524 = floatBitsToUint(cbInstanceData._m0[_438 + 5u]);
    uint _1526 = _1524.x * 14u;
    uint _1527 = _1526 + 13u;
    float _1534 = _479 + (-1.0);
    float _1539 = (cbLight._m0[_1527].x * _1534) + 1.0;
    float _1540 = (cbLight._m0[_1527].y * _1534) + 1.0;
    float _1541 = (cbLight._m0[_1527].z * _1534) + 1.0;
    float _1542 = (cbLight._m0[_1527].w * _1534) + 1.0;
    uint _1543 = _1526 + 5u;
    float _1549 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1553 = _1526 + 4u;
    float _1560 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1564 = _1526 | 1u;
    float _1575 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_308, _309, _310));
    float _1578 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_308, _309, _310));
    float _3669 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _3680 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1583 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.3183098733425140380859375;
    float _1585 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1592 = ((cbLight._m0[_1543].x * _1549) * _1585) + ((cbLight._m0[_1553].x * _1560) * _1583);
    float _1593 = ((_1549 * cbLight._m0[_1543].y) * _1585) + ((_1560 * cbLight._m0[_1553].y) * _1583);
    float _1594 = ((_1549 * cbLight._m0[_1543].z) * _1585) + ((_1560 * cbLight._m0[_1553].z) * _1583);
    uvec4 _1599 = floatBitsToUint(cbLight._m0[_1526 + 12u]);
    bool _1601 = _1599.x == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1601)
    {
        _1612 = _1592;
        _1614 = _1593;
        _1616 = _1594;
    }
    else
    {
        uint _1620 = _1526 + 6u;
        float _1636 = (dot(vec3(cbLight._m0[_1526 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1637 = _1636 * _1636;
        float _3691 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1639 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1612 = (((cbLight._m0[_1620].x * 0.3183098733425140380859375) * _1638) * _1639) + _1592;
        _1614 = (((cbLight._m0[_1620].y * 0.3183098733425140380859375) * _1638) * _1639) + _1593;
        _1616 = (((cbLight._m0[_1620].z * 0.3183098733425140380859375) * _1638) * _1639) + _1594;
    }
    bool _1619 = _1599.y == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1619)
    {
        _1657 = _1612;
        _1659 = _1614;
        _1661 = _1616;
    }
    else
    {
        uint _1827 = _1526 + 7u;
        float _1843 = (dot(vec3(cbLight._m0[_1526 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3707 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1846 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1657 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1612;
        _1659 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1614;
        _1661 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1616;
    }
    uint _1664 = _1526 + 8u;
    float _1677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1526].w)) * _311) * 0.949999988079071044921875);
    float _1678 = _1677 * _1677;
    float _1679 = cbLight._m0[_1526].x + _389;
    float _1680 = cbLight._m0[_1526].y + _390;
    float _1681 = cbLight._m0[_1526].z + _391;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1686 = _1685 * _1679;
    float _1687 = _1685 * _1680;
    float _1688 = _1685 * _1681;
    float _1689 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1526].xyz));
    float _3723 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _1693 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _1694 = dot(vec3(_308, _309, _310), vec3(_1686, _1687, _1688));
    float _3745 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1698 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_1686, _1687, _1688));
    float _3756 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1702 = _1678 * _1678;
    float _1706 = ((_1697 * _1697) * (_1702 + (-1.0))) + 1.0;
    float _1714 = exp2(log2(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * 5.0);
    float _1715 = 0.959999978542327880859375 - _461;
    float _1717 = 0.959999978542327880859375 - _462;
    float _1718 = 0.959999978542327880859375 - _463;
    float _1725 = 1.0 - _1678;
    float _1736 = (0.5 / (((_1693 * ((_1692 * _1725) + _1678)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1725) + _1678) * _1692))) * _1692;
    float _3767 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1738 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1702 / ((_1706 * _1706) * 3.141590118408203125));
    uint _1749 = _1526 + 9u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _311) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1564].x + _389;
    float _1763 = cbLight._m0[_1564].y + _390;
    float _1764 = cbLight._m0[_1564].z + _391;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1564].xyz));
    float _3778 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1776 = dot(vec3(_308, _309, _310), vec3(_1769, _1770, _1771));
    float _3789 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1769, _1770, _1771));
    float _3800 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1761 * _1761;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1795 = exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0);
    float _1802 = 1.0 - _1761;
    float _1812 = (0.5 / (((_1693 * ((_1775 * _1802) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1802) + _1761) * _1775))) * _1775;
    float _3811 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    float _1824 = (((((_1795 * _1715) + _464) * cbLight._m0[_1749].x) * _1814) * _1549) + (((((_1714 * _1715) + _464) * cbLight._m0[_1664].x) * _1738) * _1560);
    float _1825 = (((((_1795 * _1717) + _466) * cbLight._m0[_1749].y) * _1814) * _1549) + (((((_1714 * _1717) + _466) * cbLight._m0[_1664].y) * _1738) * _1560);
    float _1826 = (((((_1795 * _1718) + _467) * cbLight._m0[_1749].z) * _1814) * _1549) + (((((_1714 * _1718) + _467) * cbLight._m0[_1664].z) * _1738) * _1560);
    float _1888;
    float _1890;
    float _1892;
    if (_1601)
    {
        _1888 = _1824;
        _1890 = _1825;
        _1892 = _1826;
    }
    else
    {
        uint _1894 = _1526 + 2u;
        uint _1898 = _1526 + 10u;
        float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _311) * 0.949999988079071044921875);
        float _1913 = _1912 * _1912;
        float _1914 = cbLight._m0[_1894].x + _389;
        float _1915 = cbLight._m0[_1894].y + _390;
        float _1916 = cbLight._m0[_1894].z + _391;
        float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
        float _1921 = _1920 * _1914;
        float _1922 = _1920 * _1915;
        float _1923 = _1920 * _1916;
        float _1924 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1894].xyz));
        float _3822 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1928 = dot(vec3(_308, _309, _310), vec3(_1921, _1922, _1923));
        float _3833 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1932 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1921, _1922, _1923));
        float _3844 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1936 = _1913 * _1913;
        float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
        float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0);
        float _1954 = 1.0 - _1913;
        float _1964 = (0.5 / (((_1693 * ((_1927 * _1954) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1954) + _1913) * _1927))) * _1927;
        float _3855 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1966 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
        float _1967 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1888 = (((((_1947 * _1715) + _464) * cbLight._m0[_1898].x) * _1966) * _1967) + _1824;
        _1890 = (((((_1947 * _1717) + _466) * cbLight._m0[_1898].y) * _1966) * _1967) + _1825;
        _1892 = (((((_1947 * _1718) + _467) * cbLight._m0[_1898].z) * _1966) * _1967) + _1826;
    }
    float _2002;
    float _2004;
    float _2006;
    if (_1619)
    {
        _2002 = _1888;
        _2004 = _1890;
        _2006 = _1892;
    }
    else
    {
        uint _2013 = _1526 + 3u;
        uint _2017 = _1526 + 11u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _311) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _389;
        float _2034 = cbLight._m0[_2013].y + _390;
        float _2035 = cbLight._m0[_2013].z + _391;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2013].xyz));
        float _3871 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _2047 = dot(vec3(_308, _309, _310), vec3(_2040, _2041, _2042));
        float _3882 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _3893 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * 5.0);
        float _2073 = 1.0 - _2032;
        float _2083 = (0.5 / (((_1693 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _2073) + _2032) * _2046))) * _2046;
        float _3904 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _2002 = (((((_2066 * _1715) + _464) * cbLight._m0[_2017].x) * _2085) * _2086) + _1888;
        _2004 = (((((_2066 * _1717) + _466) * cbLight._m0[_2017].y) * _2085) * _2086) + _1890;
        _2006 = (((((_2066 * _1718) + _467) * cbLight._m0[_2017].z) * _2085) * _2086) + _1892;
    }
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_1524.y == 0u)
    {
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2161;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2161;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2161;
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.x;
        uint _2188 = uint((float(_2176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _398) / _2177))) + floor(float(uint(cbSceneParam._m0[85u].x * _397) / _2177)));
        float _2198 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2199 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        uint _2202 = uint(isnan(14.0) ? _2199 : (isnan(_2199) ? 14.0 : min(_2199, 14.0)));
        uvec4 _2207 = texelFetch(g_lightClusterGridBuffer, int(((_2202 << 2u) + (_2188 << 6u)) >> 2u));
        uint _2208 = _2207.x;
        uint _2209 = _2176.z;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        if (((((1u << ((_2209 >> 4u) & 15u)) + 4294967295u) & _2208) == 0u) || ((_2209 & 240u) == 0u))
        {
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
        }
        else
        {
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            uint _2458 = 0u;
            uint _2467;
            bool _2468;
            for (;;)
            {
                _2467 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2458 << 2u)) >> 2u)).x;
                _2468 = _2467 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2468)
                {
                    frontier_phi_63_pred = _2457;
                    frontier_phi_63_pred_1 = _2456;
                    frontier_phi_63_pred_2 = _2455;
                    frontier_phi_63_pred_3 = _2454;
                    frontier_phi_63_pred_4 = _2453;
                    frontier_phi_63_pred_5 = _2452;
                }
                else
                {
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    uint _2582;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2457;
                    _2582 = _2467;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    for (;;)
                    {
                        uint _2586 = uint(findLSB(_2582)) + (_2458 << 5u);
                        uint _2583 = (_2582 + 4294967295u) & _2582;
                        uint _2588 = _2586 * 48u;
                        vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2588)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 3u)).x));
                        uint _2608 = (_2586 * 48u) + 4u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2627 = (_2586 * 48u) + 8u;
                        vec3 _2638 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x));
                        float _2642 = _2602.x - _2162;
                        float _2643 = _2602.y - _2163;
                        float _2644 = _2602.z - _2164;
                        float _2645 = dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644));
                        float _2648 = inversesqrt(_2645);
                        float _2649 = _2648 * _2642;
                        float _2650 = _2648 * _2643;
                        float _2651 = _2648 * _2644;
                        float _2652 = dot(vec3(_419, _422, _425), vec3(_2649, _2650, _2651));
                        float _2657 = 1.0 - (_2645 * _2602.w);
                        float _3930 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2658 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                        float _2659 = sqrt(_2645) * _2621.w;
                        float _2662 = 1.39999997615814208984375 / (_2659 + 1.39999997615814208984375);
                        float _2663 = _2662 * _2662;
                        float _2666 = ((1.0 - _2663) * _2652) + _2663;
                        float _2669 = _2659 * _2659;
                        float _2673 = ((isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))) * _2658) / ((_2669 * 0.699999988079071044921875) + 1.0);
                        float _2677 = (-0.0) - _2162;
                        float _2678 = (-0.0) - _2163;
                        float _2679 = (-0.0) - _2164;
                        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
                        float _2684 = _2683 * _2677;
                        float _2685 = _2683 * _2678;
                        float _2686 = _2683 * _2679;
                        float _2694 = exp2(log2(1.0 / ((_2669 * 3.5) + 5.0)) * 0.25);
                        float _2695 = 1.0 - _495;
                        float _2702 = sqrt(1.0 - ((1.0 - (_2695 * _2695)) * (1.0 - (_2694 * _2694))));
                        float _2703 = _2702 * _2702;
                        float _2704 = _2703 * _2703;
                        float _2705 = _2684 + _2649;
                        float _2706 = _2685 + _2650;
                        float _2707 = _2686 + _2651;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2715 = dot(vec3(_419, _422, _425), vec3(_2684, _2685, _2686));
                        float _3946 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2718 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2719 = dot(vec3(_419, _422, _425), vec3(_2711 * _2705, _2711 * _2706, _2711 * _2707));
                        float _3957 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2722 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                        float _2726 = ((_2722 * _2722) * (_2704 + (-1.0))) + 1.0;
                        float _2727 = _2662 * _2703;
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2652) + _2728;
                        float _3968 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2732 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2733 = 1.0 - _2703;
                        float _2743 = (0.5 / (((_2732 * ((_2718 * _2733) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2733) + _2703) * _2718))) * _2732;
                        float _3979 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2754 = (((_2704 * 3.1415927410125732421875) * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) / ((_2726 * _2726) * ((_2669 * 2.1991131305694580078125) + 3.141590118408203125))) * _2658;
                        _2511 = (_2673 * _2621.x) + _2579;
                        _2512 = (_2673 * _2621.y) + _2580;
                        _2513 = (_2673 * _2621.z) + _2581;
                        _2508 = (_2754 * _2638.x) + _2576;
                        _2509 = (_2754 * _2638.y) + _2577;
                        _2510 = (_2754 * _2638.z) + _2578;
                        if (_2583 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2513;
                            _2582 = _2583;
                        }
                    }
                    frontier_phi_63_pred = _2513;
                    frontier_phi_63_pred_1 = _2512;
                    frontier_phi_63_pred_2 = _2511;
                    frontier_phi_63_pred_3 = _2510;
                    frontier_phi_63_pred_4 = _2509;
                    frontier_phi_63_pred_5 = _2508;
                }
                _2319 = frontier_phi_63_pred;
                _2317 = frontier_phi_63_pred_1;
                _2315 = frontier_phi_63_pred_2;
                _2313 = frontier_phi_63_pred_3;
                _2311 = frontier_phi_63_pred_4;
                _2309 = frontier_phi_63_pred_5;
                uint _2459 = _2458 + 1u;
                if (_2459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2452 = _2309;
                    _2453 = _2311;
                    _2454 = _2313;
                    _2455 = _2315;
                    _2456 = _2317;
                    _2457 = _2319;
                    _2458 = _2459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
        }
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.z;
        uint _2325 = (_2323 >> 8u) & 15u;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((4294967295u << _2325) & _2208) == 0u)
        {
            _2420 = _2308;
            _2422 = _2310;
            _2424 = _2312;
            _2426 = _2314;
            _2428 = _2316;
            _2430 = _2318;
        }
        else
        {
            float _2445 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _2446 = _2445 * _2162;
            float _2447 = _2445 * _2163;
            float _2448 = _2445 * _2164;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2325 < ((_2323 >> 12u) & 15u))
            {
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2559 = _2308;
                float _2560 = _2310;
                float _2561 = _2312;
                float _2562 = _2314;
                float _2563 = _2316;
                float _2564 = _2318;
                uint _2565 = _2325;
                uint _2574;
                bool _2575;
                for (;;)
                {
                    _2574 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                    _2575 = _2574 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2575)
                    {
                        frontier_phi_69_pred = _2564;
                        frontier_phi_69_pred_1 = _2563;
                        frontier_phi_69_pred_2 = _2562;
                        frontier_phi_69_pred_3 = _2561;
                        frontier_phi_69_pred_4 = _2560;
                        frontier_phi_69_pred_5 = _2559;
                    }
                    else
                    {
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _2772 = _2559;
                        float _2773 = _2560;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        float _2777 = _2564;
                        uint _2778 = _2574;
                        uint _2779;
                        vec4 _2804;
                        float _2805;
                        vec4 _2820;
                        vec3 _2832;
                        vec4 _2848;
                        vec4 _2864;
                        float _2911;
                        bool _2912;
                        for (;;)
                        {
                            uint _2789 = ((_2565 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2778));
                            _2779 = (_2778 + 4294967295u) & _2778;
                            uint _2791 = _2789 * 40u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            _2805 = _2804.w;
                            uint _2807 = (_2789 * 40u) + 4u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2822 = (_2789 * 40u) + 8u;
                            _2832 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x));
                            uint _2835 = (_2789 * 40u) + 16u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2851 = (_2789 * 40u) + 20u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2867 = (_2789 * 40u) + 24u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2886 = (_2789 * 40u) + 28u;
                            vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2911 = fma(_2164, _2899.z, fma(_2163, _2899.y, _2899.x * _2162)) + _2899.w;
                            _2912 = !((fma(_2164, _2880.z, fma(_2163, _2880.y, _2880.x * _2162)) + _2880.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2912)
                            {
                                float _2939 = _2804.x - _2162;
                                float _2940 = _2804.y - _2163;
                                float _2941 = _2804.z - _2164;
                                float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                                float _2945 = inversesqrt(_2942);
                                float _2946 = _2945 * _2939;
                                float _2947 = _2945 * _2940;
                                float _2948 = _2945 * _2941;
                                float _2952 = 1.0 - (_2942 / (_2805 * _2805));
                                float _3990 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2953 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                                float _2957 = sqrt(_2942) * _2820.w;
                                float _2959 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                                float _2960 = _2959 * _2959;
                                float _2963 = ((1.0 - _2960) * dot(vec3(_2946, _2947, _2948), vec3(_419, _422, _425))) + _2960;
                                float _2966 = _2957 * _2957;
                                float _2970 = (fma(_2164, _2848.z, fma(_2163, _2848.y, _2848.x * _2162)) + _2848.w) / _2911;
                                float _2971 = (fma(_2164, _2864.z, fma(_2163, _2864.y, _2864.x * _2162)) + _2864.w) / _2911;
                                float _2975 = 1.0 - dot(vec2(_2970, _2971), vec2(_2970, _2971));
                                float _4006 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                                float _2977 = _2976 * (((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2953) / ((_2966 * 0.699999988079071044921875) + 1.0));
                                float _2989 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                                float _2990 = 1.0 - _495;
                                float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                                float _2998 = _2997 * _2997;
                                float _2999 = _2998 * _2998;
                                float _3000 = _2946 - _2446;
                                float _3001 = _2947 - _2447;
                                float _3002 = _2948 - _2448;
                                float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                                float _3010 = dot(vec3(_419, _422, _425), vec3((-0.0) - _2446, (-0.0) - _2447, (-0.0) - _2448));
                                float _4017 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3013 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                                float _3014 = dot(vec3(_419, _422, _425), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                                float _4028 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3017 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                                float _3022 = _2959 * _2998;
                                float _3023 = _3022 * _3022;
                                float _3029 = ((1.0 - _3023) * dot(vec3(_419, _422, _425), vec3(_2946, _2947, _2948))) + _3023;
                                float _4039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3031 = 1.0 - _2998;
                                float _3041 = (0.5 / (((_3030 * ((_3013 * _3031) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _2998) * _3013))) * _3030;
                                float _4050 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3051 = (_2976 * _2953) * (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) / ((_3021 * _3021) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2977 * _2820.z;
                                frontier_phi_75_pred_1 = _2977 * _2820.y;
                                frontier_phi_75_pred_2 = _2977 * _2820.x;
                                frontier_phi_75_pred_3 = _3051 * _2832.z;
                                frontier_phi_75_pred_4 = _3051 * _2832.y;
                                frontier_phi_75_pred_5 = _3051 * _2832.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3060 = frontier_phi_75_pred;
                            _3059 = frontier_phi_75_pred_1;
                            _3058 = frontier_phi_75_pred_2;
                            _3057 = frontier_phi_75_pred_3;
                            _3056 = frontier_phi_75_pred_4;
                            _3055 = frontier_phi_75_pred_5;
                            _2762 = _3058 + _2775;
                            _2763 = _3059 + _2776;
                            _2764 = _3060 + _2777;
                            _2759 = _3055 + _2772;
                            _2760 = _3056 + _2773;
                            _2761 = _3057 + _2774;
                            if (_2779 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2779;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2764;
                        frontier_phi_69_pred_1 = _2763;
                        frontier_phi_69_pred_2 = _2762;
                        frontier_phi_69_pred_3 = _2761;
                        frontier_phi_69_pred_4 = _2760;
                        frontier_phi_69_pred_5 = _2759;
                    }
                    _2431 = frontier_phi_69_pred;
                    _2429 = frontier_phi_69_pred_1;
                    _2427 = frontier_phi_69_pred_2;
                    _2425 = frontier_phi_69_pred_3;
                    _2423 = frontier_phi_69_pred_4;
                    _2421 = frontier_phi_69_pred_5;
                    uint _2566 = _2565 + 1u;
                    if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2559 = _2421;
                        _2560 = _2423;
                        _2561 = _2425;
                        _2562 = _2427;
                        _2563 = _2429;
                        _2564 = _2431;
                        _2565 = _2566;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2431;
                frontier_phi_57_58_ladder_1 = _2429;
                frontier_phi_57_58_ladder_2 = _2427;
                frontier_phi_57_58_ladder_3 = _2425;
                frontier_phi_57_58_ladder_4 = _2423;
                frontier_phi_57_58_ladder_5 = _2421;
            }
            else
            {
                frontier_phi_57_58_ladder = _2318;
                frontier_phi_57_58_ladder_1 = _2316;
                frontier_phi_57_58_ladder_2 = _2314;
                frontier_phi_57_58_ladder_3 = _2312;
                frontier_phi_57_58_ladder_4 = _2310;
                frontier_phi_57_58_ladder_5 = _2308;
            }
            _2420 = frontier_phi_57_58_ladder_5;
            _2422 = frontier_phi_57_58_ladder_4;
            _2424 = frontier_phi_57_58_ladder_3;
            _2426 = frontier_phi_57_58_ladder_2;
            _2428 = frontier_phi_57_58_ladder_1;
            _2430 = frontier_phi_57_58_ladder;
        }
        float _2435 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _2220 = (_2435 * _2426) + _1657;
        _2222 = (_2435 * _2428) + _1659;
        _2224 = (_2435 * _2430) + _1661;
        _2226 = ((_2420 * _464) * _2435) + _2002;
        _2228 = ((_2422 * _466) * _2435) + _2004;
        _2230 = ((_2424 * _467) * _2435) + _2006;
    }
    else
    {
        _2220 = _1657;
        _2222 = _1659;
        _2224 = _1661;
        _2226 = _2002;
        _2228 = _2004;
        _2230 = _2006;
    }
    float _4066 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4077 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4088 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    uint _2250 = _438 + 6u;
    float _2258 = _397 / cbSceneParam._m0[86u].x;
    float _2259 = _398 / cbSceneParam._m0[86u].y;
    vec4 _2273 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2258, _2259, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2275 = _2273.x;
    float _2276 = _2273.y;
    float _2277 = _2273.z;
    float _2278 = _2273.w;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2333 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2334 = _2333 / _331;
        float _2345 = _2334 * _382;
        float _2346 = _383 * _2334;
        float _2347 = (-0.0) - _2346;
        float _2348 = _2334 * _384;
        float _2350 = (cbSceneParam._m0[77u].w * _2347) / _2333;
        float _2351 = _2350 + cbSceneParam._m0[79u].w;
        float _2352 = cbSceneParam._m0[79u].w - _2346;
        float _2358 = sqrt(((_2345 * _2345) + (_2346 * _2346)) + (_2348 * _2348));
        float _2361 = (1.0 - (cbSceneParam._m0[77u].w / _2333)) * _2358;
        float _2366 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2368 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2521;
        if (abs((_2347 - _2350) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2521 = ((((_2351 > 0.0) ? exp2(_2366 * _2351) : (2.0 - exp2(_2368 * _2351))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2361;
        }
        else
        {
            float _2481 = 1.0 / cbSceneParam._m0[80u].x;
            float _2482 = isnan(_2352) ? _2351 : (isnan(_2351) ? _2352 : max(_2351, _2352));
            float _2483 = isnan(_2352) ? _2351 : (isnan(_2351) ? _2352 : min(_2351, _2352));
            float _2492 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : min(_2482, 0.0));
            float _2493 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : min(_2483, 0.0));
            _2521 = ((abs(_2358 / _2347) * cbSceneParam._m0[80u].y) * ((((_2492 - _2493) * 2.0) - ((exp2(_2366 * (isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0)))) - exp2(_2366 * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0))))) * _2481)) - ((exp2(_2368 * _2492) - exp2(_2368 * _2493)) * _2481))) + (_2361 * cbSceneParam._m0[80u].z);
        }
        vec4 _2523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2258, _2259, 1.0), 0.0);
        float _2532 = exp2((_2521 * (-1.44269502162933349609375)) * (1.0 - _2523.w));
        float _2533 = log2(_2532);
        float _2549 = log2(_2278);
        _2370 = (exp2(_2549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].x)) * _2523.x) / cbSceneParam._m0[78u].x)) + _2275;
        _2372 = (exp2(_2549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].y)) * _2523.y) / cbSceneParam._m0[78u].y)) + _2276;
        _2374 = (exp2(_2549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2533 * cbSceneParam._m0[78u].z)) * _2523.z) / cbSceneParam._m0[78u].z)) + _2277;
        _2376 = _2532 * _2278;
    }
    else
    {
        _2370 = _2275;
        _2372 = _2276;
        _2374 = _2277;
        _2376 = _2278;
    }
    float _2388 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2389 = _2388 == 3.0;
    float _2390 = log2(_2376);
    float _2397 = exp2(_2390 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2220 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _479))) + ((_2226 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2398 = exp2(_2390 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2222 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _479))) + ((_2228 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2399 = exp2(_2390 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2224 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _479))) + ((_2230 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1289)) * cbPerFrame._m0[3u].x));
    float _2408 = (_2388 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2408 * (_2389 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.y = _2408 * (_2389 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.z = _2408 * (_2389 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2374)));
    SV_Target.w = cbInstanceData._m0[_2250].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2250].w;
}


