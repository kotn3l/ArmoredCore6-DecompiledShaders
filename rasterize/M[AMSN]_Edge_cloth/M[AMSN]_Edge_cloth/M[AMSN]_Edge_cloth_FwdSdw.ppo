#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _858;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = _259.x + cbMtdParam._m0[10u].x;
    vec4 _274 = texture(sampler2D(M_AMSN_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3478 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))));
    float _294 = fma(_291, _213, fma(_284, _205 * TANGENT.x, (_191 * _184) * _282));
    float _297 = fma(_291, _214, fma(_284, _205 * TANGENT.y, (_191 * _185) * _282));
    float _300 = fma(_291, _215, fma(_284, _205 * TANGENT.z, (_191 * _186) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _311 * _305;
    float _313 = _311 * _306;
    float _314 = _311 * _307;
    float _3489 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _315 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3511 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3522 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3533 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _319 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _376 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _386 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _376);
    float _387 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _376);
    float _388 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _376);
    float _392 = inversesqrt(dot(vec3(_386, _387, _388), vec3(_386, _387, _388)));
    float _393 = _386 * _392;
    float _394 = _387 * _392;
    float _395 = _388 * _392;
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _423 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _426 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _429 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = (_442 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3544 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _457 = 1.0 - _319;
    float _458 = _454 * _457;
    float _459 = _455 * _457;
    float _460 = _456 * _457;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _319;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _319;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _319;
    float _468 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    vec4 _480 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _483 = _480.x * TEXCOORD.z;
    float _484 = dot(vec3(_312, _313, _314), vec3(_393, _394, _395));
    float _487 = _484 * 2.0;
    float _491 = (_487 * _312) - _393;
    float _492 = (_487 * _313) - _394;
    float _493 = (_487 * _314) - _395;
    float _497 = abs(dot(vec3(_393, _394, _395), vec3(_312, _313, _314)));
    float _3577 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = sqrt(_315);
    float _512 = exp2((_499 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_499 * 3.0));
    float _518 = (1.0 - _512) * ((_499 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _519 = _512 * _499;
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _857;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _586 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _590 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _615 = _547 + _312;
        float _616 = _551 + _313;
        float _617 = _555 + _314;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _582;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _586;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _590;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_651.x + (-0.5));
        float _687 = _685 * (_651.y + (-0.5));
        float _688 = _685 * (_651.z + (-0.5));
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_658.x + (-0.5));
        float _697 = _695 * (_658.y + (-0.5));
        float _698 = _695 * (_658.z + (-0.5));
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_665.x + (-0.5));
        float _707 = _705 * (_665.y + (-0.5));
        float _708 = _705 * (_665.z + (-0.5));
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = _686 * 0.5;
        float _723 = _696 * 0.5;
        float _724 = _706 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _739 = (dot(vec3(_312, _313, _314), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _749 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3625 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_751 + 1.0))) + _756) * _719;
        float _766 = _687 * 0.5;
        float _767 = _697 * 0.5;
        float _768 = _707 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_312, _313, _314), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3658 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_793 + 1.0))) + _798) * _720;
        float _808 = _688 * 0.5;
        float _809 = _698 * 0.5;
        float _810 = _708 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_312, _313, _314), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3691 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_835 + 1.0))) + _840) * _721;
        _857 = _688;
        _859 = _687;
        _860 = _686;
        _861 = _698;
        _862 = _697;
        _863 = _696;
        _864 = _708;
        _865 = _707;
        _866 = _706;
        _867 = _721;
        _868 = _720;
        _869 = _719;
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
    }
    else
    {
        _857 = _858;
        _859 = _858;
        _860 = _858;
        _861 = _858;
        _862 = _858;
        _863 = _858;
        _864 = _858;
        _865 = _858;
        _866 = _858;
        _867 = _858;
        _868 = _858;
        _869 = _858;
        _870 = 0.0;
        _871 = 0.0;
        _872 = 0.0;
    }
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _898 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _902 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _906 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _929 = _547 + _312;
        float _930 = _551 + _313;
        float _931 = _555 + _314;
        float _941 = fma(_931, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929)) - _898;
        float _942 = fma(_931, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929)) - _902;
        float _943 = fma(_931, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929)) - _906;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_898 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_902 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[35u].z) + ((((((_906 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_964.x + (-0.5));
        float _999 = _997 * (_964.y + (-0.5));
        float _1000 = _997 * (_964.z + (-0.5));
        float _1007 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_971.x + (-0.5));
        float _1009 = _1007 * (_971.y + (-0.5));
        float _1010 = _1007 * (_971.z + (-0.5));
        float _1017 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_978.x + (-0.5));
        float _1019 = _1017 * (_978.y + (-0.5));
        float _1020 = _1017 * (_978.z + (-0.5));
        float _1027 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_985.x + (-0.5));
        float _1029 = _1027 * (_985.y + (-0.5));
        float _1030 = _1027 * (_985.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_312, _313, _314), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3754 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1061 + 1.0))) + _1066) * _1031;
        float _1076 = _999 * 0.5;
        float _1077 = _1009 * 0.5;
        float _1078 = _1019 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_312, _313, _314), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3787 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1103 + 1.0))) + _1108) * _1032;
        float _1118 = _1000 * 0.5;
        float _1119 = _1010 * 0.5;
        float _1120 = _1020 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_312, _313, _314), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3820 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1145 + 1.0))) + _1150) * _1033;
        _1167 = _1000;
        _1168 = _999;
        _1169 = _998;
        _1170 = _1010;
        _1171 = _1009;
        _1172 = _1008;
        _1173 = _1020;
        _1174 = _1019;
        _1175 = _1018;
        _1176 = _1033;
        _1177 = _1032;
        _1178 = _1031;
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _858;
        _1168 = _858;
        _1169 = _858;
        _1170 = _858;
        _1171 = _858;
        _1172 = _858;
        _1173 = _858;
        _1174 = _858;
        _1175 = _858;
        _1176 = _858;
        _1177 = _858;
        _1178 = _858;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1214 = fma(_1193, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1191 * cbSceneParam._m0[89u].x));
    float _1217 = fma(_1193, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1191 * cbSceneParam._m0[90u].x));
    float _1220 = fma(_1193, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1191));
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1241 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1244 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1278;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1251 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_857, _861, _864, _867));
        float _1255 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_859, _862, _865, _868));
        float _1259 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_860, _863, _866, _869));
        float _1266 = dot(vec4(cbModelParam._m0[39u]), vec4(_1235, _1236, _1237, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1289;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1280 = dot(vec4(cbModelParam._m0[40u]), vec4(_1235, _1236, _1237, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1293 = (_1289 * cbModelParam._m0[1u].x) + (_1278 * (1.0 - cbModelParam._m0[1u].x));
    float _1303 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _315);
    float _1304 = isnan(_1303) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1303 : min(cbModelParam._m0[25u].z, _1303));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1353 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1357 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1361 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1364 = fma(_493, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491));
        float _1367 = fma(_493, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491));
        float _1370 = fma(_493, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491));
        float _1398;
        if (_1364 > 0.0)
        {
            _1398 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1398 = frontier_phi_16_14_ladder;
        }
        float _1574;
        if (_1367 > 0.0)
        {
            _1574 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1574 = frontier_phi_25_21_ladder;
        }
        float _1870;
        if (_1370 > 0.0)
        {
            _1870 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1870 = frontier_phi_37_32_ladder;
        }
        float _1872 = isnan(_1574) ? _1398 : (isnan(_1398) ? _1574 : min(_1398, _1574));
        float _1873 = isnan(_1870) ? _1872 : (isnan(_1872) ? _1870 : min(_1872, _1870));
        float _1877 = (_1873 * _1364) + _1353;
        float _1878 = (_1873 * _1367) + _1357;
        float _1879 = (_1873 * _1370) + _1361;
        float _1880 = _1873 * 9.9999997473787516355514526367188e-05;
        float _1882 = (-1.0) - _1880;
        float _1884 = _1880 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1879 > _1884) || ((_1879 < _1882) || ((_1878 > _1884) || ((_1878 < _1882) || ((_1877 < _1882) || (_1877 > _1884))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1879, cbModelParam._m0[9u].z, fma(_1878, cbModelParam._m0[9u].y, _1877 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1879, cbModelParam._m0[10u].z, fma(_1878, cbModelParam._m0[10u].y, _1877 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1879, cbModelParam._m0[11u].z, fma(_1878, cbModelParam._m0[11u].y, _1877 * cbModelParam._m0[11u].x))), _1304);
            frontier_phi_15_37_ladder = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2024.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2024.z * cbModelParam._m0[1u].y;
        }
        _1386 = frontier_phi_15_37_ladder_1;
        _1388 = frontier_phi_15_37_ladder;
        _1390 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_491, _492, _493), _1304);
        _1386 = _1374.x * cbModelParam._m0[1u].y;
        _1388 = _1374.y * cbModelParam._m0[1u].y;
        _1390 = _1374.z * cbModelParam._m0[1u].y;
    }
    float _1394 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _315);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1394 : min(cbModelParam._m0[25u].w, _1394));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1452 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1456 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1460 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1463 = fma(_493, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491));
        float _1466 = fma(_493, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491));
        float _1469 = fma(_493, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491));
        float _1579;
        if (_1463 > 0.0)
        {
            _1579 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1579 = frontier_phi_27_23_ladder;
        }
        float _1897;
        if (_1466 > 0.0)
        {
            _1897 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1897 = frontier_phi_39_34_ladder;
        }
        float _2235;
        if (_1469 > 0.0)
        {
            _2235 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2235 = frontier_phi_49_46_ladder;
        }
        float _2237 = isnan(_1897) ? _1579 : (isnan(_1579) ? _1897 : min(_1579, _1897));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1463) + _1452;
        float _2243 = (_2238 * _1466) + _1456;
        float _2244 = (_2238 * _1469) + _1460;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2245;
        float _2248 = _2245 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2244 > _2248) || ((_2244 < _2246) || ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 < _2246) || (_2242 > _2248))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2244, cbModelParam._m0[17u].z, fma(_2243, cbModelParam._m0[17u].y, _2242 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2244, cbModelParam._m0[18u].z, fma(_2243, cbModelParam._m0[18u].y, _2242 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2244, cbModelParam._m0[19u].z, fma(_2243, cbModelParam._m0[19u].y, _2242 * cbModelParam._m0[19u].x))), _1395);
            frontier_phi_24_49_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1488 = frontier_phi_24_49_ladder_2;
        _1490 = frontier_phi_24_49_ladder_1;
        _1492 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_491, _492, _493), _1395);
        _1488 = _1472.x * cbModelParam._m0[1u].z;
        _1490 = _1472.y * cbModelParam._m0[1u].z;
        _1492 = _1472.z * cbModelParam._m0[1u].z;
    }
    float _1505 = (((_518 * _468) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1507 = (((_518 * _470) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1509 = (((_518 * _471) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1512 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, _1505 * cbSceneParam._m0[91u].x));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1565 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1566 = _1553 / _1565;
    float _1567 = _1557 / _1565;
    float _1568 = _1561 / _1565;
    float _1715;
    float _1716;
    float _1717;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1595 = ((uint(_1568 > cbSceneParam._m0[59u].y) + uint(_1568 > cbSceneParam._m0[59u].x)) + uint(_1568 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1596 = _1595 + 43u;
        uint _1604 = _1595 + 44u;
        uint _1612 = _1595 + 45u;
        uint _1620 = _1595 + 46u;
        float _1631 = fma(_1565, cbSceneParam._m0[_1596].w, fma(_1561, cbSceneParam._m0[_1596].z, fma(_1557, cbSceneParam._m0[_1596].y, _1553 * cbSceneParam._m0[_1596].x)));
        float _1635 = fma(_1565, cbSceneParam._m0[_1604].w, fma(_1561, cbSceneParam._m0[_1604].z, fma(_1557, cbSceneParam._m0[_1604].y, _1553 * cbSceneParam._m0[_1604].x)));
        float _1643 = fma(_1565, cbSceneParam._m0[_1620].w, fma(_1561, cbSceneParam._m0[_1620].z, fma(_1557, cbSceneParam._m0[_1620].y, _1553 * cbSceneParam._m0[_1620].x)));
        float _1648 = cbSceneParam._m0[33u].z * _1643;
        float _1650 = cbSceneParam._m0[33u].w * _1643;
        float _1653 = fma(_1565, cbSceneParam._m0[_1612].w, fma(_1561, cbSceneParam._m0[_1612].z, fma(_1557, cbSceneParam._m0[_1612].y, _1553 * cbSceneParam._m0[_1612].x))) / _1643;
        float _1701 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
        float _3946 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1708 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 + _1631) / _1643, (_1650 + _1635) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 + _1631) / _1643, (_1635 - _1648) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1648) / _1643, (_1635 - _1650) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1650) / _1643, (_1648 + _1635) / _1643), _1653), 0.0)).x), vec4(0.25)));
        _1715 = 1.0 - (_1708 * cbSceneParam._m0[34u].x);
        _1716 = 1.0 - (_1708 * cbSceneParam._m0[34u].y);
        _1717 = 1.0 - (_1708 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1715 = 1.0;
        _1716 = 1.0;
        _1717 = 1.0;
    }
    float _1781;
    float _1783;
    float _1785;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1769 = fma(_1565, cbSceneParam._m0[63u].w, fma(_1561, cbSceneParam._m0[63u].z, fma(_1557, cbSceneParam._m0[63u].y, _1553 * cbSceneParam._m0[63u].x)));
        float _1770 = fma(_1565, cbSceneParam._m0[60u].w, fma(_1561, cbSceneParam._m0[60u].z, fma(_1557, cbSceneParam._m0[60u].y, _1553 * cbSceneParam._m0[60u].x))) / _1769;
        float _1771 = fma(_1565, cbSceneParam._m0[61u].w, fma(_1561, cbSceneParam._m0[61u].z, fma(_1557, cbSceneParam._m0[61u].y, _1553 * cbSceneParam._m0[61u].x))) / _1769;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1770 >= cbSceneParam._m0[64u].x) && (_1771 >= cbSceneParam._m0[64u].y)) && (_1770 <= cbSceneParam._m0[64u].z)) && (_1771 <= cbSceneParam._m0[64u].w))
        {
            float _1910 = fma(_1565, cbSceneParam._m0[62u].w, fma(_1561, cbSceneParam._m0[62u].z, fma(_1557, cbSceneParam._m0[62u].y, _1553 * cbSceneParam._m0[62u].x))) / _1769;
            float _1914 = isnan(cbSceneParam._m0[41u].w) ? _1910 : (isnan(_1910) ? cbSceneParam._m0[41u].w : max(_1910, cbSceneParam._m0[41u].w));
            float _1957 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
            float _3962 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
            float _1964 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1770, cbSceneParam._m0[33u].w + _1771), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1770, _1771 - cbSceneParam._m0[33u].z), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].z, _1771 - cbSceneParam._m0[33u].w), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1771), _1914), 0.0)).x), vec4(0.25)));
            float _1968 = 1.0 - (_1964 * cbSceneParam._m0[34u].x);
            float _1969 = 1.0 - (_1964 * cbSceneParam._m0[34u].y);
            float _1970 = 1.0 - (_1964 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1969) ? _1716 : (isnan(_1716) ? _1969 : min(_1716, _1969));
            frontier_phi_36_35_ladder_1 = isnan(_1970) ? _1717 : (isnan(_1717) ? _1970 : min(_1717, _1970));
            frontier_phi_36_35_ladder_2 = isnan(_1968) ? _1715 : (isnan(_1715) ? _1968 : min(_1715, _1968));
        }
        else
        {
            frontier_phi_36_35_ladder = _1716;
            frontier_phi_36_35_ladder_1 = _1717;
            frontier_phi_36_35_ladder_2 = _1715;
        }
        _1781 = frontier_phi_36_35_ladder_2;
        _1783 = frontier_phi_36_35_ladder;
        _1785 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1781 = _1715;
        _1783 = _1716;
        _1785 = _1717;
    }
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _483 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1829 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1833 = _1792 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_312, _313, _314));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_312, _313, _314));
    float _3998 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _4009 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1809].x * _1815) * _1854) + (((cbLight._m0[_1819].x * _1781) * _1829) * _1852);
    float _1862 = ((_1815 * cbLight._m0[_1809].y) * _1854) + (((cbLight._m0[_1819].y * _1783) * _1829) * _1852);
    float _1863 = ((_1815 * cbLight._m0[_1809].z) * _1854) + (((cbLight._m0[_1819].z * _1785) * _1829) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1869)
    {
        _1971 = _1861;
        _1973 = _1862;
        _1975 = _1863;
    }
    else
    {
        uint _1979 = _1792 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4020 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1998 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1861;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1862;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1863;
    }
    bool _1978 = _1867.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1978)
    {
        _2033 = _1971;
        _2035 = _1973;
        _2037 = _1975;
    }
    else
    {
        uint _2206 = _1792 + 7u;
        float _2222 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4036 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2225 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2033 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _1971;
        _2035 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _1973;
        _2037 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _1975;
    }
    uint _2040 = _1792 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _315) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1792].x + _393;
    float _2056 = cbLight._m0[_1792].y + _394;
    float _2057 = cbLight._m0[_1792].z + _395;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1792].xyz));
    float _4052 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2069 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2070 = dot(vec3(_312, _313, _314), vec3(_2062, _2063, _2064));
    float _4074 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_2062, _2063, _2064));
    float _4085 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
    float _2091 = 0.959999978542327880859375 - _465;
    float _2093 = 0.959999978542327880859375 - _466;
    float _2094 = 0.959999978542327880859375 - _467;
    float _2101 = 1.0 - _2054;
    float _2112 = (0.5 / (((_2069 * ((_2068 * _2101) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2101) + _2054) * _2068))) * _2068;
    float _4096 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2128 = _1792 + 9u;
    float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _315) * 0.949999988079071044921875);
    float _2140 = _2139 * _2139;
    float _2141 = cbLight._m0[_1833].x + _393;
    float _2142 = cbLight._m0[_1833].y + _394;
    float _2143 = cbLight._m0[_1833].z + _395;
    float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
    float _2148 = _2147 * _2141;
    float _2149 = _2147 * _2142;
    float _2150 = _2147 * _2143;
    float _2151 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1833].xyz));
    float _4107 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2155 = dot(vec3(_312, _313, _314), vec3(_2148, _2149, _2150));
    float _4118 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2148, _2149, _2150));
    float _4129 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2140 * _2140;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _2181 = 1.0 - _2140;
    float _2191 = (0.5 / (((_2069 * ((_2154 * _2181) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2181) + _2140) * _2154))) * _2154;
    float _4140 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    float _2203 = (((((_2174 * _2091) + _468) * cbLight._m0[_2128].x) * _2193) * _1815) + ((((cbLight._m0[_2040].x * _1781) * ((_2090 * _2091) + _468)) * _2114) * _1829);
    float _2204 = (((((_2174 * _2093) + _470) * cbLight._m0[_2128].y) * _2193) * _1815) + ((((cbLight._m0[_2040].y * _1783) * ((_2090 * _2093) + _470)) * _2114) * _1829);
    float _2205 = (((((_2174 * _2094) + _471) * cbLight._m0[_2128].z) * _2193) * _1815) + ((((cbLight._m0[_2040].z * _1785) * ((_2090 * _2094) + _471)) * _2114) * _1829);
    float _2261;
    float _2263;
    float _2265;
    if (_1869)
    {
        _2261 = _2203;
        _2263 = _2204;
        _2265 = _2205;
    }
    else
    {
        uint _2267 = _1792 + 2u;
        uint _2271 = _1792 + 10u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _315) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _393;
        float _2288 = cbLight._m0[_2267].y + _394;
        float _2289 = cbLight._m0[_2267].z + _395;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2267].xyz));
        float _4151 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2301 = dot(vec3(_312, _313, _314), vec3(_2294, _2295, _2296));
        float _4162 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4173 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
        float _2327 = 1.0 - _2286;
        float _2337 = (0.5 / (((_2069 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2327) + _2286) * _2300))) * _2300;
        float _4184 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2261 = (((((_2320 * _2091) + _468) * cbLight._m0[_2271].x) * _2339) * _2340) + _2203;
        _2263 = (((((_2320 * _2093) + _470) * cbLight._m0[_2271].y) * _2339) * _2340) + _2204;
        _2265 = (((((_2320 * _2094) + _471) * cbLight._m0[_2271].z) * _2339) * _2340) + _2205;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1978)
    {
        _2371 = _2261;
        _2373 = _2263;
        _2375 = _2265;
    }
    else
    {
        uint _2382 = _1792 + 3u;
        uint _2386 = _1792 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _315) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _393;
        float _2403 = cbLight._m0[_2382].y + _394;
        float _2404 = cbLight._m0[_2382].z + _395;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2382].xyz));
        float _4200 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2416 = dot(vec3(_312, _313, _314), vec3(_2409, _2410, _2411));
        float _4211 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4222 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2069 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2442) + _2401) * _2415))) * _2415;
        float _4233 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2371 = (((((_2435 * _2091) + _468) * cbLight._m0[_2386].x) * _2454) * _2455) + _2261;
        _2373 = (((((_2435 * _2093) + _470) * cbLight._m0[_2386].y) * _2454) * _2455) + _2263;
        _2375 = (((((_2435 * _2094) + _471) * cbLight._m0[_2386].z) * _2454) * _2455) + _2265;
    }
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    if (_1790.y == 0u)
    {
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.x;
        uint _2488 = uint((float(_2476.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2477))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2477)));
        float _2498 = (log2(_1568 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2499 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        uint _2502 = uint(isnan(14.0) ? _2499 : (isnan(_2499) ? 14.0 : min(_2499, 14.0)));
        uvec4 _2507 = texelFetch(g_lightClusterGridBuffer, int(((_2502 << 2u) + (_2488 << 6u)) >> 2u));
        uint _2508 = _2507.x;
        uint _2509 = _2476.z;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        if (((((1u << ((_2509 >> 4u) & 15u)) + 4294967295u) & _2508) == 0u) || ((_2509 & 240u) == 0u))
        {
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
        }
        else
        {
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            uint _2737 = 0u;
            uint _2746;
            bool _2747;
            for (;;)
            {
                _2746 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                _2747 = _2746 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2747)
                {
                    frontier_phi_68_pred = _2736;
                    frontier_phi_68_pred_1 = _2735;
                    frontier_phi_68_pred_2 = _2734;
                    frontier_phi_68_pred_3 = _2732;
                    frontier_phi_68_pred_4 = _2731;
                    frontier_phi_68_pred_5 = _2733;
                }
                else
                {
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    uint _2861;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2746;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    for (;;)
                    {
                        uint _2865 = uint(findLSB(_2861)) + (_2737 << 5u);
                        uint _2862 = (_2861 + 4294967295u) & _2861;
                        uint _2867 = _2865 * 48u;
                        vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2887 = (_2865 * 48u) + 4u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2906 = (_2865 * 48u) + 8u;
                        vec3 _2917 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x));
                        float _2921 = _2881.x - _1566;
                        float _2922 = _2881.y - _1567;
                        float _2923 = _2881.z - _1568;
                        float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                        float _2927 = inversesqrt(_2924);
                        float _2928 = _2927 * _2921;
                        float _2929 = _2927 * _2922;
                        float _2930 = _2927 * _2923;
                        float _2931 = dot(vec3(_423, _426, _429), vec3(_2928, _2929, _2930));
                        float _2936 = 1.0 - (_2924 * _2881.w);
                        float _4259 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2938 = sqrt(_2924) * _2900.w;
                        float _2941 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                        float _2942 = _2941 * _2941;
                        float _2945 = ((1.0 - _2942) * _2931) + _2942;
                        float _2948 = _2938 * _2938;
                        float _2952 = ((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2937) / ((_2948 * 0.699999988079071044921875) + 1.0);
                        float _2956 = (-0.0) - _1566;
                        float _2957 = (-0.0) - _1567;
                        float _2958 = (-0.0) - _1568;
                        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2972 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _499;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2963 + _2928;
                        float _2984 = _2964 + _2929;
                        float _2985 = _2965 + _2930;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_423, _426, _429), vec3(_2963, _2964, _2965));
                        float _4275 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _2997 = dot(vec3(_423, _426, _429), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4286 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2941 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2931) + _3006;
                        float _4297 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4308 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3032 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3004 * _3004) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125))) * _2937;
                        _2790 = (_2952 * _2900.x) + _2858;
                        _2791 = (_2952 * _2900.y) + _2859;
                        _2792 = (_2952 * _2900.z) + _2860;
                        _2787 = (_3032 * _2917.x) + _2855;
                        _2788 = (_3032 * _2917.y) + _2856;
                        _2789 = (_3032 * _2917.z) + _2857;
                        if (_2862 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2862;
                        }
                    }
                    frontier_phi_68_pred = _2792;
                    frontier_phi_68_pred_1 = _2791;
                    frontier_phi_68_pred_2 = _2790;
                    frontier_phi_68_pred_3 = _2788;
                    frontier_phi_68_pred_4 = _2787;
                    frontier_phi_68_pred_5 = _2789;
                }
                _2598 = frontier_phi_68_pred;
                _2596 = frontier_phi_68_pred_1;
                _2594 = frontier_phi_68_pred_2;
                _2590 = frontier_phi_68_pred_3;
                _2588 = frontier_phi_68_pred_4;
                _2592 = frontier_phi_68_pred_5;
                uint _2738 = _2737 + 1u;
                if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2731 = _2588;
                    _2732 = _2590;
                    _2733 = _2592;
                    _2734 = _2594;
                    _2735 = _2596;
                    _2736 = _2598;
                    _2737 = _2738;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
        }
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.z;
        uint _2604 = (_2602 >> 8u) & 15u;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((4294967295u << _2604) & _2508) == 0u)
        {
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
            _2705 = _2593;
            _2707 = _2595;
            _2709 = _2597;
        }
        else
        {
            float _2724 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
            float _2725 = _2724 * _1566;
            float _2726 = _2724 * _1567;
            float _2727 = _2724 * _1568;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2604 < ((_2602 >> 12u) & 15u))
            {
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2838 = _2587;
                float _2839 = _2589;
                float _2840 = _2591;
                float _2841 = _2593;
                float _2842 = _2595;
                float _2843 = _2597;
                uint _2844 = _2604;
                uint _2853;
                bool _2854;
                for (;;)
                {
                    _2853 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                    _2854 = _2853 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2854)
                    {
                        frontier_phi_74_pred = _2840;
                        frontier_phi_74_pred_1 = _2839;
                        frontier_phi_74_pred_2 = _2838;
                        frontier_phi_74_pred_3 = _2843;
                        frontier_phi_74_pred_4 = _2842;
                        frontier_phi_74_pred_5 = _2841;
                    }
                    else
                    {
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3050 = _2838;
                        float _3051 = _2839;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        uint _3056 = _2853;
                        uint _3057;
                        vec4 _3082;
                        float _3083;
                        vec4 _3098;
                        vec3 _3110;
                        vec4 _3126;
                        vec4 _3142;
                        float _3189;
                        bool _3190;
                        for (;;)
                        {
                            uint _3067 = ((_2844 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3056));
                            _3057 = (_3056 + 4294967295u) & _3056;
                            uint _3069 = _3067 * 40u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3083 = _3082.w;
                            uint _3085 = (_3067 * 40u) + 4u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3067 * 40u) + 8u;
                            _3110 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x));
                            uint _3113 = (_3067 * 40u) + 16u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3129 = (_3067 * 40u) + 20u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3145 = (_3067 * 40u) + 24u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3164 = (_3067 * 40u) + 28u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3189 = fma(_1568, _3177.z, fma(_1567, _3177.y, _3177.x * _1566)) + _3177.w;
                            _3190 = !((fma(_1568, _3158.z, fma(_1567, _3158.y, _3158.x * _1566)) + _3158.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3190)
                            {
                                float _3217 = _3082.x - _1566;
                                float _3218 = _3082.y - _1567;
                                float _3219 = _3082.z - _1568;
                                float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                                float _3223 = inversesqrt(_3220);
                                float _3224 = _3223 * _3217;
                                float _3225 = _3223 * _3218;
                                float _3226 = _3223 * _3219;
                                float _3230 = 1.0 - (_3220 / (_3083 * _3083));
                                float _4319 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3235 = sqrt(_3220) * _3098.w;
                                float _3237 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                                float _3238 = _3237 * _3237;
                                float _3241 = ((1.0 - _3238) * dot(vec3(_3224, _3225, _3226), vec3(_423, _426, _429))) + _3238;
                                float _3244 = _3235 * _3235;
                                float _3248 = (fma(_1568, _3126.z, fma(_1567, _3126.y, _3126.x * _1566)) + _3126.w) / _3189;
                                float _3249 = (fma(_1568, _3142.z, fma(_1567, _3142.y, _3142.x * _1566)) + _3142.w) / _3189;
                                float _3253 = 1.0 - dot(vec2(_3248, _3249), vec2(_3248, _3249));
                                float _4335 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3255 = _3254 * (((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3231) / ((_3244 * 0.699999988079071044921875) + 1.0));
                                float _3267 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _499;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3224 - _2725;
                                float _3279 = _3225 - _2726;
                                float _3280 = _3226 - _2727;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_423, _426, _429), vec3((-0.0) - _2725, (-0.0) - _2726, (-0.0) - _2727));
                                float _4346 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3292 = dot(vec3(_423, _426, _429), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4357 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3237 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_423, _426, _429), vec3(_3224, _3225, _3226))) + _3301;
                                float _4368 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4379 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3254 * _3231) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3299 * _3299) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3329 * _3110.z;
                                frontier_phi_80_pred_1 = _3329 * _3110.y;
                                frontier_phi_80_pred_2 = _3329 * _3110.x;
                                frontier_phi_80_pred_3 = _3255 * _3098.z;
                                frontier_phi_80_pred_4 = _3255 * _3098.y;
                                frontier_phi_80_pred_5 = _3255 * _3098.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3335 = frontier_phi_80_pred;
                            _3334 = frontier_phi_80_pred_1;
                            _3333 = frontier_phi_80_pred_2;
                            _3338 = frontier_phi_80_pred_3;
                            _3337 = frontier_phi_80_pred_4;
                            _3336 = frontier_phi_80_pred_5;
                            _3040 = _3336 + _3053;
                            _3041 = _3337 + _3054;
                            _3042 = _3338 + _3055;
                            _3037 = _3333 + _3050;
                            _3038 = _3334 + _3051;
                            _3039 = _3335 + _3052;
                            if (_3057 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3057;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3039;
                        frontier_phi_74_pred_1 = _3038;
                        frontier_phi_74_pred_2 = _3037;
                        frontier_phi_74_pred_3 = _3042;
                        frontier_phi_74_pred_4 = _3041;
                        frontier_phi_74_pred_5 = _3040;
                    }
                    _2704 = frontier_phi_74_pred;
                    _2702 = frontier_phi_74_pred_1;
                    _2700 = frontier_phi_74_pred_2;
                    _2710 = frontier_phi_74_pred_3;
                    _2708 = frontier_phi_74_pred_4;
                    _2706 = frontier_phi_74_pred_5;
                    uint _2845 = _2844 + 1u;
                    if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2838 = _2700;
                        _2839 = _2702;
                        _2840 = _2704;
                        _2841 = _2706;
                        _2842 = _2708;
                        _2843 = _2710;
                        _2844 = _2845;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2708;
                frontier_phi_62_63_ladder_1 = _2706;
                frontier_phi_62_63_ladder_2 = _2704;
                frontier_phi_62_63_ladder_3 = _2710;
                frontier_phi_62_63_ladder_4 = _2702;
                frontier_phi_62_63_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_62_63_ladder = _2595;
                frontier_phi_62_63_ladder_1 = _2593;
                frontier_phi_62_63_ladder_2 = _2591;
                frontier_phi_62_63_ladder_3 = _2597;
                frontier_phi_62_63_ladder_4 = _2589;
                frontier_phi_62_63_ladder_5 = _2587;
            }
            _2699 = frontier_phi_62_63_ladder_5;
            _2701 = frontier_phi_62_63_ladder_4;
            _2703 = frontier_phi_62_63_ladder_2;
            _2705 = frontier_phi_62_63_ladder_1;
            _2707 = frontier_phi_62_63_ladder;
            _2709 = frontier_phi_62_63_ladder_3;
        }
        float _2714 = isnan(1.0) ? _483 : (isnan(_483) ? 1.0 : min(_483, 1.0));
        _2520 = (_2714 * _2705) + _2033;
        _2522 = (_2714 * _2707) + _2035;
        _2524 = (_2714 * _2709) + _2037;
        _2526 = ((_2699 * _468) * _2714) + _2371;
        _2528 = ((_2701 * _470) * _2714) + _2373;
        _2530 = ((_2703 * _471) * _2714) + _2375;
    }
    else
    {
        _2520 = _2033;
        _2522 = _2035;
        _2524 = _2037;
        _2526 = _2371;
        _2528 = _2373;
        _2530 = _2375;
    }
    float _4395 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4406 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4417 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    uint _2550 = _442 + 6u;
    float _2558 = _401 / cbSceneParam._m0[86u].x;
    float _2559 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2573 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2575 = _2573.x;
    float _2576 = _2573.y;
    float _2577 = _2573.z;
    float _2578 = _2573.w;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2612 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2613 = _2612 / _335;
        float _2624 = _2613 * _386;
        float _2625 = _387 * _2613;
        float _2626 = (-0.0) - _2625;
        float _2627 = _2613 * _388;
        float _2629 = (cbSceneParam._m0[77u].w * _2626) / _2612;
        float _2630 = _2629 + cbSceneParam._m0[79u].w;
        float _2631 = cbSceneParam._m0[79u].w - _2625;
        float _2637 = sqrt(((_2624 * _2624) + (_2625 * _2625)) + (_2627 * _2627));
        float _2640 = (1.0 - (cbSceneParam._m0[77u].w / _2612)) * _2637;
        float _2645 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2647 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2800;
        if (abs((_2626 - _2629) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2800 = ((((_2630 > 0.0) ? exp2(_2645 * _2630) : (2.0 - exp2(_2647 * _2630))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2640;
        }
        else
        {
            float _2760 = 1.0 / cbSceneParam._m0[80u].x;
            float _2761 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : max(_2630, _2631));
            float _2762 = isnan(_2631) ? _2630 : (isnan(_2630) ? _2631 : min(_2630, _2631));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            _2800 = ((abs(_2637 / _2626) * cbSceneParam._m0[80u].y) * ((((_2771 - _2772) * 2.0) - ((exp2(_2645 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)))) - exp2(_2645 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))))) * _2760)) - ((exp2(_2647 * _2771) - exp2(_2647 * _2772)) * _2760))) + (_2640 * cbSceneParam._m0[80u].z);
        }
        vec4 _2802 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, 1.0), 0.0);
        float _2811 = exp2((_2800 * (-1.44269502162933349609375)) * (1.0 - _2802.w));
        float _2812 = log2(_2811);
        float _2828 = log2(_2578);
        _2649 = (exp2(_2828 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].x)) * _2802.x) / cbSceneParam._m0[78u].x)) + _2575;
        _2651 = (exp2(_2828 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].y)) * _2802.y) / cbSceneParam._m0[78u].y)) + _2576;
        _2653 = (exp2(_2828 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2812 * cbSceneParam._m0[78u].z)) * _2802.z) / cbSceneParam._m0[78u].z)) + _2577;
        _2655 = _2811 * _2578;
    }
    else
    {
        _2649 = _2575;
        _2651 = _2576;
        _2653 = _2577;
        _2655 = _2578;
    }
    float _2667 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2668 = _2667 == 3.0;
    float _2669 = log2(_2655);
    float _2676 = exp2(_2669 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2520 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _483))) + ((_2526 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2677 = exp2(_2669 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2522 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _483))) + ((_2528 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2678 = exp2(_2669 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2524 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _483))) + ((_2530 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2687 = (_2667 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2687 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.y = _2687 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.z = _2687 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.w = cbInstanceData._m0[_2550].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2550].w;
}


