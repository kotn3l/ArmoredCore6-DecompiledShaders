#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _751;
float _2940;
float _2941;
float _2942;
float _2943;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    float _209 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _210 = _209 * _175;
    float _211 = _209 * _176;
    float _212 = _209 * _177;
    float _2952 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _2963 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2974 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _232 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    float _290 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _291 = _284 * _290;
    float _292 = _285 * _290;
    float _293 = _286 * _290;
    vec4 _298 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _300 = _298.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _430 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _436 = (cbMatDynParam._m0[5u].x * _430) + cbMatDynParam._m0[5u].y;
        float _2985 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
        float _437 = isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0));
        float _441 = (cbMatDynParam._m0[5u].z * _430) + cbMatDynParam._m0[5u].w;
        float _2996 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) - _437)) + _437) < ((_300 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _312 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _313 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _333 = fma(_212, cbSceneParam._m0[5u].z, fma(_211, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _210));
    float _336 = fma(_212, cbSceneParam._m0[6u].z, fma(_211, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _210));
    float _339 = fma(_212, cbSceneParam._m0[7u].z, fma(_211, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _210));
    uint _352 = uint(roundEven(NORMAL.w)) * 13u;
    uint _354 = _352 + 9u;
    uint _355 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _361 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0)))) * cbInstanceData._m0[_355].x;
    float _362 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0)))) * cbInstanceData._m0[_355].y;
    float _363 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0)))) * cbInstanceData._m0[_355].z;
    float _3007 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
    float _3018 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
    float _3029 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
    vec4 _375 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _312, cbSceneParam._m0[86u].y * _313));
    float _378 = _375.x * TEXCOORD.z;
    float _379 = dot(vec3(_210, _211, _212), vec3(_291, _292, _293));
    float _382 = _379 * 2.0;
    float _387 = (_382 * _210) - _291;
    float _388 = (_382 * _211) - _292;
    float _389 = (_382 * _212) - _293;
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _750;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _475 = fma(_419, cbModelParam._m0[26u].z, fma(_415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _411));
        float _479 = fma(_419, cbModelParam._m0[27u].z, fma(_415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _411));
        float _483 = fma(_419, cbModelParam._m0[28u].z, fma(_415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _411));
        float _508 = _411 + _210;
        float _509 = _415 + _211;
        float _510 = _419 + _212;
        float _520 = fma(_510, cbModelParam._m0[26u].z, fma(_509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508)) - _475;
        float _521 = fma(_510, cbModelParam._m0[27u].z, fma(_509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508)) - _479;
        float _522 = fma(_510, cbModelParam._m0[28u].z, fma(_509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508)) - _483;
        float _526 = inversesqrt(dot(vec3(_520, _521, _522), vec3(_520, _521, _522)));
        float _539 = ((_526 * _520) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_475 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _540 = ((_526 * _521) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_479 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _541 = ((_526 * _522) / cbModelParam._m0[34u].z) + ((((((_483 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        float _578 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _578 * (_544.x + (-0.5));
        float _580 = _578 * (_544.y + (-0.5));
        float _581 = _578 * (_544.z + (-0.5));
        float _588 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_551.x + (-0.5));
        float _590 = _588 * (_551.y + (-0.5));
        float _591 = _588 * (_551.z + (-0.5));
        float _598 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_558.x + (-0.5));
        float _600 = _598 * (_558.y + (-0.5));
        float _601 = _598 * (_558.z + (-0.5));
        float _608 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_565.x + (-0.5));
        float _610 = _608 * (_565.y + (-0.5));
        float _611 = _608 * (_565.z + (-0.5));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = _579 * 0.5;
        float _616 = _589 * 0.5;
        float _617 = _599 * 0.5;
        float _618 = dot(vec3(_615, _616, _617), vec3(_615, _616, _617));
        float _623 = (_618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_618);
        float _632 = (dot(vec3(_210, _211, _212), vec3(_623 * _615, _623 * _616, _623 * _617)) + 1.0) * 0.5;
        float _3055 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _642 = sqrt(((_616 * _616) + (_615 * _615)) + (_617 * _617)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3066 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
        float _644 = _643 * 2.0;
        float _648 = (1.0 - _643) / (_643 + 1.0);
        float _3077 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
        float _658 = ((((1.0 - _649) * (_644 + 2.0)) * exp2(log2(isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0))) * (_644 + 1.0))) + _649) * _612;
        float _659 = _580 * 0.5;
        float _660 = _590 * 0.5;
        float _661 = _600 * 0.5;
        float _662 = dot(vec3(_659, _660, _661), vec3(_659, _660, _661));
        float _667 = (_662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_662);
        float _675 = (dot(vec3(_210, _211, _212), vec3(_667 * _659, _667 * _660, _667 * _661)) + 1.0) * 0.5;
        float _3088 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _684 = sqrt(((_660 * _660) + (_659 * _659)) + (_661 * _661)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3099 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _686 = _685 * 2.0;
        float _690 = (1.0 - _685) / (_685 + 1.0);
        float _3110 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _700 = ((((1.0 - _691) * (_686 + 2.0)) * exp2(log2(isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0))) * (_686 + 1.0))) + _691) * _613;
        float _701 = _581 * 0.5;
        float _702 = _591 * 0.5;
        float _703 = _601 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _717 = (dot(vec3(_210, _211, _212), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _3121 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _726 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3132 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3143 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * (_728 + 1.0))) + _733) * _614;
        _750 = _581;
        _752 = _580;
        _753 = _579;
        _754 = _591;
        _755 = _590;
        _756 = _589;
        _757 = _601;
        _758 = _600;
        _759 = _599;
        _760 = _614;
        _761 = _613;
        _762 = _612;
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0)));
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0)));
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
    }
    else
    {
        _750 = _751;
        _752 = _751;
        _753 = _751;
        _754 = _751;
        _755 = _751;
        _756 = _751;
        _757 = _751;
        _758 = _751;
        _759 = _751;
        _760 = _751;
        _761 = _751;
        _762 = _751;
        _763 = 0.0;
        _764 = 0.0;
        _765 = 0.0;
    }
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _794 = fma(_419, cbModelParam._m0[30u].z, fma(_415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _411));
        float _798 = fma(_419, cbModelParam._m0[31u].z, fma(_415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _411));
        float _802 = fma(_419, cbModelParam._m0[32u].z, fma(_415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _411));
        float _825 = _411 + _210;
        float _826 = _415 + _211;
        float _827 = _419 + _212;
        float _837 = fma(_827, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825)) - _794;
        float _838 = fma(_827, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825)) - _798;
        float _839 = fma(_827, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825)) - _802;
        float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
        float _856 = ((_843 * _837) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_794 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_843 * _838) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_798 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_843 * _839) / cbModelParam._m0[35u].z) + ((((((_802 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _893 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_860.x + (-0.5));
        float _895 = _893 * (_860.y + (-0.5));
        float _896 = _893 * (_860.z + (-0.5));
        float _903 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_867.x + (-0.5));
        float _905 = _903 * (_867.y + (-0.5));
        float _906 = _903 * (_867.z + (-0.5));
        float _913 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_874.x + (-0.5));
        float _915 = _913 * (_874.y + (-0.5));
        float _916 = _913 * (_874.z + (-0.5));
        float _923 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_881.x + (-0.5));
        float _925 = _923 * (_881.y + (-0.5));
        float _926 = _923 * (_881.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_210, _211, _212), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3184 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3195 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3206 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) * (_957 + 1.0))) + _962) * _927;
        float _972 = _895 * 0.5;
        float _973 = _905 * 0.5;
        float _974 = _915 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_210, _211, _212), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3239 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_999 + 1.0))) + _1004) * _928;
        float _1014 = _896 * 0.5;
        float _1015 = _906 * 0.5;
        float _1016 = _916 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_210, _211, _212), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3272 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_1041 + 1.0))) + _1046) * _929;
        _1063 = _896;
        _1064 = _895;
        _1065 = _894;
        _1066 = _906;
        _1067 = _905;
        _1068 = _904;
        _1069 = _916;
        _1070 = _915;
        _1071 = _914;
        _1072 = _929;
        _1073 = _928;
        _1074 = _927;
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _751;
        _1064 = _751;
        _1065 = _751;
        _1066 = _751;
        _1067 = _751;
        _1068 = _751;
        _1069 = _751;
        _1070 = _751;
        _1071 = _751;
        _1072 = _751;
        _1073 = _751;
        _1074 = _751;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _763)) + _763;
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _764)) + _764;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _765)) + _765;
    float _1110 = fma(_1089, cbSceneParam._m0[89u].z, fma(_1088, cbSceneParam._m0[89u].y, _1087 * cbSceneParam._m0[89u].x));
    float _1113 = fma(_1089, cbSceneParam._m0[90u].z, fma(_1088, cbSceneParam._m0[90u].y, _1087 * cbSceneParam._m0[90u].x));
    float _1116 = fma(_1089, cbSceneParam._m0[91u].z, fma(_1088, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1087));
    float _1131 = _387 * 0.5;
    float _1132 = _388 * 0.5;
    float _1133 = _389 * 0.5;
    float _1134 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1137 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1140 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1174;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1147 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_750, _754, _757, _760));
        float _1151 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_752, _755, _758, _761));
        float _1155 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_753, _756, _759, _762));
        float _1162 = dot(vec4(cbModelParam._m0[39u]), vec4(_1131, _1132, _1133, 1.0));
        _1174 = dot(vec3(isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1162) ? 0.0 : (isnan(0.0) ? _1162 : max(0.0, _1162))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1174 = 1.0;
    }
    float _1185;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1176 = dot(vec4(cbModelParam._m0[40u]), vec4(_1131, _1132, _1133, 1.0));
        _1185 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1185 = 1.0;
    }
    float _1189 = (_1185 * cbModelParam._m0[1u].x) + (_1174 * (1.0 - cbModelParam._m0[1u].x));
    float _1198 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1280;
    float _1282;
    float _1284;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1247 = fma(_419, cbModelParam._m0[13u].z, fma(_415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411)) + cbModelParam._m0[13u].w;
        float _1251 = fma(_419, cbModelParam._m0[14u].z, fma(_415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411)) + cbModelParam._m0[14u].w;
        float _1255 = fma(_419, cbModelParam._m0[15u].z, fma(_415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411)) + cbModelParam._m0[15u].w;
        float _1258 = fma(_389, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387));
        float _1261 = fma(_389, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387));
        float _1264 = fma(_389, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387));
        float _1290;
        if (_1258 > 0.0)
        {
            _1290 = abs((1.0 - _1247) / _1258);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1247 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1290 = frontier_phi_19_17_ladder;
        }
        float _1519;
        if (_1261 > 0.0)
        {
            _1519 = abs((1.0 - _1251) / _1261);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1251 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1519 = frontier_phi_28_24_ladder;
        }
        float _1711;
        if (_1264 > 0.0)
        {
            _1711 = abs((1.0 - _1255) / _1264);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1255 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1711 = frontier_phi_40_35_ladder;
        }
        float _1713 = isnan(_1519) ? _1290 : (isnan(_1290) ? _1519 : min(_1290, _1519));
        float _1714 = isnan(_1711) ? _1713 : (isnan(_1713) ? _1711 : min(_1713, _1711));
        float _1718 = (_1714 * _1258) + _1247;
        float _1719 = (_1714 * _1261) + _1251;
        float _1720 = (_1714 * _1264) + _1255;
        float _1721 = _1714 * 9.9999997473787516355514526367188e-05;
        float _1723 = (-1.0) - _1721;
        float _1725 = _1721 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1720 > _1725) || ((_1720 < _1723) || ((_1719 > _1725) || ((_1719 < _1723) || ((_1718 < _1723) || (_1718 > _1725))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1720, cbModelParam._m0[9u].z, fma(_1719, cbModelParam._m0[9u].y, _1718 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1720, cbModelParam._m0[10u].z, fma(_1719, cbModelParam._m0[10u].y, _1718 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1720, cbModelParam._m0[11u].z, fma(_1719, cbModelParam._m0[11u].y, _1718 * cbModelParam._m0[11u].x))), _1198);
            frontier_phi_18_40_ladder = _1817.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1817.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1817.x * cbModelParam._m0[1u].y;
        }
        _1280 = frontier_phi_18_40_ladder_2;
        _1282 = frontier_phi_18_40_ladder_1;
        _1284 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_387, _388, _389), _1198);
        _1280 = _1268.x * cbModelParam._m0[1u].y;
        _1282 = _1268.y * cbModelParam._m0[1u].y;
        _1284 = _1268.z * cbModelParam._m0[1u].y;
    }
    float _1287 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1344 = fma(_419, cbModelParam._m0[21u].z, fma(_415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411)) + cbModelParam._m0[21u].w;
        float _1348 = fma(_419, cbModelParam._m0[22u].z, fma(_415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411)) + cbModelParam._m0[22u].w;
        float _1352 = fma(_419, cbModelParam._m0[23u].z, fma(_415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411)) + cbModelParam._m0[23u].w;
        float _1355 = fma(_389, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387));
        float _1358 = fma(_389, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387));
        float _1361 = fma(_389, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387));
        float _1524;
        if (_1355 > 0.0)
        {
            _1524 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1524 = frontier_phi_30_26_ladder;
        }
        float _1738;
        if (_1358 > 0.0)
        {
            _1738 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1738 = frontier_phi_42_37_ladder;
        }
        float _1889;
        if (_1361 > 0.0)
        {
            _1889 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1889 = frontier_phi_51_48_ladder;
        }
        float _1891 = isnan(_1738) ? _1524 : (isnan(_1524) ? _1738 : min(_1524, _1738));
        float _1892 = isnan(_1889) ? _1891 : (isnan(_1891) ? _1889 : min(_1891, _1889));
        float _1896 = (_1892 * _1355) + _1344;
        float _1897 = (_1892 * _1358) + _1348;
        float _1898 = (_1892 * _1361) + _1352;
        float _1899 = _1892 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1899;
        float _1902 = _1899 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1898 > _1902) || ((_1898 < _1900) || ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 < _1900) || (_1896 > _1902))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1898, cbModelParam._m0[17u].z, fma(_1897, cbModelParam._m0[17u].y, _1896 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1898, cbModelParam._m0[18u].z, fma(_1897, cbModelParam._m0[18u].y, _1896 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1898, cbModelParam._m0[19u].z, fma(_1897, cbModelParam._m0[19u].y, _1896 * cbModelParam._m0[19u].x))), _1287);
            frontier_phi_27_51_ladder = _2096.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2096.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2096.x * cbModelParam._m0[1u].z;
        }
        _1380 = frontier_phi_27_51_ladder_2;
        _1382 = frontier_phi_27_51_ladder_1;
        _1384 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_387, _388, _389), _1287);
        _1380 = _1364.x * cbModelParam._m0[1u].z;
        _1382 = _1364.y * cbModelParam._m0[1u].z;
        _1384 = _1364.z * cbModelParam._m0[1u].z;
    }
    float _1396 = _378 * 0.01200000010430812835693359375;
    float _1398 = _1396 * ((cbModelParam._m0[1u].w * (_1380 - _1280)) + _1280);
    float _1399 = _1396 * ((cbModelParam._m0[1u].w * (_1382 - _1282)) + _1282);
    float _1400 = _1396 * ((cbModelParam._m0[1u].w * (_1384 - _1284)) + _1284);
    float _1403 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, _1398 * cbSceneParam._m0[91u].x));
    vec4 _1417 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_312, _313));
    float _1419 = _1417.w;
    float _1431 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1419);
    float _1432 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1419);
    float _1433 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1419);
    uvec4 _1437 = floatBitsToUint(cbInstanceData._m0[_352 + 5u]);
    uint _1439 = _1437.x * 14u;
    uint _1440 = _1439 + 13u;
    float _1447 = _378 + (-1.0);
    float _1453 = (cbLight._m0[_1440].x * _1447) + 1.0;
    float _1454 = (cbLight._m0[_1440].y * _1447) + 1.0;
    float _1455 = (cbLight._m0[_1440].z * _1447) + 1.0;
    float _1456 = (cbLight._m0[_1440].w * _1447) + 1.0;
    uint _1457 = _1439 + 5u;
    float _1463 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
    uint _1467 = _1439 + 4u;
    float _1477 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
    uint _1481 = _1439 | 1u;
    float _1492 = dot(vec3(cbLight._m0[_1439].xyz), vec3(_210, _211, _212));
    float _1495 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_210, _211, _212));
    float _3408 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _3419 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _1500 = (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * 0.3183098733425140380859375;
    float _1502 = (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.3183098733425140380859375;
    float _1509 = ((cbLight._m0[_1457].x * _1463) * _1502) + (((cbLight._m0[_1467].x * _1431) * _1477) * _1500);
    float _1510 = ((_1463 * cbLight._m0[_1457].y) * _1502) + (((cbLight._m0[_1467].y * _1432) * _1477) * _1500);
    float _1511 = ((_1463 * cbLight._m0[_1457].z) * _1502) + (((cbLight._m0[_1467].z * _1433) * _1477) * _1500);
    uvec4 _1516 = floatBitsToUint(cbLight._m0[_1439 + 12u]);
    bool _1518 = _1516.x == 0u;
    float _1529;
    float _1531;
    float _1533;
    if (_1518)
    {
        _1529 = _1509;
        _1531 = _1510;
        _1533 = _1511;
    }
    else
    {
        uint _1537 = _1439 + 6u;
        float _1553 = (dot(vec3(cbLight._m0[_1439 + 2u].xyz), vec3(_210, _211, _212)) * 0.5) + 0.5;
        float _1554 = _1553 * _1553;
        float _3430 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1556 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1529 = (((cbLight._m0[_1537].x * 0.3183098733425140380859375) * _1555) * _1556) + _1509;
        _1531 = (((cbLight._m0[_1537].y * 0.3183098733425140380859375) * _1555) * _1556) + _1510;
        _1533 = (((cbLight._m0[_1537].z * 0.3183098733425140380859375) * _1555) * _1556) + _1511;
    }
    bool _1536 = _1516.y == 0u;
    float _1574;
    float _1576;
    float _1578;
    if (_1536)
    {
        _1574 = _1529;
        _1576 = _1531;
        _1578 = _1533;
    }
    else
    {
        uint _1682 = _1439 + 7u;
        float _1698 = (dot(vec3(cbLight._m0[_1439 + 3u].xyz), vec3(_210, _211, _212)) * 0.5) + 0.5;
        float _1699 = _1698 * _1698;
        float _3446 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1701 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1574 = (((cbLight._m0[_1682].x * 0.3183098733425140380859375) * _1700) * _1701) + _1529;
        _1576 = (((cbLight._m0[_1682].y * 0.3183098733425140380859375) * _1700) * _1701) + _1531;
        _1578 = (((cbLight._m0[_1682].z * 0.3183098733425140380859375) * _1700) * _1701) + _1533;
    }
    uint _1580 = _1439 + 8u;
    float _1586 = cbLight._m0[_1439].x + _291;
    float _1587 = cbLight._m0[_1439].y + _292;
    float _1588 = cbLight._m0[_1439].z + _293;
    float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
    float _1596 = dot(vec3(_210, _211, _212), vec3(cbLight._m0[_1439].xyz));
    float _3462 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1599 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _1600 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _1601 = dot(vec3(cbLight._m0[_1439].xyz), vec3(_1586 * _1592, _1587 * _1592, _1588 * _1592));
    float _3484 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1612 = (exp2(log2(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1618 = (0.5 / ((_1599 + 9.9999999392252902907785028219223e-09) + _1600)) * _1599;
    float _3495 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1620 = (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 0.31831014156341552734375;
    uint _1634 = _1439 + 9u;
    float _1640 = cbLight._m0[_1481].x + _291;
    float _1641 = cbLight._m0[_1481].y + _292;
    float _1642 = cbLight._m0[_1481].z + _293;
    float _1646 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
    float _1650 = dot(vec3(_210, _211, _212), vec3(cbLight._m0[_1481].xyz));
    float _3506 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1653 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _1654 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1640 * _1646, _1641 * _1646, _1642 * _1646));
    float _3517 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1663 = (exp2(log2(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1667 = (0.5 / ((_1653 + 9.9999999392252902907785028219223e-09) + _1600)) * _1653;
    float _3528 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1669 = (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.31831014156341552734375;
    float _1679 = (((_1663 * cbLight._m0[_1634].x) * _1669) * _1463) + ((((cbLight._m0[_1580].x * _1431) * _1612) * _1620) * _1477);
    float _1680 = (((_1663 * cbLight._m0[_1634].y) * _1669) * _1463) + ((((cbLight._m0[_1580].y * _1432) * _1612) * _1620) * _1477);
    float _1681 = (((_1663 * cbLight._m0[_1634].z) * _1669) * _1463) + ((((cbLight._m0[_1580].z * _1433) * _1612) * _1620) * _1477);
    float _1743;
    float _1745;
    float _1747;
    if (_1518)
    {
        _1743 = _1679;
        _1745 = _1680;
        _1747 = _1681;
    }
    else
    {
        uint _1749 = _1439 + 10u;
        uint _1755 = _1439 + 2u;
        float _1761 = cbLight._m0[_1755].x + _291;
        float _1762 = cbLight._m0[_1755].y + _292;
        float _1763 = cbLight._m0[_1755].z + _293;
        float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
        float _1771 = dot(vec3(_210, _211, _212), vec3(cbLight._m0[_1755].xyz));
        float _3539 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1774 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1775 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1761 * _1767, _1762 * _1767, _1763 * _1767));
        float _3550 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1784 = (exp2(log2(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1788 = (0.5 / ((_1774 + 9.9999999392252902907785028219223e-09) + _1600)) * _1774;
        float _3561 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1790 = (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 0.31831014156341552734375;
        float _1791 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1743 = (((_1784 * cbLight._m0[_1749].x) * _1790) * _1791) + _1679;
        _1745 = (((_1784 * cbLight._m0[_1749].y) * _1790) * _1791) + _1680;
        _1747 = (((_1784 * cbLight._m0[_1749].z) * _1790) * _1791) + _1681;
    }
    float _1826;
    float _1828;
    float _1830;
    if (_1536)
    {
        _1826 = _1743;
        _1828 = _1745;
        _1830 = _1747;
    }
    else
    {
        uint _1837 = _1439 + 11u;
        uint _1843 = _1439 + 3u;
        float _1849 = cbLight._m0[_1843].x + _291;
        float _1850 = cbLight._m0[_1843].y + _292;
        float _1851 = cbLight._m0[_1843].z + _293;
        float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
        float _1859 = dot(vec3(_210, _211, _212), vec3(cbLight._m0[_1843].xyz));
        float _3577 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1862 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1863 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_1849 * _1855, _1850 * _1855, _1851 * _1855));
        float _3588 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1872 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1876 = (0.5 / ((_1862 + 9.9999999392252902907785028219223e-09) + _1600)) * _1862;
        float _3599 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1878 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.31831014156341552734375;
        float _1879 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1826 = (((_1872 * cbLight._m0[_1837].x) * _1878) * _1879) + _1743;
        _1828 = (((_1872 * cbLight._m0[_1837].y) * _1878) * _1879) + _1745;
        _1830 = (((_1872 * cbLight._m0[_1837].z) * _1878) * _1879) + _1747;
    }
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    if (_1437.y == 0u)
    {
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1954;
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1954;
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1954;
        uvec4 _1969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1970 = _1969.x;
        uint _1981 = uint((float(_1969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _313) / _1970))) + floor(float(uint(cbSceneParam._m0[85u].x * _312) / _1970)));
        float _1991 = (log2(_1957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1992 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        uint _1995 = uint(isnan(14.0) ? _1992 : (isnan(_1992) ? 14.0 : min(_1992, 14.0)));
        uvec4 _2000 = texelFetch(g_lightClusterGridBuffer, int(((_1995 << 2u) + (_1981 << 6u)) >> 2u));
        uint _2001 = _2000.x;
        uint _2002 = _1969.z;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        if (((((1u << ((_2002 >> 4u) & 15u)) + 4294967295u) & _2001) == 0u) || ((_2002 & 240u) == 0u))
        {
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
        }
        else
        {
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2112;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            uint _2258 = 0u;
            uint _2267;
            bool _2268;
            for (;;)
            {
                _2267 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2258 << 2u)) >> 2u)).x;
                _2268 = _2267 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2268)
                {
                    frontier_phi_68_pred = _2254;
                    frontier_phi_68_pred_1 = _2257;
                    frontier_phi_68_pred_2 = _2256;
                    frontier_phi_68_pred_3 = _2255;
                    frontier_phi_68_pred_4 = _2253;
                    frontier_phi_68_pred_5 = _2252;
                }
                else
                {
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    uint _2403;
                    _2397 = _2252;
                    _2398 = _2253;
                    _2399 = _2254;
                    _2400 = _2255;
                    _2401 = _2256;
                    _2402 = _2257;
                    _2403 = _2267;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    for (;;)
                    {
                        uint _2407 = uint(findLSB(_2403)) + (_2258 << 5u);
                        uint _2404 = (_2403 + 4294967295u) & _2403;
                        uint _2409 = _2407 * 48u;
                        vec4 _2423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2409)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 3u)).x));
                        uint _2429 = (_2407 * 48u) + 4u;
                        vec4 _2442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2429)).x, texelFetch(g_PointLightRenderingBuffer, int(_2429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2429 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2429 + 3u)).x));
                        uint _2448 = (_2407 * 48u) + 8u;
                        vec3 _2459 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2448)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 2u)).x));
                        float _2463 = _2423.x - _1955;
                        float _2464 = _2423.y - _1956;
                        float _2465 = _2423.z - _1957;
                        float _2466 = dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465));
                        float _2469 = inversesqrt(_2466);
                        float _2478 = 1.0 - (_2466 * _2423.w);
                        float _3625 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
                        float _2479 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
                        float _2480 = sqrt(_2466) * _2442.w;
                        float _2483 = 1.39999997615814208984375 / (_2480 + 1.39999997615814208984375);
                        float _2484 = _2483 * _2483;
                        float _2487 = ((1.0 - _2484) * dot(vec3(_333, _336, _339), vec3(_2469 * _2463, _2469 * _2464, _2469 * _2465))) + _2484;
                        float _2490 = _2480 * _2480;
                        float _2494 = ((isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0))) * _2479) / ((_2490 * 0.699999988079071044921875) + 1.0);
                        float _2498 = (-0.0) - _1955;
                        float _2499 = (-0.0) - _1956;
                        float _2500 = (-0.0) - _1957;
                        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
                        float _2508 = dot(vec3(_333, _336, _339), vec3(_2504 * _2498, _2504 * _2499, _2504 * _2500));
                        float _3641 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _3652 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
                        float _2512 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
                        float _2516 = (0.5 / (((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) + 9.9999999392252902907785028219223e-09) + _2512)) * _2512;
                        float _3663 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
                        float _2525 = (((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 3.1415927410125732421875) / ((_2490 * 2.1991131305694580078125) + 3.141590118408203125)) * _2479;
                        _2327 = (_2494 * _2442.x) + _2400;
                        _2328 = (_2494 * _2442.y) + _2401;
                        _2329 = (_2494 * _2442.z) + _2402;
                        _2324 = (_2525 * _2459.x) + _2397;
                        _2325 = (_2525 * _2459.y) + _2398;
                        _2326 = (_2525 * _2459.z) + _2399;
                        if (_2404 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2397 = _2324;
                            _2398 = _2325;
                            _2399 = _2326;
                            _2400 = _2327;
                            _2401 = _2328;
                            _2402 = _2329;
                            _2403 = _2404;
                        }
                    }
                    frontier_phi_68_pred = _2326;
                    frontier_phi_68_pred_1 = _2329;
                    frontier_phi_68_pred_2 = _2328;
                    frontier_phi_68_pred_3 = _2327;
                    frontier_phi_68_pred_4 = _2325;
                    frontier_phi_68_pred_5 = _2324;
                }
                _2106 = frontier_phi_68_pred;
                _2112 = frontier_phi_68_pred_1;
                _2110 = frontier_phi_68_pred_2;
                _2108 = frontier_phi_68_pred_3;
                _2104 = frontier_phi_68_pred_4;
                _2102 = frontier_phi_68_pred_5;
                uint _2259 = _2258 + 1u;
                if (_2259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2252 = _2102;
                    _2253 = _2104;
                    _2254 = _2106;
                    _2255 = _2108;
                    _2256 = _2110;
                    _2257 = _2112;
                    _2258 = _2259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
        }
        uvec4 _2115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2116 = _2115.z;
        uint _2118 = (_2116 >> 8u) & 15u;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        if (((4294967295u << _2118) & _2001) == 0u)
        {
            _2223 = _2101;
            _2225 = _2103;
            _2227 = _2105;
            _2229 = _2107;
            _2231 = _2109;
            _2233 = _2111;
        }
        else
        {
            float _2248 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2118 < ((_2116 >> 12u) & 15u))
            {
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2380 = _2101;
                float _2381 = _2103;
                float _2382 = _2105;
                float _2383 = _2107;
                float _2384 = _2109;
                float _2385 = _2111;
                uint _2386 = _2118;
                uint _2395;
                bool _2396;
                for (;;)
                {
                    _2395 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2386 << 2u)) >> 2u)).x;
                    _2396 = _2395 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2396)
                    {
                        frontier_phi_79_pred = _2385;
                        frontier_phi_79_pred_1 = _2384;
                        frontier_phi_79_pred_2 = _2383;
                        frontier_phi_79_pred_3 = _2382;
                        frontier_phi_79_pred_4 = _2381;
                        frontier_phi_79_pred_5 = _2380;
                    }
                    else
                    {
                        float _2539;
                        float _2540;
                        float _2541;
                        float _2542;
                        float _2543;
                        float _2544;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2552 = _2380;
                        float _2553 = _2381;
                        float _2554 = _2382;
                        float _2555 = _2383;
                        float _2556 = _2384;
                        float _2557 = _2385;
                        uint _2558 = _2395;
                        uint _2559;
                        vec4 _2584;
                        float _2585;
                        vec4 _2600;
                        vec3 _2612;
                        vec4 _2628;
                        vec4 _2644;
                        float _2691;
                        bool _2692;
                        for (;;)
                        {
                            uint _2569 = ((_2386 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2558));
                            _2559 = (_2558 + 4294967295u) & _2558;
                            uint _2571 = _2569 * 40u;
                            _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            _2585 = _2584.w;
                            uint _2587 = (_2569 * 40u) + 4u;
                            _2600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 3u)).x));
                            uint _2602 = (_2569 * 40u) + 8u;
                            _2612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 2u)).x));
                            uint _2615 = (_2569 * 40u) + 16u;
                            _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            uint _2631 = (_2569 * 40u) + 20u;
                            _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2647 = (_2569 * 40u) + 24u;
                            vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 3u)).x));
                            uint _2666 = (_2569 * 40u) + 28u;
                            vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            _2691 = fma(_1957, _2679.z, fma(_1956, _2679.y, _2679.x * _1955)) + _2679.w;
                            _2692 = !((fma(_1957, _2660.z, fma(_1956, _2660.y, _2660.x * _1955)) + _2660.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2692)
                            {
                                float _2719 = _2584.x - _1955;
                                float _2720 = _2584.y - _1956;
                                float _2721 = _2584.z - _1957;
                                float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                                float _2725 = inversesqrt(_2722);
                                float _2726 = _2725 * _2719;
                                float _2727 = _2725 * _2720;
                                float _2728 = _2725 * _2721;
                                float _2732 = 1.0 - (_2722 / (_2585 * _2585));
                                float _3674 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                                float _2733 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
                                float _2737 = sqrt(_2722) * _2600.w;
                                float _2739 = 1.39999997615814208984375 / (_2737 + 1.39999997615814208984375);
                                float _2740 = _2739 * _2739;
                                float _2741 = 1.0 - _2740;
                                float _2743 = (_2741 * dot(vec3(_2726, _2727, _2728), vec3(_333, _336, _339))) + _2740;
                                float _2746 = _2737 * _2737;
                                float _2750 = (fma(_1957, _2628.z, fma(_1956, _2628.y, _2628.x * _1955)) + _2628.w) / _2691;
                                float _2751 = (fma(_1957, _2644.z, fma(_1956, _2644.y, _2644.x * _1955)) + _2644.w) / _2691;
                                float _2755 = 1.0 - dot(vec2(_2750, _2751), vec2(_2750, _2751));
                                float _3690 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2756 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
                                float _2757 = _2756 * (((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2733) / ((_2746 * 0.699999988079071044921875) + 1.0));
                                float _2767 = dot(vec3(_333, _336, _339), vec3((-0.0) - (_1955 * _2248), (-0.0) - (_1956 * _2248), (-0.0) - (_1957 * _2248)));
                                float _3701 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                                float _2775 = (_2741 * dot(vec3(_333, _336, _339), vec3(_2726, _2727, _2728))) + _2740;
                                float _3712 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2776 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
                                float _2780 = (0.5 / (((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) + 9.9999999392252902907785028219223e-09) + _2776)) * _2776;
                                float _3723 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                                float _2787 = (_2756 * _2733) * (((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 3.1415927410125732421875) / ((_2746 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2757 * _2600.z;
                                frontier_phi_85_pred_1 = _2757 * _2600.y;
                                frontier_phi_85_pred_2 = _2757 * _2600.x;
                                frontier_phi_85_pred_3 = _2787 * _2612.z;
                                frontier_phi_85_pred_4 = _2787 * _2612.y;
                                frontier_phi_85_pred_5 = _2787 * _2612.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2796 = frontier_phi_85_pred;
                            _2795 = frontier_phi_85_pred_1;
                            _2794 = frontier_phi_85_pred_2;
                            _2793 = frontier_phi_85_pred_3;
                            _2792 = frontier_phi_85_pred_4;
                            _2791 = frontier_phi_85_pred_5;
                            _2542 = _2794 + _2555;
                            _2543 = _2795 + _2556;
                            _2544 = _2796 + _2557;
                            _2539 = _2791 + _2552;
                            _2540 = _2792 + _2553;
                            _2541 = _2793 + _2554;
                            if (_2559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2544;
                                _2558 = _2559;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2544;
                        frontier_phi_79_pred_1 = _2543;
                        frontier_phi_79_pred_2 = _2542;
                        frontier_phi_79_pred_3 = _2541;
                        frontier_phi_79_pred_4 = _2540;
                        frontier_phi_79_pred_5 = _2539;
                    }
                    _2234 = frontier_phi_79_pred;
                    _2232 = frontier_phi_79_pred_1;
                    _2230 = frontier_phi_79_pred_2;
                    _2228 = frontier_phi_79_pred_3;
                    _2226 = frontier_phi_79_pred_4;
                    _2224 = frontier_phi_79_pred_5;
                    uint _2387 = _2386 + 1u;
                    if (_2387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2380 = _2224;
                        _2381 = _2226;
                        _2382 = _2228;
                        _2383 = _2230;
                        _2384 = _2232;
                        _2385 = _2234;
                        _2386 = _2387;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2230;
                frontier_phi_60_61_ladder_1 = _2234;
                frontier_phi_60_61_ladder_2 = _2232;
                frontier_phi_60_61_ladder_3 = _2228;
                frontier_phi_60_61_ladder_4 = _2226;
                frontier_phi_60_61_ladder_5 = _2224;
            }
            else
            {
                frontier_phi_60_61_ladder = _2107;
                frontier_phi_60_61_ladder_1 = _2111;
                frontier_phi_60_61_ladder_2 = _2109;
                frontier_phi_60_61_ladder_3 = _2105;
                frontier_phi_60_61_ladder_4 = _2103;
                frontier_phi_60_61_ladder_5 = _2101;
            }
            _2223 = frontier_phi_60_61_ladder_5;
            _2225 = frontier_phi_60_61_ladder_4;
            _2227 = frontier_phi_60_61_ladder_3;
            _2229 = frontier_phi_60_61_ladder;
            _2231 = frontier_phi_60_61_ladder_2;
            _2233 = frontier_phi_60_61_ladder_1;
        }
        float _2238 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
        _2013 = (_2238 * _2229) + _1574;
        _2015 = (_2238 * _2231) + _1576;
        _2017 = (_2238 * _2233) + _1578;
        _2019 = ((_2223 * 0.039999999105930328369140625) * _2238) + _1826;
        _2021 = ((_2225 * 0.039999999105930328369140625) * _2238) + _1828;
        _2023 = ((_2227 * 0.039999999105930328369140625) * _2238) + _1830;
    }
    else
    {
        _2013 = _1574;
        _2015 = _1576;
        _2017 = _1578;
        _2019 = _1826;
        _2021 = _1828;
        _2023 = _1830;
    }
    float _3739 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3750 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3761 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _2040 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_2013 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _378))) + ((_2019 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    float _2041 = ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_2015 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _378))) + ((_2021 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    float _2042 = ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_2017 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _378))) + ((_2023 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    uint _2043 = _352 + 6u;
    float _2051 = _312 / cbSceneParam._m0[86u].x;
    float _2052 = _313 / cbSceneParam._m0[86u].y;
    vec4 _2066 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2051, _2052, (log2((isnan(cbSceneParam._m0[77u].w) ? _232 : (isnan(_232) ? cbSceneParam._m0[77u].w : min(_232, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2068 = _2066.x;
    float _2069 = _2066.y;
    float _2070 = _2066.z;
    float _2071 = _2066.w;
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    if (_232 > cbSceneParam._m0[78u].w)
    {
        float _2126 = isnan(_232) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _232 : min(cbSceneParam._m0[80u].w, _232));
        float _2127 = _2126 / _232;
        float _2138 = _2127 * _284;
        float _2139 = _285 * _2127;
        float _2140 = (-0.0) - _2139;
        float _2141 = _2127 * _286;
        float _2143 = (cbSceneParam._m0[77u].w * _2140) / _2126;
        float _2144 = _2143 + cbSceneParam._m0[79u].w;
        float _2145 = cbSceneParam._m0[79u].w - _2139;
        float _2151 = sqrt(((_2138 * _2138) + (_2139 * _2139)) + (_2141 * _2141));
        float _2154 = (1.0 - (cbSceneParam._m0[77u].w / _2126)) * _2151;
        float _2159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2337;
        if (abs((_2140 - _2143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2337 = ((((_2144 > 0.0) ? exp2(_2159 * _2144) : (2.0 - exp2(_2161 * _2144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2154;
        }
        else
        {
            float _2281 = 1.0 / cbSceneParam._m0[80u].x;
            float _2282 = isnan(_2145) ? _2144 : (isnan(_2144) ? _2145 : max(_2144, _2145));
            float _2283 = isnan(_2145) ? _2144 : (isnan(_2144) ? _2145 : min(_2144, _2145));
            float _2292 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : min(_2282, 0.0));
            float _2293 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : min(_2283, 0.0));
            _2337 = ((abs(_2151 / _2140) * cbSceneParam._m0[80u].y) * ((((_2292 - _2293) * 2.0) - ((exp2(_2159 * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0)))) - exp2(_2159 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))))) * _2281)) - ((exp2(_2161 * _2292) - exp2(_2161 * _2293)) * _2281))) + (_2154 * cbSceneParam._m0[80u].z);
        }
        vec4 _2339 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2051, _2052, 1.0), 0.0);
        float _2348 = exp2((_2337 * (-1.44269502162933349609375)) * (1.0 - _2339.w));
        float _2349 = log2(_2348);
        float _2365 = log2(_2071);
        _2163 = (exp2(_2365 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2349 * cbSceneParam._m0[78u].x)) * _2339.x) / cbSceneParam._m0[78u].x)) + _2068;
        _2165 = (exp2(_2365 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2349 * cbSceneParam._m0[78u].y)) * _2339.y) / cbSceneParam._m0[78u].y)) + _2069;
        _2167 = (exp2(_2365 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2349 * cbSceneParam._m0[78u].z)) * _2339.z) / cbSceneParam._m0[78u].z)) + _2070;
        _2169 = _2348 * _2071;
    }
    else
    {
        _2163 = _2068;
        _2165 = _2069;
        _2167 = _2070;
        _2169 = _2071;
    }
    bool _2375;
    vec4 _2179;
    vec4 _2202;
    float _2204;
    float _2208;
    float _2209;
    float _2210;
    float _2211;
    bool _2222;
    for (;;)
    {
        _2179 = cbMatDynParam._m0[0u];
        float _2181 = roundEven(_2179.y);
        bool _2182 = _2181 == 3.0;
        float _2184 = log2(_2169);
        float _2191 = exp2(_2184 * cbSceneParam._m0[78u].x) * _2040;
        float _2192 = exp2(_2184 * cbSceneParam._m0[78u].y) * _2041;
        float _2193 = exp2(_2184 * cbSceneParam._m0[78u].z) * _2042;
        float _2200 = _300 + (-0.5);
        _2202 = cbMtdParam._m0[1u];
        _2204 = _2202.y * _2200;
        float _2207 = (_2181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2208 = _2207 * (_2182 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2163)));
        _2209 = _2207 * (_2182 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2165)));
        _2210 = _2207 * (_2182 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2167)));
        _2211 = _2200 * 0.999000012874603271484375;
        _2222 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2222)
        {
            if ((cbInstanceData._m0[_352 + 7u].x + _2211) < 0.5)
            {
                _2375 = true;
                break;
            }
        }
        uint _2316 = _354 + uint(_2179.w);
        if ((cbInstanceData._m0[_2316].w < 1.0) && ((cbInstanceData._m0[_2316].w + _2211) < 0.5))
        {
            _2375 = true;
            break;
        }
        if ((_2204 + 1.0) < _2202.x)
        {
            _2375 = true;
            break;
        }
        _2375 = false;
        break;
    }
    float _2530;
    if (_2375)
    {
        discard_state = true;
        _2530 = 0.0;
    }
    else
    {
        _2530 = cbInstanceData._m0[_2043].w;
    }
    SV_Target.x = _2208;
    SV_Target.y = _2209;
    SV_Target.z = _2210;
    SV_Target.w = _2530;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2043].w;
    discard_exit();
}


