#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _954;
float _3387;
float _3388;
float _3389;
float _3390;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _248 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _270 = _268.x;
    vec4 _282 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _291 = cbMtdParam._m0[10u].y * _282.z;
    float _295 = (_282.x * 2.0) + (-1.0);
    float _297 = (_282.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3399 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))));
    float _307 = fma(_304, _226, fma(_297, _218 * TANGENT.x, (_204 * _196) * _295));
    float _310 = fma(_304, _227, fma(_297, _218 * TANGENT.y, (_204 * _197) * _295));
    float _313 = fma(_304, _228, fma(_297, _218 * TANGENT.z, (_204 * _198) * _295));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3410 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _321 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3432 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3443 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3454 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _325 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    vec4 _406 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _408 = _406.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _633 = sqrt(((_392 * _392) + (_393 * _393)) + (_394 * _394));
        float _639 = (cbMatDynParam._m0[5u].x * _633) + cbMatDynParam._m0[5u].y;
        float _3465 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _644 = (cbMatDynParam._m0[5u].z * _633) + cbMatDynParam._m0[5u].w;
        float _3476 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) - _640)) + _640) < ((_408 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _423 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _425 = _423.w;
    float _445 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _448 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _451 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    vec4 _453 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _464 = (((_453.y - _321) + (_453.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _477 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3487 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    vec4 _492 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _497 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _508 = (((_497.x - _325) + (_497.w * _325)) * cbMtdParam._m0[3u].x) + _325;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _425) - _489) + _492.x)) + _489;
    float _522 = (cbMtdParam._m0[3u].x * (((_490 * _425) - _490) + _492.y)) + _490;
    float _523 = (cbMtdParam._m0[3u].x * (((_491 * _425) - _491) + _492.z)) + _491;
    float _524 = 1.0 - _508;
    float _525 = _524 * _521;
    float _526 = _524 * _522;
    float _527 = _524 * _523;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _508;
    float _533 = (_522 + (-0.039999999105930328369140625)) * _508;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _508;
    float _535 = _532 + 0.039999999105930328369140625;
    float _537 = _533 + 0.039999999105930328369140625;
    float _538 = _534 + 0.039999999105930328369140625;
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _550 = _547.x * TEXCOORD_4;
    float _551 = dot(vec3(_318, _319, _320), vec3(_399, _400, _401));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _318) - _399;
    float _559 = (_554 * _319) - _400;
    float _560 = (_554 * _320) - _401;
    float _564 = abs(dot(vec3(_399, _400, _401), vec3(_318, _319, _320)));
    float _3520 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_464);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _585 = (1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _586 = _579 * _566;
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _682 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _686 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _711 = _614 + _318;
        float _712 = _618 + _319;
        float _713 = _622 + _320;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_318, _319, _320), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3568 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_318, _319, _320), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3601 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_318, _319, _320), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3634 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _1001 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _1005 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _1028 = _614 + _318;
        float _1029 = _618 + _319;
        float _1030 = _622 + _320;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_318, _319, _320), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3697 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_318, _319, _320), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3730 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_318, _319, _320), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3763 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = _954;
        _1276 = _954;
        _1277 = _954;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _558 * 0.5;
    float _1335 = _559 * 0.5;
    float _1336 = _560 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_953, _957, _960, _963));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_955, _958, _961, _964));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _959, _962, _965));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1466 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1469 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1497 = frontier_phi_19_17_ladder;
        }
        float _1726;
        if (_1466 > 0.0)
        {
            _1726 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1726 = frontier_phi_28_24_ladder;
        }
        float _1983;
        if (_1469 > 0.0)
        {
            _1983 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1983 = frontier_phi_40_35_ladder;
        }
        float _1985 = isnan(_1726) ? _1497 : (isnan(_1497) ? _1726 : min(_1497, _1726));
        float _1986 = isnan(_1983) ? _1985 : (isnan(_1985) ? _1983 : min(_1985, _1983));
        float _1990 = (_1986 * _1463) + _1452;
        float _1991 = (_1986 * _1466) + _1456;
        float _1992 = (_1986 * _1469) + _1460;
        float _1993 = _1986 * 9.9999997473787516355514526367188e-05;
        float _1995 = (-1.0) - _1993;
        float _1997 = _1993 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1992 > _1997) || ((_1992 < _1995) || ((_1991 > _1997) || ((_1991 < _1995) || ((_1990 < _1995) || (_1990 > _1997))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1992, cbModelParam._m0[9u].z, fma(_1991, cbModelParam._m0[9u].y, _1990 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1992, cbModelParam._m0[10u].z, fma(_1991, cbModelParam._m0[10u].y, _1990 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1992, cbModelParam._m0[11u].z, fma(_1991, cbModelParam._m0[11u].y, _1990 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_18_40_ladder = _2120.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2120.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2120.x * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_18_40_ladder_2;
        _1487 = frontier_phi_18_40_ladder_1;
        _1489 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1403);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1565 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1568 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1731;
        if (_1562 > 0.0)
        {
            _1731 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1731 = frontier_phi_30_26_ladder;
        }
        float _2010;
        if (_1565 > 0.0)
        {
            _2010 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2010 = frontier_phi_42_37_ladder;
        }
        float _2223;
        if (_1568 > 0.0)
        {
            _2223 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2223 = frontier_phi_51_48_ladder;
        }
        float _2225 = isnan(_2010) ? _1731 : (isnan(_1731) ? _2010 : min(_1731, _2010));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1562) + _1551;
        float _2231 = (_2226 * _1565) + _1555;
        float _2232 = (_2226 * _1568) + _1559;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2233;
        float _2236 = _2233 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2232 > _2236) || ((_2232 < _2234) || ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 < _2234) || (_2230 > _2236))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2232, cbModelParam._m0[17u].z, fma(_2231, cbModelParam._m0[17u].y, _2230 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2232, cbModelParam._m0[18u].z, fma(_2231, cbModelParam._m0[18u].y, _2230 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2232, cbModelParam._m0[19u].z, fma(_2231, cbModelParam._m0[19u].y, _2230 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_27_51_ladder = _2448.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2448.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2448.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_27_51_ladder_2;
        _1589 = frontier_phi_27_51_ladder_1;
        _1591 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1604 = (((_585 * _535) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_585 * _537) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_585 * _538) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    vec4 _1625 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_420, _421));
    float _1627 = _1625.w;
    float _1639 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1627);
    float _1640 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1627);
    float _1641 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1627);
    uvec4 _1645 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1647 = _1645.x * 14u;
    uint _1648 = _1647 + 13u;
    float _1655 = _550 + (-1.0);
    float _1660 = (cbLight._m0[_1648].x * _1655) + 1.0;
    float _1661 = (cbLight._m0[_1648].y * _1655) + 1.0;
    float _1662 = (cbLight._m0[_1648].z * _1655) + 1.0;
    float _1663 = (cbLight._m0[_1648].w * _1655) + 1.0;
    uint _1664 = _1647 + 5u;
    float _1670 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1674 = _1647 + 4u;
    float _1684 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1688 = _1647 | 1u;
    float _1699 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_318, _319, _320));
    float _1702 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_318, _319, _320));
    float _3899 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _3910 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1707 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1709 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.3183098733425140380859375;
    float _1716 = ((cbLight._m0[_1664].x * _1670) * _1709) + (((cbLight._m0[_1674].x * _1639) * _1684) * _1707);
    float _1717 = ((_1670 * cbLight._m0[_1664].y) * _1709) + (((cbLight._m0[_1674].y * _1640) * _1684) * _1707);
    float _1718 = ((_1670 * cbLight._m0[_1664].z) * _1709) + (((cbLight._m0[_1674].z * _1641) * _1684) * _1707);
    uvec4 _1723 = floatBitsToUint(cbLight._m0[_1647 + 12u]);
    bool _1725 = _1723.x == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1725)
    {
        _1736 = _1716;
        _1738 = _1717;
        _1740 = _1718;
    }
    else
    {
        uint _1744 = _1647 + 6u;
        float _1760 = (dot(vec3(cbLight._m0[_1647 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1761 = _1760 * _1760;
        float _3921 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1763 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1736 = (((cbLight._m0[_1744].x * 0.3183098733425140380859375) * _1762) * _1763) + _1716;
        _1738 = (((cbLight._m0[_1744].y * 0.3183098733425140380859375) * _1762) * _1763) + _1717;
        _1740 = (((cbLight._m0[_1744].z * 0.3183098733425140380859375) * _1762) * _1763) + _1718;
    }
    bool _1743 = _1723.y == 0u;
    float _1781;
    float _1783;
    float _1785;
    if (_1743)
    {
        _1781 = _1736;
        _1783 = _1738;
        _1785 = _1740;
    }
    else
    {
        uint _1954 = _1647 + 7u;
        float _1970 = (dot(vec3(cbLight._m0[_1647 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _3937 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1973 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1781 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1736;
        _1783 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1738;
        _1785 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1740;
    }
    uint _1788 = _1647 + 8u;
    float _1801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _464) * 0.949999988079071044921875);
    float _1802 = _1801 * _1801;
    float _1803 = cbLight._m0[_1647].x + _399;
    float _1804 = cbLight._m0[_1647].y + _400;
    float _1805 = cbLight._m0[_1647].z + _401;
    float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
    float _1810 = _1809 * _1803;
    float _1811 = _1809 * _1804;
    float _1812 = _1809 * _1805;
    float _1813 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1647].xyz));
    float _3953 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _1817 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1818 = dot(vec3(_318, _319, _320), vec3(_1810, _1811, _1812));
    float _3975 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1810, _1811, _1812));
    float _3986 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1802 * _1802;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1838 = exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0);
    float _1839 = 0.959999978542327880859375 - _532;
    float _1841 = 0.959999978542327880859375 - _533;
    float _1842 = 0.959999978542327880859375 - _534;
    float _1849 = 1.0 - _1802;
    float _1860 = (0.5 / (((_1817 * ((_1816 * _1849) + _1802)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _1849) + _1802) * _1816))) * _1816;
    float _3997 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    uint _1876 = _1647 + 9u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _464) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1688].x + _399;
    float _1890 = cbLight._m0[_1688].y + _400;
    float _1891 = cbLight._m0[_1688].z + _401;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1688].xyz));
    float _4008 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1903 = dot(vec3(_318, _319, _320), vec3(_1896, _1897, _1898));
    float _4019 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1896, _1897, _1898));
    float _4030 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1888 * _1888;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1922 = exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0);
    float _1929 = 1.0 - _1888;
    float _1939 = (0.5 / (((_1817 * ((_1902 * _1929) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _1929) + _1888) * _1902))) * _1902;
    float _4041 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    float _1951 = (((((_1922 * _1839) + _535) * cbLight._m0[_1876].x) * _1941) * _1670) + ((((cbLight._m0[_1788].x * _1639) * ((_1838 * _1839) + _535)) * _1862) * _1684);
    float _1952 = (((((_1922 * _1841) + _537) * cbLight._m0[_1876].y) * _1941) * _1670) + ((((cbLight._m0[_1788].y * _1640) * ((_1838 * _1841) + _537)) * _1862) * _1684);
    float _1953 = (((((_1922 * _1842) + _538) * cbLight._m0[_1876].z) * _1941) * _1670) + ((((cbLight._m0[_1788].z * _1641) * ((_1838 * _1842) + _538)) * _1862) * _1684);
    float _2015;
    float _2017;
    float _2019;
    if (_1725)
    {
        _2015 = _1951;
        _2017 = _1952;
        _2019 = _1953;
    }
    else
    {
        uint _2021 = _1647 + 2u;
        uint _2025 = _1647 + 10u;
        float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _464) * 0.949999988079071044921875);
        float _2040 = _2039 * _2039;
        float _2041 = cbLight._m0[_2021].x + _399;
        float _2042 = cbLight._m0[_2021].y + _400;
        float _2043 = cbLight._m0[_2021].z + _401;
        float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
        float _2048 = _2047 * _2041;
        float _2049 = _2047 * _2042;
        float _2050 = _2047 * _2043;
        float _2051 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2021].xyz));
        float _4052 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _2055 = dot(vec3(_318, _319, _320), vec3(_2048, _2049, _2050));
        float _4063 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2059 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2048, _2049, _2050));
        float _4074 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2063 = _2040 * _2040;
        float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
        float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0);
        float _2081 = 1.0 - _2040;
        float _2091 = (0.5 / (((_1817 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _2081) + _2040) * _2054))) * _2054;
        float _4085 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2015 = (((((_2074 * _1839) + _535) * cbLight._m0[_2025].x) * _2093) * _2094) + _1951;
        _2017 = (((((_2074 * _1841) + _537) * cbLight._m0[_2025].y) * _2093) * _2094) + _1952;
        _2019 = (((((_2074 * _1842) + _538) * cbLight._m0[_2025].z) * _2093) * _2094) + _1953;
    }
    float _2129;
    float _2131;
    float _2133;
    if (_1743)
    {
        _2129 = _2015;
        _2131 = _2017;
        _2133 = _2019;
    }
    else
    {
        uint _2140 = _1647 + 3u;
        uint _2144 = _1647 + 11u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _464) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _399;
        float _2161 = cbLight._m0[_2140].y + _400;
        float _2162 = cbLight._m0[_2140].z + _401;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2140].xyz));
        float _4101 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2174 = dot(vec3(_318, _319, _320), vec3(_2167, _2168, _2169));
        float _4112 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4123 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2193 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
        float _2200 = 1.0 - _2159;
        float _2210 = (0.5 / (((_1817 * ((_2173 * _2200) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _2200) + _2159) * _2173))) * _2173;
        float _4134 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2212 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2213 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2129 = (((((_2193 * _1839) + _535) * cbLight._m0[_2144].x) * _2212) * _2213) + _2015;
        _2131 = (((((_2193 * _1841) + _537) * cbLight._m0[_2144].y) * _2212) * _2213) + _2017;
        _2133 = (((((_2193 * _1842) + _538) * cbLight._m0[_2144].z) * _2212) * _2213) + _2019;
    }
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_1645.y == 0u)
    {
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2288;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2288;
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2288;
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.x;
        uint _2315 = uint((float(_2303.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2304))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2304)));
        float _2325 = (log2(_2291 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2326 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        uint _2329 = uint(isnan(14.0) ? _2326 : (isnan(_2326) ? 14.0 : min(_2326, 14.0)));
        uvec4 _2334 = texelFetch(g_lightClusterGridBuffer, int(((_2329 << 2u) + (_2315 << 6u)) >> 2u));
        uint _2335 = _2334.x;
        uint _2336 = _2303.z;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((((1u << ((_2336 >> 4u) & 15u)) + 4294967295u) & _2335) == 0u) || ((_2336 & 240u) == 0u))
        {
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
        }
        else
        {
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            uint _2611 = 0u;
            uint _2620;
            bool _2621;
            for (;;)
            {
                _2620 = texelFetch(g_lightClassification, int((((_2329 << 5u) + (_2315 << 9u)) + (_2611 << 2u)) >> 2u)).x;
                _2621 = _2620 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2621)
                {
                    frontier_phi_68_pred = _2607;
                    frontier_phi_68_pred_1 = _2610;
                    frontier_phi_68_pred_2 = _2609;
                    frontier_phi_68_pred_3 = _2608;
                    frontier_phi_68_pred_4 = _2606;
                    frontier_phi_68_pred_5 = _2605;
                }
                else
                {
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    uint _2756;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2620;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    for (;;)
                    {
                        uint _2760 = uint(findLSB(_2756)) + (_2611 << 5u);
                        uint _2757 = (_2756 + 4294967295u) & _2756;
                        uint _2762 = _2760 * 48u;
                        vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2782 = (_2760 * 48u) + 4u;
                        vec4 _2795 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2801 = (_2760 * 48u) + 8u;
                        vec3 _2812 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x));
                        float _2816 = _2776.x - _2289;
                        float _2817 = _2776.y - _2290;
                        float _2818 = _2776.z - _2291;
                        float _2819 = dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818));
                        float _2822 = inversesqrt(_2819);
                        float _2823 = _2822 * _2816;
                        float _2824 = _2822 * _2817;
                        float _2825 = _2822 * _2818;
                        float _2826 = dot(vec3(_445, _448, _451), vec3(_2823, _2824, _2825));
                        float _2831 = 1.0 - (_2819 * _2776.w);
                        float _4160 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2832 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2833 = sqrt(_2819) * _2795.w;
                        float _2836 = 1.39999997615814208984375 / (_2833 + 1.39999997615814208984375);
                        float _2837 = _2836 * _2836;
                        float _2840 = ((1.0 - _2837) * _2826) + _2837;
                        float _2843 = _2833 * _2833;
                        float _2847 = ((isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))) * _2832) / ((_2843 * 0.699999988079071044921875) + 1.0);
                        float _2851 = (-0.0) - _2289;
                        float _2852 = (-0.0) - _2290;
                        float _2853 = (-0.0) - _2291;
                        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
                        float _2858 = _2857 * _2851;
                        float _2859 = _2857 * _2852;
                        float _2860 = _2857 * _2853;
                        float _2868 = exp2(log2(1.0 / ((_2843 * 3.5) + 5.0)) * 0.25);
                        float _2869 = 1.0 - _566;
                        float _2876 = sqrt(1.0 - ((1.0 - (_2869 * _2869)) * (1.0 - (_2868 * _2868))));
                        float _2877 = _2876 * _2876;
                        float _2878 = _2877 * _2877;
                        float _2879 = _2858 + _2823;
                        float _2880 = _2859 + _2824;
                        float _2881 = _2860 + _2825;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2889 = dot(vec3(_445, _448, _451), vec3(_2858, _2859, _2860));
                        float _4176 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2892 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2893 = dot(vec3(_445, _448, _451), vec3(_2885 * _2879, _2885 * _2880, _2885 * _2881));
                        float _4187 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2896 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2900 = ((_2896 * _2896) * (_2878 + (-1.0))) + 1.0;
                        float _2901 = _2836 * _2877;
                        float _2902 = _2901 * _2901;
                        float _2905 = ((1.0 - _2902) * _2826) + _2902;
                        float _4198 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2906 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2907 = 1.0 - _2877;
                        float _2917 = (0.5 / (((_2906 * ((_2892 * _2907) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2906 * _2907) + _2877) * _2892))) * _2906;
                        float _4209 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2928 = (((_2878 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_2900 * _2900) * ((_2843 * 2.1991131305694580078125) + 3.141590118408203125))) * _2832;
                        _2680 = (_2847 * _2795.x) + _2753;
                        _2681 = (_2847 * _2795.y) + _2754;
                        _2682 = (_2847 * _2795.z) + _2755;
                        _2677 = (_2928 * _2812.x) + _2750;
                        _2678 = (_2928 * _2812.y) + _2751;
                        _2679 = (_2928 * _2812.z) + _2752;
                        if (_2757 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2757;
                        }
                    }
                    frontier_phi_68_pred = _2679;
                    frontier_phi_68_pred_1 = _2682;
                    frontier_phi_68_pred_2 = _2681;
                    frontier_phi_68_pred_3 = _2680;
                    frontier_phi_68_pred_4 = _2678;
                    frontier_phi_68_pred_5 = _2677;
                }
                _2458 = frontier_phi_68_pred;
                _2464 = frontier_phi_68_pred_1;
                _2462 = frontier_phi_68_pred_2;
                _2460 = frontier_phi_68_pred_3;
                _2456 = frontier_phi_68_pred_4;
                _2454 = frontier_phi_68_pred_5;
                uint _2612 = _2611 + 1u;
                if (_2612 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2605 = _2454;
                    _2606 = _2456;
                    _2607 = _2458;
                    _2608 = _2460;
                    _2609 = _2462;
                    _2610 = _2464;
                    _2611 = _2612;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
        }
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.z;
        uint _2470 = (_2468 >> 8u) & 15u;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((4294967295u << _2470) & _2335) == 0u)
        {
            _2573 = _2453;
            _2575 = _2455;
            _2577 = _2457;
            _2579 = _2459;
            _2581 = _2461;
            _2583 = _2463;
        }
        else
        {
            float _2598 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
            float _2599 = _2598 * _2289;
            float _2600 = _2598 * _2290;
            float _2601 = _2598 * _2291;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2470 < ((_2468 >> 12u) & 15u))
            {
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2733 = _2453;
                float _2734 = _2455;
                float _2735 = _2457;
                float _2736 = _2459;
                float _2737 = _2461;
                float _2738 = _2463;
                uint _2739 = _2470;
                uint _2748;
                bool _2749;
                for (;;)
                {
                    _2748 = texelFetch(g_lightClassification, int((((_2329 << 5u) + (_2315 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                    _2749 = _2748 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2749)
                    {
                        frontier_phi_79_pred = _2738;
                        frontier_phi_79_pred_1 = _2737;
                        frontier_phi_79_pred_2 = _2736;
                        frontier_phi_79_pred_3 = _2735;
                        frontier_phi_79_pred_4 = _2734;
                        frontier_phi_79_pred_5 = _2733;
                    }
                    else
                    {
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        uint _2961 = _2748;
                        uint _2962;
                        vec4 _2987;
                        float _2988;
                        vec4 _3003;
                        vec3 _3015;
                        vec4 _3031;
                        vec4 _3047;
                        float _3094;
                        bool _3095;
                        for (;;)
                        {
                            uint _2972 = ((_2739 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2961));
                            _2962 = (_2961 + 4294967295u) & _2961;
                            uint _2974 = _2972 * 40u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2988 = _2987.w;
                            uint _2990 = (_2972 * 40u) + 4u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2972 * 40u) + 8u;
                            _3015 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x));
                            uint _3018 = (_2972 * 40u) + 16u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3034 = (_2972 * 40u) + 20u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3050 = (_2972 * 40u) + 24u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3069 = (_2972 * 40u) + 28u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3094 = fma(_2291, _3082.z, fma(_2290, _3082.y, _3082.x * _2289)) + _3082.w;
                            _3095 = !((fma(_2291, _3063.z, fma(_2290, _3063.y, _3063.x * _2289)) + _3063.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3095)
                            {
                                float _3122 = _2987.x - _2289;
                                float _3123 = _2987.y - _2290;
                                float _3124 = _2987.z - _2291;
                                float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                                float _3128 = inversesqrt(_3125);
                                float _3129 = _3128 * _3122;
                                float _3130 = _3128 * _3123;
                                float _3131 = _3128 * _3124;
                                float _3135 = 1.0 - (_3125 / (_2988 * _2988));
                                float _4220 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3140 = sqrt(_3125) * _3003.w;
                                float _3142 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                                float _3143 = _3142 * _3142;
                                float _3146 = ((1.0 - _3143) * dot(vec3(_3129, _3130, _3131), vec3(_445, _448, _451))) + _3143;
                                float _3149 = _3140 * _3140;
                                float _3153 = (fma(_2291, _3031.z, fma(_2290, _3031.y, _3031.x * _2289)) + _3031.w) / _3094;
                                float _3154 = (fma(_2291, _3047.z, fma(_2290, _3047.y, _3047.x * _2289)) + _3047.w) / _3094;
                                float _3158 = 1.0 - dot(vec2(_3153, _3154), vec2(_3153, _3154));
                                float _4236 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3160 = _3159 * (((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3136) / ((_3149 * 0.699999988079071044921875) + 1.0));
                                float _3172 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                                float _3173 = 1.0 - _566;
                                float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                                float _3181 = _3180 * _3180;
                                float _3182 = _3181 * _3181;
                                float _3183 = _3129 - _2599;
                                float _3184 = _3130 - _2600;
                                float _3185 = _3131 - _2601;
                                float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                                float _3193 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2599, (-0.0) - _2600, (-0.0) - _2601));
                                float _4247 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3197 = dot(vec3(_445, _448, _451), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                                float _4258 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                                float _3205 = _3142 * _3181;
                                float _3206 = _3205 * _3205;
                                float _3212 = ((1.0 - _3206) * dot(vec3(_445, _448, _451), vec3(_3129, _3130, _3131))) + _3206;
                                float _4269 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3214 = 1.0 - _3181;
                                float _3224 = (0.5 / (((_3213 * ((_3196 * _3214) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3181) * _3196))) * _3213;
                                float _4280 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3234 = (_3159 * _3136) * (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_3204 * _3204) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3160 * _3003.z;
                                frontier_phi_85_pred_1 = _3160 * _3003.y;
                                frontier_phi_85_pred_2 = _3160 * _3003.x;
                                frontier_phi_85_pred_3 = _3234 * _3015.z;
                                frontier_phi_85_pred_4 = _3234 * _3015.y;
                                frontier_phi_85_pred_5 = _3234 * _3015.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3243 = frontier_phi_85_pred;
                            _3242 = frontier_phi_85_pred_1;
                            _3241 = frontier_phi_85_pred_2;
                            _3240 = frontier_phi_85_pred_3;
                            _3239 = frontier_phi_85_pred_4;
                            _3238 = frontier_phi_85_pred_5;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            if (_2962 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2962;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2947;
                        frontier_phi_79_pred_1 = _2946;
                        frontier_phi_79_pred_2 = _2945;
                        frontier_phi_79_pred_3 = _2944;
                        frontier_phi_79_pred_4 = _2943;
                        frontier_phi_79_pred_5 = _2942;
                    }
                    _2584 = frontier_phi_79_pred;
                    _2582 = frontier_phi_79_pred_1;
                    _2580 = frontier_phi_79_pred_2;
                    _2578 = frontier_phi_79_pred_3;
                    _2576 = frontier_phi_79_pred_4;
                    _2574 = frontier_phi_79_pred_5;
                    uint _2740 = _2739 + 1u;
                    if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2733 = _2574;
                        _2734 = _2576;
                        _2735 = _2578;
                        _2736 = _2580;
                        _2737 = _2582;
                        _2738 = _2584;
                        _2739 = _2740;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2580;
                frontier_phi_60_61_ladder_1 = _2584;
                frontier_phi_60_61_ladder_2 = _2582;
                frontier_phi_60_61_ladder_3 = _2578;
                frontier_phi_60_61_ladder_4 = _2576;
                frontier_phi_60_61_ladder_5 = _2574;
            }
            else
            {
                frontier_phi_60_61_ladder = _2459;
                frontier_phi_60_61_ladder_1 = _2463;
                frontier_phi_60_61_ladder_2 = _2461;
                frontier_phi_60_61_ladder_3 = _2457;
                frontier_phi_60_61_ladder_4 = _2455;
                frontier_phi_60_61_ladder_5 = _2453;
            }
            _2573 = frontier_phi_60_61_ladder_5;
            _2575 = frontier_phi_60_61_ladder_4;
            _2577 = frontier_phi_60_61_ladder_3;
            _2579 = frontier_phi_60_61_ladder;
            _2581 = frontier_phi_60_61_ladder_2;
            _2583 = frontier_phi_60_61_ladder_1;
        }
        float _2588 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2347 = (_2588 * _2579) + _1781;
        _2349 = (_2588 * _2581) + _1783;
        _2351 = (_2588 * _2583) + _1785;
        _2353 = ((_2573 * _535) * _2588) + _2129;
        _2355 = ((_2575 * _537) * _2588) + _2131;
        _2357 = ((_2577 * _538) * _2588) + _2133;
    }
    else
    {
        _2347 = _1781;
        _2349 = _1783;
        _2351 = _1785;
        _2353 = _2129;
        _2355 = _2131;
        _2357 = _2133;
    }
    vec4 _2363 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4296 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4307 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4318 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2387 = (((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2347 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _550))) + ((_2353 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1392)) * cbPerFrame._m0[3u].x)) + (_2363.x * cbMtdParam._m0[3u].x);
    float _2389 = ((_2363.y * cbMtdParam._m0[3u].x) + ((_2355 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1392)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2349 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _550)));
    float _2391 = ((_2363.z * cbMtdParam._m0[3u].x) + ((_2357 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1392)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2351 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _550)));
    float _2392 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2393 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    uint _2395 = _477 + 6u;
    float _2403 = _420 / cbSceneParam._m0[86u].x;
    float _2404 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2418 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2403, _2404, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2420 = _2418.x;
    float _2421 = _2418.y;
    float _2422 = _2418.z;
    float _2423 = _2418.w;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2478 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2479 = _2478 / _341;
        float _2490 = _2479 * _392;
        float _2491 = _393 * _2479;
        float _2492 = (-0.0) - _2491;
        float _2493 = _2479 * _394;
        float _2495 = (cbSceneParam._m0[77u].w * _2492) / _2478;
        float _2496 = _2495 + cbSceneParam._m0[79u].w;
        float _2497 = cbSceneParam._m0[79u].w - _2491;
        float _2503 = sqrt(((_2490 * _2490) + (_2491 * _2491)) + (_2493 * _2493));
        float _2506 = (1.0 - (cbSceneParam._m0[77u].w / _2478)) * _2503;
        float _2511 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2513 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2690;
        if (abs((_2492 - _2495) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2690 = ((((_2496 > 0.0) ? exp2(_2511 * _2496) : (2.0 - exp2(_2513 * _2496))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2506;
        }
        else
        {
            float _2634 = 1.0 / cbSceneParam._m0[80u].x;
            float _2635 = isnan(_2497) ? _2496 : (isnan(_2496) ? _2497 : max(_2496, _2497));
            float _2636 = isnan(_2497) ? _2496 : (isnan(_2496) ? _2497 : min(_2496, _2497));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            _2690 = ((abs(_2503 / _2492) * cbSceneParam._m0[80u].y) * ((((_2645 - _2646) * 2.0) - ((exp2(_2511 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0)))) - exp2(_2511 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0))))) * _2634)) - ((exp2(_2513 * _2645) - exp2(_2513 * _2646)) * _2634))) + (_2506 * cbSceneParam._m0[80u].z);
        }
        vec4 _2692 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2403, _2404, 1.0), 0.0);
        float _2701 = exp2((_2690 * (-1.44269502162933349609375)) * (1.0 - _2692.w));
        float _2702 = log2(_2701);
        float _2718 = log2(_2423);
        _2515 = (exp2(_2718 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].x)) * _2692.x) / cbSceneParam._m0[78u].x)) + _2420;
        _2517 = (exp2(_2718 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].y)) * _2692.y) / cbSceneParam._m0[78u].y)) + _2421;
        _2519 = (exp2(_2718 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2702 * cbSceneParam._m0[78u].z)) * _2692.z) / cbSceneParam._m0[78u].z)) + _2422;
        _2521 = _2701 * _2423;
    }
    else
    {
        _2515 = _2420;
        _2517 = _2421;
        _2519 = _2422;
        _2521 = _2423;
    }
    bool _2728;
    vec4 _2531;
    vec4 _2553;
    float _2555;
    float _2559;
    float _2560;
    float _2561;
    float _2562;
    bool _2572;
    for (;;)
    {
        _2531 = cbMatDynParam._m0[0u];
        float _2533 = roundEven(_2531.y);
        bool _2534 = _2533 == 3.0;
        float _2535 = log2(_2521);
        float _2542 = exp2(_2535 * cbSceneParam._m0[78u].x) * _2392;
        float _2543 = exp2(_2535 * cbSceneParam._m0[78u].y) * _2393;
        float _2544 = exp2(_2535 * cbSceneParam._m0[78u].z) * _2394;
        float _2551 = _408 + (-0.5);
        _2553 = cbMtdParam._m0[1u];
        _2555 = _2553.y * _2551;
        float _2558 = (_2533 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2559 = _2558 * (_2534 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2515)));
        _2560 = _2558 * (_2534 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2517)));
        _2561 = _2558 * (_2534 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2519)));
        _2562 = _2551 * 0.999000012874603271484375;
        _2572 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2572)
        {
            if ((cbInstanceData._m0[_477 + 7u].x + _2562) < 0.5)
            {
                _2728 = true;
                break;
            }
        }
        uint _2669 = _479 + uint(_2531.w);
        if ((cbInstanceData._m0[_2669].w < 1.0) && ((cbInstanceData._m0[_2669].w + _2562) < 0.5))
        {
            _2728 = true;
            break;
        }
        if ((_2555 + 1.0) < _2553.x)
        {
            _2728 = true;
            break;
        }
        _2728 = false;
        break;
    }
    float _2933;
    if (_2728)
    {
        discard_state = true;
        _2933 = 0.0;
    }
    else
    {
        _2933 = cbInstanceData._m0[_2395].w;
    }
    SV_Target.x = _2559;
    SV_Target.y = _2560;
    SV_Target.z = _2561;
    SV_Target.w = _2933;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2395].w;
    discard_exit();
}


