#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _889;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _244 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = cbMtdParam._m0[10u].y * _264.z;
    float _277 = (_264.x * 2.0) + (-1.0);
    float _279 = (_264.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3527 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))));
    float _289 = fma(_286, _222, fma(_279, _214 * TANGENT.x, (_200 * _192) * _277));
    float _292 = fma(_286, _223, fma(_279, _214 * TANGENT.y, (_200 * _193) * _277));
    float _295 = fma(_286, _224, fma(_279, _214 * TANGENT.z, (_200 * _194) * _277));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3538 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _303 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3560 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3571 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _391 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _393 = _391.w;
    float _414 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _417 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _420 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    vec4 _422 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _433 = (((_422.y - _303) + (_422.w * _303)) * cbMtdParam._m0[3u].x) + _303;
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = (_446 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3582 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    vec4 _461 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _466 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _472 = cbMtdParam._m0[3u].x * _466.x;
    float _485 = (cbMtdParam._m0[3u].x * (((_458 * _393) - _458) + _461.x)) + _458;
    float _486 = (cbMtdParam._m0[3u].x * (((_459 * _393) - _459) + _461.y)) + _459;
    float _487 = (cbMtdParam._m0[3u].x * (((_460 * _393) - _460) + _461.z)) + _460;
    float _488 = 1.0 - _472;
    float _489 = _485 * _488;
    float _490 = _486 * _488;
    float _491 = _487 * _488;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _472;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _472;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _472;
    float _499 = _496 + 0.039999999105930328369140625;
    float _501 = _497 + 0.039999999105930328369140625;
    float _502 = _498 + 0.039999999105930328369140625;
    vec4 _511 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _514 = _511.x * TEXCOORD_4;
    float _515 = dot(vec3(_300, _301, _302), vec3(_380, _381, _382));
    float _518 = _515 * 2.0;
    float _522 = (_518 * _300) - _380;
    float _523 = (_518 * _301) - _381;
    float _524 = (_518 * _302) - _382;
    float _528 = abs(dot(vec3(_380, _381, _382), vec3(_300, _301, _302)));
    float _3615 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _530 = sqrt(_433);
    float _543 = exp2((_530 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_530 * 3.0));
    float _549 = (1.0 - _543) * ((_530 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _550 = _543 * _530;
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _617 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _621 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _646 = _578 + _300;
        float _647 = _582 + _301;
        float _648 = _586 + _302;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_300, _301, _302), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3663 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_300, _301, _302), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3696 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_300, _301, _302), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3729 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _929 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _933 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _937 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _960 = _578 + _300;
        float _961 = _582 + _301;
        float _962 = _586 + _302;
        float _972 = fma(_962, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960)) - _929;
        float _973 = fma(_962, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960)) - _933;
        float _974 = fma(_962, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960)) - _937;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_929 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_933 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[35u].z) + ((((((_937 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1028 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_995.x + (-0.5));
        float _1030 = _1028 * (_995.y + (-0.5));
        float _1031 = _1028 * (_995.z + (-0.5));
        float _1038 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1002.x + (-0.5));
        float _1040 = _1038 * (_1002.y + (-0.5));
        float _1041 = _1038 * (_1002.z + (-0.5));
        float _1048 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1009.x + (-0.5));
        float _1050 = _1048 * (_1009.y + (-0.5));
        float _1051 = _1048 * (_1009.z + (-0.5));
        float _1058 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1016.x + (-0.5));
        float _1060 = _1058 * (_1016.y + (-0.5));
        float _1061 = _1058 * (_1016.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_300, _301, _302), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3792 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1092 + 1.0))) + _1097) * _1062;
        float _1107 = _1030 * 0.5;
        float _1108 = _1040 * 0.5;
        float _1109 = _1050 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_300, _301, _302), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3825 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1134 + 1.0))) + _1139) * _1063;
        float _1149 = _1031 * 0.5;
        float _1150 = _1041 * 0.5;
        float _1151 = _1051 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_300, _301, _302), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3858 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1176 + 1.0))) + _1181) * _1064;
        _1198 = _1031;
        _1199 = _1030;
        _1200 = _1029;
        _1201 = _1041;
        _1202 = _1040;
        _1203 = _1039;
        _1204 = _1051;
        _1205 = _1050;
        _1206 = _1049;
        _1207 = _1064;
        _1208 = _1063;
        _1209 = _1062;
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _889;
        _1199 = _889;
        _1200 = _889;
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1245 = fma(_1224, cbSceneParam._m0[89u].z, fma(_1223, cbSceneParam._m0[89u].y, _1222 * cbSceneParam._m0[89u].x));
    float _1248 = fma(_1224, cbSceneParam._m0[90u].z, fma(_1223, cbSceneParam._m0[90u].y, _1222 * cbSceneParam._m0[90u].x));
    float _1251 = fma(_1224, cbSceneParam._m0[91u].z, fma(_1223, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1222));
    float _1266 = _522 * 0.5;
    float _1267 = _523 * 0.5;
    float _1268 = _524 * 0.5;
    float _1269 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1272 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1275 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1309;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1282 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_888, _892, _895, _898));
        float _1286 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_890, _893, _896, _899));
        float _1290 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_891, _894, _897, _900));
        float _1297 = dot(vec4(cbModelParam._m0[39u]), vec4(_1266, _1267, _1268, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1297) ? 0.0 : (isnan(0.0) ? _1297 : max(0.0, _1297))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1320;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1311 = dot(vec4(cbModelParam._m0[40u]), vec4(_1266, _1267, _1268, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1324 = (_1320 * cbModelParam._m0[1u].x) + (_1309 * (1.0 - cbModelParam._m0[1u].x));
    float _1334 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1335 = isnan(_1334) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1334 : min(cbModelParam._m0[25u].z, _1334));
    float _1417;
    float _1419;
    float _1421;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1384 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1388 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1392 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1395 = fma(_524, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522));
        float _1398 = fma(_524, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522));
        float _1401 = fma(_524, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522));
        float _1429;
        if (_1395 > 0.0)
        {
            _1429 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1429 = frontier_phi_16_14_ladder;
        }
        float _1605;
        if (_1398 > 0.0)
        {
            _1605 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1605 = frontier_phi_25_21_ladder;
        }
        float _1901;
        if (_1401 > 0.0)
        {
            _1901 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1901 = frontier_phi_37_32_ladder;
        }
        float _1903 = isnan(_1605) ? _1429 : (isnan(_1429) ? _1605 : min(_1429, _1605));
        float _1904 = isnan(_1901) ? _1903 : (isnan(_1903) ? _1901 : min(_1903, _1901));
        float _1908 = (_1904 * _1395) + _1384;
        float _1909 = (_1904 * _1398) + _1388;
        float _1910 = (_1904 * _1401) + _1392;
        float _1911 = _1904 * 9.9999997473787516355514526367188e-05;
        float _1913 = (-1.0) - _1911;
        float _1915 = _1911 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1910 > _1915) || ((_1910 < _1913) || ((_1909 > _1915) || ((_1909 < _1913) || ((_1908 < _1913) || (_1908 > _1915))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2055 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1910, cbModelParam._m0[9u].z, fma(_1909, cbModelParam._m0[9u].y, _1908 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1910, cbModelParam._m0[10u].z, fma(_1909, cbModelParam._m0[10u].y, _1908 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1910, cbModelParam._m0[11u].z, fma(_1909, cbModelParam._m0[11u].y, _1908 * cbModelParam._m0[11u].x))), _1335);
            frontier_phi_15_37_ladder = _2055.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2055.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2055.z * cbModelParam._m0[1u].y;
        }
        _1417 = frontier_phi_15_37_ladder_1;
        _1419 = frontier_phi_15_37_ladder;
        _1421 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_522, _523, _524), _1335);
        _1417 = _1405.x * cbModelParam._m0[1u].y;
        _1419 = _1405.y * cbModelParam._m0[1u].y;
        _1421 = _1405.z * cbModelParam._m0[1u].y;
    }
    float _1425 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1425 : min(cbModelParam._m0[25u].w, _1425));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1483 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1487 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1491 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1494 = fma(_524, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522));
        float _1497 = fma(_524, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522));
        float _1500 = fma(_524, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522));
        float _1610;
        if (_1494 > 0.0)
        {
            _1610 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1610 = frontier_phi_27_23_ladder;
        }
        float _1928;
        if (_1497 > 0.0)
        {
            _1928 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1928 = frontier_phi_39_34_ladder;
        }
        float _2266;
        if (_1500 > 0.0)
        {
            _2266 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2266 = frontier_phi_49_46_ladder;
        }
        float _2268 = isnan(_1928) ? _1610 : (isnan(_1610) ? _1928 : min(_1610, _1928));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1494) + _1483;
        float _2274 = (_2269 * _1497) + _1487;
        float _2275 = (_2269 * _1500) + _1491;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2275, cbModelParam._m0[17u].z, fma(_2274, cbModelParam._m0[17u].y, _2273 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2275, cbModelParam._m0[18u].z, fma(_2274, cbModelParam._m0[18u].y, _2273 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2275, cbModelParam._m0[19u].z, fma(_2274, cbModelParam._m0[19u].y, _2273 * cbModelParam._m0[19u].x))), _1426);
            frontier_phi_24_49_ladder = _2397.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2397.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2397.x * cbModelParam._m0[1u].z;
        }
        _1519 = frontier_phi_24_49_ladder_2;
        _1521 = frontier_phi_24_49_ladder_1;
        _1523 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1503 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_522, _523, _524), _1426);
        _1519 = _1503.x * cbModelParam._m0[1u].z;
        _1521 = _1503.y * cbModelParam._m0[1u].z;
        _1523 = _1503.z * cbModelParam._m0[1u].z;
    }
    float _1536 = (((_549 * _499) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1538 = (((_549 * _501) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_549 * _502) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1543 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, _1536 * cbSceneParam._m0[91u].x));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1597 = _1584 / _1596;
    float _1598 = _1588 / _1596;
    float _1599 = _1592 / _1596;
    float _1746;
    float _1747;
    float _1748;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1626 = ((uint(_1599 > cbSceneParam._m0[59u].y) + uint(_1599 > cbSceneParam._m0[59u].x)) + uint(_1599 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1627 = _1626 + 43u;
        uint _1635 = _1626 + 44u;
        uint _1643 = _1626 + 45u;
        uint _1651 = _1626 + 46u;
        float _1662 = fma(_1596, cbSceneParam._m0[_1627].w, fma(_1592, cbSceneParam._m0[_1627].z, fma(_1588, cbSceneParam._m0[_1627].y, _1584 * cbSceneParam._m0[_1627].x)));
        float _1666 = fma(_1596, cbSceneParam._m0[_1635].w, fma(_1592, cbSceneParam._m0[_1635].z, fma(_1588, cbSceneParam._m0[_1635].y, _1584 * cbSceneParam._m0[_1635].x)));
        float _1674 = fma(_1596, cbSceneParam._m0[_1651].w, fma(_1592, cbSceneParam._m0[_1651].z, fma(_1588, cbSceneParam._m0[_1651].y, _1584 * cbSceneParam._m0[_1651].x)));
        float _1679 = cbSceneParam._m0[33u].z * _1674;
        float _1681 = cbSceneParam._m0[33u].w * _1674;
        float _1684 = fma(_1596, cbSceneParam._m0[_1643].w, fma(_1592, cbSceneParam._m0[_1643].z, fma(_1588, cbSceneParam._m0[_1643].y, _1584 * cbSceneParam._m0[_1643].x))) / _1674;
        float _1732 = (cbSceneParam._m0[33u].x - sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599))) * cbSceneParam._m0[33u].y;
        float _3984 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1739 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 + _1662) / _1674, (_1681 + _1666) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 + _1662) / _1674, (_1666 - _1679) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 - _1679) / _1674, (_1666 - _1681) / _1674), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 - _1681) / _1674, (_1679 + _1666) / _1674), _1684), 0.0)).x), vec4(0.25)));
        _1746 = 1.0 - (_1739 * cbSceneParam._m0[34u].x);
        _1747 = 1.0 - (_1739 * cbSceneParam._m0[34u].y);
        _1748 = 1.0 - (_1739 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1746 = 1.0;
        _1747 = 1.0;
        _1748 = 1.0;
    }
    float _1812;
    float _1814;
    float _1816;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1800 = fma(_1596, cbSceneParam._m0[63u].w, fma(_1592, cbSceneParam._m0[63u].z, fma(_1588, cbSceneParam._m0[63u].y, _1584 * cbSceneParam._m0[63u].x)));
        float _1801 = fma(_1596, cbSceneParam._m0[60u].w, fma(_1592, cbSceneParam._m0[60u].z, fma(_1588, cbSceneParam._m0[60u].y, _1584 * cbSceneParam._m0[60u].x))) / _1800;
        float _1802 = fma(_1596, cbSceneParam._m0[61u].w, fma(_1592, cbSceneParam._m0[61u].z, fma(_1588, cbSceneParam._m0[61u].y, _1584 * cbSceneParam._m0[61u].x))) / _1800;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1801 >= cbSceneParam._m0[64u].x) && (_1802 >= cbSceneParam._m0[64u].y)) && (_1801 <= cbSceneParam._m0[64u].z)) && (_1802 <= cbSceneParam._m0[64u].w))
        {
            float _1941 = fma(_1596, cbSceneParam._m0[62u].w, fma(_1592, cbSceneParam._m0[62u].z, fma(_1588, cbSceneParam._m0[62u].y, _1584 * cbSceneParam._m0[62u].x))) / _1800;
            float _1945 = isnan(cbSceneParam._m0[41u].w) ? _1941 : (isnan(_1941) ? cbSceneParam._m0[41u].w : max(_1941, cbSceneParam._m0[41u].w));
            float _1988 = (cbSceneParam._m0[33u].x - sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599))) * cbSceneParam._m0[33u].y;
            float _4000 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
            float _1995 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1801, cbSceneParam._m0[33u].w + _1802), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1801, _1802 - cbSceneParam._m0[33u].z), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1801 - cbSceneParam._m0[33u].z, _1802 - cbSceneParam._m0[33u].w), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1801 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1802), _1945), 0.0)).x), vec4(0.25)));
            float _1999 = 1.0 - (_1995 * cbSceneParam._m0[34u].x);
            float _2000 = 1.0 - (_1995 * cbSceneParam._m0[34u].y);
            float _2001 = 1.0 - (_1995 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2000) ? _1747 : (isnan(_1747) ? _2000 : min(_1747, _2000));
            frontier_phi_36_35_ladder_1 = isnan(_2001) ? _1748 : (isnan(_1748) ? _2001 : min(_1748, _2001));
            frontier_phi_36_35_ladder_2 = isnan(_1999) ? _1746 : (isnan(_1746) ? _1999 : min(_1746, _1999));
        }
        else
        {
            frontier_phi_36_35_ladder = _1747;
            frontier_phi_36_35_ladder_1 = _1748;
            frontier_phi_36_35_ladder_2 = _1746;
        }
        _1812 = frontier_phi_36_35_ladder_2;
        _1814 = frontier_phi_36_35_ladder;
        _1816 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1812 = _1746;
        _1814 = _1747;
        _1816 = _1748;
    }
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1831 = _514 + (-1.0);
    float _1836 = (cbLight._m0[_1824].x * _1831) + 1.0;
    float _1837 = (cbLight._m0[_1824].y * _1831) + 1.0;
    float _1838 = (cbLight._m0[_1824].z * _1831) + 1.0;
    float _1839 = (cbLight._m0[_1824].w * _1831) + 1.0;
    uint _1840 = _1823 + 5u;
    float _1846 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1850 = _1823 + 4u;
    float _1860 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1864 = _1823 | 1u;
    float _1875 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_300, _301, _302));
    float _1878 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_300, _301, _302));
    float _4036 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _4047 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1883 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.3183098733425140380859375;
    float _1885 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _1892 = ((cbLight._m0[_1840].x * _1846) * _1885) + (((cbLight._m0[_1850].x * _1812) * _1860) * _1883);
    float _1893 = ((_1846 * cbLight._m0[_1840].y) * _1885) + (((cbLight._m0[_1850].y * _1814) * _1860) * _1883);
    float _1894 = ((_1846 * cbLight._m0[_1840].z) * _1885) + (((cbLight._m0[_1850].z * _1816) * _1860) * _1883);
    uvec4 _1898 = floatBitsToUint(cbLight._m0[_1823 + 12u]);
    bool _1900 = _1898.x == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1900)
    {
        _2002 = _1892;
        _2004 = _1893;
        _2006 = _1894;
    }
    else
    {
        uint _2010 = _1823 + 6u;
        float _2026 = (dot(vec3(cbLight._m0[_1823 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _4058 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2029 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2002 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1892;
        _2004 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1893;
        _2006 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1894;
    }
    bool _2009 = _1898.y == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2009)
    {
        _2064 = _2002;
        _2066 = _2004;
        _2068 = _2006;
    }
    else
    {
        uint _2237 = _1823 + 7u;
        float _2253 = (dot(vec3(cbLight._m0[_1823 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4074 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2256 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2064 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2002;
        _2066 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2004;
        _2068 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2006;
    }
    uint _2071 = _1823 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _433) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1823].x + _380;
    float _2087 = cbLight._m0[_1823].y + _381;
    float _2088 = cbLight._m0[_1823].z + _382;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1823].xyz));
    float _4090 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2100 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2101 = dot(vec3(_300, _301, _302), vec3(_2093, _2094, _2095));
    float _4112 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2093, _2094, _2095));
    float _4123 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
    float _2122 = 0.959999978542327880859375 - _496;
    float _2124 = 0.959999978542327880859375 - _497;
    float _2125 = 0.959999978542327880859375 - _498;
    float _2132 = 1.0 - _2085;
    float _2143 = (0.5 / (((_2100 * ((_2099 * _2132) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2132) + _2085) * _2099))) * _2099;
    float _4134 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2159 = _1823 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _433) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1864].x + _380;
    float _2173 = cbLight._m0[_1864].y + _381;
    float _2174 = cbLight._m0[_1864].z + _382;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1864].xyz));
    float _4145 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2186 = dot(vec3(_300, _301, _302), vec3(_2179, _2180, _2181));
    float _4156 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2179, _2180, _2181));
    float _4167 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
    float _2212 = 1.0 - _2171;
    float _2222 = (0.5 / (((_2100 * ((_2185 * _2212) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2212) + _2171) * _2185))) * _2185;
    float _4178 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2234 = (((((_2205 * _2122) + _499) * cbLight._m0[_2159].x) * _2224) * _1846) + ((((cbLight._m0[_2071].x * _1812) * ((_2121 * _2122) + _499)) * _2145) * _1860);
    float _2235 = (((((_2205 * _2124) + _501) * cbLight._m0[_2159].y) * _2224) * _1846) + ((((cbLight._m0[_2071].y * _1814) * ((_2121 * _2124) + _501)) * _2145) * _1860);
    float _2236 = (((((_2205 * _2125) + _502) * cbLight._m0[_2159].z) * _2224) * _1846) + ((((cbLight._m0[_2071].z * _1816) * ((_2121 * _2125) + _502)) * _2145) * _1860);
    float _2292;
    float _2294;
    float _2296;
    if (_1900)
    {
        _2292 = _2234;
        _2294 = _2235;
        _2296 = _2236;
    }
    else
    {
        uint _2298 = _1823 + 2u;
        uint _2302 = _1823 + 10u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _433) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _380;
        float _2319 = cbLight._m0[_2298].y + _381;
        float _2320 = cbLight._m0[_2298].z + _382;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2298].xyz));
        float _4189 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2332 = dot(vec3(_300, _301, _302), vec3(_2325, _2326, _2327));
        float _4200 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4211 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
        float _2358 = 1.0 - _2317;
        float _2368 = (0.5 / (((_2100 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2358) + _2317) * _2331))) * _2331;
        float _4222 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2292 = (((((_2351 * _2122) + _499) * cbLight._m0[_2302].x) * _2370) * _2371) + _2234;
        _2294 = (((((_2351 * _2124) + _501) * cbLight._m0[_2302].y) * _2370) * _2371) + _2235;
        _2296 = (((((_2351 * _2125) + _502) * cbLight._m0[_2302].z) * _2370) * _2371) + _2236;
    }
    float _2402;
    float _2404;
    float _2406;
    if (_2009)
    {
        _2402 = _2292;
        _2404 = _2294;
        _2406 = _2296;
    }
    else
    {
        uint _2413 = _1823 + 3u;
        uint _2417 = _1823 + 11u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _433) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _380;
        float _2434 = cbLight._m0[_2413].y + _381;
        float _2435 = cbLight._m0[_2413].z + _382;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2413].xyz));
        float _4238 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2447 = dot(vec3(_300, _301, _302), vec3(_2440, _2441, _2442));
        float _4249 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4260 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2100 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2473) + _2432) * _2446))) * _2446;
        float _4271 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2402 = (((((_2466 * _2122) + _499) * cbLight._m0[_2417].x) * _2485) * _2486) + _2292;
        _2404 = (((((_2466 * _2124) + _501) * cbLight._m0[_2417].y) * _2485) * _2486) + _2294;
        _2406 = (((((_2466 * _2125) + _502) * cbLight._m0[_2417].z) * _2485) * _2486) + _2296;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1821.y == 0u)
    {
        uvec4 _2507 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2508 = _2507.x;
        uint _2519 = uint((float(_2507.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2508))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2508)));
        float _2529 = (log2(_1599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2530 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        uint _2533 = uint(isnan(14.0) ? _2530 : (isnan(_2530) ? 14.0 : min(_2530, 14.0)));
        uvec4 _2538 = texelFetch(g_lightClusterGridBuffer, int(((_2533 << 2u) + (_2519 << 6u)) >> 2u));
        uint _2539 = _2538.x;
        uint _2540 = _2507.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2540 >> 4u) & 15u)) + 4294967295u) & _2539) == 0u) || ((_2540 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2533 << 5u) + (_2519 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2796)
                {
                    frontier_phi_68_pred = _2785;
                    frontier_phi_68_pred_1 = _2784;
                    frontier_phi_68_pred_2 = _2783;
                    frontier_phi_68_pred_3 = _2781;
                    frontier_phi_68_pred_4 = _2780;
                    frontier_phi_68_pred_5 = _2782;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2795;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2786 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _1597;
                        float _2971 = _2930.y - _1598;
                        float _2972 = _2930.z - _1599;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_414, _417, _420), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4297 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _1597;
                        float _3006 = (-0.0) - _1598;
                        float _3007 = (-0.0) - _1599;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3021 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _530;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3012 + _2977;
                        float _3033 = _3013 + _2978;
                        float _3034 = _3014 + _2979;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_414, _417, _420), vec3(_3012, _3013, _3014));
                        float _4313 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3046 = dot(vec3(_414, _417, _420), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4324 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2990 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2980) + _3055;
                        float _4335 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4346 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3081 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) / ((_3053 * _3053) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2839 = (_3001 * _2949.x) + _2907;
                        _2840 = (_3001 * _2949.y) + _2908;
                        _2841 = (_3001 * _2949.z) + _2909;
                        _2836 = (_3081 * _2966.x) + _2904;
                        _2837 = (_3081 * _2966.y) + _2905;
                        _2838 = (_3081 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_68_pred = _2841;
                    frontier_phi_68_pred_1 = _2840;
                    frontier_phi_68_pred_2 = _2839;
                    frontier_phi_68_pred_3 = _2837;
                    frontier_phi_68_pred_4 = _2836;
                    frontier_phi_68_pred_5 = _2838;
                }
                _2647 = frontier_phi_68_pred;
                _2645 = frontier_phi_68_pred_1;
                _2643 = frontier_phi_68_pred_2;
                _2639 = frontier_phi_68_pred_3;
                _2637 = frontier_phi_68_pred_4;
                _2641 = frontier_phi_68_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2637;
                    _2781 = _2639;
                    _2782 = _2641;
                    _2783 = _2643;
                    _2784 = _2645;
                    _2785 = _2647;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2653) & _2539) == 0u)
        {
            _2748 = _2636;
            _2750 = _2638;
            _2752 = _2640;
            _2754 = _2642;
            _2756 = _2644;
            _2758 = _2646;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
            float _2774 = _2773 * _1597;
            float _2775 = _2773 * _1598;
            float _2776 = _2773 * _1599;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2887 = _2636;
                float _2888 = _2638;
                float _2889 = _2640;
                float _2890 = _2642;
                float _2891 = _2644;
                float _2892 = _2646;
                uint _2893 = _2653;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2533 << 5u) + (_2519 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2903)
                    {
                        frontier_phi_74_pred = _2889;
                        frontier_phi_74_pred_1 = _2888;
                        frontier_phi_74_pred_2 = _2887;
                        frontier_phi_74_pred_3 = _2892;
                        frontier_phi_74_pred_4 = _2891;
                        frontier_phi_74_pred_5 = _2890;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        uint _3105 = _2902;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3175;
                        vec4 _3191;
                        float _3238;
                        bool _3239;
                        for (;;)
                        {
                            uint _3116 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3162 = (_3116 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3178 = (_3116 * 40u) + 20u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3116 * 40u) + 24u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3213 = (_3116 * 40u) + 28u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3238 = fma(_1599, _3226.z, fma(_1598, _3226.y, _3226.x * _1597)) + _3226.w;
                            _3239 = !((fma(_1599, _3207.z, fma(_1598, _3207.y, _3207.x * _1597)) + _3207.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3239)
                            {
                                float _3266 = _3131.x - _1597;
                                float _3267 = _3131.y - _1598;
                                float _3268 = _3131.z - _1599;
                                float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                                float _3272 = inversesqrt(_3269);
                                float _3273 = _3272 * _3266;
                                float _3274 = _3272 * _3267;
                                float _3275 = _3272 * _3268;
                                float _3279 = 1.0 - (_3269 / (_3132 * _3132));
                                float _4357 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3284 = sqrt(_3269) * _3147.w;
                                float _3286 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                                float _3287 = _3286 * _3286;
                                float _3290 = ((1.0 - _3287) * dot(vec3(_3273, _3274, _3275), vec3(_414, _417, _420))) + _3287;
                                float _3293 = _3284 * _3284;
                                float _3297 = (fma(_1599, _3175.z, fma(_1598, _3175.y, _3175.x * _1597)) + _3175.w) / _3238;
                                float _3298 = (fma(_1599, _3191.z, fma(_1598, _3191.y, _3191.x * _1597)) + _3191.w) / _3238;
                                float _3302 = 1.0 - dot(vec2(_3297, _3298), vec2(_3297, _3298));
                                float _4373 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3304 = _3303 * (((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3280) / ((_3293 * 0.699999988079071044921875) + 1.0));
                                float _3316 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                                float _3317 = 1.0 - _530;
                                float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                                float _3325 = _3324 * _3324;
                                float _3326 = _3325 * _3325;
                                float _3327 = _3273 - _2774;
                                float _3328 = _3274 - _2775;
                                float _3329 = _3275 - _2776;
                                float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                                float _3337 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4384 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3341 = dot(vec3(_414, _417, _420), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                                float _4395 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                                float _3349 = _3286 * _3325;
                                float _3350 = _3349 * _3349;
                                float _3356 = ((1.0 - _3350) * dot(vec3(_414, _417, _420), vec3(_3273, _3274, _3275))) + _3350;
                                float _4406 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3358 = 1.0 - _3325;
                                float _3368 = (0.5 / (((_3357 * ((_3340 * _3358) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3325) * _3340))) * _3357;
                                float _4417 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3378 = (_3303 * _3280) * (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) / ((_3348 * _3348) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3378 * _3159.z;
                                frontier_phi_80_pred_1 = _3378 * _3159.y;
                                frontier_phi_80_pred_2 = _3378 * _3159.x;
                                frontier_phi_80_pred_3 = _3304 * _3147.z;
                                frontier_phi_80_pred_4 = _3304 * _3147.y;
                                frontier_phi_80_pred_5 = _3304 * _3147.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3384 = frontier_phi_80_pred;
                            _3383 = frontier_phi_80_pred_1;
                            _3382 = frontier_phi_80_pred_2;
                            _3387 = frontier_phi_80_pred_3;
                            _3386 = frontier_phi_80_pred_4;
                            _3385 = frontier_phi_80_pred_5;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3088;
                        frontier_phi_74_pred_1 = _3087;
                        frontier_phi_74_pred_2 = _3086;
                        frontier_phi_74_pred_3 = _3091;
                        frontier_phi_74_pred_4 = _3090;
                        frontier_phi_74_pred_5 = _3089;
                    }
                    _2753 = frontier_phi_74_pred;
                    _2751 = frontier_phi_74_pred_1;
                    _2749 = frontier_phi_74_pred_2;
                    _2759 = frontier_phi_74_pred_3;
                    _2757 = frontier_phi_74_pred_4;
                    _2755 = frontier_phi_74_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2749;
                        _2888 = _2751;
                        _2889 = _2753;
                        _2890 = _2755;
                        _2891 = _2757;
                        _2892 = _2759;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2757;
                frontier_phi_62_63_ladder_1 = _2755;
                frontier_phi_62_63_ladder_2 = _2753;
                frontier_phi_62_63_ladder_3 = _2759;
                frontier_phi_62_63_ladder_4 = _2751;
                frontier_phi_62_63_ladder_5 = _2749;
            }
            else
            {
                frontier_phi_62_63_ladder = _2644;
                frontier_phi_62_63_ladder_1 = _2642;
                frontier_phi_62_63_ladder_2 = _2640;
                frontier_phi_62_63_ladder_3 = _2646;
                frontier_phi_62_63_ladder_4 = _2638;
                frontier_phi_62_63_ladder_5 = _2636;
            }
            _2748 = frontier_phi_62_63_ladder_5;
            _2750 = frontier_phi_62_63_ladder_4;
            _2752 = frontier_phi_62_63_ladder_2;
            _2754 = frontier_phi_62_63_ladder_1;
            _2756 = frontier_phi_62_63_ladder;
            _2758 = frontier_phi_62_63_ladder_3;
        }
        float _2763 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
        _2551 = (_2763 * _2754) + _2064;
        _2553 = (_2763 * _2756) + _2066;
        _2555 = (_2763 * _2758) + _2068;
        _2557 = ((_2748 * _499) * _2763) + _2402;
        _2559 = ((_2750 * _501) * _2763) + _2404;
        _2561 = ((_2752 * _502) * _2763) + _2406;
    }
    else
    {
        _2551 = _2064;
        _2553 = _2066;
        _2555 = _2068;
        _2557 = _2402;
        _2559 = _2404;
        _2561 = _2406;
    }
    vec4 _2567 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4433 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4444 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4455 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2591 = (((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2551 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _514))) + ((_2557 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1324)) * cbPerFrame._m0[3u].x)) + (_2567.x * cbMtdParam._m0[3u].x);
    float _2593 = ((_2567.y * cbMtdParam._m0[3u].x) + ((_2559 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1324)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2553 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _514)));
    float _2595 = ((_2567.z * cbMtdParam._m0[3u].x) + ((_2561 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1324)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2555 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _514)));
    uint _2599 = _446 + 6u;
    float _2607 = _388 / cbSceneParam._m0[86u].x;
    float _2608 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2662 = _2661 / _322;
        float _2673 = _2662 * _373;
        float _2674 = _374 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2676 = _2662 * _375;
        float _2678 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2674;
        float _2686 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2675 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2811 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2849 = ((abs(_2686 / _2675) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2696 * _2820) - exp2(_2696 * _2821)) * _2809))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2627);
        _2698 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2700 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2702 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2704 = _2860 * _2627;
    }
    else
    {
        _2698 = _2624;
        _2700 = _2625;
        _2702 = _2626;
        _2704 = _2627;
    }
    float _2716 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2717 = _2716 == 3.0;
    float _2718 = log2(_2704);
    float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)));
    float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)));
    float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)));
    float _2736 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2736 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.y = _2736 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.z = _2736 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.w = cbInstanceData._m0[_2599].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
}


