#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _932;
float _3365;
float _3366;
float _3367;
float _3368;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _246 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _275 = cbMtdParam._m0[10u].y * _266.z;
    float _279 = (_266.x * 2.0) + (-1.0);
    float _281 = (_266.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3377 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))));
    float _291 = fma(_288, _224, fma(_281, _216 * TANGENT.x, (_202 * _194) * _279));
    float _294 = fma(_288, _225, fma(_281, _216 * TANGENT.y, (_202 * _195) * _279));
    float _297 = fma(_288, _226, fma(_281, _216 * TANGENT.z, (_202 * _196) * _279));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3388 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _305 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3410 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3421 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    vec4 _389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _391 = _389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _611 = sqrt(((_375 * _375) + (_376 * _376)) + (_377 * _377));
        float _617 = (cbMatDynParam._m0[5u].x * _611) + cbMatDynParam._m0[5u].y;
        float _3432 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _622 = (cbMatDynParam._m0[5u].z * _611) + cbMatDynParam._m0[5u].w;
        float _3443 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) - _618)) + _618) < ((_391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _406 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _408 = _406.w;
    float _428 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _434 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    vec4 _436 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _447 = (((_436.y - _305) + (_436.w * _305)) * cbMtdParam._m0[3u].x) + _305;
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _460 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3454 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    vec4 _475 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _480 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _486 = cbMtdParam._m0[3u].x * _480.x;
    float _499 = (cbMtdParam._m0[3u].x * (((_472 * _408) - _472) + _475.x)) + _472;
    float _500 = (cbMtdParam._m0[3u].x * (((_473 * _408) - _473) + _475.y)) + _473;
    float _501 = (cbMtdParam._m0[3u].x * (((_474 * _408) - _474) + _475.z)) + _474;
    float _502 = 1.0 - _486;
    float _503 = _499 * _502;
    float _504 = _500 * _502;
    float _505 = _501 * _502;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _486;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _486;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _486;
    float _513 = _510 + 0.039999999105930328369140625;
    float _515 = _511 + 0.039999999105930328369140625;
    float _516 = _512 + 0.039999999105930328369140625;
    vec4 _525 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _528 = _525.x * TEXCOORD_4;
    float _529 = dot(vec3(_302, _303, _304), vec3(_382, _383, _384));
    float _532 = _529 * 2.0;
    float _536 = (_532 * _302) - _382;
    float _537 = (_532 * _303) - _383;
    float _538 = (_532 * _304) - _384;
    float _542 = abs(dot(vec3(_382, _383, _384), vec3(_302, _303, _304)));
    float _3487 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _544 = sqrt(_447);
    float _557 = exp2((_544 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_544 * 3.0));
    float _563 = (1.0 - _557) * ((_544 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _564 = _557 * _544;
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _660 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _664 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _689 = _592 + _302;
        float _690 = _596 + _303;
        float _691 = _600 + _304;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_302, _303, _304), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3535 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_302, _303, _304), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3568 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_302, _303, _304), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3601 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _975 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _979 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _983 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _1006 = _592 + _302;
        float _1007 = _596 + _303;
        float _1008 = _600 + _304;
        float _1018 = fma(_1008, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_975 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_979 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[35u].z) + ((((((_983 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_302, _303, _304), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3664 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_302, _303, _304), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3697 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_302, _303, _304), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3730 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = _932;
        _1254 = _932;
        _1255 = _932;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _536 * 0.5;
    float _1313 = _537 * 0.5;
    float _1314 = _538 * 0.5;
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_931, _935, _938, _941));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_933, _936, _939, _942));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_934, _937, _940, _943));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1380 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1380 : min(cbModelParam._m0[25u].z, _1380));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_538, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536));
        float _1444 = fma(_538, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536));
        float _1447 = fma(_538, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1475 = frontier_phi_19_17_ladder;
        }
        float _1704;
        if (_1444 > 0.0)
        {
            _1704 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1704 = frontier_phi_28_24_ladder;
        }
        float _1961;
        if (_1447 > 0.0)
        {
            _1961 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1961 = frontier_phi_40_35_ladder;
        }
        float _1963 = isnan(_1704) ? _1475 : (isnan(_1475) ? _1704 : min(_1475, _1704));
        float _1964 = isnan(_1961) ? _1963 : (isnan(_1963) ? _1961 : min(_1963, _1961));
        float _1968 = (_1964 * _1441) + _1430;
        float _1969 = (_1964 * _1444) + _1434;
        float _1970 = (_1964 * _1447) + _1438;
        float _1971 = _1964 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1971;
        float _1975 = _1971 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 > _1975) || ((_1969 < _1973) || ((_1968 < _1973) || (_1968 > _1975))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2098 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1970, cbModelParam._m0[9u].z, fma(_1969, cbModelParam._m0[9u].y, _1968 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1970, cbModelParam._m0[10u].z, fma(_1969, cbModelParam._m0[10u].y, _1968 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1970, cbModelParam._m0[11u].z, fma(_1969, cbModelParam._m0[11u].y, _1968 * cbModelParam._m0[11u].x))), _1381);
            frontier_phi_18_40_ladder = _2098.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2098.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2098.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_18_40_ladder_2;
        _1465 = frontier_phi_18_40_ladder_1;
        _1467 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_536, _537, _538), _1381);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_538, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536));
        float _1543 = fma(_538, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536));
        float _1546 = fma(_538, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536));
        float _1709;
        if (_1540 > 0.0)
        {
            _1709 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1709 = frontier_phi_30_26_ladder;
        }
        float _1988;
        if (_1543 > 0.0)
        {
            _1988 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1988 = frontier_phi_42_37_ladder;
        }
        float _2201;
        if (_1546 > 0.0)
        {
            _2201 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2201 = frontier_phi_51_48_ladder;
        }
        float _2203 = isnan(_1988) ? _1709 : (isnan(_1709) ? _1988 : min(_1709, _1988));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1540) + _1529;
        float _2209 = (_2204 * _1543) + _1533;
        float _2210 = (_2204 * _1546) + _1537;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2211;
        float _2214 = _2211 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2210 > _2214) || ((_2210 < _2212) || ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 < _2212) || (_2208 > _2214))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2210, cbModelParam._m0[17u].z, fma(_2209, cbModelParam._m0[17u].y, _2208 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2210, cbModelParam._m0[18u].z, fma(_2209, cbModelParam._m0[18u].y, _2208 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2210, cbModelParam._m0[19u].z, fma(_2209, cbModelParam._m0[19u].y, _2208 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_27_51_ladder = _2426.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2426.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2426.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_27_51_ladder_2;
        _1567 = frontier_phi_27_51_ladder_1;
        _1569 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_536, _537, _538), _1472);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1582 = (((_563 * _513) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_563 * _515) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_563 * _516) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1589 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    vec4 _1603 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_403, _404));
    float _1605 = _1603.w;
    float _1617 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1605);
    float _1618 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1605);
    float _1619 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1605);
    uvec4 _1623 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1625 = _1623.x * 14u;
    uint _1626 = _1625 + 13u;
    float _1633 = _528 + (-1.0);
    float _1638 = (cbLight._m0[_1626].x * _1633) + 1.0;
    float _1639 = (cbLight._m0[_1626].y * _1633) + 1.0;
    float _1640 = (cbLight._m0[_1626].z * _1633) + 1.0;
    float _1641 = (cbLight._m0[_1626].w * _1633) + 1.0;
    uint _1642 = _1625 + 5u;
    float _1648 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1652 = _1625 + 4u;
    float _1662 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1666 = _1625 | 1u;
    float _1677 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_302, _303, _304));
    float _1680 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_302, _303, _304));
    float _3866 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _3877 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1685 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1687 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1694 = ((cbLight._m0[_1642].x * _1648) * _1687) + (((cbLight._m0[_1652].x * _1617) * _1662) * _1685);
    float _1695 = ((_1648 * cbLight._m0[_1642].y) * _1687) + (((cbLight._m0[_1652].y * _1618) * _1662) * _1685);
    float _1696 = ((_1648 * cbLight._m0[_1642].z) * _1687) + (((cbLight._m0[_1652].z * _1619) * _1662) * _1685);
    uvec4 _1701 = floatBitsToUint(cbLight._m0[_1625 + 12u]);
    bool _1703 = _1701.x == 0u;
    float _1714;
    float _1716;
    float _1718;
    if (_1703)
    {
        _1714 = _1694;
        _1716 = _1695;
        _1718 = _1696;
    }
    else
    {
        uint _1722 = _1625 + 6u;
        float _1738 = (dot(vec3(cbLight._m0[_1625 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1739 = _1738 * _1738;
        float _3888 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1741 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1714 = (((cbLight._m0[_1722].x * 0.3183098733425140380859375) * _1740) * _1741) + _1694;
        _1716 = (((cbLight._m0[_1722].y * 0.3183098733425140380859375) * _1740) * _1741) + _1695;
        _1718 = (((cbLight._m0[_1722].z * 0.3183098733425140380859375) * _1740) * _1741) + _1696;
    }
    bool _1721 = _1701.y == 0u;
    float _1759;
    float _1761;
    float _1763;
    if (_1721)
    {
        _1759 = _1714;
        _1761 = _1716;
        _1763 = _1718;
    }
    else
    {
        uint _1932 = _1625 + 7u;
        float _1948 = (dot(vec3(cbLight._m0[_1625 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _3904 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1951 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1759 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1714;
        _1761 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1716;
        _1763 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1718;
    }
    uint _1766 = _1625 + 8u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _447) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1625].x + _382;
    float _1782 = cbLight._m0[_1625].y + _383;
    float _1783 = cbLight._m0[_1625].z + _384;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1625].xyz));
    float _3920 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _1795 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1796 = dot(vec3(_302, _303, _304), vec3(_1788, _1789, _1790));
    float _3942 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1800 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1788, _1789, _1790));
    float _3953 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1804 = _1780 * _1780;
    float _1808 = ((_1799 * _1799) * (_1804 + (-1.0))) + 1.0;
    float _1816 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
    float _1817 = 0.959999978542327880859375 - _510;
    float _1819 = 0.959999978542327880859375 - _511;
    float _1820 = 0.959999978542327880859375 - _512;
    float _1827 = 1.0 - _1780;
    float _1838 = (0.5 / (((_1795 * ((_1794 * _1827) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1827) + _1780) * _1794))) * _1794;
    float _3964 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1804 / ((_1808 * _1808) * 3.141590118408203125));
    uint _1854 = _1625 + 9u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _447) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1666].x + _382;
    float _1868 = cbLight._m0[_1666].y + _383;
    float _1869 = cbLight._m0[_1666].z + _384;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1666].xyz));
    float _3975 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1881 = dot(vec3(_302, _303, _304), vec3(_1874, _1875, _1876));
    float _3986 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1874, _1875, _1876));
    float _3997 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1866 * _1866;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1900 = exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0);
    float _1907 = 1.0 - _1866;
    float _1917 = (0.5 / (((_1795 * ((_1880 * _1907) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _1907) + _1866) * _1880))) * _1880;
    float _4008 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    float _1929 = (((((_1900 * _1817) + _513) * cbLight._m0[_1854].x) * _1919) * _1648) + ((((cbLight._m0[_1766].x * _1617) * ((_1816 * _1817) + _513)) * _1840) * _1662);
    float _1930 = (((((_1900 * _1819) + _515) * cbLight._m0[_1854].y) * _1919) * _1648) + ((((cbLight._m0[_1766].y * _1618) * ((_1816 * _1819) + _515)) * _1840) * _1662);
    float _1931 = (((((_1900 * _1820) + _516) * cbLight._m0[_1854].z) * _1919) * _1648) + ((((cbLight._m0[_1766].z * _1619) * ((_1816 * _1820) + _516)) * _1840) * _1662);
    float _1993;
    float _1995;
    float _1997;
    if (_1703)
    {
        _1993 = _1929;
        _1995 = _1930;
        _1997 = _1931;
    }
    else
    {
        uint _1999 = _1625 + 2u;
        uint _2003 = _1625 + 10u;
        float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _447) * 0.949999988079071044921875);
        float _2018 = _2017 * _2017;
        float _2019 = cbLight._m0[_1999].x + _382;
        float _2020 = cbLight._m0[_1999].y + _383;
        float _2021 = cbLight._m0[_1999].z + _384;
        float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
        float _2026 = _2025 * _2019;
        float _2027 = _2025 * _2020;
        float _2028 = _2025 * _2021;
        float _2029 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1999].xyz));
        float _4019 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2033 = dot(vec3(_302, _303, _304), vec3(_2026, _2027, _2028));
        float _4030 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2037 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2026, _2027, _2028));
        float _4041 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2041 = _2018 * _2018;
        float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
        float _2052 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
        float _2059 = 1.0 - _2018;
        float _2069 = (0.5 / (((_1795 * ((_2032 * _2059) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _2059) + _2018) * _2032))) * _2032;
        float _4052 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2071 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
        float _2072 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1993 = (((((_2052 * _1817) + _513) * cbLight._m0[_2003].x) * _2071) * _2072) + _1929;
        _1995 = (((((_2052 * _1819) + _515) * cbLight._m0[_2003].y) * _2071) * _2072) + _1930;
        _1997 = (((((_2052 * _1820) + _516) * cbLight._m0[_2003].z) * _2071) * _2072) + _1931;
    }
    float _2107;
    float _2109;
    float _2111;
    if (_1721)
    {
        _2107 = _1993;
        _2109 = _1995;
        _2111 = _1997;
    }
    else
    {
        uint _2118 = _1625 + 3u;
        uint _2122 = _1625 + 11u;
        float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _447) * 0.949999988079071044921875);
        float _2137 = _2136 * _2136;
        float _2138 = cbLight._m0[_2118].x + _382;
        float _2139 = cbLight._m0[_2118].y + _383;
        float _2140 = cbLight._m0[_2118].z + _384;
        float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
        float _2145 = _2144 * _2138;
        float _2146 = _2144 * _2139;
        float _2147 = _2144 * _2140;
        float _2148 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2118].xyz));
        float _4068 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2152 = dot(vec3(_302, _303, _304), vec3(_2145, _2146, _2147));
        float _4079 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2156 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2145, _2146, _2147));
        float _4090 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2160 = _2137 * _2137;
        float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
        float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
        float _2178 = 1.0 - _2137;
        float _2188 = (0.5 / (((_1795 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_1795 * _2178) + _2137) * _2151))) * _2151;
        float _4101 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _2107 = (((((_2171 * _1817) + _513) * cbLight._m0[_2122].x) * _2190) * _2191) + _1993;
        _2109 = (((((_2171 * _1819) + _515) * cbLight._m0[_2122].y) * _2190) * _2191) + _1995;
        _2111 = (((((_2171 * _1820) + _516) * cbLight._m0[_2122].z) * _2190) * _2191) + _1997;
    }
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    if (_1623.y == 0u)
    {
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2266;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2266;
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2266;
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2282)));
        float _2303 = (log2(_2269 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
        }
        else
        {
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            uint _2589 = 0u;
            uint _2598;
            bool _2599;
            for (;;)
            {
                _2598 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2589 << 2u)) >> 2u)).x;
                _2599 = _2598 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2599)
                {
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2588;
                    frontier_phi_68_pred_2 = _2587;
                    frontier_phi_68_pred_3 = _2586;
                    frontier_phi_68_pred_4 = _2584;
                    frontier_phi_68_pred_5 = _2583;
                }
                else
                {
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    uint _2734;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2598;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2738 = uint(findLSB(_2734)) + (_2589 << 5u);
                        uint _2735 = (_2734 + 4294967295u) & _2734;
                        uint _2740 = _2738 * 48u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 3u)).x));
                        uint _2760 = (_2738 * 48u) + 4u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2779 = (_2738 * 48u) + 8u;
                        vec3 _2790 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x));
                        float _2794 = _2754.x - _2267;
                        float _2795 = _2754.y - _2268;
                        float _2796 = _2754.z - _2269;
                        float _2797 = dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796));
                        float _2800 = inversesqrt(_2797);
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2804 = dot(vec3(_428, _431, _434), vec3(_2801, _2802, _2803));
                        float _2809 = 1.0 - (_2797 * _2754.w);
                        float _4127 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2811 = sqrt(_2797) * _2773.w;
                        float _2814 = 1.39999997615814208984375 / (_2811 + 1.39999997615814208984375);
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2804) + _2815;
                        float _2821 = _2811 * _2811;
                        float _2825 = ((isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * _2810) / ((_2821 * 0.699999988079071044921875) + 1.0);
                        float _2829 = (-0.0) - _2267;
                        float _2830 = (-0.0) - _2268;
                        float _2831 = (-0.0) - _2269;
                        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2846 = exp2(log2(1.0 / ((_2821 * 3.5) + 5.0)) * 0.25);
                        float _2847 = 1.0 - _544;
                        float _2854 = sqrt(1.0 - ((1.0 - (_2847 * _2847)) * (1.0 - (_2846 * _2846))));
                        float _2855 = _2854 * _2854;
                        float _2856 = _2855 * _2855;
                        float _2857 = _2836 + _2801;
                        float _2858 = _2837 + _2802;
                        float _2859 = _2838 + _2803;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2867 = dot(vec3(_428, _431, _434), vec3(_2836, _2837, _2838));
                        float _4143 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2871 = dot(vec3(_428, _431, _434), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                        float _4154 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2878 = ((_2874 * _2874) * (_2856 + (-1.0))) + 1.0;
                        float _2879 = _2814 * _2855;
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2804) + _2880;
                        float _4165 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2885 = 1.0 - _2855;
                        float _2895 = (0.5 / (((_2884 * ((_2870 * _2885) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2884 * _2885) + _2855) * _2870))) * _2884;
                        float _4176 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2906 = (((_2856 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_2878 * _2878) * ((_2821 * 2.1991131305694580078125) + 3.141590118408203125))) * _2810;
                        _2658 = (_2825 * _2773.x) + _2731;
                        _2659 = (_2825 * _2773.y) + _2732;
                        _2660 = (_2825 * _2773.z) + _2733;
                        _2655 = (_2906 * _2790.x) + _2728;
                        _2656 = (_2906 * _2790.y) + _2729;
                        _2657 = (_2906 * _2790.z) + _2730;
                        if (_2735 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2735;
                        }
                    }
                    frontier_phi_68_pred = _2657;
                    frontier_phi_68_pred_1 = _2660;
                    frontier_phi_68_pred_2 = _2659;
                    frontier_phi_68_pred_3 = _2658;
                    frontier_phi_68_pred_4 = _2656;
                    frontier_phi_68_pred_5 = _2655;
                }
                _2436 = frontier_phi_68_pred;
                _2442 = frontier_phi_68_pred_1;
                _2440 = frontier_phi_68_pred_2;
                _2438 = frontier_phi_68_pred_3;
                _2434 = frontier_phi_68_pred_4;
                _2432 = frontier_phi_68_pred_5;
                uint _2590 = _2589 + 1u;
                if (_2590 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2583 = _2432;
                    _2584 = _2434;
                    _2585 = _2436;
                    _2586 = _2438;
                    _2587 = _2440;
                    _2588 = _2442;
                    _2589 = _2590;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
        }
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.z;
        uint _2448 = (_2446 >> 8u) & 15u;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((4294967295u << _2448) & _2313) == 0u)
        {
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
        }
        else
        {
            float _2576 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
            float _2577 = _2576 * _2267;
            float _2578 = _2576 * _2268;
            float _2579 = _2576 * _2269;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2448 < ((_2446 >> 12u) & 15u))
            {
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2711 = _2431;
                float _2712 = _2433;
                float _2713 = _2435;
                float _2714 = _2437;
                float _2715 = _2439;
                float _2716 = _2441;
                uint _2717 = _2448;
                uint _2726;
                bool _2727;
                for (;;)
                {
                    _2726 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                    _2727 = _2726 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2727)
                    {
                        frontier_phi_79_pred = _2716;
                        frontier_phi_79_pred_1 = _2715;
                        frontier_phi_79_pred_2 = _2714;
                        frontier_phi_79_pred_3 = _2713;
                        frontier_phi_79_pred_4 = _2712;
                        frontier_phi_79_pred_5 = _2711;
                    }
                    else
                    {
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        uint _2939 = _2726;
                        uint _2940;
                        vec4 _2965;
                        float _2966;
                        vec4 _2981;
                        vec3 _2993;
                        vec4 _3009;
                        vec4 _3025;
                        float _3072;
                        bool _3073;
                        for (;;)
                        {
                            uint _2950 = ((_2717 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2939));
                            _2940 = (_2939 + 4294967295u) & _2939;
                            uint _2952 = _2950 * 40u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2966 = _2965.w;
                            uint _2968 = (_2950 * 40u) + 4u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2950 * 40u) + 8u;
                            _2993 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x));
                            uint _2996 = (_2950 * 40u) + 16u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3012 = (_2950 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3028 = (_2950 * 40u) + 24u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3047 = (_2950 * 40u) + 28u;
                            vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3072 = fma(_2269, _3060.z, fma(_2268, _3060.y, _3060.x * _2267)) + _3060.w;
                            _3073 = !((fma(_2269, _3041.z, fma(_2268, _3041.y, _3041.x * _2267)) + _3041.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3073)
                            {
                                float _3100 = _2965.x - _2267;
                                float _3101 = _2965.y - _2268;
                                float _3102 = _2965.z - _2269;
                                float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                                float _3106 = inversesqrt(_3103);
                                float _3107 = _3106 * _3100;
                                float _3108 = _3106 * _3101;
                                float _3109 = _3106 * _3102;
                                float _3113 = 1.0 - (_3103 / (_2966 * _2966));
                                float _4187 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3118 = sqrt(_3103) * _2981.w;
                                float _3120 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                                float _3121 = _3120 * _3120;
                                float _3124 = ((1.0 - _3121) * dot(vec3(_3107, _3108, _3109), vec3(_428, _431, _434))) + _3121;
                                float _3127 = _3118 * _3118;
                                float _3131 = (fma(_2269, _3009.z, fma(_2268, _3009.y, _3009.x * _2267)) + _3009.w) / _3072;
                                float _3132 = (fma(_2269, _3025.z, fma(_2268, _3025.y, _3025.x * _2267)) + _3025.w) / _3072;
                                float _3136 = 1.0 - dot(vec2(_3131, _3132), vec2(_3131, _3132));
                                float _4203 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3138 = _3137 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3114) / ((_3127 * 0.699999988079071044921875) + 1.0));
                                float _3150 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                                float _3151 = 1.0 - _544;
                                float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                                float _3159 = _3158 * _3158;
                                float _3160 = _3159 * _3159;
                                float _3161 = _3107 - _2577;
                                float _3162 = _3108 - _2578;
                                float _3163 = _3109 - _2579;
                                float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                                float _3171 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2577, (-0.0) - _2578, (-0.0) - _2579));
                                float _4214 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3175 = dot(vec3(_428, _431, _434), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                                float _4225 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                                float _3183 = _3120 * _3159;
                                float _3184 = _3183 * _3183;
                                float _3190 = ((1.0 - _3184) * dot(vec3(_428, _431, _434), vec3(_3107, _3108, _3109))) + _3184;
                                float _4236 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3192 = 1.0 - _3159;
                                float _3202 = (0.5 / (((_3191 * ((_3174 * _3192) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3159) * _3174))) * _3191;
                                float _4247 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3212 = (_3137 * _3114) * (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_3182 * _3182) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3138 * _2981.z;
                                frontier_phi_85_pred_1 = _3138 * _2981.y;
                                frontier_phi_85_pred_2 = _3138 * _2981.x;
                                frontier_phi_85_pred_3 = _3212 * _2993.z;
                                frontier_phi_85_pred_4 = _3212 * _2993.y;
                                frontier_phi_85_pred_5 = _3212 * _2993.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_85_pred;
                            _3220 = frontier_phi_85_pred_1;
                            _3219 = frontier_phi_85_pred_2;
                            _3218 = frontier_phi_85_pred_3;
                            _3217 = frontier_phi_85_pred_4;
                            _3216 = frontier_phi_85_pred_5;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            if (_2940 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2940;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2925;
                        frontier_phi_79_pred_1 = _2924;
                        frontier_phi_79_pred_2 = _2923;
                        frontier_phi_79_pred_3 = _2922;
                        frontier_phi_79_pred_4 = _2921;
                        frontier_phi_79_pred_5 = _2920;
                    }
                    _2562 = frontier_phi_79_pred;
                    _2560 = frontier_phi_79_pred_1;
                    _2558 = frontier_phi_79_pred_2;
                    _2556 = frontier_phi_79_pred_3;
                    _2554 = frontier_phi_79_pred_4;
                    _2552 = frontier_phi_79_pred_5;
                    uint _2718 = _2717 + 1u;
                    if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2711 = _2552;
                        _2712 = _2554;
                        _2713 = _2556;
                        _2714 = _2558;
                        _2715 = _2560;
                        _2716 = _2562;
                        _2717 = _2718;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2558;
                frontier_phi_60_61_ladder_1 = _2562;
                frontier_phi_60_61_ladder_2 = _2560;
                frontier_phi_60_61_ladder_3 = _2556;
                frontier_phi_60_61_ladder_4 = _2554;
                frontier_phi_60_61_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_60_61_ladder = _2437;
                frontier_phi_60_61_ladder_1 = _2441;
                frontier_phi_60_61_ladder_2 = _2439;
                frontier_phi_60_61_ladder_3 = _2435;
                frontier_phi_60_61_ladder_4 = _2433;
                frontier_phi_60_61_ladder_5 = _2431;
            }
            _2551 = frontier_phi_60_61_ladder_5;
            _2553 = frontier_phi_60_61_ladder_4;
            _2555 = frontier_phi_60_61_ladder_3;
            _2557 = frontier_phi_60_61_ladder;
            _2559 = frontier_phi_60_61_ladder_2;
            _2561 = frontier_phi_60_61_ladder_1;
        }
        float _2566 = isnan(1.0) ? _528 : (isnan(_528) ? 1.0 : min(_528, 1.0));
        _2325 = (_2566 * _2557) + _1759;
        _2327 = (_2566 * _2559) + _1761;
        _2329 = (_2566 * _2561) + _1763;
        _2331 = ((_2551 * _513) * _2566) + _2107;
        _2333 = ((_2553 * _515) * _2566) + _2109;
        _2335 = ((_2555 * _516) * _2566) + _2111;
    }
    else
    {
        _2325 = _1759;
        _2327 = _1761;
        _2329 = _1763;
        _2331 = _2107;
        _2333 = _2109;
        _2335 = _2111;
    }
    vec4 _2341 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4263 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4274 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4285 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2365 = (((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2325 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _528))) + ((_2331 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + (_2341.x * cbMtdParam._m0[3u].x);
    float _2367 = ((_2341.y * cbMtdParam._m0[3u].x) + ((_2333 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2327 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _528)));
    float _2369 = ((_2341.z * cbMtdParam._m0[3u].x) + ((_2335 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2329 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _528)));
    float _2370 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2371 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    uint _2373 = _460 + 6u;
    float _2381 = _403 / cbSceneParam._m0[86u].x;
    float _2382 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2396 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2398 = _2396.x;
    float _2399 = _2396.y;
    float _2400 = _2396.z;
    float _2401 = _2396.w;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2456 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2457 = _2456 / _324;
        float _2468 = _2457 * _375;
        float _2469 = _376 * _2457;
        float _2470 = (-0.0) - _2469;
        float _2471 = _2457 * _377;
        float _2473 = (cbSceneParam._m0[77u].w * _2470) / _2456;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2469;
        float _2481 = sqrt(((_2468 * _2468) + (_2469 * _2469)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2456)) * _2481;
        float _2489 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2491 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2470 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2474 > 0.0) ? exp2(_2489 * _2474) : (2.0 - exp2(_2491 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2612 = 1.0 / cbSceneParam._m0[80u].x;
            float _2613 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2614 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            float _2624 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : min(_2614, 0.0));
            _2668 = ((abs(_2481 / _2470) * cbSceneParam._m0[80u].y) * ((((_2623 - _2624) * 2.0) - ((exp2(_2489 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)))) - exp2(_2489 * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))))) * _2612)) - ((exp2(_2491 * _2623) - exp2(_2491 * _2624)) * _2612))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2381, _2382, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2401);
        _2493 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2398;
        _2495 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2399;
        _2497 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2400;
        _2499 = _2679 * _2401;
    }
    else
    {
        _2493 = _2398;
        _2495 = _2399;
        _2497 = _2400;
        _2499 = _2401;
    }
    bool _2706;
    vec4 _2509;
    vec4 _2531;
    float _2533;
    float _2537;
    float _2538;
    float _2539;
    float _2540;
    bool _2550;
    for (;;)
    {
        _2509 = cbMatDynParam._m0[0u];
        float _2511 = roundEven(_2509.y);
        bool _2512 = _2511 == 3.0;
        float _2513 = log2(_2499);
        float _2520 = exp2(_2513 * cbSceneParam._m0[78u].x) * _2370;
        float _2521 = exp2(_2513 * cbSceneParam._m0[78u].y) * _2371;
        float _2522 = exp2(_2513 * cbSceneParam._m0[78u].z) * _2372;
        float _2529 = _391 + (-0.5);
        _2531 = cbMtdParam._m0[1u];
        _2533 = _2531.y * _2529;
        float _2536 = (_2511 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2537 = _2536 * (_2512 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2493)));
        _2538 = _2536 * (_2512 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2495)));
        _2539 = _2536 * (_2512 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2497)));
        _2540 = _2529 * 0.999000012874603271484375;
        _2550 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2550)
        {
            if ((cbInstanceData._m0[_460 + 7u].x + _2540) < 0.5)
            {
                _2706 = true;
                break;
            }
        }
        uint _2647 = _462 + uint(_2509.w);
        if ((cbInstanceData._m0[_2647].w < 1.0) && ((cbInstanceData._m0[_2647].w + _2540) < 0.5))
        {
            _2706 = true;
            break;
        }
        if ((_2533 + 1.0) < _2531.x)
        {
            _2706 = true;
            break;
        }
        _2706 = false;
        break;
    }
    float _2911;
    if (_2706)
    {
        discard_state = true;
        _2911 = 0.0;
    }
    else
    {
        _2911 = cbInstanceData._m0[_2373].w;
    }
    SV_Target.x = _2537;
    SV_Target.y = _2538;
    SV_Target.z = _2539;
    SV_Target.w = _2911;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2373].w;
    discard_exit();
}


