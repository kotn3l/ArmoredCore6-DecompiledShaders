#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _952;
float _3361;
float _3362;
float _3363;
float _3364;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _246 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _268 = _266.x;
    vec4 _280 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _289 = cbMtdParam._m0[10u].y * _280.z;
    float _293 = (_280.x * 2.0) + (-1.0);
    float _295 = (_280.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3373 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))));
    float _305 = fma(_302, _224, fma(_295, _216 * TANGENT.x, (_202 * _194) * _293));
    float _308 = fma(_302, _225, fma(_295, _216 * TANGENT.y, (_202 * _195) * _293));
    float _311 = fma(_302, _226, fma(_295, _216 * TANGENT.z, (_202 * _196) * _293));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3384 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _319 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3406 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3417 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3428 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _323 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _339 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _390 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _380);
    float _391 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _380);
    float _392 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _380);
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _397 = _390 * _396;
    float _398 = _391 * _396;
    float _399 = _392 * _396;
    vec4 _404 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _406 = _404.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _631 = sqrt(((_390 * _390) + (_391 * _391)) + (_392 * _392));
        float _637 = (cbMatDynParam._m0[5u].x * _631) + cbMatDynParam._m0[5u].y;
        float _3439 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _642 = (cbMatDynParam._m0[5u].z * _631) + cbMatDynParam._m0[5u].w;
        float _3450 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) - _638)) + _638) < ((_406 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _418 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _419 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _421 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _423 = _421.w;
    float _443 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _446 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _449 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    vec4 _451 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _462 = (((_451.y - _319) + (_451.w * _319)) * cbMtdParam._m0[3u].x) + _319;
    uint _475 = uint(roundEven(NORMAL.w)) * 13u;
    uint _477 = _475 + 9u;
    uint _478 = _477 + uint(cbMatDynParam._m0[0u].w);
    float _484 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_478].x;
    float _485 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_478].y;
    float _486 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_478].z;
    float _3461 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    vec4 _490 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _495 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _506 = (((_495.x - _323) + (_495.w * _323)) * cbMtdParam._m0[3u].x) + _323;
    float _519 = (cbMtdParam._m0[3u].x * (((_487 * _423) - _487) + _490.x)) + _487;
    float _520 = (cbMtdParam._m0[3u].x * (((_488 * _423) - _488) + _490.y)) + _488;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _423) - _489) + _490.z)) + _489;
    float _522 = 1.0 - _506;
    float _523 = _522 * _519;
    float _524 = _522 * _520;
    float _525 = _522 * _521;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _506;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _506;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _506;
    float _533 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    float _536 = _532 + 0.039999999105930328369140625;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _418, cbSceneParam._m0[86u].y * _419));
    float _548 = _545.x * TEXCOORD_4;
    float _549 = dot(vec3(_316, _317, _318), vec3(_397, _398, _399));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _316) - _397;
    float _557 = (_552 * _317) - _398;
    float _558 = (_552 * _318) - _399;
    float _562 = abs(dot(vec3(_397, _398, _399), vec3(_316, _317, _318)));
    float _3494 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_462);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _583 = (1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _584 = _577 * _564;
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _951;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _676 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _680 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _684 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _709 = _612 + _316;
        float _710 = _616 + _317;
        float _711 = _620 + _318;
        float _721 = fma(_711, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709)) - _676;
        float _722 = fma(_711, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709)) - _680;
        float _723 = fma(_711, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709)) - _684;
        float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
        float _740 = ((_727 * _721) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_676 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_727 * _722) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_680 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_727 * _723) / cbModelParam._m0[34u].z) + ((((((_684 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        float _779 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_745.x + (-0.5));
        float _781 = _779 * (_745.y + (-0.5));
        float _782 = _779 * (_745.z + (-0.5));
        float _789 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_752.x + (-0.5));
        float _791 = _789 * (_752.y + (-0.5));
        float _792 = _789 * (_752.z + (-0.5));
        float _799 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_759.x + (-0.5));
        float _801 = _799 * (_759.y + (-0.5));
        float _802 = _799 * (_759.z + (-0.5));
        float _809 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_766.x + (-0.5));
        float _811 = _809 * (_766.y + (-0.5));
        float _812 = _809 * (_766.z + (-0.5));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = _780 * 0.5;
        float _817 = _790 * 0.5;
        float _818 = _800 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _833 = (dot(vec3(_316, _317, _318), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _843 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3542 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_845 + 1.0))) + _850) * _813;
        float _860 = _781 * 0.5;
        float _861 = _791 * 0.5;
        float _862 = _801 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_316, _317, _318), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3575 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_887 + 1.0))) + _892) * _814;
        float _902 = _782 * 0.5;
        float _903 = _792 * 0.5;
        float _904 = _802 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_316, _317, _318), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3608 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_929 + 1.0))) + _934) * _815;
        _951 = _782;
        _953 = _781;
        _954 = _780;
        _955 = _792;
        _956 = _791;
        _957 = _790;
        _958 = _802;
        _959 = _801;
        _960 = _800;
        _961 = _815;
        _962 = _814;
        _963 = _813;
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
    }
    else
    {
        _951 = _952;
        _953 = _952;
        _954 = _952;
        _955 = _952;
        _956 = _952;
        _957 = _952;
        _958 = _952;
        _959 = _952;
        _960 = _952;
        _961 = _952;
        _962 = _952;
        _963 = _952;
        _964 = 0.0;
        _965 = 0.0;
        _966 = 0.0;
    }
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _995 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _999 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _1003 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _1026 = _612 + _316;
        float _1027 = _616 + _317;
        float _1028 = _620 + _318;
        float _1038 = fma(_1028, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026)) - _995;
        float _1039 = fma(_1028, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026)) - _999;
        float _1040 = fma(_1028, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026)) - _1003;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_995 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_999 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[35u].z) + ((((((_1003 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1094 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1061.x + (-0.5));
        float _1096 = _1094 * (_1061.y + (-0.5));
        float _1097 = _1094 * (_1061.z + (-0.5));
        float _1104 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1068.x + (-0.5));
        float _1106 = _1104 * (_1068.y + (-0.5));
        float _1107 = _1104 * (_1068.z + (-0.5));
        float _1114 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1075.x + (-0.5));
        float _1116 = _1114 * (_1075.y + (-0.5));
        float _1117 = _1114 * (_1075.z + (-0.5));
        float _1124 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1082.x + (-0.5));
        float _1126 = _1124 * (_1082.y + (-0.5));
        float _1127 = _1124 * (_1082.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_316, _317, _318), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3671 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1158 + 1.0))) + _1163) * _1128;
        float _1173 = _1096 * 0.5;
        float _1174 = _1106 * 0.5;
        float _1175 = _1116 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_316, _317, _318), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3704 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1200 + 1.0))) + _1205) * _1129;
        float _1215 = _1097 * 0.5;
        float _1216 = _1107 * 0.5;
        float _1217 = _1117 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_316, _317, _318), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3737 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1242 + 1.0))) + _1247) * _1130;
        _1264 = _1097;
        _1265 = _1096;
        _1266 = _1095;
        _1267 = _1107;
        _1268 = _1106;
        _1269 = _1105;
        _1270 = _1117;
        _1271 = _1116;
        _1272 = _1115;
        _1273 = _1130;
        _1274 = _1129;
        _1275 = _1128;
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _952;
        _1265 = _952;
        _1266 = _952;
        _1267 = _952;
        _1268 = _952;
        _1269 = _952;
        _1270 = _952;
        _1271 = _952;
        _1272 = _952;
        _1273 = _952;
        _1274 = _952;
        _1275 = _952;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1311 = fma(_1290, cbSceneParam._m0[89u].z, fma(_1289, cbSceneParam._m0[89u].y, _1288 * cbSceneParam._m0[89u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[90u].z, fma(_1289, cbSceneParam._m0[90u].y, _1288 * cbSceneParam._m0[90u].x));
    float _1317 = fma(_1290, cbSceneParam._m0[91u].z, fma(_1289, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1288));
    float _1332 = _556 * 0.5;
    float _1333 = _557 * 0.5;
    float _1334 = _558 * 0.5;
    float _1335 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1338 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1341 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1375;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1348 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_951, _955, _958, _961));
        float _1352 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_953, _956, _959, _962));
        float _1356 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_954, _957, _960, _963));
        float _1363 = dot(vec4(cbModelParam._m0[39u]), vec4(_1332, _1333, _1334, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1386;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1377 = dot(vec4(cbModelParam._m0[40u]), vec4(_1332, _1333, _1334, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1390 = (_1386 * cbModelParam._m0[1u].x) + (_1375 * (1.0 - cbModelParam._m0[1u].x));
    float _1400 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1400 : min(cbModelParam._m0[25u].z, _1400));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1450 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1454 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1458 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1461 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1464 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1467 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1495;
        if (_1461 > 0.0)
        {
            _1495 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1495 = frontier_phi_19_17_ladder;
        }
        float _1703;
        if (_1464 > 0.0)
        {
            _1703 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1703 = frontier_phi_28_24_ladder;
        }
        float _1957;
        if (_1467 > 0.0)
        {
            _1957 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1957 = frontier_phi_40_35_ladder;
        }
        float _1959 = isnan(_1703) ? _1495 : (isnan(_1495) ? _1703 : min(_1495, _1703));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1461) + _1450;
        float _1965 = (_1960 * _1464) + _1454;
        float _1966 = (_1960 * _1467) + _1458;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1969 = (-1.0) - _1967;
        float _1971 = _1967 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1966 > _1971) || ((_1966 < _1969) || ((_1965 > _1971) || ((_1965 < _1969) || ((_1964 < _1969) || (_1964 > _1971))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1966, cbModelParam._m0[9u].z, fma(_1965, cbModelParam._m0[9u].y, _1964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1966, cbModelParam._m0[10u].z, fma(_1965, cbModelParam._m0[10u].y, _1964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1966, cbModelParam._m0[11u].z, fma(_1965, cbModelParam._m0[11u].y, _1964 * cbModelParam._m0[11u].x))), _1401);
            frontier_phi_18_40_ladder = _2094.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2094.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2094.x * cbModelParam._m0[1u].y;
        }
        _1483 = frontier_phi_18_40_ladder_2;
        _1485 = frontier_phi_18_40_ladder_1;
        _1487 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1401);
        _1483 = _1471.x * cbModelParam._m0[1u].y;
        _1485 = _1471.y * cbModelParam._m0[1u].y;
        _1487 = _1471.z * cbModelParam._m0[1u].y;
    }
    float _1491 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1491 : min(cbModelParam._m0[25u].w, _1491));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1563 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1566 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1708;
        if (_1560 > 0.0)
        {
            _1708 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1708 = frontier_phi_30_26_ladder;
        }
        float _1984;
        if (_1563 > 0.0)
        {
            _1984 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1984 = frontier_phi_42_37_ladder;
        }
        float _2197;
        if (_1566 > 0.0)
        {
            _2197 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2197 = frontier_phi_51_48_ladder;
        }
        float _2199 = isnan(_1984) ? _1708 : (isnan(_1708) ? _1984 : min(_1708, _1984));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1560) + _1549;
        float _2205 = (_2200 * _1563) + _1553;
        float _2206 = (_2200 * _1566) + _1557;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2207;
        float _2210 = _2207 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2206 > _2210) || ((_2206 < _2208) || ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 < _2208) || (_2204 > _2210))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2206, cbModelParam._m0[17u].z, fma(_2205, cbModelParam._m0[17u].y, _2204 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2206, cbModelParam._m0[18u].z, fma(_2205, cbModelParam._m0[18u].y, _2204 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2206, cbModelParam._m0[19u].z, fma(_2205, cbModelParam._m0[19u].y, _2204 * cbModelParam._m0[19u].x))), _1492);
            frontier_phi_27_51_ladder = _2422.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2422.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2422.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_27_51_ladder_2;
        _1587 = frontier_phi_27_51_ladder_1;
        _1589 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1492);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1602 = (((_583 * _533) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_583 * _535) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_583 * _536) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    uvec4 _1625 = floatBitsToUint(cbInstanceData._m0[_475 + 5u]);
    uint _1627 = _1625.x * 14u;
    uint _1628 = _1627 + 13u;
    float _1635 = _548 + (-1.0);
    float _1640 = (cbLight._m0[_1628].x * _1635) + 1.0;
    float _1641 = (cbLight._m0[_1628].y * _1635) + 1.0;
    float _1642 = (cbLight._m0[_1628].z * _1635) + 1.0;
    float _1643 = (cbLight._m0[_1628].w * _1635) + 1.0;
    uint _1644 = _1627 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1627 + 4u;
    float _1661 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1665 = _1627 | 1u;
    float _1676 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_316, _317, _318));
    float _1679 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_316, _317, _318));
    float _3873 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _3884 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1684 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1686 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1693 = ((cbLight._m0[_1644].x * _1650) * _1686) + ((cbLight._m0[_1654].x * _1661) * _1684);
    float _1694 = ((_1650 * cbLight._m0[_1644].y) * _1686) + ((_1661 * cbLight._m0[_1654].y) * _1684);
    float _1695 = ((_1650 * cbLight._m0[_1644].z) * _1686) + ((_1661 * cbLight._m0[_1654].z) * _1684);
    uvec4 _1700 = floatBitsToUint(cbLight._m0[_1627 + 12u]);
    bool _1702 = _1700.x == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1702)
    {
        _1713 = _1693;
        _1715 = _1694;
        _1717 = _1695;
    }
    else
    {
        uint _1721 = _1627 + 6u;
        float _1737 = (dot(vec3(cbLight._m0[_1627 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1738 = _1737 * _1737;
        float _3895 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1740 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1713 = (((cbLight._m0[_1721].x * 0.3183098733425140380859375) * _1739) * _1740) + _1693;
        _1715 = (((cbLight._m0[_1721].y * 0.3183098733425140380859375) * _1739) * _1740) + _1694;
        _1717 = (((cbLight._m0[_1721].z * 0.3183098733425140380859375) * _1739) * _1740) + _1695;
    }
    bool _1720 = _1700.y == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1720)
    {
        _1758 = _1713;
        _1760 = _1715;
        _1762 = _1717;
    }
    else
    {
        uint _1928 = _1627 + 7u;
        float _1944 = (dot(vec3(cbLight._m0[_1627 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _3911 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1947 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1758 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1713;
        _1760 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1715;
        _1762 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1717;
    }
    uint _1765 = _1627 + 8u;
    float _1778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _462) * 0.949999988079071044921875);
    float _1779 = _1778 * _1778;
    float _1780 = cbLight._m0[_1627].x + _397;
    float _1781 = cbLight._m0[_1627].y + _398;
    float _1782 = cbLight._m0[_1627].z + _399;
    float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
    float _1787 = _1786 * _1780;
    float _1788 = _1786 * _1781;
    float _1789 = _1786 * _1782;
    float _1790 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1627].xyz));
    float _3927 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _1794 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1795 = dot(vec3(_316, _317, _318), vec3(_1787, _1788, _1789));
    float _3949 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1787, _1788, _1789));
    float _3960 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1779 * _1779;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1815 = exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0);
    float _1816 = 0.959999978542327880859375 - _530;
    float _1818 = 0.959999978542327880859375 - _531;
    float _1819 = 0.959999978542327880859375 - _532;
    float _1826 = 1.0 - _1779;
    float _1837 = (0.5 / (((_1794 * ((_1793 * _1826) + _1779)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1826) + _1779) * _1793))) * _1793;
    float _3971 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    uint _1850 = _1627 + 9u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1665].w)) * _462) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1665].x + _397;
    float _1864 = cbLight._m0[_1665].y + _398;
    float _1865 = cbLight._m0[_1665].z + _399;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1665].xyz));
    float _3982 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1877 = dot(vec3(_316, _317, _318), vec3(_1870, _1871, _1872));
    float _3993 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_1870, _1871, _1872));
    float _4004 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1862 * _1862;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1896 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
    float _1903 = 1.0 - _1862;
    float _1913 = (0.5 / (((_1794 * ((_1876 * _1903) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _1903) + _1862) * _1876))) * _1876;
    float _4015 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    float _1925 = (((((_1896 * _1816) + _533) * cbLight._m0[_1850].x) * _1915) * _1650) + (((((_1815 * _1816) + _533) * cbLight._m0[_1765].x) * _1839) * _1661);
    float _1926 = (((((_1896 * _1818) + _535) * cbLight._m0[_1850].y) * _1915) * _1650) + (((((_1815 * _1818) + _535) * cbLight._m0[_1765].y) * _1839) * _1661);
    float _1927 = (((((_1896 * _1819) + _536) * cbLight._m0[_1850].z) * _1915) * _1650) + (((((_1815 * _1819) + _536) * cbLight._m0[_1765].z) * _1839) * _1661);
    float _1989;
    float _1991;
    float _1993;
    if (_1702)
    {
        _1989 = _1925;
        _1991 = _1926;
        _1993 = _1927;
    }
    else
    {
        uint _1995 = _1627 + 2u;
        uint _1999 = _1627 + 10u;
        float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _462) * 0.949999988079071044921875);
        float _2014 = _2013 * _2013;
        float _2015 = cbLight._m0[_1995].x + _397;
        float _2016 = cbLight._m0[_1995].y + _398;
        float _2017 = cbLight._m0[_1995].z + _399;
        float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
        float _2022 = _2021 * _2015;
        float _2023 = _2021 * _2016;
        float _2024 = _2021 * _2017;
        float _2025 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1995].xyz));
        float _4026 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2028 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2029 = dot(vec3(_316, _317, _318), vec3(_2022, _2023, _2024));
        float _4037 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2033 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2022, _2023, _2024));
        float _4048 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2037 = _2014 * _2014;
        float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
        float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0);
        float _2055 = 1.0 - _2014;
        float _2065 = (0.5 / (((_1794 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2055) + _2014) * _2028))) * _2028;
        float _4059 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1989 = (((((_2048 * _1816) + _533) * cbLight._m0[_1999].x) * _2067) * _2068) + _1925;
        _1991 = (((((_2048 * _1818) + _535) * cbLight._m0[_1999].y) * _2067) * _2068) + _1926;
        _1993 = (((((_2048 * _1819) + _536) * cbLight._m0[_1999].z) * _2067) * _2068) + _1927;
    }
    float _2103;
    float _2105;
    float _2107;
    if (_1720)
    {
        _2103 = _1989;
        _2105 = _1991;
        _2107 = _1993;
    }
    else
    {
        uint _2114 = _1627 + 3u;
        uint _2118 = _1627 + 11u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _462) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _397;
        float _2135 = cbLight._m0[_2114].y + _398;
        float _2136 = cbLight._m0[_2114].z + _399;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2114].xyz));
        float _4075 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2148 = dot(vec3(_316, _317, _318), vec3(_2141, _2142, _2143));
        float _4086 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4097 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
        float _2174 = 1.0 - _2133;
        float _2184 = (0.5 / (((_1794 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1794 * _2174) + _2133) * _2147))) * _2147;
        float _4108 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2186 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2187 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2103 = (((((_2167 * _1816) + _533) * cbLight._m0[_2118].x) * _2186) * _2187) + _1989;
        _2105 = (((((_2167 * _1818) + _535) * cbLight._m0[_2118].y) * _2186) * _2187) + _1991;
        _2107 = (((((_2167 * _1819) + _536) * cbLight._m0[_2118].z) * _2186) * _2187) + _1993;
    }
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_1625.y == 0u)
    {
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2262;
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2262;
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2262;
        uvec4 _2277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2278 = _2277.x;
        uint _2289 = uint((float(_2277.y) * floor(float(uint(cbSceneParam._m0[85u].y * _419) / _2278))) + floor(float(uint(cbSceneParam._m0[85u].x * _418) / _2278)));
        float _2299 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2300 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        uint _2303 = uint(isnan(14.0) ? _2300 : (isnan(_2300) ? 14.0 : min(_2300, 14.0)));
        uvec4 _2308 = texelFetch(g_lightClusterGridBuffer, int(((_2303 << 2u) + (_2289 << 6u)) >> 2u));
        uint _2309 = _2308.x;
        uint _2310 = _2277.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2310 >> 4u) & 15u)) + 4294967295u) & _2309) == 0u) || ((_2310 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            uint _2585 = 0u;
            uint _2594;
            bool _2595;
            for (;;)
            {
                _2594 = texelFetch(g_lightClassification, int((((_2303 << 5u) + (_2289 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                _2595 = _2594 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2595)
                {
                    frontier_phi_68_pred = _2581;
                    frontier_phi_68_pred_1 = _2584;
                    frontier_phi_68_pred_2 = _2583;
                    frontier_phi_68_pred_3 = _2582;
                    frontier_phi_68_pred_4 = _2580;
                    frontier_phi_68_pred_5 = _2579;
                }
                else
                {
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    uint _2730;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2594;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    for (;;)
                    {
                        uint _2734 = uint(findLSB(_2730)) + (_2585 << 5u);
                        uint _2731 = (_2730 + 4294967295u) & _2730;
                        uint _2736 = _2734 * 48u;
                        vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        uint _2756 = (_2734 * 48u) + 4u;
                        vec4 _2769 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2775 = (_2734 * 48u) + 8u;
                        vec3 _2786 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x));
                        float _2790 = _2750.x - _2263;
                        float _2791 = _2750.y - _2264;
                        float _2792 = _2750.z - _2265;
                        float _2793 = dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792));
                        float _2796 = inversesqrt(_2793);
                        float _2797 = _2796 * _2790;
                        float _2798 = _2796 * _2791;
                        float _2799 = _2796 * _2792;
                        float _2800 = dot(vec3(_443, _446, _449), vec3(_2797, _2798, _2799));
                        float _2805 = 1.0 - (_2793 * _2750.w);
                        float _4134 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2806 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2807 = sqrt(_2793) * _2769.w;
                        float _2810 = 1.39999997615814208984375 / (_2807 + 1.39999997615814208984375);
                        float _2811 = _2810 * _2810;
                        float _2814 = ((1.0 - _2811) * _2800) + _2811;
                        float _2817 = _2807 * _2807;
                        float _2821 = ((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2806) / ((_2817 * 0.699999988079071044921875) + 1.0);
                        float _2825 = (-0.0) - _2263;
                        float _2826 = (-0.0) - _2264;
                        float _2827 = (-0.0) - _2265;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2842 = exp2(log2(1.0 / ((_2817 * 3.5) + 5.0)) * 0.25);
                        float _2843 = 1.0 - _564;
                        float _2850 = sqrt(1.0 - ((1.0 - (_2843 * _2843)) * (1.0 - (_2842 * _2842))));
                        float _2851 = _2850 * _2850;
                        float _2852 = _2851 * _2851;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2855 = _2834 + _2799;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2863 = dot(vec3(_443, _446, _449), vec3(_2832, _2833, _2834));
                        float _4150 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2867 = dot(vec3(_443, _446, _449), vec3(_2859 * _2853, _2859 * _2854, _2859 * _2855));
                        float _4161 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2874 = ((_2870 * _2870) * (_2852 + (-1.0))) + 1.0;
                        float _2875 = _2810 * _2851;
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2800) + _2876;
                        float _4172 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2881 = 1.0 - _2851;
                        float _2891 = (0.5 / (((_2880 * ((_2866 * _2881) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2851) * _2866))) * _2880;
                        float _4183 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2902 = (((_2852 * 3.1415927410125732421875) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) / ((_2874 * _2874) * ((_2817 * 2.1991131305694580078125) + 3.141590118408203125))) * _2806;
                        _2654 = (_2821 * _2769.x) + _2727;
                        _2655 = (_2821 * _2769.y) + _2728;
                        _2656 = (_2821 * _2769.z) + _2729;
                        _2651 = (_2902 * _2786.x) + _2724;
                        _2652 = (_2902 * _2786.y) + _2725;
                        _2653 = (_2902 * _2786.z) + _2726;
                        if (_2731 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2731;
                        }
                    }
                    frontier_phi_68_pred = _2653;
                    frontier_phi_68_pred_1 = _2656;
                    frontier_phi_68_pred_2 = _2655;
                    frontier_phi_68_pred_3 = _2654;
                    frontier_phi_68_pred_4 = _2652;
                    frontier_phi_68_pred_5 = _2651;
                }
                _2432 = frontier_phi_68_pred;
                _2438 = frontier_phi_68_pred_1;
                _2436 = frontier_phi_68_pred_2;
                _2434 = frontier_phi_68_pred_3;
                _2430 = frontier_phi_68_pred_4;
                _2428 = frontier_phi_68_pred_5;
                uint _2586 = _2585 + 1u;
                if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2579 = _2428;
                    _2580 = _2430;
                    _2581 = _2432;
                    _2582 = _2434;
                    _2583 = _2436;
                    _2584 = _2438;
                    _2585 = _2586;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((4294967295u << _2444) & _2309) == 0u)
        {
            _2547 = _2427;
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
        }
        else
        {
            float _2572 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _2573 = _2572 * _2263;
            float _2574 = _2572 * _2264;
            float _2575 = _2572 * _2265;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2707 = _2427;
                float _2708 = _2429;
                float _2709 = _2431;
                float _2710 = _2433;
                float _2711 = _2435;
                float _2712 = _2437;
                uint _2713 = _2444;
                uint _2722;
                bool _2723;
                for (;;)
                {
                    _2722 = texelFetch(g_lightClassification, int((((_2303 << 5u) + (_2289 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                    _2723 = _2722 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2723)
                    {
                        frontier_phi_79_pred = _2712;
                        frontier_phi_79_pred_1 = _2711;
                        frontier_phi_79_pred_2 = _2710;
                        frontier_phi_79_pred_3 = _2709;
                        frontier_phi_79_pred_4 = _2708;
                        frontier_phi_79_pred_5 = _2707;
                    }
                    else
                    {
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        uint _2935 = _2722;
                        uint _2936;
                        vec4 _2961;
                        float _2962;
                        vec4 _2977;
                        vec3 _2989;
                        vec4 _3005;
                        vec4 _3021;
                        float _3068;
                        bool _3069;
                        for (;;)
                        {
                            uint _2946 = ((_2713 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2935));
                            _2936 = (_2935 + 4294967295u) & _2935;
                            uint _2948 = _2946 * 40u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2962 = _2961.w;
                            uint _2964 = (_2946 * 40u) + 4u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2946 * 40u) + 8u;
                            _2989 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x));
                            uint _2992 = (_2946 * 40u) + 16u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3008 = (_2946 * 40u) + 20u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3024 = (_2946 * 40u) + 24u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3043 = (_2946 * 40u) + 28u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3068 = fma(_2265, _3056.z, fma(_2264, _3056.y, _3056.x * _2263)) + _3056.w;
                            _3069 = !((fma(_2265, _3037.z, fma(_2264, _3037.y, _3037.x * _2263)) + _3037.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3069)
                            {
                                float _3096 = _2961.x - _2263;
                                float _3097 = _2961.y - _2264;
                                float _3098 = _2961.z - _2265;
                                float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                                float _3102 = inversesqrt(_3099);
                                float _3103 = _3102 * _3096;
                                float _3104 = _3102 * _3097;
                                float _3105 = _3102 * _3098;
                                float _3109 = 1.0 - (_3099 / (_2962 * _2962));
                                float _4194 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3114 = sqrt(_3099) * _2977.w;
                                float _3116 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                                float _3117 = _3116 * _3116;
                                float _3120 = ((1.0 - _3117) * dot(vec3(_3103, _3104, _3105), vec3(_443, _446, _449))) + _3117;
                                float _3123 = _3114 * _3114;
                                float _3127 = (fma(_2265, _3005.z, fma(_2264, _3005.y, _3005.x * _2263)) + _3005.w) / _3068;
                                float _3128 = (fma(_2265, _3021.z, fma(_2264, _3021.y, _3021.x * _2263)) + _3021.w) / _3068;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4210 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3110) / ((_3123 * 0.699999988079071044921875) + 1.0));
                                float _3146 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                                float _3147 = 1.0 - _564;
                                float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                                float _3155 = _3154 * _3154;
                                float _3156 = _3155 * _3155;
                                float _3157 = _3103 - _2573;
                                float _3158 = _3104 - _2574;
                                float _3159 = _3105 - _2575;
                                float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                                float _3167 = dot(vec3(_443, _446, _449), vec3((-0.0) - _2573, (-0.0) - _2574, (-0.0) - _2575));
                                float _4221 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3171 = dot(vec3(_443, _446, _449), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                                float _4232 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                                float _3179 = _3116 * _3155;
                                float _3180 = _3179 * _3179;
                                float _3186 = ((1.0 - _3180) * dot(vec3(_443, _446, _449), vec3(_3103, _3104, _3105))) + _3180;
                                float _4243 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3188 = 1.0 - _3155;
                                float _3198 = (0.5 / (((_3187 * ((_3170 * _3188) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3155) * _3170))) * _3187;
                                float _4254 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3208 = (_3133 * _3110) * (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) / ((_3178 * _3178) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3134 * _2977.z;
                                frontier_phi_85_pred_1 = _3134 * _2977.y;
                                frontier_phi_85_pred_2 = _3134 * _2977.x;
                                frontier_phi_85_pred_3 = _3208 * _2989.z;
                                frontier_phi_85_pred_4 = _3208 * _2989.y;
                                frontier_phi_85_pred_5 = _3208 * _2989.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3217 = frontier_phi_85_pred;
                            _3216 = frontier_phi_85_pred_1;
                            _3215 = frontier_phi_85_pred_2;
                            _3214 = frontier_phi_85_pred_3;
                            _3213 = frontier_phi_85_pred_4;
                            _3212 = frontier_phi_85_pred_5;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            if (_2936 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2936;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2921;
                        frontier_phi_79_pred_1 = _2920;
                        frontier_phi_79_pred_2 = _2919;
                        frontier_phi_79_pred_3 = _2918;
                        frontier_phi_79_pred_4 = _2917;
                        frontier_phi_79_pred_5 = _2916;
                    }
                    _2558 = frontier_phi_79_pred;
                    _2556 = frontier_phi_79_pred_1;
                    _2554 = frontier_phi_79_pred_2;
                    _2552 = frontier_phi_79_pred_3;
                    _2550 = frontier_phi_79_pred_4;
                    _2548 = frontier_phi_79_pred_5;
                    uint _2714 = _2713 + 1u;
                    if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2707 = _2548;
                        _2708 = _2550;
                        _2709 = _2552;
                        _2710 = _2554;
                        _2711 = _2556;
                        _2712 = _2558;
                        _2713 = _2714;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2554;
                frontier_phi_60_61_ladder_1 = _2558;
                frontier_phi_60_61_ladder_2 = _2556;
                frontier_phi_60_61_ladder_3 = _2552;
                frontier_phi_60_61_ladder_4 = _2550;
                frontier_phi_60_61_ladder_5 = _2548;
            }
            else
            {
                frontier_phi_60_61_ladder = _2433;
                frontier_phi_60_61_ladder_1 = _2437;
                frontier_phi_60_61_ladder_2 = _2435;
                frontier_phi_60_61_ladder_3 = _2431;
                frontier_phi_60_61_ladder_4 = _2429;
                frontier_phi_60_61_ladder_5 = _2427;
            }
            _2547 = frontier_phi_60_61_ladder_5;
            _2549 = frontier_phi_60_61_ladder_4;
            _2551 = frontier_phi_60_61_ladder_3;
            _2553 = frontier_phi_60_61_ladder;
            _2555 = frontier_phi_60_61_ladder_2;
            _2557 = frontier_phi_60_61_ladder_1;
        }
        float _2562 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2321 = (_2562 * _2553) + _1758;
        _2323 = (_2562 * _2555) + _1760;
        _2325 = (_2562 * _2557) + _1762;
        _2327 = ((_2547 * _533) * _2562) + _2103;
        _2329 = ((_2549 * _535) * _2562) + _2105;
        _2331 = ((_2551 * _536) * _2562) + _2107;
    }
    else
    {
        _2321 = _1758;
        _2323 = _1760;
        _2325 = _1762;
        _2327 = _2103;
        _2329 = _2105;
        _2331 = _2107;
    }
    vec4 _2337 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4270 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4281 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4292 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2361 = (((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2321 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _548))) + ((_2327 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1390)) * cbPerFrame._m0[3u].x)) + (_2337.x * cbMtdParam._m0[3u].x);
    float _2363 = ((_2337.y * cbMtdParam._m0[3u].x) + ((_2329 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1390)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2323 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _548)));
    float _2365 = ((_2337.z * cbMtdParam._m0[3u].x) + ((_2331 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1390)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2325 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _548)));
    float _2366 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2367 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    uint _2369 = _475 + 6u;
    float _2377 = _418 / cbSceneParam._m0[86u].x;
    float _2378 = _419 / cbSceneParam._m0[86u].y;
    vec4 _2392 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2394 = _2392.x;
    float _2395 = _2392.y;
    float _2396 = _2392.z;
    float _2397 = _2392.w;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2453 = _2452 / _339;
        float _2464 = _2453 * _390;
        float _2465 = _391 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2467 = _2453 * _392;
        float _2469 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2465;
        float _2477 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2477;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2664;
        if (abs((_2466 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2664 = ((((_2470 > 0.0) ? exp2(_2485 * _2470) : (2.0 - exp2(_2487 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2608 = 1.0 / cbSceneParam._m0[80u].x;
            float _2609 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2610 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            _2664 = ((abs(_2477 / _2466) * cbSceneParam._m0[80u].y) * ((((_2619 - _2620) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0))))) * _2608)) - ((exp2(_2487 * _2619) - exp2(_2487 * _2620)) * _2608))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2666 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, 1.0), 0.0);
        float _2675 = exp2((_2664 * (-1.44269502162933349609375)) * (1.0 - _2666.w));
        float _2676 = log2(_2675);
        float _2692 = log2(_2397);
        _2489 = (exp2(_2692 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].x)) * _2666.x) / cbSceneParam._m0[78u].x)) + _2394;
        _2491 = (exp2(_2692 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].y)) * _2666.y) / cbSceneParam._m0[78u].y)) + _2395;
        _2493 = (exp2(_2692 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].z)) * _2666.z) / cbSceneParam._m0[78u].z)) + _2396;
        _2495 = _2675 * _2397;
    }
    else
    {
        _2489 = _2394;
        _2491 = _2395;
        _2493 = _2396;
        _2495 = _2397;
    }
    bool _2702;
    vec4 _2505;
    vec4 _2527;
    float _2529;
    float _2533;
    float _2534;
    float _2535;
    float _2536;
    bool _2546;
    for (;;)
    {
        _2505 = cbMatDynParam._m0[0u];
        float _2507 = roundEven(_2505.y);
        bool _2508 = _2507 == 3.0;
        float _2509 = log2(_2495);
        float _2516 = exp2(_2509 * cbSceneParam._m0[78u].x) * _2366;
        float _2517 = exp2(_2509 * cbSceneParam._m0[78u].y) * _2367;
        float _2518 = exp2(_2509 * cbSceneParam._m0[78u].z) * _2368;
        float _2525 = _406 + (-0.5);
        _2527 = cbMtdParam._m0[1u];
        _2529 = _2527.y * _2525;
        float _2532 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2533 = _2532 * (_2508 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2489)));
        _2534 = _2532 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2491)));
        _2535 = _2532 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2493)));
        _2536 = _2525 * 0.999000012874603271484375;
        _2546 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2546)
        {
            if ((cbInstanceData._m0[_475 + 7u].x + _2536) < 0.5)
            {
                _2702 = true;
                break;
            }
        }
        uint _2643 = _477 + uint(_2505.w);
        if ((cbInstanceData._m0[_2643].w < 1.0) && ((cbInstanceData._m0[_2643].w + _2536) < 0.5))
        {
            _2702 = true;
            break;
        }
        if ((_2529 + 1.0) < _2527.x)
        {
            _2702 = true;
            break;
        }
        _2702 = false;
        break;
    }
    float _2907;
    if (_2702)
    {
        discard_state = true;
        _2907 = 0.0;
    }
    else
    {
        _2907 = cbInstanceData._m0[_2369].w;
    }
    SV_Target.x = _2533;
    SV_Target.y = _2534;
    SV_Target.z = _2535;
    SV_Target.w = _2907;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2369].w;
    discard_exit();
}


