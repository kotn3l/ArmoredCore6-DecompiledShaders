#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _954;
float _3363;
float _3364;
float _3365;
float _3366;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _238 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _251 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_238 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _238) + cbTextureTilingScale._m0[2u].w));
    float _273 = _271.x;
    vec4 _285 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _238) + cbTextureTilingScale._m0[1u].w));
    float _291 = cbMtdParam._m0[10u].y * _285.z;
    float _295 = (_285.x * 2.0) + (-1.0);
    float _297 = (_285.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3375 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))));
    float _307 = fma(_304, _224, fma(_297, _216 * TANGENT.x, (_202 * _194) * _295));
    float _310 = fma(_304, _225, fma(_297, _216 * TANGENT.y, (_202 * _195) * _295));
    float _313 = fma(_304, _226, fma(_297, _216 * TANGENT.z, (_202 * _196) * _295));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3386 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _321 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3408 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3419 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3430 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _325 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    vec4 _406 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _408 = _406.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _633 = sqrt(((_392 * _392) + (_393 * _393)) + (_394 * _394));
        float _639 = (cbMatDynParam._m0[5u].x * _633) + cbMatDynParam._m0[5u].y;
        float _3441 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _644 = (cbMatDynParam._m0[5u].z * _633) + cbMatDynParam._m0[5u].w;
        float _3452 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) - _640)) + _640) < ((_408 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _423 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _425 = _423.w;
    float _445 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _448 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _451 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    vec4 _453 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _464 = (((_453.y - _321) + (_453.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _477 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3463 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    vec4 _492 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _497 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _508 = (((_497.x - _325) + (_497.w * _325)) * cbMtdParam._m0[3u].x) + _325;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _425) - _489) + _492.x)) + _489;
    float _522 = (cbMtdParam._m0[3u].x * (((_490 * _425) - _490) + _492.y)) + _490;
    float _523 = (cbMtdParam._m0[3u].x * (((_491 * _425) - _491) + _492.z)) + _491;
    float _524 = 1.0 - _508;
    float _525 = _524 * _521;
    float _526 = _524 * _522;
    float _527 = _524 * _523;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _508;
    float _533 = (_522 + (-0.039999999105930328369140625)) * _508;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _508;
    float _535 = _532 + 0.039999999105930328369140625;
    float _537 = _533 + 0.039999999105930328369140625;
    float _538 = _534 + 0.039999999105930328369140625;
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _550 = _547.x * TEXCOORD_4;
    float _551 = dot(vec3(_318, _319, _320), vec3(_399, _400, _401));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _318) - _399;
    float _559 = (_554 * _319) - _400;
    float _560 = (_554 * _320) - _401;
    float _564 = abs(dot(vec3(_399, _400, _401), vec3(_318, _319, _320)));
    float _3496 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_464);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _585 = (1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _586 = _579 * _566;
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _682 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _686 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _711 = _614 + _318;
        float _712 = _618 + _319;
        float _713 = _622 + _320;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_318, _319, _320), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3544 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_318, _319, _320), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3577 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_318, _319, _320), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3610 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _1001 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _1005 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _1028 = _614 + _318;
        float _1029 = _618 + _319;
        float _1030 = _622 + _320;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_318, _319, _320), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3673 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_318, _319, _320), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3706 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_318, _319, _320), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3739 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = _954;
        _1276 = _954;
        _1277 = _954;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _558 * 0.5;
    float _1335 = _559 * 0.5;
    float _1336 = _560 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_953, _957, _960, _963));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_955, _958, _961, _964));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _959, _962, _965));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1466 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1469 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1497 = frontier_phi_19_17_ladder;
        }
        float _1705;
        if (_1466 > 0.0)
        {
            _1705 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1705 = frontier_phi_28_24_ladder;
        }
        float _1959;
        if (_1469 > 0.0)
        {
            _1959 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1959 = frontier_phi_40_35_ladder;
        }
        float _1961 = isnan(_1705) ? _1497 : (isnan(_1497) ? _1705 : min(_1497, _1705));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1463) + _1452;
        float _1967 = (_1962 * _1466) + _1456;
        float _1968 = (_1962 * _1469) + _1460;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1971 = (-1.0) - _1969;
        float _1973 = _1969 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1968 > _1973) || ((_1968 < _1971) || ((_1967 > _1973) || ((_1967 < _1971) || ((_1966 < _1971) || (_1966 > _1973))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1968, cbModelParam._m0[9u].z, fma(_1967, cbModelParam._m0[9u].y, _1966 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1968, cbModelParam._m0[10u].z, fma(_1967, cbModelParam._m0[10u].y, _1966 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1968, cbModelParam._m0[11u].z, fma(_1967, cbModelParam._m0[11u].y, _1966 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_18_40_ladder = _2096.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2096.x * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_18_40_ladder_2;
        _1487 = frontier_phi_18_40_ladder_1;
        _1489 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1403);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1565 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1568 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1710;
        if (_1562 > 0.0)
        {
            _1710 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1710 = frontier_phi_30_26_ladder;
        }
        float _1986;
        if (_1565 > 0.0)
        {
            _1986 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1986 = frontier_phi_42_37_ladder;
        }
        float _2199;
        if (_1568 > 0.0)
        {
            _2199 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2199 = frontier_phi_51_48_ladder;
        }
        float _2201 = isnan(_1986) ? _1710 : (isnan(_1710) ? _1986 : min(_1710, _1986));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1562) + _1551;
        float _2207 = (_2202 * _1565) + _1555;
        float _2208 = (_2202 * _1568) + _1559;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2209;
        float _2212 = _2209 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2208 > _2212) || ((_2208 < _2210) || ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 < _2210) || (_2206 > _2212))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2208, cbModelParam._m0[17u].z, fma(_2207, cbModelParam._m0[17u].y, _2206 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2208, cbModelParam._m0[18u].z, fma(_2207, cbModelParam._m0[18u].y, _2206 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2208, cbModelParam._m0[19u].z, fma(_2207, cbModelParam._m0[19u].y, _2206 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_27_51_ladder = _2424.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2424.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2424.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_27_51_ladder_2;
        _1589 = frontier_phi_27_51_ladder_1;
        _1591 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1604 = (((_585 * _535) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_585 * _537) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_585 * _538) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    uvec4 _1627 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1629 = _1627.x * 14u;
    uint _1630 = _1629 + 13u;
    float _1637 = _550 + (-1.0);
    float _1642 = (cbLight._m0[_1630].x * _1637) + 1.0;
    float _1643 = (cbLight._m0[_1630].y * _1637) + 1.0;
    float _1644 = (cbLight._m0[_1630].z * _1637) + 1.0;
    float _1645 = (cbLight._m0[_1630].w * _1637) + 1.0;
    uint _1646 = _1629 + 5u;
    float _1652 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1656 = _1629 + 4u;
    float _1663 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
    uint _1667 = _1629 | 1u;
    float _1678 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_318, _319, _320));
    float _1681 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_318, _319, _320));
    float _3875 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _3886 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1686 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1688 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1695 = ((cbLight._m0[_1646].x * _1652) * _1688) + ((cbLight._m0[_1656].x * _1663) * _1686);
    float _1696 = ((_1652 * cbLight._m0[_1646].y) * _1688) + ((_1663 * cbLight._m0[_1656].y) * _1686);
    float _1697 = ((_1652 * cbLight._m0[_1646].z) * _1688) + ((_1663 * cbLight._m0[_1656].z) * _1686);
    uvec4 _1702 = floatBitsToUint(cbLight._m0[_1629 + 12u]);
    bool _1704 = _1702.x == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1704)
    {
        _1715 = _1695;
        _1717 = _1696;
        _1719 = _1697;
    }
    else
    {
        uint _1723 = _1629 + 6u;
        float _1739 = (dot(vec3(cbLight._m0[_1629 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1740 = _1739 * _1739;
        float _3897 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1742 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1715 = (((cbLight._m0[_1723].x * 0.3183098733425140380859375) * _1741) * _1742) + _1695;
        _1717 = (((cbLight._m0[_1723].y * 0.3183098733425140380859375) * _1741) * _1742) + _1696;
        _1719 = (((cbLight._m0[_1723].z * 0.3183098733425140380859375) * _1741) * _1742) + _1697;
    }
    bool _1722 = _1702.y == 0u;
    float _1760;
    float _1762;
    float _1764;
    if (_1722)
    {
        _1760 = _1715;
        _1762 = _1717;
        _1764 = _1719;
    }
    else
    {
        uint _1930 = _1629 + 7u;
        float _1946 = (dot(vec3(cbLight._m0[_1629 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _3913 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1949 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1760 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1715;
        _1762 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1717;
        _1764 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1719;
    }
    uint _1767 = _1629 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _464) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1629].x + _399;
    float _1783 = cbLight._m0[_1629].y + _400;
    float _1784 = cbLight._m0[_1629].z + _401;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1629].xyz));
    float _3929 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _1796 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1797 = dot(vec3(_318, _319, _320), vec3(_1789, _1790, _1791));
    float _3951 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1789, _1790, _1791));
    float _3962 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1817 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
    float _1818 = 0.959999978542327880859375 - _532;
    float _1820 = 0.959999978542327880859375 - _533;
    float _1821 = 0.959999978542327880859375 - _534;
    float _1828 = 1.0 - _1781;
    float _1839 = (0.5 / (((_1796 * ((_1795 * _1828) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1828) + _1781) * _1795))) * _1795;
    float _3973 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    uint _1852 = _1629 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1667].w)) * _464) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1667].x + _399;
    float _1866 = cbLight._m0[_1667].y + _400;
    float _1867 = cbLight._m0[_1667].z + _401;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1667].xyz));
    float _3984 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1879 = dot(vec3(_318, _319, _320), vec3(_1872, _1873, _1874));
    float _3995 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_1872, _1873, _1874));
    float _4006 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0);
    float _1905 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1796 * ((_1878 * _1905) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1905) + _1864) * _1878))) * _1878;
    float _4017 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1927 = (((((_1898 * _1818) + _535) * cbLight._m0[_1852].x) * _1917) * _1652) + (((((_1817 * _1818) + _535) * cbLight._m0[_1767].x) * _1841) * _1663);
    float _1928 = (((((_1898 * _1820) + _537) * cbLight._m0[_1852].y) * _1917) * _1652) + (((((_1817 * _1820) + _537) * cbLight._m0[_1767].y) * _1841) * _1663);
    float _1929 = (((((_1898 * _1821) + _538) * cbLight._m0[_1852].z) * _1917) * _1652) + (((((_1817 * _1821) + _538) * cbLight._m0[_1767].z) * _1841) * _1663);
    float _1991;
    float _1993;
    float _1995;
    if (_1704)
    {
        _1991 = _1927;
        _1993 = _1928;
        _1995 = _1929;
    }
    else
    {
        uint _1997 = _1629 + 2u;
        uint _2001 = _1629 + 10u;
        float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _464) * 0.949999988079071044921875);
        float _2016 = _2015 * _2015;
        float _2017 = cbLight._m0[_1997].x + _399;
        float _2018 = cbLight._m0[_1997].y + _400;
        float _2019 = cbLight._m0[_1997].z + _401;
        float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
        float _2024 = _2023 * _2017;
        float _2025 = _2023 * _2018;
        float _2026 = _2023 * _2019;
        float _2027 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1997].xyz));
        float _4028 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2031 = dot(vec3(_318, _319, _320), vec3(_2024, _2025, _2026));
        float _4039 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2035 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2024, _2025, _2026));
        float _4050 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2039 = _2016 * _2016;
        float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
        float _2050 = exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0);
        float _2057 = 1.0 - _2016;
        float _2067 = (0.5 / (((_1796 * ((_2030 * _2057) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2057) + _2016) * _2030))) * _2030;
        float _4061 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2069 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
        float _2070 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
        _1991 = (((((_2050 * _1818) + _535) * cbLight._m0[_2001].x) * _2069) * _2070) + _1927;
        _1993 = (((((_2050 * _1820) + _537) * cbLight._m0[_2001].y) * _2069) * _2070) + _1928;
        _1995 = (((((_2050 * _1821) + _538) * cbLight._m0[_2001].z) * _2069) * _2070) + _1929;
    }
    float _2105;
    float _2107;
    float _2109;
    if (_1722)
    {
        _2105 = _1991;
        _2107 = _1993;
        _2109 = _1995;
    }
    else
    {
        uint _2116 = _1629 + 3u;
        uint _2120 = _1629 + 11u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _464) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _399;
        float _2137 = cbLight._m0[_2116].y + _400;
        float _2138 = cbLight._m0[_2116].z + _401;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2116].xyz));
        float _4077 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2150 = dot(vec3(_318, _319, _320), vec3(_2143, _2144, _2145));
        float _4088 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4099 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
        float _2176 = 1.0 - _2135;
        float _2186 = (0.5 / (((_1796 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2176) + _2135) * _2149))) * _2149;
        float _4110 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _2105 = (((((_2169 * _1818) + _535) * cbLight._m0[_2120].x) * _2188) * _2189) + _1991;
        _2107 = (((((_2169 * _1820) + _537) * cbLight._m0[_2120].y) * _2188) * _2189) + _1993;
        _2109 = (((((_2169 * _1821) + _538) * cbLight._m0[_2120].z) * _2188) * _2189) + _1995;
    }
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1627.y == 0u)
    {
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2264;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2264;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2264;
        uvec4 _2279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2280 = _2279.x;
        uint _2291 = uint((float(_2279.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2280))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2280)));
        float _2301 = (log2(_2267 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2302 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        uint _2305 = uint(isnan(14.0) ? _2302 : (isnan(_2302) ? 14.0 : min(_2302, 14.0)));
        uvec4 _2310 = texelFetch(g_lightClusterGridBuffer, int(((_2305 << 2u) + (_2291 << 6u)) >> 2u));
        uint _2311 = _2310.x;
        uint _2312 = _2279.z;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((((1u << ((_2312 >> 4u) & 15u)) + 4294967295u) & _2311) == 0u) || ((_2312 & 240u) == 0u))
        {
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
        }
        else
        {
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            uint _2587 = 0u;
            uint _2596;
            bool _2597;
            for (;;)
            {
                _2596 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                _2597 = _2596 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2597)
                {
                    frontier_phi_68_pred = _2583;
                    frontier_phi_68_pred_1 = _2586;
                    frontier_phi_68_pred_2 = _2585;
                    frontier_phi_68_pred_3 = _2584;
                    frontier_phi_68_pred_4 = _2582;
                    frontier_phi_68_pred_5 = _2581;
                }
                else
                {
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    uint _2732;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2596;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    for (;;)
                    {
                        uint _2736 = uint(findLSB(_2732)) + (_2587 << 5u);
                        uint _2733 = (_2732 + 4294967295u) & _2732;
                        uint _2738 = _2736 * 48u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2758 = (_2736 * 48u) + 4u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2777 = (_2736 * 48u) + 8u;
                        vec3 _2788 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x));
                        float _2792 = _2752.x - _2265;
                        float _2793 = _2752.y - _2266;
                        float _2794 = _2752.z - _2267;
                        float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                        float _2798 = inversesqrt(_2795);
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2802 = dot(vec3(_445, _448, _451), vec3(_2799, _2800, _2801));
                        float _2807 = 1.0 - (_2795 * _2752.w);
                        float _4136 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2809 = sqrt(_2795) * _2771.w;
                        float _2812 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2802) + _2813;
                        float _2819 = _2809 * _2809;
                        float _2823 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2808) / ((_2819 * 0.699999988079071044921875) + 1.0);
                        float _2827 = (-0.0) - _2265;
                        float _2828 = (-0.0) - _2266;
                        float _2829 = (-0.0) - _2267;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2844 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2845 = 1.0 - _566;
                        float _2852 = sqrt(1.0 - ((1.0 - (_2845 * _2845)) * (1.0 - (_2844 * _2844))));
                        float _2853 = _2852 * _2852;
                        float _2854 = _2853 * _2853;
                        float _2855 = _2834 + _2799;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2865 = dot(vec3(_445, _448, _451), vec3(_2834, _2835, _2836));
                        float _4152 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2869 = dot(vec3(_445, _448, _451), vec3(_2861 * _2855, _2861 * _2856, _2861 * _2857));
                        float _4163 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2876 = ((_2872 * _2872) * (_2854 + (-1.0))) + 1.0;
                        float _2877 = _2812 * _2853;
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2802) + _2878;
                        float _4174 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2883 = 1.0 - _2853;
                        float _2893 = (0.5 / (((_2882 * ((_2868 * _2883) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2853) * _2868))) * _2882;
                        float _4185 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2904 = (((_2854 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_2876 * _2876) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2808;
                        _2656 = (_2823 * _2771.x) + _2729;
                        _2657 = (_2823 * _2771.y) + _2730;
                        _2658 = (_2823 * _2771.z) + _2731;
                        _2653 = (_2904 * _2788.x) + _2726;
                        _2654 = (_2904 * _2788.y) + _2727;
                        _2655 = (_2904 * _2788.z) + _2728;
                        if (_2733 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2733;
                        }
                    }
                    frontier_phi_68_pred = _2655;
                    frontier_phi_68_pred_1 = _2658;
                    frontier_phi_68_pred_2 = _2657;
                    frontier_phi_68_pred_3 = _2656;
                    frontier_phi_68_pred_4 = _2654;
                    frontier_phi_68_pred_5 = _2653;
                }
                _2434 = frontier_phi_68_pred;
                _2440 = frontier_phi_68_pred_1;
                _2438 = frontier_phi_68_pred_2;
                _2436 = frontier_phi_68_pred_3;
                _2432 = frontier_phi_68_pred_4;
                _2430 = frontier_phi_68_pred_5;
                uint _2588 = _2587 + 1u;
                if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2581 = _2430;
                    _2582 = _2432;
                    _2583 = _2434;
                    _2584 = _2436;
                    _2585 = _2438;
                    _2586 = _2440;
                    _2587 = _2588;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
        }
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.z;
        uint _2446 = (_2444 >> 8u) & 15u;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((4294967295u << _2446) & _2311) == 0u)
        {
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
        }
        else
        {
            float _2574 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
            float _2575 = _2574 * _2265;
            float _2576 = _2574 * _2266;
            float _2577 = _2574 * _2267;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2446 < ((_2444 >> 12u) & 15u))
            {
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2709 = _2429;
                float _2710 = _2431;
                float _2711 = _2433;
                float _2712 = _2435;
                float _2713 = _2437;
                float _2714 = _2439;
                uint _2715 = _2446;
                uint _2724;
                bool _2725;
                for (;;)
                {
                    _2724 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                    _2725 = _2724 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2725)
                    {
                        frontier_phi_79_pred = _2714;
                        frontier_phi_79_pred_1 = _2713;
                        frontier_phi_79_pred_2 = _2712;
                        frontier_phi_79_pred_3 = _2711;
                        frontier_phi_79_pred_4 = _2710;
                        frontier_phi_79_pred_5 = _2709;
                    }
                    else
                    {
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        uint _2937 = _2724;
                        uint _2938;
                        vec4 _2963;
                        float _2964;
                        vec4 _2979;
                        vec3 _2991;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2948 = ((_2715 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2937));
                            _2938 = (_2937 + 4294967295u) & _2937;
                            uint _2950 = _2948 * 40u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            _2964 = _2963.w;
                            uint _2966 = (_2948 * 40u) + 4u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2981 = (_2948 * 40u) + 8u;
                            _2991 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x));
                            uint _2994 = (_2948 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2948 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2948 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2948 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2267, _3058.z, fma(_2266, _3058.y, _3058.x * _2265)) + _3058.w;
                            _3071 = !((fma(_2267, _3039.z, fma(_2266, _3039.y, _3039.x * _2265)) + _3039.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2963.x - _2265;
                                float _3099 = _2963.y - _2266;
                                float _3100 = _2963.z - _2267;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2964 * _2964));
                                float _4196 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3116 = sqrt(_3101) * _2979.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_445, _448, _451))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2267, _3007.z, fma(_2266, _3007.y, _3007.x * _2265)) + _3007.w) / _3070;
                                float _3130 = (fma(_2267, _3023.z, fma(_2266, _3023.y, _3023.x * _2265)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4212 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _566;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2575;
                                float _3160 = _3106 - _2576;
                                float _3161 = _3107 - _2577;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2575, (-0.0) - _2576, (-0.0) - _2577));
                                float _4223 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3173 = dot(vec3(_445, _448, _451), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4234 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_445, _448, _451), vec3(_3105, _3106, _3107))) + _3182;
                                float _4245 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4256 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3136 * _2979.z;
                                frontier_phi_85_pred_1 = _3136 * _2979.y;
                                frontier_phi_85_pred_2 = _3136 * _2979.x;
                                frontier_phi_85_pred_3 = _3210 * _2991.z;
                                frontier_phi_85_pred_4 = _3210 * _2991.y;
                                frontier_phi_85_pred_5 = _3210 * _2991.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3219 = frontier_phi_85_pred;
                            _3218 = frontier_phi_85_pred_1;
                            _3217 = frontier_phi_85_pred_2;
                            _3216 = frontier_phi_85_pred_3;
                            _3215 = frontier_phi_85_pred_4;
                            _3214 = frontier_phi_85_pred_5;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            if (_2938 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2938;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2923;
                        frontier_phi_79_pred_1 = _2922;
                        frontier_phi_79_pred_2 = _2921;
                        frontier_phi_79_pred_3 = _2920;
                        frontier_phi_79_pred_4 = _2919;
                        frontier_phi_79_pred_5 = _2918;
                    }
                    _2560 = frontier_phi_79_pred;
                    _2558 = frontier_phi_79_pred_1;
                    _2556 = frontier_phi_79_pred_2;
                    _2554 = frontier_phi_79_pred_3;
                    _2552 = frontier_phi_79_pred_4;
                    _2550 = frontier_phi_79_pred_5;
                    uint _2716 = _2715 + 1u;
                    if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2709 = _2550;
                        _2710 = _2552;
                        _2711 = _2554;
                        _2712 = _2556;
                        _2713 = _2558;
                        _2714 = _2560;
                        _2715 = _2716;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2556;
                frontier_phi_60_61_ladder_1 = _2560;
                frontier_phi_60_61_ladder_2 = _2558;
                frontier_phi_60_61_ladder_3 = _2554;
                frontier_phi_60_61_ladder_4 = _2552;
                frontier_phi_60_61_ladder_5 = _2550;
            }
            else
            {
                frontier_phi_60_61_ladder = _2435;
                frontier_phi_60_61_ladder_1 = _2439;
                frontier_phi_60_61_ladder_2 = _2437;
                frontier_phi_60_61_ladder_3 = _2433;
                frontier_phi_60_61_ladder_4 = _2431;
                frontier_phi_60_61_ladder_5 = _2429;
            }
            _2549 = frontier_phi_60_61_ladder_5;
            _2551 = frontier_phi_60_61_ladder_4;
            _2553 = frontier_phi_60_61_ladder_3;
            _2555 = frontier_phi_60_61_ladder;
            _2557 = frontier_phi_60_61_ladder_2;
            _2559 = frontier_phi_60_61_ladder_1;
        }
        float _2564 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2323 = (_2564 * _2555) + _1760;
        _2325 = (_2564 * _2557) + _1762;
        _2327 = (_2564 * _2559) + _1764;
        _2329 = ((_2549 * _535) * _2564) + _2105;
        _2331 = ((_2551 * _537) * _2564) + _2107;
        _2333 = ((_2553 * _538) * _2564) + _2109;
    }
    else
    {
        _2323 = _1760;
        _2325 = _1762;
        _2327 = _1764;
        _2329 = _2105;
        _2331 = _2107;
        _2333 = _2109;
    }
    vec4 _2339 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4272 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4283 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4294 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2363 = (((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2323 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _550))) + ((_2329 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1392)) * cbPerFrame._m0[3u].x)) + (_2339.x * cbMtdParam._m0[3u].x);
    float _2365 = ((_2339.y * cbMtdParam._m0[3u].x) + ((_2331 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1392)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2325 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _550)));
    float _2367 = ((_2339.z * cbMtdParam._m0[3u].x) + ((_2333 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1392)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2327 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _550)));
    float _2368 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2369 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    uint _2371 = _477 + 6u;
    float _2379 = _420 / cbSceneParam._m0[86u].x;
    float _2380 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2394 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2396 = _2394.x;
    float _2397 = _2394.y;
    float _2398 = _2394.z;
    float _2399 = _2394.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2454 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2455 = _2454 / _341;
        float _2466 = _2455 * _392;
        float _2467 = _393 * _2455;
        float _2468 = (-0.0) - _2467;
        float _2469 = _2455 * _394;
        float _2471 = (cbSceneParam._m0[77u].w * _2468) / _2454;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2467;
        float _2479 = sqrt(((_2466 * _2466) + (_2467 * _2467)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2454)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2666;
        if (abs((_2468 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2666 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2610 = 1.0 / cbSceneParam._m0[80u].x;
            float _2611 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2612 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            _2666 = ((abs(_2479 / _2468) * cbSceneParam._m0[80u].y) * ((((_2621 - _2622) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))))) * _2610)) - ((exp2(_2489 * _2621) - exp2(_2489 * _2622)) * _2610))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2668 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, 1.0), 0.0);
        float _2677 = exp2((_2666 * (-1.44269502162933349609375)) * (1.0 - _2668.w));
        float _2678 = log2(_2677);
        float _2694 = log2(_2399);
        _2491 = (exp2(_2694 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].x)) * _2668.x) / cbSceneParam._m0[78u].x)) + _2396;
        _2493 = (exp2(_2694 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].y)) * _2668.y) / cbSceneParam._m0[78u].y)) + _2397;
        _2495 = (exp2(_2694 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].z)) * _2668.z) / cbSceneParam._m0[78u].z)) + _2398;
        _2497 = _2677 * _2399;
    }
    else
    {
        _2491 = _2396;
        _2493 = _2397;
        _2495 = _2398;
        _2497 = _2399;
    }
    bool _2704;
    vec4 _2507;
    vec4 _2529;
    float _2531;
    float _2535;
    float _2536;
    float _2537;
    float _2538;
    bool _2548;
    for (;;)
    {
        _2507 = cbMatDynParam._m0[0u];
        float _2509 = roundEven(_2507.y);
        bool _2510 = _2509 == 3.0;
        float _2511 = log2(_2497);
        float _2518 = exp2(_2511 * cbSceneParam._m0[78u].x) * _2368;
        float _2519 = exp2(_2511 * cbSceneParam._m0[78u].y) * _2369;
        float _2520 = exp2(_2511 * cbSceneParam._m0[78u].z) * _2370;
        float _2527 = _408 + (-0.5);
        _2529 = cbMtdParam._m0[1u];
        _2531 = _2529.y * _2527;
        float _2534 = (_2509 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2535 = _2534 * (_2510 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
        _2536 = _2534 * (_2510 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
        _2537 = _2534 * (_2510 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
        _2538 = _2527 * 0.999000012874603271484375;
        _2548 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2548)
        {
            if ((cbInstanceData._m0[_477 + 7u].x + _2538) < 0.5)
            {
                _2704 = true;
                break;
            }
        }
        uint _2645 = _479 + uint(_2507.w);
        if ((cbInstanceData._m0[_2645].w < 1.0) && ((cbInstanceData._m0[_2645].w + _2538) < 0.5))
        {
            _2704 = true;
            break;
        }
        if ((_2531 + 1.0) < _2529.x)
        {
            _2704 = true;
            break;
        }
        _2704 = false;
        break;
    }
    float _2909;
    if (_2704)
    {
        discard_state = true;
        _2909 = 0.0;
    }
    else
    {
        _2909 = cbInstanceData._m0[_2371].w;
    }
    SV_Target.x = _2535;
    SV_Target.y = _2536;
    SV_Target.z = _2537;
    SV_Target.w = _2909;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2371].w;
    discard_exit();
}


