#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _887;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _232 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _245 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_232 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _265 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _232) + cbTextureTilingScale._m0[1u].w));
    float _271 = cbMtdParam._m0[10u].y * _265.z;
    float _275 = (_265.x * 2.0) + (-1.0);
    float _277 = (_265.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3242 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))));
    float _287 = fma(_284, _218, fma(_277, _210 * TANGENT.x, (_196 * _188) * _275));
    float _290 = fma(_284, _219, fma(_277, _210 * TANGENT.y, (_196 * _189) * _275));
    float _293 = fma(_284, _220, fma(_277, _210 * TANGENT.z, (_196 * _190) * _275));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3253 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _301 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3275 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3286 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _389 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _391 = _389.w;
    float _412 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _415 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _418 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    vec4 _420 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _431 = (((_420.y - _301) + (_420.w * _301)) * cbMtdParam._m0[3u].x) + _301;
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = (_444 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3297 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    vec4 _459 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _464 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _470 = cbMtdParam._m0[3u].x * _464.x;
    float _483 = (cbMtdParam._m0[3u].x * (((_456 * _391) - _456) + _459.x)) + _456;
    float _484 = (cbMtdParam._m0[3u].x * (((_457 * _391) - _457) + _459.y)) + _457;
    float _485 = (cbMtdParam._m0[3u].x * (((_458 * _391) - _458) + _459.z)) + _458;
    float _486 = 1.0 - _470;
    float _487 = _483 * _486;
    float _488 = _484 * _486;
    float _489 = _485 * _486;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _470;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _470;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _470;
    float _497 = _494 + 0.039999999105930328369140625;
    float _499 = _495 + 0.039999999105930328369140625;
    float _500 = _496 + 0.039999999105930328369140625;
    vec4 _509 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _512 = _509.x * TEXCOORD_4;
    float _513 = dot(vec3(_298, _299, _300), vec3(_378, _379, _380));
    float _516 = _513 * 2.0;
    float _520 = (_516 * _298) - _378;
    float _521 = (_516 * _299) - _379;
    float _522 = (_516 * _300) - _380;
    float _526 = abs(dot(vec3(_378, _379, _380), vec3(_298, _299, _300)));
    float _3330 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _528 = sqrt(_431);
    float _541 = exp2((_528 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_528 * 3.0));
    float _547 = (1.0 - _541) * ((_528 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _548 = _541 * _528;
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _611 = fma(_584, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576));
        float _615 = fma(_584, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576));
        float _619 = fma(_584, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576));
        float _644 = _576 + _298;
        float _645 = _580 + _299;
        float _646 = _584 + _300;
        float _656 = fma(_646, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) - _611;
        float _657 = fma(_646, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) - _615;
        float _658 = fma(_646, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) - _619;
        float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
        float _675 = ((_662 * _656) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_611 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_662 * _657) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_615 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_662 * _658) / cbModelParam._m0[34u].z) + ((((((_619 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        float _714 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_680.x + (-0.5));
        float _716 = _714 * (_680.y + (-0.5));
        float _717 = _714 * (_680.z + (-0.5));
        float _724 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_687.x + (-0.5));
        float _726 = _724 * (_687.y + (-0.5));
        float _727 = _724 * (_687.z + (-0.5));
        float _734 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_694.x + (-0.5));
        float _736 = _734 * (_694.y + (-0.5));
        float _737 = _734 * (_694.z + (-0.5));
        float _744 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_701.x + (-0.5));
        float _746 = _744 * (_701.y + (-0.5));
        float _747 = _744 * (_701.z + (-0.5));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = _715 * 0.5;
        float _752 = _725 * 0.5;
        float _753 = _735 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _768 = (dot(vec3(_298, _299, _300), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _778 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3378 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_780 + 1.0))) + _785) * _748;
        float _795 = _716 * 0.5;
        float _796 = _726 * 0.5;
        float _797 = _736 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_298, _299, _300), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3411 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_822 + 1.0))) + _827) * _749;
        float _837 = _717 * 0.5;
        float _838 = _727 * 0.5;
        float _839 = _737 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_298, _299, _300), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3444 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_864 + 1.0))) + _869) * _750;
        _886 = _717;
        _888 = _716;
        _889 = _715;
        _890 = _727;
        _891 = _726;
        _892 = _725;
        _893 = _737;
        _894 = _736;
        _895 = _735;
        _896 = _750;
        _897 = _749;
        _898 = _748;
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
        _899 = 0.0;
        _900 = 0.0;
        _901 = 0.0;
    }
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _927 = fma(_584, cbModelParam._m0[30u].z, fma(_580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _576));
        float _931 = fma(_584, cbModelParam._m0[31u].z, fma(_580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _576));
        float _935 = fma(_584, cbModelParam._m0[32u].z, fma(_580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _576));
        float _958 = _576 + _298;
        float _959 = _580 + _299;
        float _960 = _584 + _300;
        float _970 = fma(_960, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958)) - _927;
        float _971 = fma(_960, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958)) - _931;
        float _972 = fma(_960, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958)) - _935;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_927 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_931 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[35u].z) + ((((((_935 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1026 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_993.x + (-0.5));
        float _1028 = _1026 * (_993.y + (-0.5));
        float _1029 = _1026 * (_993.z + (-0.5));
        float _1036 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1000.x + (-0.5));
        float _1038 = _1036 * (_1000.y + (-0.5));
        float _1039 = _1036 * (_1000.z + (-0.5));
        float _1046 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1007.x + (-0.5));
        float _1048 = _1046 * (_1007.y + (-0.5));
        float _1049 = _1046 * (_1007.z + (-0.5));
        float _1056 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1014.x + (-0.5));
        float _1058 = _1056 * (_1014.y + (-0.5));
        float _1059 = _1056 * (_1014.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_298, _299, _300), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3507 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1090 + 1.0))) + _1095) * _1060;
        float _1105 = _1028 * 0.5;
        float _1106 = _1038 * 0.5;
        float _1107 = _1048 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_298, _299, _300), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3540 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1132 + 1.0))) + _1137) * _1061;
        float _1147 = _1029 * 0.5;
        float _1148 = _1039 * 0.5;
        float _1149 = _1049 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_298, _299, _300), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3573 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1174 + 1.0))) + _1179) * _1062;
        _1196 = _1029;
        _1197 = _1028;
        _1198 = _1027;
        _1199 = _1039;
        _1200 = _1038;
        _1201 = _1037;
        _1202 = _1049;
        _1203 = _1048;
        _1204 = _1047;
        _1205 = _1062;
        _1206 = _1061;
        _1207 = _1060;
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _887;
        _1197 = _887;
        _1198 = _887;
        _1199 = _887;
        _1200 = _887;
        _1201 = _887;
        _1202 = _887;
        _1203 = _887;
        _1204 = _887;
        _1205 = _887;
        _1206 = _887;
        _1207 = _887;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _899)) + _899;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _900)) + _900;
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1243 = fma(_1222, cbSceneParam._m0[89u].z, fma(_1221, cbSceneParam._m0[89u].y, _1220 * cbSceneParam._m0[89u].x));
    float _1246 = fma(_1222, cbSceneParam._m0[90u].z, fma(_1221, cbSceneParam._m0[90u].y, _1220 * cbSceneParam._m0[90u].x));
    float _1249 = fma(_1222, cbSceneParam._m0[91u].z, fma(_1221, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1220));
    float _1264 = _520 * 0.5;
    float _1265 = _521 * 0.5;
    float _1266 = _522 * 0.5;
    float _1267 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1270 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1273 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1307;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1280 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_886, _890, _893, _896));
        float _1284 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_888, _891, _894, _897));
        float _1288 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_889, _892, _895, _898));
        float _1295 = dot(vec4(cbModelParam._m0[39u]), vec4(_1264, _1265, _1266, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1295) ? 0.0 : (isnan(0.0) ? _1295 : max(0.0, _1295))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1318;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1309 = dot(vec4(cbModelParam._m0[40u]), vec4(_1264, _1265, _1266, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1322 = (_1318 * cbModelParam._m0[1u].x) + (_1307 * (1.0 - cbModelParam._m0[1u].x));
    float _1332 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1333 = isnan(_1332) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1332 : min(cbModelParam._m0[25u].z, _1332));
    float _1415;
    float _1417;
    float _1419;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1382 = fma(_584, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576)) + cbModelParam._m0[13u].w;
        float _1386 = fma(_584, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576)) + cbModelParam._m0[14u].w;
        float _1390 = fma(_584, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576)) + cbModelParam._m0[15u].w;
        float _1393 = fma(_522, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520));
        float _1396 = fma(_522, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520));
        float _1399 = fma(_522, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520));
        float _1427;
        if (_1393 > 0.0)
        {
            _1427 = abs((1.0 - _1382) / _1393);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1382 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1427 = frontier_phi_16_14_ladder;
        }
        float _1635;
        if (_1396 > 0.0)
        {
            _1635 = abs((1.0 - _1386) / _1396);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1386 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_21_ladder;
        }
        float _1889;
        if (_1399 > 0.0)
        {
            _1889 = abs((1.0 - _1390) / _1399);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1390 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1889 = frontier_phi_37_32_ladder;
        }
        float _1891 = isnan(_1635) ? _1427 : (isnan(_1427) ? _1635 : min(_1427, _1635));
        float _1892 = isnan(_1889) ? _1891 : (isnan(_1891) ? _1889 : min(_1891, _1889));
        float _1896 = (_1892 * _1393) + _1382;
        float _1897 = (_1892 * _1396) + _1386;
        float _1898 = (_1892 * _1399) + _1390;
        float _1899 = _1892 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1899;
        float _1903 = _1899 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 > _1903) || ((_1897 < _1901) || ((_1896 < _1901) || (_1896 > _1903))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1898, cbModelParam._m0[9u].z, fma(_1897, cbModelParam._m0[9u].y, _1896 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1898, cbModelParam._m0[10u].z, fma(_1897, cbModelParam._m0[10u].y, _1896 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1898, cbModelParam._m0[11u].z, fma(_1897, cbModelParam._m0[11u].y, _1896 * cbModelParam._m0[11u].x))), _1333);
            frontier_phi_15_37_ladder = _2026.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2026.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2026.x * cbModelParam._m0[1u].y;
        }
        _1415 = frontier_phi_15_37_ladder_2;
        _1417 = frontier_phi_15_37_ladder_1;
        _1419 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1403 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_520, _521, _522), _1333);
        _1415 = _1403.x * cbModelParam._m0[1u].y;
        _1417 = _1403.y * cbModelParam._m0[1u].y;
        _1419 = _1403.z * cbModelParam._m0[1u].y;
    }
    float _1423 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1423 : min(cbModelParam._m0[25u].w, _1423));
    float _1517;
    float _1519;
    float _1521;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1481 = fma(_584, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576)) + cbModelParam._m0[21u].w;
        float _1485 = fma(_584, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576)) + cbModelParam._m0[22u].w;
        float _1489 = fma(_584, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576)) + cbModelParam._m0[23u].w;
        float _1492 = fma(_522, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520));
        float _1495 = fma(_522, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520));
        float _1498 = fma(_522, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520));
        float _1640;
        if (_1492 > 0.0)
        {
            _1640 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1640 = frontier_phi_27_23_ladder;
        }
        float _1916;
        if (_1495 > 0.0)
        {
            _1916 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1916 = frontier_phi_39_34_ladder;
        }
        float _2129;
        if (_1498 > 0.0)
        {
            _2129 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2129 = frontier_phi_48_45_ladder;
        }
        float _2131 = isnan(_1916) ? _1640 : (isnan(_1640) ? _1916 : min(_1640, _1916));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1492) + _1481;
        float _2137 = (_2132 * _1495) + _1485;
        float _2138 = (_2132 * _1498) + _1489;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2139;
        float _2142 = _2139 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2138 > _2142) || ((_2138 < _2140) || ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 < _2140) || (_2136 > _2142))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2138, cbModelParam._m0[17u].z, fma(_2137, cbModelParam._m0[17u].y, _2136 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2138, cbModelParam._m0[18u].z, fma(_2137, cbModelParam._m0[18u].y, _2136 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2138, cbModelParam._m0[19u].z, fma(_2137, cbModelParam._m0[19u].y, _2136 * cbModelParam._m0[19u].x))), _1424);
            frontier_phi_24_48_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1517 = frontier_phi_24_48_ladder_2;
        _1519 = frontier_phi_24_48_ladder_1;
        _1521 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_520, _521, _522), _1424);
        _1517 = _1501.x * cbModelParam._m0[1u].z;
        _1519 = _1501.y * cbModelParam._m0[1u].z;
        _1521 = _1501.z * cbModelParam._m0[1u].z;
    }
    float _1534 = (((_547 * _497) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1536 = (((_547 * _499) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1538 = (((_547 * _500) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1541 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, _1534 * cbSceneParam._m0[91u].x));
    uvec4 _1557 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1559 = _1557.x * 14u;
    uint _1560 = _1559 + 13u;
    float _1567 = _512 + (-1.0);
    float _1572 = (cbLight._m0[_1560].x * _1567) + 1.0;
    float _1573 = (cbLight._m0[_1560].y * _1567) + 1.0;
    float _1574 = (cbLight._m0[_1560].z * _1567) + 1.0;
    float _1575 = (cbLight._m0[_1560].w * _1567) + 1.0;
    uint _1576 = _1559 + 5u;
    float _1582 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
    uint _1586 = _1559 + 4u;
    float _1593 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    uint _1597 = _1559 | 1u;
    float _1608 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_298, _299, _300));
    float _1611 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_298, _299, _300));
    float _3709 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _3720 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1616 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.3183098733425140380859375;
    float _1618 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.3183098733425140380859375;
    float _1625 = ((cbLight._m0[_1576].x * _1582) * _1618) + ((cbLight._m0[_1586].x * _1593) * _1616);
    float _1626 = ((_1582 * cbLight._m0[_1576].y) * _1618) + ((_1593 * cbLight._m0[_1586].y) * _1616);
    float _1627 = ((_1582 * cbLight._m0[_1576].z) * _1618) + ((_1593 * cbLight._m0[_1586].z) * _1616);
    uvec4 _1632 = floatBitsToUint(cbLight._m0[_1559 + 12u]);
    bool _1634 = _1632.x == 0u;
    float _1645;
    float _1647;
    float _1649;
    if (_1634)
    {
        _1645 = _1625;
        _1647 = _1626;
        _1649 = _1627;
    }
    else
    {
        uint _1653 = _1559 + 6u;
        float _1669 = (dot(vec3(cbLight._m0[_1559 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3731 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1672 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1645 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1625;
        _1647 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1626;
        _1649 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1627;
    }
    bool _1652 = _1632.y == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1652)
    {
        _1690 = _1645;
        _1692 = _1647;
        _1694 = _1649;
    }
    else
    {
        uint _1860 = _1559 + 7u;
        float _1876 = (dot(vec3(cbLight._m0[_1559 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1877 = _1876 * _1876;
        float _3747 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1879 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _1690 = (((cbLight._m0[_1860].x * 0.3183098733425140380859375) * _1878) * _1879) + _1645;
        _1692 = (((cbLight._m0[_1860].y * 0.3183098733425140380859375) * _1878) * _1879) + _1647;
        _1694 = (((cbLight._m0[_1860].z * 0.3183098733425140380859375) * _1878) * _1879) + _1649;
    }
    uint _1697 = _1559 + 8u;
    float _1710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1559].w)) * _431) * 0.949999988079071044921875);
    float _1711 = _1710 * _1710;
    float _1712 = cbLight._m0[_1559].x + _378;
    float _1713 = cbLight._m0[_1559].y + _379;
    float _1714 = cbLight._m0[_1559].z + _380;
    float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
    float _1719 = _1718 * _1712;
    float _1720 = _1718 * _1713;
    float _1721 = _1718 * _1714;
    float _1722 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1559].xyz));
    float _3763 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _1726 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1727 = dot(vec3(_298, _299, _300), vec3(_1719, _1720, _1721));
    float _3785 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1731 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_1719, _1720, _1721));
    float _3796 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1735 = _1711 * _1711;
    float _1739 = ((_1730 * _1730) * (_1735 + (-1.0))) + 1.0;
    float _1747 = exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0);
    float _1748 = 0.959999978542327880859375 - _494;
    float _1750 = 0.959999978542327880859375 - _495;
    float _1751 = 0.959999978542327880859375 - _496;
    float _1758 = 1.0 - _1711;
    float _1769 = (0.5 / (((_1726 * ((_1725 * _1758) + _1711)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1758) + _1711) * _1725))) * _1725;
    float _3807 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1735 / ((_1739 * _1739) * 3.141590118408203125));
    uint _1782 = _1559 + 9u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1597].w)) * _431) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1597].x + _378;
    float _1796 = cbLight._m0[_1597].y + _379;
    float _1797 = cbLight._m0[_1597].z + _380;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1597].xyz));
    float _3818 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1809 = dot(vec3(_298, _299, _300), vec3(_1802, _1803, _1804));
    float _3829 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_1802, _1803, _1804));
    float _3840 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1794 * _1794;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1828 = exp2(log2(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * 5.0);
    float _1835 = 1.0 - _1794;
    float _1845 = (0.5 / (((_1726 * ((_1808 * _1835) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1835) + _1794) * _1808))) * _1808;
    float _3851 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    float _1857 = (((((_1828 * _1748) + _497) * cbLight._m0[_1782].x) * _1847) * _1582) + (((((_1747 * _1748) + _497) * cbLight._m0[_1697].x) * _1771) * _1593);
    float _1858 = (((((_1828 * _1750) + _499) * cbLight._m0[_1782].y) * _1847) * _1582) + (((((_1747 * _1750) + _499) * cbLight._m0[_1697].y) * _1771) * _1593);
    float _1859 = (((((_1828 * _1751) + _500) * cbLight._m0[_1782].z) * _1847) * _1582) + (((((_1747 * _1751) + _500) * cbLight._m0[_1697].z) * _1771) * _1593);
    float _1921;
    float _1923;
    float _1925;
    if (_1634)
    {
        _1921 = _1857;
        _1923 = _1858;
        _1925 = _1859;
    }
    else
    {
        uint _1927 = _1559 + 2u;
        uint _1931 = _1559 + 10u;
        float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _431) * 0.949999988079071044921875);
        float _1946 = _1945 * _1945;
        float _1947 = cbLight._m0[_1927].x + _378;
        float _1948 = cbLight._m0[_1927].y + _379;
        float _1949 = cbLight._m0[_1927].z + _380;
        float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
        float _1954 = _1953 * _1947;
        float _1955 = _1953 * _1948;
        float _1956 = _1953 * _1949;
        float _1957 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1927].xyz));
        float _3862 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1960 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1961 = dot(vec3(_298, _299, _300), vec3(_1954, _1955, _1956));
        float _3873 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1965 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_1954, _1955, _1956));
        float _3884 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1969 = _1946 * _1946;
        float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
        float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
        float _1987 = 1.0 - _1946;
        float _1997 = (0.5 / (((_1726 * ((_1960 * _1987) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1987) + _1946) * _1960))) * _1960;
        float _3895 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1999 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
        float _2000 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1921 = (((((_1980 * _1748) + _497) * cbLight._m0[_1931].x) * _1999) * _2000) + _1857;
        _1923 = (((((_1980 * _1750) + _499) * cbLight._m0[_1931].y) * _1999) * _2000) + _1858;
        _1925 = (((((_1980 * _1751) + _500) * cbLight._m0[_1931].z) * _1999) * _2000) + _1859;
    }
    float _2035;
    float _2037;
    float _2039;
    if (_1652)
    {
        _2035 = _1921;
        _2037 = _1923;
        _2039 = _1925;
    }
    else
    {
        uint _2046 = _1559 + 3u;
        uint _2050 = _1559 + 11u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _431) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _378;
        float _2067 = cbLight._m0[_2046].y + _379;
        float _2068 = cbLight._m0[_2046].z + _380;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2046].xyz));
        float _3911 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _2080 = dot(vec3(_298, _299, _300), vec3(_2073, _2074, _2075));
        float _3922 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _3933 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * 5.0);
        float _2106 = 1.0 - _2065;
        float _2116 = (0.5 / (((_1726 * ((_2079 * _2106) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _2106) + _2065) * _2079))) * _2079;
        float _3944 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _2035 = (((((_2099 * _1748) + _497) * cbLight._m0[_2050].x) * _2118) * _2119) + _1921;
        _2037 = (((((_2099 * _1750) + _499) * cbLight._m0[_2050].y) * _2118) * _2119) + _1923;
        _2039 = (((((_2099 * _1751) + _500) * cbLight._m0[_2050].z) * _2118) * _2119) + _1925;
    }
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_1557.y == 0u)
    {
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2194;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2194;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2194;
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.x;
        uint _2221 = uint((float(_2209.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2210))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2210)));
        float _2231 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2232 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        uint _2235 = uint(isnan(14.0) ? _2232 : (isnan(_2232) ? 14.0 : min(_2232, 14.0)));
        uvec4 _2240 = texelFetch(g_lightClusterGridBuffer, int(((_2235 << 2u) + (_2221 << 6u)) >> 2u));
        uint _2241 = _2240.x;
        uint _2242 = _2209.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2242 >> 4u) & 15u)) + 4294967295u) & _2241) == 0u) || ((_2242 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            uint _2509 = 0u;
            uint _2518;
            bool _2519;
            for (;;)
            {
                _2518 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                _2519 = _2518 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2519)
                {
                    frontier_phi_63_pred = _2508;
                    frontier_phi_63_pred_1 = _2507;
                    frontier_phi_63_pred_2 = _2506;
                    frontier_phi_63_pred_3 = _2505;
                    frontier_phi_63_pred_4 = _2504;
                    frontier_phi_63_pred_5 = _2503;
                }
                else
                {
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    uint _2633;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2518;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    for (;;)
                    {
                        uint _2637 = uint(findLSB(_2633)) + (_2509 << 5u);
                        uint _2634 = (_2633 + 4294967295u) & _2633;
                        uint _2639 = _2637 * 48u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2659 = (_2637 * 48u) + 4u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2678 = (_2637 * 48u) + 8u;
                        vec3 _2689 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x));
                        float _2693 = _2653.x - _2195;
                        float _2694 = _2653.y - _2196;
                        float _2695 = _2653.z - _2197;
                        float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                        float _2699 = inversesqrt(_2696);
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2703 = dot(vec3(_412, _415, _418), vec3(_2700, _2701, _2702));
                        float _2708 = 1.0 - (_2696 * _2653.w);
                        float _3970 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2709 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                        float _2710 = sqrt(_2696) * _2672.w;
                        float _2713 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                        float _2714 = _2713 * _2713;
                        float _2717 = ((1.0 - _2714) * _2703) + _2714;
                        float _2720 = _2710 * _2710;
                        float _2724 = ((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2709) / ((_2720 * 0.699999988079071044921875) + 1.0);
                        float _2728 = (-0.0) - _2195;
                        float _2729 = (-0.0) - _2196;
                        float _2730 = (-0.0) - _2197;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2745 = exp2(log2(1.0 / ((_2720 * 3.5) + 5.0)) * 0.25);
                        float _2746 = 1.0 - _528;
                        float _2753 = sqrt(1.0 - ((1.0 - (_2746 * _2746)) * (1.0 - (_2745 * _2745))));
                        float _2754 = _2753 * _2753;
                        float _2755 = _2754 * _2754;
                        float _2756 = _2735 + _2700;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2766 = dot(vec3(_412, _415, _418), vec3(_2735, _2736, _2737));
                        float _3986 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2770 = dot(vec3(_412, _415, _418), vec3(_2762 * _2756, _2762 * _2757, _2762 * _2758));
                        float _3997 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2773 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2777 = ((_2773 * _2773) * (_2755 + (-1.0))) + 1.0;
                        float _2778 = _2713 * _2754;
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2703) + _2779;
                        float _4008 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2784 = 1.0 - _2754;
                        float _2794 = (0.5 / (((_2783 * ((_2769 * _2784) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2784) + _2754) * _2769))) * _2783;
                        float _4019 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2805 = (((_2755 * 3.1415927410125732421875) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) / ((_2777 * _2777) * ((_2720 * 2.1991131305694580078125) + 3.141590118408203125))) * _2709;
                        _2562 = (_2724 * _2672.x) + _2630;
                        _2563 = (_2724 * _2672.y) + _2631;
                        _2564 = (_2724 * _2672.z) + _2632;
                        _2559 = (_2805 * _2689.x) + _2627;
                        _2560 = (_2805 * _2689.y) + _2628;
                        _2561 = (_2805 * _2689.z) + _2629;
                        if (_2634 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2634;
                        }
                    }
                    frontier_phi_63_pred = _2564;
                    frontier_phi_63_pred_1 = _2563;
                    frontier_phi_63_pred_2 = _2562;
                    frontier_phi_63_pred_3 = _2561;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                _2370 = frontier_phi_63_pred;
                _2368 = frontier_phi_63_pred_1;
                _2366 = frontier_phi_63_pred_2;
                _2364 = frontier_phi_63_pred_3;
                _2362 = frontier_phi_63_pred_4;
                _2360 = frontier_phi_63_pred_5;
                uint _2510 = _2509 + 1u;
                if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2503 = _2360;
                    _2504 = _2362;
                    _2505 = _2364;
                    _2506 = _2366;
                    _2507 = _2368;
                    _2508 = _2370;
                    _2509 = _2510;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((4294967295u << _2376) & _2241) == 0u)
        {
            _2471 = _2359;
            _2473 = _2361;
            _2475 = _2363;
            _2477 = _2365;
            _2479 = _2367;
            _2481 = _2369;
        }
        else
        {
            float _2496 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _2497 = _2496 * _2195;
            float _2498 = _2496 * _2196;
            float _2499 = _2496 * _2197;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2610 = _2359;
                float _2611 = _2361;
                float _2612 = _2363;
                float _2613 = _2365;
                float _2614 = _2367;
                float _2615 = _2369;
                uint _2616 = _2376;
                uint _2625;
                bool _2626;
                for (;;)
                {
                    _2625 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                    _2626 = _2625 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2626)
                    {
                        frontier_phi_69_pred = _2615;
                        frontier_phi_69_pred_1 = _2614;
                        frontier_phi_69_pred_2 = _2613;
                        frontier_phi_69_pred_3 = _2612;
                        frontier_phi_69_pred_4 = _2611;
                        frontier_phi_69_pred_5 = _2610;
                    }
                    else
                    {
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        uint _2829 = _2625;
                        uint _2830;
                        vec4 _2855;
                        float _2856;
                        vec4 _2871;
                        vec3 _2883;
                        vec4 _2899;
                        vec4 _2915;
                        float _2962;
                        bool _2963;
                        for (;;)
                        {
                            uint _2840 = ((_2616 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2829));
                            _2830 = (_2829 + 4294967295u) & _2829;
                            uint _2842 = _2840 * 40u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            _2856 = _2855.w;
                            uint _2858 = (_2840 * 40u) + 4u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2873 = (_2840 * 40u) + 8u;
                            _2883 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x));
                            uint _2886 = (_2840 * 40u) + 16u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2902 = (_2840 * 40u) + 20u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2840 * 40u) + 24u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2937 = (_2840 * 40u) + 28u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2962 = fma(_2197, _2950.z, fma(_2196, _2950.y, _2950.x * _2195)) + _2950.w;
                            _2963 = !((fma(_2197, _2931.z, fma(_2196, _2931.y, _2931.x * _2195)) + _2931.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2963)
                            {
                                float _2990 = _2855.x - _2195;
                                float _2991 = _2855.y - _2196;
                                float _2992 = _2855.z - _2197;
                                float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                                float _2996 = inversesqrt(_2993);
                                float _2997 = _2996 * _2990;
                                float _2998 = _2996 * _2991;
                                float _2999 = _2996 * _2992;
                                float _3003 = 1.0 - (_2993 / (_2856 * _2856));
                                float _4030 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3008 = sqrt(_2993) * _2871.w;
                                float _3010 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                                float _3011 = _3010 * _3010;
                                float _3014 = ((1.0 - _3011) * dot(vec3(_2997, _2998, _2999), vec3(_412, _415, _418))) + _3011;
                                float _3017 = _3008 * _3008;
                                float _3021 = (fma(_2197, _2899.z, fma(_2196, _2899.y, _2899.x * _2195)) + _2899.w) / _2962;
                                float _3022 = (fma(_2197, _2915.z, fma(_2196, _2915.y, _2915.x * _2195)) + _2915.w) / _2962;
                                float _3026 = 1.0 - dot(vec2(_3021, _3022), vec2(_3021, _3022));
                                float _4046 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3028 = _3027 * (((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3004) / ((_3017 * 0.699999988079071044921875) + 1.0));
                                float _3040 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                                float _3041 = 1.0 - _528;
                                float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                                float _3049 = _3048 * _3048;
                                float _3050 = _3049 * _3049;
                                float _3051 = _2997 - _2497;
                                float _3052 = _2998 - _2498;
                                float _3053 = _2999 - _2499;
                                float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                                float _3061 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2497, (-0.0) - _2498, (-0.0) - _2499));
                                float _4057 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3064 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3065 = dot(vec3(_412, _415, _418), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                                float _4068 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3068 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                                float _3073 = _3010 * _3049;
                                float _3074 = _3073 * _3073;
                                float _3080 = ((1.0 - _3074) * dot(vec3(_412, _415, _418), vec3(_2997, _2998, _2999))) + _3074;
                                float _4079 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3082 = 1.0 - _3049;
                                float _3092 = (0.5 / (((_3081 * ((_3064 * _3082) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3049) * _3064))) * _3081;
                                float _4090 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3102 = (_3027 * _3004) * (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) / ((_3072 * _3072) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3028 * _2871.z;
                                frontier_phi_75_pred_1 = _3028 * _2871.y;
                                frontier_phi_75_pred_2 = _3028 * _2871.x;
                                frontier_phi_75_pred_3 = _3102 * _2883.z;
                                frontier_phi_75_pred_4 = _3102 * _2883.y;
                                frontier_phi_75_pred_5 = _3102 * _2883.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_75_pred;
                            _3110 = frontier_phi_75_pred_1;
                            _3109 = frontier_phi_75_pred_2;
                            _3108 = frontier_phi_75_pred_3;
                            _3107 = frontier_phi_75_pred_4;
                            _3106 = frontier_phi_75_pred_5;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            if (_2830 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2830;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2815;
                        frontier_phi_69_pred_1 = _2814;
                        frontier_phi_69_pred_2 = _2813;
                        frontier_phi_69_pred_3 = _2812;
                        frontier_phi_69_pred_4 = _2811;
                        frontier_phi_69_pred_5 = _2810;
                    }
                    _2482 = frontier_phi_69_pred;
                    _2480 = frontier_phi_69_pred_1;
                    _2478 = frontier_phi_69_pred_2;
                    _2476 = frontier_phi_69_pred_3;
                    _2474 = frontier_phi_69_pred_4;
                    _2472 = frontier_phi_69_pred_5;
                    uint _2617 = _2616 + 1u;
                    if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2610 = _2472;
                        _2611 = _2474;
                        _2612 = _2476;
                        _2613 = _2478;
                        _2614 = _2480;
                        _2615 = _2482;
                        _2616 = _2617;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2482;
                frontier_phi_57_58_ladder_1 = _2480;
                frontier_phi_57_58_ladder_2 = _2478;
                frontier_phi_57_58_ladder_3 = _2476;
                frontier_phi_57_58_ladder_4 = _2474;
                frontier_phi_57_58_ladder_5 = _2472;
            }
            else
            {
                frontier_phi_57_58_ladder = _2369;
                frontier_phi_57_58_ladder_1 = _2367;
                frontier_phi_57_58_ladder_2 = _2365;
                frontier_phi_57_58_ladder_3 = _2363;
                frontier_phi_57_58_ladder_4 = _2361;
                frontier_phi_57_58_ladder_5 = _2359;
            }
            _2471 = frontier_phi_57_58_ladder_5;
            _2473 = frontier_phi_57_58_ladder_4;
            _2475 = frontier_phi_57_58_ladder_3;
            _2477 = frontier_phi_57_58_ladder_2;
            _2479 = frontier_phi_57_58_ladder_1;
            _2481 = frontier_phi_57_58_ladder;
        }
        float _2486 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
        _2253 = (_2486 * _2477) + _1690;
        _2255 = (_2486 * _2479) + _1692;
        _2257 = (_2486 * _2481) + _1694;
        _2259 = ((_2471 * _497) * _2486) + _2035;
        _2261 = ((_2473 * _499) * _2486) + _2037;
        _2263 = ((_2475 * _500) * _2486) + _2039;
    }
    else
    {
        _2253 = _1690;
        _2255 = _1692;
        _2257 = _1694;
        _2259 = _2035;
        _2261 = _2037;
        _2263 = _2039;
    }
    vec4 _2269 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4106 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4117 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4128 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _2293 = (((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2253 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _512))) + ((_2259 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1322)) * cbPerFrame._m0[3u].x)) + (_2269.x * cbMtdParam._m0[3u].x);
    float _2295 = ((_2269.y * cbMtdParam._m0[3u].x) + ((_2261 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1322)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2255 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _512)));
    float _2297 = ((_2269.z * cbMtdParam._m0[3u].x) + ((_2263 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1322)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2257 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _512)));
    uint _2301 = _444 + 6u;
    float _2309 = _386 / cbSceneParam._m0[86u].x;
    float _2310 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2385 = _2384 / _320;
        float _2396 = _2385 * _371;
        float _2397 = _372 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2399 = _2385 * _373;
        float _2401 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2402 = _2401 + cbSceneParam._m0[79u].w;
        float _2403 = cbSceneParam._m0[79u].w - _2397;
        float _2409 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2399 * _2399));
        float _2412 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2409;
        float _2417 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2419 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2572;
        if (abs((_2398 - _2401) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2572 = ((((_2402 > 0.0) ? exp2(_2417 * _2402) : (2.0 - exp2(_2419 * _2402))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2412;
        }
        else
        {
            float _2532 = 1.0 / cbSceneParam._m0[80u].x;
            float _2533 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : max(_2402, _2403));
            float _2534 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : min(_2402, _2403));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            _2572 = ((abs(_2409 / _2398) * cbSceneParam._m0[80u].y) * ((((_2543 - _2544) * 2.0) - ((exp2(_2417 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)))) - exp2(_2417 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))))) * _2532)) - ((exp2(_2419 * _2543) - exp2(_2419 * _2544)) * _2532))) + (_2412 * cbSceneParam._m0[80u].z);
        }
        vec4 _2574 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2583 = exp2((_2572 * (-1.44269502162933349609375)) * (1.0 - _2574.w));
        float _2584 = log2(_2583);
        float _2600 = log2(_2329);
        _2421 = (exp2(_2600 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].x)) * _2574.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2423 = (exp2(_2600 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].y)) * _2574.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2425 = (exp2(_2600 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].z)) * _2574.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2427 = _2583 * _2329;
    }
    else
    {
        _2421 = _2326;
        _2423 = _2327;
        _2425 = _2328;
        _2427 = _2329;
    }
    float _2439 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2440 = _2439 == 3.0;
    float _2441 = log2(_2427);
    float _2448 = exp2(_2441 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)));
    float _2449 = exp2(_2441 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2450 = exp2(_2441 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2459 = (_2439 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2459 * (_2440 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.y = _2459 * (_2440 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.z = _2459 * (_2440 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2425)));
    SV_Target.w = cbInstanceData._m0[_2301].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
}


