#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _907;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _242 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _264 = _262.x;
    vec4 _276 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _285 = cbMtdParam._m0[10u].y * _276.z;
    float _289 = (_276.x * 2.0) + (-1.0);
    float _291 = (_276.y * 2.0) + (-1.0);
    float _292 = dot(vec2(_289, _291), vec2(_289, _291));
    float _3262 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _298 = sqrt(1.0 - (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))));
    float _301 = fma(_298, _220, fma(_291, _212 * TANGENT.x, (_198 * _190) * _289));
    float _304 = fma(_298, _221, fma(_291, _212 * TANGENT.y, (_198 * _191) * _289));
    float _307 = fma(_298, _222, fma(_291, _212 * TANGENT.z, (_198 * _192) * _289));
    float _311 = inversesqrt(dot(vec3(_301, _304, _307), vec3(_301, _304, _307)));
    float _312 = _311 * _301;
    float _313 = _311 * _304;
    float _314 = _311 * _307;
    float _3273 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _315 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3295 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3306 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3317 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _319 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _376 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _386 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _376);
    float _387 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _376);
    float _388 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _376);
    float _392 = inversesqrt(dot(vec3(_386, _387, _388), vec3(_386, _387, _388)));
    float _393 = _386 * _392;
    float _394 = _387 * _392;
    float _395 = _388 * _392;
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _404 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _406 = _404.w;
    float _427 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _430 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _433 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    vec4 _435 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _446 = (((_435.y - _315) + (_435.w * _315)) * cbMtdParam._m0[3u].x) + _315;
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = (_459 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3328 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    vec4 _474 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _479 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _490 = (((_479.x - _319) + (_479.w * _319)) * cbMtdParam._m0[3u].x) + _319;
    float _503 = (cbMtdParam._m0[3u].x * (((_471 * _406) - _471) + _474.x)) + _471;
    float _504 = (cbMtdParam._m0[3u].x * (((_472 * _406) - _472) + _474.y)) + _472;
    float _505 = (cbMtdParam._m0[3u].x * (((_473 * _406) - _473) + _474.z)) + _473;
    float _506 = 1.0 - _490;
    float _507 = _506 * _503;
    float _508 = _506 * _504;
    float _509 = _506 * _505;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _490;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _490;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _490;
    float _517 = _514 + 0.039999999105930328369140625;
    float _519 = _515 + 0.039999999105930328369140625;
    float _520 = _516 + 0.039999999105930328369140625;
    vec4 _529 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _532 = _529.x * TEXCOORD_4;
    float _533 = dot(vec3(_312, _313, _314), vec3(_393, _394, _395));
    float _536 = _533 * 2.0;
    float _540 = (_536 * _312) - _393;
    float _541 = (_536 * _313) - _394;
    float _542 = (_536 * _314) - _395;
    float _546 = abs(dot(vec3(_393, _394, _395), vec3(_312, _313, _314)));
    float _3361 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _548 = sqrt(_446);
    float _561 = exp2((_548 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_548 * 3.0));
    float _567 = (1.0 - _561) * ((_548 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _568 = _561 * _548;
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _635 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _639 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _664 = _596 + _312;
        float _665 = _600 + _313;
        float _666 = _604 + _314;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_312, _313, _314), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3409 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_312, _313, _314), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3442 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_312, _313, _314), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3475 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _951 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _955 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _978 = _596 + _312;
        float _979 = _600 + _313;
        float _980 = _604 + _314;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_312, _313, _314), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3538 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_312, _313, _314), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3571 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_312, _313, _314), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3604 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _907;
        _1217 = _907;
        _1218 = _907;
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = _907;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _920)) + _920;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _540 * 0.5;
    float _1285 = _541 * 0.5;
    float _1286 = _542 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _910, _913, _916));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_908, _911, _914, _917));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_909, _912, _915, _918));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _446);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_542, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540));
        float _1416 = fma(_542, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540));
        float _1419 = fma(_542, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1447 = frontier_phi_16_14_ladder;
        }
        float _1655;
        if (_1416 > 0.0)
        {
            _1655 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1655 = frontier_phi_25_21_ladder;
        }
        float _1909;
        if (_1419 > 0.0)
        {
            _1909 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1909 = frontier_phi_37_32_ladder;
        }
        float _1911 = isnan(_1655) ? _1447 : (isnan(_1447) ? _1655 : min(_1447, _1655));
        float _1912 = isnan(_1909) ? _1911 : (isnan(_1911) ? _1909 : min(_1911, _1909));
        float _1916 = (_1912 * _1413) + _1402;
        float _1917 = (_1912 * _1416) + _1406;
        float _1918 = (_1912 * _1419) + _1410;
        float _1919 = _1912 * 9.9999997473787516355514526367188e-05;
        float _1921 = (-1.0) - _1919;
        float _1923 = _1919 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1918 > _1923) || ((_1918 < _1921) || ((_1917 > _1923) || ((_1917 < _1921) || ((_1916 < _1921) || (_1916 > _1923))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1918, cbModelParam._m0[9u].z, fma(_1917, cbModelParam._m0[9u].y, _1916 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1918, cbModelParam._m0[10u].z, fma(_1917, cbModelParam._m0[10u].y, _1916 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1918, cbModelParam._m0[11u].z, fma(_1917, cbModelParam._m0[11u].y, _1916 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_15_37_ladder = _2046.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2046.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2046.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_15_37_ladder_2;
        _1437 = frontier_phi_15_37_ladder_1;
        _1439 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_540, _541, _542), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _446);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_542, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540));
        float _1515 = fma(_542, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540));
        float _1518 = fma(_542, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540));
        float _1660;
        if (_1512 > 0.0)
        {
            _1660 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1660 = frontier_phi_27_23_ladder;
        }
        float _1936;
        if (_1515 > 0.0)
        {
            _1936 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1936 = frontier_phi_39_34_ladder;
        }
        float _2149;
        if (_1518 > 0.0)
        {
            _2149 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2149 = frontier_phi_48_45_ladder;
        }
        float _2151 = isnan(_1936) ? _1660 : (isnan(_1660) ? _1936 : min(_1660, _1936));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1512) + _1501;
        float _2157 = (_2152 * _1515) + _1505;
        float _2158 = (_2152 * _1518) + _1509;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2159;
        float _2162 = _2159 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2158 > _2162) || ((_2158 < _2160) || ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 < _2160) || (_2156 > _2162))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2158, cbModelParam._m0[17u].z, fma(_2157, cbModelParam._m0[17u].y, _2156 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2158, cbModelParam._m0[18u].z, fma(_2157, cbModelParam._m0[18u].y, _2156 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2158, cbModelParam._m0[19u].z, fma(_2157, cbModelParam._m0[19u].y, _2156 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_24_48_ladder = _2374.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2374.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2374.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_24_48_ladder_2;
        _1539 = frontier_phi_24_48_ladder_1;
        _1541 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_540, _541, _542), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_567 * _517) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_567 * _519) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_567 * _520) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _532 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1613 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1617 = _1579 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_312, _313, _314));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_312, _313, _314));
    float _3740 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3751 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1596].x * _1602) * _1638) + ((cbLight._m0[_1606].x * _1613) * _1636);
    float _1646 = ((_1602 * cbLight._m0[_1596].y) * _1638) + ((_1613 * cbLight._m0[_1606].y) * _1636);
    float _1647 = ((_1602 * cbLight._m0[_1596].z) * _1638) + ((_1613 * cbLight._m0[_1606].z) * _1636);
    uvec4 _1652 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1654 = _1652.x == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1654)
    {
        _1665 = _1645;
        _1667 = _1646;
        _1669 = _1647;
    }
    else
    {
        uint _1673 = _1579 + 6u;
        float _1689 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3762 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1692 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1665 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1645;
        _1667 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1646;
        _1669 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1647;
    }
    bool _1672 = _1652.y == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1672)
    {
        _1710 = _1665;
        _1712 = _1667;
        _1714 = _1669;
    }
    else
    {
        uint _1880 = _1579 + 7u;
        float _1896 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _3778 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1899 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1710 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1665;
        _1712 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1667;
        _1714 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1669;
    }
    uint _1717 = _1579 + 8u;
    float _1730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _446) * 0.949999988079071044921875);
    float _1731 = _1730 * _1730;
    float _1732 = cbLight._m0[_1579].x + _393;
    float _1733 = cbLight._m0[_1579].y + _394;
    float _1734 = cbLight._m0[_1579].z + _395;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1739 = _1738 * _1732;
    float _1740 = _1738 * _1733;
    float _1741 = _1738 * _1734;
    float _1742 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1579].xyz));
    float _3794 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _1746 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1747 = dot(vec3(_312, _313, _314), vec3(_1739, _1740, _1741));
    float _3816 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1739, _1740, _1741));
    float _3827 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1731 * _1731;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1767 = exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0);
    float _1768 = 0.959999978542327880859375 - _514;
    float _1770 = 0.959999978542327880859375 - _515;
    float _1771 = 0.959999978542327880859375 - _516;
    float _1778 = 1.0 - _1731;
    float _1789 = (0.5 / (((_1746 * ((_1745 * _1778) + _1731)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1778) + _1731) * _1745))) * _1745;
    float _3838 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    uint _1802 = _1579 + 9u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _446) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1617].x + _393;
    float _1816 = cbLight._m0[_1617].y + _394;
    float _1817 = cbLight._m0[_1617].z + _395;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1617].xyz));
    float _3849 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1829 = dot(vec3(_312, _313, _314), vec3(_1822, _1823, _1824));
    float _3860 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1833 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1822, _1823, _1824));
    float _3871 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1837 = _1814 * _1814;
    float _1841 = ((_1832 * _1832) * (_1837 + (-1.0))) + 1.0;
    float _1848 = exp2(log2(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * 5.0);
    float _1855 = 1.0 - _1814;
    float _1865 = (0.5 / (((_1746 * ((_1828 * _1855) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1855) + _1814) * _1828))) * _1828;
    float _3882 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1837 / ((_1841 * _1841) * 3.141590118408203125));
    float _1877 = (((((_1848 * _1768) + _517) * cbLight._m0[_1802].x) * _1867) * _1602) + (((((_1767 * _1768) + _517) * cbLight._m0[_1717].x) * _1791) * _1613);
    float _1878 = (((((_1848 * _1770) + _519) * cbLight._m0[_1802].y) * _1867) * _1602) + (((((_1767 * _1770) + _519) * cbLight._m0[_1717].y) * _1791) * _1613);
    float _1879 = (((((_1848 * _1771) + _520) * cbLight._m0[_1802].z) * _1867) * _1602) + (((((_1767 * _1771) + _520) * cbLight._m0[_1717].z) * _1791) * _1613);
    float _1941;
    float _1943;
    float _1945;
    if (_1654)
    {
        _1941 = _1877;
        _1943 = _1878;
        _1945 = _1879;
    }
    else
    {
        uint _1947 = _1579 + 2u;
        uint _1951 = _1579 + 10u;
        float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _446) * 0.949999988079071044921875);
        float _1966 = _1965 * _1965;
        float _1967 = cbLight._m0[_1947].x + _393;
        float _1968 = cbLight._m0[_1947].y + _394;
        float _1969 = cbLight._m0[_1947].z + _395;
        float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
        float _1974 = _1973 * _1967;
        float _1975 = _1973 * _1968;
        float _1976 = _1973 * _1969;
        float _1977 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1947].xyz));
        float _3893 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1980 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1981 = dot(vec3(_312, _313, _314), vec3(_1974, _1975, _1976));
        float _3904 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1985 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_1974, _1975, _1976));
        float _3915 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1989 = _1966 * _1966;
        float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
        float _2000 = exp2(log2(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * 5.0);
        float _2007 = 1.0 - _1966;
        float _2017 = (0.5 / (((_1746 * ((_1980 * _2007) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2007) + _1966) * _1980))) * _1980;
        float _3926 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2019 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
        float _2020 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1941 = (((((_2000 * _1768) + _517) * cbLight._m0[_1951].x) * _2019) * _2020) + _1877;
        _1943 = (((((_2000 * _1770) + _519) * cbLight._m0[_1951].y) * _2019) * _2020) + _1878;
        _1945 = (((((_2000 * _1771) + _520) * cbLight._m0[_1951].z) * _2019) * _2020) + _1879;
    }
    float _2055;
    float _2057;
    float _2059;
    if (_1672)
    {
        _2055 = _1941;
        _2057 = _1943;
        _2059 = _1945;
    }
    else
    {
        uint _2066 = _1579 + 3u;
        uint _2070 = _1579 + 11u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _446) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _393;
        float _2087 = cbLight._m0[_2066].y + _394;
        float _2088 = cbLight._m0[_2066].z + _395;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2066].xyz));
        float _3942 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2100 = dot(vec3(_312, _313, _314), vec3(_2093, _2094, _2095));
        float _3953 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _3964 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0);
        float _2126 = 1.0 - _2085;
        float _2136 = (0.5 / (((_1746 * ((_2099 * _2126) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2126) + _2085) * _2099))) * _2099;
        float _3975 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2138 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2139 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2055 = (((((_2119 * _1768) + _517) * cbLight._m0[_2070].x) * _2138) * _2139) + _1941;
        _2057 = (((((_2119 * _1770) + _519) * cbLight._m0[_2070].y) * _2138) * _2139) + _1943;
        _2059 = (((((_2119 * _1771) + _520) * cbLight._m0[_2070].z) * _2138) * _2139) + _1945;
    }
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1577.y == 0u)
    {
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2214;
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2214;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2214;
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.x;
        uint _2241 = uint((float(_2229.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2230))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2230)));
        float _2251 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2252 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        uint _2255 = uint(isnan(14.0) ? _2252 : (isnan(_2252) ? 14.0 : min(_2252, 14.0)));
        uvec4 _2260 = texelFetch(g_lightClusterGridBuffer, int(((_2255 << 2u) + (_2241 << 6u)) >> 2u));
        uint _2261 = _2260.x;
        uint _2262 = _2229.z;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((((1u << ((_2262 >> 4u) & 15u)) + 4294967295u) & _2261) == 0u) || ((_2262 & 240u) == 0u))
        {
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
        }
        else
        {
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            uint _2529 = 0u;
            uint _2538;
            bool _2539;
            for (;;)
            {
                _2538 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                _2539 = _2538 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2539)
                {
                    frontier_phi_63_pred = _2528;
                    frontier_phi_63_pred_1 = _2527;
                    frontier_phi_63_pred_2 = _2526;
                    frontier_phi_63_pred_3 = _2525;
                    frontier_phi_63_pred_4 = _2524;
                    frontier_phi_63_pred_5 = _2523;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2538;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2529 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _2215;
                        float _2714 = _2673.y - _2216;
                        float _2715 = _2673.z - _2217;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2723 = dot(vec3(_427, _430, _433), vec3(_2720, _2721, _2722));
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _4001 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * _2723) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _2215;
                        float _2749 = (-0.0) - _2216;
                        float _2750 = (-0.0) - _2217;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2765 = exp2(log2(1.0 / ((_2740 * 3.5) + 5.0)) * 0.25);
                        float _2766 = 1.0 - _548;
                        float _2773 = sqrt(1.0 - ((1.0 - (_2766 * _2766)) * (1.0 - (_2765 * _2765))));
                        float _2774 = _2773 * _2773;
                        float _2775 = _2774 * _2774;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2786 = dot(vec3(_427, _430, _433), vec3(_2755, _2756, _2757));
                        float _4017 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2790 = dot(vec3(_427, _430, _433), vec3(_2782 * _2776, _2782 * _2777, _2782 * _2778));
                        float _4028 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2797 = ((_2793 * _2793) * (_2775 + (-1.0))) + 1.0;
                        float _2798 = _2733 * _2774;
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2723) + _2799;
                        float _4039 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2804 = 1.0 - _2774;
                        float _2814 = (0.5 / (((_2803 * ((_2789 * _2804) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2803 * _2804) + _2774) * _2789))) * _2803;
                        float _4050 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2825 = (((_2775 * 3.1415927410125732421875) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) / ((_2797 * _2797) * ((_2740 * 2.1991131305694580078125) + 3.141590118408203125))) * _2729;
                        _2582 = (_2744 * _2692.x) + _2650;
                        _2583 = (_2744 * _2692.y) + _2651;
                        _2584 = (_2744 * _2692.z) + _2652;
                        _2579 = (_2825 * _2709.x) + _2647;
                        _2580 = (_2825 * _2709.y) + _2648;
                        _2581 = (_2825 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_63_pred = _2584;
                    frontier_phi_63_pred_1 = _2583;
                    frontier_phi_63_pred_2 = _2582;
                    frontier_phi_63_pred_3 = _2581;
                    frontier_phi_63_pred_4 = _2580;
                    frontier_phi_63_pred_5 = _2579;
                }
                _2390 = frontier_phi_63_pred;
                _2388 = frontier_phi_63_pred_1;
                _2386 = frontier_phi_63_pred_2;
                _2384 = frontier_phi_63_pred_3;
                _2382 = frontier_phi_63_pred_4;
                _2380 = frontier_phi_63_pred_5;
                uint _2530 = _2529 + 1u;
                if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2523 = _2380;
                    _2524 = _2382;
                    _2525 = _2384;
                    _2526 = _2386;
                    _2527 = _2388;
                    _2528 = _2390;
                    _2529 = _2530;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
        }
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.z;
        uint _2396 = (_2394 >> 8u) & 15u;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((4294967295u << _2396) & _2261) == 0u)
        {
            _2491 = _2379;
            _2493 = _2381;
            _2495 = _2383;
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
        }
        else
        {
            float _2516 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _2517 = _2516 * _2215;
            float _2518 = _2516 * _2216;
            float _2519 = _2516 * _2217;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2396 < ((_2394 >> 12u) & 15u))
            {
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2630 = _2379;
                float _2631 = _2381;
                float _2632 = _2383;
                float _2633 = _2385;
                float _2634 = _2387;
                float _2635 = _2389;
                uint _2636 = _2396;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2255 << 5u) + (_2241 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2646)
                    {
                        frontier_phi_69_pred = _2635;
                        frontier_phi_69_pred_1 = _2634;
                        frontier_phi_69_pred_2 = _2633;
                        frontier_phi_69_pred_3 = _2632;
                        frontier_phi_69_pred_4 = _2631;
                        frontier_phi_69_pred_5 = _2630;
                    }
                    else
                    {
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        uint _2849 = _2645;
                        uint _2850;
                        vec4 _2875;
                        float _2876;
                        vec4 _2891;
                        vec3 _2903;
                        vec4 _2919;
                        vec4 _2935;
                        float _2982;
                        bool _2983;
                        for (;;)
                        {
                            uint _2860 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2849));
                            _2850 = (_2849 + 4294967295u) & _2849;
                            uint _2862 = _2860 * 40u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            _2876 = _2875.w;
                            uint _2878 = (_2860 * 40u) + 4u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2860 * 40u) + 8u;
                            _2903 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x));
                            uint _2906 = (_2860 * 40u) + 16u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2922 = (_2860 * 40u) + 20u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2938 = (_2860 * 40u) + 24u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2957 = (_2860 * 40u) + 28u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2982 = fma(_2217, _2970.z, fma(_2216, _2970.y, _2970.x * _2215)) + _2970.w;
                            _2983 = !((fma(_2217, _2951.z, fma(_2216, _2951.y, _2951.x * _2215)) + _2951.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2983)
                            {
                                float _3010 = _2875.x - _2215;
                                float _3011 = _2875.y - _2216;
                                float _3012 = _2875.z - _2217;
                                float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                                float _3016 = inversesqrt(_3013);
                                float _3017 = _3016 * _3010;
                                float _3018 = _3016 * _3011;
                                float _3019 = _3016 * _3012;
                                float _3023 = 1.0 - (_3013 / (_2876 * _2876));
                                float _4061 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3028 = sqrt(_3013) * _2891.w;
                                float _3030 = 1.39999997615814208984375 / (_3028 + 1.39999997615814208984375);
                                float _3031 = _3030 * _3030;
                                float _3034 = ((1.0 - _3031) * dot(vec3(_3017, _3018, _3019), vec3(_427, _430, _433))) + _3031;
                                float _3037 = _3028 * _3028;
                                float _3041 = (fma(_2217, _2919.z, fma(_2216, _2919.y, _2919.x * _2215)) + _2919.w) / _2982;
                                float _3042 = (fma(_2217, _2935.z, fma(_2216, _2935.y, _2935.x * _2215)) + _2935.w) / _2982;
                                float _3046 = 1.0 - dot(vec2(_3041, _3042), vec2(_3041, _3042));
                                float _4077 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3048 = _3047 * (((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3024) / ((_3037 * 0.699999988079071044921875) + 1.0));
                                float _3060 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                                float _3061 = 1.0 - _548;
                                float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                                float _3069 = _3068 * _3068;
                                float _3070 = _3069 * _3069;
                                float _3071 = _3017 - _2517;
                                float _3072 = _3018 - _2518;
                                float _3073 = _3019 - _2519;
                                float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                                float _3081 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2517, (-0.0) - _2518, (-0.0) - _2519));
                                float _4088 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3085 = dot(vec3(_427, _430, _433), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                                float _4099 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                                float _3093 = _3030 * _3069;
                                float _3094 = _3093 * _3093;
                                float _3100 = ((1.0 - _3094) * dot(vec3(_427, _430, _433), vec3(_3017, _3018, _3019))) + _3094;
                                float _4110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3102 = 1.0 - _3069;
                                float _3112 = (0.5 / (((_3101 * ((_3084 * _3102) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3101 * _3102) + _3069) * _3084))) * _3101;
                                float _4121 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3122 = (_3047 * _3024) * (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) / ((_3092 * _3092) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3048 * _2891.z;
                                frontier_phi_75_pred_1 = _3048 * _2891.y;
                                frontier_phi_75_pred_2 = _3048 * _2891.x;
                                frontier_phi_75_pred_3 = _3122 * _2903.z;
                                frontier_phi_75_pred_4 = _3122 * _2903.y;
                                frontier_phi_75_pred_5 = _3122 * _2903.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3131 = frontier_phi_75_pred;
                            _3130 = frontier_phi_75_pred_1;
                            _3129 = frontier_phi_75_pred_2;
                            _3128 = frontier_phi_75_pred_3;
                            _3127 = frontier_phi_75_pred_4;
                            _3126 = frontier_phi_75_pred_5;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            if (_2850 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2850;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2835;
                        frontier_phi_69_pred_1 = _2834;
                        frontier_phi_69_pred_2 = _2833;
                        frontier_phi_69_pred_3 = _2832;
                        frontier_phi_69_pred_4 = _2831;
                        frontier_phi_69_pred_5 = _2830;
                    }
                    _2502 = frontier_phi_69_pred;
                    _2500 = frontier_phi_69_pred_1;
                    _2498 = frontier_phi_69_pred_2;
                    _2496 = frontier_phi_69_pred_3;
                    _2494 = frontier_phi_69_pred_4;
                    _2492 = frontier_phi_69_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2492;
                        _2631 = _2494;
                        _2632 = _2496;
                        _2633 = _2498;
                        _2634 = _2500;
                        _2635 = _2502;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2502;
                frontier_phi_57_58_ladder_1 = _2500;
                frontier_phi_57_58_ladder_2 = _2498;
                frontier_phi_57_58_ladder_3 = _2496;
                frontier_phi_57_58_ladder_4 = _2494;
                frontier_phi_57_58_ladder_5 = _2492;
            }
            else
            {
                frontier_phi_57_58_ladder = _2389;
                frontier_phi_57_58_ladder_1 = _2387;
                frontier_phi_57_58_ladder_2 = _2385;
                frontier_phi_57_58_ladder_3 = _2383;
                frontier_phi_57_58_ladder_4 = _2381;
                frontier_phi_57_58_ladder_5 = _2379;
            }
            _2491 = frontier_phi_57_58_ladder_5;
            _2493 = frontier_phi_57_58_ladder_4;
            _2495 = frontier_phi_57_58_ladder_3;
            _2497 = frontier_phi_57_58_ladder_2;
            _2499 = frontier_phi_57_58_ladder_1;
            _2501 = frontier_phi_57_58_ladder;
        }
        float _2506 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _2273 = (_2506 * _2497) + _1710;
        _2275 = (_2506 * _2499) + _1712;
        _2277 = (_2506 * _2501) + _1714;
        _2279 = ((_2491 * _517) * _2506) + _2055;
        _2281 = ((_2493 * _519) * _2506) + _2057;
        _2283 = ((_2495 * _520) * _2506) + _2059;
    }
    else
    {
        _2273 = _1710;
        _2275 = _1712;
        _2277 = _1714;
        _2279 = _2055;
        _2281 = _2057;
        _2283 = _2059;
    }
    vec4 _2289 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4137 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4148 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4159 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2313 = (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2273 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _532))) + ((_2279 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + (_2289.x * cbMtdParam._m0[3u].x);
    float _2315 = ((_2289.y * cbMtdParam._m0[3u].x) + ((_2281 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2275 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _532)));
    float _2317 = ((_2289.z * cbMtdParam._m0[3u].x) + ((_2283 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2277 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _532)));
    uint _2321 = _459 + 6u;
    float _2329 = _401 / cbSceneParam._m0[86u].x;
    float _2330 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2344 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2346 = _2344.x;
    float _2347 = _2344.y;
    float _2348 = _2344.z;
    float _2349 = _2344.w;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2404 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2405 = _2404 / _335;
        float _2416 = _2405 * _386;
        float _2417 = _387 * _2405;
        float _2418 = (-0.0) - _2417;
        float _2419 = _2405 * _388;
        float _2421 = (cbSceneParam._m0[77u].w * _2418) / _2404;
        float _2422 = _2421 + cbSceneParam._m0[79u].w;
        float _2423 = cbSceneParam._m0[79u].w - _2417;
        float _2429 = sqrt(((_2416 * _2416) + (_2417 * _2417)) + (_2419 * _2419));
        float _2432 = (1.0 - (cbSceneParam._m0[77u].w / _2404)) * _2429;
        float _2437 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2439 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2592;
        if (abs((_2418 - _2421) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2592 = ((((_2422 > 0.0) ? exp2(_2437 * _2422) : (2.0 - exp2(_2439 * _2422))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2432;
        }
        else
        {
            float _2552 = 1.0 / cbSceneParam._m0[80u].x;
            float _2553 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : max(_2422, _2423));
            float _2554 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : min(_2422, _2423));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            _2592 = ((abs(_2429 / _2418) * cbSceneParam._m0[80u].y) * ((((_2563 - _2564) * 2.0) - ((exp2(_2437 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)))) - exp2(_2437 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))))) * _2552)) - ((exp2(_2439 * _2563) - exp2(_2439 * _2564)) * _2552))) + (_2432 * cbSceneParam._m0[80u].z);
        }
        vec4 _2594 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2329, _2330, 1.0), 0.0);
        float _2603 = exp2((_2592 * (-1.44269502162933349609375)) * (1.0 - _2594.w));
        float _2604 = log2(_2603);
        float _2620 = log2(_2349);
        _2441 = (exp2(_2620 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].x)) * _2594.x) / cbSceneParam._m0[78u].x)) + _2346;
        _2443 = (exp2(_2620 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].y)) * _2594.y) / cbSceneParam._m0[78u].y)) + _2347;
        _2445 = (exp2(_2620 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].z)) * _2594.z) / cbSceneParam._m0[78u].z)) + _2348;
        _2447 = _2603 * _2349;
    }
    else
    {
        _2441 = _2346;
        _2443 = _2347;
        _2445 = _2348;
        _2447 = _2349;
    }
    float _2459 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2460 = _2459 == 3.0;
    float _2461 = log2(_2447);
    float _2468 = exp2(_2461 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)));
    float _2469 = exp2(_2461 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)));
    float _2470 = exp2(_2461 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)));
    float _2479 = (_2459 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2479 * (_2460 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.y = _2479 * (_2460 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.z = _2479 * (_2460 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.w = cbInstanceData._m0[_2321].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2321].w;
}


