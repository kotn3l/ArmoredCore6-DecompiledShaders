#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _889;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    float _234 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _247 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_234 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _267 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _234) + cbTextureTilingScale._m0[1u].w));
    float _273 = cbMtdParam._m0[10u].y * _267.z;
    float _277 = (_267.x * 2.0) + (-1.0);
    float _279 = (_267.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3268 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))));
    float _289 = fma(_286, _220, fma(_279, _212 * TANGENT.x, (_198 * _190) * _277));
    float _292 = fma(_286, _221, fma(_279, _212 * TANGENT.y, (_198 * _191) * _277));
    float _295 = fma(_286, _222, fma(_279, _212 * TANGENT.z, (_198 * _192) * _277));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3279 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _303 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3301 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3312 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _391 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _393 = _391.w;
    float _414 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _417 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _420 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    vec4 _422 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _433 = (((_422.y - _303) + (_422.w * _303)) * cbMtdParam._m0[3u].x) + _303;
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = (_446 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3323 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    vec4 _461 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _466 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _472 = cbMtdParam._m0[3u].x * _466.x;
    float _485 = (cbMtdParam._m0[3u].x * (((_458 * _393) - _458) + _461.x)) + _458;
    float _486 = (cbMtdParam._m0[3u].x * (((_459 * _393) - _459) + _461.y)) + _459;
    float _487 = (cbMtdParam._m0[3u].x * (((_460 * _393) - _460) + _461.z)) + _460;
    float _488 = 1.0 - _472;
    float _489 = _485 * _488;
    float _490 = _486 * _488;
    float _491 = _487 * _488;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _472;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _472;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _472;
    float _499 = _496 + 0.039999999105930328369140625;
    float _501 = _497 + 0.039999999105930328369140625;
    float _502 = _498 + 0.039999999105930328369140625;
    vec4 _511 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _514 = _511.x * TEXCOORD_4;
    float _515 = dot(vec3(_300, _301, _302), vec3(_380, _381, _382));
    float _518 = _515 * 2.0;
    float _522 = (_518 * _300) - _380;
    float _523 = (_518 * _301) - _381;
    float _524 = (_518 * _302) - _382;
    float _528 = abs(dot(vec3(_380, _381, _382), vec3(_300, _301, _302)));
    float _3356 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _530 = sqrt(_433);
    float _543 = exp2((_530 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_530 * 3.0));
    float _549 = (1.0 - _543) * ((_530 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _550 = _543 * _530;
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_586, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578));
        float _617 = fma(_586, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578));
        float _621 = fma(_586, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578));
        float _646 = _578 + _300;
        float _647 = _582 + _301;
        float _648 = _586 + _302;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_300, _301, _302), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3404 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_300, _301, _302), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3437 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_300, _301, _302), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3470 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _929 = fma(_586, cbModelParam._m0[30u].z, fma(_582, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _578));
        float _933 = fma(_586, cbModelParam._m0[31u].z, fma(_582, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _578));
        float _937 = fma(_586, cbModelParam._m0[32u].z, fma(_582, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _578));
        float _960 = _578 + _300;
        float _961 = _582 + _301;
        float _962 = _586 + _302;
        float _972 = fma(_962, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960)) - _929;
        float _973 = fma(_962, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960)) - _933;
        float _974 = fma(_962, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960)) - _937;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_929 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_933 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[35u].z) + ((((((_937 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1028 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_995.x + (-0.5));
        float _1030 = _1028 * (_995.y + (-0.5));
        float _1031 = _1028 * (_995.z + (-0.5));
        float _1038 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1002.x + (-0.5));
        float _1040 = _1038 * (_1002.y + (-0.5));
        float _1041 = _1038 * (_1002.z + (-0.5));
        float _1048 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1009.x + (-0.5));
        float _1050 = _1048 * (_1009.y + (-0.5));
        float _1051 = _1048 * (_1009.z + (-0.5));
        float _1058 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1016.x + (-0.5));
        float _1060 = _1058 * (_1016.y + (-0.5));
        float _1061 = _1058 * (_1016.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_300, _301, _302), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3533 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1092 + 1.0))) + _1097) * _1062;
        float _1107 = _1030 * 0.5;
        float _1108 = _1040 * 0.5;
        float _1109 = _1050 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_300, _301, _302), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3566 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1134 + 1.0))) + _1139) * _1063;
        float _1149 = _1031 * 0.5;
        float _1150 = _1041 * 0.5;
        float _1151 = _1051 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_300, _301, _302), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3599 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1176 + 1.0))) + _1181) * _1064;
        _1198 = _1031;
        _1199 = _1030;
        _1200 = _1029;
        _1201 = _1041;
        _1202 = _1040;
        _1203 = _1039;
        _1204 = _1051;
        _1205 = _1050;
        _1206 = _1049;
        _1207 = _1064;
        _1208 = _1063;
        _1209 = _1062;
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _889;
        _1199 = _889;
        _1200 = _889;
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1245 = fma(_1224, cbSceneParam._m0[89u].z, fma(_1223, cbSceneParam._m0[89u].y, _1222 * cbSceneParam._m0[89u].x));
    float _1248 = fma(_1224, cbSceneParam._m0[90u].z, fma(_1223, cbSceneParam._m0[90u].y, _1222 * cbSceneParam._m0[90u].x));
    float _1251 = fma(_1224, cbSceneParam._m0[91u].z, fma(_1223, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1222));
    float _1266 = _522 * 0.5;
    float _1267 = _523 * 0.5;
    float _1268 = _524 * 0.5;
    float _1269 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1272 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1275 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1309;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1282 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_888, _892, _895, _898));
        float _1286 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_890, _893, _896, _899));
        float _1290 = dot(vec4(_1266, _1267, _1268, 1.0), vec4(_891, _894, _897, _900));
        float _1297 = dot(vec4(cbModelParam._m0[39u]), vec4(_1266, _1267, _1268, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1297) ? 0.0 : (isnan(0.0) ? _1297 : max(0.0, _1297))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1320;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1311 = dot(vec4(cbModelParam._m0[40u]), vec4(_1266, _1267, _1268, 1.0));
        _1320 = dot(vec3(isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1320 = 1.0;
    }
    float _1324 = (_1320 * cbModelParam._m0[1u].x) + (_1309 * (1.0 - cbModelParam._m0[1u].x));
    float _1334 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1335 = isnan(_1334) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1334 : min(cbModelParam._m0[25u].z, _1334));
    float _1417;
    float _1419;
    float _1421;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1384 = fma(_586, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _578)) + cbModelParam._m0[13u].w;
        float _1388 = fma(_586, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _578)) + cbModelParam._m0[14u].w;
        float _1392 = fma(_586, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _578)) + cbModelParam._m0[15u].w;
        float _1395 = fma(_524, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522));
        float _1398 = fma(_524, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522));
        float _1401 = fma(_524, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522));
        float _1429;
        if (_1395 > 0.0)
        {
            _1429 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1429 = frontier_phi_16_14_ladder;
        }
        float _1658;
        if (_1398 > 0.0)
        {
            _1658 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1658 = frontier_phi_25_21_ladder;
        }
        float _1915;
        if (_1401 > 0.0)
        {
            _1915 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1915 = frontier_phi_37_32_ladder;
        }
        float _1917 = isnan(_1658) ? _1429 : (isnan(_1429) ? _1658 : min(_1429, _1658));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1395) + _1384;
        float _1923 = (_1918 * _1398) + _1388;
        float _1924 = (_1918 * _1401) + _1392;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1927 = (-1.0) - _1925;
        float _1929 = _1925 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1924 > _1929) || ((_1924 < _1927) || ((_1923 > _1929) || ((_1923 < _1927) || ((_1922 < _1927) || (_1922 > _1929))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1924, cbModelParam._m0[9u].z, fma(_1923, cbModelParam._m0[9u].y, _1922 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1924, cbModelParam._m0[10u].z, fma(_1923, cbModelParam._m0[10u].y, _1922 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1924, cbModelParam._m0[11u].z, fma(_1923, cbModelParam._m0[11u].y, _1922 * cbModelParam._m0[11u].x))), _1335);
            frontier_phi_15_37_ladder = _2052.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2052.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2052.x * cbModelParam._m0[1u].y;
        }
        _1417 = frontier_phi_15_37_ladder_2;
        _1419 = frontier_phi_15_37_ladder_1;
        _1421 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_522, _523, _524), _1335);
        _1417 = _1405.x * cbModelParam._m0[1u].y;
        _1419 = _1405.y * cbModelParam._m0[1u].y;
        _1421 = _1405.z * cbModelParam._m0[1u].y;
    }
    float _1425 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1425 : min(cbModelParam._m0[25u].w, _1425));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1483 = fma(_586, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _578)) + cbModelParam._m0[21u].w;
        float _1487 = fma(_586, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _578)) + cbModelParam._m0[22u].w;
        float _1491 = fma(_586, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _578)) + cbModelParam._m0[23u].w;
        float _1494 = fma(_524, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522));
        float _1497 = fma(_524, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522));
        float _1500 = fma(_524, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522));
        float _1663;
        if (_1494 > 0.0)
        {
            _1663 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1663 = frontier_phi_27_23_ladder;
        }
        float _1942;
        if (_1497 > 0.0)
        {
            _1942 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1942 = frontier_phi_39_34_ladder;
        }
        float _2155;
        if (_1500 > 0.0)
        {
            _2155 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2155 = frontier_phi_48_45_ladder;
        }
        float _2157 = isnan(_1942) ? _1663 : (isnan(_1663) ? _1942 : min(_1663, _1942));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1494) + _1483;
        float _2163 = (_2158 * _1497) + _1487;
        float _2164 = (_2158 * _1500) + _1491;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1426);
            frontier_phi_24_48_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1519 = frontier_phi_24_48_ladder_2;
        _1521 = frontier_phi_24_48_ladder_1;
        _1523 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1503 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_522, _523, _524), _1426);
        _1519 = _1503.x * cbModelParam._m0[1u].z;
        _1521 = _1503.y * cbModelParam._m0[1u].z;
        _1523 = _1503.z * cbModelParam._m0[1u].z;
    }
    float _1536 = (((_549 * _499) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1538 = (((_549 * _501) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_549 * _502) + _550) * _514) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1543 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, _1536 * cbSceneParam._m0[91u].x));
    vec4 _1557 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_388, _389));
    float _1559 = _1557.w;
    float _1571 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1559);
    float _1572 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1559);
    float _1573 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1559);
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _514 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1616 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1620 = _1579 | 1u;
    float _1631 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_300, _301, _302));
    float _1634 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_300, _301, _302));
    float _3735 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _3746 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1639 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1641 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1648 = ((cbLight._m0[_1596].x * _1602) * _1641) + (((cbLight._m0[_1606].x * _1571) * _1616) * _1639);
    float _1649 = ((_1602 * cbLight._m0[_1596].y) * _1641) + (((cbLight._m0[_1606].y * _1572) * _1616) * _1639);
    float _1650 = ((_1602 * cbLight._m0[_1596].z) * _1641) + (((cbLight._m0[_1606].z * _1573) * _1616) * _1639);
    uvec4 _1655 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1657 = _1655.x == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1657)
    {
        _1668 = _1648;
        _1670 = _1649;
        _1672 = _1650;
    }
    else
    {
        uint _1676 = _1579 + 6u;
        float _1692 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1693 = _1692 * _1692;
        float _3757 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1695 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1668 = (((cbLight._m0[_1676].x * 0.3183098733425140380859375) * _1694) * _1695) + _1648;
        _1670 = (((cbLight._m0[_1676].y * 0.3183098733425140380859375) * _1694) * _1695) + _1649;
        _1672 = (((cbLight._m0[_1676].z * 0.3183098733425140380859375) * _1694) * _1695) + _1650;
    }
    bool _1675 = _1655.y == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1675)
    {
        _1713 = _1668;
        _1715 = _1670;
        _1717 = _1672;
    }
    else
    {
        uint _1886 = _1579 + 7u;
        float _1902 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _3773 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1905 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1713 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1668;
        _1715 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1670;
        _1717 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1672;
    }
    uint _1720 = _1579 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _433) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1579].x + _380;
    float _1736 = cbLight._m0[_1579].y + _381;
    float _1737 = cbLight._m0[_1579].z + _382;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1579].xyz));
    float _3789 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _1749 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1750 = dot(vec3(_300, _301, _302), vec3(_1742, _1743, _1744));
    float _3811 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1742, _1743, _1744));
    float _3822 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1770 = exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0);
    float _1771 = 0.959999978542327880859375 - _496;
    float _1773 = 0.959999978542327880859375 - _497;
    float _1774 = 0.959999978542327880859375 - _498;
    float _1781 = 1.0 - _1734;
    float _1792 = (0.5 / (((_1749 * ((_1748 * _1781) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1781) + _1734) * _1748))) * _1748;
    float _3833 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1808 = _1579 + 9u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1620].w)) * _433) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1620].x + _380;
    float _1822 = cbLight._m0[_1620].y + _381;
    float _1823 = cbLight._m0[_1620].z + _382;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1620].xyz));
    float _3844 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1835 = dot(vec3(_300, _301, _302), vec3(_1828, _1829, _1830));
    float _3855 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_1828, _1829, _1830));
    float _3866 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1820 * _1820;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1861 = 1.0 - _1820;
    float _1871 = (0.5 / (((_1749 * ((_1834 * _1861) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1861) + _1820) * _1834))) * _1834;
    float _3877 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    float _1883 = (((((_1854 * _1771) + _499) * cbLight._m0[_1808].x) * _1873) * _1602) + ((((cbLight._m0[_1720].x * _1571) * ((_1770 * _1771) + _499)) * _1794) * _1616);
    float _1884 = (((((_1854 * _1773) + _501) * cbLight._m0[_1808].y) * _1873) * _1602) + ((((cbLight._m0[_1720].y * _1572) * ((_1770 * _1773) + _501)) * _1794) * _1616);
    float _1885 = (((((_1854 * _1774) + _502) * cbLight._m0[_1808].z) * _1873) * _1602) + ((((cbLight._m0[_1720].z * _1573) * ((_1770 * _1774) + _502)) * _1794) * _1616);
    float _1947;
    float _1949;
    float _1951;
    if (_1657)
    {
        _1947 = _1883;
        _1949 = _1884;
        _1951 = _1885;
    }
    else
    {
        uint _1953 = _1579 + 2u;
        uint _1957 = _1579 + 10u;
        float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _433) * 0.949999988079071044921875);
        float _1972 = _1971 * _1971;
        float _1973 = cbLight._m0[_1953].x + _380;
        float _1974 = cbLight._m0[_1953].y + _381;
        float _1975 = cbLight._m0[_1953].z + _382;
        float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
        float _1980 = _1979 * _1973;
        float _1981 = _1979 * _1974;
        float _1982 = _1979 * _1975;
        float _1983 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1953].xyz));
        float _3888 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1987 = dot(vec3(_300, _301, _302), vec3(_1980, _1981, _1982));
        float _3899 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1991 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_1980, _1981, _1982));
        float _3910 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1995 = _1972 * _1972;
        float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
        float _2006 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
        float _2013 = 1.0 - _1972;
        float _2023 = (0.5 / (((_1749 * ((_1986 * _2013) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2013) + _1972) * _1986))) * _1986;
        float _3921 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2025 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
        float _2026 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1947 = (((((_2006 * _1771) + _499) * cbLight._m0[_1957].x) * _2025) * _2026) + _1883;
        _1949 = (((((_2006 * _1773) + _501) * cbLight._m0[_1957].y) * _2025) * _2026) + _1884;
        _1951 = (((((_2006 * _1774) + _502) * cbLight._m0[_1957].z) * _2025) * _2026) + _1885;
    }
    float _2061;
    float _2063;
    float _2065;
    if (_1675)
    {
        _2061 = _1947;
        _2063 = _1949;
        _2065 = _1951;
    }
    else
    {
        uint _2072 = _1579 + 3u;
        uint _2076 = _1579 + 11u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _433) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _380;
        float _2093 = cbLight._m0[_2072].y + _381;
        float _2094 = cbLight._m0[_2072].z + _382;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2072].xyz));
        float _3937 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2106 = dot(vec3(_300, _301, _302), vec3(_2099, _2100, _2101));
        float _3948 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _3959 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1749 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2132) + _2091) * _2105))) * _2105;
        float _3970 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2061 = (((((_2125 * _1771) + _499) * cbLight._m0[_2076].x) * _2144) * _2145) + _1947;
        _2063 = (((((_2125 * _1773) + _501) * cbLight._m0[_2076].y) * _2144) * _2145) + _1949;
        _2065 = (((((_2125 * _1774) + _502) * cbLight._m0[_2076].z) * _2144) * _2145) + _1951;
    }
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    if (_1577.y == 0u)
    {
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2220;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2220;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2220;
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2236)));
        float _2257 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
        }
        else
        {
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2545)
                {
                    frontier_phi_63_pred = _2534;
                    frontier_phi_63_pred_1 = _2533;
                    frontier_phi_63_pred_2 = _2532;
                    frontier_phi_63_pred_3 = _2531;
                    frontier_phi_63_pred_4 = _2530;
                    frontier_phi_63_pred_5 = _2529;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2544;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2535 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2221;
                        float _2720 = _2679.y - _2222;
                        float _2721 = _2679.z - _2223;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_414, _417, _420), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _3996 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2221;
                        float _2755 = (-0.0) - _2222;
                        float _2756 = (-0.0) - _2223;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _530;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_414, _417, _420), vec3(_2761, _2762, _2763));
                        float _4012 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2796 = dot(vec3(_414, _417, _420), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4023 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4034 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4045 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2588 = (_2750 * _2698.x) + _2656;
                        _2589 = (_2750 * _2698.y) + _2657;
                        _2590 = (_2750 * _2698.z) + _2658;
                        _2585 = (_2831 * _2715.x) + _2653;
                        _2586 = (_2831 * _2715.y) + _2654;
                        _2587 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_63_pred = _2590;
                    frontier_phi_63_pred_1 = _2589;
                    frontier_phi_63_pred_2 = _2588;
                    frontier_phi_63_pred_3 = _2587;
                    frontier_phi_63_pred_4 = _2586;
                    frontier_phi_63_pred_5 = _2585;
                }
                _2396 = frontier_phi_63_pred;
                _2394 = frontier_phi_63_pred_1;
                _2392 = frontier_phi_63_pred_2;
                _2390 = frontier_phi_63_pred_3;
                _2388 = frontier_phi_63_pred_4;
                _2386 = frontier_phi_63_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2386;
                    _2530 = _2388;
                    _2531 = _2390;
                    _2532 = _2392;
                    _2533 = _2394;
                    _2534 = _2396;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
        }
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.z;
        uint _2402 = (_2400 >> 8u) & 15u;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((4294967295u << _2402) & _2267) == 0u)
        {
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
            _2507 = _2395;
        }
        else
        {
            float _2522 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _2523 = _2522 * _2221;
            float _2524 = _2522 * _2222;
            float _2525 = _2522 * _2223;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2402 < ((_2400 >> 12u) & 15u))
            {
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2636 = _2385;
                float _2637 = _2387;
                float _2638 = _2389;
                float _2639 = _2391;
                float _2640 = _2393;
                float _2641 = _2395;
                uint _2642 = _2402;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2652)
                    {
                        frontier_phi_69_pred = _2641;
                        frontier_phi_69_pred_1 = _2640;
                        frontier_phi_69_pred_2 = _2639;
                        frontier_phi_69_pred_3 = _2638;
                        frontier_phi_69_pred_4 = _2637;
                        frontier_phi_69_pred_5 = _2636;
                    }
                    else
                    {
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        uint _2855 = _2651;
                        uint _2856;
                        vec4 _2881;
                        float _2882;
                        vec4 _2897;
                        vec3 _2909;
                        vec4 _2925;
                        vec4 _2941;
                        float _2988;
                        bool _2989;
                        for (;;)
                        {
                            uint _2866 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2855));
                            _2856 = (_2855 + 4294967295u) & _2855;
                            uint _2868 = _2866 * 40u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2882 = _2881.w;
                            uint _2884 = (_2866 * 40u) + 4u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2899 = (_2866 * 40u) + 8u;
                            _2909 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x));
                            uint _2912 = (_2866 * 40u) + 16u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2866 * 40u) + 20u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2866 * 40u) + 24u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2963 = (_2866 * 40u) + 28u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2988 = fma(_2223, _2976.z, fma(_2222, _2976.y, _2976.x * _2221)) + _2976.w;
                            _2989 = !((fma(_2223, _2957.z, fma(_2222, _2957.y, _2957.x * _2221)) + _2957.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2989)
                            {
                                float _3016 = _2881.x - _2221;
                                float _3017 = _2881.y - _2222;
                                float _3018 = _2881.z - _2223;
                                float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                                float _3022 = inversesqrt(_3019);
                                float _3023 = _3022 * _3016;
                                float _3024 = _3022 * _3017;
                                float _3025 = _3022 * _3018;
                                float _3029 = 1.0 - (_3019 / (_2882 * _2882));
                                float _4056 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3034 = sqrt(_3019) * _2897.w;
                                float _3036 = 1.39999997615814208984375 / (_3034 + 1.39999997615814208984375);
                                float _3037 = _3036 * _3036;
                                float _3040 = ((1.0 - _3037) * dot(vec3(_3023, _3024, _3025), vec3(_414, _417, _420))) + _3037;
                                float _3043 = _3034 * _3034;
                                float _3047 = (fma(_2223, _2925.z, fma(_2222, _2925.y, _2925.x * _2221)) + _2925.w) / _2988;
                                float _3048 = (fma(_2223, _2941.z, fma(_2222, _2941.y, _2941.x * _2221)) + _2941.w) / _2988;
                                float _3052 = 1.0 - dot(vec2(_3047, _3048), vec2(_3047, _3048));
                                float _4072 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3054 = _3053 * (((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3030) / ((_3043 * 0.699999988079071044921875) + 1.0));
                                float _3066 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                                float _3067 = 1.0 - _530;
                                float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                                float _3075 = _3074 * _3074;
                                float _3076 = _3075 * _3075;
                                float _3077 = _3023 - _2523;
                                float _3078 = _3024 - _2524;
                                float _3079 = _3025 - _2525;
                                float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                                float _3087 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2523, (-0.0) - _2524, (-0.0) - _2525));
                                float _4083 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3091 = dot(vec3(_414, _417, _420), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                                float _4094 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3094 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                                float _3099 = _3036 * _3075;
                                float _3100 = _3099 * _3099;
                                float _3106 = ((1.0 - _3100) * dot(vec3(_414, _417, _420), vec3(_3023, _3024, _3025))) + _3100;
                                float _4105 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3108 = 1.0 - _3075;
                                float _3118 = (0.5 / (((_3107 * ((_3090 * _3108) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3075) * _3090))) * _3107;
                                float _4116 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3128 = (_3053 * _3030) * (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) / ((_3098 * _3098) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3054 * _2897.z;
                                frontier_phi_75_pred_1 = _3054 * _2897.y;
                                frontier_phi_75_pred_2 = _3054 * _2897.x;
                                frontier_phi_75_pred_3 = _3128 * _2909.z;
                                frontier_phi_75_pred_4 = _3128 * _2909.y;
                                frontier_phi_75_pred_5 = _3128 * _2909.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3137 = frontier_phi_75_pred;
                            _3136 = frontier_phi_75_pred_1;
                            _3135 = frontier_phi_75_pred_2;
                            _3134 = frontier_phi_75_pred_3;
                            _3133 = frontier_phi_75_pred_4;
                            _3132 = frontier_phi_75_pred_5;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            if (_2856 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2856;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2841;
                        frontier_phi_69_pred_1 = _2840;
                        frontier_phi_69_pred_2 = _2839;
                        frontier_phi_69_pred_3 = _2838;
                        frontier_phi_69_pred_4 = _2837;
                        frontier_phi_69_pred_5 = _2836;
                    }
                    _2508 = frontier_phi_69_pred;
                    _2506 = frontier_phi_69_pred_1;
                    _2504 = frontier_phi_69_pred_2;
                    _2502 = frontier_phi_69_pred_3;
                    _2500 = frontier_phi_69_pred_4;
                    _2498 = frontier_phi_69_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2498;
                        _2637 = _2500;
                        _2638 = _2502;
                        _2639 = _2504;
                        _2640 = _2506;
                        _2641 = _2508;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2508;
                frontier_phi_57_58_ladder_1 = _2506;
                frontier_phi_57_58_ladder_2 = _2504;
                frontier_phi_57_58_ladder_3 = _2502;
                frontier_phi_57_58_ladder_4 = _2500;
                frontier_phi_57_58_ladder_5 = _2498;
            }
            else
            {
                frontier_phi_57_58_ladder = _2395;
                frontier_phi_57_58_ladder_1 = _2393;
                frontier_phi_57_58_ladder_2 = _2391;
                frontier_phi_57_58_ladder_3 = _2389;
                frontier_phi_57_58_ladder_4 = _2387;
                frontier_phi_57_58_ladder_5 = _2385;
            }
            _2497 = frontier_phi_57_58_ladder_5;
            _2499 = frontier_phi_57_58_ladder_4;
            _2501 = frontier_phi_57_58_ladder_3;
            _2503 = frontier_phi_57_58_ladder_2;
            _2505 = frontier_phi_57_58_ladder_1;
            _2507 = frontier_phi_57_58_ladder;
        }
        float _2512 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
        _2279 = (_2512 * _2503) + _1713;
        _2281 = (_2512 * _2505) + _1715;
        _2283 = (_2512 * _2507) + _1717;
        _2285 = ((_2497 * _499) * _2512) + _2061;
        _2287 = ((_2499 * _501) * _2512) + _2063;
        _2289 = ((_2501 * _502) * _2512) + _2065;
    }
    else
    {
        _2279 = _1713;
        _2281 = _1715;
        _2283 = _1717;
        _2285 = _2061;
        _2287 = _2063;
        _2289 = _2065;
    }
    vec4 _2295 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4132 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4143 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4154 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2319 = (((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2279 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _514))) + ((_2285 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1324)) * cbPerFrame._m0[3u].x)) + (_2295.x * cbMtdParam._m0[3u].x);
    float _2321 = ((_2295.y * cbMtdParam._m0[3u].x) + ((_2287 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1324)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2281 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _514)));
    float _2323 = ((_2295.z * cbMtdParam._m0[3u].x) + ((_2289 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1324)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2283 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _514)));
    uint _2327 = _446 + 6u;
    float _2335 = _388 / cbSceneParam._m0[86u].x;
    float _2336 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2410 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2411 = _2410 / _322;
        float _2422 = _2411 * _373;
        float _2423 = _374 * _2411;
        float _2424 = (-0.0) - _2423;
        float _2425 = _2411 * _375;
        float _2427 = (cbSceneParam._m0[77u].w * _2424) / _2410;
        float _2428 = _2427 + cbSceneParam._m0[79u].w;
        float _2429 = cbSceneParam._m0[79u].w - _2423;
        float _2435 = sqrt(((_2422 * _2422) + (_2423 * _2423)) + (_2425 * _2425));
        float _2438 = (1.0 - (cbSceneParam._m0[77u].w / _2410)) * _2435;
        float _2443 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2445 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2424 - _2427) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2428 > 0.0) ? exp2(_2443 * _2428) : (2.0 - exp2(_2445 * _2428))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2438;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : max(_2428, _2429));
            float _2560 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : min(_2428, _2429));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2598 = ((abs(_2435 / _2424) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2443 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2443 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2445 * _2569) - exp2(_2445 * _2570)) * _2558))) + (_2438 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2355);
        _2447 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2449 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2451 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2453 = _2609 * _2355;
    }
    else
    {
        _2447 = _2352;
        _2449 = _2353;
        _2451 = _2354;
        _2453 = _2355;
    }
    float _2465 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2466 = _2465 == 3.0;
    float _2467 = log2(_2453);
    float _2474 = exp2(_2467 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)));
    float _2475 = exp2(_2467 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2476 = exp2(_2467 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)));
    float _2485 = (_2465 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2485 * (_2466 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.y = _2485 * (_2466 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.z = _2485 * (_2466 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2451)));
    SV_Target.w = cbInstanceData._m0[_2327].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
}


