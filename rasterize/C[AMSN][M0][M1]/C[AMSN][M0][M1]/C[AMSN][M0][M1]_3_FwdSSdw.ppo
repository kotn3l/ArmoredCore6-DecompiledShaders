#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _887;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _242 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = cbMtdParam._m0[10u].y * _262.z;
    float _275 = (_262.x * 2.0) + (-1.0);
    float _277 = (_262.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3266 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))));
    float _287 = fma(_284, _220, fma(_277, _212 * TANGENT.x, (_198 * _190) * _275));
    float _290 = fma(_284, _221, fma(_277, _212 * TANGENT.y, (_198 * _191) * _275));
    float _293 = fma(_284, _222, fma(_277, _212 * TANGENT.z, (_198 * _192) * _275));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3277 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _301 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _3288 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3299 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3310 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _389 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _391 = _389.w;
    float _412 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _415 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _418 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    vec4 _420 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _431 = (((_420.y - _301) + (_420.w * _301)) * cbMtdParam._m0[3u].x) + _301;
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = (_444 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3321 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    float _3332 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    vec4 _459 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _464 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _470 = cbMtdParam._m0[3u].x * _464.x;
    float _483 = (cbMtdParam._m0[3u].x * (((_456 * _391) - _456) + _459.x)) + _456;
    float _484 = (cbMtdParam._m0[3u].x * (((_457 * _391) - _457) + _459.y)) + _457;
    float _485 = (cbMtdParam._m0[3u].x * (((_458 * _391) - _458) + _459.z)) + _458;
    float _486 = 1.0 - _470;
    float _487 = _483 * _486;
    float _488 = _484 * _486;
    float _489 = _485 * _486;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _470;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _470;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _470;
    float _497 = _494 + 0.039999999105930328369140625;
    float _499 = _495 + 0.039999999105930328369140625;
    float _500 = _496 + 0.039999999105930328369140625;
    vec4 _509 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _512 = _509.x * TEXCOORD_4;
    float _513 = dot(vec3(_298, _299, _300), vec3(_378, _379, _380));
    float _516 = _513 * 2.0;
    float _520 = (_516 * _298) - _378;
    float _521 = (_516 * _299) - _379;
    float _522 = (_516 * _300) - _380;
    float _526 = abs(dot(vec3(_378, _379, _380), vec3(_298, _299, _300)));
    float _3354 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _528 = sqrt(_431);
    float _541 = exp2((_528 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_528 * 3.0));
    float _547 = (1.0 - _541) * ((_528 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _548 = _541 * _528;
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _611 = fma(_584, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576));
        float _615 = fma(_584, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576));
        float _619 = fma(_584, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576));
        float _644 = _576 + _298;
        float _645 = _580 + _299;
        float _646 = _584 + _300;
        float _656 = fma(_646, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) - _611;
        float _657 = fma(_646, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) - _615;
        float _658 = fma(_646, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) - _619;
        float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
        float _675 = ((_662 * _656) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_611 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_662 * _657) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_615 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_662 * _658) / cbModelParam._m0[34u].z) + ((((((_619 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        float _714 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_680.x + (-0.5));
        float _716 = _714 * (_680.y + (-0.5));
        float _717 = _714 * (_680.z + (-0.5));
        float _724 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_687.x + (-0.5));
        float _726 = _724 * (_687.y + (-0.5));
        float _727 = _724 * (_687.z + (-0.5));
        float _734 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_694.x + (-0.5));
        float _736 = _734 * (_694.y + (-0.5));
        float _737 = _734 * (_694.z + (-0.5));
        float _744 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_701.x + (-0.5));
        float _746 = _744 * (_701.y + (-0.5));
        float _747 = _744 * (_701.z + (-0.5));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = _715 * 0.5;
        float _752 = _725 * 0.5;
        float _753 = _735 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _768 = (dot(vec3(_298, _299, _300), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _778 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3402 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_780 + 1.0))) + _785) * _748;
        float _795 = _716 * 0.5;
        float _796 = _726 * 0.5;
        float _797 = _736 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_298, _299, _300), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3435 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_822 + 1.0))) + _827) * _749;
        float _837 = _717 * 0.5;
        float _838 = _727 * 0.5;
        float _839 = _737 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_298, _299, _300), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3468 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_864 + 1.0))) + _869) * _750;
        _886 = _717;
        _888 = _716;
        _889 = _715;
        _890 = _727;
        _891 = _726;
        _892 = _725;
        _893 = _737;
        _894 = _736;
        _895 = _735;
        _896 = _750;
        _897 = _749;
        _898 = _748;
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
        _899 = 0.0;
        _900 = 0.0;
        _901 = 0.0;
    }
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _927 = fma(_584, cbModelParam._m0[30u].z, fma(_580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _576));
        float _931 = fma(_584, cbModelParam._m0[31u].z, fma(_580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _576));
        float _935 = fma(_584, cbModelParam._m0[32u].z, fma(_580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _576));
        float _958 = _576 + _298;
        float _959 = _580 + _299;
        float _960 = _584 + _300;
        float _970 = fma(_960, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958)) - _927;
        float _971 = fma(_960, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958)) - _931;
        float _972 = fma(_960, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958)) - _935;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_927 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_931 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[35u].z) + ((((((_935 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1026 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_993.x + (-0.5));
        float _1028 = _1026 * (_993.y + (-0.5));
        float _1029 = _1026 * (_993.z + (-0.5));
        float _1036 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1000.x + (-0.5));
        float _1038 = _1036 * (_1000.y + (-0.5));
        float _1039 = _1036 * (_1000.z + (-0.5));
        float _1046 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1007.x + (-0.5));
        float _1048 = _1046 * (_1007.y + (-0.5));
        float _1049 = _1046 * (_1007.z + (-0.5));
        float _1056 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1014.x + (-0.5));
        float _1058 = _1056 * (_1014.y + (-0.5));
        float _1059 = _1056 * (_1014.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_298, _299, _300), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3531 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1090 + 1.0))) + _1095) * _1060;
        float _1105 = _1028 * 0.5;
        float _1106 = _1038 * 0.5;
        float _1107 = _1048 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_298, _299, _300), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3564 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1132 + 1.0))) + _1137) * _1061;
        float _1147 = _1029 * 0.5;
        float _1148 = _1039 * 0.5;
        float _1149 = _1049 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_298, _299, _300), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3597 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1174 + 1.0))) + _1179) * _1062;
        _1196 = _1029;
        _1197 = _1028;
        _1198 = _1027;
        _1199 = _1039;
        _1200 = _1038;
        _1201 = _1037;
        _1202 = _1049;
        _1203 = _1048;
        _1204 = _1047;
        _1205 = _1062;
        _1206 = _1061;
        _1207 = _1060;
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _887;
        _1197 = _887;
        _1198 = _887;
        _1199 = _887;
        _1200 = _887;
        _1201 = _887;
        _1202 = _887;
        _1203 = _887;
        _1204 = _887;
        _1205 = _887;
        _1206 = _887;
        _1207 = _887;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _899)) + _899;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _900)) + _900;
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _901)) + _901;
    float _1243 = fma(_1222, cbSceneParam._m0[89u].z, fma(_1221, cbSceneParam._m0[89u].y, _1220 * cbSceneParam._m0[89u].x));
    float _1246 = fma(_1222, cbSceneParam._m0[90u].z, fma(_1221, cbSceneParam._m0[90u].y, _1220 * cbSceneParam._m0[90u].x));
    float _1249 = fma(_1222, cbSceneParam._m0[91u].z, fma(_1221, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1220));
    float _1264 = _520 * 0.5;
    float _1265 = _521 * 0.5;
    float _1266 = _522 * 0.5;
    float _1267 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1270 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1273 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1307;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1280 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_886, _890, _893, _896));
        float _1284 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_888, _891, _894, _897));
        float _1288 = dot(vec4(_1264, _1265, _1266, 1.0), vec4(_889, _892, _895, _898));
        float _1295 = dot(vec4(cbModelParam._m0[39u]), vec4(_1264, _1265, _1266, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1295) ? 0.0 : (isnan(0.0) ? _1295 : max(0.0, _1295))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1318;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1309 = dot(vec4(cbModelParam._m0[40u]), vec4(_1264, _1265, _1266, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1322 = (_1318 * cbModelParam._m0[1u].x) + (_1307 * (1.0 - cbModelParam._m0[1u].x));
    float _1332 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1333 = isnan(_1332) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1332 : min(cbModelParam._m0[25u].z, _1332));
    float _1415;
    float _1417;
    float _1419;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1382 = fma(_584, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576)) + cbModelParam._m0[13u].w;
        float _1386 = fma(_584, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576)) + cbModelParam._m0[14u].w;
        float _1390 = fma(_584, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576)) + cbModelParam._m0[15u].w;
        float _1393 = fma(_522, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520));
        float _1396 = fma(_522, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520));
        float _1399 = fma(_522, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520));
        float _1427;
        if (_1393 > 0.0)
        {
            _1427 = abs((1.0 - _1382) / _1393);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1382 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1427 = frontier_phi_16_14_ladder;
        }
        float _1656;
        if (_1396 > 0.0)
        {
            _1656 = abs((1.0 - _1386) / _1396);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1386 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1656 = frontier_phi_25_21_ladder;
        }
        float _1913;
        if (_1399 > 0.0)
        {
            _1913 = abs((1.0 - _1390) / _1399);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1390 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1913 = frontier_phi_37_32_ladder;
        }
        float _1915 = isnan(_1656) ? _1427 : (isnan(_1427) ? _1656 : min(_1427, _1656));
        float _1916 = isnan(_1913) ? _1915 : (isnan(_1915) ? _1913 : min(_1915, _1913));
        float _1920 = (_1916 * _1393) + _1382;
        float _1921 = (_1916 * _1396) + _1386;
        float _1922 = (_1916 * _1399) + _1390;
        float _1923 = _1916 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1923;
        float _1927 = _1923 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 > _1927) || ((_1921 < _1925) || ((_1920 < _1925) || (_1920 > _1927))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1922, cbModelParam._m0[9u].z, fma(_1921, cbModelParam._m0[9u].y, _1920 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1922, cbModelParam._m0[10u].z, fma(_1921, cbModelParam._m0[10u].y, _1920 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1922, cbModelParam._m0[11u].z, fma(_1921, cbModelParam._m0[11u].y, _1920 * cbModelParam._m0[11u].x))), _1333);
            frontier_phi_15_37_ladder = _2050.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2050.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2050.x * cbModelParam._m0[1u].y;
        }
        _1415 = frontier_phi_15_37_ladder_2;
        _1417 = frontier_phi_15_37_ladder_1;
        _1419 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1403 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_520, _521, _522), _1333);
        _1415 = _1403.x * cbModelParam._m0[1u].y;
        _1417 = _1403.y * cbModelParam._m0[1u].y;
        _1419 = _1403.z * cbModelParam._m0[1u].y;
    }
    float _1423 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1423 : min(cbModelParam._m0[25u].w, _1423));
    float _1517;
    float _1519;
    float _1521;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1481 = fma(_584, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576)) + cbModelParam._m0[21u].w;
        float _1485 = fma(_584, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576)) + cbModelParam._m0[22u].w;
        float _1489 = fma(_584, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576)) + cbModelParam._m0[23u].w;
        float _1492 = fma(_522, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520));
        float _1495 = fma(_522, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520));
        float _1498 = fma(_522, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520));
        float _1661;
        if (_1492 > 0.0)
        {
            _1661 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1661 = frontier_phi_27_23_ladder;
        }
        float _1940;
        if (_1495 > 0.0)
        {
            _1940 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1940 = frontier_phi_39_34_ladder;
        }
        float _2153;
        if (_1498 > 0.0)
        {
            _2153 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2153 = frontier_phi_48_45_ladder;
        }
        float _2155 = isnan(_1940) ? _1661 : (isnan(_1661) ? _1940 : min(_1661, _1940));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1492) + _1481;
        float _2161 = (_2156 * _1495) + _1485;
        float _2162 = (_2156 * _1498) + _1489;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2163;
        float _2166 = _2163 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2162 > _2166) || ((_2162 < _2164) || ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 < _2164) || (_2160 > _2166))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2162, cbModelParam._m0[17u].z, fma(_2161, cbModelParam._m0[17u].y, _2160 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2162, cbModelParam._m0[18u].z, fma(_2161, cbModelParam._m0[18u].y, _2160 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2162, cbModelParam._m0[19u].z, fma(_2161, cbModelParam._m0[19u].y, _2160 * cbModelParam._m0[19u].x))), _1424);
            frontier_phi_24_48_ladder = _2378.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2378.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2378.x * cbModelParam._m0[1u].z;
        }
        _1517 = frontier_phi_24_48_ladder_2;
        _1519 = frontier_phi_24_48_ladder_1;
        _1521 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_520, _521, _522), _1424);
        _1517 = _1501.x * cbModelParam._m0[1u].z;
        _1519 = _1501.y * cbModelParam._m0[1u].z;
        _1521 = _1501.z * cbModelParam._m0[1u].z;
    }
    float _1534 = (((_547 * _497) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1536 = (((_547 * _499) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1538 = (((_547 * _500) + _548) * _512) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1541 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, _1534 * cbSceneParam._m0[91u].x));
    vec4 _1555 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_386, _387));
    float _1557 = _1555.w;
    float _1569 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1557);
    float _1570 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1557);
    float _1571 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1557);
    uvec4 _1575 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1577 = _1575.x * 14u;
    uint _1578 = _1577 + 13u;
    float _1585 = _512 + (-1.0);
    float _1590 = (cbLight._m0[_1578].x * _1585) + 1.0;
    float _1591 = (cbLight._m0[_1578].y * _1585) + 1.0;
    float _1592 = (cbLight._m0[_1578].z * _1585) + 1.0;
    float _1593 = (cbLight._m0[_1578].w * _1585) + 1.0;
    uint _1594 = _1577 + 5u;
    float _1600 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
    uint _1604 = _1577 + 4u;
    float _1614 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1618 = _1577 | 1u;
    float _1629 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_298, _299, _300));
    float _1632 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_298, _299, _300));
    float _3733 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _3744 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1637 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1639 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.3183098733425140380859375;
    float _1646 = ((cbLight._m0[_1594].x * _1600) * _1639) + (((cbLight._m0[_1604].x * _1569) * _1614) * _1637);
    float _1647 = ((_1600 * cbLight._m0[_1594].y) * _1639) + (((cbLight._m0[_1604].y * _1570) * _1614) * _1637);
    float _1648 = ((_1600 * cbLight._m0[_1594].z) * _1639) + (((cbLight._m0[_1604].z * _1571) * _1614) * _1637);
    uvec4 _1653 = floatBitsToUint(cbLight._m0[_1577 + 12u]);
    bool _1655 = _1653.x == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1655)
    {
        _1666 = _1646;
        _1668 = _1647;
        _1670 = _1648;
    }
    else
    {
        uint _1674 = _1577 + 6u;
        float _1690 = (dot(vec3(cbLight._m0[_1577 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3755 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1693 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1666 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1646;
        _1668 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1647;
        _1670 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1648;
    }
    bool _1673 = _1653.y == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1673)
    {
        _1711 = _1666;
        _1713 = _1668;
        _1715 = _1670;
    }
    else
    {
        uint _1884 = _1577 + 7u;
        float _1900 = (dot(vec3(cbLight._m0[_1577 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1901 = _1900 * _1900;
        float _3771 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1903 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1711 = (((cbLight._m0[_1884].x * 0.3183098733425140380859375) * _1902) * _1903) + _1666;
        _1713 = (((cbLight._m0[_1884].y * 0.3183098733425140380859375) * _1902) * _1903) + _1668;
        _1715 = (((cbLight._m0[_1884].z * 0.3183098733425140380859375) * _1902) * _1903) + _1670;
    }
    uint _1718 = _1577 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _431) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1577].x + _378;
    float _1734 = cbLight._m0[_1577].y + _379;
    float _1735 = cbLight._m0[_1577].z + _380;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1577].xyz));
    float _3787 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _1747 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1748 = dot(vec3(_298, _299, _300), vec3(_1740, _1741, _1742));
    float _3809 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1740, _1741, _1742));
    float _3820 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1768 = exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0);
    float _1769 = 0.959999978542327880859375 - _494;
    float _1771 = 0.959999978542327880859375 - _495;
    float _1772 = 0.959999978542327880859375 - _496;
    float _1779 = 1.0 - _1732;
    float _1790 = (0.5 / (((_1747 * ((_1746 * _1779) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1779) + _1732) * _1746))) * _1746;
    float _3831 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    uint _1806 = _1577 + 9u;
    float _1817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1618].w)) * _431) * 0.949999988079071044921875);
    float _1818 = _1817 * _1817;
    float _1819 = cbLight._m0[_1618].x + _378;
    float _1820 = cbLight._m0[_1618].y + _379;
    float _1821 = cbLight._m0[_1618].z + _380;
    float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
    float _1826 = _1825 * _1819;
    float _1827 = _1825 * _1820;
    float _1828 = _1825 * _1821;
    float _1829 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1618].xyz));
    float _3842 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1833 = dot(vec3(_298, _299, _300), vec3(_1826, _1827, _1828));
    float _3853 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1618].xyz), vec3(_1826, _1827, _1828));
    float _3864 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1818 * _1818;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1852 = exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0);
    float _1859 = 1.0 - _1818;
    float _1869 = (0.5 / (((_1747 * ((_1832 * _1859) + _1818)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1859) + _1818) * _1832))) * _1832;
    float _3875 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1871 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    float _1881 = (((((_1852 * _1769) + _497) * cbLight._m0[_1806].x) * _1871) * _1600) + ((((cbLight._m0[_1718].x * _1569) * ((_1768 * _1769) + _497)) * _1792) * _1614);
    float _1882 = (((((_1852 * _1771) + _499) * cbLight._m0[_1806].y) * _1871) * _1600) + ((((cbLight._m0[_1718].y * _1570) * ((_1768 * _1771) + _499)) * _1792) * _1614);
    float _1883 = (((((_1852 * _1772) + _500) * cbLight._m0[_1806].z) * _1871) * _1600) + ((((cbLight._m0[_1718].z * _1571) * ((_1768 * _1772) + _500)) * _1792) * _1614);
    float _1945;
    float _1947;
    float _1949;
    if (_1655)
    {
        _1945 = _1881;
        _1947 = _1882;
        _1949 = _1883;
    }
    else
    {
        uint _1951 = _1577 + 2u;
        uint _1955 = _1577 + 10u;
        float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _431) * 0.949999988079071044921875);
        float _1970 = _1969 * _1969;
        float _1971 = cbLight._m0[_1951].x + _378;
        float _1972 = cbLight._m0[_1951].y + _379;
        float _1973 = cbLight._m0[_1951].z + _380;
        float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
        float _1978 = _1977 * _1971;
        float _1979 = _1977 * _1972;
        float _1980 = _1977 * _1973;
        float _1981 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1951].xyz));
        float _3886 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1985 = dot(vec3(_298, _299, _300), vec3(_1978, _1979, _1980));
        float _3897 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1989 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_1978, _1979, _1980));
        float _3908 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1993 = _1970 * _1970;
        float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
        float _2004 = exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0);
        float _2011 = 1.0 - _1970;
        float _2021 = (0.5 / (((_1747 * ((_1984 * _2011) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2011) + _1970) * _1984))) * _1984;
        float _3919 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2023 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
        float _2024 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1945 = (((((_2004 * _1769) + _497) * cbLight._m0[_1955].x) * _2023) * _2024) + _1881;
        _1947 = (((((_2004 * _1771) + _499) * cbLight._m0[_1955].y) * _2023) * _2024) + _1882;
        _1949 = (((((_2004 * _1772) + _500) * cbLight._m0[_1955].z) * _2023) * _2024) + _1883;
    }
    float _2059;
    float _2061;
    float _2063;
    if (_1673)
    {
        _2059 = _1945;
        _2061 = _1947;
        _2063 = _1949;
    }
    else
    {
        uint _2070 = _1577 + 3u;
        uint _2074 = _1577 + 11u;
        float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _431) * 0.949999988079071044921875);
        float _2089 = _2088 * _2088;
        float _2090 = cbLight._m0[_2070].x + _378;
        float _2091 = cbLight._m0[_2070].y + _379;
        float _2092 = cbLight._m0[_2070].z + _380;
        float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
        float _2097 = _2096 * _2090;
        float _2098 = _2096 * _2091;
        float _2099 = _2096 * _2092;
        float _2100 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2070].xyz));
        float _3935 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2104 = dot(vec3(_298, _299, _300), vec3(_2097, _2098, _2099));
        float _3946 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2108 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2097, _2098, _2099));
        float _3957 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2112 = _2089 * _2089;
        float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
        float _2123 = exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0);
        float _2130 = 1.0 - _2089;
        float _2140 = (0.5 / (((_1747 * ((_2103 * _2130) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2130) + _2089) * _2103))) * _2103;
        float _3968 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2142 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
        float _2143 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _2059 = (((((_2123 * _1769) + _497) * cbLight._m0[_2074].x) * _2142) * _2143) + _1945;
        _2061 = (((((_2123 * _1771) + _499) * cbLight._m0[_2074].y) * _2142) * _2143) + _1947;
        _2063 = (((((_2123 * _1772) + _500) * cbLight._m0[_2074].z) * _2142) * _2143) + _1949;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1575.y == 0u)
    {
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2218;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2218;
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2218;
        uvec4 _2233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2234 = _2233.x;
        uint _2245 = uint((float(_2233.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2234))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2234)));
        float _2255 = (log2(_2221 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2256 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        uint _2259 = uint(isnan(14.0) ? _2256 : (isnan(_2256) ? 14.0 : min(_2256, 14.0)));
        uvec4 _2264 = texelFetch(g_lightClusterGridBuffer, int(((_2259 << 2u) + (_2245 << 6u)) >> 2u));
        uint _2265 = _2264.x;
        uint _2266 = _2233.z;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        if (((((1u << ((_2266 >> 4u) & 15u)) + 4294967295u) & _2265) == 0u) || ((_2266 & 240u) == 0u))
        {
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
        }
        else
        {
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2543)
                {
                    frontier_phi_63_pred = _2532;
                    frontier_phi_63_pred_1 = _2531;
                    frontier_phi_63_pred_2 = _2530;
                    frontier_phi_63_pred_3 = _2529;
                    frontier_phi_63_pred_4 = _2528;
                    frontier_phi_63_pred_5 = _2527;
                }
                else
                {
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    uint _2657;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2542;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2661 = uint(findLSB(_2657)) + (_2533 << 5u);
                        uint _2658 = (_2657 + 4294967295u) & _2657;
                        uint _2663 = _2661 * 48u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 3u)).x));
                        uint _2683 = (_2661 * 48u) + 4u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2702 = (_2661 * 48u) + 8u;
                        vec3 _2713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x));
                        float _2717 = _2677.x - _2219;
                        float _2718 = _2677.y - _2220;
                        float _2719 = _2677.z - _2221;
                        float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                        float _2723 = inversesqrt(_2720);
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2727 = dot(vec3(_412, _415, _418), vec3(_2724, _2725, _2726));
                        float _2732 = 1.0 - (_2720 * _2677.w);
                        float _3994 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2733 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2734 = sqrt(_2720) * _2696.w;
                        float _2737 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2727) + _2738;
                        float _2744 = _2734 * _2734;
                        float _2748 = ((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2733) / ((_2744 * 0.699999988079071044921875) + 1.0);
                        float _2752 = (-0.0) - _2219;
                        float _2753 = (-0.0) - _2220;
                        float _2754 = (-0.0) - _2221;
                        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2769 = exp2(log2(1.0 / ((_2744 * 3.5) + 5.0)) * 0.25);
                        float _2770 = 1.0 - _528;
                        float _2777 = sqrt(1.0 - ((1.0 - (_2770 * _2770)) * (1.0 - (_2769 * _2769))));
                        float _2778 = _2777 * _2777;
                        float _2779 = _2778 * _2778;
                        float _2780 = _2759 + _2724;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2790 = dot(vec3(_412, _415, _418), vec3(_2759, _2760, _2761));
                        float _4010 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2794 = dot(vec3(_412, _415, _418), vec3(_2786 * _2780, _2786 * _2781, _2786 * _2782));
                        float _4021 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2801 = ((_2797 * _2797) * (_2779 + (-1.0))) + 1.0;
                        float _2802 = _2737 * _2778;
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2727) + _2803;
                        float _4032 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2808 = 1.0 - _2778;
                        float _2818 = (0.5 / (((_2807 * ((_2793 * _2808) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2807 * _2808) + _2778) * _2793))) * _2807;
                        float _4043 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2829 = (((_2779 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_2801 * _2801) * ((_2744 * 2.1991131305694580078125) + 3.141590118408203125))) * _2733;
                        _2586 = (_2748 * _2696.x) + _2654;
                        _2587 = (_2748 * _2696.y) + _2655;
                        _2588 = (_2748 * _2696.z) + _2656;
                        _2583 = (_2829 * _2713.x) + _2651;
                        _2584 = (_2829 * _2713.y) + _2652;
                        _2585 = (_2829 * _2713.z) + _2653;
                        if (_2658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2658;
                        }
                    }
                    frontier_phi_63_pred = _2588;
                    frontier_phi_63_pred_1 = _2587;
                    frontier_phi_63_pred_2 = _2586;
                    frontier_phi_63_pred_3 = _2585;
                    frontier_phi_63_pred_4 = _2584;
                    frontier_phi_63_pred_5 = _2583;
                }
                _2394 = frontier_phi_63_pred;
                _2392 = frontier_phi_63_pred_1;
                _2390 = frontier_phi_63_pred_2;
                _2388 = frontier_phi_63_pred_3;
                _2386 = frontier_phi_63_pred_4;
                _2384 = frontier_phi_63_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2384;
                    _2528 = _2386;
                    _2529 = _2388;
                    _2530 = _2390;
                    _2531 = _2392;
                    _2532 = _2394;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
        }
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.z;
        uint _2400 = (_2398 >> 8u) & 15u;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((4294967295u << _2400) & _2265) == 0u)
        {
            _2495 = _2383;
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
        }
        else
        {
            float _2520 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
            float _2521 = _2520 * _2219;
            float _2522 = _2520 * _2220;
            float _2523 = _2520 * _2221;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2400 < ((_2398 >> 12u) & 15u))
            {
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2634 = _2383;
                float _2635 = _2385;
                float _2636 = _2387;
                float _2637 = _2389;
                float _2638 = _2391;
                float _2639 = _2393;
                uint _2640 = _2400;
                uint _2649;
                bool _2650;
                for (;;)
                {
                    _2649 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                    _2650 = _2649 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2650)
                    {
                        frontier_phi_69_pred = _2639;
                        frontier_phi_69_pred_1 = _2638;
                        frontier_phi_69_pred_2 = _2637;
                        frontier_phi_69_pred_3 = _2636;
                        frontier_phi_69_pred_4 = _2635;
                        frontier_phi_69_pred_5 = _2634;
                    }
                    else
                    {
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        uint _2853 = _2649;
                        uint _2854;
                        vec4 _2879;
                        float _2880;
                        vec4 _2895;
                        vec3 _2907;
                        vec4 _2923;
                        vec4 _2939;
                        float _2986;
                        bool _2987;
                        for (;;)
                        {
                            uint _2864 = ((_2640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2853));
                            _2854 = (_2853 + 4294967295u) & _2853;
                            uint _2866 = _2864 * 40u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2880 = _2879.w;
                            uint _2882 = (_2864 * 40u) + 4u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2864 * 40u) + 8u;
                            _2907 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x));
                            uint _2910 = (_2864 * 40u) + 16u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2926 = (_2864 * 40u) + 20u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2864 * 40u) + 24u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2961 = (_2864 * 40u) + 28u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            _2986 = fma(_2221, _2974.z, fma(_2220, _2974.y, _2974.x * _2219)) + _2974.w;
                            _2987 = !((fma(_2221, _2955.z, fma(_2220, _2955.y, _2955.x * _2219)) + _2955.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2987)
                            {
                                float _3014 = _2879.x - _2219;
                                float _3015 = _2879.y - _2220;
                                float _3016 = _2879.z - _2221;
                                float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                                float _3020 = inversesqrt(_3017);
                                float _3021 = _3020 * _3014;
                                float _3022 = _3020 * _3015;
                                float _3023 = _3020 * _3016;
                                float _3027 = 1.0 - (_3017 / (_2880 * _2880));
                                float _4054 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3032 = sqrt(_3017) * _2895.w;
                                float _3034 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                                float _3035 = _3034 * _3034;
                                float _3038 = ((1.0 - _3035) * dot(vec3(_3021, _3022, _3023), vec3(_412, _415, _418))) + _3035;
                                float _3041 = _3032 * _3032;
                                float _3045 = (fma(_2221, _2923.z, fma(_2220, _2923.y, _2923.x * _2219)) + _2923.w) / _2986;
                                float _3046 = (fma(_2221, _2939.z, fma(_2220, _2939.y, _2939.x * _2219)) + _2939.w) / _2986;
                                float _3050 = 1.0 - dot(vec2(_3045, _3046), vec2(_3045, _3046));
                                float _4070 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3052 = _3051 * (((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3028) / ((_3041 * 0.699999988079071044921875) + 1.0));
                                float _3064 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                                float _3065 = 1.0 - _528;
                                float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                                float _3073 = _3072 * _3072;
                                float _3074 = _3073 * _3073;
                                float _3075 = _3021 - _2521;
                                float _3076 = _3022 - _2522;
                                float _3077 = _3023 - _2523;
                                float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                                float _3085 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2521, (-0.0) - _2522, (-0.0) - _2523));
                                float _4081 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3089 = dot(vec3(_412, _415, _418), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                                float _4092 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                                float _3097 = _3034 * _3073;
                                float _3098 = _3097 * _3097;
                                float _3104 = ((1.0 - _3098) * dot(vec3(_412, _415, _418), vec3(_3021, _3022, _3023))) + _3098;
                                float _4103 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3106 = 1.0 - _3073;
                                float _3116 = (0.5 / (((_3105 * ((_3088 * _3106) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3073) * _3088))) * _3105;
                                float _4114 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3126 = (_3051 * _3028) * (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_3096 * _3096) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3052 * _2895.z;
                                frontier_phi_75_pred_1 = _3052 * _2895.y;
                                frontier_phi_75_pred_2 = _3052 * _2895.x;
                                frontier_phi_75_pred_3 = _3126 * _2907.z;
                                frontier_phi_75_pred_4 = _3126 * _2907.y;
                                frontier_phi_75_pred_5 = _3126 * _2907.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3135 = frontier_phi_75_pred;
                            _3134 = frontier_phi_75_pred_1;
                            _3133 = frontier_phi_75_pred_2;
                            _3132 = frontier_phi_75_pred_3;
                            _3131 = frontier_phi_75_pred_4;
                            _3130 = frontier_phi_75_pred_5;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            if (_2854 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2854;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2839;
                        frontier_phi_69_pred_1 = _2838;
                        frontier_phi_69_pred_2 = _2837;
                        frontier_phi_69_pred_3 = _2836;
                        frontier_phi_69_pred_4 = _2835;
                        frontier_phi_69_pred_5 = _2834;
                    }
                    _2506 = frontier_phi_69_pred;
                    _2504 = frontier_phi_69_pred_1;
                    _2502 = frontier_phi_69_pred_2;
                    _2500 = frontier_phi_69_pred_3;
                    _2498 = frontier_phi_69_pred_4;
                    _2496 = frontier_phi_69_pred_5;
                    uint _2641 = _2640 + 1u;
                    if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2634 = _2496;
                        _2635 = _2498;
                        _2636 = _2500;
                        _2637 = _2502;
                        _2638 = _2504;
                        _2639 = _2506;
                        _2640 = _2641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2506;
                frontier_phi_57_58_ladder_1 = _2504;
                frontier_phi_57_58_ladder_2 = _2502;
                frontier_phi_57_58_ladder_3 = _2500;
                frontier_phi_57_58_ladder_4 = _2498;
                frontier_phi_57_58_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_57_58_ladder = _2393;
                frontier_phi_57_58_ladder_1 = _2391;
                frontier_phi_57_58_ladder_2 = _2389;
                frontier_phi_57_58_ladder_3 = _2387;
                frontier_phi_57_58_ladder_4 = _2385;
                frontier_phi_57_58_ladder_5 = _2383;
            }
            _2495 = frontier_phi_57_58_ladder_5;
            _2497 = frontier_phi_57_58_ladder_4;
            _2499 = frontier_phi_57_58_ladder_3;
            _2501 = frontier_phi_57_58_ladder_2;
            _2503 = frontier_phi_57_58_ladder_1;
            _2505 = frontier_phi_57_58_ladder;
        }
        float _2510 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
        _2277 = (_2510 * _2501) + _1711;
        _2279 = (_2510 * _2503) + _1713;
        _2281 = (_2510 * _2505) + _1715;
        _2283 = ((_2495 * _497) * _2510) + _2059;
        _2285 = ((_2497 * _499) * _2510) + _2061;
        _2287 = ((_2499 * _500) * _2510) + _2063;
    }
    else
    {
        _2277 = _1711;
        _2279 = _1713;
        _2281 = _1715;
        _2283 = _2059;
        _2285 = _2061;
        _2287 = _2063;
    }
    vec4 _2293 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4130 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _4141 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4152 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _2317 = (((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2277 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _512))) + ((_2283 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1322)) * cbPerFrame._m0[3u].x)) + (_2293.x * cbMtdParam._m0[3u].x);
    float _2319 = ((_2293.y * cbMtdParam._m0[3u].x) + ((_2285 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1322)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2279 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _512)));
    float _2321 = ((_2293.z * cbMtdParam._m0[3u].x) + ((_2287 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1322)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2281 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _512)));
    uint _2325 = _444 + 6u;
    float _2333 = _386 / cbSceneParam._m0[86u].x;
    float _2334 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2348 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2350 = _2348.x;
    float _2351 = _2348.y;
    float _2352 = _2348.z;
    float _2353 = _2348.w;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2408 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2409 = _2408 / _320;
        float _2420 = _2409 * _371;
        float _2421 = _372 * _2409;
        float _2422 = (-0.0) - _2421;
        float _2423 = _2409 * _373;
        float _2425 = (cbSceneParam._m0[77u].w * _2422) / _2408;
        float _2426 = _2425 + cbSceneParam._m0[79u].w;
        float _2427 = cbSceneParam._m0[79u].w - _2421;
        float _2433 = sqrt(((_2420 * _2420) + (_2421 * _2421)) + (_2423 * _2423));
        float _2436 = (1.0 - (cbSceneParam._m0[77u].w / _2408)) * _2433;
        float _2441 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2443 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2422 - _2425) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2426 > 0.0) ? exp2(_2441 * _2426) : (2.0 - exp2(_2443 * _2426))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2436;
        }
        else
        {
            float _2556 = 1.0 / cbSceneParam._m0[80u].x;
            float _2557 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : max(_2426, _2427));
            float _2558 = isnan(_2427) ? _2426 : (isnan(_2426) ? _2427 : min(_2426, _2427));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            _2596 = ((abs(_2433 / _2422) * cbSceneParam._m0[80u].y) * ((((_2567 - _2568) * 2.0) - ((exp2(_2441 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)))) - exp2(_2441 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))))) * _2556)) - ((exp2(_2443 * _2567) - exp2(_2443 * _2568)) * _2556))) + (_2436 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2353);
        _2445 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2350;
        _2447 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2351;
        _2449 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2352;
        _2451 = _2607 * _2353;
    }
    else
    {
        _2445 = _2350;
        _2447 = _2351;
        _2449 = _2352;
        _2451 = _2353;
    }
    float _2463 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2464 = _2463 == 3.0;
    float _2465 = log2(_2451);
    float _2472 = exp2(_2465 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)));
    float _2473 = exp2(_2465 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)));
    float _2474 = exp2(_2465 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0)));
    float _2483 = (_2463 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2483 * (_2464 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.y = _2483 * (_2464 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.z = _2483 * (_2464 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.w = cbInstanceData._m0[_2325].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2325].w;
}


