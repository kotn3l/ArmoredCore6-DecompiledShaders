#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _909;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _244 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _266 = _264.x;
    vec4 _278 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _287 = cbMtdParam._m0[10u].y * _278.z;
    float _291 = (_278.x * 2.0) + (-1.0);
    float _293 = (_278.y * 2.0) + (-1.0);
    float _294 = dot(vec2(_291, _293), vec2(_291, _293));
    float _3288 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _300 = sqrt(1.0 - (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))));
    float _303 = fma(_300, _222, fma(_293, _214 * TANGENT.x, (_200 * _192) * _291));
    float _306 = fma(_300, _223, fma(_293, _214 * TANGENT.y, (_200 * _193) * _291));
    float _309 = fma(_300, _224, fma(_293, _214 * TANGENT.z, (_200 * _194) * _291));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    float _314 = _313 * _303;
    float _315 = _313 * _306;
    float _316 = _313 * _309;
    float _3299 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _317 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3321 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3332 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3343 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _321 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _378 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _388 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _378);
    float _389 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _378);
    float _390 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _378);
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _395 = _388 * _394;
    float _396 = _389 * _394;
    float _397 = _390 * _394;
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _406 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _408 = _406.w;
    float _429 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _432 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _435 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    vec4 _437 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _448 = (((_437.y - _317) + (_437.w * _317)) * cbMtdParam._m0[3u].x) + _317;
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = (_461 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3354 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _3365 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _3376 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    vec4 _476 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _481 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _492 = (((_481.x - _321) + (_481.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    float _505 = (cbMtdParam._m0[3u].x * (((_473 * _408) - _473) + _476.x)) + _473;
    float _506 = (cbMtdParam._m0[3u].x * (((_474 * _408) - _474) + _476.y)) + _474;
    float _507 = (cbMtdParam._m0[3u].x * (((_475 * _408) - _475) + _476.z)) + _475;
    float _508 = 1.0 - _492;
    float _509 = _508 * _505;
    float _510 = _508 * _506;
    float _511 = _508 * _507;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _492;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _492;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _492;
    float _519 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _534 = _531.x * TEXCOORD_4;
    float _535 = dot(vec3(_314, _315, _316), vec3(_395, _396, _397));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _314) - _395;
    float _543 = (_538 * _315) - _396;
    float _544 = (_538 * _316) - _397;
    float _548 = abs(dot(vec3(_395, _396, _397), vec3(_314, _315, _316)));
    float _3387 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_448);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _569 = (1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _570 = _563 * _550;
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _637 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _641 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _666 = _598 + _314;
        float _667 = _602 + _315;
        float _668 = _606 + _316;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_314, _315, _316), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3435 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_314, _315, _316), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3468 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_314, _315, _316), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3501 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _953 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _957 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _980 = _598 + _314;
        float _981 = _602 + _315;
        float _982 = _606 + _316;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_314, _315, _316), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3564 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_314, _315, _316), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3597 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_314, _315, _316), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3630 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _909;
        _1219 = _909;
        _1220 = _909;
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = _909;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _542 * 0.5;
    float _1287 = _543 * 0.5;
    float _1288 = _544 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _912, _915, _918));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_910, _913, _916, _919));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_911, _914, _917, _920));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1418 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1421 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1449 = frontier_phi_16_14_ladder;
        }
        float _1678;
        if (_1418 > 0.0)
        {
            _1678 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1678 = frontier_phi_25_21_ladder;
        }
        float _1935;
        if (_1421 > 0.0)
        {
            _1935 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1935 = frontier_phi_37_32_ladder;
        }
        float _1937 = isnan(_1678) ? _1449 : (isnan(_1449) ? _1678 : min(_1449, _1678));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1415) + _1404;
        float _1943 = (_1938 * _1418) + _1408;
        float _1944 = (_1938 * _1421) + _1412;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_15_37_ladder = _2072.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2072.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2072.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_15_37_ladder_2;
        _1439 = frontier_phi_15_37_ladder_1;
        _1441 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1517 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1520 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1683;
        if (_1514 > 0.0)
        {
            _1683 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1683 = frontier_phi_27_23_ladder;
        }
        float _1962;
        if (_1517 > 0.0)
        {
            _1962 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1962 = frontier_phi_39_34_ladder;
        }
        float _2175;
        if (_1520 > 0.0)
        {
            _2175 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2175 = frontier_phi_48_45_ladder;
        }
        float _2177 = isnan(_1962) ? _1683 : (isnan(_1683) ? _1962 : min(_1683, _1962));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1514) + _1503;
        float _2183 = (_2178 * _1517) + _1507;
        float _2184 = (_2178 * _1520) + _1511;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2185;
        float _2188 = _2185 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2184 > _2188) || ((_2184 < _2186) || ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 < _2186) || (_2182 > _2188))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2184, cbModelParam._m0[17u].z, fma(_2183, cbModelParam._m0[17u].y, _2182 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2184, cbModelParam._m0[18u].z, fma(_2183, cbModelParam._m0[18u].y, _2182 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2184, cbModelParam._m0[19u].z, fma(_2183, cbModelParam._m0[19u].y, _2182 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_24_48_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_24_48_ladder_2;
        _1541 = frontier_phi_24_48_ladder_1;
        _1543 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_569 * _519) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_569 * _521) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_569 * _522) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    vec4 _1577 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_403, _404));
    float _1579 = _1577.w;
    float _1591 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1579);
    float _1592 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1579);
    float _1593 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1579);
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _534 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1636 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1640 = _1599 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_314, _315, _316));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_314, _315, _316));
    float _3766 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3777 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1616].x * _1622) * _1661) + (((cbLight._m0[_1626].x * _1591) * _1636) * _1659);
    float _1669 = ((_1622 * cbLight._m0[_1616].y) * _1661) + (((cbLight._m0[_1626].y * _1592) * _1636) * _1659);
    float _1670 = ((_1622 * cbLight._m0[_1616].z) * _1661) + (((cbLight._m0[_1626].z * _1593) * _1636) * _1659);
    uvec4 _1675 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1677 = _1675.x == 0u;
    float _1688;
    float _1690;
    float _1692;
    if (_1677)
    {
        _1688 = _1668;
        _1690 = _1669;
        _1692 = _1670;
    }
    else
    {
        uint _1696 = _1599 + 6u;
        float _1712 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1713 = _1712 * _1712;
        float _3788 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1715 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1688 = (((cbLight._m0[_1696].x * 0.3183098733425140380859375) * _1714) * _1715) + _1668;
        _1690 = (((cbLight._m0[_1696].y * 0.3183098733425140380859375) * _1714) * _1715) + _1669;
        _1692 = (((cbLight._m0[_1696].z * 0.3183098733425140380859375) * _1714) * _1715) + _1670;
    }
    bool _1695 = _1675.y == 0u;
    float _1733;
    float _1735;
    float _1737;
    if (_1695)
    {
        _1733 = _1688;
        _1735 = _1690;
        _1737 = _1692;
    }
    else
    {
        uint _1906 = _1599 + 7u;
        float _1922 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _3804 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1925 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1733 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1688;
        _1735 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1690;
        _1737 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1692;
    }
    uint _1740 = _1599 + 8u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _448) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1599].x + _395;
    float _1756 = cbLight._m0[_1599].y + _396;
    float _1757 = cbLight._m0[_1599].z + _397;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1599].xyz));
    float _3820 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _1769 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1770 = dot(vec3(_314, _315, _316), vec3(_1762, _1763, _1764));
    float _3842 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1762, _1763, _1764));
    float _3853 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1754 * _1754;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1790 = exp2(log2(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * 5.0);
    float _1791 = 0.959999978542327880859375 - _516;
    float _1793 = 0.959999978542327880859375 - _517;
    float _1794 = 0.959999978542327880859375 - _518;
    float _1801 = 1.0 - _1754;
    float _1812 = (0.5 / (((_1769 * ((_1768 * _1801) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1801) + _1754) * _1768))) * _1768;
    float _3864 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    uint _1828 = _1599 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _448) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1640].x + _395;
    float _1842 = cbLight._m0[_1640].y + _396;
    float _1843 = cbLight._m0[_1640].z + _397;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1640].xyz));
    float _3875 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1855 = dot(vec3(_314, _315, _316), vec3(_1848, _1849, _1850));
    float _3886 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1848, _1849, _1850));
    float _3897 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1874 = exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * 5.0);
    float _1881 = 1.0 - _1840;
    float _1891 = (0.5 / (((_1769 * ((_1854 * _1881) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1881) + _1840) * _1854))) * _1854;
    float _3908 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1903 = (((((_1874 * _1791) + _519) * cbLight._m0[_1828].x) * _1893) * _1622) + ((((cbLight._m0[_1740].x * _1591) * ((_1790 * _1791) + _519)) * _1814) * _1636);
    float _1904 = (((((_1874 * _1793) + _521) * cbLight._m0[_1828].y) * _1893) * _1622) + ((((cbLight._m0[_1740].y * _1592) * ((_1790 * _1793) + _521)) * _1814) * _1636);
    float _1905 = (((((_1874 * _1794) + _522) * cbLight._m0[_1828].z) * _1893) * _1622) + ((((cbLight._m0[_1740].z * _1593) * ((_1790 * _1794) + _522)) * _1814) * _1636);
    float _1967;
    float _1969;
    float _1971;
    if (_1677)
    {
        _1967 = _1903;
        _1969 = _1904;
        _1971 = _1905;
    }
    else
    {
        uint _1973 = _1599 + 2u;
        uint _1977 = _1599 + 10u;
        float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _448) * 0.949999988079071044921875);
        float _1992 = _1991 * _1991;
        float _1993 = cbLight._m0[_1973].x + _395;
        float _1994 = cbLight._m0[_1973].y + _396;
        float _1995 = cbLight._m0[_1973].z + _397;
        float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
        float _2000 = _1999 * _1993;
        float _2001 = _1999 * _1994;
        float _2002 = _1999 * _1995;
        float _2003 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1973].xyz));
        float _3919 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2007 = dot(vec3(_314, _315, _316), vec3(_2000, _2001, _2002));
        float _3930 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2011 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2000, _2001, _2002));
        float _3941 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2015 = _1992 * _1992;
        float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
        float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0);
        float _2033 = 1.0 - _1992;
        float _2043 = (0.5 / (((_1769 * ((_2006 * _2033) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2033) + _1992) * _2006))) * _2006;
        float _3952 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2045 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
        float _2046 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1967 = (((((_2026 * _1791) + _519) * cbLight._m0[_1977].x) * _2045) * _2046) + _1903;
        _1969 = (((((_2026 * _1793) + _521) * cbLight._m0[_1977].y) * _2045) * _2046) + _1904;
        _1971 = (((((_2026 * _1794) + _522) * cbLight._m0[_1977].z) * _2045) * _2046) + _1905;
    }
    float _2081;
    float _2083;
    float _2085;
    if (_1695)
    {
        _2081 = _1967;
        _2083 = _1969;
        _2085 = _1971;
    }
    else
    {
        uint _2092 = _1599 + 3u;
        uint _2096 = _1599 + 11u;
        float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _448) * 0.949999988079071044921875);
        float _2111 = _2110 * _2110;
        float _2112 = cbLight._m0[_2092].x + _395;
        float _2113 = cbLight._m0[_2092].y + _396;
        float _2114 = cbLight._m0[_2092].z + _397;
        float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
        float _2119 = _2118 * _2112;
        float _2120 = _2118 * _2113;
        float _2121 = _2118 * _2114;
        float _2122 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2092].xyz));
        float _3968 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2126 = dot(vec3(_314, _315, _316), vec3(_2119, _2120, _2121));
        float _3979 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _2130 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2119, _2120, _2121));
        float _3990 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2134 = _2111 * _2111;
        float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
        float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0);
        float _2152 = 1.0 - _2111;
        float _2162 = (0.5 / (((_1769 * ((_2125 * _2152) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2152) + _2111) * _2125))) * _2125;
        float _4001 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2081 = (((((_2145 * _1791) + _519) * cbLight._m0[_2096].x) * _2164) * _2165) + _1967;
        _2083 = (((((_2145 * _1793) + _521) * cbLight._m0[_2096].y) * _2164) * _2165) + _1969;
        _2085 = (((((_2145 * _1794) + _522) * cbLight._m0[_2096].z) * _2164) * _2165) + _1971;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1597.y == 0u)
    {
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2240;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2240;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2240;
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.x;
        uint _2267 = uint((float(_2255.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2256))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2256)));
        float _2277 = (log2(_2243 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2278 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        uint _2281 = uint(isnan(14.0) ? _2278 : (isnan(_2278) ? 14.0 : min(_2278, 14.0)));
        uvec4 _2286 = texelFetch(g_lightClusterGridBuffer, int(((_2281 << 2u) + (_2267 << 6u)) >> 2u));
        uint _2287 = _2286.x;
        uint _2288 = _2255.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2288 >> 4u) & 15u)) + 4294967295u) & _2287) == 0u) || ((_2288 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2565)
                {
                    frontier_phi_63_pred = _2554;
                    frontier_phi_63_pred_1 = _2553;
                    frontier_phi_63_pred_2 = _2552;
                    frontier_phi_63_pred_3 = _2551;
                    frontier_phi_63_pred_4 = _2550;
                    frontier_phi_63_pred_5 = _2549;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2564;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2555 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2241;
                        float _2740 = _2699.y - _2242;
                        float _2741 = _2699.z - _2243;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_429, _432, _435), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4027 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2241;
                        float _2775 = (-0.0) - _2242;
                        float _2776 = (-0.0) - _2243;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _550;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_429, _432, _435), vec3(_2781, _2782, _2783));
                        float _4043 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                        float _2816 = dot(vec3(_429, _432, _435), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4054 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4065 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4076 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2608 = (_2770 * _2718.x) + _2676;
                        _2609 = (_2770 * _2718.y) + _2677;
                        _2610 = (_2770 * _2718.z) + _2678;
                        _2605 = (_2851 * _2735.x) + _2673;
                        _2606 = (_2851 * _2735.y) + _2674;
                        _2607 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_63_pred = _2610;
                    frontier_phi_63_pred_1 = _2609;
                    frontier_phi_63_pred_2 = _2608;
                    frontier_phi_63_pred_3 = _2607;
                    frontier_phi_63_pred_4 = _2606;
                    frontier_phi_63_pred_5 = _2605;
                }
                _2416 = frontier_phi_63_pred;
                _2414 = frontier_phi_63_pred_1;
                _2412 = frontier_phi_63_pred_2;
                _2410 = frontier_phi_63_pred_3;
                _2408 = frontier_phi_63_pred_4;
                _2406 = frontier_phi_63_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2406;
                    _2550 = _2408;
                    _2551 = _2410;
                    _2552 = _2412;
                    _2553 = _2414;
                    _2554 = _2416;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((4294967295u << _2422) & _2287) == 0u)
        {
            _2517 = _2405;
            _2519 = _2407;
            _2521 = _2409;
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
        }
        else
        {
            float _2542 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
            float _2543 = _2542 * _2241;
            float _2544 = _2542 * _2242;
            float _2545 = _2542 * _2243;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2656 = _2405;
                float _2657 = _2407;
                float _2658 = _2409;
                float _2659 = _2411;
                float _2660 = _2413;
                float _2661 = _2415;
                uint _2662 = _2422;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2672)
                    {
                        frontier_phi_69_pred = _2661;
                        frontier_phi_69_pred_1 = _2660;
                        frontier_phi_69_pred_2 = _2659;
                        frontier_phi_69_pred_3 = _2658;
                        frontier_phi_69_pred_4 = _2657;
                        frontier_phi_69_pred_5 = _2656;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        uint _2875 = _2671;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2945;
                        vec4 _2961;
                        float _3008;
                        bool _3009;
                        for (;;)
                        {
                            uint _2886 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2932 = (_2886 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2886 * 40u) + 20u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2964 = (_2886 * 40u) + 24u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2983 = (_2886 * 40u) + 28u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _3008 = fma(_2243, _2996.z, fma(_2242, _2996.y, _2996.x * _2241)) + _2996.w;
                            _3009 = !((fma(_2243, _2977.z, fma(_2242, _2977.y, _2977.x * _2241)) + _2977.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3009)
                            {
                                float _3036 = _2901.x - _2241;
                                float _3037 = _2901.y - _2242;
                                float _3038 = _2901.z - _2243;
                                float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                                float _3042 = inversesqrt(_3039);
                                float _3043 = _3042 * _3036;
                                float _3044 = _3042 * _3037;
                                float _3045 = _3042 * _3038;
                                float _3049 = 1.0 - (_3039 / (_2902 * _2902));
                                float _4087 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3054 = sqrt(_3039) * _2917.w;
                                float _3056 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                                float _3057 = _3056 * _3056;
                                float _3060 = ((1.0 - _3057) * dot(vec3(_3043, _3044, _3045), vec3(_429, _432, _435))) + _3057;
                                float _3063 = _3054 * _3054;
                                float _3067 = (fma(_2243, _2945.z, fma(_2242, _2945.y, _2945.x * _2241)) + _2945.w) / _3008;
                                float _3068 = (fma(_2243, _2961.z, fma(_2242, _2961.y, _2961.x * _2241)) + _2961.w) / _3008;
                                float _3072 = 1.0 - dot(vec2(_3067, _3068), vec2(_3067, _3068));
                                float _4103 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3074 = _3073 * (((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3050) / ((_3063 * 0.699999988079071044921875) + 1.0));
                                float _3086 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                                float _3087 = 1.0 - _550;
                                float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                                float _3095 = _3094 * _3094;
                                float _3096 = _3095 * _3095;
                                float _3097 = _3043 - _2543;
                                float _3098 = _3044 - _2544;
                                float _3099 = _3045 - _2545;
                                float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                                float _3107 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2543, (-0.0) - _2544, (-0.0) - _2545));
                                float _4114 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3111 = dot(vec3(_429, _432, _435), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                                float _4125 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                                float _3119 = _3056 * _3095;
                                float _3120 = _3119 * _3119;
                                float _3126 = ((1.0 - _3120) * dot(vec3(_429, _432, _435), vec3(_3043, _3044, _3045))) + _3120;
                                float _4136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3128 = 1.0 - _3095;
                                float _3138 = (0.5 / (((_3127 * ((_3110 * _3128) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3095) * _3110))) * _3127;
                                float _4147 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3148 = (_3073 * _3050) * (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) / ((_3118 * _3118) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3074 * _2917.z;
                                frontier_phi_75_pred_1 = _3074 * _2917.y;
                                frontier_phi_75_pred_2 = _3074 * _2917.x;
                                frontier_phi_75_pred_3 = _3148 * _2929.z;
                                frontier_phi_75_pred_4 = _3148 * _2929.y;
                                frontier_phi_75_pred_5 = _3148 * _2929.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3157 = frontier_phi_75_pred;
                            _3156 = frontier_phi_75_pred_1;
                            _3155 = frontier_phi_75_pred_2;
                            _3154 = frontier_phi_75_pred_3;
                            _3153 = frontier_phi_75_pred_4;
                            _3152 = frontier_phi_75_pred_5;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2861;
                        frontier_phi_69_pred_1 = _2860;
                        frontier_phi_69_pred_2 = _2859;
                        frontier_phi_69_pred_3 = _2858;
                        frontier_phi_69_pred_4 = _2857;
                        frontier_phi_69_pred_5 = _2856;
                    }
                    _2528 = frontier_phi_69_pred;
                    _2526 = frontier_phi_69_pred_1;
                    _2524 = frontier_phi_69_pred_2;
                    _2522 = frontier_phi_69_pred_3;
                    _2520 = frontier_phi_69_pred_4;
                    _2518 = frontier_phi_69_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2518;
                        _2657 = _2520;
                        _2658 = _2522;
                        _2659 = _2524;
                        _2660 = _2526;
                        _2661 = _2528;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2528;
                frontier_phi_57_58_ladder_1 = _2526;
                frontier_phi_57_58_ladder_2 = _2524;
                frontier_phi_57_58_ladder_3 = _2522;
                frontier_phi_57_58_ladder_4 = _2520;
                frontier_phi_57_58_ladder_5 = _2518;
            }
            else
            {
                frontier_phi_57_58_ladder = _2415;
                frontier_phi_57_58_ladder_1 = _2413;
                frontier_phi_57_58_ladder_2 = _2411;
                frontier_phi_57_58_ladder_3 = _2409;
                frontier_phi_57_58_ladder_4 = _2407;
                frontier_phi_57_58_ladder_5 = _2405;
            }
            _2517 = frontier_phi_57_58_ladder_5;
            _2519 = frontier_phi_57_58_ladder_4;
            _2521 = frontier_phi_57_58_ladder_3;
            _2523 = frontier_phi_57_58_ladder_2;
            _2525 = frontier_phi_57_58_ladder_1;
            _2527 = frontier_phi_57_58_ladder;
        }
        float _2532 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2299 = (_2532 * _2523) + _1733;
        _2301 = (_2532 * _2525) + _1735;
        _2303 = (_2532 * _2527) + _1737;
        _2305 = ((_2517 * _519) * _2532) + _2081;
        _2307 = ((_2519 * _521) * _2532) + _2083;
        _2309 = ((_2521 * _522) * _2532) + _2085;
    }
    else
    {
        _2299 = _1733;
        _2301 = _1735;
        _2303 = _1737;
        _2305 = _2081;
        _2307 = _2083;
        _2309 = _2085;
    }
    vec4 _2315 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4163 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4174 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4185 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2339 = (((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2299 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _534))) + ((_2305 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + (_2315.x * cbMtdParam._m0[3u].x);
    float _2341 = ((_2315.y * cbMtdParam._m0[3u].x) + ((_2307 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2301 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _534)));
    float _2343 = ((_2315.z * cbMtdParam._m0[3u].x) + ((_2309 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2303 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _534)));
    uint _2347 = _461 + 6u;
    float _2355 = _403 / cbSceneParam._m0[86u].x;
    float _2356 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2370 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2372 = _2370.x;
    float _2373 = _2370.y;
    float _2374 = _2370.z;
    float _2375 = _2370.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2431 = _2430 / _337;
        float _2442 = _2431 * _388;
        float _2443 = _389 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _390;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2580 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2618 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2465 * _2589) - exp2(_2465 * _2590)) * _2578))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2375);
        _2467 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2372;
        _2469 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2373;
        _2471 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2374;
        _2473 = _2629 * _2375;
    }
    else
    {
        _2467 = _2372;
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0)));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0)));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2347].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2347].w;
}


