#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _911;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _246 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _268 = _266.x;
    vec4 _280 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _289 = cbMtdParam._m0[10u].y * _280.z;
    float _293 = (_280.x * 2.0) + (-1.0);
    float _295 = (_280.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3549 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))));
    float _305 = fma(_302, _224, fma(_295, _216 * TANGENT.x, (_202 * _194) * _293));
    float _308 = fma(_302, _225, fma(_295, _216 * TANGENT.y, (_202 * _195) * _293));
    float _311 = fma(_302, _226, fma(_295, _216 * TANGENT.z, (_202 * _196) * _293));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3560 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _319 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3582 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3593 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3604 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _323 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _339 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _390 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _380);
    float _391 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _380);
    float _392 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _380);
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _397 = _390 * _396;
    float _398 = _391 * _396;
    float _399 = _392 * _396;
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _408 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _410 = _408.w;
    float _431 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _434 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _437 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    vec4 _439 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _450 = (((_439.y - _319) + (_439.w * _319)) * cbMtdParam._m0[3u].x) + _319;
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _466 = (_463 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3615 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    vec4 _478 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _483 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _494 = (((_483.x - _323) + (_483.w * _323)) * cbMtdParam._m0[3u].x) + _323;
    float _507 = (cbMtdParam._m0[3u].x * (((_475 * _410) - _475) + _478.x)) + _475;
    float _508 = (cbMtdParam._m0[3u].x * (((_476 * _410) - _476) + _478.y)) + _476;
    float _509 = (cbMtdParam._m0[3u].x * (((_477 * _410) - _477) + _478.z)) + _477;
    float _510 = 1.0 - _494;
    float _511 = _510 * _507;
    float _512 = _510 * _508;
    float _513 = _510 * _509;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _494;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _494;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _494;
    float _521 = _518 + 0.039999999105930328369140625;
    float _523 = _519 + 0.039999999105930328369140625;
    float _524 = _520 + 0.039999999105930328369140625;
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _405, cbSceneParam._m0[86u].y * _406));
    float _536 = _533.x * TEXCOORD_4;
    float _537 = dot(vec3(_316, _317, _318), vec3(_397, _398, _399));
    float _540 = _537 * 2.0;
    float _544 = (_540 * _316) - _397;
    float _545 = (_540 * _317) - _398;
    float _546 = (_540 * _318) - _399;
    float _550 = abs(dot(vec3(_397, _398, _399), vec3(_316, _317, _318)));
    float _3648 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _552 = sqrt(_450);
    float _565 = exp2((_552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_552 * 3.0));
    float _571 = (1.0 - _565) * ((_552 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _572 = _565 * _552;
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _639 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _643 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _668 = _600 + _316;
        float _669 = _604 + _317;
        float _670 = _608 + _318;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_316, _317, _318), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3696 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_316, _317, _318), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3729 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_316, _317, _318), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3762 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _955 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _959 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _982 = _600 + _316;
        float _983 = _604 + _317;
        float _984 = _608 + _318;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_316, _317, _318), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3825 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_316, _317, _318), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3858 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_316, _317, _318), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3891 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _544 * 0.5;
    float _1289 = _545 * 0.5;
    float _1290 = _546 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _450);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_546, cbModelParam._m0[13u].z, fma(_545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544));
        float _1420 = fma(_546, cbModelParam._m0[14u].z, fma(_545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544));
        float _1423 = fma(_546, cbModelParam._m0[15u].z, fma(_545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1451 = frontier_phi_16_14_ladder;
        }
        float _1627;
        if (_1420 > 0.0)
        {
            _1627 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1627 = frontier_phi_25_21_ladder;
        }
        float _1923;
        if (_1423 > 0.0)
        {
            _1923 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1923 = frontier_phi_37_32_ladder;
        }
        float _1925 = isnan(_1627) ? _1451 : (isnan(_1451) ? _1627 : min(_1451, _1627));
        float _1926 = isnan(_1923) ? _1925 : (isnan(_1925) ? _1923 : min(_1925, _1923));
        float _1930 = (_1926 * _1417) + _1406;
        float _1931 = (_1926 * _1420) + _1410;
        float _1932 = (_1926 * _1423) + _1414;
        float _1933 = _1926 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1933;
        float _1937 = _1933 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 > _1937) || ((_1931 < _1935) || ((_1930 < _1935) || (_1930 > _1937))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2077 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1932, cbModelParam._m0[9u].z, fma(_1931, cbModelParam._m0[9u].y, _1930 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1932, cbModelParam._m0[10u].z, fma(_1931, cbModelParam._m0[10u].y, _1930 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1932, cbModelParam._m0[11u].z, fma(_1931, cbModelParam._m0[11u].y, _1930 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_15_37_ladder = _2077.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2077.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2077.z * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_15_37_ladder_1;
        _1441 = frontier_phi_15_37_ladder;
        _1443 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_544, _545, _546), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _450);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_546, cbModelParam._m0[21u].z, fma(_545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544));
        float _1519 = fma(_546, cbModelParam._m0[22u].z, fma(_545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544));
        float _1522 = fma(_546, cbModelParam._m0[23u].z, fma(_545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544));
        float _1632;
        if (_1516 > 0.0)
        {
            _1632 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1632 = frontier_phi_27_23_ladder;
        }
        float _1950;
        if (_1519 > 0.0)
        {
            _1950 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1950 = frontier_phi_39_34_ladder;
        }
        float _2288;
        if (_1522 > 0.0)
        {
            _2288 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2288 = frontier_phi_49_46_ladder;
        }
        float _2290 = isnan(_1950) ? _1632 : (isnan(_1632) ? _1950 : min(_1632, _1950));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1516) + _1505;
        float _2296 = (_2291 * _1519) + _1509;
        float _2297 = (_2291 * _1522) + _1513;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2298;
        float _2301 = _2298 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2297 > _2301) || ((_2297 < _2299) || ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 < _2299) || (_2295 > _2301))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2297, cbModelParam._m0[17u].z, fma(_2296, cbModelParam._m0[17u].y, _2295 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2297, cbModelParam._m0[18u].z, fma(_2296, cbModelParam._m0[18u].y, _2295 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2297, cbModelParam._m0[19u].z, fma(_2296, cbModelParam._m0[19u].y, _2295 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_24_49_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_24_49_ladder_2;
        _1543 = frontier_phi_24_49_ladder_1;
        _1545 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_544, _545, _546), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_571 * _521) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_571 * _523) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_571 * _524) + _572) * _536) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1610 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1618 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1619 = _1606 / _1618;
    float _1620 = _1610 / _1618;
    float _1621 = _1614 / _1618;
    float _1768;
    float _1769;
    float _1770;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1648 = ((uint(_1621 > cbSceneParam._m0[59u].y) + uint(_1621 > cbSceneParam._m0[59u].x)) + uint(_1621 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1649 = _1648 + 43u;
        uint _1657 = _1648 + 44u;
        uint _1665 = _1648 + 45u;
        uint _1673 = _1648 + 46u;
        float _1684 = fma(_1618, cbSceneParam._m0[_1649].w, fma(_1614, cbSceneParam._m0[_1649].z, fma(_1610, cbSceneParam._m0[_1649].y, _1606 * cbSceneParam._m0[_1649].x)));
        float _1688 = fma(_1618, cbSceneParam._m0[_1657].w, fma(_1614, cbSceneParam._m0[_1657].z, fma(_1610, cbSceneParam._m0[_1657].y, _1606 * cbSceneParam._m0[_1657].x)));
        float _1696 = fma(_1618, cbSceneParam._m0[_1673].w, fma(_1614, cbSceneParam._m0[_1673].z, fma(_1610, cbSceneParam._m0[_1673].y, _1606 * cbSceneParam._m0[_1673].x)));
        float _1701 = cbSceneParam._m0[33u].z * _1696;
        float _1703 = cbSceneParam._m0[33u].w * _1696;
        float _1706 = fma(_1618, cbSceneParam._m0[_1665].w, fma(_1614, cbSceneParam._m0[_1665].z, fma(_1610, cbSceneParam._m0[_1665].y, _1606 * cbSceneParam._m0[_1665].x))) / _1696;
        float _1754 = (cbSceneParam._m0[33u].x - sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621))) * cbSceneParam._m0[33u].y;
        float _4017 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1761 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1701 + _1684) / _1696, (_1703 + _1688) / _1696), _1706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 + _1684) / _1696, (_1688 - _1701) / _1696), _1706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1684 - _1701) / _1696, (_1688 - _1703) / _1696), _1706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1684 - _1703) / _1696, (_1701 + _1688) / _1696), _1706), 0.0)).x), vec4(0.25)));
        _1768 = 1.0 - (_1761 * cbSceneParam._m0[34u].x);
        _1769 = 1.0 - (_1761 * cbSceneParam._m0[34u].y);
        _1770 = 1.0 - (_1761 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1768 = 1.0;
        _1769 = 1.0;
        _1770 = 1.0;
    }
    float _1834;
    float _1836;
    float _1838;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1822 = fma(_1618, cbSceneParam._m0[63u].w, fma(_1614, cbSceneParam._m0[63u].z, fma(_1610, cbSceneParam._m0[63u].y, _1606 * cbSceneParam._m0[63u].x)));
        float _1823 = fma(_1618, cbSceneParam._m0[60u].w, fma(_1614, cbSceneParam._m0[60u].z, fma(_1610, cbSceneParam._m0[60u].y, _1606 * cbSceneParam._m0[60u].x))) / _1822;
        float _1824 = fma(_1618, cbSceneParam._m0[61u].w, fma(_1614, cbSceneParam._m0[61u].z, fma(_1610, cbSceneParam._m0[61u].y, _1606 * cbSceneParam._m0[61u].x))) / _1822;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1823 >= cbSceneParam._m0[64u].x) && (_1824 >= cbSceneParam._m0[64u].y)) && (_1823 <= cbSceneParam._m0[64u].z)) && (_1824 <= cbSceneParam._m0[64u].w))
        {
            float _1963 = fma(_1618, cbSceneParam._m0[62u].w, fma(_1614, cbSceneParam._m0[62u].z, fma(_1610, cbSceneParam._m0[62u].y, _1606 * cbSceneParam._m0[62u].x))) / _1822;
            float _1967 = isnan(cbSceneParam._m0[41u].w) ? _1963 : (isnan(_1963) ? cbSceneParam._m0[41u].w : max(_1963, cbSceneParam._m0[41u].w));
            float _2010 = (cbSceneParam._m0[33u].x - sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621))) * cbSceneParam._m0[33u].y;
            float _4033 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
            float _2017 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1823, cbSceneParam._m0[33u].w + _1824), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1823, _1824 - cbSceneParam._m0[33u].z), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1823 - cbSceneParam._m0[33u].z, _1824 - cbSceneParam._m0[33u].w), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1823 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1824), _1967), 0.0)).x), vec4(0.25)));
            float _2021 = 1.0 - (_2017 * cbSceneParam._m0[34u].x);
            float _2022 = 1.0 - (_2017 * cbSceneParam._m0[34u].y);
            float _2023 = 1.0 - (_2017 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
            frontier_phi_36_35_ladder_1 = isnan(_2023) ? _1770 : (isnan(_1770) ? _2023 : min(_1770, _2023));
            frontier_phi_36_35_ladder_2 = isnan(_2021) ? _1768 : (isnan(_1768) ? _2021 : min(_1768, _2021));
        }
        else
        {
            frontier_phi_36_35_ladder = _1769;
            frontier_phi_36_35_ladder_1 = _1770;
            frontier_phi_36_35_ladder_2 = _1768;
        }
        _1834 = frontier_phi_36_35_ladder_2;
        _1836 = frontier_phi_36_35_ladder;
        _1838 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1834 = _1768;
        _1836 = _1769;
        _1838 = _1770;
    }
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1853 = _536 + (-1.0);
    float _1858 = (cbLight._m0[_1846].x * _1853) + 1.0;
    float _1859 = (cbLight._m0[_1846].y * _1853) + 1.0;
    float _1860 = (cbLight._m0[_1846].z * _1853) + 1.0;
    float _1861 = (cbLight._m0[_1846].w * _1853) + 1.0;
    uint _1862 = _1845 + 5u;
    float _1868 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1872 = _1845 + 4u;
    float _1882 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1886 = _1845 | 1u;
    float _1897 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_316, _317, _318));
    float _1900 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_316, _317, _318));
    float _4069 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _4080 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1905 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1907 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1914 = ((cbLight._m0[_1862].x * _1868) * _1907) + (((cbLight._m0[_1872].x * _1834) * _1882) * _1905);
    float _1915 = ((_1868 * cbLight._m0[_1862].y) * _1907) + (((cbLight._m0[_1872].y * _1836) * _1882) * _1905);
    float _1916 = ((_1868 * cbLight._m0[_1862].z) * _1907) + (((cbLight._m0[_1872].z * _1838) * _1882) * _1905);
    uvec4 _1920 = floatBitsToUint(cbLight._m0[_1845 + 12u]);
    bool _1922 = _1920.x == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_1922)
    {
        _2024 = _1914;
        _2026 = _1915;
        _2028 = _1916;
    }
    else
    {
        uint _2032 = _1845 + 6u;
        float _2048 = (dot(vec3(cbLight._m0[_1845 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4091 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2051 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2024 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1914;
        _2026 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1915;
        _2028 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1916;
    }
    bool _2031 = _1920.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2031)
    {
        _2086 = _2024;
        _2088 = _2026;
        _2090 = _2028;
    }
    else
    {
        uint _2259 = _1845 + 7u;
        float _2275 = (dot(vec3(cbLight._m0[_1845 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4107 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2278 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2086 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2024;
        _2088 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2026;
        _2090 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2028;
    }
    uint _2093 = _1845 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _450) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1845].x + _397;
    float _2109 = cbLight._m0[_1845].y + _398;
    float _2110 = cbLight._m0[_1845].z + _399;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1845].xyz));
    float _4123 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _4134 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _2122 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2123 = dot(vec3(_316, _317, _318), vec3(_2115, _2116, _2117));
    float _4145 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2115, _2116, _2117));
    float _4156 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2144 = 0.959999978542327880859375 - _518;
    float _2146 = 0.959999978542327880859375 - _519;
    float _2147 = 0.959999978542327880859375 - _520;
    float _2154 = 1.0 - _2107;
    float _2165 = (0.5 / (((_2122 * ((_2121 * _2154) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2154) + _2107) * _2121))) * _2121;
    float _4167 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2181 = _1845 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _450) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1886].x + _397;
    float _2195 = cbLight._m0[_1886].y + _398;
    float _2196 = cbLight._m0[_1886].z + _399;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1886].xyz));
    float _4178 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2208 = dot(vec3(_316, _317, _318), vec3(_2201, _2202, _2203));
    float _4189 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2201, _2202, _2203));
    float _4200 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
    float _2234 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2122 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2234) + _2193) * _2207))) * _2207;
    float _4211 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2256 = (((((_2227 * _2144) + _521) * cbLight._m0[_2181].x) * _2246) * _1868) + ((((cbLight._m0[_2093].x * _1834) * ((_2143 * _2144) + _521)) * _2167) * _1882);
    float _2257 = (((((_2227 * _2146) + _523) * cbLight._m0[_2181].y) * _2246) * _1868) + ((((cbLight._m0[_2093].y * _1836) * ((_2143 * _2146) + _523)) * _2167) * _1882);
    float _2258 = (((((_2227 * _2147) + _524) * cbLight._m0[_2181].z) * _2246) * _1868) + ((((cbLight._m0[_2093].z * _1838) * ((_2143 * _2147) + _524)) * _2167) * _1882);
    float _2314;
    float _2316;
    float _2318;
    if (_1922)
    {
        _2314 = _2256;
        _2316 = _2257;
        _2318 = _2258;
    }
    else
    {
        uint _2320 = _1845 + 2u;
        uint _2324 = _1845 + 10u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _450) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _397;
        float _2341 = cbLight._m0[_2320].y + _398;
        float _2342 = cbLight._m0[_2320].z + _399;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2320].xyz));
        float _4222 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2354 = dot(vec3(_316, _317, _318), vec3(_2347, _2348, _2349));
        float _4233 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4244 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
        float _2380 = 1.0 - _2339;
        float _2390 = (0.5 / (((_2122 * ((_2353 * _2380) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2380) + _2339) * _2353))) * _2353;
        float _4255 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2314 = (((((_2373 * _2144) + _521) * cbLight._m0[_2324].x) * _2392) * _2393) + _2256;
        _2316 = (((((_2373 * _2146) + _523) * cbLight._m0[_2324].y) * _2392) * _2393) + _2257;
        _2318 = (((((_2373 * _2147) + _524) * cbLight._m0[_2324].z) * _2392) * _2393) + _2258;
    }
    float _2424;
    float _2426;
    float _2428;
    if (_2031)
    {
        _2424 = _2314;
        _2426 = _2316;
        _2428 = _2318;
    }
    else
    {
        uint _2435 = _1845 + 3u;
        uint _2439 = _1845 + 11u;
        float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _450) * 0.949999988079071044921875);
        float _2454 = _2453 * _2453;
        float _2455 = cbLight._m0[_2435].x + _397;
        float _2456 = cbLight._m0[_2435].y + _398;
        float _2457 = cbLight._m0[_2435].z + _399;
        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
        float _2462 = _2461 * _2455;
        float _2463 = _2461 * _2456;
        float _2464 = _2461 * _2457;
        float _2465 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2435].xyz));
        float _4271 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2469 = dot(vec3(_316, _317, _318), vec3(_2462, _2463, _2464));
        float _4282 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2473 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2462, _2463, _2464));
        float _4293 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2477 = _2454 * _2454;
        float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
        float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
        float _2495 = 1.0 - _2454;
        float _2505 = (0.5 / (((_2122 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2495) + _2454) * _2468))) * _2468;
        float _4304 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2507 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
        float _2508 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2424 = (((((_2488 * _2144) + _521) * cbLight._m0[_2439].x) * _2507) * _2508) + _2314;
        _2426 = (((((_2488 * _2146) + _523) * cbLight._m0[_2439].y) * _2507) * _2508) + _2316;
        _2428 = (((((_2488 * _2147) + _524) * cbLight._m0[_2439].z) * _2507) * _2508) + _2318;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1843.y == 0u)
    {
        uvec4 _2529 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2530 = _2529.x;
        uint _2541 = uint((float(_2529.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _2530))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _2530)));
        float _2551 = (log2(_1621 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2552 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        uint _2555 = uint(isnan(14.0) ? _2552 : (isnan(_2552) ? 14.0 : min(_2552, 14.0)));
        uvec4 _2560 = texelFetch(g_lightClusterGridBuffer, int(((_2555 << 2u) + (_2541 << 6u)) >> 2u));
        uint _2561 = _2560.x;
        uint _2562 = _2529.z;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((((1u << ((_2562 >> 4u) & 15u)) + 4294967295u) & _2561) == 0u) || ((_2562 & 240u) == 0u))
        {
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
        }
        else
        {
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            uint _2808 = 0u;
            uint _2817;
            bool _2818;
            for (;;)
            {
                _2817 = texelFetch(g_lightClassification, int((((_2555 << 5u) + (_2541 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                _2818 = _2817 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2818)
                {
                    frontier_phi_68_pred = _2807;
                    frontier_phi_68_pred_1 = _2806;
                    frontier_phi_68_pred_2 = _2805;
                    frontier_phi_68_pred_3 = _2803;
                    frontier_phi_68_pred_4 = _2802;
                    frontier_phi_68_pred_5 = _2804;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2817;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2808 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _1619;
                        float _2993 = _2952.y - _1620;
                        float _2994 = _2952.z - _1621;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_431, _434, _437), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4330 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _1619;
                        float _3028 = (-0.0) - _1620;
                        float _3029 = (-0.0) - _1621;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3043 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _552;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3056 = _3036 + _3001;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_431, _434, _437), vec3(_3034, _3035, _3036));
                        float _4346 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3068 = dot(vec3(_431, _434, _437), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4357 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3012 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3002) + _3077;
                        float _4368 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4379 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3075 * _3075) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2861 = (_3023 * _2971.x) + _2929;
                        _2862 = (_3023 * _2971.y) + _2930;
                        _2863 = (_3023 * _2971.z) + _2931;
                        _2858 = (_3103 * _2988.x) + _2926;
                        _2859 = (_3103 * _2988.y) + _2927;
                        _2860 = (_3103 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_68_pred = _2863;
                    frontier_phi_68_pred_1 = _2862;
                    frontier_phi_68_pred_2 = _2861;
                    frontier_phi_68_pred_3 = _2859;
                    frontier_phi_68_pred_4 = _2858;
                    frontier_phi_68_pred_5 = _2860;
                }
                _2669 = frontier_phi_68_pred;
                _2667 = frontier_phi_68_pred_1;
                _2665 = frontier_phi_68_pred_2;
                _2661 = frontier_phi_68_pred_3;
                _2659 = frontier_phi_68_pred_4;
                _2663 = frontier_phi_68_pred_5;
                uint _2809 = _2808 + 1u;
                if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2802 = _2659;
                    _2803 = _2661;
                    _2804 = _2663;
                    _2805 = _2665;
                    _2806 = _2667;
                    _2807 = _2669;
                    _2808 = _2809;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
        }
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.z;
        uint _2675 = (_2673 >> 8u) & 15u;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((4294967295u << _2675) & _2561) == 0u)
        {
            _2770 = _2658;
            _2772 = _2660;
            _2774 = _2662;
            _2776 = _2664;
            _2778 = _2666;
            _2780 = _2668;
        }
        else
        {
            float _2795 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
            float _2796 = _2795 * _1619;
            float _2797 = _2795 * _1620;
            float _2798 = _2795 * _1621;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2675 < ((_2673 >> 12u) & 15u))
            {
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2909 = _2658;
                float _2910 = _2660;
                float _2911 = _2662;
                float _2912 = _2664;
                float _2913 = _2666;
                float _2914 = _2668;
                uint _2915 = _2675;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2555 << 5u) + (_2541 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2925)
                    {
                        frontier_phi_74_pred = _2911;
                        frontier_phi_74_pred_1 = _2910;
                        frontier_phi_74_pred_2 = _2909;
                        frontier_phi_74_pred_3 = _2914;
                        frontier_phi_74_pred_4 = _2913;
                        frontier_phi_74_pred_5 = _2912;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3121 = _2909;
                        float _3122 = _2910;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        uint _3127 = _2924;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3197;
                        vec4 _3213;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3138 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3184 = (_3138 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3200 = (_3138 * 40u) + 20u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3216 = (_3138 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3138 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_1621, _3248.z, fma(_1620, _3248.y, _3248.x * _1619)) + _3248.w;
                            _3261 = !((fma(_1621, _3229.z, fma(_1620, _3229.y, _3229.x * _1619)) + _3229.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3153.x - _1619;
                                float _3289 = _3153.y - _1620;
                                float _3290 = _3153.z - _1621;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3154 * _3154));
                                float _4390 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3306 = sqrt(_3291) * _3169.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_431, _434, _437))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_1621, _3197.z, fma(_1620, _3197.y, _3197.x * _1619)) + _3197.w) / _3260;
                                float _3320 = (fma(_1621, _3213.z, fma(_1620, _3213.y, _3213.x * _1619)) + _3213.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4406 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _552;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2796;
                                float _3350 = _3296 - _2797;
                                float _3351 = _3297 - _2798;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2796, (-0.0) - _2797, (-0.0) - _2798));
                                float _4417 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3363 = dot(vec3(_431, _434, _437), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4428 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_431, _434, _437), vec3(_3295, _3296, _3297))) + _3372;
                                float _4439 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4450 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3400 * _3181.z;
                                frontier_phi_80_pred_1 = _3400 * _3181.y;
                                frontier_phi_80_pred_2 = _3400 * _3181.x;
                                frontier_phi_80_pred_3 = _3326 * _3169.z;
                                frontier_phi_80_pred_4 = _3326 * _3169.y;
                                frontier_phi_80_pred_5 = _3326 * _3169.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_80_pred;
                            _3405 = frontier_phi_80_pred_1;
                            _3404 = frontier_phi_80_pred_2;
                            _3409 = frontier_phi_80_pred_3;
                            _3408 = frontier_phi_80_pred_4;
                            _3407 = frontier_phi_80_pred_5;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            _3113 = _3409 + _3126;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3110;
                        frontier_phi_74_pred_1 = _3109;
                        frontier_phi_74_pred_2 = _3108;
                        frontier_phi_74_pred_3 = _3113;
                        frontier_phi_74_pred_4 = _3112;
                        frontier_phi_74_pred_5 = _3111;
                    }
                    _2775 = frontier_phi_74_pred;
                    _2773 = frontier_phi_74_pred_1;
                    _2771 = frontier_phi_74_pred_2;
                    _2781 = frontier_phi_74_pred_3;
                    _2779 = frontier_phi_74_pred_4;
                    _2777 = frontier_phi_74_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2771;
                        _2910 = _2773;
                        _2911 = _2775;
                        _2912 = _2777;
                        _2913 = _2779;
                        _2914 = _2781;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2779;
                frontier_phi_62_63_ladder_1 = _2777;
                frontier_phi_62_63_ladder_2 = _2775;
                frontier_phi_62_63_ladder_3 = _2781;
                frontier_phi_62_63_ladder_4 = _2773;
                frontier_phi_62_63_ladder_5 = _2771;
            }
            else
            {
                frontier_phi_62_63_ladder = _2666;
                frontier_phi_62_63_ladder_1 = _2664;
                frontier_phi_62_63_ladder_2 = _2662;
                frontier_phi_62_63_ladder_3 = _2668;
                frontier_phi_62_63_ladder_4 = _2660;
                frontier_phi_62_63_ladder_5 = _2658;
            }
            _2770 = frontier_phi_62_63_ladder_5;
            _2772 = frontier_phi_62_63_ladder_4;
            _2774 = frontier_phi_62_63_ladder_2;
            _2776 = frontier_phi_62_63_ladder_1;
            _2778 = frontier_phi_62_63_ladder;
            _2780 = frontier_phi_62_63_ladder_3;
        }
        float _2785 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2573 = (_2785 * _2776) + _2086;
        _2575 = (_2785 * _2778) + _2088;
        _2577 = (_2785 * _2780) + _2090;
        _2579 = ((_2770 * _521) * _2785) + _2424;
        _2581 = ((_2772 * _523) * _2785) + _2426;
        _2583 = ((_2774 * _524) * _2785) + _2428;
    }
    else
    {
        _2573 = _2086;
        _2575 = _2088;
        _2577 = _2090;
        _2579 = _2424;
        _2581 = _2426;
        _2583 = _2428;
    }
    vec4 _2589 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4466 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4477 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4488 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _2613 = (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2573 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _536))) + ((_2579 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + (_2589.x * cbMtdParam._m0[3u].x);
    float _2615 = ((_2589.y * cbMtdParam._m0[3u].x) + ((_2581 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2575 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _536)));
    float _2617 = ((_2589.z * cbMtdParam._m0[3u].x) + ((_2583 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2577 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _536)));
    uint _2621 = _463 + 6u;
    float _2629 = _405 / cbSceneParam._m0[86u].x;
    float _2630 = _406 / cbSceneParam._m0[86u].y;
    vec4 _2644 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2646 = _2644.x;
    float _2647 = _2644.y;
    float _2648 = _2644.z;
    float _2649 = _2644.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2683 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2684 = _2683 / _339;
        float _2695 = _2684 * _390;
        float _2696 = _391 * _2684;
        float _2697 = (-0.0) - _2696;
        float _2698 = _2684 * _392;
        float _2700 = (cbSceneParam._m0[77u].w * _2697) / _2683;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2696;
        float _2708 = sqrt(((_2695 * _2695) + (_2696 * _2696)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2683)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2697 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2831 = 1.0 / cbSceneParam._m0[80u].x;
            float _2832 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2833 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            _2871 = ((abs(_2708 / _2697) * cbSceneParam._m0[80u].y) * ((((_2842 - _2843) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))))) * _2831)) - ((exp2(_2718 * _2842) - exp2(_2718 * _2843)) * _2831))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2649);
        _2720 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2646;
        _2722 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2647;
        _2724 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2648;
        _2726 = _2882 * _2649;
    }
    else
    {
        _2720 = _2646;
        _2722 = _2647;
        _2724 = _2648;
        _2726 = _2649;
    }
    float _2738 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2739 = _2738 == 3.0;
    float _2740 = log2(_2726);
    float _2747 = exp2(_2740 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)));
    float _2748 = exp2(_2740 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)));
    float _2749 = exp2(_2740 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0)));
    float _2758 = (_2738 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2758 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.y = _2758 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.z = _2758 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.w = cbInstanceData._m0[_2621].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2621].w;
}


