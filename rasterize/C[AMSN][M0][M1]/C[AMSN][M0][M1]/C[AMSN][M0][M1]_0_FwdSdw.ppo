#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _913;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _238 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _251 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_238 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _238) + cbTextureTilingScale._m0[2u].w));
    float _273 = _271.x;
    vec4 _285 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _238) + cbTextureTilingScale._m0[1u].w));
    float _291 = cbMtdParam._m0[10u].y * _285.z;
    float _295 = (_285.x * 2.0) + (-1.0);
    float _297 = (_285.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3551 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _307 = fma(_304, _224, fma(_297, _216 * TANGENT.x, (_202 * _194) * _295));
    float _310 = fma(_304, _225, fma(_297, _216 * TANGENT.y, (_202 * _195) * _295));
    float _313 = fma(_304, _226, fma(_297, _216 * TANGENT.z, (_202 * _196) * _295));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3562 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _321 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3584 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3595 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3606 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _325 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    float _407 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _408 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _410 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _412 = _410.w;
    float _433 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _436 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _439 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    vec4 _441 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _452 = (((_441.y - _321) + (_441.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _468 = (_465 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3617 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    vec4 _480 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _485 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _496 = (((_485.x - _325) + (_485.w * _325)) * cbMtdParam._m0[3u].x) + _325;
    float _509 = (cbMtdParam._m0[3u].x * (((_477 * _412) - _477) + _480.x)) + _477;
    float _510 = (cbMtdParam._m0[3u].x * (((_478 * _412) - _478) + _480.y)) + _478;
    float _511 = (cbMtdParam._m0[3u].x * (((_479 * _412) - _479) + _480.z)) + _479;
    float _512 = 1.0 - _496;
    float _513 = _512 * _509;
    float _514 = _512 * _510;
    float _515 = _512 * _511;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _496;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _496;
    float _522 = (_511 + (-0.039999999105930328369140625)) * _496;
    float _523 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    float _526 = _522 + 0.039999999105930328369140625;
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _407, cbSceneParam._m0[86u].y * _408));
    float _538 = _535.x * TEXCOORD_4;
    float _539 = dot(vec3(_318, _319, _320), vec3(_399, _400, _401));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _318) - _399;
    float _547 = (_542 * _319) - _400;
    float _548 = (_542 * _320) - _401;
    float _552 = abs(dot(vec3(_399, _400, _401), vec3(_318, _319, _320)));
    float _3650 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_452);
    float _567 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _573 = (1.0 - _567) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _574 = _567 * _554;
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _641 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _645 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _670 = _602 + _318;
        float _671 = _606 + _319;
        float _672 = _610 + _320;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _637;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _641;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _645;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_318, _319, _320), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3698 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_318, _319, _320), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3731 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_318, _319, _320), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3764 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _957 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _961 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _984 = _602 + _318;
        float _985 = _606 + _319;
        float _986 = _610 + _320;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_318, _319, _320), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3827 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_318, _319, _320), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3860 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_318, _319, _320), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3893 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _546 * 0.5;
    float _1291 = _547 * 0.5;
    float _1292 = _548 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _916, _919, _922));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_914, _917, _920, _923));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_915, _918, _921, _924));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _452);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1422 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1425 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1453 = frontier_phi_16_14_ladder;
        }
        float _1629;
        if (_1422 > 0.0)
        {
            _1629 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1629 = frontier_phi_25_21_ladder;
        }
        float _1925;
        if (_1425 > 0.0)
        {
            _1925 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1925 = frontier_phi_37_32_ladder;
        }
        float _1927 = isnan(_1629) ? _1453 : (isnan(_1453) ? _1629 : min(_1453, _1629));
        float _1928 = isnan(_1925) ? _1927 : (isnan(_1927) ? _1925 : min(_1927, _1925));
        float _1932 = (_1928 * _1419) + _1408;
        float _1933 = (_1928 * _1422) + _1412;
        float _1934 = (_1928 * _1425) + _1416;
        float _1935 = _1928 * 9.9999997473787516355514526367188e-05;
        float _1937 = (-1.0) - _1935;
        float _1939 = _1935 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1934 > _1939) || ((_1934 < _1937) || ((_1933 > _1939) || ((_1933 < _1937) || ((_1932 < _1937) || (_1932 > _1939))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1934, cbModelParam._m0[9u].z, fma(_1933, cbModelParam._m0[9u].y, _1932 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1934, cbModelParam._m0[10u].z, fma(_1933, cbModelParam._m0[10u].y, _1932 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1934, cbModelParam._m0[11u].z, fma(_1933, cbModelParam._m0[11u].y, _1932 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_15_37_ladder = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2079.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2079.z * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_15_37_ladder_1;
        _1443 = frontier_phi_15_37_ladder;
        _1445 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _452);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1521 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1524 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1634;
        if (_1518 > 0.0)
        {
            _1634 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1634 = frontier_phi_27_23_ladder;
        }
        float _1952;
        if (_1521 > 0.0)
        {
            _1952 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1952 = frontier_phi_39_34_ladder;
        }
        float _2290;
        if (_1524 > 0.0)
        {
            _2290 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2290 = frontier_phi_49_46_ladder;
        }
        float _2292 = isnan(_1952) ? _1634 : (isnan(_1634) ? _1952 : min(_1634, _1952));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1518) + _1507;
        float _2298 = (_2293 * _1521) + _1511;
        float _2299 = (_2293 * _1524) + _1515;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2300;
        float _2303 = _2300 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2299 > _2303) || ((_2299 < _2301) || ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 < _2301) || (_2297 > _2303))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2299, cbModelParam._m0[17u].z, fma(_2298, cbModelParam._m0[17u].y, _2297 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2299, cbModelParam._m0[18u].z, fma(_2298, cbModelParam._m0[18u].y, _2297 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2299, cbModelParam._m0[19u].z, fma(_2298, cbModelParam._m0[19u].y, _2297 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_24_49_ladder = _2421.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2421.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2421.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_24_49_ladder_2;
        _1545 = frontier_phi_24_49_ladder_1;
        _1547 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_573 * _523) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_573 * _525) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_573 * _526) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    float _1608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1612 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1621 = _1608 / _1620;
    float _1622 = _1612 / _1620;
    float _1623 = _1616 / _1620;
    float _1770;
    float _1771;
    float _1772;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1650 = ((uint(_1623 > cbSceneParam._m0[59u].y) + uint(_1623 > cbSceneParam._m0[59u].x)) + uint(_1623 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1651 = _1650 + 43u;
        uint _1659 = _1650 + 44u;
        uint _1667 = _1650 + 45u;
        uint _1675 = _1650 + 46u;
        float _1686 = fma(_1620, cbSceneParam._m0[_1651].w, fma(_1616, cbSceneParam._m0[_1651].z, fma(_1612, cbSceneParam._m0[_1651].y, _1608 * cbSceneParam._m0[_1651].x)));
        float _1690 = fma(_1620, cbSceneParam._m0[_1659].w, fma(_1616, cbSceneParam._m0[_1659].z, fma(_1612, cbSceneParam._m0[_1659].y, _1608 * cbSceneParam._m0[_1659].x)));
        float _1698 = fma(_1620, cbSceneParam._m0[_1675].w, fma(_1616, cbSceneParam._m0[_1675].z, fma(_1612, cbSceneParam._m0[_1675].y, _1608 * cbSceneParam._m0[_1675].x)));
        float _1703 = cbSceneParam._m0[33u].z * _1698;
        float _1705 = cbSceneParam._m0[33u].w * _1698;
        float _1708 = fma(_1620, cbSceneParam._m0[_1667].w, fma(_1616, cbSceneParam._m0[_1667].z, fma(_1612, cbSceneParam._m0[_1667].y, _1608 * cbSceneParam._m0[_1667].x))) / _1698;
        float _1756 = (cbSceneParam._m0[33u].x - sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623))) * cbSceneParam._m0[33u].y;
        float _4019 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1763 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1703 + _1686) / _1698, (_1705 + _1690) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1705 + _1686) / _1698, (_1690 - _1703) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 - _1703) / _1698, (_1690 - _1705) / _1698), _1708), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 - _1705) / _1698, (_1703 + _1690) / _1698), _1708), 0.0)).x), vec4(0.25)));
        _1770 = 1.0 - (_1763 * cbSceneParam._m0[34u].x);
        _1771 = 1.0 - (_1763 * cbSceneParam._m0[34u].y);
        _1772 = 1.0 - (_1763 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1770 = 1.0;
        _1771 = 1.0;
        _1772 = 1.0;
    }
    float _1836;
    float _1838;
    float _1840;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1824 = fma(_1620, cbSceneParam._m0[63u].w, fma(_1616, cbSceneParam._m0[63u].z, fma(_1612, cbSceneParam._m0[63u].y, _1608 * cbSceneParam._m0[63u].x)));
        float _1825 = fma(_1620, cbSceneParam._m0[60u].w, fma(_1616, cbSceneParam._m0[60u].z, fma(_1612, cbSceneParam._m0[60u].y, _1608 * cbSceneParam._m0[60u].x))) / _1824;
        float _1826 = fma(_1620, cbSceneParam._m0[61u].w, fma(_1616, cbSceneParam._m0[61u].z, fma(_1612, cbSceneParam._m0[61u].y, _1608 * cbSceneParam._m0[61u].x))) / _1824;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1825 >= cbSceneParam._m0[64u].x) && (_1826 >= cbSceneParam._m0[64u].y)) && (_1825 <= cbSceneParam._m0[64u].z)) && (_1826 <= cbSceneParam._m0[64u].w))
        {
            float _1965 = fma(_1620, cbSceneParam._m0[62u].w, fma(_1616, cbSceneParam._m0[62u].z, fma(_1612, cbSceneParam._m0[62u].y, _1608 * cbSceneParam._m0[62u].x))) / _1824;
            float _1969 = isnan(cbSceneParam._m0[41u].w) ? _1965 : (isnan(_1965) ? cbSceneParam._m0[41u].w : max(_1965, cbSceneParam._m0[41u].w));
            float _2012 = (cbSceneParam._m0[33u].x - sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623))) * cbSceneParam._m0[33u].y;
            float _4035 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
            float _2019 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1825, cbSceneParam._m0[33u].w + _1826), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1825, _1826 - cbSceneParam._m0[33u].z), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1825 - cbSceneParam._m0[33u].z, _1826 - cbSceneParam._m0[33u].w), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1825 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1826), _1969), 0.0)).x), vec4(0.25)));
            float _2023 = 1.0 - (_2019 * cbSceneParam._m0[34u].x);
            float _2024 = 1.0 - (_2019 * cbSceneParam._m0[34u].y);
            float _2025 = 1.0 - (_2019 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
            frontier_phi_36_35_ladder_1 = isnan(_2025) ? _1772 : (isnan(_1772) ? _2025 : min(_1772, _2025));
            frontier_phi_36_35_ladder_2 = isnan(_2023) ? _1770 : (isnan(_1770) ? _2023 : min(_1770, _2023));
        }
        else
        {
            frontier_phi_36_35_ladder = _1771;
            frontier_phi_36_35_ladder_1 = _1772;
            frontier_phi_36_35_ladder_2 = _1770;
        }
        _1836 = frontier_phi_36_35_ladder_2;
        _1838 = frontier_phi_36_35_ladder;
        _1840 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1836 = _1770;
        _1838 = _1771;
        _1840 = _1772;
    }
    uvec4 _1845 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1847 = _1845.x * 14u;
    uint _1848 = _1847 + 13u;
    float _1855 = _538 + (-1.0);
    float _1860 = (cbLight._m0[_1848].x * _1855) + 1.0;
    float _1861 = (cbLight._m0[_1848].y * _1855) + 1.0;
    float _1862 = (cbLight._m0[_1848].z * _1855) + 1.0;
    float _1863 = (cbLight._m0[_1848].w * _1855) + 1.0;
    uint _1864 = _1847 + 5u;
    float _1870 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1874 = _1847 + 4u;
    float _1884 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1888 = _1847 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_318, _319, _320));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_318, _319, _320));
    float _4071 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _4082 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1864].x * _1870) * _1909) + (((cbLight._m0[_1874].x * _1836) * _1884) * _1907);
    float _1917 = ((_1870 * cbLight._m0[_1864].y) * _1909) + (((cbLight._m0[_1874].y * _1838) * _1884) * _1907);
    float _1918 = ((_1870 * cbLight._m0[_1864].z) * _1909) + (((cbLight._m0[_1874].z * _1840) * _1884) * _1907);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1847 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1924)
    {
        _2026 = _1916;
        _2028 = _1917;
        _2030 = _1918;
    }
    else
    {
        uint _2034 = _1847 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1847 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4093 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2053 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1916;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1917;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1918;
    }
    bool _2033 = _1922.y == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2033)
    {
        _2088 = _2026;
        _2090 = _2028;
        _2092 = _2030;
    }
    else
    {
        uint _2261 = _1847 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1847 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4109 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2280 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2088 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2026;
        _2090 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2028;
        _2092 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2030;
    }
    uint _2095 = _1847 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _452) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1847].x + _399;
    float _2111 = cbLight._m0[_1847].y + _400;
    float _2112 = cbLight._m0[_1847].z + _401;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1847].xyz));
    float _4125 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2124 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2125 = dot(vec3(_318, _319, _320), vec3(_2117, _2118, _2119));
    float _4147 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2117, _2118, _2119));
    float _4158 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
    float _2146 = 0.959999978542327880859375 - _520;
    float _2148 = 0.959999978542327880859375 - _521;
    float _2149 = 0.959999978542327880859375 - _522;
    float _2156 = 1.0 - _2109;
    float _2167 = (0.5 / (((_2124 * ((_2123 * _2156) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2156) + _2109) * _2123))) * _2123;
    float _4169 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2183 = _1847 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _452) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1888].x + _399;
    float _2197 = cbLight._m0[_1888].y + _400;
    float _2198 = cbLight._m0[_1888].z + _401;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1888].xyz));
    float _4180 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2210 = dot(vec3(_318, _319, _320), vec3(_2203, _2204, _2205));
    float _4191 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2203, _2204, _2205));
    float _4202 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0);
    float _2236 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2124 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2236) + _2195) * _2209))) * _2209;
    float _4213 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2258 = (((((_2229 * _2146) + _523) * cbLight._m0[_2183].x) * _2248) * _1870) + ((((cbLight._m0[_2095].x * _1836) * ((_2145 * _2146) + _523)) * _2169) * _1884);
    float _2259 = (((((_2229 * _2148) + _525) * cbLight._m0[_2183].y) * _2248) * _1870) + ((((cbLight._m0[_2095].y * _1838) * ((_2145 * _2148) + _525)) * _2169) * _1884);
    float _2260 = (((((_2229 * _2149) + _526) * cbLight._m0[_2183].z) * _2248) * _1870) + ((((cbLight._m0[_2095].z * _1840) * ((_2145 * _2149) + _526)) * _2169) * _1884);
    float _2316;
    float _2318;
    float _2320;
    if (_1924)
    {
        _2316 = _2258;
        _2318 = _2259;
        _2320 = _2260;
    }
    else
    {
        uint _2322 = _1847 + 2u;
        uint _2326 = _1847 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _452) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _399;
        float _2343 = cbLight._m0[_2322].y + _400;
        float _2344 = cbLight._m0[_2322].z + _401;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2322].xyz));
        float _4224 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2356 = dot(vec3(_318, _319, _320), vec3(_2349, _2350, _2351));
        float _4235 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4246 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_2124 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2382) + _2341) * _2355))) * _2355;
        float _4257 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2316 = (((((_2375 * _2146) + _523) * cbLight._m0[_2326].x) * _2394) * _2395) + _2258;
        _2318 = (((((_2375 * _2148) + _525) * cbLight._m0[_2326].y) * _2394) * _2395) + _2259;
        _2320 = (((((_2375 * _2149) + _526) * cbLight._m0[_2326].z) * _2394) * _2395) + _2260;
    }
    float _2426;
    float _2428;
    float _2430;
    if (_2033)
    {
        _2426 = _2316;
        _2428 = _2318;
        _2430 = _2320;
    }
    else
    {
        uint _2437 = _1847 + 3u;
        uint _2441 = _1847 + 11u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _452) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _399;
        float _2458 = cbLight._m0[_2437].y + _400;
        float _2459 = cbLight._m0[_2437].z + _401;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2437].xyz));
        float _4273 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2471 = dot(vec3(_318, _319, _320), vec3(_2464, _2465, _2466));
        float _4284 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4295 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
        float _2497 = 1.0 - _2456;
        float _2507 = (0.5 / (((_2124 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2497) + _2456) * _2470))) * _2470;
        float _4306 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2426 = (((((_2490 * _2146) + _523) * cbLight._m0[_2441].x) * _2509) * _2510) + _2316;
        _2428 = (((((_2490 * _2148) + _525) * cbLight._m0[_2441].y) * _2509) * _2510) + _2318;
        _2430 = (((((_2490 * _2149) + _526) * cbLight._m0[_2441].z) * _2509) * _2510) + _2320;
    }
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_1845.y == 0u)
    {
        uvec4 _2531 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2532 = _2531.x;
        uint _2543 = uint((float(_2531.y) * floor(float(uint(cbSceneParam._m0[85u].y * _408) / _2532))) + floor(float(uint(cbSceneParam._m0[85u].x * _407) / _2532)));
        float _2553 = (log2(_1623 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2554 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        uint _2557 = uint(isnan(14.0) ? _2554 : (isnan(_2554) ? 14.0 : min(_2554, 14.0)));
        uvec4 _2562 = texelFetch(g_lightClusterGridBuffer, int(((_2557 << 2u) + (_2543 << 6u)) >> 2u));
        uint _2563 = _2562.x;
        uint _2564 = _2531.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2564 >> 4u) & 15u)) + 4294967295u) & _2563) == 0u) || ((_2564 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2820)
                {
                    frontier_phi_68_pred = _2809;
                    frontier_phi_68_pred_1 = _2808;
                    frontier_phi_68_pred_2 = _2807;
                    frontier_phi_68_pred_3 = _2805;
                    frontier_phi_68_pred_4 = _2804;
                    frontier_phi_68_pred_5 = _2806;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2819;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2810 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _1621;
                        float _2995 = _2954.y - _1622;
                        float _2996 = _2954.z - _1623;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_433, _436, _439), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4332 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _1621;
                        float _3030 = (-0.0) - _1622;
                        float _3031 = (-0.0) - _1623;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3045 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _554;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3058 = _3038 + _3003;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_433, _436, _439), vec3(_3036, _3037, _3038));
                        float _4348 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3070 = dot(vec3(_433, _436, _439), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4359 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3014 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3004) + _3079;
                        float _4370 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4381 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3077 * _3077) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2863 = (_3025 * _2973.x) + _2931;
                        _2864 = (_3025 * _2973.y) + _2932;
                        _2865 = (_3025 * _2973.z) + _2933;
                        _2860 = (_3105 * _2990.x) + _2928;
                        _2861 = (_3105 * _2990.y) + _2929;
                        _2862 = (_3105 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_68_pred = _2865;
                    frontier_phi_68_pred_1 = _2864;
                    frontier_phi_68_pred_2 = _2863;
                    frontier_phi_68_pred_3 = _2861;
                    frontier_phi_68_pred_4 = _2860;
                    frontier_phi_68_pred_5 = _2862;
                }
                _2671 = frontier_phi_68_pred;
                _2669 = frontier_phi_68_pred_1;
                _2667 = frontier_phi_68_pred_2;
                _2663 = frontier_phi_68_pred_3;
                _2661 = frontier_phi_68_pred_4;
                _2665 = frontier_phi_68_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2661;
                    _2805 = _2663;
                    _2806 = _2665;
                    _2807 = _2667;
                    _2808 = _2669;
                    _2809 = _2671;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2677) & _2563) == 0u)
        {
            _2772 = _2660;
            _2774 = _2662;
            _2776 = _2664;
            _2778 = _2666;
            _2780 = _2668;
            _2782 = _2670;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
            float _2798 = _2797 * _1621;
            float _2799 = _2797 * _1622;
            float _2800 = _2797 * _1623;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2911 = _2660;
                float _2912 = _2662;
                float _2913 = _2664;
                float _2914 = _2666;
                float _2915 = _2668;
                float _2916 = _2670;
                uint _2917 = _2677;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2927)
                    {
                        frontier_phi_74_pred = _2913;
                        frontier_phi_74_pred_1 = _2912;
                        frontier_phi_74_pred_2 = _2911;
                        frontier_phi_74_pred_3 = _2916;
                        frontier_phi_74_pred_4 = _2915;
                        frontier_phi_74_pred_5 = _2914;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        float _3127 = _2915;
                        float _3128 = _2916;
                        uint _3129 = _2926;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3199;
                        vec4 _3215;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3140 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3186 = (_3140 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3140 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3140 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3140 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_1623, _3250.z, fma(_1622, _3250.y, _3250.x * _1621)) + _3250.w;
                            _3263 = !((fma(_1623, _3231.z, fma(_1622, _3231.y, _3231.x * _1621)) + _3231.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3155.x - _1621;
                                float _3291 = _3155.y - _1622;
                                float _3292 = _3155.z - _1623;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3156 * _3156));
                                float _4392 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3308 = sqrt(_3293) * _3171.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_433, _436, _439))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_1623, _3199.z, fma(_1622, _3199.y, _3199.x * _1621)) + _3199.w) / _3262;
                                float _3322 = (fma(_1623, _3215.z, fma(_1622, _3215.y, _3215.x * _1621)) + _3215.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4408 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _554;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2798;
                                float _3352 = _3298 - _2799;
                                float _3353 = _3299 - _2800;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_433, _436, _439), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4419 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3365 = dot(vec3(_433, _436, _439), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4430 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_433, _436, _439), vec3(_3297, _3298, _3299))) + _3374;
                                float _4441 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4452 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3402 * _3183.z;
                                frontier_phi_80_pred_1 = _3402 * _3183.y;
                                frontier_phi_80_pred_2 = _3402 * _3183.x;
                                frontier_phi_80_pred_3 = _3328 * _3171.z;
                                frontier_phi_80_pred_4 = _3328 * _3171.y;
                                frontier_phi_80_pred_5 = _3328 * _3171.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_80_pred;
                            _3407 = frontier_phi_80_pred_1;
                            _3406 = frontier_phi_80_pred_2;
                            _3411 = frontier_phi_80_pred_3;
                            _3410 = frontier_phi_80_pred_4;
                            _3409 = frontier_phi_80_pred_5;
                            _3113 = _3409 + _3126;
                            _3114 = _3410 + _3127;
                            _3115 = _3411 + _3128;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3112;
                        frontier_phi_74_pred_1 = _3111;
                        frontier_phi_74_pred_2 = _3110;
                        frontier_phi_74_pred_3 = _3115;
                        frontier_phi_74_pred_4 = _3114;
                        frontier_phi_74_pred_5 = _3113;
                    }
                    _2777 = frontier_phi_74_pred;
                    _2775 = frontier_phi_74_pred_1;
                    _2773 = frontier_phi_74_pred_2;
                    _2783 = frontier_phi_74_pred_3;
                    _2781 = frontier_phi_74_pred_4;
                    _2779 = frontier_phi_74_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2773;
                        _2912 = _2775;
                        _2913 = _2777;
                        _2914 = _2779;
                        _2915 = _2781;
                        _2916 = _2783;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2781;
                frontier_phi_62_63_ladder_1 = _2779;
                frontier_phi_62_63_ladder_2 = _2777;
                frontier_phi_62_63_ladder_3 = _2783;
                frontier_phi_62_63_ladder_4 = _2775;
                frontier_phi_62_63_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_62_63_ladder = _2668;
                frontier_phi_62_63_ladder_1 = _2666;
                frontier_phi_62_63_ladder_2 = _2664;
                frontier_phi_62_63_ladder_3 = _2670;
                frontier_phi_62_63_ladder_4 = _2662;
                frontier_phi_62_63_ladder_5 = _2660;
            }
            _2772 = frontier_phi_62_63_ladder_5;
            _2774 = frontier_phi_62_63_ladder_4;
            _2776 = frontier_phi_62_63_ladder_2;
            _2778 = frontier_phi_62_63_ladder_1;
            _2780 = frontier_phi_62_63_ladder;
            _2782 = frontier_phi_62_63_ladder_3;
        }
        float _2787 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2575 = (_2787 * _2778) + _2088;
        _2577 = (_2787 * _2780) + _2090;
        _2579 = (_2787 * _2782) + _2092;
        _2581 = ((_2772 * _523) * _2787) + _2426;
        _2583 = ((_2774 * _525) * _2787) + _2428;
        _2585 = ((_2776 * _526) * _2787) + _2430;
    }
    else
    {
        _2575 = _2088;
        _2577 = _2090;
        _2579 = _2092;
        _2581 = _2426;
        _2583 = _2428;
        _2585 = _2430;
    }
    vec4 _2591 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4468 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4479 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4490 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2615 = (((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2575 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _538))) + ((_2581 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + (_2591.x * cbMtdParam._m0[3u].x);
    float _2617 = ((_2591.y * cbMtdParam._m0[3u].x) + ((_2583 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2577 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _538)));
    float _2619 = ((_2591.z * cbMtdParam._m0[3u].x) + ((_2585 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2579 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _538)));
    uint _2623 = _465 + 6u;
    float _2631 = _407 / cbSceneParam._m0[86u].x;
    float _2632 = _408 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2686 = _2685 / _341;
        float _2697 = _2686 * _392;
        float _2698 = _393 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2700 = _2686 * _394;
        float _2702 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2698;
        float _2710 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2699 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2835 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2873 = ((abs(_2710 / _2699) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2720 * _2844) - exp2(_2720 * _2845)) * _2833))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2651);
        _2722 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2724 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2726 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2728 = _2884 * _2651;
    }
    else
    {
        _2722 = _2648;
        _2724 = _2649;
        _2726 = _2650;
        _2728 = _2651;
    }
    float _2740 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2741 = _2740 == 3.0;
    float _2742 = log2(_2728);
    float _2749 = exp2(_2742 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)));
    float _2750 = exp2(_2742 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0)));
    float _2751 = exp2(_2742 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)));
    float _2760 = (_2740 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2760 * (_2741 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.y = _2760 * (_2741 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.z = _2760 * (_2741 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.w = cbInstanceData._m0[_2623].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
}


