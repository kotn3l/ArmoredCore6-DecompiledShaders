#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _934;
float _3626;
float _3627;
float _3628;
float _3629;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _248 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _277 = cbMtdParam._m0[10u].y * _268.z;
    float _281 = (_268.x * 2.0) + (-1.0);
    float _283 = (_268.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3638 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    float _293 = fma(_290, _226, fma(_283, _218 * TANGENT.x, (_204 * _196) * _281));
    float _296 = fma(_290, _227, fma(_283, _218 * TANGENT.y, (_204 * _197) * _281));
    float _299 = fma(_290, _228, fma(_283, _218 * TANGENT.z, (_204 * _198) * _281));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3649 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _307 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3671 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3682 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    vec4 _391 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _393 = _391.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _613 = sqrt(((_377 * _377) + (_378 * _378)) + (_379 * _379));
        float _619 = (cbMatDynParam._m0[5u].x * _613) + cbMatDynParam._m0[5u].y;
        float _3693 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _624 = (cbMatDynParam._m0[5u].z * _613) + cbMatDynParam._m0[5u].w;
        float _3704 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) - _620)) + _620) < ((_393 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _408 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _410 = _408.w;
    float _430 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _436 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    vec4 _438 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _449 = (((_438.y - _307) + (_438.w * _307)) * cbMtdParam._m0[3u].x) + _307;
    uint _462 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = _462 + 9u;
    uint _465 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_465].x;
    float _472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_465].y;
    float _473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_465].z;
    float _3715 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    vec4 _477 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _482 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _488 = cbMtdParam._m0[3u].x * _482.x;
    float _501 = (cbMtdParam._m0[3u].x * (((_474 * _410) - _474) + _477.x)) + _474;
    float _502 = (cbMtdParam._m0[3u].x * (((_475 * _410) - _475) + _477.y)) + _475;
    float _503 = (cbMtdParam._m0[3u].x * (((_476 * _410) - _476) + _477.z)) + _476;
    float _504 = 1.0 - _488;
    float _505 = _501 * _504;
    float _506 = _502 * _504;
    float _507 = _503 * _504;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _488;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _488;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _488;
    float _515 = _512 + 0.039999999105930328369140625;
    float _517 = _513 + 0.039999999105930328369140625;
    float _518 = _514 + 0.039999999105930328369140625;
    vec4 _527 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _405, cbSceneParam._m0[86u].y * _406));
    float _530 = _527.x * TEXCOORD_4;
    float _531 = dot(vec3(_304, _305, _306), vec3(_384, _385, _386));
    float _534 = _531 * 2.0;
    float _538 = (_534 * _304) - _384;
    float _539 = (_534 * _305) - _385;
    float _540 = (_534 * _306) - _386;
    float _544 = abs(dot(vec3(_384, _385, _386), vec3(_304, _305, _306)));
    float _3748 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _546 = sqrt(_449);
    float _559 = exp2((_546 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_546 * 3.0));
    float _565 = (1.0 - _559) * ((_546 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _566 = _559 * _546;
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_602, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594));
        float _662 = fma(_602, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594));
        float _666 = fma(_602, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594));
        float _691 = _594 + _304;
        float _692 = _598 + _305;
        float _693 = _602 + _306;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_304, _305, _306), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3796 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_304, _305, _306), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3829 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_304, _305, _306), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3862 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_602, cbModelParam._m0[30u].z, fma(_598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _594));
        float _981 = fma(_602, cbModelParam._m0[31u].z, fma(_598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _594));
        float _985 = fma(_602, cbModelParam._m0[32u].z, fma(_598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _594));
        float _1008 = _594 + _304;
        float _1009 = _598 + _305;
        float _1010 = _602 + _306;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_304, _305, _306), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3925 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_304, _305, _306), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3958 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_304, _305, _306), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3991 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = _934;
        _1256 = _934;
        _1257 = _934;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _947)) + _947;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _538 * 0.5;
    float _1315 = _539 * 0.5;
    float _1316 = _540 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_933, _937, _940, _943));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_935, _938, _941, _944));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_936, _939, _942, _945));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_602, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_602, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_602, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_540, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538));
        float _1446 = fma(_540, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538));
        float _1449 = fma(_540, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1477 = frontier_phi_19_17_ladder;
        }
        float _1653;
        if (_1446 > 0.0)
        {
            _1653 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1653 = frontier_phi_28_24_ladder;
        }
        float _1949;
        if (_1449 > 0.0)
        {
            _1949 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1949 = frontier_phi_40_35_ladder;
        }
        float _1951 = isnan(_1653) ? _1477 : (isnan(_1477) ? _1653 : min(_1477, _1653));
        float _1952 = isnan(_1949) ? _1951 : (isnan(_1951) ? _1949 : min(_1951, _1949));
        float _1956 = (_1952 * _1443) + _1432;
        float _1957 = (_1952 * _1446) + _1436;
        float _1958 = (_1952 * _1449) + _1440;
        float _1959 = _1952 * 9.9999997473787516355514526367188e-05;
        float _1961 = (-1.0) - _1959;
        float _1963 = _1959 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1958 > _1963) || ((_1958 < _1961) || ((_1957 > _1963) || ((_1957 < _1961) || ((_1956 < _1961) || (_1956 > _1963))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2103 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1958, cbModelParam._m0[9u].z, fma(_1957, cbModelParam._m0[9u].y, _1956 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1958, cbModelParam._m0[10u].z, fma(_1957, cbModelParam._m0[10u].y, _1956 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1958, cbModelParam._m0[11u].z, fma(_1957, cbModelParam._m0[11u].y, _1956 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_18_40_ladder = _2103.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2103.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2103.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_18_40_ladder_2;
        _1467 = frontier_phi_18_40_ladder_1;
        _1469 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_538, _539, _540), _1383);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_602, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_602, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_602, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_540, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538));
        float _1545 = fma(_540, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538));
        float _1548 = fma(_540, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538));
        float _1658;
        if (_1542 > 0.0)
        {
            _1658 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1658 = frontier_phi_30_26_ladder;
        }
        float _1976;
        if (_1545 > 0.0)
        {
            _1976 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1976 = frontier_phi_42_37_ladder;
        }
        float _2314;
        if (_1548 > 0.0)
        {
            _2314 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2314 = frontier_phi_52_49_ladder;
        }
        float _2316 = isnan(_1976) ? _1658 : (isnan(_1658) ? _1976 : min(_1658, _1976));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1542) + _1531;
        float _2322 = (_2317 * _1545) + _1535;
        float _2323 = (_2317 * _1548) + _1539;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_27_52_ladder = _2445.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2445.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2445.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_27_52_ladder_2;
        _1569 = frontier_phi_27_52_ladder_1;
        _1571 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_538, _539, _540), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1584 = (((_565 * _515) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_565 * _517) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_565 * _518) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1645 = _1632 / _1644;
    float _1646 = _1636 / _1644;
    float _1647 = _1640 / _1644;
    float _1794;
    float _1795;
    float _1796;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1674 = ((uint(_1647 > cbSceneParam._m0[59u].y) + uint(_1647 > cbSceneParam._m0[59u].x)) + uint(_1647 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1675 = _1674 + 43u;
        uint _1683 = _1674 + 44u;
        uint _1691 = _1674 + 45u;
        uint _1699 = _1674 + 46u;
        float _1710 = fma(_1644, cbSceneParam._m0[_1675].w, fma(_1640, cbSceneParam._m0[_1675].z, fma(_1636, cbSceneParam._m0[_1675].y, _1632 * cbSceneParam._m0[_1675].x)));
        float _1714 = fma(_1644, cbSceneParam._m0[_1683].w, fma(_1640, cbSceneParam._m0[_1683].z, fma(_1636, cbSceneParam._m0[_1683].y, _1632 * cbSceneParam._m0[_1683].x)));
        float _1722 = fma(_1644, cbSceneParam._m0[_1699].w, fma(_1640, cbSceneParam._m0[_1699].z, fma(_1636, cbSceneParam._m0[_1699].y, _1632 * cbSceneParam._m0[_1699].x)));
        float _1727 = cbSceneParam._m0[33u].z * _1722;
        float _1729 = cbSceneParam._m0[33u].w * _1722;
        float _1732 = fma(_1644, cbSceneParam._m0[_1691].w, fma(_1640, cbSceneParam._m0[_1691].z, fma(_1636, cbSceneParam._m0[_1691].y, _1632 * cbSceneParam._m0[_1691].x))) / _1722;
        float _1780 = (cbSceneParam._m0[33u].x - sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647))) * cbSceneParam._m0[33u].y;
        float _4117 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1787 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1727 + _1710) / _1722, (_1729 + _1714) / _1722), _1732), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1729 + _1710) / _1722, (_1714 - _1727) / _1722), _1732), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1710 - _1727) / _1722, (_1714 - _1729) / _1722), _1732), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1710 - _1729) / _1722, (_1727 + _1714) / _1722), _1732), 0.0)).x), vec4(0.25)));
        _1794 = 1.0 - (_1787 * cbSceneParam._m0[34u].x);
        _1795 = 1.0 - (_1787 * cbSceneParam._m0[34u].y);
        _1796 = 1.0 - (_1787 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1794 = 1.0;
        _1795 = 1.0;
        _1796 = 1.0;
    }
    float _1860;
    float _1862;
    float _1864;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1848 = fma(_1644, cbSceneParam._m0[63u].w, fma(_1640, cbSceneParam._m0[63u].z, fma(_1636, cbSceneParam._m0[63u].y, _1632 * cbSceneParam._m0[63u].x)));
        float _1849 = fma(_1644, cbSceneParam._m0[60u].w, fma(_1640, cbSceneParam._m0[60u].z, fma(_1636, cbSceneParam._m0[60u].y, _1632 * cbSceneParam._m0[60u].x))) / _1848;
        float _1850 = fma(_1644, cbSceneParam._m0[61u].w, fma(_1640, cbSceneParam._m0[61u].z, fma(_1636, cbSceneParam._m0[61u].y, _1632 * cbSceneParam._m0[61u].x))) / _1848;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1849 >= cbSceneParam._m0[64u].x) && (_1850 >= cbSceneParam._m0[64u].y)) && (_1849 <= cbSceneParam._m0[64u].z)) && (_1850 <= cbSceneParam._m0[64u].w))
        {
            float _1989 = fma(_1644, cbSceneParam._m0[62u].w, fma(_1640, cbSceneParam._m0[62u].z, fma(_1636, cbSceneParam._m0[62u].y, _1632 * cbSceneParam._m0[62u].x))) / _1848;
            float _1993 = isnan(cbSceneParam._m0[41u].w) ? _1989 : (isnan(_1989) ? cbSceneParam._m0[41u].w : max(_1989, cbSceneParam._m0[41u].w));
            float _2036 = (cbSceneParam._m0[33u].x - sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647))) * cbSceneParam._m0[33u].y;
            float _4133 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
            float _2043 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1849, cbSceneParam._m0[33u].w + _1850), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1849, _1850 - cbSceneParam._m0[33u].z), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1849 - cbSceneParam._m0[33u].z, _1850 - cbSceneParam._m0[33u].w), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1849 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1850), _1993), 0.0)).x), vec4(0.25)));
            float _2047 = 1.0 - (_2043 * cbSceneParam._m0[34u].x);
            float _2048 = 1.0 - (_2043 * cbSceneParam._m0[34u].y);
            float _2049 = 1.0 - (_2043 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2048) ? _1795 : (isnan(_1795) ? _2048 : min(_1795, _2048));
            frontier_phi_39_38_ladder_1 = isnan(_2047) ? _1794 : (isnan(_1794) ? _2047 : min(_1794, _2047));
            frontier_phi_39_38_ladder_2 = isnan(_2049) ? _1796 : (isnan(_1796) ? _2049 : min(_1796, _2049));
        }
        else
        {
            frontier_phi_39_38_ladder = _1795;
            frontier_phi_39_38_ladder_1 = _1794;
            frontier_phi_39_38_ladder_2 = _1796;
        }
        _1860 = frontier_phi_39_38_ladder_1;
        _1862 = frontier_phi_39_38_ladder;
        _1864 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1860 = _1794;
        _1862 = _1795;
        _1864 = _1796;
    }
    uvec4 _1869 = floatBitsToUint(cbInstanceData._m0[_462 + 5u]);
    uint _1871 = _1869.x * 14u;
    uint _1872 = _1871 + 13u;
    float _1879 = _530 + (-1.0);
    float _1884 = (cbLight._m0[_1872].x * _1879) + 1.0;
    float _1885 = (cbLight._m0[_1872].y * _1879) + 1.0;
    float _1886 = (cbLight._m0[_1872].z * _1879) + 1.0;
    float _1887 = (cbLight._m0[_1872].w * _1879) + 1.0;
    uint _1888 = _1871 + 5u;
    float _1894 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1898 = _1871 + 4u;
    float _1908 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1912 = _1871 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_304, _305, _306));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_304, _305, _306));
    float _4169 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _4180 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1888].x * _1894) * _1933) + (((cbLight._m0[_1898].x * _1860) * _1908) * _1931);
    float _1941 = ((_1894 * cbLight._m0[_1888].y) * _1933) + (((cbLight._m0[_1898].y * _1862) * _1908) * _1931);
    float _1942 = ((_1894 * cbLight._m0[_1888].z) * _1933) + (((cbLight._m0[_1898].z * _1864) * _1908) * _1931);
    uvec4 _1946 = floatBitsToUint(cbLight._m0[_1871 + 12u]);
    bool _1948 = _1946.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_1948)
    {
        _2050 = _1940;
        _2052 = _1941;
        _2054 = _1942;
    }
    else
    {
        uint _2058 = _1871 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1871 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4191 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2077 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1940;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1941;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1942;
    }
    bool _2057 = _1946.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2057)
    {
        _2112 = _2050;
        _2114 = _2052;
        _2116 = _2054;
    }
    else
    {
        uint _2285 = _1871 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1871 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4207 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2304 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2112 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2050;
        _2114 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2052;
        _2116 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2054;
    }
    uint _2119 = _1871 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _449) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1871].x + _384;
    float _2135 = cbLight._m0[_1871].y + _385;
    float _2136 = cbLight._m0[_1871].z + _386;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1871].xyz));
    float _4223 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2148 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2149 = dot(vec3(_304, _305, _306), vec3(_2141, _2142, _2143));
    float _4245 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2141, _2142, _2143));
    float _4256 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2170 = 0.959999978542327880859375 - _512;
    float _2172 = 0.959999978542327880859375 - _513;
    float _2173 = 0.959999978542327880859375 - _514;
    float _2180 = 1.0 - _2133;
    float _2191 = (0.5 / (((_2148 * ((_2147 * _2180) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2180) + _2133) * _2147))) * _2147;
    float _4267 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2207 = _1871 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _449) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_1912].x + _384;
    float _2221 = cbLight._m0[_1912].y + _385;
    float _2222 = cbLight._m0[_1912].z + _386;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1912].xyz));
    float _4278 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2234 = dot(vec3(_304, _305, _306), vec3(_2227, _2228, _2229));
    float _4289 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2227, _2228, _2229));
    float _4300 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2260 = 1.0 - _2219;
    float _2270 = (0.5 / (((_2148 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2260) + _2219) * _2233))) * _2233;
    float _4311 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2282 = (((((_2253 * _2170) + _515) * cbLight._m0[_2207].x) * _2272) * _1894) + ((((cbLight._m0[_2119].x * _1860) * ((_2169 * _2170) + _515)) * _2193) * _1908);
    float _2283 = (((((_2253 * _2172) + _517) * cbLight._m0[_2207].y) * _2272) * _1894) + ((((cbLight._m0[_2119].y * _1862) * ((_2169 * _2172) + _517)) * _2193) * _1908);
    float _2284 = (((((_2253 * _2173) + _518) * cbLight._m0[_2207].z) * _2272) * _1894) + ((((cbLight._m0[_2119].z * _1864) * ((_2169 * _2173) + _518)) * _2193) * _1908);
    float _2340;
    float _2342;
    float _2344;
    if (_1948)
    {
        _2340 = _2282;
        _2342 = _2283;
        _2344 = _2284;
    }
    else
    {
        uint _2346 = _1871 + 2u;
        uint _2350 = _1871 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _449) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _384;
        float _2367 = cbLight._m0[_2346].y + _385;
        float _2368 = cbLight._m0[_2346].z + _386;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2346].xyz));
        float _4322 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2380 = dot(vec3(_304, _305, _306), vec3(_2373, _2374, _2375));
        float _4333 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4344 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2148 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2406) + _2365) * _2379))) * _2379;
        float _4355 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2340 = (((((_2399 * _2170) + _515) * cbLight._m0[_2350].x) * _2418) * _2419) + _2282;
        _2342 = (((((_2399 * _2172) + _517) * cbLight._m0[_2350].y) * _2418) * _2419) + _2283;
        _2344 = (((((_2399 * _2173) + _518) * cbLight._m0[_2350].z) * _2418) * _2419) + _2284;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2057)
    {
        _2450 = _2340;
        _2452 = _2342;
        _2454 = _2344;
    }
    else
    {
        uint _2461 = _1871 + 3u;
        uint _2465 = _1871 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _449) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _384;
        float _2482 = cbLight._m0[_2461].y + _385;
        float _2483 = cbLight._m0[_2461].z + _386;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2461].xyz));
        float _4371 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2495 = dot(vec3(_304, _305, _306), vec3(_2488, _2489, _2490));
        float _4382 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4393 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2148 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2521) + _2480) * _2494))) * _2494;
        float _4404 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2450 = (((((_2514 * _2170) + _515) * cbLight._m0[_2465].x) * _2533) * _2534) + _2340;
        _2452 = (((((_2514 * _2172) + _517) * cbLight._m0[_2465].y) * _2533) * _2534) + _2342;
        _2454 = (((((_2514 * _2173) + _518) * cbLight._m0[_2465].z) * _2533) * _2534) + _2344;
    }
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    if (_1869.y == 0u)
    {
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _2556)));
        float _2577 = (log2(_1647 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
        }
        else
        {
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2852)
                {
                    frontier_phi_73_pred = _2841;
                    frontier_phi_73_pred_1 = _2840;
                    frontier_phi_73_pred_2 = _2839;
                    frontier_phi_73_pred_3 = _2838;
                    frontier_phi_73_pred_4 = _2837;
                    frontier_phi_73_pred_5 = _2836;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _1645;
                        float _3048 = _3007.y - _1646;
                        float _3049 = _3007.z - _1647;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_430, _433, _436), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4430 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _1645;
                        float _3083 = (-0.0) - _1646;
                        float _3084 = (-0.0) - _1647;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3098 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3099 = 1.0 - _546;
                        float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                        float _3107 = _3106 * _3106;
                        float _3108 = _3107 * _3107;
                        float _3109 = _3089 + _3054;
                        float _3110 = _3090 + _3055;
                        float _3111 = _3091 + _3056;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3119 = dot(vec3(_430, _433, _436), vec3(_3089, _3090, _3091));
                        float _4446 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3123 = dot(vec3(_430, _433, _436), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                        float _4457 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                        float _3131 = _3067 * _3107;
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3057) + _3132;
                        float _4468 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3137 = 1.0 - _3107;
                        float _3147 = (0.5 / (((_3136 * ((_3122 * _3137) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3107) * _3122))) * _3136;
                        float _4479 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3158 = (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3130 * _3130) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3158 * _3043.x) + _2981;
                        _2909 = (_3158 * _3043.y) + _2982;
                        _2910 = (_3158 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_73_pred = _2913;
                    frontier_phi_73_pred_1 = _2912;
                    frontier_phi_73_pred_2 = _2911;
                    frontier_phi_73_pred_3 = _2910;
                    frontier_phi_73_pred_4 = _2909;
                    frontier_phi_73_pred_5 = _2908;
                }
                _2695 = frontier_phi_73_pred;
                _2693 = frontier_phi_73_pred_1;
                _2691 = frontier_phi_73_pred_2;
                _2689 = frontier_phi_73_pred_3;
                _2687 = frontier_phi_73_pred_4;
                _2685 = frontier_phi_73_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2685;
                    _2837 = _2687;
                    _2838 = _2689;
                    _2839 = _2691;
                    _2840 = _2693;
                    _2841 = _2695;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
        }
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.z;
        uint _2701 = (_2699 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2701) & _2587) == 0u)
        {
            _2804 = _2684;
            _2806 = _2686;
            _2808 = _2688;
            _2810 = _2690;
            _2812 = _2692;
            _2814 = _2694;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
            float _2830 = _2829 * _1645;
            float _2831 = _2829 * _1646;
            float _2832 = _2829 * _1647;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2701 < ((_2699 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2684;
                float _2965 = _2686;
                float _2966 = _2688;
                float _2967 = _2690;
                float _2968 = _2692;
                float _2969 = _2694;
                uint _2970 = _2701;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2980)
                    {
                        frontier_phi_84_pred = _2968;
                        frontier_phi_84_pred_1 = _2967;
                        frontier_phi_84_pred_2 = _2966;
                        frontier_phi_84_pred_3 = _2965;
                        frontier_phi_84_pred_4 = _2964;
                        frontier_phi_84_pred_5 = _2969;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        uint _3191 = _2979;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3261;
                        vec4 _3277;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3202 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3248 = (_3202 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3202 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3280 = (_3202 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3202 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_1647, _3312.z, fma(_1646, _3312.y, _3312.x * _1645)) + _3312.w;
                            _3325 = !((fma(_1647, _3293.z, fma(_1646, _3293.y, _3293.x * _1645)) + _3293.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3217.x - _1645;
                                float _3353 = _3217.y - _1646;
                                float _3354 = _3217.z - _1647;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3218 * _3218));
                                float _4490 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3370 = sqrt(_3355) * _3233.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_430, _433, _436))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_1647, _3261.z, fma(_1646, _3261.y, _3261.x * _1645)) + _3261.w) / _3324;
                                float _3384 = (fma(_1647, _3277.z, fma(_1646, _3277.y, _3277.x * _1645)) + _3277.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4506 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _546;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2830;
                                float _3414 = _3360 - _2831;
                                float _3415 = _3361 - _2832;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4517 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3427 = dot(vec3(_430, _433, _436), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4528 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_430, _433, _436), vec3(_3359, _3360, _3361))) + _3436;
                                float _4539 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4550 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3390 * _3233.y;
                                frontier_phi_90_pred_1 = _3390 * _3233.x;
                                frontier_phi_90_pred_2 = _3464 * _3245.z;
                                frontier_phi_90_pred_3 = _3464 * _3245.y;
                                frontier_phi_90_pred_4 = _3464 * _3245.x;
                                frontier_phi_90_pred_5 = _3390 * _3233.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_90_pred;
                            _3471 = frontier_phi_90_pred_1;
                            _3470 = frontier_phi_90_pred_2;
                            _3469 = frontier_phi_90_pred_3;
                            _3468 = frontier_phi_90_pred_4;
                            _3473 = frontier_phi_90_pred_5;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            _3177 = _3473 + _3190;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            _3174 = _3470 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3176;
                        frontier_phi_84_pred_1 = _3175;
                        frontier_phi_84_pred_2 = _3174;
                        frontier_phi_84_pred_3 = _3173;
                        frontier_phi_84_pred_4 = _3172;
                        frontier_phi_84_pred_5 = _3177;
                    }
                    _2813 = frontier_phi_84_pred;
                    _2811 = frontier_phi_84_pred_1;
                    _2809 = frontier_phi_84_pred_2;
                    _2807 = frontier_phi_84_pred_3;
                    _2805 = frontier_phi_84_pred_4;
                    _2815 = frontier_phi_84_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2815;
                frontier_phi_65_66_ladder_1 = _2811;
                frontier_phi_65_66_ladder_2 = _2813;
                frontier_phi_65_66_ladder_3 = _2807;
                frontier_phi_65_66_ladder_4 = _2805;
                frontier_phi_65_66_ladder_5 = _2809;
            }
            else
            {
                frontier_phi_65_66_ladder = _2694;
                frontier_phi_65_66_ladder_1 = _2690;
                frontier_phi_65_66_ladder_2 = _2692;
                frontier_phi_65_66_ladder_3 = _2686;
                frontier_phi_65_66_ladder_4 = _2684;
                frontier_phi_65_66_ladder_5 = _2688;
            }
            _2804 = frontier_phi_65_66_ladder_4;
            _2806 = frontier_phi_65_66_ladder_3;
            _2808 = frontier_phi_65_66_ladder_5;
            _2810 = frontier_phi_65_66_ladder_1;
            _2812 = frontier_phi_65_66_ladder_2;
            _2814 = frontier_phi_65_66_ladder;
        }
        float _2819 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        _2599 = (_2819 * _2810) + _2112;
        _2601 = (_2819 * _2812) + _2114;
        _2603 = (_2819 * _2814) + _2116;
        _2605 = ((_2804 * _515) * _2819) + _2450;
        _2607 = ((_2806 * _517) * _2819) + _2452;
        _2609 = ((_2808 * _518) * _2819) + _2454;
    }
    else
    {
        _2599 = _2112;
        _2601 = _2114;
        _2603 = _2116;
        _2605 = _2450;
        _2607 = _2452;
        _2609 = _2454;
    }
    vec4 _2615 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4566 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4577 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4588 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2639 = (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2599 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _530))) + ((_2605 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + (_2615.x * cbMtdParam._m0[3u].x);
    float _2641 = ((_2615.y * cbMtdParam._m0[3u].x) + ((_2607 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2601 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _530)));
    float _2643 = ((_2615.z * cbMtdParam._m0[3u].x) + ((_2609 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2603 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _530)));
    float _2644 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2645 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2646 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    uint _2647 = _462 + 6u;
    float _2655 = _405 / cbSceneParam._m0[86u].x;
    float _2656 = _406 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2709 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2710 = _2709 / _326;
        float _2721 = _2710 * _377;
        float _2722 = _378 * _2710;
        float _2723 = (-0.0) - _2722;
        float _2724 = _2710 * _379;
        float _2726 = (cbSceneParam._m0[77u].w * _2723) / _2709;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2722;
        float _2734 = sqrt(((_2721 * _2721) + (_2722 * _2722)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2709)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2723 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2867 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2734 / _2723) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2744 * _2876) - exp2(_2744 * _2877)) * _2865))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2675);
        _2746 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2748 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2750 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2752 = _2932 * _2675;
    }
    else
    {
        _2746 = _2672;
        _2748 = _2673;
        _2750 = _2674;
        _2752 = _2675;
    }
    bool _2959;
    vec4 _2762;
    vec4 _2784;
    float _2786;
    float _2790;
    float _2791;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        _2762 = cbMatDynParam._m0[0u];
        float _2764 = roundEven(_2762.y);
        bool _2765 = _2764 == 3.0;
        float _2766 = log2(_2752);
        float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * _2644;
        float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * _2645;
        float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * _2646;
        float _2782 = _393 + (-0.5);
        _2784 = cbMtdParam._m0[1u];
        _2786 = _2784.y * _2782;
        float _2789 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2790 = _2789 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
        _2791 = _2789 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
        _2792 = _2789 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
        _2793 = _2782 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_462 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _464 + uint(_2762.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2786 + 1.0) < _2784.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3163;
    if (_2959)
    {
        discard_state = true;
        _3163 = 0.0;
    }
    else
    {
        _3163 = cbInstanceData._m0[_2647].w;
    }
    SV_Target.x = _2790;
    SV_Target.y = _2791;
    SV_Target.z = _2792;
    SV_Target.w = _3163;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
    discard_exit();
}


