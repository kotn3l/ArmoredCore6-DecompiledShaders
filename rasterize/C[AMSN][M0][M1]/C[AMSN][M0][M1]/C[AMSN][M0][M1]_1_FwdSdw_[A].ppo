#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _936;
float _3628;
float _3629;
float _3630;
float _3631;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _240 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _253 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_240 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _240) + cbTextureTilingScale._m0[1u].w));
    float _279 = cbMtdParam._m0[10u].y * _273.z;
    float _283 = (_273.x * 2.0) + (-1.0);
    float _285 = (_273.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3640 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))));
    float _295 = fma(_292, _226, fma(_285, _218 * TANGENT.x, (_204 * _196) * _283));
    float _298 = fma(_292, _227, fma(_285, _218 * TANGENT.y, (_204 * _197) * _283));
    float _301 = fma(_292, _228, fma(_285, _218 * TANGENT.z, (_204 * _198) * _283));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3651 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _309 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3673 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3684 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    vec4 _393 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _395 = _393.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _615 = sqrt(((_379 * _379) + (_380 * _380)) + (_381 * _381));
        float _621 = (cbMatDynParam._m0[5u].x * _615) + cbMatDynParam._m0[5u].y;
        float _3695 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _626 = (cbMatDynParam._m0[5u].z * _615) + cbMatDynParam._m0[5u].w;
        float _3706 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) - _622)) + _622) < ((_395 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _407 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _408 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _410 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _412 = _410.w;
    float _432 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _435 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _438 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    vec4 _440 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _451 = (((_440.y - _309) + (_440.w * _309)) * cbMtdParam._m0[3u].x) + _309;
    uint _464 = uint(roundEven(NORMAL.w)) * 13u;
    uint _466 = _464 + 9u;
    uint _467 = _466 + uint(cbMatDynParam._m0[0u].w);
    float _473 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_467].x;
    float _474 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_467].y;
    float _475 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_467].z;
    float _3717 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    vec4 _479 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _484 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _490 = cbMtdParam._m0[3u].x * _484.x;
    float _503 = (cbMtdParam._m0[3u].x * (((_476 * _412) - _476) + _479.x)) + _476;
    float _504 = (cbMtdParam._m0[3u].x * (((_477 * _412) - _477) + _479.y)) + _477;
    float _505 = (cbMtdParam._m0[3u].x * (((_478 * _412) - _478) + _479.z)) + _478;
    float _506 = 1.0 - _490;
    float _507 = _503 * _506;
    float _508 = _504 * _506;
    float _509 = _505 * _506;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _490;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _490;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _490;
    float _517 = _514 + 0.039999999105930328369140625;
    float _519 = _515 + 0.039999999105930328369140625;
    float _520 = _516 + 0.039999999105930328369140625;
    vec4 _529 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _407, cbSceneParam._m0[86u].y * _408));
    float _532 = _529.x * TEXCOORD_4;
    float _533 = dot(vec3(_306, _307, _308), vec3(_386, _387, _388));
    float _536 = _533 * 2.0;
    float _540 = (_536 * _306) - _386;
    float _541 = (_536 * _307) - _387;
    float _542 = (_536 * _308) - _388;
    float _546 = abs(dot(vec3(_386, _387, _388), vec3(_306, _307, _308)));
    float _3750 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _548 = sqrt(_451);
    float _561 = exp2((_548 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_548 * 3.0));
    float _567 = (1.0 - _561) * ((_548 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _568 = _561 * _548;
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _664 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _668 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _693 = _596 + _306;
        float _694 = _600 + _307;
        float _695 = _604 + _308;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _660;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _664;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _668;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_306, _307, _308), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3798 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_306, _307, _308), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3831 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_306, _307, _308), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3864 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _979 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _983 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _987 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _1010 = _596 + _306;
        float _1011 = _600 + _307;
        float _1012 = _604 + _308;
        float _1022 = fma(_1012, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010)) - _979;
        float _1023 = fma(_1012, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010)) - _983;
        float _1024 = fma(_1012, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010)) - _987;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_979 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_983 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[35u].z) + ((((((_987 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1078 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1045.x + (-0.5));
        float _1080 = _1078 * (_1045.y + (-0.5));
        float _1081 = _1078 * (_1045.z + (-0.5));
        float _1088 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1052.x + (-0.5));
        float _1090 = _1088 * (_1052.y + (-0.5));
        float _1091 = _1088 * (_1052.z + (-0.5));
        float _1098 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1059.x + (-0.5));
        float _1100 = _1098 * (_1059.y + (-0.5));
        float _1101 = _1098 * (_1059.z + (-0.5));
        float _1108 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1066.x + (-0.5));
        float _1110 = _1108 * (_1066.y + (-0.5));
        float _1111 = _1108 * (_1066.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_306, _307, _308), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3927 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1142 + 1.0))) + _1147) * _1112;
        float _1157 = _1080 * 0.5;
        float _1158 = _1090 * 0.5;
        float _1159 = _1100 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_306, _307, _308), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3960 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1184 + 1.0))) + _1189) * _1113;
        float _1199 = _1081 * 0.5;
        float _1200 = _1091 * 0.5;
        float _1201 = _1101 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_306, _307, _308), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3993 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1226 + 1.0))) + _1231) * _1114;
        _1248 = _1081;
        _1249 = _1080;
        _1250 = _1079;
        _1251 = _1091;
        _1252 = _1090;
        _1253 = _1089;
        _1254 = _1101;
        _1255 = _1100;
        _1256 = _1099;
        _1257 = _1114;
        _1258 = _1113;
        _1259 = _1112;
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = _936;
        _1257 = _936;
        _1258 = _936;
        _1259 = _936;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _949)) + _949;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1295 = fma(_1274, cbSceneParam._m0[89u].z, fma(_1273, cbSceneParam._m0[89u].y, _1272 * cbSceneParam._m0[89u].x));
    float _1298 = fma(_1274, cbSceneParam._m0[90u].z, fma(_1273, cbSceneParam._m0[90u].y, _1272 * cbSceneParam._m0[90u].x));
    float _1301 = fma(_1274, cbSceneParam._m0[91u].z, fma(_1273, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1272));
    float _1316 = _540 * 0.5;
    float _1317 = _541 * 0.5;
    float _1318 = _542 * 0.5;
    float _1319 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1322 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1325 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1359;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1332 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_935, _939, _942, _945));
        float _1336 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_937, _940, _943, _946));
        float _1340 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_938, _941, _944, _947));
        float _1347 = dot(vec4(cbModelParam._m0[39u]), vec4(_1316, _1317, _1318, 1.0));
        _1359 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1359 = 1.0;
    }
    float _1370;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1361 = dot(vec4(cbModelParam._m0[40u]), vec4(_1316, _1317, _1318, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1374 = (_1370 * cbModelParam._m0[1u].x) + (_1359 * (1.0 - cbModelParam._m0[1u].x));
    float _1384 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1384 : min(cbModelParam._m0[25u].z, _1384));
    float _1467;
    float _1469;
    float _1471;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1434 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1438 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1442 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1445 = fma(_542, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540));
        float _1448 = fma(_542, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540));
        float _1451 = fma(_542, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540));
        float _1479;
        if (_1445 > 0.0)
        {
            _1479 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1479 = frontier_phi_19_17_ladder;
        }
        float _1655;
        if (_1448 > 0.0)
        {
            _1655 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1655 = frontier_phi_28_24_ladder;
        }
        float _1951;
        if (_1451 > 0.0)
        {
            _1951 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1951 = frontier_phi_40_35_ladder;
        }
        float _1953 = isnan(_1655) ? _1479 : (isnan(_1479) ? _1655 : min(_1479, _1655));
        float _1954 = isnan(_1951) ? _1953 : (isnan(_1953) ? _1951 : min(_1953, _1951));
        float _1958 = (_1954 * _1445) + _1434;
        float _1959 = (_1954 * _1448) + _1438;
        float _1960 = (_1954 * _1451) + _1442;
        float _1961 = _1954 * 9.9999997473787516355514526367188e-05;
        float _1963 = (-1.0) - _1961;
        float _1965 = _1961 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1960 > _1965) || ((_1960 < _1963) || ((_1959 > _1965) || ((_1959 < _1963) || ((_1958 < _1963) || (_1958 > _1965))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1960, cbModelParam._m0[9u].z, fma(_1959, cbModelParam._m0[9u].y, _1958 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1960, cbModelParam._m0[10u].z, fma(_1959, cbModelParam._m0[10u].y, _1958 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1960, cbModelParam._m0[11u].z, fma(_1959, cbModelParam._m0[11u].y, _1958 * cbModelParam._m0[11u].x))), _1385);
            frontier_phi_18_40_ladder = _2105.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2105.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2105.x * cbModelParam._m0[1u].y;
        }
        _1467 = frontier_phi_18_40_ladder_2;
        _1469 = frontier_phi_18_40_ladder_1;
        _1471 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_540, _541, _542), _1385);
        _1467 = _1455.x * cbModelParam._m0[1u].y;
        _1469 = _1455.y * cbModelParam._m0[1u].y;
        _1471 = _1455.z * cbModelParam._m0[1u].y;
    }
    float _1475 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1475 : min(cbModelParam._m0[25u].w, _1475));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1533 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1537 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1541 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1544 = fma(_542, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540));
        float _1547 = fma(_542, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540));
        float _1550 = fma(_542, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540));
        float _1660;
        if (_1544 > 0.0)
        {
            _1660 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1660 = frontier_phi_30_26_ladder;
        }
        float _1978;
        if (_1547 > 0.0)
        {
            _1978 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1978 = frontier_phi_42_37_ladder;
        }
        float _2316;
        if (_1550 > 0.0)
        {
            _2316 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2316 = frontier_phi_52_49_ladder;
        }
        float _2318 = isnan(_1978) ? _1660 : (isnan(_1660) ? _1978 : min(_1660, _1978));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1544) + _1533;
        float _2324 = (_2319 * _1547) + _1537;
        float _2325 = (_2319 * _1550) + _1541;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1476);
            frontier_phi_27_52_ladder = _2447.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2447.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2447.x * cbModelParam._m0[1u].z;
        }
        _1569 = frontier_phi_27_52_ladder_2;
        _1571 = frontier_phi_27_52_ladder_1;
        _1573 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_540, _541, _542), _1476);
        _1569 = _1553.x * cbModelParam._m0[1u].z;
        _1571 = _1553.y * cbModelParam._m0[1u].z;
        _1573 = _1553.z * cbModelParam._m0[1u].z;
    }
    float _1586 = (((_567 * _517) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_567 * _519) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1590 = (((_567 * _520) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1573 - _1471)) + _1471);
    float _1593 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, _1586 * cbSceneParam._m0[91u].x));
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1642 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1647 = _1634 / _1646;
    float _1648 = _1638 / _1646;
    float _1649 = _1642 / _1646;
    float _1796;
    float _1797;
    float _1798;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1676 = ((uint(_1649 > cbSceneParam._m0[59u].y) + uint(_1649 > cbSceneParam._m0[59u].x)) + uint(_1649 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1677 = _1676 + 43u;
        uint _1685 = _1676 + 44u;
        uint _1693 = _1676 + 45u;
        uint _1701 = _1676 + 46u;
        float _1712 = fma(_1646, cbSceneParam._m0[_1677].w, fma(_1642, cbSceneParam._m0[_1677].z, fma(_1638, cbSceneParam._m0[_1677].y, _1634 * cbSceneParam._m0[_1677].x)));
        float _1716 = fma(_1646, cbSceneParam._m0[_1685].w, fma(_1642, cbSceneParam._m0[_1685].z, fma(_1638, cbSceneParam._m0[_1685].y, _1634 * cbSceneParam._m0[_1685].x)));
        float _1724 = fma(_1646, cbSceneParam._m0[_1701].w, fma(_1642, cbSceneParam._m0[_1701].z, fma(_1638, cbSceneParam._m0[_1701].y, _1634 * cbSceneParam._m0[_1701].x)));
        float _1729 = cbSceneParam._m0[33u].z * _1724;
        float _1731 = cbSceneParam._m0[33u].w * _1724;
        float _1734 = fma(_1646, cbSceneParam._m0[_1693].w, fma(_1642, cbSceneParam._m0[_1693].z, fma(_1638, cbSceneParam._m0[_1693].y, _1634 * cbSceneParam._m0[_1693].x))) / _1724;
        float _1782 = (cbSceneParam._m0[33u].x - sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649))) * cbSceneParam._m0[33u].y;
        float _4119 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1789 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1729 + _1712) / _1724, (_1731 + _1716) / _1724), _1734), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1731 + _1712) / _1724, (_1716 - _1729) / _1724), _1734), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 - _1729) / _1724, (_1716 - _1731) / _1724), _1734), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 - _1731) / _1724, (_1729 + _1716) / _1724), _1734), 0.0)).x), vec4(0.25)));
        _1796 = 1.0 - (_1789 * cbSceneParam._m0[34u].x);
        _1797 = 1.0 - (_1789 * cbSceneParam._m0[34u].y);
        _1798 = 1.0 - (_1789 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1796 = 1.0;
        _1797 = 1.0;
        _1798 = 1.0;
    }
    float _1862;
    float _1864;
    float _1866;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1850 = fma(_1646, cbSceneParam._m0[63u].w, fma(_1642, cbSceneParam._m0[63u].z, fma(_1638, cbSceneParam._m0[63u].y, _1634 * cbSceneParam._m0[63u].x)));
        float _1851 = fma(_1646, cbSceneParam._m0[60u].w, fma(_1642, cbSceneParam._m0[60u].z, fma(_1638, cbSceneParam._m0[60u].y, _1634 * cbSceneParam._m0[60u].x))) / _1850;
        float _1852 = fma(_1646, cbSceneParam._m0[61u].w, fma(_1642, cbSceneParam._m0[61u].z, fma(_1638, cbSceneParam._m0[61u].y, _1634 * cbSceneParam._m0[61u].x))) / _1850;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1851 >= cbSceneParam._m0[64u].x) && (_1852 >= cbSceneParam._m0[64u].y)) && (_1851 <= cbSceneParam._m0[64u].z)) && (_1852 <= cbSceneParam._m0[64u].w))
        {
            float _1991 = fma(_1646, cbSceneParam._m0[62u].w, fma(_1642, cbSceneParam._m0[62u].z, fma(_1638, cbSceneParam._m0[62u].y, _1634 * cbSceneParam._m0[62u].x))) / _1850;
            float _1995 = isnan(cbSceneParam._m0[41u].w) ? _1991 : (isnan(_1991) ? cbSceneParam._m0[41u].w : max(_1991, cbSceneParam._m0[41u].w));
            float _2038 = (cbSceneParam._m0[33u].x - sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649))) * cbSceneParam._m0[33u].y;
            float _4135 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
            float _2045 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1851, cbSceneParam._m0[33u].w + _1852), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1851, _1852 - cbSceneParam._m0[33u].z), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1851 - cbSceneParam._m0[33u].z, _1852 - cbSceneParam._m0[33u].w), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1851 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1852), _1995), 0.0)).x), vec4(0.25)));
            float _2049 = 1.0 - (_2045 * cbSceneParam._m0[34u].x);
            float _2050 = 1.0 - (_2045 * cbSceneParam._m0[34u].y);
            float _2051 = 1.0 - (_2045 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2050) ? _1797 : (isnan(_1797) ? _2050 : min(_1797, _2050));
            frontier_phi_39_38_ladder_1 = isnan(_2049) ? _1796 : (isnan(_1796) ? _2049 : min(_1796, _2049));
            frontier_phi_39_38_ladder_2 = isnan(_2051) ? _1798 : (isnan(_1798) ? _2051 : min(_1798, _2051));
        }
        else
        {
            frontier_phi_39_38_ladder = _1797;
            frontier_phi_39_38_ladder_1 = _1796;
            frontier_phi_39_38_ladder_2 = _1798;
        }
        _1862 = frontier_phi_39_38_ladder_1;
        _1864 = frontier_phi_39_38_ladder;
        _1866 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1862 = _1796;
        _1864 = _1797;
        _1866 = _1798;
    }
    uvec4 _1871 = floatBitsToUint(cbInstanceData._m0[_464 + 5u]);
    uint _1873 = _1871.x * 14u;
    uint _1874 = _1873 + 13u;
    float _1881 = _532 + (-1.0);
    float _1886 = (cbLight._m0[_1874].x * _1881) + 1.0;
    float _1887 = (cbLight._m0[_1874].y * _1881) + 1.0;
    float _1888 = (cbLight._m0[_1874].z * _1881) + 1.0;
    float _1889 = (cbLight._m0[_1874].w * _1881) + 1.0;
    uint _1890 = _1873 + 5u;
    float _1896 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1900 = _1873 + 4u;
    float _1910 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1914 = _1873 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_306, _307, _308));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_306, _307, _308));
    float _4171 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _4182 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1890].x * _1896) * _1935) + (((cbLight._m0[_1900].x * _1862) * _1910) * _1933);
    float _1943 = ((_1896 * cbLight._m0[_1890].y) * _1935) + (((cbLight._m0[_1900].y * _1864) * _1910) * _1933);
    float _1944 = ((_1896 * cbLight._m0[_1890].z) * _1935) + (((cbLight._m0[_1900].z * _1866) * _1910) * _1933);
    uvec4 _1948 = floatBitsToUint(cbLight._m0[_1873 + 12u]);
    bool _1950 = _1948.x == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_1950)
    {
        _2052 = _1942;
        _2054 = _1943;
        _2056 = _1944;
    }
    else
    {
        uint _2060 = _1873 + 6u;
        float _2076 = (dot(vec3(cbLight._m0[_1873 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4193 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2079 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2052 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1942;
        _2054 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1943;
        _2056 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1944;
    }
    bool _2059 = _1948.y == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2059)
    {
        _2114 = _2052;
        _2116 = _2054;
        _2118 = _2056;
    }
    else
    {
        uint _2287 = _1873 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1873 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4209 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2306 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2114 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2052;
        _2116 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2054;
        _2118 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2056;
    }
    uint _2121 = _1873 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _451) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1873].x + _386;
    float _2137 = cbLight._m0[_1873].y + _387;
    float _2138 = cbLight._m0[_1873].z + _388;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1873].xyz));
    float _4225 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _2150 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2151 = dot(vec3(_306, _307, _308), vec3(_2143, _2144, _2145));
    float _4247 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2143, _2144, _2145));
    float _4258 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2172 = 0.959999978542327880859375 - _514;
    float _2174 = 0.959999978542327880859375 - _515;
    float _2175 = 0.959999978542327880859375 - _516;
    float _2182 = 1.0 - _2135;
    float _2193 = (0.5 / (((_2150 * ((_2149 * _2182) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2182) + _2135) * _2149))) * _2149;
    float _4269 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    uint _2209 = _1873 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _451) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_1914].x + _386;
    float _2223 = cbLight._m0[_1914].y + _387;
    float _2224 = cbLight._m0[_1914].z + _388;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1914].xyz));
    float _4280 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2236 = dot(vec3(_306, _307, _308), vec3(_2229, _2230, _2231));
    float _4291 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2229, _2230, _2231));
    float _4302 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2262 = 1.0 - _2221;
    float _2272 = (0.5 / (((_2150 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2262) + _2221) * _2235))) * _2235;
    float _4313 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2284 = (((((_2255 * _2172) + _517) * cbLight._m0[_2209].x) * _2274) * _1896) + ((((cbLight._m0[_2121].x * _1862) * ((_2171 * _2172) + _517)) * _2195) * _1910);
    float _2285 = (((((_2255 * _2174) + _519) * cbLight._m0[_2209].y) * _2274) * _1896) + ((((cbLight._m0[_2121].y * _1864) * ((_2171 * _2174) + _519)) * _2195) * _1910);
    float _2286 = (((((_2255 * _2175) + _520) * cbLight._m0[_2209].z) * _2274) * _1896) + ((((cbLight._m0[_2121].z * _1866) * ((_2171 * _2175) + _520)) * _2195) * _1910);
    float _2342;
    float _2344;
    float _2346;
    if (_1950)
    {
        _2342 = _2284;
        _2344 = _2285;
        _2346 = _2286;
    }
    else
    {
        uint _2348 = _1873 + 2u;
        uint _2352 = _1873 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _451) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _386;
        float _2369 = cbLight._m0[_2348].y + _387;
        float _2370 = cbLight._m0[_2348].z + _388;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2348].xyz));
        float _4324 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2382 = dot(vec3(_306, _307, _308), vec3(_2375, _2376, _2377));
        float _4335 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4346 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2150 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2408) + _2367) * _2381))) * _2381;
        float _4357 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2342 = (((((_2401 * _2172) + _517) * cbLight._m0[_2352].x) * _2420) * _2421) + _2284;
        _2344 = (((((_2401 * _2174) + _519) * cbLight._m0[_2352].y) * _2420) * _2421) + _2285;
        _2346 = (((((_2401 * _2175) + _520) * cbLight._m0[_2352].z) * _2420) * _2421) + _2286;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2059)
    {
        _2452 = _2342;
        _2454 = _2344;
        _2456 = _2346;
    }
    else
    {
        uint _2463 = _1873 + 3u;
        uint _2467 = _1873 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _451) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _386;
        float _2484 = cbLight._m0[_2463].y + _387;
        float _2485 = cbLight._m0[_2463].z + _388;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2463].xyz));
        float _4373 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2497 = dot(vec3(_306, _307, _308), vec3(_2490, _2491, _2492));
        float _4384 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4395 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2150 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2523) + _2482) * _2496))) * _2496;
        float _4406 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2452 = (((((_2516 * _2172) + _517) * cbLight._m0[_2467].x) * _2535) * _2536) + _2342;
        _2454 = (((((_2516 * _2174) + _519) * cbLight._m0[_2467].y) * _2535) * _2536) + _2344;
        _2456 = (((((_2516 * _2175) + _520) * cbLight._m0[_2467].z) * _2535) * _2536) + _2346;
    }
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1871.y == 0u)
    {
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _408) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _407) / _2558)));
        float _2579 = (log2(_1649 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2854)
                {
                    frontier_phi_73_pred = _2843;
                    frontier_phi_73_pred_1 = _2842;
                    frontier_phi_73_pred_2 = _2841;
                    frontier_phi_73_pred_3 = _2840;
                    frontier_phi_73_pred_4 = _2839;
                    frontier_phi_73_pred_5 = _2838;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2853;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2844 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        float _3049 = _3009.x - _1647;
                        float _3050 = _3009.y - _1648;
                        float _3051 = _3009.z - _1649;
                        float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                        float _3055 = inversesqrt(_3052);
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3059 = dot(vec3(_432, _435, _438), vec3(_3056, _3057, _3058));
                        float _3064 = 1.0 - (_3052 * _3009.w);
                        float _4432 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3066 = sqrt(_3052) * _3028.w;
                        float _3069 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _3059) + _3070;
                        float _3076 = _3066 * _3066;
                        float _3080 = ((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3065) / ((_3076 * 0.699999988079071044921875) + 1.0);
                        float _3084 = (-0.0) - _1647;
                        float _3085 = (-0.0) - _1648;
                        float _3086 = (-0.0) - _1649;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3100 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _548;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3091 + _3056;
                        float _3112 = _3092 + _3057;
                        float _3113 = _3093 + _3058;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_432, _435, _438), vec3(_3091, _3092, _3093));
                        float _4448 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3125 = dot(vec3(_432, _435, _438), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4459 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3069 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3059) + _3134;
                        float _4470 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4481 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3132 * _3132) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125))) * _3065;
                        _2913 = (_3080 * _3028.x) + _2986;
                        _2914 = (_3080 * _3028.y) + _2987;
                        _2915 = (_3080 * _3028.z) + _2988;
                        _2910 = (_3160 * _3045.x) + _2983;
                        _2911 = (_3160 * _3045.y) + _2984;
                        _2912 = (_3160 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_73_pred = _2915;
                    frontier_phi_73_pred_1 = _2914;
                    frontier_phi_73_pred_2 = _2913;
                    frontier_phi_73_pred_3 = _2912;
                    frontier_phi_73_pred_4 = _2911;
                    frontier_phi_73_pred_5 = _2910;
                }
                _2697 = frontier_phi_73_pred;
                _2695 = frontier_phi_73_pred_1;
                _2693 = frontier_phi_73_pred_2;
                _2691 = frontier_phi_73_pred_3;
                _2689 = frontier_phi_73_pred_4;
                _2687 = frontier_phi_73_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2687;
                    _2839 = _2689;
                    _2840 = _2691;
                    _2841 = _2693;
                    _2842 = _2695;
                    _2843 = _2697;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2703) & _2589) == 0u)
        {
            _2806 = _2686;
            _2808 = _2688;
            _2810 = _2690;
            _2812 = _2692;
            _2814 = _2694;
            _2816 = _2696;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
            float _2832 = _2831 * _1647;
            float _2833 = _2831 * _1648;
            float _2834 = _2831 * _1649;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2966 = _2686;
                float _2967 = _2688;
                float _2968 = _2690;
                float _2969 = _2692;
                float _2970 = _2694;
                float _2971 = _2696;
                uint _2972 = _2703;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2982)
                    {
                        frontier_phi_84_pred = _2970;
                        frontier_phi_84_pred_1 = _2969;
                        frontier_phi_84_pred_2 = _2968;
                        frontier_phi_84_pred_3 = _2967;
                        frontier_phi_84_pred_4 = _2966;
                        frontier_phi_84_pred_5 = _2971;
                    }
                    else
                    {
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        float _3191 = _2970;
                        float _3192 = _2971;
                        uint _3193 = _2981;
                        uint _3194;
                        vec4 _3219;
                        float _3220;
                        vec4 _3235;
                        vec3 _3247;
                        vec4 _3263;
                        vec4 _3279;
                        float _3326;
                        bool _3327;
                        for (;;)
                        {
                            uint _3204 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3193));
                            _3194 = (_3193 + 4294967295u) & _3193;
                            uint _3206 = _3204 * 40u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.w;
                            uint _3222 = (_3204 * 40u) + 4u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3204 * 40u) + 8u;
                            _3247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x));
                            uint _3250 = (_3204 * 40u) + 16u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3204 * 40u) + 20u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3282 = (_3204 * 40u) + 24u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3301 = (_3204 * 40u) + 28u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3326 = fma(_1649, _3314.z, fma(_1648, _3314.y, _3314.x * _1647)) + _3314.w;
                            _3327 = !((fma(_1649, _3295.z, fma(_1648, _3295.y, _3295.x * _1647)) + _3295.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3327)
                            {
                                float _3354 = _3219.x - _1647;
                                float _3355 = _3219.y - _1648;
                                float _3356 = _3219.z - _1649;
                                float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                                float _3360 = inversesqrt(_3357);
                                float _3361 = _3360 * _3354;
                                float _3362 = _3360 * _3355;
                                float _3363 = _3360 * _3356;
                                float _3367 = 1.0 - (_3357 / (_3220 * _3220));
                                float _4492 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3372 = sqrt(_3357) * _3235.w;
                                float _3374 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                                float _3375 = _3374 * _3374;
                                float _3378 = ((1.0 - _3375) * dot(vec3(_3361, _3362, _3363), vec3(_432, _435, _438))) + _3375;
                                float _3381 = _3372 * _3372;
                                float _3385 = (fma(_1649, _3263.z, fma(_1648, _3263.y, _3263.x * _1647)) + _3263.w) / _3326;
                                float _3386 = (fma(_1649, _3279.z, fma(_1648, _3279.y, _3279.x * _1647)) + _3279.w) / _3326;
                                float _3390 = 1.0 - dot(vec2(_3385, _3386), vec2(_3385, _3386));
                                float _4508 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3392 = _3391 * (((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3368) / ((_3381 * 0.699999988079071044921875) + 1.0));
                                float _3404 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _548;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3361 - _2832;
                                float _3416 = _3362 - _2833;
                                float _3417 = _3363 - _2834;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4519 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3429 = dot(vec3(_432, _435, _438), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4530 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = _3374 * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_432, _435, _438), vec3(_3361, _3362, _3363))) + _3438;
                                float _4541 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4552 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = (_3391 * _3368) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3436 * _3436) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3392 * _3235.y;
                                frontier_phi_90_pred_1 = _3392 * _3235.x;
                                frontier_phi_90_pred_2 = _3466 * _3247.z;
                                frontier_phi_90_pred_3 = _3466 * _3247.y;
                                frontier_phi_90_pred_4 = _3466 * _3247.x;
                                frontier_phi_90_pred_5 = _3392 * _3235.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_90_pred;
                            _3473 = frontier_phi_90_pred_1;
                            _3472 = frontier_phi_90_pred_2;
                            _3471 = frontier_phi_90_pred_3;
                            _3470 = frontier_phi_90_pred_4;
                            _3475 = frontier_phi_90_pred_5;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3179 = _3475 + _3192;
                            _3174 = _3470 + _3187;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            if (_3194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3194;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3178;
                        frontier_phi_84_pred_1 = _3177;
                        frontier_phi_84_pred_2 = _3176;
                        frontier_phi_84_pred_3 = _3175;
                        frontier_phi_84_pred_4 = _3174;
                        frontier_phi_84_pred_5 = _3179;
                    }
                    _2815 = frontier_phi_84_pred;
                    _2813 = frontier_phi_84_pred_1;
                    _2811 = frontier_phi_84_pred_2;
                    _2809 = frontier_phi_84_pred_3;
                    _2807 = frontier_phi_84_pred_4;
                    _2817 = frontier_phi_84_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2807;
                        _2967 = _2809;
                        _2968 = _2811;
                        _2969 = _2813;
                        _2970 = _2815;
                        _2971 = _2817;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2817;
                frontier_phi_65_66_ladder_1 = _2813;
                frontier_phi_65_66_ladder_2 = _2815;
                frontier_phi_65_66_ladder_3 = _2809;
                frontier_phi_65_66_ladder_4 = _2807;
                frontier_phi_65_66_ladder_5 = _2811;
            }
            else
            {
                frontier_phi_65_66_ladder = _2696;
                frontier_phi_65_66_ladder_1 = _2692;
                frontier_phi_65_66_ladder_2 = _2694;
                frontier_phi_65_66_ladder_3 = _2688;
                frontier_phi_65_66_ladder_4 = _2686;
                frontier_phi_65_66_ladder_5 = _2690;
            }
            _2806 = frontier_phi_65_66_ladder_4;
            _2808 = frontier_phi_65_66_ladder_3;
            _2810 = frontier_phi_65_66_ladder_5;
            _2812 = frontier_phi_65_66_ladder_1;
            _2814 = frontier_phi_65_66_ladder_2;
            _2816 = frontier_phi_65_66_ladder;
        }
        float _2821 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _2601 = (_2821 * _2812) + _2114;
        _2603 = (_2821 * _2814) + _2116;
        _2605 = (_2821 * _2816) + _2118;
        _2607 = ((_2806 * _517) * _2821) + _2452;
        _2609 = ((_2808 * _519) * _2821) + _2454;
        _2611 = ((_2810 * _520) * _2821) + _2456;
    }
    else
    {
        _2601 = _2114;
        _2603 = _2116;
        _2605 = _2118;
        _2607 = _2452;
        _2609 = _2454;
        _2611 = _2456;
    }
    vec4 _2617 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4568 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4579 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4590 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2641 = (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2601 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _532))) + ((_2607 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1374)) * cbPerFrame._m0[3u].x)) + (_2617.x * cbMtdParam._m0[3u].x);
    float _2643 = ((_2617.y * cbMtdParam._m0[3u].x) + ((_2609 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1374)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2603 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _532)));
    float _2645 = ((_2617.z * cbMtdParam._m0[3u].x) + ((_2611 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1374)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2605 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _532)));
    float _2646 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2647 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2648 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    uint _2649 = _464 + 6u;
    float _2657 = _407 / cbSceneParam._m0[86u].x;
    float _2658 = _408 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2712 = _2711 / _328;
        float _2723 = _2712 * _379;
        float _2724 = _380 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2726 = _2712 * _381;
        float _2728 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2724;
        float _2736 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2923;
        if (abs((_2725 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2923 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2869 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2923 = ((abs(_2736 / _2725) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2746 * _2878) - exp2(_2746 * _2879)) * _2867))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2925 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2934 = exp2((_2923 * (-1.44269502162933349609375)) * (1.0 - _2925.w));
        float _2935 = log2(_2934);
        float _2951 = log2(_2677);
        _2748 = (exp2(_2951 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].x)) * _2925.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2750 = (exp2(_2951 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].y)) * _2925.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2752 = (exp2(_2951 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].z)) * _2925.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2754 = _2934 * _2677;
    }
    else
    {
        _2748 = _2674;
        _2750 = _2675;
        _2752 = _2676;
        _2754 = _2677;
    }
    bool _2961;
    vec4 _2764;
    vec4 _2786;
    float _2788;
    float _2792;
    float _2793;
    float _2794;
    float _2795;
    bool _2805;
    for (;;)
    {
        _2764 = cbMatDynParam._m0[0u];
        float _2766 = roundEven(_2764.y);
        bool _2767 = _2766 == 3.0;
        float _2768 = log2(_2754);
        float _2775 = exp2(_2768 * cbSceneParam._m0[78u].x) * _2646;
        float _2776 = exp2(_2768 * cbSceneParam._m0[78u].y) * _2647;
        float _2777 = exp2(_2768 * cbSceneParam._m0[78u].z) * _2648;
        float _2784 = _395 + (-0.5);
        _2786 = cbMtdParam._m0[1u];
        _2788 = _2786.y * _2784;
        float _2791 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2792 = _2791 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
        _2793 = _2791 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
        _2794 = _2791 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
        _2795 = _2784 * 0.999000012874603271484375;
        _2805 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2805)
        {
            if ((cbInstanceData._m0[_464 + 7u].x + _2795) < 0.5)
            {
                _2961 = true;
                break;
            }
        }
        uint _2902 = _466 + uint(_2764.w);
        if ((cbInstanceData._m0[_2902].w < 1.0) && ((cbInstanceData._m0[_2902].w + _2795) < 0.5))
        {
            _2961 = true;
            break;
        }
        if ((_2788 + 1.0) < _2786.x)
        {
            _2961 = true;
            break;
        }
        _2961 = false;
        break;
    }
    float _3165;
    if (_2961)
    {
        discard_state = true;
        _3165 = 0.0;
    }
    else
    {
        _3165 = cbInstanceData._m0[_2649].w;
    }
    SV_Target.x = _2792;
    SV_Target.y = _2793;
    SV_Target.z = _2794;
    SV_Target.w = _3165;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
    discard_exit();
}


