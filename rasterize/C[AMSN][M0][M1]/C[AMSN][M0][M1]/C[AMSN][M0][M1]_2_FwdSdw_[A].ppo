#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _956;
float _3648;
float _3649;
float _3650;
float _3651;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _250 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _256 = _250.x * cbMtdParam._m0[9u].x;
    float _257 = _250.y * cbMtdParam._m0[9u].y;
    float _258 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _272 = _270.x;
    vec4 _284 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _293 = cbMtdParam._m0[10u].y * _284.z;
    float _297 = (_284.x * 2.0) + (-1.0);
    float _299 = (_284.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3660 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))));
    float _309 = fma(_306, _228, fma(_299, _220 * TANGENT.x, (_206 * _198) * _297));
    float _312 = fma(_306, _229, fma(_299, _220 * TANGENT.y, (_206 * _199) * _297));
    float _315 = fma(_306, _230, fma(_299, _220 * TANGENT.z, (_206 * _200) * _297));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3671 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _323 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3693 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3704 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3715 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _327 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    vec4 _408 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _410 = _408.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_394 * _394) + (_395 * _395)) + (_396 * _396));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3726 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3737 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) - _642)) + _642) < ((_410 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _422 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _423 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _425 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _427 = _425.w;
    float _447 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _450 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _453 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    vec4 _455 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _466 = (((_455.y - _323) + (_455.w * _323)) * cbMtdParam._m0[3u].x) + _323;
    uint _479 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = _479 + 9u;
    uint _482 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3748 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    vec4 _494 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _499 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _510 = (((_499.x - _327) + (_499.w * _327)) * cbMtdParam._m0[3u].x) + _327;
    float _523 = (cbMtdParam._m0[3u].x * (((_491 * _427) - _491) + _494.x)) + _491;
    float _524 = (cbMtdParam._m0[3u].x * (((_492 * _427) - _492) + _494.y)) + _492;
    float _525 = (cbMtdParam._m0[3u].x * (((_493 * _427) - _493) + _494.z)) + _493;
    float _526 = 1.0 - _510;
    float _527 = _526 * _523;
    float _528 = _526 * _524;
    float _529 = _526 * _525;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _510;
    float _535 = (_524 + (-0.039999999105930328369140625)) * _510;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _510;
    float _537 = _534 + 0.039999999105930328369140625;
    float _539 = _535 + 0.039999999105930328369140625;
    float _540 = _536 + 0.039999999105930328369140625;
    vec4 _549 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _422, cbSceneParam._m0[86u].y * _423));
    float _552 = _549.x * TEXCOORD_4;
    float _553 = dot(vec3(_320, _321, _322), vec3(_401, _402, _403));
    float _556 = _553 * 2.0;
    float _560 = (_556 * _320) - _401;
    float _561 = (_556 * _321) - _402;
    float _562 = (_556 * _322) - _403;
    float _566 = abs(dot(vec3(_401, _402, _403), vec3(_320, _321, _322)));
    float _3781 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = sqrt(_466);
    float _581 = exp2((_568 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_568 * 3.0));
    float _587 = (1.0 - _581) * ((_568 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _588 = _581 * _568;
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _684 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _688 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _713 = _616 + _320;
        float _714 = _620 + _321;
        float _715 = _624 + _322;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_320, _321, _322), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3829 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_320, _321, _322), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3862 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_320, _321, _322), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3895 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1003 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1007 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1030 = _616 + _320;
        float _1031 = _620 + _321;
        float _1032 = _624 + _322;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_320, _321, _322), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3958 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_320, _321, _322), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3991 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_320, _321, _322), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4024 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = _956;
        _1278 = _956;
        _1279 = _956;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _560 * 0.5;
    float _1337 = _561 * 0.5;
    float _1338 = _562 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_955, _959, _962, _965));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_957, _960, _963, _966));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _961, _964, _967));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1454 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1458 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1462 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1465 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1468 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1471 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1499;
        if (_1465 > 0.0)
        {
            _1499 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1499 = frontier_phi_19_17_ladder;
        }
        float _1675;
        if (_1468 > 0.0)
        {
            _1675 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1675 = frontier_phi_28_24_ladder;
        }
        float _1971;
        if (_1471 > 0.0)
        {
            _1971 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1971 = frontier_phi_40_35_ladder;
        }
        float _1973 = isnan(_1675) ? _1499 : (isnan(_1499) ? _1675 : min(_1499, _1675));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1465) + _1454;
        float _1979 = (_1974 * _1468) + _1458;
        float _1980 = (_1974 * _1471) + _1462;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_18_40_ladder = _2125.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2125.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2125.x * cbModelParam._m0[1u].y;
        }
        _1487 = frontier_phi_18_40_ladder_2;
        _1489 = frontier_phi_18_40_ladder_1;
        _1491 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1405);
        _1487 = _1475.x * cbModelParam._m0[1u].y;
        _1489 = _1475.y * cbModelParam._m0[1u].y;
        _1491 = _1475.z * cbModelParam._m0[1u].y;
    }
    float _1495 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1495 : min(cbModelParam._m0[25u].w, _1495));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1567 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1570 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1680;
        if (_1564 > 0.0)
        {
            _1680 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1680 = frontier_phi_30_26_ladder;
        }
        float _1998;
        if (_1567 > 0.0)
        {
            _1998 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1998 = frontier_phi_42_37_ladder;
        }
        float _2336;
        if (_1570 > 0.0)
        {
            _2336 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2336 = frontier_phi_52_49_ladder;
        }
        float _2338 = isnan(_1998) ? _1680 : (isnan(_1680) ? _1998 : min(_1680, _1998));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1564) + _1553;
        float _2344 = (_2339 * _1567) + _1557;
        float _2345 = (_2339 * _1570) + _1561;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1496);
            frontier_phi_27_52_ladder = _2467.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2467.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2467.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_27_52_ladder_2;
        _1591 = frontier_phi_27_52_ladder_1;
        _1593 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1496);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1606 = (((_587 * _537) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_587 * _539) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1610 = (((_587 * _540) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1667 = _1654 / _1666;
    float _1668 = _1658 / _1666;
    float _1669 = _1662 / _1666;
    float _1816;
    float _1817;
    float _1818;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1696 = ((uint(_1669 > cbSceneParam._m0[59u].y) + uint(_1669 > cbSceneParam._m0[59u].x)) + uint(_1669 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1697 = _1696 + 43u;
        uint _1705 = _1696 + 44u;
        uint _1713 = _1696 + 45u;
        uint _1721 = _1696 + 46u;
        float _1732 = fma(_1666, cbSceneParam._m0[_1697].w, fma(_1662, cbSceneParam._m0[_1697].z, fma(_1658, cbSceneParam._m0[_1697].y, _1654 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1666, cbSceneParam._m0[_1705].w, fma(_1662, cbSceneParam._m0[_1705].z, fma(_1658, cbSceneParam._m0[_1705].y, _1654 * cbSceneParam._m0[_1705].x)));
        float _1744 = fma(_1666, cbSceneParam._m0[_1721].w, fma(_1662, cbSceneParam._m0[_1721].z, fma(_1658, cbSceneParam._m0[_1721].y, _1654 * cbSceneParam._m0[_1721].x)));
        float _1749 = cbSceneParam._m0[33u].z * _1744;
        float _1751 = cbSceneParam._m0[33u].w * _1744;
        float _1754 = fma(_1666, cbSceneParam._m0[_1713].w, fma(_1662, cbSceneParam._m0[_1713].z, fma(_1658, cbSceneParam._m0[_1713].y, _1654 * cbSceneParam._m0[_1713].x))) / _1744;
        float _1802 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
        float _4150 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1809 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 + _1732) / _1744, (_1751 + _1736) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 + _1732) / _1744, (_1736 - _1749) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1749) / _1744, (_1736 - _1751) / _1744), _1754), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 - _1751) / _1744, (_1749 + _1736) / _1744), _1754), 0.0)).x), vec4(0.25)));
        _1816 = 1.0 - (_1809 * cbSceneParam._m0[34u].x);
        _1817 = 1.0 - (_1809 * cbSceneParam._m0[34u].y);
        _1818 = 1.0 - (_1809 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1816 = 1.0;
        _1817 = 1.0;
        _1818 = 1.0;
    }
    float _1882;
    float _1884;
    float _1886;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1870 = fma(_1666, cbSceneParam._m0[63u].w, fma(_1662, cbSceneParam._m0[63u].z, fma(_1658, cbSceneParam._m0[63u].y, _1654 * cbSceneParam._m0[63u].x)));
        float _1871 = fma(_1666, cbSceneParam._m0[60u].w, fma(_1662, cbSceneParam._m0[60u].z, fma(_1658, cbSceneParam._m0[60u].y, _1654 * cbSceneParam._m0[60u].x))) / _1870;
        float _1872 = fma(_1666, cbSceneParam._m0[61u].w, fma(_1662, cbSceneParam._m0[61u].z, fma(_1658, cbSceneParam._m0[61u].y, _1654 * cbSceneParam._m0[61u].x))) / _1870;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1871 >= cbSceneParam._m0[64u].x) && (_1872 >= cbSceneParam._m0[64u].y)) && (_1871 <= cbSceneParam._m0[64u].z)) && (_1872 <= cbSceneParam._m0[64u].w))
        {
            float _2011 = fma(_1666, cbSceneParam._m0[62u].w, fma(_1662, cbSceneParam._m0[62u].z, fma(_1658, cbSceneParam._m0[62u].y, _1654 * cbSceneParam._m0[62u].x))) / _1870;
            float _2015 = isnan(cbSceneParam._m0[41u].w) ? _2011 : (isnan(_2011) ? cbSceneParam._m0[41u].w : max(_2011, cbSceneParam._m0[41u].w));
            float _2058 = (cbSceneParam._m0[33u].x - sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669))) * cbSceneParam._m0[33u].y;
            float _4166 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
            float _2065 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1871, cbSceneParam._m0[33u].w + _1872), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1871, _1872 - cbSceneParam._m0[33u].z), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].z, _1872 - cbSceneParam._m0[33u].w), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1871 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1872), _2015), 0.0)).x), vec4(0.25)));
            float _2069 = 1.0 - (_2065 * cbSceneParam._m0[34u].x);
            float _2070 = 1.0 - (_2065 * cbSceneParam._m0[34u].y);
            float _2071 = 1.0 - (_2065 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2070) ? _1817 : (isnan(_1817) ? _2070 : min(_1817, _2070));
            frontier_phi_39_38_ladder_1 = isnan(_2069) ? _1816 : (isnan(_1816) ? _2069 : min(_1816, _2069));
            frontier_phi_39_38_ladder_2 = isnan(_2071) ? _1818 : (isnan(_1818) ? _2071 : min(_1818, _2071));
        }
        else
        {
            frontier_phi_39_38_ladder = _1817;
            frontier_phi_39_38_ladder_1 = _1816;
            frontier_phi_39_38_ladder_2 = _1818;
        }
        _1882 = frontier_phi_39_38_ladder_1;
        _1884 = frontier_phi_39_38_ladder;
        _1886 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1882 = _1816;
        _1884 = _1817;
        _1886 = _1818;
    }
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_479 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _552 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1930 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1934 = _1893 | 1u;
    float _1945 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_320, _321, _322));
    float _1948 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_320, _321, _322));
    float _4202 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _4213 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1953 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _1955 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _1962 = ((cbLight._m0[_1910].x * _1916) * _1955) + (((cbLight._m0[_1920].x * _1882) * _1930) * _1953);
    float _1963 = ((_1916 * cbLight._m0[_1910].y) * _1955) + (((cbLight._m0[_1920].y * _1884) * _1930) * _1953);
    float _1964 = ((_1916 * cbLight._m0[_1910].z) * _1955) + (((cbLight._m0[_1920].z * _1886) * _1930) * _1953);
    uvec4 _1968 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1970 = _1968.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_1970)
    {
        _2072 = _1962;
        _2074 = _1963;
        _2076 = _1964;
    }
    else
    {
        uint _2080 = _1893 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4224 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2099 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1962;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1963;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1964;
    }
    bool _2079 = _1968.y == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2079)
    {
        _2134 = _2072;
        _2136 = _2074;
        _2138 = _2076;
    }
    else
    {
        uint _2307 = _1893 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4240 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2326 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2134 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2072;
        _2136 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2074;
        _2138 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2076;
    }
    uint _2141 = _1893 + 8u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _466) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_1893].x + _401;
    float _2157 = cbLight._m0[_1893].y + _402;
    float _2158 = cbLight._m0[_1893].z + _403;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1893].xyz));
    float _4256 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _2170 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2171 = dot(vec3(_320, _321, _322), vec3(_2163, _2164, _2165));
    float _4278 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2163, _2164, _2165));
    float _4289 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2155 * _2155;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2192 = 0.959999978542327880859375 - _534;
    float _2194 = 0.959999978542327880859375 - _535;
    float _2195 = 0.959999978542327880859375 - _536;
    float _2202 = 1.0 - _2155;
    float _2213 = (0.5 / (((_2170 * ((_2169 * _2202) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2202) + _2155) * _2169))) * _2169;
    float _4300 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    uint _2229 = _1893 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _466) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_1934].x + _401;
    float _2243 = cbLight._m0[_1934].y + _402;
    float _2244 = cbLight._m0[_1934].z + _403;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1934].xyz));
    float _4311 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2256 = dot(vec3(_320, _321, _322), vec3(_2249, _2250, _2251));
    float _4322 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2249, _2250, _2251));
    float _4333 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
    float _2282 = 1.0 - _2241;
    float _2292 = (0.5 / (((_2170 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2282) + _2241) * _2255))) * _2255;
    float _4344 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2304 = (((((_2275 * _2192) + _537) * cbLight._m0[_2229].x) * _2294) * _1916) + ((((cbLight._m0[_2141].x * _1882) * ((_2191 * _2192) + _537)) * _2215) * _1930);
    float _2305 = (((((_2275 * _2194) + _539) * cbLight._m0[_2229].y) * _2294) * _1916) + ((((cbLight._m0[_2141].y * _1884) * ((_2191 * _2194) + _539)) * _2215) * _1930);
    float _2306 = (((((_2275 * _2195) + _540) * cbLight._m0[_2229].z) * _2294) * _1916) + ((((cbLight._m0[_2141].z * _1886) * ((_2191 * _2195) + _540)) * _2215) * _1930);
    float _2362;
    float _2364;
    float _2366;
    if (_1970)
    {
        _2362 = _2304;
        _2364 = _2305;
        _2366 = _2306;
    }
    else
    {
        uint _2368 = _1893 + 2u;
        uint _2372 = _1893 + 10u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _466) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _401;
        float _2389 = cbLight._m0[_2368].y + _402;
        float _2390 = cbLight._m0[_2368].z + _403;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2368].xyz));
        float _4355 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2402 = dot(vec3(_320, _321, _322), vec3(_2395, _2396, _2397));
        float _4366 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4377 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2428 = 1.0 - _2387;
        float _2438 = (0.5 / (((_2170 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2428) + _2387) * _2401))) * _2401;
        float _4388 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2362 = (((((_2421 * _2192) + _537) * cbLight._m0[_2372].x) * _2440) * _2441) + _2304;
        _2364 = (((((_2421 * _2194) + _539) * cbLight._m0[_2372].y) * _2440) * _2441) + _2305;
        _2366 = (((((_2421 * _2195) + _540) * cbLight._m0[_2372].z) * _2440) * _2441) + _2306;
    }
    float _2472;
    float _2474;
    float _2476;
    if (_2079)
    {
        _2472 = _2362;
        _2474 = _2364;
        _2476 = _2366;
    }
    else
    {
        uint _2483 = _1893 + 3u;
        uint _2487 = _1893 + 11u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _466) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _401;
        float _2504 = cbLight._m0[_2483].y + _402;
        float _2505 = cbLight._m0[_2483].z + _403;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2483].xyz));
        float _4404 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2517 = dot(vec3(_320, _321, _322), vec3(_2510, _2511, _2512));
        float _4415 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4426 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2170 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2543) + _2502) * _2516))) * _2516;
        float _4437 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2472 = (((((_2536 * _2192) + _537) * cbLight._m0[_2487].x) * _2555) * _2556) + _2362;
        _2474 = (((((_2536 * _2194) + _539) * cbLight._m0[_2487].y) * _2555) * _2556) + _2364;
        _2476 = (((((_2536 * _2195) + _540) * cbLight._m0[_2487].z) * _2555) * _2556) + _2366;
    }
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_1891.y == 0u)
    {
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.x;
        uint _2589 = uint((float(_2577.y) * floor(float(uint(cbSceneParam._m0[85u].y * _423) / _2578))) + floor(float(uint(cbSceneParam._m0[85u].x * _422) / _2578)));
        float _2599 = (log2(_1669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2600 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        uint _2603 = uint(isnan(14.0) ? _2600 : (isnan(_2600) ? 14.0 : min(_2600, 14.0)));
        uvec4 _2608 = texelFetch(g_lightClusterGridBuffer, int(((_2603 << 2u) + (_2589 << 6u)) >> 2u));
        uint _2609 = _2608.x;
        uint _2610 = _2577.z;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((((1u << ((_2610 >> 4u) & 15u)) + 4294967295u) & _2609) == 0u) || ((_2610 & 240u) == 0u))
        {
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
        }
        else
        {
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            uint _2864 = 0u;
            uint _2873;
            bool _2874;
            for (;;)
            {
                _2873 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                _2874 = _2873 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2874)
                {
                    frontier_phi_73_pred = _2863;
                    frontier_phi_73_pred_1 = _2862;
                    frontier_phi_73_pred_2 = _2861;
                    frontier_phi_73_pred_3 = _2860;
                    frontier_phi_73_pred_4 = _2859;
                    frontier_phi_73_pred_5 = _2858;
                }
                else
                {
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    uint _3009;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2873;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    for (;;)
                    {
                        uint _3013 = uint(findLSB(_3009)) + (_2864 << 5u);
                        uint _3010 = (_3009 + 4294967295u) & _3009;
                        uint _3015 = _3013 * 48u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3035 = (_3013 * 48u) + 4u;
                        vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3054 = (_3013 * 48u) + 8u;
                        vec3 _3065 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x));
                        float _3069 = _3029.x - _1667;
                        float _3070 = _3029.y - _1668;
                        float _3071 = _3029.z - _1669;
                        float _3072 = dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071));
                        float _3075 = inversesqrt(_3072);
                        float _3076 = _3075 * _3069;
                        float _3077 = _3075 * _3070;
                        float _3078 = _3075 * _3071;
                        float _3079 = dot(vec3(_447, _450, _453), vec3(_3076, _3077, _3078));
                        float _3084 = 1.0 - (_3072 * _3029.w);
                        float _4463 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3086 = sqrt(_3072) * _3048.w;
                        float _3089 = 1.39999997615814208984375 / (_3086 + 1.39999997615814208984375);
                        float _3090 = _3089 * _3089;
                        float _3093 = ((1.0 - _3090) * _3079) + _3090;
                        float _3096 = _3086 * _3086;
                        float _3100 = ((isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))) * _3085) / ((_3096 * 0.699999988079071044921875) + 1.0);
                        float _3104 = (-0.0) - _1667;
                        float _3105 = (-0.0) - _1668;
                        float _3106 = (-0.0) - _1669;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3120 = exp2(log2(1.0 / ((_3096 * 3.5) + 5.0)) * 0.25);
                        float _3121 = 1.0 - _568;
                        float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                        float _3129 = _3128 * _3128;
                        float _3130 = _3129 * _3129;
                        float _3131 = _3111 + _3076;
                        float _3132 = _3112 + _3077;
                        float _3133 = _3113 + _3078;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3141 = dot(vec3(_447, _450, _453), vec3(_3111, _3112, _3113));
                        float _4479 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3145 = dot(vec3(_447, _450, _453), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                        float _4490 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3148 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                        float _3153 = _3089 * _3129;
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3079) + _3154;
                        float _4501 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3159 = 1.0 - _3129;
                        float _3169 = (0.5 / (((_3158 * ((_3144 * _3159) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3129) * _3144))) * _3158;
                        float _4512 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3180 = (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) / ((_3152 * _3152) * ((_3096 * 2.1991131305694580078125) + 3.141590118408203125))) * _3085;
                        _2933 = (_3100 * _3048.x) + _3006;
                        _2934 = (_3100 * _3048.y) + _3007;
                        _2935 = (_3100 * _3048.z) + _3008;
                        _2930 = (_3180 * _3065.x) + _3003;
                        _2931 = (_3180 * _3065.y) + _3004;
                        _2932 = (_3180 * _3065.z) + _3005;
                        if (_3010 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _3010;
                        }
                    }
                    frontier_phi_73_pred = _2935;
                    frontier_phi_73_pred_1 = _2934;
                    frontier_phi_73_pred_2 = _2933;
                    frontier_phi_73_pred_3 = _2932;
                    frontier_phi_73_pred_4 = _2931;
                    frontier_phi_73_pred_5 = _2930;
                }
                _2717 = frontier_phi_73_pred;
                _2715 = frontier_phi_73_pred_1;
                _2713 = frontier_phi_73_pred_2;
                _2711 = frontier_phi_73_pred_3;
                _2709 = frontier_phi_73_pred_4;
                _2707 = frontier_phi_73_pred_5;
                uint _2865 = _2864 + 1u;
                if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2858 = _2707;
                    _2859 = _2709;
                    _2860 = _2711;
                    _2861 = _2713;
                    _2862 = _2715;
                    _2863 = _2717;
                    _2864 = _2865;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
        }
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.z;
        uint _2723 = (_2721 >> 8u) & 15u;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((4294967295u << _2723) & _2609) == 0u)
        {
            _2826 = _2706;
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
        }
        else
        {
            float _2851 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
            float _2852 = _2851 * _1667;
            float _2853 = _2851 * _1668;
            float _2854 = _2851 * _1669;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2723 < ((_2721 >> 12u) & 15u))
            {
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2986 = _2706;
                float _2987 = _2708;
                float _2988 = _2710;
                float _2989 = _2712;
                float _2990 = _2714;
                float _2991 = _2716;
                uint _2992 = _2723;
                uint _3001;
                bool _3002;
                for (;;)
                {
                    _3001 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                    _3002 = _3001 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3002)
                    {
                        frontier_phi_84_pred = _2990;
                        frontier_phi_84_pred_1 = _2989;
                        frontier_phi_84_pred_2 = _2988;
                        frontier_phi_84_pred_3 = _2987;
                        frontier_phi_84_pred_4 = _2986;
                        frontier_phi_84_pred_5 = _2991;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        float _3212 = _2991;
                        uint _3213 = _3001;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3283;
                        vec4 _3299;
                        float _3346;
                        bool _3347;
                        for (;;)
                        {
                            uint _3224 = ((_2992 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3270 = (_3224 * 40u) + 16u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3286 = (_3224 * 40u) + 20u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3302 = (_3224 * 40u) + 24u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3321 = (_3224 * 40u) + 28u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3346 = fma(_1669, _3334.z, fma(_1668, _3334.y, _3334.x * _1667)) + _3334.w;
                            _3347 = !((fma(_1669, _3315.z, fma(_1668, _3315.y, _3315.x * _1667)) + _3315.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3347)
                            {
                                float _3374 = _3239.x - _1667;
                                float _3375 = _3239.y - _1668;
                                float _3376 = _3239.z - _1669;
                                float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                                float _3380 = inversesqrt(_3377);
                                float _3381 = _3380 * _3374;
                                float _3382 = _3380 * _3375;
                                float _3383 = _3380 * _3376;
                                float _3387 = 1.0 - (_3377 / (_3240 * _3240));
                                float _4523 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3392 = sqrt(_3377) * _3255.w;
                                float _3394 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                                float _3395 = _3394 * _3394;
                                float _3398 = ((1.0 - _3395) * dot(vec3(_3381, _3382, _3383), vec3(_447, _450, _453))) + _3395;
                                float _3401 = _3392 * _3392;
                                float _3405 = (fma(_1669, _3283.z, fma(_1668, _3283.y, _3283.x * _1667)) + _3283.w) / _3346;
                                float _3406 = (fma(_1669, _3299.z, fma(_1668, _3299.y, _3299.x * _1667)) + _3299.w) / _3346;
                                float _3410 = 1.0 - dot(vec2(_3405, _3406), vec2(_3405, _3406));
                                float _4539 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3412 = _3411 * (((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3388) / ((_3401 * 0.699999988079071044921875) + 1.0));
                                float _3424 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                                float _3425 = 1.0 - _568;
                                float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                                float _3433 = _3432 * _3432;
                                float _3434 = _3433 * _3433;
                                float _3435 = _3381 - _2852;
                                float _3436 = _3382 - _2853;
                                float _3437 = _3383 - _2854;
                                float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                                float _3445 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2852, (-0.0) - _2853, (-0.0) - _2854));
                                float _4550 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3449 = dot(vec3(_447, _450, _453), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                                float _4561 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                                float _3457 = _3394 * _3433;
                                float _3458 = _3457 * _3457;
                                float _3464 = ((1.0 - _3458) * dot(vec3(_447, _450, _453), vec3(_3381, _3382, _3383))) + _3458;
                                float _4572 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3466 = 1.0 - _3433;
                                float _3476 = (0.5 / (((_3465 * ((_3448 * _3466) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3433) * _3448))) * _3465;
                                float _4583 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3486 = (_3411 * _3388) * (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3456 * _3456) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3412 * _3255.y;
                                frontier_phi_90_pred_1 = _3412 * _3255.x;
                                frontier_phi_90_pred_2 = _3486 * _3267.z;
                                frontier_phi_90_pred_3 = _3486 * _3267.y;
                                frontier_phi_90_pred_4 = _3486 * _3267.x;
                                frontier_phi_90_pred_5 = _3412 * _3255.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3494 = frontier_phi_90_pred;
                            _3493 = frontier_phi_90_pred_1;
                            _3492 = frontier_phi_90_pred_2;
                            _3491 = frontier_phi_90_pred_3;
                            _3490 = frontier_phi_90_pred_4;
                            _3495 = frontier_phi_90_pred_5;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            _3199 = _3495 + _3212;
                            _3194 = _3490 + _3207;
                            _3195 = _3491 + _3208;
                            _3196 = _3492 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3198;
                        frontier_phi_84_pred_1 = _3197;
                        frontier_phi_84_pred_2 = _3196;
                        frontier_phi_84_pred_3 = _3195;
                        frontier_phi_84_pred_4 = _3194;
                        frontier_phi_84_pred_5 = _3199;
                    }
                    _2835 = frontier_phi_84_pred;
                    _2833 = frontier_phi_84_pred_1;
                    _2831 = frontier_phi_84_pred_2;
                    _2829 = frontier_phi_84_pred_3;
                    _2827 = frontier_phi_84_pred_4;
                    _2837 = frontier_phi_84_pred_5;
                    uint _2993 = _2992 + 1u;
                    if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2986 = _2827;
                        _2987 = _2829;
                        _2988 = _2831;
                        _2989 = _2833;
                        _2990 = _2835;
                        _2991 = _2837;
                        _2992 = _2993;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2837;
                frontier_phi_65_66_ladder_1 = _2833;
                frontier_phi_65_66_ladder_2 = _2835;
                frontier_phi_65_66_ladder_3 = _2829;
                frontier_phi_65_66_ladder_4 = _2827;
                frontier_phi_65_66_ladder_5 = _2831;
            }
            else
            {
                frontier_phi_65_66_ladder = _2716;
                frontier_phi_65_66_ladder_1 = _2712;
                frontier_phi_65_66_ladder_2 = _2714;
                frontier_phi_65_66_ladder_3 = _2708;
                frontier_phi_65_66_ladder_4 = _2706;
                frontier_phi_65_66_ladder_5 = _2710;
            }
            _2826 = frontier_phi_65_66_ladder_4;
            _2828 = frontier_phi_65_66_ladder_3;
            _2830 = frontier_phi_65_66_ladder_5;
            _2832 = frontier_phi_65_66_ladder_1;
            _2834 = frontier_phi_65_66_ladder_2;
            _2836 = frontier_phi_65_66_ladder;
        }
        float _2841 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        _2621 = (_2841 * _2832) + _2134;
        _2623 = (_2841 * _2834) + _2136;
        _2625 = (_2841 * _2836) + _2138;
        _2627 = ((_2826 * _537) * _2841) + _2472;
        _2629 = ((_2828 * _539) * _2841) + _2474;
        _2631 = ((_2830 * _540) * _2841) + _2476;
    }
    else
    {
        _2621 = _2134;
        _2623 = _2136;
        _2625 = _2138;
        _2627 = _2472;
        _2629 = _2474;
        _2631 = _2476;
    }
    vec4 _2637 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4599 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4610 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4621 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _2661 = (((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2621 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _552))) + ((_2627 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + (_2637.x * cbMtdParam._m0[3u].x);
    float _2663 = ((_2637.y * cbMtdParam._m0[3u].x) + ((_2629 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2623 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _552)));
    float _2665 = ((_2637.z * cbMtdParam._m0[3u].x) + ((_2631 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2625 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _552)));
    float _2666 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2667 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2668 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    uint _2669 = _479 + 6u;
    float _2677 = _422 / cbSceneParam._m0[86u].x;
    float _2678 = _423 / cbSceneParam._m0[86u].y;
    vec4 _2692 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2694 = _2692.x;
    float _2695 = _2692.y;
    float _2696 = _2692.z;
    float _2697 = _2692.w;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2731 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2732 = _2731 / _343;
        float _2743 = _2732 * _394;
        float _2744 = _395 * _2732;
        float _2745 = (-0.0) - _2744;
        float _2746 = _2732 * _396;
        float _2748 = (cbSceneParam._m0[77u].w * _2745) / _2731;
        float _2749 = _2748 + cbSceneParam._m0[79u].w;
        float _2750 = cbSceneParam._m0[79u].w - _2744;
        float _2756 = sqrt(((_2743 * _2743) + (_2744 * _2744)) + (_2746 * _2746));
        float _2759 = (1.0 - (cbSceneParam._m0[77u].w / _2731)) * _2756;
        float _2764 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2766 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2943;
        if (abs((_2745 - _2748) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2943 = ((((_2749 > 0.0) ? exp2(_2764 * _2749) : (2.0 - exp2(_2766 * _2749))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2759;
        }
        else
        {
            float _2887 = 1.0 / cbSceneParam._m0[80u].x;
            float _2888 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : max(_2749, _2750));
            float _2889 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : min(_2749, _2750));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            _2943 = ((abs(_2756 / _2745) * cbSceneParam._m0[80u].y) * ((((_2898 - _2899) * 2.0) - ((exp2(_2764 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0)))) - exp2(_2764 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))))) * _2887)) - ((exp2(_2766 * _2898) - exp2(_2766 * _2899)) * _2887))) + (_2759 * cbSceneParam._m0[80u].z);
        }
        vec4 _2945 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, 1.0), 0.0);
        float _2954 = exp2((_2943 * (-1.44269502162933349609375)) * (1.0 - _2945.w));
        float _2955 = log2(_2954);
        float _2971 = log2(_2697);
        _2768 = (exp2(_2971 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].x)) * _2945.x) / cbSceneParam._m0[78u].x)) + _2694;
        _2770 = (exp2(_2971 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].y)) * _2945.y) / cbSceneParam._m0[78u].y)) + _2695;
        _2772 = (exp2(_2971 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].z)) * _2945.z) / cbSceneParam._m0[78u].z)) + _2696;
        _2774 = _2954 * _2697;
    }
    else
    {
        _2768 = _2694;
        _2770 = _2695;
        _2772 = _2696;
        _2774 = _2697;
    }
    bool _2981;
    vec4 _2784;
    vec4 _2806;
    float _2808;
    float _2812;
    float _2813;
    float _2814;
    float _2815;
    bool _2825;
    for (;;)
    {
        _2784 = cbMatDynParam._m0[0u];
        float _2786 = roundEven(_2784.y);
        bool _2787 = _2786 == 3.0;
        float _2788 = log2(_2774);
        float _2795 = exp2(_2788 * cbSceneParam._m0[78u].x) * _2666;
        float _2796 = exp2(_2788 * cbSceneParam._m0[78u].y) * _2667;
        float _2797 = exp2(_2788 * cbSceneParam._m0[78u].z) * _2668;
        float _2804 = _410 + (-0.5);
        _2806 = cbMtdParam._m0[1u];
        _2808 = _2806.y * _2804;
        float _2811 = (_2786 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2812 = _2811 * (_2787 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2768)));
        _2813 = _2811 * (_2787 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2770)));
        _2814 = _2811 * (_2787 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2772)));
        _2815 = _2804 * 0.999000012874603271484375;
        _2825 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2825)
        {
            if ((cbInstanceData._m0[_479 + 7u].x + _2815) < 0.5)
            {
                _2981 = true;
                break;
            }
        }
        uint _2922 = _481 + uint(_2784.w);
        if ((cbInstanceData._m0[_2922].w < 1.0) && ((cbInstanceData._m0[_2922].w + _2815) < 0.5))
        {
            _2981 = true;
            break;
        }
        if ((_2808 + 1.0) < _2806.x)
        {
            _2981 = true;
            break;
        }
        _2981 = false;
        break;
    }
    float _3185;
    if (_2981)
    {
        discard_state = true;
        _3185 = 0.0;
    }
    else
    {
        _3185 = cbInstanceData._m0[_2669].w;
    }
    SV_Target.x = _2812;
    SV_Target.y = _2813;
    SV_Target.z = _2814;
    SV_Target.w = _3185;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2669].w;
    discard_exit();
}


