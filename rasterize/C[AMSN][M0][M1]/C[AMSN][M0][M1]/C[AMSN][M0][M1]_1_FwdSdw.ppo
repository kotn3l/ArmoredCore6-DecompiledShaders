#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _891;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _236 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _249 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_236 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _236) + cbTextureTilingScale._m0[1u].w));
    float _275 = cbMtdParam._m0[10u].y * _269.z;
    float _279 = (_269.x * 2.0) + (-1.0);
    float _281 = (_269.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3529 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))));
    float _291 = fma(_288, _222, fma(_281, _214 * TANGENT.x, (_200 * _192) * _279));
    float _294 = fma(_288, _223, fma(_281, _214 * TANGENT.y, (_200 * _193) * _279));
    float _297 = fma(_288, _224, fma(_281, _214 * TANGENT.z, (_200 * _194) * _279));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3540 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _305 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3562 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3573 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _393 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _395 = _393.w;
    float _416 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _419 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _422 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    vec4 _424 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _435 = (((_424.y - _305) + (_424.w * _305)) * cbMtdParam._m0[3u].x) + _305;
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = (_448 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3584 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    vec4 _463 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _468 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _474 = cbMtdParam._m0[3u].x * _468.x;
    float _487 = (cbMtdParam._m0[3u].x * (((_460 * _395) - _460) + _463.x)) + _460;
    float _488 = (cbMtdParam._m0[3u].x * (((_461 * _395) - _461) + _463.y)) + _461;
    float _489 = (cbMtdParam._m0[3u].x * (((_462 * _395) - _462) + _463.z)) + _462;
    float _490 = 1.0 - _474;
    float _491 = _487 * _490;
    float _492 = _488 * _490;
    float _493 = _489 * _490;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _474;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _474;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _474;
    float _501 = _498 + 0.039999999105930328369140625;
    float _503 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    vec4 _513 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _516 = _513.x * TEXCOORD_4;
    float _517 = dot(vec3(_302, _303, _304), vec3(_382, _383, _384));
    float _520 = _517 * 2.0;
    float _524 = (_520 * _302) - _382;
    float _525 = (_520 * _303) - _383;
    float _526 = (_520 * _304) - _384;
    float _530 = abs(dot(vec3(_382, _383, _384), vec3(_302, _303, _304)));
    float _3617 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _532 = sqrt(_435);
    float _545 = exp2((_532 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_532 * 3.0));
    float _551 = (1.0 - _545) * ((_532 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _552 = _545 * _532;
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_588, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580));
        float _619 = fma(_588, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580));
        float _623 = fma(_588, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580));
        float _648 = _580 + _302;
        float _649 = _584 + _303;
        float _650 = _588 + _304;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_302, _303, _304), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3665 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_302, _303, _304), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3698 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_302, _303, _304), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3731 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _931 = fma(_588, cbModelParam._m0[30u].z, fma(_584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _580));
        float _935 = fma(_588, cbModelParam._m0[31u].z, fma(_584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _580));
        float _939 = fma(_588, cbModelParam._m0[32u].z, fma(_584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _580));
        float _962 = _580 + _302;
        float _963 = _584 + _303;
        float _964 = _588 + _304;
        float _974 = fma(_964, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962)) - _931;
        float _975 = fma(_964, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962)) - _935;
        float _976 = fma(_964, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962)) - _939;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_931 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_935 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[35u].z) + ((((((_939 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_997.x + (-0.5));
        float _1032 = _1030 * (_997.y + (-0.5));
        float _1033 = _1030 * (_997.z + (-0.5));
        float _1040 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1004.x + (-0.5));
        float _1042 = _1040 * (_1004.y + (-0.5));
        float _1043 = _1040 * (_1004.z + (-0.5));
        float _1050 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1011.x + (-0.5));
        float _1052 = _1050 * (_1011.y + (-0.5));
        float _1053 = _1050 * (_1011.z + (-0.5));
        float _1060 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1018.x + (-0.5));
        float _1062 = _1060 * (_1018.y + (-0.5));
        float _1063 = _1060 * (_1018.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_302, _303, _304), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3794 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1094 + 1.0))) + _1099) * _1064;
        float _1109 = _1032 * 0.5;
        float _1110 = _1042 * 0.5;
        float _1111 = _1052 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_302, _303, _304), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3827 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1136 + 1.0))) + _1141) * _1065;
        float _1151 = _1033 * 0.5;
        float _1152 = _1043 * 0.5;
        float _1153 = _1053 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_302, _303, _304), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3860 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1178 + 1.0))) + _1183) * _1066;
        _1200 = _1033;
        _1201 = _1032;
        _1202 = _1031;
        _1203 = _1043;
        _1204 = _1042;
        _1205 = _1041;
        _1206 = _1053;
        _1207 = _1052;
        _1208 = _1051;
        _1209 = _1066;
        _1210 = _1065;
        _1211 = _1064;
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _891;
        _1201 = _891;
        _1202 = _891;
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1247 = fma(_1226, cbSceneParam._m0[89u].z, fma(_1225, cbSceneParam._m0[89u].y, _1224 * cbSceneParam._m0[89u].x));
    float _1250 = fma(_1226, cbSceneParam._m0[90u].z, fma(_1225, cbSceneParam._m0[90u].y, _1224 * cbSceneParam._m0[90u].x));
    float _1253 = fma(_1226, cbSceneParam._m0[91u].z, fma(_1225, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1224));
    float _1268 = _524 * 0.5;
    float _1269 = _525 * 0.5;
    float _1270 = _526 * 0.5;
    float _1271 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1274 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1277 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1311;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1284 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_890, _894, _897, _900));
        float _1288 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_892, _895, _898, _901));
        float _1292 = dot(vec4(_1268, _1269, _1270, 1.0), vec4(_893, _896, _899, _902));
        float _1299 = dot(vec4(cbModelParam._m0[39u]), vec4(_1268, _1269, _1270, 1.0));
        _1311 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1299) ? 0.0 : (isnan(0.0) ? _1299 : max(0.0, _1299))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1311 = 1.0;
    }
    float _1322;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1313 = dot(vec4(cbModelParam._m0[40u]), vec4(_1268, _1269, _1270, 1.0));
        _1322 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1322 = 1.0;
    }
    float _1326 = (_1322 * cbModelParam._m0[1u].x) + (_1311 * (1.0 - cbModelParam._m0[1u].x));
    float _1336 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1337 = isnan(_1336) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1336 : min(cbModelParam._m0[25u].z, _1336));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_588, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _580)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_588, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _580)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_588, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _580)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_526, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524));
        float _1400 = fma(_526, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524));
        float _1403 = fma(_526, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1431 = frontier_phi_16_14_ladder;
        }
        float _1607;
        if (_1400 > 0.0)
        {
            _1607 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1607 = frontier_phi_25_21_ladder;
        }
        float _1903;
        if (_1403 > 0.0)
        {
            _1903 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_32_ladder;
        }
        float _1905 = isnan(_1607) ? _1431 : (isnan(_1431) ? _1607 : min(_1431, _1607));
        float _1906 = isnan(_1903) ? _1905 : (isnan(_1905) ? _1903 : min(_1905, _1903));
        float _1910 = (_1906 * _1397) + _1386;
        float _1911 = (_1906 * _1400) + _1390;
        float _1912 = (_1906 * _1403) + _1394;
        float _1913 = _1906 * 9.9999997473787516355514526367188e-05;
        float _1915 = (-1.0) - _1913;
        float _1917 = _1913 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1912 > _1917) || ((_1912 < _1915) || ((_1911 > _1917) || ((_1911 < _1915) || ((_1910 < _1915) || (_1910 > _1917))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1912, cbModelParam._m0[9u].z, fma(_1911, cbModelParam._m0[9u].y, _1910 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1912, cbModelParam._m0[10u].z, fma(_1911, cbModelParam._m0[10u].y, _1910 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1912, cbModelParam._m0[11u].z, fma(_1911, cbModelParam._m0[11u].y, _1910 * cbModelParam._m0[11u].x))), _1337);
            frontier_phi_15_37_ladder = _2057.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2057.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2057.z * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_15_37_ladder_1;
        _1421 = frontier_phi_15_37_ladder;
        _1423 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_524, _525, _526), _1337);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1485 = fma(_588, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _580)) + cbModelParam._m0[21u].w;
        float _1489 = fma(_588, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _580)) + cbModelParam._m0[22u].w;
        float _1493 = fma(_588, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _580)) + cbModelParam._m0[23u].w;
        float _1496 = fma(_526, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524));
        float _1499 = fma(_526, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524));
        float _1502 = fma(_526, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524));
        float _1612;
        if (_1496 > 0.0)
        {
            _1612 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1612 = frontier_phi_27_23_ladder;
        }
        float _1930;
        if (_1499 > 0.0)
        {
            _1930 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1930 = frontier_phi_39_34_ladder;
        }
        float _2268;
        if (_1502 > 0.0)
        {
            _2268 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2268 = frontier_phi_49_46_ladder;
        }
        float _2270 = isnan(_1930) ? _1612 : (isnan(_1612) ? _1930 : min(_1612, _1930));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1496) + _1485;
        float _2276 = (_2271 * _1499) + _1489;
        float _2277 = (_2271 * _1502) + _1493;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2278;
        float _2281 = _2278 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2277 > _2281) || ((_2277 < _2279) || ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 < _2279) || (_2275 > _2281))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2277, cbModelParam._m0[17u].z, fma(_2276, cbModelParam._m0[17u].y, _2275 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2277, cbModelParam._m0[18u].z, fma(_2276, cbModelParam._m0[18u].y, _2275 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2277, cbModelParam._m0[19u].z, fma(_2276, cbModelParam._m0[19u].y, _2275 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_24_49_ladder = _2399.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2399.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2399.x * cbModelParam._m0[1u].z;
        }
        _1521 = frontier_phi_24_49_ladder_2;
        _1523 = frontier_phi_24_49_ladder_1;
        _1525 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_524, _525, _526), _1428);
        _1521 = _1505.x * cbModelParam._m0[1u].z;
        _1523 = _1505.y * cbModelParam._m0[1u].z;
        _1525 = _1505.z * cbModelParam._m0[1u].z;
    }
    float _1538 = (((_551 * _501) + _552) * _516) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_551 * _503) + _552) * _516) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_551 * _504) + _552) * _516) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1545 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, _1538 * cbSceneParam._m0[91u].x));
    float _1586 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1599 = _1586 / _1598;
    float _1600 = _1590 / _1598;
    float _1601 = _1594 / _1598;
    float _1748;
    float _1749;
    float _1750;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1628 = ((uint(_1601 > cbSceneParam._m0[59u].y) + uint(_1601 > cbSceneParam._m0[59u].x)) + uint(_1601 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1629 = _1628 + 43u;
        uint _1637 = _1628 + 44u;
        uint _1645 = _1628 + 45u;
        uint _1653 = _1628 + 46u;
        float _1664 = fma(_1598, cbSceneParam._m0[_1629].w, fma(_1594, cbSceneParam._m0[_1629].z, fma(_1590, cbSceneParam._m0[_1629].y, _1586 * cbSceneParam._m0[_1629].x)));
        float _1668 = fma(_1598, cbSceneParam._m0[_1637].w, fma(_1594, cbSceneParam._m0[_1637].z, fma(_1590, cbSceneParam._m0[_1637].y, _1586 * cbSceneParam._m0[_1637].x)));
        float _1676 = fma(_1598, cbSceneParam._m0[_1653].w, fma(_1594, cbSceneParam._m0[_1653].z, fma(_1590, cbSceneParam._m0[_1653].y, _1586 * cbSceneParam._m0[_1653].x)));
        float _1681 = cbSceneParam._m0[33u].z * _1676;
        float _1683 = cbSceneParam._m0[33u].w * _1676;
        float _1686 = fma(_1598, cbSceneParam._m0[_1645].w, fma(_1594, cbSceneParam._m0[_1645].z, fma(_1590, cbSceneParam._m0[_1645].y, _1586 * cbSceneParam._m0[_1645].x))) / _1676;
        float _1734 = (cbSceneParam._m0[33u].x - sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601))) * cbSceneParam._m0[33u].y;
        float _3986 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1741 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 + _1664) / _1676, (_1683 + _1668) / _1676), _1686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 + _1664) / _1676, (_1668 - _1681) / _1676), _1686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 - _1681) / _1676, (_1668 - _1683) / _1676), _1686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 - _1683) / _1676, (_1681 + _1668) / _1676), _1686), 0.0)).x), vec4(0.25)));
        _1748 = 1.0 - (_1741 * cbSceneParam._m0[34u].x);
        _1749 = 1.0 - (_1741 * cbSceneParam._m0[34u].y);
        _1750 = 1.0 - (_1741 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1748 = 1.0;
        _1749 = 1.0;
        _1750 = 1.0;
    }
    float _1814;
    float _1816;
    float _1818;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1802 = fma(_1598, cbSceneParam._m0[63u].w, fma(_1594, cbSceneParam._m0[63u].z, fma(_1590, cbSceneParam._m0[63u].y, _1586 * cbSceneParam._m0[63u].x)));
        float _1803 = fma(_1598, cbSceneParam._m0[60u].w, fma(_1594, cbSceneParam._m0[60u].z, fma(_1590, cbSceneParam._m0[60u].y, _1586 * cbSceneParam._m0[60u].x))) / _1802;
        float _1804 = fma(_1598, cbSceneParam._m0[61u].w, fma(_1594, cbSceneParam._m0[61u].z, fma(_1590, cbSceneParam._m0[61u].y, _1586 * cbSceneParam._m0[61u].x))) / _1802;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1803 >= cbSceneParam._m0[64u].x) && (_1804 >= cbSceneParam._m0[64u].y)) && (_1803 <= cbSceneParam._m0[64u].z)) && (_1804 <= cbSceneParam._m0[64u].w))
        {
            float _1943 = fma(_1598, cbSceneParam._m0[62u].w, fma(_1594, cbSceneParam._m0[62u].z, fma(_1590, cbSceneParam._m0[62u].y, _1586 * cbSceneParam._m0[62u].x))) / _1802;
            float _1947 = isnan(cbSceneParam._m0[41u].w) ? _1943 : (isnan(_1943) ? cbSceneParam._m0[41u].w : max(_1943, cbSceneParam._m0[41u].w));
            float _1990 = (cbSceneParam._m0[33u].x - sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601))) * cbSceneParam._m0[33u].y;
            float _4002 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
            float _1997 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1803, cbSceneParam._m0[33u].w + _1804), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1803, _1804 - cbSceneParam._m0[33u].z), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1803 - cbSceneParam._m0[33u].z, _1804 - cbSceneParam._m0[33u].w), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1803 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1804), _1947), 0.0)).x), vec4(0.25)));
            float _2001 = 1.0 - (_1997 * cbSceneParam._m0[34u].x);
            float _2002 = 1.0 - (_1997 * cbSceneParam._m0[34u].y);
            float _2003 = 1.0 - (_1997 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2002) ? _1749 : (isnan(_1749) ? _2002 : min(_1749, _2002));
            frontier_phi_36_35_ladder_1 = isnan(_2003) ? _1750 : (isnan(_1750) ? _2003 : min(_1750, _2003));
            frontier_phi_36_35_ladder_2 = isnan(_2001) ? _1748 : (isnan(_1748) ? _2001 : min(_1748, _2001));
        }
        else
        {
            frontier_phi_36_35_ladder = _1749;
            frontier_phi_36_35_ladder_1 = _1750;
            frontier_phi_36_35_ladder_2 = _1748;
        }
        _1814 = frontier_phi_36_35_ladder_2;
        _1816 = frontier_phi_36_35_ladder;
        _1818 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1814 = _1748;
        _1816 = _1749;
        _1818 = _1750;
    }
    uvec4 _1823 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1825 = _1823.x * 14u;
    uint _1826 = _1825 + 13u;
    float _1833 = _516 + (-1.0);
    float _1838 = (cbLight._m0[_1826].x * _1833) + 1.0;
    float _1839 = (cbLight._m0[_1826].y * _1833) + 1.0;
    float _1840 = (cbLight._m0[_1826].z * _1833) + 1.0;
    float _1841 = (cbLight._m0[_1826].w * _1833) + 1.0;
    uint _1842 = _1825 + 5u;
    float _1848 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1852 = _1825 + 4u;
    float _1862 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1866 = _1825 | 1u;
    float _1877 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_302, _303, _304));
    float _1880 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_302, _303, _304));
    float _4038 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _4049 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1885 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.3183098733425140380859375;
    float _1887 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1894 = ((cbLight._m0[_1842].x * _1848) * _1887) + (((cbLight._m0[_1852].x * _1814) * _1862) * _1885);
    float _1895 = ((_1848 * cbLight._m0[_1842].y) * _1887) + (((cbLight._m0[_1852].y * _1816) * _1862) * _1885);
    float _1896 = ((_1848 * cbLight._m0[_1842].z) * _1887) + (((cbLight._m0[_1852].z * _1818) * _1862) * _1885);
    uvec4 _1900 = floatBitsToUint(cbLight._m0[_1825 + 12u]);
    bool _1902 = _1900.x == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1902)
    {
        _2004 = _1894;
        _2006 = _1895;
        _2008 = _1896;
    }
    else
    {
        uint _2012 = _1825 + 6u;
        float _2028 = (dot(vec3(cbLight._m0[_1825 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _4060 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2031 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2004 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1894;
        _2006 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1895;
        _2008 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1896;
    }
    bool _2011 = _1900.y == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2011)
    {
        _2066 = _2004;
        _2068 = _2006;
        _2070 = _2008;
    }
    else
    {
        uint _2239 = _1825 + 7u;
        float _2255 = (dot(vec3(cbLight._m0[_1825 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4076 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2258 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2066 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2004;
        _2068 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2006;
        _2070 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2008;
    }
    uint _2073 = _1825 + 8u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _435) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1825].x + _382;
    float _2089 = cbLight._m0[_1825].y + _383;
    float _2090 = cbLight._m0[_1825].z + _384;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1825].xyz));
    float _4092 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2102 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2103 = dot(vec3(_302, _303, _304), vec3(_2095, _2096, _2097));
    float _4114 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2095, _2096, _2097));
    float _4125 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2087 * _2087;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2123 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
    float _2124 = 0.959999978542327880859375 - _498;
    float _2126 = 0.959999978542327880859375 - _499;
    float _2127 = 0.959999978542327880859375 - _500;
    float _2134 = 1.0 - _2087;
    float _2145 = (0.5 / (((_2102 * ((_2101 * _2134) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2134) + _2087) * _2101))) * _2101;
    float _4136 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    uint _2161 = _1825 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _435) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1866].x + _382;
    float _2175 = cbLight._m0[_1866].y + _383;
    float _2176 = cbLight._m0[_1866].z + _384;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1866].xyz));
    float _4147 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2188 = dot(vec3(_302, _303, _304), vec3(_2181, _2182, _2183));
    float _4158 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2181, _2182, _2183));
    float _4169 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0);
    float _2214 = 1.0 - _2173;
    float _2224 = (0.5 / (((_2102 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2214) + _2173) * _2187))) * _2187;
    float _4180 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2236 = (((((_2207 * _2124) + _501) * cbLight._m0[_2161].x) * _2226) * _1848) + ((((cbLight._m0[_2073].x * _1814) * ((_2123 * _2124) + _501)) * _2147) * _1862);
    float _2237 = (((((_2207 * _2126) + _503) * cbLight._m0[_2161].y) * _2226) * _1848) + ((((cbLight._m0[_2073].y * _1816) * ((_2123 * _2126) + _503)) * _2147) * _1862);
    float _2238 = (((((_2207 * _2127) + _504) * cbLight._m0[_2161].z) * _2226) * _1848) + ((((cbLight._m0[_2073].z * _1818) * ((_2123 * _2127) + _504)) * _2147) * _1862);
    float _2294;
    float _2296;
    float _2298;
    if (_1902)
    {
        _2294 = _2236;
        _2296 = _2237;
        _2298 = _2238;
    }
    else
    {
        uint _2300 = _1825 + 2u;
        uint _2304 = _1825 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _435) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _382;
        float _2321 = cbLight._m0[_2300].y + _383;
        float _2322 = cbLight._m0[_2300].z + _384;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2300].xyz));
        float _4191 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2334 = dot(vec3(_302, _303, _304), vec3(_2327, _2328, _2329));
        float _4202 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4213 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
        float _2360 = 1.0 - _2319;
        float _2370 = (0.5 / (((_2102 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2360) + _2319) * _2333))) * _2333;
        float _4224 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2294 = (((((_2353 * _2124) + _501) * cbLight._m0[_2304].x) * _2372) * _2373) + _2236;
        _2296 = (((((_2353 * _2126) + _503) * cbLight._m0[_2304].y) * _2372) * _2373) + _2237;
        _2298 = (((((_2353 * _2127) + _504) * cbLight._m0[_2304].z) * _2372) * _2373) + _2238;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2011)
    {
        _2404 = _2294;
        _2406 = _2296;
        _2408 = _2298;
    }
    else
    {
        uint _2415 = _1825 + 3u;
        uint _2419 = _1825 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _435) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _382;
        float _2436 = cbLight._m0[_2415].y + _383;
        float _2437 = cbLight._m0[_2415].z + _384;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2415].xyz));
        float _4240 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2449 = dot(vec3(_302, _303, _304), vec3(_2442, _2443, _2444));
        float _4251 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4262 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2102 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2475) + _2434) * _2448))) * _2448;
        float _4273 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2404 = (((((_2468 * _2124) + _501) * cbLight._m0[_2419].x) * _2487) * _2488) + _2294;
        _2406 = (((((_2468 * _2126) + _503) * cbLight._m0[_2419].y) * _2487) * _2488) + _2296;
        _2408 = (((((_2468 * _2127) + _504) * cbLight._m0[_2419].z) * _2487) * _2488) + _2298;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1823.y == 0u)
    {
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2510)));
        float _2531 = (log2(_1601 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            uint _2788 = 0u;
            uint _2797;
            bool _2798;
            for (;;)
            {
                _2797 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                _2798 = _2797 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2798)
                {
                    frontier_phi_68_pred = _2787;
                    frontier_phi_68_pred_1 = _2786;
                    frontier_phi_68_pred_2 = _2785;
                    frontier_phi_68_pred_3 = _2783;
                    frontier_phi_68_pred_4 = _2782;
                    frontier_phi_68_pred_5 = _2784;
                }
                else
                {
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    uint _2912;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2797;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    for (;;)
                    {
                        uint _2916 = uint(findLSB(_2912)) + (_2788 << 5u);
                        uint _2913 = (_2912 + 4294967295u) & _2912;
                        uint _2918 = _2916 * 48u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2938 = (_2916 * 48u) + 4u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2957 = (_2916 * 48u) + 8u;
                        vec3 _2968 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x));
                        float _2972 = _2932.x - _1599;
                        float _2973 = _2932.y - _1600;
                        float _2974 = _2932.z - _1601;
                        float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                        float _2978 = inversesqrt(_2975);
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2982 = dot(vec3(_416, _419, _422), vec3(_2979, _2980, _2981));
                        float _2987 = 1.0 - (_2975 * _2932.w);
                        float _4299 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2989 = sqrt(_2975) * _2951.w;
                        float _2992 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2982) + _2993;
                        float _2999 = _2989 * _2989;
                        float _3003 = ((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2988) / ((_2999 * 0.699999988079071044921875) + 1.0);
                        float _3007 = (-0.0) - _1599;
                        float _3008 = (-0.0) - _1600;
                        float _3009 = (-0.0) - _1601;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3023 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _532;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3014 + _2979;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_416, _419, _422), vec3(_3014, _3015, _3016));
                        float _4315 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3048 = dot(vec3(_416, _419, _422), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4326 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2992 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2982) + _3057;
                        float _4337 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4348 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) / ((_3055 * _3055) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2988;
                        _2841 = (_3003 * _2951.x) + _2909;
                        _2842 = (_3003 * _2951.y) + _2910;
                        _2843 = (_3003 * _2951.z) + _2911;
                        _2838 = (_3083 * _2968.x) + _2906;
                        _2839 = (_3083 * _2968.y) + _2907;
                        _2840 = (_3083 * _2968.z) + _2908;
                        if (_2913 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2913;
                        }
                    }
                    frontier_phi_68_pred = _2843;
                    frontier_phi_68_pred_1 = _2842;
                    frontier_phi_68_pred_2 = _2841;
                    frontier_phi_68_pred_3 = _2839;
                    frontier_phi_68_pred_4 = _2838;
                    frontier_phi_68_pred_5 = _2840;
                }
                _2649 = frontier_phi_68_pred;
                _2647 = frontier_phi_68_pred_1;
                _2645 = frontier_phi_68_pred_2;
                _2641 = frontier_phi_68_pred_3;
                _2639 = frontier_phi_68_pred_4;
                _2643 = frontier_phi_68_pred_5;
                uint _2789 = _2788 + 1u;
                if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2782 = _2639;
                    _2783 = _2641;
                    _2784 = _2643;
                    _2785 = _2645;
                    _2786 = _2647;
                    _2787 = _2649;
                    _2788 = _2789;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((4294967295u << _2655) & _2541) == 0u)
        {
            _2750 = _2638;
            _2752 = _2640;
            _2754 = _2642;
            _2756 = _2644;
            _2758 = _2646;
            _2760 = _2648;
        }
        else
        {
            float _2775 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
            float _2776 = _2775 * _1599;
            float _2777 = _2775 * _1600;
            float _2778 = _2775 * _1601;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2889 = _2638;
                float _2890 = _2640;
                float _2891 = _2642;
                float _2892 = _2644;
                float _2893 = _2646;
                float _2894 = _2648;
                uint _2895 = _2655;
                uint _2904;
                bool _2905;
                for (;;)
                {
                    _2904 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                    _2905 = _2904 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2905)
                    {
                        frontier_phi_74_pred = _2891;
                        frontier_phi_74_pred_1 = _2890;
                        frontier_phi_74_pred_2 = _2889;
                        frontier_phi_74_pred_3 = _2894;
                        frontier_phi_74_pred_4 = _2893;
                        frontier_phi_74_pred_5 = _2892;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        float _3105 = _2893;
                        float _3106 = _2894;
                        uint _3107 = _2904;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3177;
                        vec4 _3193;
                        float _3240;
                        bool _3241;
                        for (;;)
                        {
                            uint _3118 = ((_2895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3164 = (_3118 * 40u) + 16u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3180 = (_3118 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3196 = (_3118 * 40u) + 24u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3215 = (_3118 * 40u) + 28u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3240 = fma(_1601, _3228.z, fma(_1600, _3228.y, _3228.x * _1599)) + _3228.w;
                            _3241 = !((fma(_1601, _3209.z, fma(_1600, _3209.y, _3209.x * _1599)) + _3209.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3241)
                            {
                                float _3268 = _3133.x - _1599;
                                float _3269 = _3133.y - _1600;
                                float _3270 = _3133.z - _1601;
                                float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                                float _3274 = inversesqrt(_3271);
                                float _3275 = _3274 * _3268;
                                float _3276 = _3274 * _3269;
                                float _3277 = _3274 * _3270;
                                float _3281 = 1.0 - (_3271 / (_3134 * _3134));
                                float _4359 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3286 = sqrt(_3271) * _3149.w;
                                float _3288 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                                float _3289 = _3288 * _3288;
                                float _3292 = ((1.0 - _3289) * dot(vec3(_3275, _3276, _3277), vec3(_416, _419, _422))) + _3289;
                                float _3295 = _3286 * _3286;
                                float _3299 = (fma(_1601, _3177.z, fma(_1600, _3177.y, _3177.x * _1599)) + _3177.w) / _3240;
                                float _3300 = (fma(_1601, _3193.z, fma(_1600, _3193.y, _3193.x * _1599)) + _3193.w) / _3240;
                                float _3304 = 1.0 - dot(vec2(_3299, _3300), vec2(_3299, _3300));
                                float _4375 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3306 = _3305 * (((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3282) / ((_3295 * 0.699999988079071044921875) + 1.0));
                                float _3318 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                                float _3319 = 1.0 - _532;
                                float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                                float _3327 = _3326 * _3326;
                                float _3328 = _3327 * _3327;
                                float _3329 = _3275 - _2776;
                                float _3330 = _3276 - _2777;
                                float _3331 = _3277 - _2778;
                                float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                                float _3339 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2776, (-0.0) - _2777, (-0.0) - _2778));
                                float _4386 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3343 = dot(vec3(_416, _419, _422), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                                float _4397 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                                float _3351 = _3288 * _3327;
                                float _3352 = _3351 * _3351;
                                float _3358 = ((1.0 - _3352) * dot(vec3(_416, _419, _422), vec3(_3275, _3276, _3277))) + _3352;
                                float _4408 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3360 = 1.0 - _3327;
                                float _3370 = (0.5 / (((_3359 * ((_3342 * _3360) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3327) * _3342))) * _3359;
                                float _4419 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3380 = (_3305 * _3282) * (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3350 * _3350) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3380 * _3161.z;
                                frontier_phi_80_pred_1 = _3380 * _3161.y;
                                frontier_phi_80_pred_2 = _3380 * _3161.x;
                                frontier_phi_80_pred_3 = _3306 * _3149.z;
                                frontier_phi_80_pred_4 = _3306 * _3149.y;
                                frontier_phi_80_pred_5 = _3306 * _3149.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3386 = frontier_phi_80_pred;
                            _3385 = frontier_phi_80_pred_1;
                            _3384 = frontier_phi_80_pred_2;
                            _3389 = frontier_phi_80_pred_3;
                            _3388 = frontier_phi_80_pred_4;
                            _3387 = frontier_phi_80_pred_5;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            _3093 = _3389 + _3106;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3090;
                        frontier_phi_74_pred_1 = _3089;
                        frontier_phi_74_pred_2 = _3088;
                        frontier_phi_74_pred_3 = _3093;
                        frontier_phi_74_pred_4 = _3092;
                        frontier_phi_74_pred_5 = _3091;
                    }
                    _2755 = frontier_phi_74_pred;
                    _2753 = frontier_phi_74_pred_1;
                    _2751 = frontier_phi_74_pred_2;
                    _2761 = frontier_phi_74_pred_3;
                    _2759 = frontier_phi_74_pred_4;
                    _2757 = frontier_phi_74_pred_5;
                    uint _2896 = _2895 + 1u;
                    if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2889 = _2751;
                        _2890 = _2753;
                        _2891 = _2755;
                        _2892 = _2757;
                        _2893 = _2759;
                        _2894 = _2761;
                        _2895 = _2896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2759;
                frontier_phi_62_63_ladder_1 = _2757;
                frontier_phi_62_63_ladder_2 = _2755;
                frontier_phi_62_63_ladder_3 = _2761;
                frontier_phi_62_63_ladder_4 = _2753;
                frontier_phi_62_63_ladder_5 = _2751;
            }
            else
            {
                frontier_phi_62_63_ladder = _2646;
                frontier_phi_62_63_ladder_1 = _2644;
                frontier_phi_62_63_ladder_2 = _2642;
                frontier_phi_62_63_ladder_3 = _2648;
                frontier_phi_62_63_ladder_4 = _2640;
                frontier_phi_62_63_ladder_5 = _2638;
            }
            _2750 = frontier_phi_62_63_ladder_5;
            _2752 = frontier_phi_62_63_ladder_4;
            _2754 = frontier_phi_62_63_ladder_2;
            _2756 = frontier_phi_62_63_ladder_1;
            _2758 = frontier_phi_62_63_ladder;
            _2760 = frontier_phi_62_63_ladder_3;
        }
        float _2765 = isnan(1.0) ? _516 : (isnan(_516) ? 1.0 : min(_516, 1.0));
        _2553 = (_2765 * _2756) + _2066;
        _2555 = (_2765 * _2758) + _2068;
        _2557 = (_2765 * _2760) + _2070;
        _2559 = ((_2750 * _501) * _2765) + _2404;
        _2561 = ((_2752 * _503) * _2765) + _2406;
        _2563 = ((_2754 * _504) * _2765) + _2408;
    }
    else
    {
        _2553 = _2066;
        _2555 = _2068;
        _2557 = _2070;
        _2559 = _2404;
        _2561 = _2406;
        _2563 = _2408;
    }
    vec4 _2569 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4435 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4446 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4457 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _2593 = (((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2553 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _516))) + ((_2559 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1326)) * cbPerFrame._m0[3u].x)) + (_2569.x * cbMtdParam._m0[3u].x);
    float _2595 = ((_2569.y * cbMtdParam._m0[3u].x) + ((_2561 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1326)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2555 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _516)));
    float _2597 = ((_2569.z * cbMtdParam._m0[3u].x) + ((_2563 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1326)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2557 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _516)));
    uint _2601 = _448 + 6u;
    float _2609 = _390 / cbSceneParam._m0[86u].x;
    float _2610 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2664 = _2663 / _324;
        float _2675 = _2664 * _375;
        float _2676 = _376 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2678 = _2664 * _377;
        float _2680 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2681 = _2680 + cbSceneParam._m0[79u].w;
        float _2682 = cbSceneParam._m0[79u].w - _2676;
        float _2688 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2678 * _2678));
        float _2691 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2688;
        float _2696 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2698 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2851;
        if (abs((_2677 - _2680) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2851 = ((((_2681 > 0.0) ? exp2(_2696 * _2681) : (2.0 - exp2(_2698 * _2681))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2691;
        }
        else
        {
            float _2811 = 1.0 / cbSceneParam._m0[80u].x;
            float _2812 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : max(_2681, _2682));
            float _2813 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : min(_2681, _2682));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            _2851 = ((abs(_2688 / _2677) * cbSceneParam._m0[80u].y) * ((((_2822 - _2823) * 2.0) - ((exp2(_2696 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)))) - exp2(_2696 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))))) * _2811)) - ((exp2(_2698 * _2822) - exp2(_2698 * _2823)) * _2811))) + (_2691 * cbSceneParam._m0[80u].z);
        }
        vec4 _2853 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2862 = exp2((_2851 * (-1.44269502162933349609375)) * (1.0 - _2853.w));
        float _2863 = log2(_2862);
        float _2879 = log2(_2629);
        _2700 = (exp2(_2879 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].x)) * _2853.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2702 = (exp2(_2879 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].y)) * _2853.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2704 = (exp2(_2879 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].z)) * _2853.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2706 = _2862 * _2629;
    }
    else
    {
        _2700 = _2626;
        _2702 = _2627;
        _2704 = _2628;
        _2706 = _2629;
    }
    float _2718 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2719 = _2718 == 3.0;
    float _2720 = log2(_2706);
    float _2727 = exp2(_2720 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0)));
    float _2728 = exp2(_2720 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)));
    float _2729 = exp2(_2720 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0)));
    float _2738 = (_2718 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2738 * (_2719 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.y = _2738 * (_2719 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.z = _2738 * (_2719 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.w = cbInstanceData._m0[_2601].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2601].w;
}


