#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _956;
float _3389;
float _3390;
float _3391;
float _3392;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _240 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _253 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_240 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _240) + cbTextureTilingScale._m0[2u].w));
    float _275 = _273.x;
    vec4 _287 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _240) + cbTextureTilingScale._m0[1u].w));
    float _293 = cbMtdParam._m0[10u].y * _287.z;
    float _297 = (_287.x * 2.0) + (-1.0);
    float _299 = (_287.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3401 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))));
    float _309 = fma(_306, _226, fma(_299, _218 * TANGENT.x, (_204 * _196) * _297));
    float _312 = fma(_306, _227, fma(_299, _218 * TANGENT.y, (_204 * _197) * _297));
    float _315 = fma(_306, _228, fma(_299, _218 * TANGENT.z, (_204 * _198) * _297));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3412 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _323 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3434 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3445 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3456 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _327 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    vec4 _408 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _410 = _408.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_394 * _394) + (_395 * _395)) + (_396 * _396));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3467 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3478 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) - _642)) + _642) < ((_410 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _422 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _423 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _425 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _427 = _425.w;
    float _447 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _450 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _453 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    vec4 _455 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _466 = (((_455.y - _323) + (_455.w * _323)) * cbMtdParam._m0[3u].x) + _323;
    uint _479 = uint(roundEven(NORMAL.w)) * 13u;
    uint _481 = _479 + 9u;
    uint _482 = _481 + uint(cbMatDynParam._m0[0u].w);
    float _488 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_482].x;
    float _489 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_482].y;
    float _490 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_482].z;
    float _3489 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    vec4 _494 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _499 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _510 = (((_499.x - _327) + (_499.w * _327)) * cbMtdParam._m0[3u].x) + _327;
    float _523 = (cbMtdParam._m0[3u].x * (((_491 * _427) - _491) + _494.x)) + _491;
    float _524 = (cbMtdParam._m0[3u].x * (((_492 * _427) - _492) + _494.y)) + _492;
    float _525 = (cbMtdParam._m0[3u].x * (((_493 * _427) - _493) + _494.z)) + _493;
    float _526 = 1.0 - _510;
    float _527 = _526 * _523;
    float _528 = _526 * _524;
    float _529 = _526 * _525;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _510;
    float _535 = (_524 + (-0.039999999105930328369140625)) * _510;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _510;
    float _537 = _534 + 0.039999999105930328369140625;
    float _539 = _535 + 0.039999999105930328369140625;
    float _540 = _536 + 0.039999999105930328369140625;
    vec4 _549 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _422, cbSceneParam._m0[86u].y * _423));
    float _552 = _549.x * TEXCOORD_4;
    float _553 = dot(vec3(_320, _321, _322), vec3(_401, _402, _403));
    float _556 = _553 * 2.0;
    float _560 = (_556 * _320) - _401;
    float _561 = (_556 * _321) - _402;
    float _562 = (_556 * _322) - _403;
    float _566 = abs(dot(vec3(_401, _402, _403), vec3(_320, _321, _322)));
    float _3522 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _568 = sqrt(_466);
    float _581 = exp2((_568 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_568 * 3.0));
    float _587 = (1.0 - _581) * ((_568 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _588 = _581 * _568;
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _684 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _688 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _713 = _616 + _320;
        float _714 = _620 + _321;
        float _715 = _624 + _322;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_320, _321, _322), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3570 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_320, _321, _322), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3603 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_320, _321, _322), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3636 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1003 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1007 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1030 = _616 + _320;
        float _1031 = _620 + _321;
        float _1032 = _624 + _322;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_320, _321, _322), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3699 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_320, _321, _322), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3732 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_320, _321, _322), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3765 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = _956;
        _1278 = _956;
        _1279 = _956;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _560 * 0.5;
    float _1337 = _561 * 0.5;
    float _1338 = _562 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_955, _959, _962, _965));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_957, _960, _963, _966));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _961, _964, _967));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1454 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1458 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1462 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1465 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1468 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1471 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1499;
        if (_1465 > 0.0)
        {
            _1499 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1499 = frontier_phi_19_17_ladder;
        }
        float _1728;
        if (_1468 > 0.0)
        {
            _1728 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1728 = frontier_phi_28_24_ladder;
        }
        float _1985;
        if (_1471 > 0.0)
        {
            _1985 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1985 = frontier_phi_40_35_ladder;
        }
        float _1987 = isnan(_1728) ? _1499 : (isnan(_1499) ? _1728 : min(_1499, _1728));
        float _1988 = isnan(_1985) ? _1987 : (isnan(_1987) ? _1985 : min(_1987, _1985));
        float _1992 = (_1988 * _1465) + _1454;
        float _1993 = (_1988 * _1468) + _1458;
        float _1994 = (_1988 * _1471) + _1462;
        float _1995 = _1988 * 9.9999997473787516355514526367188e-05;
        float _1997 = (-1.0) - _1995;
        float _1999 = _1995 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1994 > _1999) || ((_1994 < _1997) || ((_1993 > _1999) || ((_1993 < _1997) || ((_1992 < _1997) || (_1992 > _1999))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2122 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1994, cbModelParam._m0[9u].z, fma(_1993, cbModelParam._m0[9u].y, _1992 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1994, cbModelParam._m0[10u].z, fma(_1993, cbModelParam._m0[10u].y, _1992 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1994, cbModelParam._m0[11u].z, fma(_1993, cbModelParam._m0[11u].y, _1992 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_18_40_ladder = _2122.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2122.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2122.x * cbModelParam._m0[1u].y;
        }
        _1487 = frontier_phi_18_40_ladder_2;
        _1489 = frontier_phi_18_40_ladder_1;
        _1491 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1405);
        _1487 = _1475.x * cbModelParam._m0[1u].y;
        _1489 = _1475.y * cbModelParam._m0[1u].y;
        _1491 = _1475.z * cbModelParam._m0[1u].y;
    }
    float _1495 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1495 : min(cbModelParam._m0[25u].w, _1495));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1567 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1570 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1733;
        if (_1564 > 0.0)
        {
            _1733 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1733 = frontier_phi_30_26_ladder;
        }
        float _2012;
        if (_1567 > 0.0)
        {
            _2012 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2012 = frontier_phi_42_37_ladder;
        }
        float _2225;
        if (_1570 > 0.0)
        {
            _2225 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2225 = frontier_phi_51_48_ladder;
        }
        float _2227 = isnan(_2012) ? _1733 : (isnan(_1733) ? _2012 : min(_1733, _2012));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1564) + _1553;
        float _2233 = (_2228 * _1567) + _1557;
        float _2234 = (_2228 * _1570) + _1561;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2234, cbModelParam._m0[17u].z, fma(_2233, cbModelParam._m0[17u].y, _2232 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2234, cbModelParam._m0[18u].z, fma(_2233, cbModelParam._m0[18u].y, _2232 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2234, cbModelParam._m0[19u].z, fma(_2233, cbModelParam._m0[19u].y, _2232 * cbModelParam._m0[19u].x))), _1496);
            frontier_phi_27_51_ladder = _2450.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2450.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2450.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_27_51_ladder_2;
        _1591 = frontier_phi_27_51_ladder_1;
        _1593 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1496);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1606 = (((_587 * _537) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_587 * _539) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1610 = (((_587 * _540) + _588) * _552) * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    vec4 _1627 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_422, _423));
    float _1629 = _1627.w;
    float _1641 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1629);
    float _1642 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1629);
    float _1643 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1629);
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_479 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1657 = _552 + (-1.0);
    float _1662 = (cbLight._m0[_1650].x * _1657) + 1.0;
    float _1663 = (cbLight._m0[_1650].y * _1657) + 1.0;
    float _1664 = (cbLight._m0[_1650].z * _1657) + 1.0;
    float _1665 = (cbLight._m0[_1650].w * _1657) + 1.0;
    uint _1666 = _1649 + 5u;
    float _1672 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1676 = _1649 + 4u;
    float _1686 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1690 = _1649 | 1u;
    float _1701 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_320, _321, _322));
    float _1704 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_320, _321, _322));
    float _3901 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _3912 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1709 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1711 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1718 = ((cbLight._m0[_1666].x * _1672) * _1711) + (((cbLight._m0[_1676].x * _1641) * _1686) * _1709);
    float _1719 = ((_1672 * cbLight._m0[_1666].y) * _1711) + (((cbLight._m0[_1676].y * _1642) * _1686) * _1709);
    float _1720 = ((_1672 * cbLight._m0[_1666].z) * _1711) + (((cbLight._m0[_1676].z * _1643) * _1686) * _1709);
    uvec4 _1725 = floatBitsToUint(cbLight._m0[_1649 + 12u]);
    bool _1727 = _1725.x == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1727)
    {
        _1738 = _1718;
        _1740 = _1719;
        _1742 = _1720;
    }
    else
    {
        uint _1746 = _1649 + 6u;
        float _1762 = (dot(vec3(cbLight._m0[_1649 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1763 = _1762 * _1762;
        float _3923 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1765 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1738 = (((cbLight._m0[_1746].x * 0.3183098733425140380859375) * _1764) * _1765) + _1718;
        _1740 = (((cbLight._m0[_1746].y * 0.3183098733425140380859375) * _1764) * _1765) + _1719;
        _1742 = (((cbLight._m0[_1746].z * 0.3183098733425140380859375) * _1764) * _1765) + _1720;
    }
    bool _1745 = _1725.y == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1745)
    {
        _1783 = _1738;
        _1785 = _1740;
        _1787 = _1742;
    }
    else
    {
        uint _1956 = _1649 + 7u;
        float _1972 = (dot(vec3(cbLight._m0[_1649 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1973 = _1972 * _1972;
        float _3939 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1975 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1783 = (((cbLight._m0[_1956].x * 0.3183098733425140380859375) * _1974) * _1975) + _1738;
        _1785 = (((cbLight._m0[_1956].y * 0.3183098733425140380859375) * _1974) * _1975) + _1740;
        _1787 = (((cbLight._m0[_1956].z * 0.3183098733425140380859375) * _1974) * _1975) + _1742;
    }
    uint _1790 = _1649 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1649].w)) * _466) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1649].x + _401;
    float _1806 = cbLight._m0[_1649].y + _402;
    float _1807 = cbLight._m0[_1649].z + _403;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1649].xyz));
    float _3955 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _1819 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1820 = dot(vec3(_320, _321, _322), vec3(_1812, _1813, _1814));
    float _3977 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1812, _1813, _1814));
    float _3988 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1840 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
    float _1841 = 0.959999978542327880859375 - _534;
    float _1843 = 0.959999978542327880859375 - _535;
    float _1844 = 0.959999978542327880859375 - _536;
    float _1851 = 1.0 - _1804;
    float _1862 = (0.5 / (((_1819 * ((_1818 * _1851) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1851) + _1804) * _1818))) * _1818;
    float _3999 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1878 = _1649 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _466) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1690].x + _401;
    float _1892 = cbLight._m0[_1690].y + _402;
    float _1893 = cbLight._m0[_1690].z + _403;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1690].xyz));
    float _4010 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1905 = dot(vec3(_320, _321, _322), vec3(_1898, _1899, _1900));
    float _4021 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1898, _1899, _1900));
    float _4032 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0);
    float _1931 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1819 * ((_1904 * _1931) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1931) + _1890) * _1904))) * _1904;
    float _4043 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1953 = (((((_1924 * _1841) + _537) * cbLight._m0[_1878].x) * _1943) * _1672) + ((((cbLight._m0[_1790].x * _1641) * ((_1840 * _1841) + _537)) * _1864) * _1686);
    float _1954 = (((((_1924 * _1843) + _539) * cbLight._m0[_1878].y) * _1943) * _1672) + ((((cbLight._m0[_1790].y * _1642) * ((_1840 * _1843) + _539)) * _1864) * _1686);
    float _1955 = (((((_1924 * _1844) + _540) * cbLight._m0[_1878].z) * _1943) * _1672) + ((((cbLight._m0[_1790].z * _1643) * ((_1840 * _1844) + _540)) * _1864) * _1686);
    float _2017;
    float _2019;
    float _2021;
    if (_1727)
    {
        _2017 = _1953;
        _2019 = _1954;
        _2021 = _1955;
    }
    else
    {
        uint _2023 = _1649 + 2u;
        uint _2027 = _1649 + 10u;
        float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _466) * 0.949999988079071044921875);
        float _2042 = _2041 * _2041;
        float _2043 = cbLight._m0[_2023].x + _401;
        float _2044 = cbLight._m0[_2023].y + _402;
        float _2045 = cbLight._m0[_2023].z + _403;
        float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
        float _2050 = _2049 * _2043;
        float _2051 = _2049 * _2044;
        float _2052 = _2049 * _2045;
        float _2053 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2023].xyz));
        float _4054 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2057 = dot(vec3(_320, _321, _322), vec3(_2050, _2051, _2052));
        float _4065 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2061 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2050, _2051, _2052));
        float _4076 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2065 = _2042 * _2042;
        float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
        float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0);
        float _2083 = 1.0 - _2042;
        float _2093 = (0.5 / (((_1819 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2083) + _2042) * _2056))) * _2056;
        float _4087 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2017 = (((((_2076 * _1841) + _537) * cbLight._m0[_2027].x) * _2095) * _2096) + _1953;
        _2019 = (((((_2076 * _1843) + _539) * cbLight._m0[_2027].y) * _2095) * _2096) + _1954;
        _2021 = (((((_2076 * _1844) + _540) * cbLight._m0[_2027].z) * _2095) * _2096) + _1955;
    }
    float _2131;
    float _2133;
    float _2135;
    if (_1745)
    {
        _2131 = _2017;
        _2133 = _2019;
        _2135 = _2021;
    }
    else
    {
        uint _2142 = _1649 + 3u;
        uint _2146 = _1649 + 11u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _466) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _401;
        float _2163 = cbLight._m0[_2142].y + _402;
        float _2164 = cbLight._m0[_2142].z + _403;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2142].xyz));
        float _4103 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2176 = dot(vec3(_320, _321, _322), vec3(_2169, _2170, _2171));
        float _4114 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4125 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2195 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
        float _2202 = 1.0 - _2161;
        float _2212 = (0.5 / (((_1819 * ((_2175 * _2202) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2202) + _2161) * _2175))) * _2175;
        float _4136 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2215 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2131 = (((((_2195 * _1841) + _537) * cbLight._m0[_2146].x) * _2214) * _2215) + _2017;
        _2133 = (((((_2195 * _1843) + _539) * cbLight._m0[_2146].y) * _2214) * _2215) + _2019;
        _2135 = (((((_2195 * _1844) + _540) * cbLight._m0[_2146].z) * _2214) * _2215) + _2021;
    }
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_1647.y == 0u)
    {
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2290;
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2290;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2290;
        uvec4 _2305 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2306 = _2305.x;
        uint _2317 = uint((float(_2305.y) * floor(float(uint(cbSceneParam._m0[85u].y * _423) / _2306))) + floor(float(uint(cbSceneParam._m0[85u].x * _422) / _2306)));
        float _2327 = (log2(_2293 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2328 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        uint _2331 = uint(isnan(14.0) ? _2328 : (isnan(_2328) ? 14.0 : min(_2328, 14.0)));
        uvec4 _2336 = texelFetch(g_lightClusterGridBuffer, int(((_2331 << 2u) + (_2317 << 6u)) >> 2u));
        uint _2337 = _2336.x;
        uint _2338 = _2305.z;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((((1u << ((_2338 >> 4u) & 15u)) + 4294967295u) & _2337) == 0u) || ((_2338 & 240u) == 0u))
        {
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
        }
        else
        {
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2623)
                {
                    frontier_phi_68_pred = _2609;
                    frontier_phi_68_pred_1 = _2612;
                    frontier_phi_68_pred_2 = _2611;
                    frontier_phi_68_pred_3 = _2610;
                    frontier_phi_68_pred_4 = _2608;
                    frontier_phi_68_pred_5 = _2607;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2622;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2613 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        float _2818 = _2778.x - _2291;
                        float _2819 = _2778.y - _2292;
                        float _2820 = _2778.z - _2293;
                        float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                        float _2824 = inversesqrt(_2821);
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2828 = dot(vec3(_447, _450, _453), vec3(_2825, _2826, _2827));
                        float _2833 = 1.0 - (_2821 * _2778.w);
                        float _4162 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2835 = sqrt(_2821) * _2797.w;
                        float _2838 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2828) + _2839;
                        float _2845 = _2835 * _2835;
                        float _2849 = ((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2834) / ((_2845 * 0.699999988079071044921875) + 1.0);
                        float _2853 = (-0.0) - _2291;
                        float _2854 = (-0.0) - _2292;
                        float _2855 = (-0.0) - _2293;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2870 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _568;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_447, _450, _453), vec3(_2860, _2861, _2862));
                        float _4178 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2895 = dot(vec3(_447, _450, _453), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4189 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2838 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2828) + _2904;
                        float _4200 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4211 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_2902 * _2902) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2834;
                        _2682 = (_2849 * _2797.x) + _2755;
                        _2683 = (_2849 * _2797.y) + _2756;
                        _2684 = (_2849 * _2797.z) + _2757;
                        _2679 = (_2930 * _2814.x) + _2752;
                        _2680 = (_2930 * _2814.y) + _2753;
                        _2681 = (_2930 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_68_pred = _2681;
                    frontier_phi_68_pred_1 = _2684;
                    frontier_phi_68_pred_2 = _2683;
                    frontier_phi_68_pred_3 = _2682;
                    frontier_phi_68_pred_4 = _2680;
                    frontier_phi_68_pred_5 = _2679;
                }
                _2460 = frontier_phi_68_pred;
                _2466 = frontier_phi_68_pred_1;
                _2464 = frontier_phi_68_pred_2;
                _2462 = frontier_phi_68_pred_3;
                _2458 = frontier_phi_68_pred_4;
                _2456 = frontier_phi_68_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2456;
                    _2608 = _2458;
                    _2609 = _2460;
                    _2610 = _2462;
                    _2611 = _2464;
                    _2612 = _2466;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
        }
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.z;
        uint _2472 = (_2470 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2472) & _2337) == 0u)
        {
            _2575 = _2455;
            _2577 = _2457;
            _2579 = _2459;
            _2581 = _2461;
            _2583 = _2463;
            _2585 = _2465;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
            float _2601 = _2600 * _2291;
            float _2602 = _2600 * _2292;
            float _2603 = _2600 * _2293;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2472 < ((_2470 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2735 = _2455;
                float _2736 = _2457;
                float _2737 = _2459;
                float _2738 = _2461;
                float _2739 = _2463;
                float _2740 = _2465;
                uint _2741 = _2472;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2331 << 5u) + (_2317 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2751)
                    {
                        frontier_phi_79_pred = _2740;
                        frontier_phi_79_pred_1 = _2739;
                        frontier_phi_79_pred_2 = _2738;
                        frontier_phi_79_pred_3 = _2737;
                        frontier_phi_79_pred_4 = _2736;
                        frontier_phi_79_pred_5 = _2735;
                    }
                    else
                    {
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        uint _2963 = _2750;
                        uint _2964;
                        vec4 _2989;
                        float _2990;
                        vec4 _3005;
                        vec3 _3017;
                        vec4 _3033;
                        vec4 _3049;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2974 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2963));
                            _2964 = (_2963 + 4294967295u) & _2963;
                            uint _2976 = _2974 * 40u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _2990 = _2989.w;
                            uint _2992 = (_2974 * 40u) + 4u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2974 * 40u) + 8u;
                            _3017 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x));
                            uint _3020 = (_2974 * 40u) + 16u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3036 = (_2974 * 40u) + 20u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2974 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2974 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_2293, _3084.z, fma(_2292, _3084.y, _3084.x * _2291)) + _3084.w;
                            _3097 = !((fma(_2293, _3065.z, fma(_2292, _3065.y, _3065.x * _2291)) + _3065.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2989.x - _2291;
                                float _3125 = _2989.y - _2292;
                                float _3126 = _2989.z - _2293;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2990 * _2990));
                                float _4222 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3142 = sqrt(_3127) * _3005.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_447, _450, _453))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_2293, _3033.z, fma(_2292, _3033.y, _3033.x * _2291)) + _3033.w) / _3096;
                                float _3156 = (fma(_2293, _3049.z, fma(_2292, _3049.y, _3049.x * _2291)) + _3049.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4238 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _568;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2601;
                                float _3186 = _3132 - _2602;
                                float _3187 = _3133 - _2603;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4249 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3199 = dot(vec3(_447, _450, _453), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4260 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_447, _450, _453), vec3(_3131, _3132, _3133))) + _3208;
                                float _4271 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4282 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3162 * _3005.z;
                                frontier_phi_85_pred_1 = _3162 * _3005.y;
                                frontier_phi_85_pred_2 = _3162 * _3005.x;
                                frontier_phi_85_pred_3 = _3236 * _3017.z;
                                frontier_phi_85_pred_4 = _3236 * _3017.y;
                                frontier_phi_85_pred_5 = _3236 * _3017.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3245 = frontier_phi_85_pred;
                            _3244 = frontier_phi_85_pred_1;
                            _3243 = frontier_phi_85_pred_2;
                            _3242 = frontier_phi_85_pred_3;
                            _3241 = frontier_phi_85_pred_4;
                            _3240 = frontier_phi_85_pred_5;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            _2949 = _3245 + _2962;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            if (_2964 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2964;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2949;
                        frontier_phi_79_pred_1 = _2948;
                        frontier_phi_79_pred_2 = _2947;
                        frontier_phi_79_pred_3 = _2946;
                        frontier_phi_79_pred_4 = _2945;
                        frontier_phi_79_pred_5 = _2944;
                    }
                    _2586 = frontier_phi_79_pred;
                    _2584 = frontier_phi_79_pred_1;
                    _2582 = frontier_phi_79_pred_2;
                    _2580 = frontier_phi_79_pred_3;
                    _2578 = frontier_phi_79_pred_4;
                    _2576 = frontier_phi_79_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2576;
                        _2736 = _2578;
                        _2737 = _2580;
                        _2738 = _2582;
                        _2739 = _2584;
                        _2740 = _2586;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2582;
                frontier_phi_60_61_ladder_1 = _2586;
                frontier_phi_60_61_ladder_2 = _2584;
                frontier_phi_60_61_ladder_3 = _2580;
                frontier_phi_60_61_ladder_4 = _2578;
                frontier_phi_60_61_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_60_61_ladder = _2461;
                frontier_phi_60_61_ladder_1 = _2465;
                frontier_phi_60_61_ladder_2 = _2463;
                frontier_phi_60_61_ladder_3 = _2459;
                frontier_phi_60_61_ladder_4 = _2457;
                frontier_phi_60_61_ladder_5 = _2455;
            }
            _2575 = frontier_phi_60_61_ladder_5;
            _2577 = frontier_phi_60_61_ladder_4;
            _2579 = frontier_phi_60_61_ladder_3;
            _2581 = frontier_phi_60_61_ladder;
            _2583 = frontier_phi_60_61_ladder_2;
            _2585 = frontier_phi_60_61_ladder_1;
        }
        float _2590 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        _2349 = (_2590 * _2581) + _1783;
        _2351 = (_2590 * _2583) + _1785;
        _2353 = (_2590 * _2585) + _1787;
        _2355 = ((_2575 * _537) * _2590) + _2131;
        _2357 = ((_2577 * _539) * _2590) + _2133;
        _2359 = ((_2579 * _540) * _2590) + _2135;
    }
    else
    {
        _2349 = _1783;
        _2351 = _1785;
        _2353 = _1787;
        _2355 = _2131;
        _2357 = _2133;
        _2359 = _2135;
    }
    vec4 _2365 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4298 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4309 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4320 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _2389 = (((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2349 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _552))) + ((_2355 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + (_2365.x * cbMtdParam._m0[3u].x);
    float _2391 = ((_2365.y * cbMtdParam._m0[3u].x) + ((_2357 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2351 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _552)));
    float _2393 = ((_2365.z * cbMtdParam._m0[3u].x) + ((_2359 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2353 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _552)));
    float _2394 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2395 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    uint _2397 = _479 + 6u;
    float _2405 = _422 / cbSceneParam._m0[86u].x;
    float _2406 = _423 / cbSceneParam._m0[86u].y;
    vec4 _2420 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2422 = _2420.x;
    float _2423 = _2420.y;
    float _2424 = _2420.z;
    float _2425 = _2420.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2480 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2481 = _2480 / _343;
        float _2492 = _2481 * _394;
        float _2493 = _395 * _2481;
        float _2494 = (-0.0) - _2493;
        float _2495 = _2481 * _396;
        float _2497 = (cbSceneParam._m0[77u].w * _2494) / _2480;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2493;
        float _2505 = sqrt(((_2492 * _2492) + (_2493 * _2493)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2480)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2692;
        if (abs((_2494 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2692 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2638 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2692 = ((abs(_2505 / _2494) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2515 * _2647) - exp2(_2515 * _2648)) * _2636))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2694 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, 1.0), 0.0);
        float _2703 = exp2((_2692 * (-1.44269502162933349609375)) * (1.0 - _2694.w));
        float _2704 = log2(_2703);
        float _2720 = log2(_2425);
        _2517 = (exp2(_2720 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].x)) * _2694.x) / cbSceneParam._m0[78u].x)) + _2422;
        _2519 = (exp2(_2720 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].y)) * _2694.y) / cbSceneParam._m0[78u].y)) + _2423;
        _2521 = (exp2(_2720 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].z)) * _2694.z) / cbSceneParam._m0[78u].z)) + _2424;
        _2523 = _2703 * _2425;
    }
    else
    {
        _2517 = _2422;
        _2519 = _2423;
        _2521 = _2424;
        _2523 = _2425;
    }
    bool _2730;
    vec4 _2533;
    vec4 _2555;
    float _2557;
    float _2561;
    float _2562;
    float _2563;
    float _2564;
    bool _2574;
    for (;;)
    {
        _2533 = cbMatDynParam._m0[0u];
        float _2535 = roundEven(_2533.y);
        bool _2536 = _2535 == 3.0;
        float _2537 = log2(_2523);
        float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * _2394;
        float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * _2395;
        float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * _2396;
        float _2553 = _410 + (-0.5);
        _2555 = cbMtdParam._m0[1u];
        _2557 = _2555.y * _2553;
        float _2560 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2561 = _2560 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
        _2562 = _2560 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
        _2563 = _2560 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
        _2564 = _2553 * 0.999000012874603271484375;
        _2574 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2574)
        {
            if ((cbInstanceData._m0[_479 + 7u].x + _2564) < 0.5)
            {
                _2730 = true;
                break;
            }
        }
        uint _2671 = _481 + uint(_2533.w);
        if ((cbInstanceData._m0[_2671].w < 1.0) && ((cbInstanceData._m0[_2671].w + _2564) < 0.5))
        {
            _2730 = true;
            break;
        }
        if ((_2557 + 1.0) < _2555.x)
        {
            _2730 = true;
            break;
        }
        _2730 = false;
        break;
    }
    float _2935;
    if (_2730)
    {
        discard_state = true;
        _2935 = 0.0;
    }
    else
    {
        _2935 = cbInstanceData._m0[_2397].w;
    }
    SV_Target.x = _2561;
    SV_Target.y = _2562;
    SV_Target.z = _2563;
    SV_Target.w = _2935;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2397].w;
    discard_exit();
}


