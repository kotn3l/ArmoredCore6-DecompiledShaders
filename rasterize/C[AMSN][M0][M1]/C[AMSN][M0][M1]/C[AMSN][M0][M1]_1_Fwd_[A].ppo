#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _932;
float _3341;
float _3342;
float _3343;
float _3344;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _236 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _249 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_236 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _269 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _236) + cbTextureTilingScale._m0[1u].w));
    float _275 = cbMtdParam._m0[10u].y * _269.z;
    float _279 = (_269.x * 2.0) + (-1.0);
    float _281 = (_269.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3353 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _291 = fma(_288, _222, fma(_281, _214 * TANGENT.x, (_200 * _192) * _279));
    float _294 = fma(_288, _223, fma(_281, _214 * TANGENT.y, (_200 * _193) * _279));
    float _297 = fma(_288, _224, fma(_281, _214 * TANGENT.z, (_200 * _194) * _279));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3364 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _305 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3386 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3397 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    vec4 _389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _391 = _389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _611 = sqrt(((_375 * _375) + (_376 * _376)) + (_377 * _377));
        float _617 = (cbMatDynParam._m0[5u].x * _611) + cbMatDynParam._m0[5u].y;
        float _3408 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _622 = (cbMatDynParam._m0[5u].z * _611) + cbMatDynParam._m0[5u].w;
        float _3419 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) - _618)) + _618) < ((_391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _406 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _408 = _406.w;
    float _428 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _434 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    vec4 _436 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _447 = (((_436.y - _305) + (_436.w * _305)) * cbMtdParam._m0[3u].x) + _305;
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _460 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3430 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    vec4 _475 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _480 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _486 = cbMtdParam._m0[3u].x * _480.x;
    float _499 = (cbMtdParam._m0[3u].x * (((_472 * _408) - _472) + _475.x)) + _472;
    float _500 = (cbMtdParam._m0[3u].x * (((_473 * _408) - _473) + _475.y)) + _473;
    float _501 = (cbMtdParam._m0[3u].x * (((_474 * _408) - _474) + _475.z)) + _474;
    float _502 = 1.0 - _486;
    float _503 = _499 * _502;
    float _504 = _500 * _502;
    float _505 = _501 * _502;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _486;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _486;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _486;
    float _513 = _510 + 0.039999999105930328369140625;
    float _515 = _511 + 0.039999999105930328369140625;
    float _516 = _512 + 0.039999999105930328369140625;
    vec4 _525 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _528 = _525.x * TEXCOORD_4;
    float _529 = dot(vec3(_302, _303, _304), vec3(_382, _383, _384));
    float _532 = _529 * 2.0;
    float _536 = (_532 * _302) - _382;
    float _537 = (_532 * _303) - _383;
    float _538 = (_532 * _304) - _384;
    float _542 = abs(dot(vec3(_382, _383, _384), vec3(_302, _303, _304)));
    float _3463 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _544 = sqrt(_447);
    float _557 = exp2((_544 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_544 * 3.0));
    float _563 = (1.0 - _557) * ((_544 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _564 = _557 * _544;
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _660 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _664 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _689 = _592 + _302;
        float _690 = _596 + _303;
        float _691 = _600 + _304;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_302, _303, _304), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3511 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_302, _303, _304), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3544 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_302, _303, _304), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3577 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _975 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _979 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _983 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _1006 = _592 + _302;
        float _1007 = _596 + _303;
        float _1008 = _600 + _304;
        float _1018 = fma(_1008, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_975 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_979 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[35u].z) + ((((((_983 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_302, _303, _304), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3640 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_302, _303, _304), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3673 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_302, _303, _304), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3706 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = _932;
        _1254 = _932;
        _1255 = _932;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _536 * 0.5;
    float _1313 = _537 * 0.5;
    float _1314 = _538 * 0.5;
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_931, _935, _938, _941));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_933, _936, _939, _942));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_934, _937, _940, _943));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1380 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1380 : min(cbModelParam._m0[25u].z, _1380));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1430 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1434 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1438 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1441 = fma(_538, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536));
        float _1444 = fma(_538, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536));
        float _1447 = fma(_538, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536));
        float _1475;
        if (_1441 > 0.0)
        {
            _1475 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1475 = frontier_phi_19_17_ladder;
        }
        float _1683;
        if (_1444 > 0.0)
        {
            _1683 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1683 = frontier_phi_28_24_ladder;
        }
        float _1937;
        if (_1447 > 0.0)
        {
            _1937 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1937 = frontier_phi_40_35_ladder;
        }
        float _1939 = isnan(_1683) ? _1475 : (isnan(_1475) ? _1683 : min(_1475, _1683));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1441) + _1430;
        float _1945 = (_1940 * _1444) + _1434;
        float _1946 = (_1940 * _1447) + _1438;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1949 = (-1.0) - _1947;
        float _1951 = _1947 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1946 > _1951) || ((_1946 < _1949) || ((_1945 > _1951) || ((_1945 < _1949) || ((_1944 < _1949) || (_1944 > _1951))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1946, cbModelParam._m0[9u].z, fma(_1945, cbModelParam._m0[9u].y, _1944 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1946, cbModelParam._m0[10u].z, fma(_1945, cbModelParam._m0[10u].y, _1944 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1946, cbModelParam._m0[11u].z, fma(_1945, cbModelParam._m0[11u].y, _1944 * cbModelParam._m0[11u].x))), _1381);
            frontier_phi_18_40_ladder = _2074.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2074.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2074.x * cbModelParam._m0[1u].y;
        }
        _1463 = frontier_phi_18_40_ladder_2;
        _1465 = frontier_phi_18_40_ladder_1;
        _1467 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_536, _537, _538), _1381);
        _1463 = _1451.x * cbModelParam._m0[1u].y;
        _1465 = _1451.y * cbModelParam._m0[1u].y;
        _1467 = _1451.z * cbModelParam._m0[1u].y;
    }
    float _1471 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1471 : min(cbModelParam._m0[25u].w, _1471));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_538, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536));
        float _1543 = fma(_538, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536));
        float _1546 = fma(_538, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536));
        float _1688;
        if (_1540 > 0.0)
        {
            _1688 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1688 = frontier_phi_30_26_ladder;
        }
        float _1964;
        if (_1543 > 0.0)
        {
            _1964 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1964 = frontier_phi_42_37_ladder;
        }
        float _2177;
        if (_1546 > 0.0)
        {
            _2177 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2177 = frontier_phi_51_48_ladder;
        }
        float _2179 = isnan(_1964) ? _1688 : (isnan(_1688) ? _1964 : min(_1688, _1964));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1540) + _1529;
        float _2185 = (_2180 * _1543) + _1533;
        float _2186 = (_2180 * _1546) + _1537;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1472);
            frontier_phi_27_51_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_27_51_ladder_2;
        _1567 = frontier_phi_27_51_ladder_1;
        _1569 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_536, _537, _538), _1472);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1582 = (((_563 * _513) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_563 * _515) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_563 * _516) + _564) * _528) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1589 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    uvec4 _1605 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1607 = _1605.x * 14u;
    uint _1608 = _1607 + 13u;
    float _1615 = _528 + (-1.0);
    float _1620 = (cbLight._m0[_1608].x * _1615) + 1.0;
    float _1621 = (cbLight._m0[_1608].y * _1615) + 1.0;
    float _1622 = (cbLight._m0[_1608].z * _1615) + 1.0;
    float _1623 = (cbLight._m0[_1608].w * _1615) + 1.0;
    uint _1624 = _1607 + 5u;
    float _1630 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
    uint _1634 = _1607 + 4u;
    float _1641 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
    uint _1645 = _1607 | 1u;
    float _1656 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_302, _303, _304));
    float _1659 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_302, _303, _304));
    float _3842 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _3853 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1664 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.3183098733425140380859375;
    float _1666 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1673 = ((cbLight._m0[_1624].x * _1630) * _1666) + ((cbLight._m0[_1634].x * _1641) * _1664);
    float _1674 = ((_1630 * cbLight._m0[_1624].y) * _1666) + ((_1641 * cbLight._m0[_1634].y) * _1664);
    float _1675 = ((_1630 * cbLight._m0[_1624].z) * _1666) + ((_1641 * cbLight._m0[_1634].z) * _1664);
    uvec4 _1680 = floatBitsToUint(cbLight._m0[_1607 + 12u]);
    bool _1682 = _1680.x == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1682)
    {
        _1693 = _1673;
        _1695 = _1674;
        _1697 = _1675;
    }
    else
    {
        uint _1701 = _1607 + 6u;
        float _1717 = (dot(vec3(cbLight._m0[_1607 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3864 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1720 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1693 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1673;
        _1695 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1674;
        _1697 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1675;
    }
    bool _1700 = _1680.y == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1700)
    {
        _1738 = _1693;
        _1740 = _1695;
        _1742 = _1697;
    }
    else
    {
        uint _1908 = _1607 + 7u;
        float _1924 = (dot(vec3(cbLight._m0[_1607 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _3880 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1927 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1738 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1693;
        _1740 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1695;
        _1742 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1697;
    }
    uint _1745 = _1607 + 8u;
    float _1758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _447) * 0.949999988079071044921875);
    float _1759 = _1758 * _1758;
    float _1760 = cbLight._m0[_1607].x + _382;
    float _1761 = cbLight._m0[_1607].y + _383;
    float _1762 = cbLight._m0[_1607].z + _384;
    float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
    float _1767 = _1766 * _1760;
    float _1768 = _1766 * _1761;
    float _1769 = _1766 * _1762;
    float _1770 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1607].xyz));
    float _3896 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _1774 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1775 = dot(vec3(_302, _303, _304), vec3(_1767, _1768, _1769));
    float _3918 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1779 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1767, _1768, _1769));
    float _3929 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1783 = _1759 * _1759;
    float _1787 = ((_1778 * _1778) * (_1783 + (-1.0))) + 1.0;
    float _1795 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
    float _1796 = 0.959999978542327880859375 - _510;
    float _1798 = 0.959999978542327880859375 - _511;
    float _1799 = 0.959999978542327880859375 - _512;
    float _1806 = 1.0 - _1759;
    float _1817 = (0.5 / (((_1774 * ((_1773 * _1806) + _1759)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1806) + _1759) * _1773))) * _1773;
    float _3940 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1783 / ((_1787 * _1787) * 3.141590118408203125));
    uint _1830 = _1607 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _447) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1645].x + _382;
    float _1844 = cbLight._m0[_1645].y + _383;
    float _1845 = cbLight._m0[_1645].z + _384;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1645].xyz));
    float _3951 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1857 = dot(vec3(_302, _303, _304), vec3(_1850, _1851, _1852));
    float _3962 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1850, _1851, _1852));
    float _3973 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1876 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
    float _1883 = 1.0 - _1842;
    float _1893 = (0.5 / (((_1774 * ((_1856 * _1883) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1883) + _1842) * _1856))) * _1856;
    float _3984 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1905 = (((((_1876 * _1796) + _513) * cbLight._m0[_1830].x) * _1895) * _1630) + (((((_1795 * _1796) + _513) * cbLight._m0[_1745].x) * _1819) * _1641);
    float _1906 = (((((_1876 * _1798) + _515) * cbLight._m0[_1830].y) * _1895) * _1630) + (((((_1795 * _1798) + _515) * cbLight._m0[_1745].y) * _1819) * _1641);
    float _1907 = (((((_1876 * _1799) + _516) * cbLight._m0[_1830].z) * _1895) * _1630) + (((((_1795 * _1799) + _516) * cbLight._m0[_1745].z) * _1819) * _1641);
    float _1969;
    float _1971;
    float _1973;
    if (_1682)
    {
        _1969 = _1905;
        _1971 = _1906;
        _1973 = _1907;
    }
    else
    {
        uint _1975 = _1607 + 2u;
        uint _1979 = _1607 + 10u;
        float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _447) * 0.949999988079071044921875);
        float _1994 = _1993 * _1993;
        float _1995 = cbLight._m0[_1975].x + _382;
        float _1996 = cbLight._m0[_1975].y + _383;
        float _1997 = cbLight._m0[_1975].z + _384;
        float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
        float _2002 = _2001 * _1995;
        float _2003 = _2001 * _1996;
        float _2004 = _2001 * _1997;
        float _2005 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1975].xyz));
        float _3995 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2009 = dot(vec3(_302, _303, _304), vec3(_2002, _2003, _2004));
        float _4006 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2013 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2002, _2003, _2004));
        float _4017 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2017 = _1994 * _1994;
        float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
        float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
        float _2035 = 1.0 - _1994;
        float _2045 = (0.5 / (((_1774 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2035) + _1994) * _2008))) * _2008;
        float _4028 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2047 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
        float _2048 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1969 = (((((_2028 * _1796) + _513) * cbLight._m0[_1979].x) * _2047) * _2048) + _1905;
        _1971 = (((((_2028 * _1798) + _515) * cbLight._m0[_1979].y) * _2047) * _2048) + _1906;
        _1973 = (((((_2028 * _1799) + _516) * cbLight._m0[_1979].z) * _2047) * _2048) + _1907;
    }
    float _2083;
    float _2085;
    float _2087;
    if (_1700)
    {
        _2083 = _1969;
        _2085 = _1971;
        _2087 = _1973;
    }
    else
    {
        uint _2094 = _1607 + 3u;
        uint _2098 = _1607 + 11u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _447) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _382;
        float _2115 = cbLight._m0[_2094].y + _383;
        float _2116 = cbLight._m0[_2094].z + _384;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2094].xyz));
        float _4044 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2128 = dot(vec3(_302, _303, _304), vec3(_2121, _2122, _2123));
        float _4055 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4066 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
        float _2154 = 1.0 - _2113;
        float _2164 = (0.5 / (((_1774 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2154) + _2113) * _2127))) * _2127;
        float _4077 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _2083 = (((((_2147 * _1796) + _513) * cbLight._m0[_2098].x) * _2166) * _2167) + _1969;
        _2085 = (((((_2147 * _1798) + _515) * cbLight._m0[_2098].y) * _2166) * _2167) + _1971;
        _2087 = (((((_2147 * _1799) + _516) * cbLight._m0[_2098].z) * _2166) * _2167) + _1973;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1605.y == 0u)
    {
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2242;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2242;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2242;
        uvec4 _2257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2258 = _2257.x;
        uint _2269 = uint((float(_2257.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2258))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2258)));
        float _2279 = (log2(_2245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        uint _2283 = uint(isnan(14.0) ? _2280 : (isnan(_2280) ? 14.0 : min(_2280, 14.0)));
        uvec4 _2288 = texelFetch(g_lightClusterGridBuffer, int(((_2283 << 2u) + (_2269 << 6u)) >> 2u));
        uint _2289 = _2288.x;
        uint _2290 = _2257.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2290 >> 4u) & 15u)) + 4294967295u) & _2289) == 0u) || ((_2290 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2575)
                {
                    frontier_phi_68_pred = _2561;
                    frontier_phi_68_pred_1 = _2564;
                    frontier_phi_68_pred_2 = _2563;
                    frontier_phi_68_pred_3 = _2562;
                    frontier_phi_68_pred_4 = _2560;
                    frontier_phi_68_pred_5 = _2559;
                }
                else
                {
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    uint _2710;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2574;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    for (;;)
                    {
                        uint _2714 = uint(findLSB(_2710)) + (_2565 << 5u);
                        uint _2711 = (_2710 + 4294967295u) & _2710;
                        uint _2716 = _2714 * 48u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2736 = (_2714 * 48u) + 4u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        uint _2755 = (_2714 * 48u) + 8u;
                        vec3 _2766 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x));
                        float _2770 = _2730.x - _2243;
                        float _2771 = _2730.y - _2244;
                        float _2772 = _2730.z - _2245;
                        float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                        float _2776 = inversesqrt(_2773);
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2780 = dot(vec3(_428, _431, _434), vec3(_2777, _2778, _2779));
                        float _2785 = 1.0 - (_2773 * _2730.w);
                        float _4103 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2787 = sqrt(_2773) * _2749.w;
                        float _2790 = 1.39999997615814208984375 / (_2787 + 1.39999997615814208984375);
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2780) + _2791;
                        float _2797 = _2787 * _2787;
                        float _2801 = ((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2786) / ((_2797 * 0.699999988079071044921875) + 1.0);
                        float _2805 = (-0.0) - _2243;
                        float _2806 = (-0.0) - _2244;
                        float _2807 = (-0.0) - _2245;
                        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
                        float _2812 = _2811 * _2805;
                        float _2813 = _2811 * _2806;
                        float _2814 = _2811 * _2807;
                        float _2822 = exp2(log2(1.0 / ((_2797 * 3.5) + 5.0)) * 0.25);
                        float _2823 = 1.0 - _544;
                        float _2830 = sqrt(1.0 - ((1.0 - (_2823 * _2823)) * (1.0 - (_2822 * _2822))));
                        float _2831 = _2830 * _2830;
                        float _2832 = _2831 * _2831;
                        float _2833 = _2812 + _2777;
                        float _2834 = _2813 + _2778;
                        float _2835 = _2814 + _2779;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2843 = dot(vec3(_428, _431, _434), vec3(_2812, _2813, _2814));
                        float _4119 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2846 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2847 = dot(vec3(_428, _431, _434), vec3(_2839 * _2833, _2839 * _2834, _2839 * _2835));
                        float _4130 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2850 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2854 = ((_2850 * _2850) * (_2832 + (-1.0))) + 1.0;
                        float _2855 = _2790 * _2831;
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2780) + _2856;
                        float _4141 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2861 = 1.0 - _2831;
                        float _2871 = (0.5 / (((_2860 * ((_2846 * _2861) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2860 * _2861) + _2831) * _2846))) * _2860;
                        float _4152 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2882 = (((_2832 * 3.1415927410125732421875) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) / ((_2854 * _2854) * ((_2797 * 2.1991131305694580078125) + 3.141590118408203125))) * _2786;
                        _2634 = (_2801 * _2749.x) + _2707;
                        _2635 = (_2801 * _2749.y) + _2708;
                        _2636 = (_2801 * _2749.z) + _2709;
                        _2631 = (_2882 * _2766.x) + _2704;
                        _2632 = (_2882 * _2766.y) + _2705;
                        _2633 = (_2882 * _2766.z) + _2706;
                        if (_2711 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2711;
                        }
                    }
                    frontier_phi_68_pred = _2633;
                    frontier_phi_68_pred_1 = _2636;
                    frontier_phi_68_pred_2 = _2635;
                    frontier_phi_68_pred_3 = _2634;
                    frontier_phi_68_pred_4 = _2632;
                    frontier_phi_68_pred_5 = _2631;
                }
                _2412 = frontier_phi_68_pred;
                _2418 = frontier_phi_68_pred_1;
                _2416 = frontier_phi_68_pred_2;
                _2414 = frontier_phi_68_pred_3;
                _2410 = frontier_phi_68_pred_4;
                _2408 = frontier_phi_68_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2408;
                    _2560 = _2410;
                    _2561 = _2412;
                    _2562 = _2414;
                    _2563 = _2416;
                    _2564 = _2418;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2424) & _2289) == 0u)
        {
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
            _2533 = _2413;
            _2535 = _2415;
            _2537 = _2417;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
            float _2553 = _2552 * _2243;
            float _2554 = _2552 * _2244;
            float _2555 = _2552 * _2245;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2687 = _2407;
                float _2688 = _2409;
                float _2689 = _2411;
                float _2690 = _2413;
                float _2691 = _2415;
                float _2692 = _2417;
                uint _2693 = _2424;
                uint _2702;
                bool _2703;
                for (;;)
                {
                    _2702 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                    _2703 = _2702 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2703)
                    {
                        frontier_phi_79_pred = _2692;
                        frontier_phi_79_pred_1 = _2691;
                        frontier_phi_79_pred_2 = _2690;
                        frontier_phi_79_pred_3 = _2689;
                        frontier_phi_79_pred_4 = _2688;
                        frontier_phi_79_pred_5 = _2687;
                    }
                    else
                    {
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        uint _2915 = _2702;
                        uint _2916;
                        vec4 _2941;
                        float _2942;
                        vec4 _2957;
                        vec3 _2969;
                        vec4 _2985;
                        vec4 _3001;
                        float _3048;
                        bool _3049;
                        for (;;)
                        {
                            uint _2926 = ((_2693 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2915));
                            _2916 = (_2915 + 4294967295u) & _2915;
                            uint _2928 = _2926 * 40u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2942 = _2941.w;
                            uint _2944 = (_2926 * 40u) + 4u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2959 = (_2926 * 40u) + 8u;
                            _2969 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x));
                            uint _2972 = (_2926 * 40u) + 16u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2988 = (_2926 * 40u) + 20u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3004 = (_2926 * 40u) + 24u;
                            vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3023 = (_2926 * 40u) + 28u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3048 = fma(_2245, _3036.z, fma(_2244, _3036.y, _3036.x * _2243)) + _3036.w;
                            _3049 = !((fma(_2245, _3017.z, fma(_2244, _3017.y, _3017.x * _2243)) + _3017.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3049)
                            {
                                float _3076 = _2941.x - _2243;
                                float _3077 = _2941.y - _2244;
                                float _3078 = _2941.z - _2245;
                                float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                                float _3082 = inversesqrt(_3079);
                                float _3083 = _3082 * _3076;
                                float _3084 = _3082 * _3077;
                                float _3085 = _3082 * _3078;
                                float _3089 = 1.0 - (_3079 / (_2942 * _2942));
                                float _4163 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3094 = sqrt(_3079) * _2957.w;
                                float _3096 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                                float _3097 = _3096 * _3096;
                                float _3100 = ((1.0 - _3097) * dot(vec3(_3083, _3084, _3085), vec3(_428, _431, _434))) + _3097;
                                float _3103 = _3094 * _3094;
                                float _3107 = (fma(_2245, _2985.z, fma(_2244, _2985.y, _2985.x * _2243)) + _2985.w) / _3048;
                                float _3108 = (fma(_2245, _3001.z, fma(_2244, _3001.y, _3001.x * _2243)) + _3001.w) / _3048;
                                float _3112 = 1.0 - dot(vec2(_3107, _3108), vec2(_3107, _3108));
                                float _4179 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3114 = _3113 * (((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3090) / ((_3103 * 0.699999988079071044921875) + 1.0));
                                float _3126 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                                float _3127 = 1.0 - _544;
                                float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                                float _3135 = _3134 * _3134;
                                float _3136 = _3135 * _3135;
                                float _3137 = _3083 - _2553;
                                float _3138 = _3084 - _2554;
                                float _3139 = _3085 - _2555;
                                float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                                float _3147 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2553, (-0.0) - _2554, (-0.0) - _2555));
                                float _4190 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3151 = dot(vec3(_428, _431, _434), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                                float _4201 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                                float _3159 = _3096 * _3135;
                                float _3160 = _3159 * _3159;
                                float _3166 = ((1.0 - _3160) * dot(vec3(_428, _431, _434), vec3(_3083, _3084, _3085))) + _3160;
                                float _4212 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3168 = 1.0 - _3135;
                                float _3178 = (0.5 / (((_3167 * ((_3150 * _3168) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3135) * _3150))) * _3167;
                                float _4223 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3188 = (_3113 * _3090) * (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_3158 * _3158) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3114 * _2957.z;
                                frontier_phi_85_pred_1 = _3114 * _2957.y;
                                frontier_phi_85_pred_2 = _3114 * _2957.x;
                                frontier_phi_85_pred_3 = _3188 * _2969.z;
                                frontier_phi_85_pred_4 = _3188 * _2969.y;
                                frontier_phi_85_pred_5 = _3188 * _2969.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3197 = frontier_phi_85_pred;
                            _3196 = frontier_phi_85_pred_1;
                            _3195 = frontier_phi_85_pred_2;
                            _3194 = frontier_phi_85_pred_3;
                            _3193 = frontier_phi_85_pred_4;
                            _3192 = frontier_phi_85_pred_5;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            if (_2916 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2916;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2901;
                        frontier_phi_79_pred_1 = _2900;
                        frontier_phi_79_pred_2 = _2899;
                        frontier_phi_79_pred_3 = _2898;
                        frontier_phi_79_pred_4 = _2897;
                        frontier_phi_79_pred_5 = _2896;
                    }
                    _2538 = frontier_phi_79_pred;
                    _2536 = frontier_phi_79_pred_1;
                    _2534 = frontier_phi_79_pred_2;
                    _2532 = frontier_phi_79_pred_3;
                    _2530 = frontier_phi_79_pred_4;
                    _2528 = frontier_phi_79_pred_5;
                    uint _2694 = _2693 + 1u;
                    if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2687 = _2528;
                        _2688 = _2530;
                        _2689 = _2532;
                        _2690 = _2534;
                        _2691 = _2536;
                        _2692 = _2538;
                        _2693 = _2694;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2534;
                frontier_phi_60_61_ladder_1 = _2538;
                frontier_phi_60_61_ladder_2 = _2536;
                frontier_phi_60_61_ladder_3 = _2532;
                frontier_phi_60_61_ladder_4 = _2530;
                frontier_phi_60_61_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_60_61_ladder = _2413;
                frontier_phi_60_61_ladder_1 = _2417;
                frontier_phi_60_61_ladder_2 = _2415;
                frontier_phi_60_61_ladder_3 = _2411;
                frontier_phi_60_61_ladder_4 = _2409;
                frontier_phi_60_61_ladder_5 = _2407;
            }
            _2527 = frontier_phi_60_61_ladder_5;
            _2529 = frontier_phi_60_61_ladder_4;
            _2531 = frontier_phi_60_61_ladder_3;
            _2533 = frontier_phi_60_61_ladder;
            _2535 = frontier_phi_60_61_ladder_2;
            _2537 = frontier_phi_60_61_ladder_1;
        }
        float _2542 = isnan(1.0) ? _528 : (isnan(_528) ? 1.0 : min(_528, 1.0));
        _2301 = (_2542 * _2533) + _1738;
        _2303 = (_2542 * _2535) + _1740;
        _2305 = (_2542 * _2537) + _1742;
        _2307 = ((_2527 * _513) * _2542) + _2083;
        _2309 = ((_2529 * _515) * _2542) + _2085;
        _2311 = ((_2531 * _516) * _2542) + _2087;
    }
    else
    {
        _2301 = _1738;
        _2303 = _1740;
        _2305 = _1742;
        _2307 = _2083;
        _2309 = _2085;
        _2311 = _2087;
    }
    vec4 _2317 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4239 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _4250 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4261 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2341 = (((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2301 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _528))) + ((_2307 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + (_2317.x * cbMtdParam._m0[3u].x);
    float _2343 = ((_2317.y * cbMtdParam._m0[3u].x) + ((_2309 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2303 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _528)));
    float _2345 = ((_2317.z * cbMtdParam._m0[3u].x) + ((_2311 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _1370)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2305 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _528)));
    float _2346 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2347 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    uint _2349 = _460 + 6u;
    float _2357 = _403 / cbSceneParam._m0[86u].x;
    float _2358 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2433 = _2432 / _324;
        float _2444 = _2433 * _375;
        float _2445 = _376 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _377;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2644;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2644 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2590 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2644 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2467 * _2599) - exp2(_2467 * _2600)) * _2588))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2646 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2655 = exp2((_2644 * (-1.44269502162933349609375)) * (1.0 - _2646.w));
        float _2656 = log2(_2655);
        float _2672 = log2(_2377);
        _2469 = (exp2(_2672 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].x)) * _2646.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2471 = (exp2(_2672 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].y)) * _2646.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2473 = (exp2(_2672 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].z)) * _2646.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2475 = _2655 * _2377;
    }
    else
    {
        _2469 = _2374;
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
    }
    bool _2682;
    vec4 _2485;
    vec4 _2507;
    float _2509;
    float _2513;
    float _2514;
    float _2515;
    float _2516;
    bool _2526;
    for (;;)
    {
        _2485 = cbMatDynParam._m0[0u];
        float _2487 = roundEven(_2485.y);
        bool _2488 = _2487 == 3.0;
        float _2489 = log2(_2475);
        float _2496 = exp2(_2489 * cbSceneParam._m0[78u].x) * _2346;
        float _2497 = exp2(_2489 * cbSceneParam._m0[78u].y) * _2347;
        float _2498 = exp2(_2489 * cbSceneParam._m0[78u].z) * _2348;
        float _2505 = _391 + (-0.5);
        _2507 = cbMtdParam._m0[1u];
        _2509 = _2507.y * _2505;
        float _2512 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2513 = _2512 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
        _2514 = _2512 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
        _2515 = _2512 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
        _2516 = _2505 * 0.999000012874603271484375;
        _2526 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2526)
        {
            if ((cbInstanceData._m0[_460 + 7u].x + _2516) < 0.5)
            {
                _2682 = true;
                break;
            }
        }
        uint _2623 = _462 + uint(_2485.w);
        if ((cbInstanceData._m0[_2623].w < 1.0) && ((cbInstanceData._m0[_2623].w + _2516) < 0.5))
        {
            _2682 = true;
            break;
        }
        if ((_2509 + 1.0) < _2507.x)
        {
            _2682 = true;
            break;
        }
        _2682 = false;
        break;
    }
    float _2887;
    if (_2682)
    {
        discard_state = true;
        _2887 = 0.0;
    }
    else
    {
        _2887 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2513;
    SV_Target.y = _2514;
    SV_Target.z = _2515;
    SV_Target.w = _2887;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


