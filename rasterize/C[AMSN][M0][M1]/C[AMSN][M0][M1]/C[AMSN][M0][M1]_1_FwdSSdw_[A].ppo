#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _934;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _238 = cbMtdParam._m0[10u].x + TEXCOORD.y;
    vec4 _251 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_238 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _238) + cbTextureTilingScale._m0[1u].w));
    float _277 = cbMtdParam._m0[10u].y * _271.z;
    float _281 = (_271.x * 2.0) + (-1.0);
    float _283 = (_271.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3379 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    float _293 = fma(_290, _224, fma(_283, _216 * TANGENT.x, (_202 * _194) * _281));
    float _296 = fma(_290, _225, fma(_283, _216 * TANGENT.y, (_202 * _195) * _281));
    float _299 = fma(_290, _226, fma(_283, _216 * TANGENT.z, (_202 * _196) * _281));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3390 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _307 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3412 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3423 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    vec4 _391 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _393 = _391.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _613 = sqrt(((_377 * _377) + (_378 * _378)) + (_379 * _379));
        float _619 = (cbMatDynParam._m0[5u].x * _613) + cbMatDynParam._m0[5u].y;
        float _3434 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _624 = (cbMatDynParam._m0[5u].z * _613) + cbMatDynParam._m0[5u].w;
        float _3445 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) - _620)) + _620) < ((_393 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _408 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _410 = _408.w;
    float _430 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _436 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    vec4 _438 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _449 = (((_438.y - _307) + (_438.w * _307)) * cbMtdParam._m0[3u].x) + _307;
    uint _462 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = _462 + 9u;
    uint _465 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_465].x;
    float _472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_465].y;
    float _473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * cbInstanceData._m0[_465].z;
    float _3456 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    vec4 _477 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _482 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _488 = cbMtdParam._m0[3u].x * _482.x;
    float _501 = (cbMtdParam._m0[3u].x * (((_474 * _410) - _474) + _477.x)) + _474;
    float _502 = (cbMtdParam._m0[3u].x * (((_475 * _410) - _475) + _477.y)) + _475;
    float _503 = (cbMtdParam._m0[3u].x * (((_476 * _410) - _476) + _477.z)) + _476;
    float _504 = 1.0 - _488;
    float _505 = _501 * _504;
    float _506 = _502 * _504;
    float _507 = _503 * _504;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _488;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _488;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _488;
    float _515 = _512 + 0.039999999105930328369140625;
    float _517 = _513 + 0.039999999105930328369140625;
    float _518 = _514 + 0.039999999105930328369140625;
    vec4 _527 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _405, cbSceneParam._m0[86u].y * _406));
    float _530 = _527.x * TEXCOORD_4;
    float _531 = dot(vec3(_304, _305, _306), vec3(_384, _385, _386));
    float _534 = _531 * 2.0;
    float _538 = (_534 * _304) - _384;
    float _539 = (_534 * _305) - _385;
    float _540 = (_534 * _306) - _386;
    float _544 = abs(dot(vec3(_384, _385, _386), vec3(_304, _305, _306)));
    float _3489 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _546 = sqrt(_449);
    float _559 = exp2((_546 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_546 * 3.0));
    float _565 = (1.0 - _559) * ((_546 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _566 = _559 * _546;
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _933;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _658 = fma(_602, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594));
        float _662 = fma(_602, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594));
        float _666 = fma(_602, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594));
        float _691 = _594 + _304;
        float _692 = _598 + _305;
        float _693 = _602 + _306;
        float _703 = fma(_693, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691)) - _658;
        float _704 = fma(_693, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691)) - _662;
        float _705 = fma(_693, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691)) - _666;
        float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
        float _722 = ((_709 * _703) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_658 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_709 * _704) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_662 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_709 * _705) / cbModelParam._m0[34u].z) + ((((((_666 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_722, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_727.x + (-0.5));
        float _763 = _761 * (_727.y + (-0.5));
        float _764 = _761 * (_727.z + (-0.5));
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_734.x + (-0.5));
        float _773 = _771 * (_734.y + (-0.5));
        float _774 = _771 * (_734.z + (-0.5));
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_741.x + (-0.5));
        float _783 = _781 * (_741.y + (-0.5));
        float _784 = _781 * (_741.z + (-0.5));
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = _762 * 0.5;
        float _799 = _772 * 0.5;
        float _800 = _782 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _815 = (dot(vec3(_304, _305, _306), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _825 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3537 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_827 + 1.0))) + _832) * _795;
        float _842 = _763 * 0.5;
        float _843 = _773 * 0.5;
        float _844 = _783 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_304, _305, _306), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3570 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_869 + 1.0))) + _874) * _796;
        float _884 = _764 * 0.5;
        float _885 = _774 * 0.5;
        float _886 = _784 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_304, _305, _306), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3603 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_911 + 1.0))) + _916) * _797;
        _933 = _764;
        _935 = _763;
        _936 = _762;
        _937 = _774;
        _938 = _773;
        _939 = _772;
        _940 = _784;
        _941 = _783;
        _942 = _782;
        _943 = _797;
        _944 = _796;
        _945 = _795;
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
    }
    else
    {
        _933 = _934;
        _935 = _934;
        _936 = _934;
        _937 = _934;
        _938 = _934;
        _939 = _934;
        _940 = _934;
        _941 = _934;
        _942 = _934;
        _943 = _934;
        _944 = _934;
        _945 = _934;
        _946 = 0.0;
        _947 = 0.0;
        _948 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_602, cbModelParam._m0[30u].z, fma(_598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _594));
        float _981 = fma(_602, cbModelParam._m0[31u].z, fma(_598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _594));
        float _985 = fma(_602, cbModelParam._m0[32u].z, fma(_598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _594));
        float _1008 = _594 + _304;
        float _1009 = _598 + _305;
        float _1010 = _602 + _306;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_304, _305, _306), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3666 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_304, _305, _306), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3699 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_304, _305, _306), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3732 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _934;
        _1247 = _934;
        _1248 = _934;
        _1249 = _934;
        _1250 = _934;
        _1251 = _934;
        _1252 = _934;
        _1253 = _934;
        _1254 = _934;
        _1255 = _934;
        _1256 = _934;
        _1257 = _934;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _947)) + _947;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _948)) + _948;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _538 * 0.5;
    float _1315 = _539 * 0.5;
    float _1316 = _540 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_933, _937, _940, _943));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_935, _938, _941, _944));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_936, _939, _942, _945));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_602, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_602, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_602, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_540, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538));
        float _1446 = fma(_540, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538));
        float _1449 = fma(_540, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1477 = frontier_phi_19_17_ladder;
        }
        float _1706;
        if (_1446 > 0.0)
        {
            _1706 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1706 = frontier_phi_28_24_ladder;
        }
        float _1963;
        if (_1449 > 0.0)
        {
            _1963 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1963 = frontier_phi_40_35_ladder;
        }
        float _1965 = isnan(_1706) ? _1477 : (isnan(_1477) ? _1706 : min(_1477, _1706));
        float _1966 = isnan(_1963) ? _1965 : (isnan(_1965) ? _1963 : min(_1965, _1963));
        float _1970 = (_1966 * _1443) + _1432;
        float _1971 = (_1966 * _1446) + _1436;
        float _1972 = (_1966 * _1449) + _1440;
        float _1973 = _1966 * 9.9999997473787516355514526367188e-05;
        float _1975 = (-1.0) - _1973;
        float _1977 = _1973 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1972 > _1977) || ((_1972 < _1975) || ((_1971 > _1977) || ((_1971 < _1975) || ((_1970 < _1975) || (_1970 > _1977))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1972, cbModelParam._m0[9u].z, fma(_1971, cbModelParam._m0[9u].y, _1970 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1972, cbModelParam._m0[10u].z, fma(_1971, cbModelParam._m0[10u].y, _1970 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1972, cbModelParam._m0[11u].z, fma(_1971, cbModelParam._m0[11u].y, _1970 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_18_40_ladder = _2100.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2100.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2100.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_18_40_ladder_2;
        _1467 = frontier_phi_18_40_ladder_1;
        _1469 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_538, _539, _540), _1383);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_602, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_602, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_602, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_540, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538));
        float _1545 = fma(_540, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538));
        float _1548 = fma(_540, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538));
        float _1711;
        if (_1542 > 0.0)
        {
            _1711 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1711 = frontier_phi_30_26_ladder;
        }
        float _1990;
        if (_1545 > 0.0)
        {
            _1990 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1990 = frontier_phi_42_37_ladder;
        }
        float _2203;
        if (_1548 > 0.0)
        {
            _2203 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2203 = frontier_phi_51_48_ladder;
        }
        float _2205 = isnan(_1990) ? _1711 : (isnan(_1711) ? _1990 : min(_1711, _1990));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1542) + _1531;
        float _2211 = (_2206 * _1545) + _1535;
        float _2212 = (_2206 * _1548) + _1539;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_27_51_ladder = _2428.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2428.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2428.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_27_51_ladder_2;
        _1569 = frontier_phi_27_51_ladder_1;
        _1571 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_538, _539, _540), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1584 = (((_565 * _515) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_565 * _517) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_565 * _518) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    vec4 _1605 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_405, _406));
    float _1607 = _1605.w;
    float _1619 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1607);
    float _1620 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1607);
    float _1621 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1607);
    uvec4 _1625 = floatBitsToUint(cbInstanceData._m0[_462 + 5u]);
    uint _1627 = _1625.x * 14u;
    uint _1628 = _1627 + 13u;
    float _1635 = _530 + (-1.0);
    float _1640 = (cbLight._m0[_1628].x * _1635) + 1.0;
    float _1641 = (cbLight._m0[_1628].y * _1635) + 1.0;
    float _1642 = (cbLight._m0[_1628].z * _1635) + 1.0;
    float _1643 = (cbLight._m0[_1628].w * _1635) + 1.0;
    uint _1644 = _1627 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1627 + 4u;
    float _1664 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1668 = _1627 | 1u;
    float _1679 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_304, _305, _306));
    float _1682 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_304, _305, _306));
    float _3868 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _3879 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1687 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.3183098733425140380859375;
    float _1689 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1696 = ((cbLight._m0[_1644].x * _1650) * _1689) + (((cbLight._m0[_1654].x * _1619) * _1664) * _1687);
    float _1697 = ((_1650 * cbLight._m0[_1644].y) * _1689) + (((cbLight._m0[_1654].y * _1620) * _1664) * _1687);
    float _1698 = ((_1650 * cbLight._m0[_1644].z) * _1689) + (((cbLight._m0[_1654].z * _1621) * _1664) * _1687);
    uvec4 _1703 = floatBitsToUint(cbLight._m0[_1627 + 12u]);
    bool _1705 = _1703.x == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1705)
    {
        _1716 = _1696;
        _1718 = _1697;
        _1720 = _1698;
    }
    else
    {
        uint _1724 = _1627 + 6u;
        float _1740 = (dot(vec3(cbLight._m0[_1627 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _3890 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1743 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1716 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1696;
        _1718 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1697;
        _1720 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1698;
    }
    bool _1723 = _1703.y == 0u;
    float _1761;
    float _1763;
    float _1765;
    if (_1723)
    {
        _1761 = _1716;
        _1763 = _1718;
        _1765 = _1720;
    }
    else
    {
        uint _1934 = _1627 + 7u;
        float _1950 = (dot(vec3(cbLight._m0[_1627 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _3906 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1953 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1761 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1716;
        _1763 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1718;
        _1765 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1720;
    }
    uint _1768 = _1627 + 8u;
    float _1781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _449) * 0.949999988079071044921875);
    float _1782 = _1781 * _1781;
    float _1783 = cbLight._m0[_1627].x + _384;
    float _1784 = cbLight._m0[_1627].y + _385;
    float _1785 = cbLight._m0[_1627].z + _386;
    float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
    float _1790 = _1789 * _1783;
    float _1791 = _1789 * _1784;
    float _1792 = _1789 * _1785;
    float _1793 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1627].xyz));
    float _3922 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _1797 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1798 = dot(vec3(_304, _305, _306), vec3(_1790, _1791, _1792));
    float _3944 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1790, _1791, _1792));
    float _3955 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1782 * _1782;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1818 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
    float _1819 = 0.959999978542327880859375 - _512;
    float _1821 = 0.959999978542327880859375 - _513;
    float _1822 = 0.959999978542327880859375 - _514;
    float _1829 = 1.0 - _1782;
    float _1840 = (0.5 / (((_1797 * ((_1796 * _1829) + _1782)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1829) + _1782) * _1796))) * _1796;
    float _3966 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    uint _1856 = _1627 + 9u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _449) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1668].x + _384;
    float _1870 = cbLight._m0[_1668].y + _385;
    float _1871 = cbLight._m0[_1668].z + _386;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1668].xyz));
    float _3977 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1883 = dot(vec3(_304, _305, _306), vec3(_1876, _1877, _1878));
    float _3988 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1876, _1877, _1878));
    float _3999 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1868 * _1868;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1902 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
    float _1909 = 1.0 - _1868;
    float _1919 = (0.5 / (((_1797 * ((_1882 * _1909) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1909) + _1868) * _1882))) * _1882;
    float _4010 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    float _1931 = (((((_1902 * _1819) + _515) * cbLight._m0[_1856].x) * _1921) * _1650) + ((((cbLight._m0[_1768].x * _1619) * ((_1818 * _1819) + _515)) * _1842) * _1664);
    float _1932 = (((((_1902 * _1821) + _517) * cbLight._m0[_1856].y) * _1921) * _1650) + ((((cbLight._m0[_1768].y * _1620) * ((_1818 * _1821) + _517)) * _1842) * _1664);
    float _1933 = (((((_1902 * _1822) + _518) * cbLight._m0[_1856].z) * _1921) * _1650) + ((((cbLight._m0[_1768].z * _1621) * ((_1818 * _1822) + _518)) * _1842) * _1664);
    float _1995;
    float _1997;
    float _1999;
    if (_1705)
    {
        _1995 = _1931;
        _1997 = _1932;
        _1999 = _1933;
    }
    else
    {
        uint _2001 = _1627 + 2u;
        uint _2005 = _1627 + 10u;
        float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _449) * 0.949999988079071044921875);
        float _2020 = _2019 * _2019;
        float _2021 = cbLight._m0[_2001].x + _384;
        float _2022 = cbLight._m0[_2001].y + _385;
        float _2023 = cbLight._m0[_2001].z + _386;
        float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
        float _2028 = _2027 * _2021;
        float _2029 = _2027 * _2022;
        float _2030 = _2027 * _2023;
        float _2031 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2001].xyz));
        float _4021 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2035 = dot(vec3(_304, _305, _306), vec3(_2028, _2029, _2030));
        float _4032 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2039 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2028, _2029, _2030));
        float _4043 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2043 = _2020 * _2020;
        float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
        float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
        float _2061 = 1.0 - _2020;
        float _2071 = (0.5 / (((_1797 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _2061) + _2020) * _2034))) * _2034;
        float _4054 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2073 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
        float _2074 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1995 = (((((_2054 * _1819) + _515) * cbLight._m0[_2005].x) * _2073) * _2074) + _1931;
        _1997 = (((((_2054 * _1821) + _517) * cbLight._m0[_2005].y) * _2073) * _2074) + _1932;
        _1999 = (((((_2054 * _1822) + _518) * cbLight._m0[_2005].z) * _2073) * _2074) + _1933;
    }
    float _2109;
    float _2111;
    float _2113;
    if (_1723)
    {
        _2109 = _1995;
        _2111 = _1997;
        _2113 = _1999;
    }
    else
    {
        uint _2120 = _1627 + 3u;
        uint _2124 = _1627 + 11u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _449) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _384;
        float _2141 = cbLight._m0[_2120].y + _385;
        float _2142 = cbLight._m0[_2120].z + _386;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2120].xyz));
        float _4070 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2154 = dot(vec3(_304, _305, _306), vec3(_2147, _2148, _2149));
        float _4081 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4092 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0);
        float _2180 = 1.0 - _2139;
        float _2190 = (0.5 / (((_1797 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _2180) + _2139) * _2153))) * _2153;
        float _4103 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2109 = (((((_2173 * _1819) + _515) * cbLight._m0[_2124].x) * _2192) * _2193) + _1995;
        _2111 = (((((_2173 * _1821) + _517) * cbLight._m0[_2124].y) * _2192) * _2193) + _1997;
        _2113 = (((((_2173 * _1822) + _518) * cbLight._m0[_2124].z) * _2192) * _2193) + _1999;
    }
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    if (_1625.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
        }
        else
        {
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2601)
                {
                    frontier_phi_68_pred = _2587;
                    frontier_phi_68_pred_1 = _2590;
                    frontier_phi_68_pred_2 = _2589;
                    frontier_phi_68_pred_3 = _2588;
                    frontier_phi_68_pred_4 = _2586;
                    frontier_phi_68_pred_5 = _2585;
                }
                else
                {
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    uint _2736;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2600;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2740 = uint(findLSB(_2736)) + (_2591 << 5u);
                        uint _2737 = (_2736 + 4294967295u) & _2736;
                        uint _2742 = _2740 * 48u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2762 = (_2740 * 48u) + 4u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2781 = (_2740 * 48u) + 8u;
                        vec3 _2792 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x));
                        float _2796 = _2756.x - _2269;
                        float _2797 = _2756.y - _2270;
                        float _2798 = _2756.z - _2271;
                        float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                        float _2802 = inversesqrt(_2799);
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2806 = dot(vec3(_430, _433, _436), vec3(_2803, _2804, _2805));
                        float _2811 = 1.0 - (_2799 * _2756.w);
                        float _4129 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2813 = sqrt(_2799) * _2775.w;
                        float _2816 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2806) + _2817;
                        float _2823 = _2813 * _2813;
                        float _2827 = ((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2812) / ((_2823 * 0.699999988079071044921875) + 1.0);
                        float _2831 = (-0.0) - _2269;
                        float _2832 = (-0.0) - _2270;
                        float _2833 = (-0.0) - _2271;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2848 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _546;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2838 + _2803;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_430, _433, _436), vec3(_2838, _2839, _2840));
                        float _4145 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2873 = dot(vec3(_430, _433, _436), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4156 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2816 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2806) + _2882;
                        float _4167 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4178 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_2880 * _2880) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125))) * _2812;
                        _2660 = (_2827 * _2775.x) + _2733;
                        _2661 = (_2827 * _2775.y) + _2734;
                        _2662 = (_2827 * _2775.z) + _2735;
                        _2657 = (_2908 * _2792.x) + _2730;
                        _2658 = (_2908 * _2792.y) + _2731;
                        _2659 = (_2908 * _2792.z) + _2732;
                        if (_2737 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2737;
                        }
                    }
                    frontier_phi_68_pred = _2659;
                    frontier_phi_68_pred_1 = _2662;
                    frontier_phi_68_pred_2 = _2661;
                    frontier_phi_68_pred_3 = _2660;
                    frontier_phi_68_pred_4 = _2658;
                    frontier_phi_68_pred_5 = _2657;
                }
                _2438 = frontier_phi_68_pred;
                _2444 = frontier_phi_68_pred_1;
                _2442 = frontier_phi_68_pred_2;
                _2440 = frontier_phi_68_pred_3;
                _2436 = frontier_phi_68_pred_4;
                _2434 = frontier_phi_68_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2434;
                    _2586 = _2436;
                    _2587 = _2438;
                    _2588 = _2440;
                    _2589 = _2442;
                    _2590 = _2444;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
        }
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.z;
        uint _2450 = (_2448 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2450) & _2315) == 0u)
        {
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
            _2561 = _2441;
            _2563 = _2443;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2579 = _2578 * _2269;
            float _2580 = _2578 * _2270;
            float _2581 = _2578 * _2271;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2450 < ((_2448 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2713 = _2433;
                float _2714 = _2435;
                float _2715 = _2437;
                float _2716 = _2439;
                float _2717 = _2441;
                float _2718 = _2443;
                uint _2719 = _2450;
                uint _2728;
                bool _2729;
                for (;;)
                {
                    _2728 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                    _2729 = _2728 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2729)
                    {
                        frontier_phi_79_pred = _2718;
                        frontier_phi_79_pred_1 = _2717;
                        frontier_phi_79_pred_2 = _2716;
                        frontier_phi_79_pred_3 = _2715;
                        frontier_phi_79_pred_4 = _2714;
                        frontier_phi_79_pred_5 = _2713;
                    }
                    else
                    {
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        uint _2941 = _2728;
                        uint _2942;
                        vec4 _2967;
                        float _2968;
                        vec4 _2983;
                        vec3 _2995;
                        vec4 _3011;
                        vec4 _3027;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2952 = ((_2719 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2941));
                            _2942 = (_2941 + 4294967295u) & _2941;
                            uint _2954 = _2952 * 40u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.w;
                            uint _2970 = (_2952 * 40u) + 4u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2985 = (_2952 * 40u) + 8u;
                            _2995 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x));
                            uint _2998 = (_2952 * 40u) + 16u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2952 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3030 = (_2952 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2952 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_2271, _3062.z, fma(_2270, _3062.y, _3062.x * _2269)) + _3062.w;
                            _3075 = !((fma(_2271, _3043.z, fma(_2270, _3043.y, _3043.x * _2269)) + _3043.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2967.x - _2269;
                                float _3103 = _2967.y - _2270;
                                float _3104 = _2967.z - _2271;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2968 * _2968));
                                float _4189 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3120 = sqrt(_3105) * _2983.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3126 = ((1.0 - _3123) * dot(vec3(_3109, _3110, _3111), vec3(_430, _433, _436))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_2271, _3011.z, fma(_2270, _3011.y, _3011.x * _2269)) + _3011.w) / _3074;
                                float _3134 = (fma(_2271, _3027.z, fma(_2270, _3027.y, _3027.x * _2269)) + _3027.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4205 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3152 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3153 = 1.0 - _546;
                                float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                                float _3161 = _3160 * _3160;
                                float _3162 = _3161 * _3161;
                                float _3163 = _3109 - _2579;
                                float _3164 = _3110 - _2580;
                                float _3165 = _3111 - _2581;
                                float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                                float _3173 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4216 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3177 = dot(vec3(_430, _433, _436), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                                float _4227 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                                float _3185 = _3122 * _3161;
                                float _3186 = _3185 * _3185;
                                float _3192 = ((1.0 - _3186) * dot(vec3(_430, _433, _436), vec3(_3109, _3110, _3111))) + _3186;
                                float _4238 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3194 = 1.0 - _3161;
                                float _3204 = (0.5 / (((_3193 * ((_3176 * _3194) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3161) * _3176))) * _3193;
                                float _4249 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3214 = (_3139 * _3116) * (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) / ((_3184 * _3184) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3140 * _2983.z;
                                frontier_phi_85_pred_1 = _3140 * _2983.y;
                                frontier_phi_85_pred_2 = _3140 * _2983.x;
                                frontier_phi_85_pred_3 = _3214 * _2995.z;
                                frontier_phi_85_pred_4 = _3214 * _2995.y;
                                frontier_phi_85_pred_5 = _3214 * _2995.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3223 = frontier_phi_85_pred;
                            _3222 = frontier_phi_85_pred_1;
                            _3221 = frontier_phi_85_pred_2;
                            _3220 = frontier_phi_85_pred_3;
                            _3219 = frontier_phi_85_pred_4;
                            _3218 = frontier_phi_85_pred_5;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            if (_2942 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2942;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2927;
                        frontier_phi_79_pred_1 = _2926;
                        frontier_phi_79_pred_2 = _2925;
                        frontier_phi_79_pred_3 = _2924;
                        frontier_phi_79_pred_4 = _2923;
                        frontier_phi_79_pred_5 = _2922;
                    }
                    _2564 = frontier_phi_79_pred;
                    _2562 = frontier_phi_79_pred_1;
                    _2560 = frontier_phi_79_pred_2;
                    _2558 = frontier_phi_79_pred_3;
                    _2556 = frontier_phi_79_pred_4;
                    _2554 = frontier_phi_79_pred_5;
                    uint _2720 = _2719 + 1u;
                    if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2713 = _2554;
                        _2714 = _2556;
                        _2715 = _2558;
                        _2716 = _2560;
                        _2717 = _2562;
                        _2718 = _2564;
                        _2719 = _2720;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2560;
                frontier_phi_60_61_ladder_1 = _2564;
                frontier_phi_60_61_ladder_2 = _2562;
                frontier_phi_60_61_ladder_3 = _2558;
                frontier_phi_60_61_ladder_4 = _2556;
                frontier_phi_60_61_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_60_61_ladder = _2439;
                frontier_phi_60_61_ladder_1 = _2443;
                frontier_phi_60_61_ladder_2 = _2441;
                frontier_phi_60_61_ladder_3 = _2437;
                frontier_phi_60_61_ladder_4 = _2435;
                frontier_phi_60_61_ladder_5 = _2433;
            }
            _2553 = frontier_phi_60_61_ladder_5;
            _2555 = frontier_phi_60_61_ladder_4;
            _2557 = frontier_phi_60_61_ladder_3;
            _2559 = frontier_phi_60_61_ladder;
            _2561 = frontier_phi_60_61_ladder_2;
            _2563 = frontier_phi_60_61_ladder_1;
        }
        float _2568 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        _2327 = (_2568 * _2559) + _1761;
        _2329 = (_2568 * _2561) + _1763;
        _2331 = (_2568 * _2563) + _1765;
        _2333 = ((_2553 * _515) * _2568) + _2109;
        _2335 = ((_2555 * _517) * _2568) + _2111;
        _2337 = ((_2557 * _518) * _2568) + _2113;
    }
    else
    {
        _2327 = _1761;
        _2329 = _1763;
        _2331 = _1765;
        _2333 = _2109;
        _2335 = _2111;
        _2337 = _2113;
    }
    vec4 _2343 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4265 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4276 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4287 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2367 = (((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2327 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _530))) + ((_2333 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + (_2343.x * cbMtdParam._m0[3u].x);
    float _2369 = ((_2343.y * cbMtdParam._m0[3u].x) + ((_2335 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2329 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _530)));
    float _2371 = ((_2343.z * cbMtdParam._m0[3u].x) + ((_2337 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1372)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2331 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _530)));
    float _2372 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2373 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    uint _2375 = _462 + 6u;
    float _2383 = _405 / cbSceneParam._m0[86u].x;
    float _2384 = _406 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2458 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2459 = _2458 / _326;
        float _2470 = _2459 * _377;
        float _2471 = _378 * _2459;
        float _2472 = (-0.0) - _2471;
        float _2473 = _2459 * _379;
        float _2475 = (cbSceneParam._m0[77u].w * _2472) / _2458;
        float _2476 = _2475 + cbSceneParam._m0[79u].w;
        float _2477 = cbSceneParam._m0[79u].w - _2471;
        float _2483 = sqrt(((_2470 * _2470) + (_2471 * _2471)) + (_2473 * _2473));
        float _2486 = (1.0 - (cbSceneParam._m0[77u].w / _2458)) * _2483;
        float _2491 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2493 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2472 - _2475) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2476 > 0.0) ? exp2(_2491 * _2476) : (2.0 - exp2(_2493 * _2476))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2486;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : max(_2476, _2477));
            float _2616 = isnan(_2477) ? _2476 : (isnan(_2476) ? _2477 : min(_2476, _2477));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2670 = ((abs(_2483 / _2472) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2491 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2491 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2493 * _2625) - exp2(_2493 * _2626)) * _2614))) + (_2486 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2403);
        _2495 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2497 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2499 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2501 = _2681 * _2403;
    }
    else
    {
        _2495 = _2400;
        _2497 = _2401;
        _2499 = _2402;
        _2501 = _2403;
    }
    bool _2708;
    vec4 _2511;
    vec4 _2533;
    float _2535;
    float _2539;
    float _2540;
    float _2541;
    float _2542;
    bool _2552;
    for (;;)
    {
        _2511 = cbMatDynParam._m0[0u];
        float _2513 = roundEven(_2511.y);
        bool _2514 = _2513 == 3.0;
        float _2515 = log2(_2501);
        float _2522 = exp2(_2515 * cbSceneParam._m0[78u].x) * _2372;
        float _2523 = exp2(_2515 * cbSceneParam._m0[78u].y) * _2373;
        float _2524 = exp2(_2515 * cbSceneParam._m0[78u].z) * _2374;
        float _2531 = _393 + (-0.5);
        _2533 = cbMtdParam._m0[1u];
        _2535 = _2533.y * _2531;
        float _2538 = (_2513 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2539 = _2538 * (_2514 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2495)));
        _2540 = _2538 * (_2514 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2497)));
        _2541 = _2538 * (_2514 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2499)));
        _2542 = _2531 * 0.999000012874603271484375;
        _2552 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2552)
        {
            if ((cbInstanceData._m0[_462 + 7u].x + _2542) < 0.5)
            {
                _2708 = true;
                break;
            }
        }
        uint _2649 = _464 + uint(_2511.w);
        if ((cbInstanceData._m0[_2649].w < 1.0) && ((cbInstanceData._m0[_2649].w + _2542) < 0.5))
        {
            _2708 = true;
            break;
        }
        if ((_2535 + 1.0) < _2533.x)
        {
            _2708 = true;
            break;
        }
        _2708 = false;
        break;
    }
    float _2913;
    if (_2708)
    {
        discard_state = true;
        _2913 = 0.0;
    }
    else
    {
        _2913 = cbInstanceData._m0[_2375].w;
    }
    SV_Target.x = _2539;
    SV_Target.y = _2540;
    SV_Target.z = _2541;
    SV_Target.w = _2913;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
    discard_exit();
}


