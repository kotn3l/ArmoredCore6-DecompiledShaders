#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _885;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _240 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = cbMtdParam._m0[10u].y * _260.z;
    float _273 = (_260.x * 2.0) + (-1.0);
    float _275 = (_260.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3240 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))));
    float _285 = fma(_282, _218, fma(_275, _210 * TANGENT.x, (_196 * _188) * _273));
    float _288 = fma(_282, _219, fma(_275, _210 * TANGENT.y, (_196 * _189) * _273));
    float _291 = fma(_282, _220, fma(_275, _210 * TANGENT.z, (_196 * _190) * _273));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _3251 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _299 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _3262 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3273 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3284 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _387 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _389 = _387.w;
    float _410 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _413 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _416 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    vec4 _418 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _429 = (((_418.y - _299) + (_418.w * _299)) * cbMtdParam._m0[3u].x) + _299;
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = (_442 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3295 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    vec4 _457 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _462 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _468 = cbMtdParam._m0[3u].x * _462.x;
    float _481 = (cbMtdParam._m0[3u].x * (((_454 * _389) - _454) + _457.x)) + _454;
    float _482 = (cbMtdParam._m0[3u].x * (((_455 * _389) - _455) + _457.y)) + _455;
    float _483 = (cbMtdParam._m0[3u].x * (((_456 * _389) - _456) + _457.z)) + _456;
    float _484 = 1.0 - _468;
    float _485 = _481 * _484;
    float _486 = _482 * _484;
    float _487 = _483 * _484;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _468;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _468;
    float _494 = (_483 + (-0.039999999105930328369140625)) * _468;
    float _495 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    float _498 = _494 + 0.039999999105930328369140625;
    vec4 _507 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _510 = _507.x * TEXCOORD_4;
    float _511 = dot(vec3(_296, _297, _298), vec3(_376, _377, _378));
    float _514 = _511 * 2.0;
    float _518 = (_514 * _296) - _376;
    float _519 = (_514 * _297) - _377;
    float _520 = (_514 * _298) - _378;
    float _524 = abs(dot(vec3(_376, _377, _378), vec3(_296, _297, _298)));
    float _3328 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _526 = sqrt(_429);
    float _539 = exp2((_526 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_526 * 3.0));
    float _545 = (1.0 - _539) * ((_526 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _546 = _539 * _526;
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _884;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _609 = fma(_582, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574));
        float _613 = fma(_582, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574));
        float _617 = fma(_582, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574));
        float _642 = _574 + _296;
        float _643 = _578 + _297;
        float _644 = _582 + _298;
        float _654 = fma(_644, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642)) - _609;
        float _655 = fma(_644, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642)) - _613;
        float _656 = fma(_644, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642)) - _617;
        float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
        float _673 = ((_660 * _654) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_609 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _674 = ((_660 * _655) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_613 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _675 = ((_660 * _656) / cbModelParam._m0[34u].z) + ((((((_617 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        float _712 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_678.x + (-0.5));
        float _714 = _712 * (_678.y + (-0.5));
        float _715 = _712 * (_678.z + (-0.5));
        float _722 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_685.x + (-0.5));
        float _724 = _722 * (_685.y + (-0.5));
        float _725 = _722 * (_685.z + (-0.5));
        float _732 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_692.x + (-0.5));
        float _734 = _732 * (_692.y + (-0.5));
        float _735 = _732 * (_692.z + (-0.5));
        float _742 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_699.x + (-0.5));
        float _744 = _742 * (_699.y + (-0.5));
        float _745 = _742 * (_699.z + (-0.5));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = _713 * 0.5;
        float _750 = _723 * 0.5;
        float _751 = _733 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _766 = (dot(vec3(_296, _297, _298), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _776 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3376 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_778 + 1.0))) + _783) * _746;
        float _793 = _714 * 0.5;
        float _794 = _724 * 0.5;
        float _795 = _734 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _809 = (dot(vec3(_296, _297, _298), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _818 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3409 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_820 + 1.0))) + _825) * _747;
        float _835 = _715 * 0.5;
        float _836 = _725 * 0.5;
        float _837 = _735 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_296, _297, _298), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3442 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_862 + 1.0))) + _867) * _748;
        _884 = _715;
        _886 = _714;
        _887 = _713;
        _888 = _725;
        _889 = _724;
        _890 = _723;
        _891 = _735;
        _892 = _734;
        _893 = _733;
        _894 = _748;
        _895 = _747;
        _896 = _746;
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
    }
    else
    {
        _884 = _885;
        _886 = _885;
        _887 = _885;
        _888 = _885;
        _889 = _885;
        _890 = _885;
        _891 = _885;
        _892 = _885;
        _893 = _885;
        _894 = _885;
        _895 = _885;
        _896 = _885;
        _897 = 0.0;
        _898 = 0.0;
        _899 = 0.0;
    }
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _925 = fma(_582, cbModelParam._m0[30u].z, fma(_578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _574));
        float _929 = fma(_582, cbModelParam._m0[31u].z, fma(_578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _574));
        float _933 = fma(_582, cbModelParam._m0[32u].z, fma(_578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _574));
        float _956 = _574 + _296;
        float _957 = _578 + _297;
        float _958 = _582 + _298;
        float _968 = fma(_958, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956)) - _925;
        float _969 = fma(_958, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956)) - _929;
        float _970 = fma(_958, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956)) - _933;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_925 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_929 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[35u].z) + ((((((_933 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1024 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_991.x + (-0.5));
        float _1026 = _1024 * (_991.y + (-0.5));
        float _1027 = _1024 * (_991.z + (-0.5));
        float _1034 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_998.x + (-0.5));
        float _1036 = _1034 * (_998.y + (-0.5));
        float _1037 = _1034 * (_998.z + (-0.5));
        float _1044 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1005.x + (-0.5));
        float _1046 = _1044 * (_1005.y + (-0.5));
        float _1047 = _1044 * (_1005.z + (-0.5));
        float _1054 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1012.x + (-0.5));
        float _1056 = _1054 * (_1012.y + (-0.5));
        float _1057 = _1054 * (_1012.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_296, _297, _298), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3505 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1088 + 1.0))) + _1093) * _1058;
        float _1103 = _1026 * 0.5;
        float _1104 = _1036 * 0.5;
        float _1105 = _1046 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_296, _297, _298), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3538 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1130 + 1.0))) + _1135) * _1059;
        float _1145 = _1027 * 0.5;
        float _1146 = _1037 * 0.5;
        float _1147 = _1047 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_296, _297, _298), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3571 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1172 + 1.0))) + _1177) * _1060;
        _1194 = _1027;
        _1195 = _1026;
        _1196 = _1025;
        _1197 = _1037;
        _1198 = _1036;
        _1199 = _1035;
        _1200 = _1047;
        _1201 = _1046;
        _1202 = _1045;
        _1203 = _1060;
        _1204 = _1059;
        _1205 = _1058;
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _885;
        _1195 = _885;
        _1196 = _885;
        _1197 = _885;
        _1198 = _885;
        _1199 = _885;
        _1200 = _885;
        _1201 = _885;
        _1202 = _885;
        _1203 = _885;
        _1204 = _885;
        _1205 = _885;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _898)) + _898;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _899)) + _899;
    float _1241 = fma(_1220, cbSceneParam._m0[89u].z, fma(_1219, cbSceneParam._m0[89u].y, _1218 * cbSceneParam._m0[89u].x));
    float _1244 = fma(_1220, cbSceneParam._m0[90u].z, fma(_1219, cbSceneParam._m0[90u].y, _1218 * cbSceneParam._m0[90u].x));
    float _1247 = fma(_1220, cbSceneParam._m0[91u].z, fma(_1219, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1218));
    float _1262 = _518 * 0.5;
    float _1263 = _519 * 0.5;
    float _1264 = _520 * 0.5;
    float _1265 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1268 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1271 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1305;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1278 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_884, _888, _891, _894));
        float _1282 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_886, _889, _892, _895));
        float _1286 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_887, _890, _893, _896));
        float _1293 = dot(vec4(cbModelParam._m0[39u]), vec4(_1262, _1263, _1264, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1316;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1307 = dot(vec4(cbModelParam._m0[40u]), vec4(_1262, _1263, _1264, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1320 = (_1316 * cbModelParam._m0[1u].x) + (_1305 * (1.0 - cbModelParam._m0[1u].x));
    float _1330 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _429);
    float _1331 = isnan(_1330) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1330 : min(cbModelParam._m0[25u].z, _1330));
    float _1413;
    float _1415;
    float _1417;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1380 = fma(_582, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574)) + cbModelParam._m0[13u].w;
        float _1384 = fma(_582, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574)) + cbModelParam._m0[14u].w;
        float _1388 = fma(_582, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574)) + cbModelParam._m0[15u].w;
        float _1391 = fma(_520, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518));
        float _1394 = fma(_520, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518));
        float _1397 = fma(_520, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518));
        float _1425;
        if (_1391 > 0.0)
        {
            _1425 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1425 = frontier_phi_16_14_ladder;
        }
        float _1633;
        if (_1394 > 0.0)
        {
            _1633 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1633 = frontier_phi_25_21_ladder;
        }
        float _1887;
        if (_1397 > 0.0)
        {
            _1887 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1887 = frontier_phi_37_32_ladder;
        }
        float _1889 = isnan(_1633) ? _1425 : (isnan(_1425) ? _1633 : min(_1425, _1633));
        float _1890 = isnan(_1887) ? _1889 : (isnan(_1889) ? _1887 : min(_1889, _1887));
        float _1894 = (_1890 * _1391) + _1380;
        float _1895 = (_1890 * _1394) + _1384;
        float _1896 = (_1890 * _1397) + _1388;
        float _1897 = _1890 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1897;
        float _1901 = _1897 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 > _1901) || ((_1895 < _1899) || ((_1894 < _1899) || (_1894 > _1901))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1896, cbModelParam._m0[9u].z, fma(_1895, cbModelParam._m0[9u].y, _1894 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1896, cbModelParam._m0[10u].z, fma(_1895, cbModelParam._m0[10u].y, _1894 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1896, cbModelParam._m0[11u].z, fma(_1895, cbModelParam._m0[11u].y, _1894 * cbModelParam._m0[11u].x))), _1331);
            frontier_phi_15_37_ladder = _2024.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2024.x * cbModelParam._m0[1u].y;
        }
        _1413 = frontier_phi_15_37_ladder_2;
        _1415 = frontier_phi_15_37_ladder_1;
        _1417 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_518, _519, _520), _1331);
        _1413 = _1401.x * cbModelParam._m0[1u].y;
        _1415 = _1401.y * cbModelParam._m0[1u].y;
        _1417 = _1401.z * cbModelParam._m0[1u].y;
    }
    float _1421 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _429);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1421 : min(cbModelParam._m0[25u].w, _1421));
    float _1515;
    float _1517;
    float _1519;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1479 = fma(_582, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574)) + cbModelParam._m0[21u].w;
        float _1483 = fma(_582, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574)) + cbModelParam._m0[22u].w;
        float _1487 = fma(_582, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574)) + cbModelParam._m0[23u].w;
        float _1490 = fma(_520, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518));
        float _1493 = fma(_520, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518));
        float _1496 = fma(_520, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518));
        float _1638;
        if (_1490 > 0.0)
        {
            _1638 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1638 = frontier_phi_27_23_ladder;
        }
        float _1914;
        if (_1493 > 0.0)
        {
            _1914 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1914 = frontier_phi_39_34_ladder;
        }
        float _2127;
        if (_1496 > 0.0)
        {
            _2127 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2127 = frontier_phi_48_45_ladder;
        }
        float _2129 = isnan(_1914) ? _1638 : (isnan(_1638) ? _1914 : min(_1638, _1914));
        float _2130 = isnan(_2127) ? _2129 : (isnan(_2129) ? _2127 : min(_2129, _2127));
        float _2134 = (_2130 * _1490) + _1479;
        float _2135 = (_2130 * _1493) + _1483;
        float _2136 = (_2130 * _1496) + _1487;
        float _2137 = _2130 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2137;
        float _2140 = _2137 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2136 > _2140) || ((_2136 < _2138) || ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 < _2138) || (_2134 > _2140))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2136, cbModelParam._m0[17u].z, fma(_2135, cbModelParam._m0[17u].y, _2134 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2136, cbModelParam._m0[18u].z, fma(_2135, cbModelParam._m0[18u].y, _2134 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2136, cbModelParam._m0[19u].z, fma(_2135, cbModelParam._m0[19u].y, _2134 * cbModelParam._m0[19u].x))), _1422);
            frontier_phi_24_48_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1515 = frontier_phi_24_48_ladder_2;
        _1517 = frontier_phi_24_48_ladder_1;
        _1519 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1499 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_518, _519, _520), _1422);
        _1515 = _1499.x * cbModelParam._m0[1u].z;
        _1517 = _1499.y * cbModelParam._m0[1u].z;
        _1519 = _1499.z * cbModelParam._m0[1u].z;
    }
    float _1532 = (((_545 * _495) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1534 = (((_545 * _497) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1536 = (((_545 * _498) + _546) * _510) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1539 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, _1532 * cbSceneParam._m0[91u].x));
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1565 = _510 + (-1.0);
    float _1570 = (cbLight._m0[_1558].x * _1565) + 1.0;
    float _1571 = (cbLight._m0[_1558].y * _1565) + 1.0;
    float _1572 = (cbLight._m0[_1558].z * _1565) + 1.0;
    float _1573 = (cbLight._m0[_1558].w * _1565) + 1.0;
    uint _1574 = _1557 + 5u;
    float _1580 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1584 = _1557 + 4u;
    float _1591 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1595 = _1557 | 1u;
    float _1606 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_296, _297, _298));
    float _1609 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_296, _297, _298));
    float _3707 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _3718 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1614 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.3183098733425140380859375;
    float _1616 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.3183098733425140380859375;
    float _1623 = ((cbLight._m0[_1574].x * _1580) * _1616) + ((cbLight._m0[_1584].x * _1591) * _1614);
    float _1624 = ((_1580 * cbLight._m0[_1574].y) * _1616) + ((_1591 * cbLight._m0[_1584].y) * _1614);
    float _1625 = ((_1580 * cbLight._m0[_1574].z) * _1616) + ((_1591 * cbLight._m0[_1584].z) * _1614);
    uvec4 _1630 = floatBitsToUint(cbLight._m0[_1557 + 12u]);
    bool _1632 = _1630.x == 0u;
    float _1643;
    float _1645;
    float _1647;
    if (_1632)
    {
        _1643 = _1623;
        _1645 = _1624;
        _1647 = _1625;
    }
    else
    {
        uint _1651 = _1557 + 6u;
        float _1667 = (dot(vec3(cbLight._m0[_1557 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1668 = _1667 * _1667;
        float _3729 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1670 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1643 = (((cbLight._m0[_1651].x * 0.3183098733425140380859375) * _1669) * _1670) + _1623;
        _1645 = (((cbLight._m0[_1651].y * 0.3183098733425140380859375) * _1669) * _1670) + _1624;
        _1647 = (((cbLight._m0[_1651].z * 0.3183098733425140380859375) * _1669) * _1670) + _1625;
    }
    bool _1650 = _1630.y == 0u;
    float _1688;
    float _1690;
    float _1692;
    if (_1650)
    {
        _1688 = _1643;
        _1690 = _1645;
        _1692 = _1647;
    }
    else
    {
        uint _1858 = _1557 + 7u;
        float _1874 = (dot(vec3(cbLight._m0[_1557 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _3745 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1877 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1688 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1643;
        _1690 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1645;
        _1692 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1647;
    }
    uint _1695 = _1557 + 8u;
    float _1708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _429) * 0.949999988079071044921875);
    float _1709 = _1708 * _1708;
    float _1710 = cbLight._m0[_1557].x + _376;
    float _1711 = cbLight._m0[_1557].y + _377;
    float _1712 = cbLight._m0[_1557].z + _378;
    float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
    float _1717 = _1716 * _1710;
    float _1718 = _1716 * _1711;
    float _1719 = _1716 * _1712;
    float _1720 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1557].xyz));
    float _3761 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _1724 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1725 = dot(vec3(_296, _297, _298), vec3(_1717, _1718, _1719));
    float _3783 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1717, _1718, _1719));
    float _3794 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1733 = _1709 * _1709;
    float _1737 = ((_1728 * _1728) * (_1733 + (-1.0))) + 1.0;
    float _1745 = exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0);
    float _1746 = 0.959999978542327880859375 - _492;
    float _1748 = 0.959999978542327880859375 - _493;
    float _1749 = 0.959999978542327880859375 - _494;
    float _1756 = 1.0 - _1709;
    float _1767 = (0.5 / (((_1724 * ((_1723 * _1756) + _1709)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1756) + _1709) * _1723))) * _1723;
    float _3805 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1733 / ((_1737 * _1737) * 3.141590118408203125));
    uint _1780 = _1557 + 9u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1595].w)) * _429) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1595].x + _376;
    float _1794 = cbLight._m0[_1595].y + _377;
    float _1795 = cbLight._m0[_1595].z + _378;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1595].xyz));
    float _3816 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1807 = dot(vec3(_296, _297, _298), vec3(_1800, _1801, _1802));
    float _3827 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1811 = dot(vec3(cbLight._m0[_1595].xyz), vec3(_1800, _1801, _1802));
    float _3838 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1815 = _1792 * _1792;
    float _1819 = ((_1810 * _1810) * (_1815 + (-1.0))) + 1.0;
    float _1826 = exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0);
    float _1833 = 1.0 - _1792;
    float _1843 = (0.5 / (((_1724 * ((_1806 * _1833) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1833) + _1792) * _1806))) * _1806;
    float _3849 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1815 / ((_1819 * _1819) * 3.141590118408203125));
    float _1855 = (((((_1826 * _1746) + _495) * cbLight._m0[_1780].x) * _1845) * _1580) + (((((_1745 * _1746) + _495) * cbLight._m0[_1695].x) * _1769) * _1591);
    float _1856 = (((((_1826 * _1748) + _497) * cbLight._m0[_1780].y) * _1845) * _1580) + (((((_1745 * _1748) + _497) * cbLight._m0[_1695].y) * _1769) * _1591);
    float _1857 = (((((_1826 * _1749) + _498) * cbLight._m0[_1780].z) * _1845) * _1580) + (((((_1745 * _1749) + _498) * cbLight._m0[_1695].z) * _1769) * _1591);
    float _1919;
    float _1921;
    float _1923;
    if (_1632)
    {
        _1919 = _1855;
        _1921 = _1856;
        _1923 = _1857;
    }
    else
    {
        uint _1925 = _1557 + 2u;
        uint _1929 = _1557 + 10u;
        float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _429) * 0.949999988079071044921875);
        float _1944 = _1943 * _1943;
        float _1945 = cbLight._m0[_1925].x + _376;
        float _1946 = cbLight._m0[_1925].y + _377;
        float _1947 = cbLight._m0[_1925].z + _378;
        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
        float _1952 = _1951 * _1945;
        float _1953 = _1951 * _1946;
        float _1954 = _1951 * _1947;
        float _1955 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1925].xyz));
        float _3860 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1959 = dot(vec3(_296, _297, _298), vec3(_1952, _1953, _1954));
        float _3871 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1962 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1963 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_1952, _1953, _1954));
        float _3882 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1967 = _1944 * _1944;
        float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
        float _1978 = exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0);
        float _1985 = 1.0 - _1944;
        float _1995 = (0.5 / (((_1724 * ((_1958 * _1985) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _1985) + _1944) * _1958))) * _1958;
        float _3893 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1997 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
        float _1998 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1919 = (((((_1978 * _1746) + _495) * cbLight._m0[_1929].x) * _1997) * _1998) + _1855;
        _1921 = (((((_1978 * _1748) + _497) * cbLight._m0[_1929].y) * _1997) * _1998) + _1856;
        _1923 = (((((_1978 * _1749) + _498) * cbLight._m0[_1929].z) * _1997) * _1998) + _1857;
    }
    float _2033;
    float _2035;
    float _2037;
    if (_1650)
    {
        _2033 = _1919;
        _2035 = _1921;
        _2037 = _1923;
    }
    else
    {
        uint _2044 = _1557 + 3u;
        uint _2048 = _1557 + 11u;
        float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _429) * 0.949999988079071044921875);
        float _2063 = _2062 * _2062;
        float _2064 = cbLight._m0[_2044].x + _376;
        float _2065 = cbLight._m0[_2044].y + _377;
        float _2066 = cbLight._m0[_2044].z + _378;
        float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
        float _2071 = _2070 * _2064;
        float _2072 = _2070 * _2065;
        float _2073 = _2070 * _2066;
        float _2074 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2044].xyz));
        float _3909 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _2078 = dot(vec3(_296, _297, _298), vec3(_2071, _2072, _2073));
        float _3920 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _2082 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2071, _2072, _2073));
        float _3931 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2086 = _2063 * _2063;
        float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
        float _2097 = exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0);
        float _2104 = 1.0 - _2063;
        float _2114 = (0.5 / (((_1724 * ((_2077 * _2104) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1724 * _2104) + _2063) * _2077))) * _2077;
        float _3942 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2116 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
        float _2117 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2033 = (((((_2097 * _1746) + _495) * cbLight._m0[_2048].x) * _2116) * _2117) + _1919;
        _2035 = (((((_2097 * _1748) + _497) * cbLight._m0[_2048].y) * _2116) * _2117) + _1921;
        _2037 = (((((_2097 * _1749) + _498) * cbLight._m0[_2048].z) * _2116) * _2117) + _1923;
    }
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    if (_1555.y == 0u)
    {
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2192;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2192;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2192;
        uvec4 _2207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2208 = _2207.x;
        uint _2219 = uint((float(_2207.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2208))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2208)));
        float _2229 = (log2(_2195 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2230 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        uint _2233 = uint(isnan(14.0) ? _2230 : (isnan(_2230) ? 14.0 : min(_2230, 14.0)));
        uvec4 _2238 = texelFetch(g_lightClusterGridBuffer, int(((_2233 << 2u) + (_2219 << 6u)) >> 2u));
        uint _2239 = _2238.x;
        uint _2240 = _2207.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2240 >> 4u) & 15u)) + 4294967295u) & _2239) == 0u) || ((_2240 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2517)
                {
                    frontier_phi_63_pred = _2506;
                    frontier_phi_63_pred_1 = _2505;
                    frontier_phi_63_pred_2 = _2504;
                    frontier_phi_63_pred_3 = _2503;
                    frontier_phi_63_pred_4 = _2502;
                    frontier_phi_63_pred_5 = _2501;
                }
                else
                {
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    uint _2631;
                    _2625 = _2501;
                    _2626 = _2502;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2516;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2635 = uint(findLSB(_2631)) + (_2507 << 5u);
                        uint _2632 = (_2631 + 4294967295u) & _2631;
                        uint _2637 = _2635 * 48u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2657 = (_2635 * 48u) + 4u;
                        vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2676 = (_2635 * 48u) + 8u;
                        vec3 _2687 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x));
                        float _2691 = _2651.x - _2193;
                        float _2692 = _2651.y - _2194;
                        float _2693 = _2651.z - _2195;
                        float _2694 = dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693));
                        float _2697 = inversesqrt(_2694);
                        float _2698 = _2697 * _2691;
                        float _2699 = _2697 * _2692;
                        float _2700 = _2697 * _2693;
                        float _2701 = dot(vec3(_410, _413, _416), vec3(_2698, _2699, _2700));
                        float _2706 = 1.0 - (_2694 * _2651.w);
                        float _3968 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2707 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2708 = sqrt(_2694) * _2670.w;
                        float _2711 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2701) + _2712;
                        float _2718 = _2708 * _2708;
                        float _2722 = ((isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))) * _2707) / ((_2718 * 0.699999988079071044921875) + 1.0);
                        float _2726 = (-0.0) - _2193;
                        float _2727 = (-0.0) - _2194;
                        float _2728 = (-0.0) - _2195;
                        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2743 = exp2(log2(1.0 / ((_2718 * 3.5) + 5.0)) * 0.25);
                        float _2744 = 1.0 - _526;
                        float _2751 = sqrt(1.0 - ((1.0 - (_2744 * _2744)) * (1.0 - (_2743 * _2743))));
                        float _2752 = _2751 * _2751;
                        float _2753 = _2752 * _2752;
                        float _2754 = _2733 + _2698;
                        float _2755 = _2734 + _2699;
                        float _2756 = _2735 + _2700;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2764 = dot(vec3(_410, _413, _416), vec3(_2733, _2734, _2735));
                        float _3984 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2768 = dot(vec3(_410, _413, _416), vec3(_2760 * _2754, _2760 * _2755, _2760 * _2756));
                        float _3995 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                        float _2775 = ((_2771 * _2771) * (_2753 + (-1.0))) + 1.0;
                        float _2776 = _2711 * _2752;
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2701) + _2777;
                        float _4006 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2782 = 1.0 - _2752;
                        float _2792 = (0.5 / (((_2781 * ((_2767 * _2782) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2781 * _2782) + _2752) * _2767))) * _2781;
                        float _4017 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2803 = (((_2753 * 3.1415927410125732421875) * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) / ((_2775 * _2775) * ((_2718 * 2.1991131305694580078125) + 3.141590118408203125))) * _2707;
                        _2560 = (_2722 * _2670.x) + _2628;
                        _2561 = (_2722 * _2670.y) + _2629;
                        _2562 = (_2722 * _2670.z) + _2630;
                        _2557 = (_2803 * _2687.x) + _2625;
                        _2558 = (_2803 * _2687.y) + _2626;
                        _2559 = (_2803 * _2687.z) + _2627;
                        if (_2632 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2625 = _2557;
                            _2626 = _2558;
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2632;
                        }
                    }
                    frontier_phi_63_pred = _2562;
                    frontier_phi_63_pred_1 = _2561;
                    frontier_phi_63_pred_2 = _2560;
                    frontier_phi_63_pred_3 = _2559;
                    frontier_phi_63_pred_4 = _2558;
                    frontier_phi_63_pred_5 = _2557;
                }
                _2368 = frontier_phi_63_pred;
                _2366 = frontier_phi_63_pred_1;
                _2364 = frontier_phi_63_pred_2;
                _2362 = frontier_phi_63_pred_3;
                _2360 = frontier_phi_63_pred_4;
                _2358 = frontier_phi_63_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2358;
                    _2502 = _2360;
                    _2503 = _2362;
                    _2504 = _2364;
                    _2505 = _2366;
                    _2506 = _2368;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2374) & _2239) == 0u)
        {
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
            _2475 = _2363;
            _2477 = _2365;
            _2479 = _2367;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
            float _2495 = _2494 * _2193;
            float _2496 = _2494 * _2194;
            float _2497 = _2494 * _2195;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2608 = _2357;
                float _2609 = _2359;
                float _2610 = _2361;
                float _2611 = _2363;
                float _2612 = _2365;
                float _2613 = _2367;
                uint _2614 = _2374;
                uint _2623;
                bool _2624;
                for (;;)
                {
                    _2623 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                    _2624 = _2623 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2624)
                    {
                        frontier_phi_69_pred = _2613;
                        frontier_phi_69_pred_1 = _2612;
                        frontier_phi_69_pred_2 = _2611;
                        frontier_phi_69_pred_3 = _2610;
                        frontier_phi_69_pred_4 = _2609;
                        frontier_phi_69_pred_5 = _2608;
                    }
                    else
                    {
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _2821 = _2608;
                        float _2822 = _2609;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        uint _2827 = _2623;
                        uint _2828;
                        vec4 _2853;
                        float _2854;
                        vec4 _2869;
                        vec3 _2881;
                        vec4 _2897;
                        vec4 _2913;
                        float _2960;
                        bool _2961;
                        for (;;)
                        {
                            uint _2838 = ((_2614 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2827));
                            _2828 = (_2827 + 4294967295u) & _2827;
                            uint _2840 = _2838 * 40u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2854 = _2853.w;
                            uint _2856 = (_2838 * 40u) + 4u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2838 * 40u) + 8u;
                            _2881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x));
                            uint _2884 = (_2838 * 40u) + 16u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2900 = (_2838 * 40u) + 20u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2838 * 40u) + 24u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2935 = (_2838 * 40u) + 28u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2960 = fma(_2195, _2948.z, fma(_2194, _2948.y, _2948.x * _2193)) + _2948.w;
                            _2961 = !((fma(_2195, _2929.z, fma(_2194, _2929.y, _2929.x * _2193)) + _2929.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2961)
                            {
                                float _2988 = _2853.x - _2193;
                                float _2989 = _2853.y - _2194;
                                float _2990 = _2853.z - _2195;
                                float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                                float _2994 = inversesqrt(_2991);
                                float _2995 = _2994 * _2988;
                                float _2996 = _2994 * _2989;
                                float _2997 = _2994 * _2990;
                                float _3001 = 1.0 - (_2991 / (_2854 * _2854));
                                float _4028 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3006 = sqrt(_2991) * _2869.w;
                                float _3008 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                                float _3009 = _3008 * _3008;
                                float _3012 = ((1.0 - _3009) * dot(vec3(_2995, _2996, _2997), vec3(_410, _413, _416))) + _3009;
                                float _3015 = _3006 * _3006;
                                float _3019 = (fma(_2195, _2897.z, fma(_2194, _2897.y, _2897.x * _2193)) + _2897.w) / _2960;
                                float _3020 = (fma(_2195, _2913.z, fma(_2194, _2913.y, _2913.x * _2193)) + _2913.w) / _2960;
                                float _3024 = 1.0 - dot(vec2(_3019, _3020), vec2(_3019, _3020));
                                float _4044 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3026 = _3025 * (((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3002) / ((_3015 * 0.699999988079071044921875) + 1.0));
                                float _3038 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                                float _3039 = 1.0 - _526;
                                float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                                float _3047 = _3046 * _3046;
                                float _3048 = _3047 * _3047;
                                float _3049 = _2995 - _2495;
                                float _3050 = _2996 - _2496;
                                float _3051 = _2997 - _2497;
                                float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                                float _3059 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4055 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                                float _3063 = dot(vec3(_410, _413, _416), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                                float _4066 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3066 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                                float _3071 = _3008 * _3047;
                                float _3072 = _3071 * _3071;
                                float _3078 = ((1.0 - _3072) * dot(vec3(_410, _413, _416), vec3(_2995, _2996, _2997))) + _3072;
                                float _4077 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3080 = 1.0 - _3047;
                                float _3090 = (0.5 / (((_3079 * ((_3062 * _3080) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3047) * _3062))) * _3079;
                                float _4088 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3100 = (_3025 * _3002) * (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) / ((_3070 * _3070) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3026 * _2869.z;
                                frontier_phi_75_pred_1 = _3026 * _2869.y;
                                frontier_phi_75_pred_2 = _3026 * _2869.x;
                                frontier_phi_75_pred_3 = _3100 * _2881.z;
                                frontier_phi_75_pred_4 = _3100 * _2881.y;
                                frontier_phi_75_pred_5 = _3100 * _2881.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_75_pred;
                            _3108 = frontier_phi_75_pred_1;
                            _3107 = frontier_phi_75_pred_2;
                            _3106 = frontier_phi_75_pred_3;
                            _3105 = frontier_phi_75_pred_4;
                            _3104 = frontier_phi_75_pred_5;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            if (_2828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2828;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2813;
                        frontier_phi_69_pred_1 = _2812;
                        frontier_phi_69_pred_2 = _2811;
                        frontier_phi_69_pred_3 = _2810;
                        frontier_phi_69_pred_4 = _2809;
                        frontier_phi_69_pred_5 = _2808;
                    }
                    _2480 = frontier_phi_69_pred;
                    _2478 = frontier_phi_69_pred_1;
                    _2476 = frontier_phi_69_pred_2;
                    _2474 = frontier_phi_69_pred_3;
                    _2472 = frontier_phi_69_pred_4;
                    _2470 = frontier_phi_69_pred_5;
                    uint _2615 = _2614 + 1u;
                    if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2608 = _2470;
                        _2609 = _2472;
                        _2610 = _2474;
                        _2611 = _2476;
                        _2612 = _2478;
                        _2613 = _2480;
                        _2614 = _2615;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2480;
                frontier_phi_57_58_ladder_1 = _2478;
                frontier_phi_57_58_ladder_2 = _2476;
                frontier_phi_57_58_ladder_3 = _2474;
                frontier_phi_57_58_ladder_4 = _2472;
                frontier_phi_57_58_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_57_58_ladder = _2367;
                frontier_phi_57_58_ladder_1 = _2365;
                frontier_phi_57_58_ladder_2 = _2363;
                frontier_phi_57_58_ladder_3 = _2361;
                frontier_phi_57_58_ladder_4 = _2359;
                frontier_phi_57_58_ladder_5 = _2357;
            }
            _2469 = frontier_phi_57_58_ladder_5;
            _2471 = frontier_phi_57_58_ladder_4;
            _2473 = frontier_phi_57_58_ladder_3;
            _2475 = frontier_phi_57_58_ladder_2;
            _2477 = frontier_phi_57_58_ladder_1;
            _2479 = frontier_phi_57_58_ladder;
        }
        float _2484 = isnan(1.0) ? _510 : (isnan(_510) ? 1.0 : min(_510, 1.0));
        _2251 = (_2484 * _2475) + _1688;
        _2253 = (_2484 * _2477) + _1690;
        _2255 = (_2484 * _2479) + _1692;
        _2257 = ((_2469 * _495) * _2484) + _2033;
        _2259 = ((_2471 * _497) * _2484) + _2035;
        _2261 = ((_2473 * _498) * _2484) + _2037;
    }
    else
    {
        _2251 = _1688;
        _2253 = _1690;
        _2255 = _1692;
        _2257 = _2033;
        _2259 = _2035;
        _2261 = _2037;
    }
    vec4 _2267 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4104 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4115 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4126 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _2291 = (((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2251 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _510))) + ((_2257 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1320)) * cbPerFrame._m0[3u].x)) + (_2267.x * cbMtdParam._m0[3u].x);
    float _2293 = ((_2267.y * cbMtdParam._m0[3u].x) + ((_2259 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1320)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2253 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _510)));
    float _2295 = ((_2267.z * cbMtdParam._m0[3u].x) + ((_2261 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1320)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2255 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _510)));
    uint _2299 = _442 + 6u;
    float _2307 = _384 / cbSceneParam._m0[86u].x;
    float _2308 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2383 = _2382 / _318;
        float _2394 = _2383 * _369;
        float _2395 = _370 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _371;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2532 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2570 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2417 * _2541) - exp2(_2417 * _2542)) * _2530))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2327);
        _2419 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2421 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2423 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2425 = _2581 * _2327;
    }
    else
    {
        _2419 = _2324;
        _2421 = _2325;
        _2423 = _2326;
        _2425 = _2327;
    }
    float _2437 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2438 = _2437 == 3.0;
    float _2439 = log2(_2425);
    float _2446 = exp2(_2439 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)));
    float _2447 = exp2(_2439 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)));
    float _2448 = exp2(_2439 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2457 = (_2437 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2457 * (_2438 ? _2446 : (_2446 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2457 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2457 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = cbInstanceData._m0[_2299].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
}


