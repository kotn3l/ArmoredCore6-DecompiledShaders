#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _930;
float _3339;
float _3340;
float _3341;
float _3342;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _244 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = cbMtdParam._m0[10u].y * _264.z;
    float _277 = (_264.x * 2.0) + (-1.0);
    float _279 = (_264.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3351 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))));
    float _289 = fma(_286, _222, fma(_279, _214 * TANGENT.x, (_200 * _192) * _277));
    float _292 = fma(_286, _223, fma(_279, _214 * TANGENT.y, (_200 * _193) * _277));
    float _295 = fma(_286, _224, fma(_279, _214 * TANGENT.z, (_200 * _194) * _277));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3362 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _303 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3384 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3395 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    vec4 _387 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _389 = _387.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _609 = sqrt(((_373 * _373) + (_374 * _374)) + (_375 * _375));
        float _615 = (cbMatDynParam._m0[5u].x * _609) + cbMatDynParam._m0[5u].y;
        float _3406 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _620 = (cbMatDynParam._m0[5u].z * _609) + cbMatDynParam._m0[5u].w;
        float _3417 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) - _616)) + _616) < ((_389 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _404 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _406 = _404.w;
    float _426 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _429 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _432 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    vec4 _434 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _445 = (((_434.y - _303) + (_434.w * _303)) * cbMtdParam._m0[3u].x) + _303;
    uint _458 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = _458 + 9u;
    uint _461 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _467 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_461].x;
    float _468 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_461].y;
    float _469 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_461].z;
    float _3428 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    vec4 _473 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _478 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _484 = cbMtdParam._m0[3u].x * _478.x;
    float _497 = (cbMtdParam._m0[3u].x * (((_470 * _406) - _470) + _473.x)) + _470;
    float _498 = (cbMtdParam._m0[3u].x * (((_471 * _406) - _471) + _473.y)) + _471;
    float _499 = (cbMtdParam._m0[3u].x * (((_472 * _406) - _472) + _473.z)) + _472;
    float _500 = 1.0 - _484;
    float _501 = _497 * _500;
    float _502 = _498 * _500;
    float _503 = _499 * _500;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _484;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _484;
    float _510 = (_499 + (-0.039999999105930328369140625)) * _484;
    float _511 = _508 + 0.039999999105930328369140625;
    float _513 = _509 + 0.039999999105930328369140625;
    float _514 = _510 + 0.039999999105930328369140625;
    vec4 _523 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _526 = _523.x * TEXCOORD_4;
    float _527 = dot(vec3(_300, _301, _302), vec3(_380, _381, _382));
    float _530 = _527 * 2.0;
    float _534 = (_530 * _300) - _380;
    float _535 = (_530 * _301) - _381;
    float _536 = (_530 * _302) - _382;
    float _540 = abs(dot(vec3(_380, _381, _382), vec3(_300, _301, _302)));
    float _3461 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _542 = sqrt(_445);
    float _555 = exp2((_542 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_542 * 3.0));
    float _561 = (1.0 - _555) * ((_542 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _562 = _555 * _542;
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _929;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _654 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _658 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _662 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _687 = _590 + _300;
        float _688 = _594 + _301;
        float _689 = _598 + _302;
        float _699 = fma(_689, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687)) - _654;
        float _700 = fma(_689, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687)) - _658;
        float _701 = fma(_689, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687)) - _662;
        float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
        float _718 = ((_705 * _699) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_654 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_705 * _700) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_658 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_705 * _701) / cbModelParam._m0[34u].z) + ((((((_662 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        float _757 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_723.x + (-0.5));
        float _759 = _757 * (_723.y + (-0.5));
        float _760 = _757 * (_723.z + (-0.5));
        float _767 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_730.x + (-0.5));
        float _769 = _767 * (_730.y + (-0.5));
        float _770 = _767 * (_730.z + (-0.5));
        float _777 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_737.x + (-0.5));
        float _779 = _777 * (_737.y + (-0.5));
        float _780 = _777 * (_737.z + (-0.5));
        float _787 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_744.x + (-0.5));
        float _789 = _787 * (_744.y + (-0.5));
        float _790 = _787 * (_744.z + (-0.5));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = _758 * 0.5;
        float _795 = _768 * 0.5;
        float _796 = _778 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _811 = (dot(vec3(_300, _301, _302), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _821 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3509 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_823 + 1.0))) + _828) * _791;
        float _838 = _759 * 0.5;
        float _839 = _769 * 0.5;
        float _840 = _779 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_300, _301, _302), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3542 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_865 + 1.0))) + _870) * _792;
        float _880 = _760 * 0.5;
        float _881 = _770 * 0.5;
        float _882 = _780 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_300, _301, _302), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3575 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_907 + 1.0))) + _912) * _793;
        _929 = _760;
        _931 = _759;
        _932 = _758;
        _933 = _770;
        _934 = _769;
        _935 = _768;
        _936 = _780;
        _937 = _779;
        _938 = _778;
        _939 = _793;
        _940 = _792;
        _941 = _791;
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
    }
    else
    {
        _929 = _930;
        _931 = _930;
        _932 = _930;
        _933 = _930;
        _934 = _930;
        _935 = _930;
        _936 = _930;
        _937 = _930;
        _938 = _930;
        _939 = _930;
        _940 = _930;
        _941 = _930;
        _942 = 0.0;
        _943 = 0.0;
        _944 = 0.0;
    }
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _973 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _977 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _981 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _1004 = _590 + _300;
        float _1005 = _594 + _301;
        float _1006 = _598 + _302;
        float _1016 = fma(_1006, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004)) - _973;
        float _1017 = fma(_1006, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004)) - _977;
        float _1018 = fma(_1006, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004)) - _981;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_973 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_977 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[35u].z) + ((((((_981 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1072 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1039.x + (-0.5));
        float _1074 = _1072 * (_1039.y + (-0.5));
        float _1075 = _1072 * (_1039.z + (-0.5));
        float _1082 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1046.x + (-0.5));
        float _1084 = _1082 * (_1046.y + (-0.5));
        float _1085 = _1082 * (_1046.z + (-0.5));
        float _1092 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1053.x + (-0.5));
        float _1094 = _1092 * (_1053.y + (-0.5));
        float _1095 = _1092 * (_1053.z + (-0.5));
        float _1102 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1060.x + (-0.5));
        float _1104 = _1102 * (_1060.y + (-0.5));
        float _1105 = _1102 * (_1060.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_300, _301, _302), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3638 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1136 + 1.0))) + _1141) * _1106;
        float _1151 = _1074 * 0.5;
        float _1152 = _1084 * 0.5;
        float _1153 = _1094 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_300, _301, _302), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3671 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1178 + 1.0))) + _1183) * _1107;
        float _1193 = _1075 * 0.5;
        float _1194 = _1085 * 0.5;
        float _1195 = _1095 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_300, _301, _302), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3704 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1220 + 1.0))) + _1225) * _1108;
        _1242 = _1075;
        _1243 = _1074;
        _1244 = _1073;
        _1245 = _1085;
        _1246 = _1084;
        _1247 = _1083;
        _1248 = _1095;
        _1249 = _1094;
        _1250 = _1093;
        _1251 = _1108;
        _1252 = _1107;
        _1253 = _1106;
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _930;
        _1243 = _930;
        _1244 = _930;
        _1245 = _930;
        _1246 = _930;
        _1247 = _930;
        _1248 = _930;
        _1249 = _930;
        _1250 = _930;
        _1251 = _930;
        _1252 = _930;
        _1253 = _930;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _943)) + _943;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _944)) + _944;
    float _1289 = fma(_1268, cbSceneParam._m0[89u].z, fma(_1267, cbSceneParam._m0[89u].y, _1266 * cbSceneParam._m0[89u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[90u].z, fma(_1267, cbSceneParam._m0[90u].y, _1266 * cbSceneParam._m0[90u].x));
    float _1295 = fma(_1268, cbSceneParam._m0[91u].z, fma(_1267, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1266));
    float _1310 = _534 * 0.5;
    float _1311 = _535 * 0.5;
    float _1312 = _536 * 0.5;
    float _1313 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1316 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1319 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1353;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1326 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_929, _933, _936, _939));
        float _1330 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_931, _934, _937, _940));
        float _1334 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_932, _935, _938, _941));
        float _1341 = dot(vec4(cbModelParam._m0[39u]), vec4(_1310, _1311, _1312, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1364;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1355 = dot(vec4(cbModelParam._m0[40u]), vec4(_1310, _1311, _1312, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1368 = (_1364 * cbModelParam._m0[1u].x) + (_1353 * (1.0 - cbModelParam._m0[1u].x));
    float _1378 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _445);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1378 : min(cbModelParam._m0[25u].z, _1378));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_536, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534));
        float _1442 = fma(_536, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534));
        float _1445 = fma(_536, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534));
        float _1473;
        if (_1439 > 0.0)
        {
            _1473 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1473 = frontier_phi_19_17_ladder;
        }
        float _1681;
        if (_1442 > 0.0)
        {
            _1681 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1681 = frontier_phi_28_24_ladder;
        }
        float _1935;
        if (_1445 > 0.0)
        {
            _1935 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1935 = frontier_phi_40_35_ladder;
        }
        float _1937 = isnan(_1681) ? _1473 : (isnan(_1473) ? _1681 : min(_1473, _1681));
        float _1938 = isnan(_1935) ? _1937 : (isnan(_1937) ? _1935 : min(_1937, _1935));
        float _1942 = (_1938 * _1439) + _1428;
        float _1943 = (_1938 * _1442) + _1432;
        float _1944 = (_1938 * _1445) + _1436;
        float _1945 = _1938 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1945;
        float _1949 = _1945 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 > _1949) || ((_1943 < _1947) || ((_1942 < _1947) || (_1942 > _1949))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1944, cbModelParam._m0[9u].z, fma(_1943, cbModelParam._m0[9u].y, _1942 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1944, cbModelParam._m0[10u].z, fma(_1943, cbModelParam._m0[10u].y, _1942 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1944, cbModelParam._m0[11u].z, fma(_1943, cbModelParam._m0[11u].y, _1942 * cbModelParam._m0[11u].x))), _1379);
            frontier_phi_18_40_ladder = _2072.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2072.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2072.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_18_40_ladder_2;
        _1463 = frontier_phi_18_40_ladder_1;
        _1465 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_534, _535, _536), _1379);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1469 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _445);
    float _1470 = isnan(_1469) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1469 : min(cbModelParam._m0[25u].w, _1469));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_536, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534));
        float _1541 = fma(_536, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534));
        float _1544 = fma(_536, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534));
        float _1686;
        if (_1538 > 0.0)
        {
            _1686 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1686 = frontier_phi_30_26_ladder;
        }
        float _1962;
        if (_1541 > 0.0)
        {
            _1962 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1962 = frontier_phi_42_37_ladder;
        }
        float _2175;
        if (_1544 > 0.0)
        {
            _2175 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2175 = frontier_phi_51_48_ladder;
        }
        float _2177 = isnan(_1962) ? _1686 : (isnan(_1686) ? _1962 : min(_1686, _1962));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1538) + _1527;
        float _2183 = (_2178 * _1541) + _1531;
        float _2184 = (_2178 * _1544) + _1535;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2185;
        float _2188 = _2185 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2184 > _2188) || ((_2184 < _2186) || ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 < _2186) || (_2182 > _2188))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2184, cbModelParam._m0[17u].z, fma(_2183, cbModelParam._m0[17u].y, _2182 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2184, cbModelParam._m0[18u].z, fma(_2183, cbModelParam._m0[18u].y, _2182 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2184, cbModelParam._m0[19u].z, fma(_2183, cbModelParam._m0[19u].y, _2182 * cbModelParam._m0[19u].x))), _1470);
            frontier_phi_27_51_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_27_51_ladder_2;
        _1565 = frontier_phi_27_51_ladder_1;
        _1567 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_534, _535, _536), _1470);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1580 = (((_561 * _511) + _562) * _526) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_561 * _513) + _562) * _526) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1584 = (((_561 * _514) + _562) * _526) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_458 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _526 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1639 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1643 = _1605 | 1u;
    float _1654 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_300, _301, _302));
    float _1657 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_300, _301, _302));
    float _3840 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _3851 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1662 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.3183098733425140380859375;
    float _1664 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.3183098733425140380859375;
    float _1671 = ((cbLight._m0[_1622].x * _1628) * _1664) + ((cbLight._m0[_1632].x * _1639) * _1662);
    float _1672 = ((_1628 * cbLight._m0[_1622].y) * _1664) + ((_1639 * cbLight._m0[_1632].y) * _1662);
    float _1673 = ((_1628 * cbLight._m0[_1622].z) * _1664) + ((_1639 * cbLight._m0[_1632].z) * _1662);
    uvec4 _1678 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1680 = _1678.x == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1680)
    {
        _1691 = _1671;
        _1693 = _1672;
        _1695 = _1673;
    }
    else
    {
        uint _1699 = _1605 + 6u;
        float _1715 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1716 = _1715 * _1715;
        float _3862 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1718 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1691 = (((cbLight._m0[_1699].x * 0.3183098733425140380859375) * _1717) * _1718) + _1671;
        _1693 = (((cbLight._m0[_1699].y * 0.3183098733425140380859375) * _1717) * _1718) + _1672;
        _1695 = (((cbLight._m0[_1699].z * 0.3183098733425140380859375) * _1717) * _1718) + _1673;
    }
    bool _1698 = _1678.y == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1698)
    {
        _1736 = _1691;
        _1738 = _1693;
        _1740 = _1695;
    }
    else
    {
        uint _1906 = _1605 + 7u;
        float _1922 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _3878 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1925 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1736 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1691;
        _1738 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1693;
        _1740 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1695;
    }
    uint _1743 = _1605 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _445) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1605].x + _380;
    float _1759 = cbLight._m0[_1605].y + _381;
    float _1760 = cbLight._m0[_1605].z + _382;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1605].xyz));
    float _3894 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _1772 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1773 = dot(vec3(_300, _301, _302), vec3(_1765, _1766, _1767));
    float _3916 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1765, _1766, _1767));
    float _3927 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1793 = exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0);
    float _1794 = 0.959999978542327880859375 - _508;
    float _1796 = 0.959999978542327880859375 - _509;
    float _1797 = 0.959999978542327880859375 - _510;
    float _1804 = 1.0 - _1757;
    float _1815 = (0.5 / (((_1772 * ((_1771 * _1804) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1804) + _1757) * _1771))) * _1771;
    float _3938 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1828 = _1605 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _445) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1643].x + _380;
    float _1842 = cbLight._m0[_1643].y + _381;
    float _1843 = cbLight._m0[_1643].z + _382;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1643].xyz));
    float _3949 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1855 = dot(vec3(_300, _301, _302), vec3(_1848, _1849, _1850));
    float _3960 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1848, _1849, _1850));
    float _3971 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1874 = exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0);
    float _1881 = 1.0 - _1840;
    float _1891 = (0.5 / (((_1772 * ((_1854 * _1881) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1881) + _1840) * _1854))) * _1854;
    float _3982 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1903 = (((((_1874 * _1794) + _511) * cbLight._m0[_1828].x) * _1893) * _1628) + (((((_1793 * _1794) + _511) * cbLight._m0[_1743].x) * _1817) * _1639);
    float _1904 = (((((_1874 * _1796) + _513) * cbLight._m0[_1828].y) * _1893) * _1628) + (((((_1793 * _1796) + _513) * cbLight._m0[_1743].y) * _1817) * _1639);
    float _1905 = (((((_1874 * _1797) + _514) * cbLight._m0[_1828].z) * _1893) * _1628) + (((((_1793 * _1797) + _514) * cbLight._m0[_1743].z) * _1817) * _1639);
    float _1967;
    float _1969;
    float _1971;
    if (_1680)
    {
        _1967 = _1903;
        _1969 = _1904;
        _1971 = _1905;
    }
    else
    {
        uint _1973 = _1605 + 2u;
        uint _1977 = _1605 + 10u;
        float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _445) * 0.949999988079071044921875);
        float _1992 = _1991 * _1991;
        float _1993 = cbLight._m0[_1973].x + _380;
        float _1994 = cbLight._m0[_1973].y + _381;
        float _1995 = cbLight._m0[_1973].z + _382;
        float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
        float _2000 = _1999 * _1993;
        float _2001 = _1999 * _1994;
        float _2002 = _1999 * _1995;
        float _2003 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1973].xyz));
        float _3993 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2007 = dot(vec3(_300, _301, _302), vec3(_2000, _2001, _2002));
        float _4004 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2010 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2011 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2000, _2001, _2002));
        float _4015 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2015 = _1992 * _1992;
        float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
        float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0);
        float _2033 = 1.0 - _1992;
        float _2043 = (0.5 / (((_1772 * ((_2006 * _2033) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2033) + _1992) * _2006))) * _2006;
        float _4026 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2045 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
        float _2046 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1967 = (((((_2026 * _1794) + _511) * cbLight._m0[_1977].x) * _2045) * _2046) + _1903;
        _1969 = (((((_2026 * _1796) + _513) * cbLight._m0[_1977].y) * _2045) * _2046) + _1904;
        _1971 = (((((_2026 * _1797) + _514) * cbLight._m0[_1977].z) * _2045) * _2046) + _1905;
    }
    float _2081;
    float _2083;
    float _2085;
    if (_1698)
    {
        _2081 = _1967;
        _2083 = _1969;
        _2085 = _1971;
    }
    else
    {
        uint _2092 = _1605 + 3u;
        uint _2096 = _1605 + 11u;
        float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _445) * 0.949999988079071044921875);
        float _2111 = _2110 * _2110;
        float _2112 = cbLight._m0[_2092].x + _380;
        float _2113 = cbLight._m0[_2092].y + _381;
        float _2114 = cbLight._m0[_2092].z + _382;
        float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
        float _2119 = _2118 * _2112;
        float _2120 = _2118 * _2113;
        float _2121 = _2118 * _2114;
        float _2122 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2092].xyz));
        float _4042 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2126 = dot(vec3(_300, _301, _302), vec3(_2119, _2120, _2121));
        float _4053 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2130 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2119, _2120, _2121));
        float _4064 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2134 = _2111 * _2111;
        float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
        float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
        float _2152 = 1.0 - _2111;
        float _2162 = (0.5 / (((_1772 * ((_2125 * _2152) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2152) + _2111) * _2125))) * _2125;
        float _4075 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2081 = (((((_2145 * _1794) + _511) * cbLight._m0[_2096].x) * _2164) * _2165) + _1967;
        _2083 = (((((_2145 * _1796) + _513) * cbLight._m0[_2096].y) * _2164) * _2165) + _1969;
        _2085 = (((((_2145 * _1797) + _514) * cbLight._m0[_2096].z) * _2164) * _2165) + _1971;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1603.y == 0u)
    {
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2240;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2240;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2240;
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.x;
        uint _2267 = uint((float(_2255.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2256))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2256)));
        float _2277 = (log2(_2243 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2278 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        uint _2281 = uint(isnan(14.0) ? _2278 : (isnan(_2278) ? 14.0 : min(_2278, 14.0)));
        uvec4 _2286 = texelFetch(g_lightClusterGridBuffer, int(((_2281 << 2u) + (_2267 << 6u)) >> 2u));
        uint _2287 = _2286.x;
        uint _2288 = _2255.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2288 >> 4u) & 15u)) + 4294967295u) & _2287) == 0u) || ((_2288 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            uint _2563 = 0u;
            uint _2572;
            bool _2573;
            for (;;)
            {
                _2572 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2563 << 2u)) >> 2u)).x;
                _2573 = _2572 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2573)
                {
                    frontier_phi_68_pred = _2559;
                    frontier_phi_68_pred_1 = _2562;
                    frontier_phi_68_pred_2 = _2561;
                    frontier_phi_68_pred_3 = _2560;
                    frontier_phi_68_pred_4 = _2558;
                    frontier_phi_68_pred_5 = _2557;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2572;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2563 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        float _2768 = _2728.x - _2241;
                        float _2769 = _2728.y - _2242;
                        float _2770 = _2728.z - _2243;
                        float _2771 = dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770));
                        float _2774 = inversesqrt(_2771);
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2778 = dot(vec3(_426, _429, _432), vec3(_2775, _2776, _2777));
                        float _2783 = 1.0 - (_2771 * _2728.w);
                        float _4101 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2785 = sqrt(_2771) * _2747.w;
                        float _2788 = 1.39999997615814208984375 / (_2785 + 1.39999997615814208984375);
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2778) + _2789;
                        float _2795 = _2785 * _2785;
                        float _2799 = ((isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))) * _2784) / ((_2795 * 0.699999988079071044921875) + 1.0);
                        float _2803 = (-0.0) - _2241;
                        float _2804 = (-0.0) - _2242;
                        float _2805 = (-0.0) - _2243;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2820 = exp2(log2(1.0 / ((_2795 * 3.5) + 5.0)) * 0.25);
                        float _2821 = 1.0 - _542;
                        float _2828 = sqrt(1.0 - ((1.0 - (_2821 * _2821)) * (1.0 - (_2820 * _2820))));
                        float _2829 = _2828 * _2828;
                        float _2830 = _2829 * _2829;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2841 = dot(vec3(_426, _429, _432), vec3(_2810, _2811, _2812));
                        float _4117 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2845 = dot(vec3(_426, _429, _432), vec3(_2837 * _2831, _2837 * _2832, _2837 * _2833));
                        float _4128 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2852 = ((_2848 * _2848) * (_2830 + (-1.0))) + 1.0;
                        float _2853 = _2788 * _2829;
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2778) + _2854;
                        float _4139 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2859 = 1.0 - _2829;
                        float _2869 = (0.5 / (((_2858 * ((_2844 * _2859) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2858 * _2859) + _2829) * _2844))) * _2858;
                        float _4150 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2880 = (((_2830 * 3.1415927410125732421875) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) / ((_2852 * _2852) * ((_2795 * 2.1991131305694580078125) + 3.141590118408203125))) * _2784;
                        _2632 = (_2799 * _2747.x) + _2705;
                        _2633 = (_2799 * _2747.y) + _2706;
                        _2634 = (_2799 * _2747.z) + _2707;
                        _2629 = (_2880 * _2764.x) + _2702;
                        _2630 = (_2880 * _2764.y) + _2703;
                        _2631 = (_2880 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_68_pred = _2631;
                    frontier_phi_68_pred_1 = _2634;
                    frontier_phi_68_pred_2 = _2633;
                    frontier_phi_68_pred_3 = _2632;
                    frontier_phi_68_pred_4 = _2630;
                    frontier_phi_68_pred_5 = _2629;
                }
                _2410 = frontier_phi_68_pred;
                _2416 = frontier_phi_68_pred_1;
                _2414 = frontier_phi_68_pred_2;
                _2412 = frontier_phi_68_pred_3;
                _2408 = frontier_phi_68_pred_4;
                _2406 = frontier_phi_68_pred_5;
                uint _2564 = _2563 + 1u;
                if (_2564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2557 = _2406;
                    _2558 = _2408;
                    _2559 = _2410;
                    _2560 = _2412;
                    _2561 = _2414;
                    _2562 = _2416;
                    _2563 = _2564;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((4294967295u << _2422) & _2287) == 0u)
        {
            _2525 = _2405;
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
            _2533 = _2413;
            _2535 = _2415;
        }
        else
        {
            float _2550 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
            float _2551 = _2550 * _2241;
            float _2552 = _2550 * _2242;
            float _2553 = _2550 * _2243;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2685 = _2405;
                float _2686 = _2407;
                float _2687 = _2409;
                float _2688 = _2411;
                float _2689 = _2413;
                float _2690 = _2415;
                uint _2691 = _2422;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2281 << 5u) + (_2267 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2701)
                    {
                        frontier_phi_79_pred = _2690;
                        frontier_phi_79_pred_1 = _2689;
                        frontier_phi_79_pred_2 = _2688;
                        frontier_phi_79_pred_3 = _2687;
                        frontier_phi_79_pred_4 = _2686;
                        frontier_phi_79_pred_5 = _2685;
                    }
                    else
                    {
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        uint _2913 = _2700;
                        uint _2914;
                        vec4 _2939;
                        float _2940;
                        vec4 _2955;
                        vec3 _2967;
                        vec4 _2983;
                        vec4 _2999;
                        float _3046;
                        bool _3047;
                        for (;;)
                        {
                            uint _2924 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2913));
                            _2914 = (_2913 + 4294967295u) & _2913;
                            uint _2926 = _2924 * 40u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            _2940 = _2939.w;
                            uint _2942 = (_2924 * 40u) + 4u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2924 * 40u) + 8u;
                            _2967 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x));
                            uint _2970 = (_2924 * 40u) + 16u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2924 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2924 * 40u) + 24u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3021 = (_2924 * 40u) + 28u;
                            vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3046 = fma(_2243, _3034.z, fma(_2242, _3034.y, _3034.x * _2241)) + _3034.w;
                            _3047 = !((fma(_2243, _3015.z, fma(_2242, _3015.y, _3015.x * _2241)) + _3015.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3047)
                            {
                                float _3074 = _2939.x - _2241;
                                float _3075 = _2939.y - _2242;
                                float _3076 = _2939.z - _2243;
                                float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                                float _3080 = inversesqrt(_3077);
                                float _3081 = _3080 * _3074;
                                float _3082 = _3080 * _3075;
                                float _3083 = _3080 * _3076;
                                float _3087 = 1.0 - (_3077 / (_2940 * _2940));
                                float _4161 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3092 = sqrt(_3077) * _2955.w;
                                float _3094 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                                float _3095 = _3094 * _3094;
                                float _3098 = ((1.0 - _3095) * dot(vec3(_3081, _3082, _3083), vec3(_426, _429, _432))) + _3095;
                                float _3101 = _3092 * _3092;
                                float _3105 = (fma(_2243, _2983.z, fma(_2242, _2983.y, _2983.x * _2241)) + _2983.w) / _3046;
                                float _3106 = (fma(_2243, _2999.z, fma(_2242, _2999.y, _2999.x * _2241)) + _2999.w) / _3046;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4177 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3088) / ((_3101 * 0.699999988079071044921875) + 1.0));
                                float _3124 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                                float _3125 = 1.0 - _542;
                                float _3132 = sqrt(1.0 - ((1.0 - (_3125 * _3125)) * (1.0 - (_3124 * _3124))));
                                float _3133 = _3132 * _3132;
                                float _3134 = _3133 * _3133;
                                float _3135 = _3081 - _2551;
                                float _3136 = _3082 - _2552;
                                float _3137 = _3083 - _2553;
                                float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                                float _3145 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2551, (-0.0) - _2552, (-0.0) - _2553));
                                float _4188 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3149 = dot(vec3(_426, _429, _432), vec3(_3141 * _3135, _3141 * _3136, _3141 * _3137));
                                float _4199 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3156 = ((_3152 * _3152) * (_3134 + (-1.0))) + 1.0;
                                float _3157 = _3094 * _3133;
                                float _3158 = _3157 * _3157;
                                float _3164 = ((1.0 - _3158) * dot(vec3(_426, _429, _432), vec3(_3081, _3082, _3083))) + _3158;
                                float _4210 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3166 = 1.0 - _3133;
                                float _3176 = (0.5 / (((_3165 * ((_3148 * _3166) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3133) * _3148))) * _3165;
                                float _4221 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3186 = (_3111 * _3088) * (((_3134 * 3.1415927410125732421875) * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) / ((_3156 * _3156) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3112 * _2955.z;
                                frontier_phi_85_pred_1 = _3112 * _2955.y;
                                frontier_phi_85_pred_2 = _3112 * _2955.x;
                                frontier_phi_85_pred_3 = _3186 * _2967.z;
                                frontier_phi_85_pred_4 = _3186 * _2967.y;
                                frontier_phi_85_pred_5 = _3186 * _2967.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_85_pred;
                            _3194 = frontier_phi_85_pred_1;
                            _3193 = frontier_phi_85_pred_2;
                            _3192 = frontier_phi_85_pred_3;
                            _3191 = frontier_phi_85_pred_4;
                            _3190 = frontier_phi_85_pred_5;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            _2896 = _3192 + _2909;
                            if (_2914 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2914;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2899;
                        frontier_phi_79_pred_1 = _2898;
                        frontier_phi_79_pred_2 = _2897;
                        frontier_phi_79_pred_3 = _2896;
                        frontier_phi_79_pred_4 = _2895;
                        frontier_phi_79_pred_5 = _2894;
                    }
                    _2536 = frontier_phi_79_pred;
                    _2534 = frontier_phi_79_pred_1;
                    _2532 = frontier_phi_79_pred_2;
                    _2530 = frontier_phi_79_pred_3;
                    _2528 = frontier_phi_79_pred_4;
                    _2526 = frontier_phi_79_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2526;
                        _2686 = _2528;
                        _2687 = _2530;
                        _2688 = _2532;
                        _2689 = _2534;
                        _2690 = _2536;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2532;
                frontier_phi_60_61_ladder_1 = _2536;
                frontier_phi_60_61_ladder_2 = _2534;
                frontier_phi_60_61_ladder_3 = _2530;
                frontier_phi_60_61_ladder_4 = _2528;
                frontier_phi_60_61_ladder_5 = _2526;
            }
            else
            {
                frontier_phi_60_61_ladder = _2411;
                frontier_phi_60_61_ladder_1 = _2415;
                frontier_phi_60_61_ladder_2 = _2413;
                frontier_phi_60_61_ladder_3 = _2409;
                frontier_phi_60_61_ladder_4 = _2407;
                frontier_phi_60_61_ladder_5 = _2405;
            }
            _2525 = frontier_phi_60_61_ladder_5;
            _2527 = frontier_phi_60_61_ladder_4;
            _2529 = frontier_phi_60_61_ladder_3;
            _2531 = frontier_phi_60_61_ladder;
            _2533 = frontier_phi_60_61_ladder_2;
            _2535 = frontier_phi_60_61_ladder_1;
        }
        float _2540 = isnan(1.0) ? _526 : (isnan(_526) ? 1.0 : min(_526, 1.0));
        _2299 = (_2540 * _2531) + _1736;
        _2301 = (_2540 * _2533) + _1738;
        _2303 = (_2540 * _2535) + _1740;
        _2305 = ((_2525 * _511) * _2540) + _2081;
        _2307 = ((_2527 * _513) * _2540) + _2083;
        _2309 = ((_2529 * _514) * _2540) + _2085;
    }
    else
    {
        _2299 = _1736;
        _2301 = _1738;
        _2303 = _1740;
        _2305 = _2081;
        _2307 = _2083;
        _2309 = _2085;
    }
    vec4 _2315 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4237 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4248 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4259 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2339 = (((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2299 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _526))) + ((_2305 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1368)) * cbPerFrame._m0[3u].x)) + (_2315.x * cbMtdParam._m0[3u].x);
    float _2341 = ((_2315.y * cbMtdParam._m0[3u].x) + ((_2307 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1368)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2301 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _526)));
    float _2343 = ((_2315.z * cbMtdParam._m0[3u].x) + ((_2309 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1368)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2303 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _526)));
    float _2344 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2345 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2346 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    uint _2347 = _458 + 6u;
    float _2355 = _401 / cbSceneParam._m0[86u].x;
    float _2356 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2370 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2372 = _2370.x;
    float _2373 = _2370.y;
    float _2374 = _2370.z;
    float _2375 = _2370.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2431 = _2430 / _322;
        float _2442 = _2431 * _373;
        float _2443 = _374 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _375;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2642;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2642 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2586 = 1.0 / cbSceneParam._m0[80u].x;
            float _2587 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2588 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            float _2598 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : min(_2588, 0.0));
            _2642 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2597 - _2598) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0))))) * _2586)) - ((exp2(_2465 * _2597) - exp2(_2465 * _2598)) * _2586))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2355, _2356, 1.0), 0.0);
        float _2653 = exp2((_2642 * (-1.44269502162933349609375)) * (1.0 - _2644.w));
        float _2654 = log2(_2653);
        float _2670 = log2(_2375);
        _2467 = (exp2(_2670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].x)) * _2644.x) / cbSceneParam._m0[78u].x)) + _2372;
        _2469 = (exp2(_2670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].y)) * _2644.y) / cbSceneParam._m0[78u].y)) + _2373;
        _2471 = (exp2(_2670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].z)) * _2644.z) / cbSceneParam._m0[78u].z)) + _2374;
        _2473 = _2653 * _2375;
    }
    else
    {
        _2467 = _2372;
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
    }
    bool _2680;
    vec4 _2483;
    vec4 _2505;
    float _2507;
    float _2511;
    float _2512;
    float _2513;
    float _2514;
    bool _2524;
    for (;;)
    {
        _2483 = cbMatDynParam._m0[0u];
        float _2485 = roundEven(_2483.y);
        bool _2486 = _2485 == 3.0;
        float _2487 = log2(_2473);
        float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * _2344;
        float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * _2345;
        float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * _2346;
        float _2503 = _389 + (-0.5);
        _2505 = cbMtdParam._m0[1u];
        _2507 = _2505.y * _2503;
        float _2510 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2511 = _2510 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
        _2512 = _2510 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
        _2513 = _2510 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
        _2514 = _2503 * 0.999000012874603271484375;
        _2524 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2524)
        {
            if ((cbInstanceData._m0[_458 + 7u].x + _2514) < 0.5)
            {
                _2680 = true;
                break;
            }
        }
        uint _2621 = _460 + uint(_2483.w);
        if ((cbInstanceData._m0[_2621].w < 1.0) && ((cbInstanceData._m0[_2621].w + _2514) < 0.5))
        {
            _2680 = true;
            break;
        }
        if ((_2507 + 1.0) < _2505.x)
        {
            _2680 = true;
            break;
        }
        _2680 = false;
        break;
    }
    float _2885;
    if (_2680)
    {
        discard_state = true;
        _2885 = 0.0;
    }
    else
    {
        _2885 = cbInstanceData._m0[_2347].w;
    }
    SV_Target.x = _2511;
    SV_Target.y = _2512;
    SV_Target.z = _2513;
    SV_Target.w = _2885;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2347].w;
    discard_exit();
}


