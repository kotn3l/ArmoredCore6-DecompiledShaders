#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _849;
float _3024;
float _3025;
float _3026;
float _3027;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(C_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = (_227.x * 2.0) + (-1.0);
    float _238 = (_227.y * 2.0) + (-1.0);
    float _239 = dot(vec2(_236, _238), vec2(_236, _238));
    float _3036 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _245 = sqrt(1.0 - (isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0))));
    float _247 = cbMtdParam._m0[10u].x + _227.z;
    float _250 = fma(_245, _192 * NORMAL.x, fma(_238, _199 * TANGENT.x, (_185 * _178) * _236));
    float _253 = fma(_245, _192 * NORMAL.y, fma(_238, _199 * TANGENT.y, (_185 * _179) * _236));
    float _256 = fma(_245, _192 * NORMAL.z, fma(_238, _199 * TANGENT.z, (_185 * _180) * _236));
    float _260 = inversesqrt(dot(vec3(_250, _253, _256), vec3(_250, _253, _256)));
    float _261 = _260 * _250;
    float _262 = _260 * _253;
    float _263 = _260 * _256;
    float _3047 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _264 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
    float _3058 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _265 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
    float _3069 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3080 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3091 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3102 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _269 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
    float _285 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _326 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _336 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _326);
    float _337 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _326);
    float _338 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _326);
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _343 = _336 * _342;
    float _344 = _337 * _342;
    float _345 = _338 * _342;
    vec4 _350 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _352 = _350.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _528 = sqrt(((_336 * _336) + (_337 * _337)) + (_338 * _338));
        float _534 = (cbMatDynParam._m0[5u].x * _528) + cbMatDynParam._m0[5u].y;
        float _3113 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
        float _535 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _539 = (cbMatDynParam._m0[5u].z * _528) + cbMatDynParam._m0[5u].w;
        float _3124 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) - _535)) + _535) < ((_352 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _385 = fma(_263, cbSceneParam._m0[5u].z, fma(_262, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _261));
    float _388 = fma(_263, cbSceneParam._m0[6u].z, fma(_262, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _261));
    float _391 = fma(_263, cbSceneParam._m0[7u].z, fma(_262, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _261));
    uint _404 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = _404 + 9u;
    uint _407 = _406 + uint(cbMatDynParam._m0[0u].w);
    float _413 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0)))) * cbInstanceData._m0[_407].x;
    float _414 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0)))) * cbInstanceData._m0[_407].y;
    float _415 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0)))) * cbInstanceData._m0[_407].z;
    float _3135 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _3146 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _3157 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    float _419 = 1.0 - _269;
    float _420 = _416 * _419;
    float _421 = _417 * _419;
    float _422 = _418 * _419;
    float _427 = (_416 + (-0.039999999105930328369140625)) * _269;
    float _428 = (_417 + (-0.039999999105930328369140625)) * _269;
    float _429 = (_418 + (-0.039999999105930328369140625)) * _269;
    float _430 = _427 + 0.039999999105930328369140625;
    float _432 = _428 + 0.039999999105930328369140625;
    float _433 = _429 + 0.039999999105930328369140625;
    vec4 _442 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _364, cbSceneParam._m0[86u].y * _365));
    float _445 = _442.x * TEXCOORD.z;
    float _446 = dot(vec3(_261, _262, _263), vec3(_343, _344, _345));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _261) - _343;
    float _454 = (_449 * _262) - _344;
    float _455 = (_449 * _263) - _345;
    float _459 = abs(dot(vec3(_343, _344, _345), vec3(_261, _262, _263)));
    float _3168 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = sqrt(_265);
    float _474 = exp2((_461 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_461 * 3.0));
    float _480 = (1.0 - _474) * ((_461 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _481 = _474 * _461;
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _848;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = fma(_517, cbModelParam._m0[26u].z, fma(_513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509));
        float _577 = fma(_517, cbModelParam._m0[27u].z, fma(_513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509));
        float _581 = fma(_517, cbModelParam._m0[28u].z, fma(_513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509));
        float _606 = _509 + _261;
        float _607 = _513 + _262;
        float _608 = _517 + _263;
        float _618 = fma(_608, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606)) - _573;
        float _619 = fma(_608, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606)) - _577;
        float _620 = fma(_608, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606)) - _581;
        float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
        float _637 = ((_624 * _618) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_573 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_624 * _619) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_577 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_624 * _620) / cbModelParam._m0[34u].z) + ((((((_581 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        float _676 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_642.x + (-0.5));
        float _678 = _676 * (_642.y + (-0.5));
        float _679 = _676 * (_642.z + (-0.5));
        float _686 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_649.x + (-0.5));
        float _688 = _686 * (_649.y + (-0.5));
        float _689 = _686 * (_649.z + (-0.5));
        float _696 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_656.x + (-0.5));
        float _698 = _696 * (_656.y + (-0.5));
        float _699 = _696 * (_656.z + (-0.5));
        float _706 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_663.x + (-0.5));
        float _708 = _706 * (_663.y + (-0.5));
        float _709 = _706 * (_663.z + (-0.5));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = _677 * 0.5;
        float _714 = _687 * 0.5;
        float _715 = _697 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _730 = (dot(vec3(_261, _262, _263), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3194 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _740 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3205 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3216 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))) * (_742 + 1.0))) + _747) * _710;
        float _757 = _678 * 0.5;
        float _758 = _688 * 0.5;
        float _759 = _698 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_261, _262, _263), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3227 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3238 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3249 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) * (_784 + 1.0))) + _789) * _711;
        float _799 = _679 * 0.5;
        float _800 = _689 * 0.5;
        float _801 = _699 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_261, _262, _263), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3260 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3271 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3282 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * (_826 + 1.0))) + _831) * _712;
        _848 = _679;
        _850 = _678;
        _851 = _677;
        _852 = _689;
        _853 = _688;
        _854 = _687;
        _855 = _699;
        _856 = _698;
        _857 = _697;
        _858 = _712;
        _859 = _711;
        _860 = _710;
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
    }
    else
    {
        _848 = _849;
        _850 = _849;
        _851 = _849;
        _852 = _849;
        _853 = _849;
        _854 = _849;
        _855 = _849;
        _856 = _849;
        _857 = _849;
        _858 = _849;
        _859 = _849;
        _860 = _849;
        _861 = 0.0;
        _862 = 0.0;
        _863 = 0.0;
    }
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _892 = fma(_517, cbModelParam._m0[30u].z, fma(_513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _509));
        float _896 = fma(_517, cbModelParam._m0[31u].z, fma(_513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _509));
        float _900 = fma(_517, cbModelParam._m0[32u].z, fma(_513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _509));
        float _923 = _509 + _261;
        float _924 = _513 + _262;
        float _925 = _517 + _263;
        float _935 = fma(_925, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923)) - _892;
        float _936 = fma(_925, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923)) - _896;
        float _937 = fma(_925, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923)) - _900;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_892 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_896 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[35u].z) + ((((((_900 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _991 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_958.x + (-0.5));
        float _993 = _991 * (_958.y + (-0.5));
        float _994 = _991 * (_958.z + (-0.5));
        float _1001 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_965.x + (-0.5));
        float _1003 = _1001 * (_965.y + (-0.5));
        float _1004 = _1001 * (_965.z + (-0.5));
        float _1011 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_972.x + (-0.5));
        float _1013 = _1011 * (_972.y + (-0.5));
        float _1014 = _1011 * (_972.z + (-0.5));
        float _1021 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_979.x + (-0.5));
        float _1023 = _1021 * (_979.y + (-0.5));
        float _1024 = _1021 * (_979.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_261, _262, _263), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3345 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_1055 + 1.0))) + _1060) * _1025;
        float _1070 = _993 * 0.5;
        float _1071 = _1003 * 0.5;
        float _1072 = _1013 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_261, _262, _263), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3378 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_1097 + 1.0))) + _1102) * _1026;
        float _1112 = _994 * 0.5;
        float _1113 = _1004 * 0.5;
        float _1114 = _1014 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_261, _262, _263), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3411 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_1139 + 1.0))) + _1144) * _1027;
        _1161 = _994;
        _1162 = _993;
        _1163 = _992;
        _1164 = _1004;
        _1165 = _1003;
        _1166 = _1002;
        _1167 = _1014;
        _1168 = _1013;
        _1169 = _1012;
        _1170 = _1027;
        _1171 = _1026;
        _1172 = _1025;
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _849;
        _1162 = _849;
        _1163 = _849;
        _1164 = _849;
        _1165 = _849;
        _1166 = _849;
        _1167 = _849;
        _1168 = _849;
        _1169 = _849;
        _1170 = _849;
        _1171 = _849;
        _1172 = _849;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _861)) + _861;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _863)) + _863;
    float _1208 = fma(_1187, cbSceneParam._m0[89u].z, fma(_1186, cbSceneParam._m0[89u].y, _1185 * cbSceneParam._m0[89u].x));
    float _1211 = fma(_1187, cbSceneParam._m0[90u].z, fma(_1186, cbSceneParam._m0[90u].y, _1185 * cbSceneParam._m0[90u].x));
    float _1214 = fma(_1187, cbSceneParam._m0[91u].z, fma(_1186, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1185));
    float _1229 = _453 * 0.5;
    float _1230 = _454 * 0.5;
    float _1231 = _455 * 0.5;
    float _1232 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1235 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1238 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1272;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1245 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_848, _852, _855, _858));
        float _1249 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_850, _853, _856, _859));
        float _1253 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_851, _854, _857, _860));
        float _1260 = dot(vec4(cbModelParam._m0[39u]), vec4(_1229, _1230, _1231, 1.0));
        _1272 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1272 = 1.0;
    }
    float _1283;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1274 = dot(vec4(cbModelParam._m0[40u]), vec4(_1229, _1230, _1231, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1274) ? 0.0 : (isnan(0.0) ? _1274 : max(0.0, _1274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1287 = (_1283 * cbModelParam._m0[1u].x) + (_1272 * (1.0 - cbModelParam._m0[1u].x));
    float _1297 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _265);
    float _1298 = isnan(_1297) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1297 : min(cbModelParam._m0[25u].z, _1297));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1347 = fma(_517, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509)) + cbModelParam._m0[13u].w;
        float _1351 = fma(_517, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509)) + cbModelParam._m0[14u].w;
        float _1355 = fma(_517, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509)) + cbModelParam._m0[15u].w;
        float _1358 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1361 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1364 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1392;
        if (_1358 > 0.0)
        {
            _1392 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1392 = frontier_phi_17_15_ladder;
        }
        float _1808;
        if (_1361 > 0.0)
        {
            _1808 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1808 = frontier_phi_26_22_ladder;
        }
        float _2117;
        if (_1364 > 0.0)
        {
            _2117 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2117 = frontier_phi_40_33_ladder;
        }
        float _2119 = isnan(_1808) ? _1392 : (isnan(_1392) ? _1808 : min(_1392, _1808));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1358) + _1347;
        float _2125 = (_2120 * _1361) + _1351;
        float _2126 = (_2120 * _1364) + _1355;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2127;
        float _2130 = _2127 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2126 > _2130) || ((_2126 < _2128) || ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 < _2128) || (_2124 > _2130))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1298);
            frontier_phi_16_40_ladder = _2268.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2268.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2268.x * cbModelParam._m0[1u].y;
        }
        _1380 = frontier_phi_16_40_ladder_2;
        _1382 = frontier_phi_16_40_ladder_1;
        _1384 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1298);
        _1380 = _1368.x * cbModelParam._m0[1u].y;
        _1382 = _1368.y * cbModelParam._m0[1u].y;
        _1384 = _1368.z * cbModelParam._m0[1u].y;
    }
    float _1388 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _265);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1388 : min(cbModelParam._m0[25u].w, _1388));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1446 = fma(_517, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509)) + cbModelParam._m0[21u].w;
        float _1450 = fma(_517, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509)) + cbModelParam._m0[22u].w;
        float _1454 = fma(_517, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509)) + cbModelParam._m0[23u].w;
        float _1457 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1460 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1463 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1813;
        if (_1457 > 0.0)
        {
            _1813 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1813 = frontier_phi_28_24_ladder;
        }
        float _2143;
        if (_1460 > 0.0)
        {
            _2143 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2143 = frontier_phi_42_35_ladder;
        }
        float _2333;
        if (_1463 > 0.0)
        {
            _2333 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2333 = frontier_phi_60_53_ladder;
        }
        float _2335 = isnan(_2143) ? _1813 : (isnan(_1813) ? _2143 : min(_1813, _2143));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1457) + _1446;
        float _2341 = (_2336 * _1460) + _1450;
        float _2342 = (_2336 * _1463) + _1454;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2343;
        float _2346 = _2343 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2342 > _2346) || ((_2342 < _2344) || ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 < _2344) || (_2340 > _2346))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2342, cbModelParam._m0[17u].z, fma(_2341, cbModelParam._m0[17u].y, _2340 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2342, cbModelParam._m0[18u].z, fma(_2341, cbModelParam._m0[18u].y, _2340 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2342, cbModelParam._m0[19u].z, fma(_2341, cbModelParam._m0[19u].y, _2340 * cbModelParam._m0[19u].x))), _1389);
            frontier_phi_25_60_ladder = _2584.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _2584.y * cbModelParam._m0[1u].z;
        }
        _1482 = frontier_phi_25_60_ladder;
        _1484 = frontier_phi_25_60_ladder_2;
        _1486 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1389);
        _1482 = _1466.x * cbModelParam._m0[1u].z;
        _1484 = _1466.y * cbModelParam._m0[1u].z;
        _1486 = _1466.z * cbModelParam._m0[1u].z;
    }
    float _1499 = (((_480 * _430) + _481) * _445) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1501 = (((_480 * _432) + _481) * _445) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1503 = (((_480 * _433) + _481) * _445) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1506 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1499 * cbSceneParam._m0[91u].x));
    float _1557 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _509), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _517))).x));
    float _3537 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1562 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _509), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _517))).x));
    float _3548 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _1564 = (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)));
    uvec4 _1568 = floatBitsToUint(cbInstanceData._m0[_404 + 5u]);
    uint _1570 = _1568.x * 14u;
    uint _1571 = _1570 + 13u;
    float _1576 = _445 + (-1.0);
    float _1579 = (cbLight._m0[_1571].x * _1576) + 1.0;
    float _1580 = (cbLight._m0[_1571].y * _1576) + 1.0;
    uint _1581 = _1570 + 5u;
    float _1587 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1591 = _1570 + 4u;
    float _1601 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    uint _1605 = _1570 | 1u;
    float _1616 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_261, _262, _263));
    float _1619 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_261, _262, _263));
    float _3569 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _3580 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1624 = (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.3183098733425140380859375;
    float _1626 = (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 0.3183098733425140380859375;
    float _1633 = ((cbLight._m0[_1581].x * _1587) * _1626) + (((cbLight._m0[_1591].x * _1564) * _1601) * _1624);
    float _1634 = ((_1587 * cbLight._m0[_1581].y) * _1626) + (((cbLight._m0[_1591].y * _1564) * _1601) * _1624);
    float _1635 = ((_1587 * cbLight._m0[_1581].z) * _1626) + (((cbLight._m0[_1591].z * _1564) * _1601) * _1624);
    uint _1637 = _1570 + 8u;
    float _1650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _265) * 0.949999988079071044921875);
    float _1651 = _1650 * _1650;
    float _1652 = cbLight._m0[_1570].x + _343;
    float _1653 = cbLight._m0[_1570].y + _344;
    float _1654 = cbLight._m0[_1570].z + _345;
    float _1658 = inversesqrt(dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654)));
    float _1659 = _1658 * _1652;
    float _1660 = _1658 * _1653;
    float _1661 = _1658 * _1654;
    float _1662 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1570].xyz));
    float _3591 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _1666 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _1667 = dot(vec3(_261, _262, _263), vec3(_1659, _1660, _1661));
    float _3613 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _1671 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1659, _1660, _1661));
    float _3624 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1675 = _1651 * _1651;
    float _1679 = ((_1670 * _1670) * (_1675 + (-1.0))) + 1.0;
    float _1687 = exp2(log2(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * 5.0);
    float _1688 = 0.959999978542327880859375 - _427;
    float _1690 = 0.959999978542327880859375 - _428;
    float _1691 = 0.959999978542327880859375 - _429;
    float _1698 = 1.0 - _1651;
    float _1709 = (0.5 / (((_1666 * ((_1665 * _1698) + _1651)) + 9.9999999392252902907785028219223e-09) + (((_1666 * _1698) + _1651) * _1665))) * _1665;
    float _3635 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1711 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1675 / ((_1679 * _1679) * 3.141590118408203125));
    uint _1725 = _1570 + 9u;
    float _1736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _265) * 0.949999988079071044921875);
    float _1737 = _1736 * _1736;
    float _1738 = cbLight._m0[_1605].x + _343;
    float _1739 = cbLight._m0[_1605].y + _344;
    float _1740 = cbLight._m0[_1605].z + _345;
    float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
    float _1745 = _1744 * _1738;
    float _1746 = _1744 * _1739;
    float _1747 = _1744 * _1740;
    float _1748 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1605].xyz));
    float _3646 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _1752 = dot(vec3(_261, _262, _263), vec3(_1745, _1746, _1747));
    float _3657 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1745, _1746, _1747));
    float _3668 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1737 * _1737;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1771 = exp2(log2(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * 5.0);
    float _1778 = 1.0 - _1737;
    float _1788 = (0.5 / (((_1666 * ((_1751 * _1778) + _1737)) + 9.9999999392252902907785028219223e-09) + (((_1666 * _1778) + _1737) * _1751))) * _1751;
    float _3679 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    float _1800 = (((((_1771 * _1688) + _430) * cbLight._m0[_1725].x) * _1790) * _1587) + ((((cbLight._m0[_1637].x * _1564) * ((_1687 * _1688) + _430)) * _1711) * _1601);
    float _1801 = (((((_1771 * _1690) + _432) * cbLight._m0[_1725].y) * _1790) * _1587) + ((((cbLight._m0[_1637].y * _1564) * ((_1687 * _1690) + _432)) * _1711) * _1601);
    float _1802 = (((((_1771 * _1691) + _433) * cbLight._m0[_1725].z) * _1790) * _1587) + ((((cbLight._m0[_1637].z * _1564) * ((_1687 * _1691) + _433)) * _1711) * _1601);
    float _1918;
    float _1920;
    float _1922;
    float _1924;
    float _1926;
    float _1928;
    if (_1568.y == 0u)
    {
        float _1858 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1858;
        float _1860 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1858;
        float _1861 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1858;
        uvec4 _1873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1874 = _1873.x;
        uint _1885 = uint((float(_1873.y) * floor(float(uint(cbSceneParam._m0[85u].y * _365) / _1874))) + floor(float(uint(cbSceneParam._m0[85u].x * _364) / _1874)));
        float _1895 = (log2(_1861 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1896 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        uint _1899 = uint(isnan(14.0) ? _1896 : (isnan(_1896) ? 14.0 : min(_1896, 14.0)));
        uvec4 _1904 = texelFetch(g_lightClusterGridBuffer, int(((_1899 << 2u) + (_1885 << 6u)) >> 2u));
        uint _1905 = _1904.x;
        uint _1906 = _1873.z;
        float _1995;
        float _1997;
        float _1999;
        float _2001;
        float _2003;
        float _2005;
        if (((((1u << ((_1906 >> 4u) & 15u)) + 4294967295u) & _1905) == 0u) || ((_1906 & 240u) == 0u))
        {
            _1995 = 0.0;
            _1997 = 0.0;
            _1999 = 0.0;
            _2001 = 0.0;
            _2003 = 0.0;
            _2005 = 0.0;
        }
        else
        {
            float _1996;
            float _1998;
            float _2000;
            float _2002;
            float _2004;
            float _2006;
            float _2180 = 0.0;
            float _2181 = 0.0;
            float _2182 = 0.0;
            float _2183 = 0.0;
            float _2184 = 0.0;
            float _2185 = 0.0;
            uint _2186 = 0u;
            uint _2195;
            bool _2196;
            for (;;)
            {
                _2195 = texelFetch(g_lightClassification, int((((_1899 << 5u) + (_1885 << 9u)) + (_2186 << 2u)) >> 2u)).x;
                _2196 = _2195 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2196)
                {
                    frontier_phi_55_pred = _2184;
                    frontier_phi_55_pred_1 = _2185;
                    frontier_phi_55_pred_2 = _2183;
                    frontier_phi_55_pred_3 = _2182;
                    frontier_phi_55_pred_4 = _2181;
                    frontier_phi_55_pred_5 = _2180;
                }
                else
                {
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    uint _2382;
                    _2376 = _2180;
                    _2377 = _2181;
                    _2378 = _2182;
                    _2379 = _2183;
                    _2380 = _2184;
                    _2381 = _2185;
                    _2382 = _2195;
                    float _2277;
                    float _2278;
                    float _2279;
                    float _2280;
                    float _2281;
                    float _2282;
                    for (;;)
                    {
                        uint _2386 = uint(findLSB(_2382)) + (_2186 << 5u);
                        uint _2383 = (_2382 + 4294967295u) & _2382;
                        uint _2388 = _2386 * 48u;
                        vec4 _2402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2388)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 3u)).x));
                        uint _2408 = (_2386 * 48u) + 4u;
                        vec4 _2421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2408)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 3u)).x));
                        uint _2427 = (_2386 * 48u) + 8u;
                        vec3 _2438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2427)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 2u)).x));
                        float _2442 = _2402.x - _1859;
                        float _2443 = _2402.y - _1860;
                        float _2444 = _2402.z - _1861;
                        float _2445 = dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444));
                        float _2448 = inversesqrt(_2445);
                        float _2449 = _2448 * _2442;
                        float _2450 = _2448 * _2443;
                        float _2451 = _2448 * _2444;
                        float _2452 = dot(vec3(_385, _388, _391), vec3(_2449, _2450, _2451));
                        float _2457 = 1.0 - (_2445 * _2402.w);
                        float _3700 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                        float _2458 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                        float _2459 = sqrt(_2445) * _2421.w;
                        float _2462 = 1.39999997615814208984375 / (_2459 + 1.39999997615814208984375);
                        float _2463 = _2462 * _2462;
                        float _2466 = ((1.0 - _2463) * _2452) + _2463;
                        float _2469 = _2459 * _2459;
                        float _2473 = ((isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0))) * _2458) / ((_2469 * 0.699999988079071044921875) + 1.0);
                        float _2477 = (-0.0) - _1859;
                        float _2478 = (-0.0) - _1860;
                        float _2479 = (-0.0) - _1861;
                        float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
                        float _2484 = _2483 * _2477;
                        float _2485 = _2483 * _2478;
                        float _2486 = _2483 * _2479;
                        float _2494 = exp2(log2(1.0 / ((_2469 * 3.5) + 5.0)) * 0.25);
                        float _2495 = 1.0 - _461;
                        float _2502 = sqrt(1.0 - ((1.0 - (_2495 * _2495)) * (1.0 - (_2494 * _2494))));
                        float _2503 = _2502 * _2502;
                        float _2504 = _2503 * _2503;
                        float _2505 = _2484 + _2449;
                        float _2506 = _2485 + _2450;
                        float _2507 = _2486 + _2451;
                        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
                        float _2515 = dot(vec3(_385, _388, _391), vec3(_2484, _2485, _2486));
                        float _3716 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _2518 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
                        float _2519 = dot(vec3(_385, _388, _391), vec3(_2511 * _2505, _2511 * _2506, _2511 * _2507));
                        float _3727 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
                        float _2522 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
                        float _2526 = ((_2522 * _2522) * (_2504 + (-1.0))) + 1.0;
                        float _2527 = _2462 * _2503;
                        float _2528 = _2527 * _2527;
                        float _2531 = ((1.0 - _2528) * _2452) + _2528;
                        float _3738 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _2532 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
                        float _2533 = 1.0 - _2503;
                        float _2543 = (0.5 / (((_2532 * ((_2518 * _2533) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2533) + _2503) * _2518))) * _2532;
                        float _3749 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
                        float _2554 = (((_2504 * 3.1415927410125732421875) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) / ((_2526 * _2526) * ((_2469 * 2.1991131305694580078125) + 3.141590118408203125))) * _2458;
                        _2280 = (_2473 * _2421.x) + _2379;
                        _2281 = (_2473 * _2421.y) + _2380;
                        _2282 = (_2473 * _2421.z) + _2381;
                        _2277 = (_2554 * _2438.x) + _2376;
                        _2278 = (_2554 * _2438.y) + _2377;
                        _2279 = (_2554 * _2438.z) + _2378;
                        if (_2383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2376 = _2277;
                            _2377 = _2278;
                            _2378 = _2279;
                            _2379 = _2280;
                            _2380 = _2281;
                            _2381 = _2282;
                            _2382 = _2383;
                        }
                    }
                    frontier_phi_55_pred = _2281;
                    frontier_phi_55_pred_1 = _2282;
                    frontier_phi_55_pred_2 = _2280;
                    frontier_phi_55_pred_3 = _2279;
                    frontier_phi_55_pred_4 = _2278;
                    frontier_phi_55_pred_5 = _2277;
                }
                _2004 = frontier_phi_55_pred;
                _2006 = frontier_phi_55_pred_1;
                _2002 = frontier_phi_55_pred_2;
                _2000 = frontier_phi_55_pred_3;
                _1998 = frontier_phi_55_pred_4;
                _1996 = frontier_phi_55_pred_5;
                uint _2187 = _2186 + 1u;
                if (_2187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2180 = _1996;
                    _2181 = _1998;
                    _2182 = _2000;
                    _2183 = _2002;
                    _2184 = _2004;
                    _2185 = _2006;
                    _2186 = _2187;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1995 = _1996;
            _1997 = _1998;
            _1999 = _2000;
            _2001 = _2002;
            _2003 = _2004;
            _2005 = _2006;
        }
        uvec4 _2009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2010 = _2009.z;
        uint _2012 = (_2010 >> 8u) & 15u;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((4294967295u << _2012) & _1905) == 0u)
        {
            _2148 = _1995;
            _2150 = _1997;
            _2152 = _1999;
            _2154 = _2001;
            _2156 = _2003;
            _2158 = _2005;
        }
        else
        {
            float _2173 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
            float _2174 = _2173 * _1859;
            float _2175 = _2173 * _1860;
            float _2176 = _2173 * _1861;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2012 < ((_2010 >> 12u) & 15u))
            {
                float _2149;
                float _2151;
                float _2153;
                float _2155;
                float _2157;
                float _2159;
                float _2359 = _1995;
                float _2360 = _1997;
                float _2361 = _1999;
                float _2362 = _2001;
                float _2363 = _2003;
                float _2364 = _2005;
                uint _2365 = _2012;
                uint _2374;
                bool _2375;
                for (;;)
                {
                    _2374 = texelFetch(g_lightClassification, int((((_1899 << 5u) + (_1885 << 9u)) + (_2365 << 2u)) >> 2u)).x;
                    _2375 = _2374 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2375)
                    {
                        frontier_phi_69_pred = _2364;
                        frontier_phi_69_pred_1 = _2363;
                        frontier_phi_69_pred_2 = _2362;
                        frontier_phi_69_pred_3 = _2361;
                        frontier_phi_69_pred_4 = _2360;
                        frontier_phi_69_pred_5 = _2359;
                    }
                    else
                    {
                        float _2589;
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2602 = _2359;
                        float _2603 = _2360;
                        float _2604 = _2361;
                        float _2605 = _2362;
                        float _2606 = _2363;
                        float _2607 = _2364;
                        uint _2608 = _2374;
                        uint _2609;
                        vec4 _2634;
                        float _2635;
                        vec4 _2650;
                        vec3 _2662;
                        vec4 _2678;
                        vec4 _2694;
                        float _2741;
                        bool _2742;
                        for (;;)
                        {
                            uint _2619 = ((_2365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2608));
                            _2609 = (_2608 + 4294967295u) & _2608;
                            uint _2621 = _2619 * 40u;
                            _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            _2635 = _2634.w;
                            uint _2637 = (_2619 * 40u) + 4u;
                            _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            uint _2652 = (_2619 * 40u) + 8u;
                            _2662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x));
                            uint _2665 = (_2619 * 40u) + 16u;
                            _2678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 3u)).x));
                            uint _2681 = (_2619 * 40u) + 20u;
                            _2694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 3u)).x));
                            uint _2697 = (_2619 * 40u) + 24u;
                            vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 3u)).x));
                            uint _2716 = (_2619 * 40u) + 28u;
                            vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            _2741 = fma(_1861, _2729.z, fma(_1860, _2729.y, _2729.x * _1859)) + _2729.w;
                            _2742 = !((fma(_1861, _2710.z, fma(_1860, _2710.y, _2710.x * _1859)) + _2710.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2742)
                            {
                                float _2769 = _2634.x - _1859;
                                float _2770 = _2634.y - _1860;
                                float _2771 = _2634.z - _1861;
                                float _2772 = dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771));
                                float _2775 = inversesqrt(_2772);
                                float _2776 = _2775 * _2769;
                                float _2777 = _2775 * _2770;
                                float _2778 = _2775 * _2771;
                                float _2782 = 1.0 - (_2772 / (_2635 * _2635));
                                float _3760 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                                float _2783 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                                float _2787 = sqrt(_2772) * _2650.w;
                                float _2789 = 1.39999997615814208984375 / (_2787 + 1.39999997615814208984375);
                                float _2790 = _2789 * _2789;
                                float _2793 = ((1.0 - _2790) * dot(vec3(_2776, _2777, _2778), vec3(_385, _388, _391))) + _2790;
                                float _2796 = _2787 * _2787;
                                float _2800 = (fma(_1861, _2678.z, fma(_1860, _2678.y, _2678.x * _1859)) + _2678.w) / _2741;
                                float _2801 = (fma(_1861, _2694.z, fma(_1860, _2694.y, _2694.x * _1859)) + _2694.w) / _2741;
                                float _2805 = 1.0 - dot(vec2(_2800, _2801), vec2(_2800, _2801));
                                float _3776 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                                float _2806 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
                                float _2807 = _2806 * (((isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))) * _2783) / ((_2796 * 0.699999988079071044921875) + 1.0));
                                float _2819 = exp2(log2(1.0 / ((_2796 * 3.5) + 5.0)) * 0.25);
                                float _2820 = 1.0 - _461;
                                float _2827 = sqrt(1.0 - ((1.0 - (_2820 * _2820)) * (1.0 - (_2819 * _2819))));
                                float _2828 = _2827 * _2827;
                                float _2829 = _2828 * _2828;
                                float _2830 = _2776 - _2174;
                                float _2831 = _2777 - _2175;
                                float _2832 = _2778 - _2176;
                                float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                                float _2840 = dot(vec3(_385, _388, _391), vec3((-0.0) - _2174, (-0.0) - _2175, (-0.0) - _2176));
                                float _3787 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2843 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                                float _2844 = dot(vec3(_385, _388, _391), vec3(_2836 * _2830, _2836 * _2831, _2836 * _2832));
                                float _3798 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2847 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
                                float _2851 = ((_2847 * _2847) * (_2829 + (-1.0))) + 1.0;
                                float _2852 = _2789 * _2828;
                                float _2853 = _2852 * _2852;
                                float _2859 = ((1.0 - _2853) * dot(vec3(_385, _388, _391), vec3(_2776, _2777, _2778))) + _2853;
                                float _3809 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2860 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
                                float _2861 = 1.0 - _2828;
                                float _2871 = (0.5 / (((_2860 * ((_2843 * _2861) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2860 * _2861) + _2828) * _2843))) * _2860;
                                float _3820 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                                float _2881 = (_2806 * _2783) * (((_2829 * 3.1415927410125732421875) * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) / ((_2851 * _2851) * ((_2796 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2807 * _2650.x;
                                frontier_phi_75_pred_1 = _2807 * _2650.z;
                                frontier_phi_75_pred_2 = _2807 * _2650.y;
                                frontier_phi_75_pred_3 = _2881 * _2662.z;
                                frontier_phi_75_pred_4 = _2881 * _2662.y;
                                frontier_phi_75_pred_5 = _2881 * _2662.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2888 = frontier_phi_75_pred;
                            _2890 = frontier_phi_75_pred_1;
                            _2889 = frontier_phi_75_pred_2;
                            _2887 = frontier_phi_75_pred_3;
                            _2886 = frontier_phi_75_pred_4;
                            _2885 = frontier_phi_75_pred_5;
                            _2592 = _2888 + _2605;
                            _2593 = _2889 + _2606;
                            _2594 = _2890 + _2607;
                            _2589 = _2885 + _2602;
                            _2590 = _2886 + _2603;
                            _2591 = _2887 + _2604;
                            if (_2609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2602 = _2589;
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2609;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2594;
                        frontier_phi_69_pred_1 = _2593;
                        frontier_phi_69_pred_2 = _2592;
                        frontier_phi_69_pred_3 = _2591;
                        frontier_phi_69_pred_4 = _2590;
                        frontier_phi_69_pred_5 = _2589;
                    }
                    _2159 = frontier_phi_69_pred;
                    _2157 = frontier_phi_69_pred_1;
                    _2155 = frontier_phi_69_pred_2;
                    _2153 = frontier_phi_69_pred_3;
                    _2151 = frontier_phi_69_pred_4;
                    _2149 = frontier_phi_69_pred_5;
                    uint _2366 = _2365 + 1u;
                    if (_2366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2359 = _2149;
                        _2360 = _2151;
                        _2361 = _2153;
                        _2362 = _2155;
                        _2363 = _2157;
                        _2364 = _2159;
                        _2365 = _2366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2151;
                frontier_phi_44_45_ladder_1 = _2159;
                frontier_phi_44_45_ladder_2 = _2157;
                frontier_phi_44_45_ladder_3 = _2155;
                frontier_phi_44_45_ladder_4 = _2153;
                frontier_phi_44_45_ladder_5 = _2149;
            }
            else
            {
                frontier_phi_44_45_ladder = _1997;
                frontier_phi_44_45_ladder_1 = _2005;
                frontier_phi_44_45_ladder_2 = _2003;
                frontier_phi_44_45_ladder_3 = _2001;
                frontier_phi_44_45_ladder_4 = _1999;
                frontier_phi_44_45_ladder_5 = _1995;
            }
            _2148 = frontier_phi_44_45_ladder_5;
            _2150 = frontier_phi_44_45_ladder;
            _2152 = frontier_phi_44_45_ladder_4;
            _2154 = frontier_phi_44_45_ladder_3;
            _2156 = frontier_phi_44_45_ladder_2;
            _2158 = frontier_phi_44_45_ladder_1;
        }
        float _2163 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _1918 = (_2163 * _2154) + _1633;
        _1920 = (_2163 * _2156) + _1634;
        _1922 = (_2163 * _2158) + _1635;
        _1924 = ((_2148 * _430) * _2163) + _1800;
        _1926 = ((_2150 * _432) * _2163) + _1801;
        _1928 = ((_2152 * _433) * _2163) + _1802;
    }
    else
    {
        _1918 = _1633;
        _1920 = _1634;
        _1922 = _1635;
        _1924 = _1800;
        _1926 = _1801;
        _1928 = _1802;
    }
    float _3836 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3847 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3858 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3869 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _1946 = ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1918 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _445))) + ((_1924 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1287)) * cbPerFrame._m0[3u].x);
    float _1947 = ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1920 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _445))) + ((_1926 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1287)) * cbPerFrame._m0[3u].x);
    float _1948 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1922 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _445))) + ((_1928 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1287)) * cbPerFrame._m0[3u].x);
    float _1953 = cbInstanceData._m0[_404 + 6u].w * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)));
    float _1958 = _364 / cbSceneParam._m0[86u].x;
    float _1959 = _365 / cbSceneParam._m0[86u].y;
    vec4 _1973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1958, _1959, (log2((isnan(cbSceneParam._m0[77u].w) ? _285 : (isnan(_285) ? cbSceneParam._m0[77u].w : min(_285, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1975 = _1973.x;
    float _1976 = _1973.y;
    float _1977 = _1973.z;
    float _1978 = _1973.w;
    float _2059;
    float _2061;
    float _2063;
    float _2065;
    if (_285 > cbSceneParam._m0[78u].w)
    {
        float _2020 = isnan(_285) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _285 : min(cbSceneParam._m0[80u].w, _285));
        float _2021 = _2020 / _285;
        float _2032 = _2021 * _336;
        float _2033 = _337 * _2021;
        float _2034 = (-0.0) - _2033;
        float _2036 = _2021 * _338;
        float _2038 = (cbSceneParam._m0[77u].w * _2034) / _2020;
        float _2039 = _2038 + cbSceneParam._m0[79u].w;
        float _2040 = cbSceneParam._m0[79u].w - _2033;
        float _2046 = sqrt(((_2032 * _2032) + (_2033 * _2033)) + (_2036 * _2036));
        float _2049 = (1.0 - (cbSceneParam._m0[77u].w / _2020)) * _2046;
        float _2055 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2057 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2290;
        if (abs((_2034 - _2038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2290 = ((((_2039 > 0.0) ? exp2(_2055 * _2039) : (2.0 - exp2(_2057 * _2039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2049;
        }
        else
        {
            float _2209 = 1.0 / cbSceneParam._m0[80u].x;
            float _2210 = isnan(_2040) ? _2039 : (isnan(_2039) ? _2040 : max(_2039, _2040));
            float _2211 = isnan(_2040) ? _2039 : (isnan(_2039) ? _2040 : min(_2039, _2040));
            float _2220 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : min(_2210, 0.0));
            float _2221 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : min(_2211, 0.0));
            _2290 = ((abs(_2046 / _2034) * cbSceneParam._m0[80u].y) * ((((_2220 - _2221) * 2.0) - ((exp2(_2055 * (isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0)))) - exp2(_2055 * (isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))))) * _2209)) - ((exp2(_2057 * _2220) - exp2(_2057 * _2221)) * _2209))) + (_2049 * cbSceneParam._m0[80u].z);
        }
        vec4 _2292 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1958, _1959, 1.0), 0.0);
        float _2301 = exp2((_2290 * (-1.44269502162933349609375)) * (1.0 - _2292.w));
        float _2302 = log2(_2301);
        float _2318 = log2(_1978);
        _2059 = (exp2(_2318 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2302 * cbSceneParam._m0[78u].x)) * _2292.x) / cbSceneParam._m0[78u].x)) + _1975;
        _2061 = (exp2(_2318 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2302 * cbSceneParam._m0[78u].y)) * _2292.y) / cbSceneParam._m0[78u].y)) + _1976;
        _2063 = (exp2(_2318 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2302 * cbSceneParam._m0[78u].z)) * _2292.z) / cbSceneParam._m0[78u].z)) + _1977;
        _2065 = _2301 * _1978;
    }
    else
    {
        _2059 = _1975;
        _2061 = _1976;
        _2063 = _1977;
        _2065 = _1978;
    }
    bool _2328;
    vec4 _2075;
    vec4 _2097;
    float _2099;
    float _2103;
    float _2104;
    float _2105;
    float _2106;
    bool _2116;
    for (;;)
    {
        _2075 = cbMatDynParam._m0[0u];
        float _2077 = roundEven(_2075.y);
        bool _2078 = _2077 == 3.0;
        float _2079 = log2(_2065);
        float _2086 = exp2(_2079 * cbSceneParam._m0[78u].x) * _1946;
        float _2087 = exp2(_2079 * cbSceneParam._m0[78u].y) * _1947;
        float _2088 = exp2(_2079 * cbSceneParam._m0[78u].z) * _1948;
        float _2095 = _352 + (-0.5);
        _2097 = cbMtdParam._m0[1u];
        _2099 = _2097.y * _2095;
        float _2102 = (_2077 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2103 = _2102 * (_2078 ? _2086 : (_2086 + (cbSceneParam._m0[72u].w * _2059)));
        _2104 = _2102 * (_2078 ? _2087 : (_2087 + (cbSceneParam._m0[72u].w * _2061)));
        _2105 = _2102 * (_2078 ? _2088 : (_2088 + (cbSceneParam._m0[72u].w * _2063)));
        _2106 = _2095 * 0.999000012874603271484375;
        _2116 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2116)
        {
            if ((cbInstanceData._m0[_404 + 7u].x + _2106) < 0.5)
            {
                _2328 = true;
                break;
            }
        }
        uint _2244 = _406 + uint(_2075.w);
        if ((cbInstanceData._m0[_2244].w < 1.0) && ((cbInstanceData._m0[_2244].w + _2106) < 0.5))
        {
            _2328 = true;
            break;
        }
        if ((_2099 + 1.0) < _2097.x)
        {
            _2328 = true;
            break;
        }
        _2328 = false;
        break;
    }
    float _2559;
    if (_2328)
    {
        discard_state = true;
        _2559 = 0.0;
    }
    else
    {
        _2559 = _1953;
    }
    SV_Target.x = _2103;
    SV_Target.y = _2104;
    SV_Target.z = _2105;
    SV_Target.w = _2559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1953;
    discard_exit();
}


