#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _851;
float _3067;
float _3068;
float _3069;
float _3070;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(C_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = (_229.x * 2.0) + (-1.0);
    float _240 = (_229.y * 2.0) + (-1.0);
    float _241 = dot(vec2(_238, _240), vec2(_238, _240));
    float _3079 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _247 = sqrt(1.0 - (isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))));
    float _249 = cbMtdParam._m0[10u].x + _229.z;
    float _252 = fma(_247, _194 * NORMAL.x, fma(_240, _201 * TANGENT.x, (_187 * _180) * _238));
    float _255 = fma(_247, _194 * NORMAL.y, fma(_240, _201 * TANGENT.y, (_187 * _181) * _238));
    float _258 = fma(_247, _194 * NORMAL.z, fma(_240, _201 * TANGENT.z, (_187 * _182) * _238));
    float _262 = inversesqrt(dot(vec3(_252, _255, _258), vec3(_252, _255, _258)));
    float _263 = _262 * _252;
    float _264 = _262 * _255;
    float _265 = _262 * _258;
    float _3090 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _266 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
    float _3101 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _267 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
    float _3112 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3123 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3134 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3145 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _271 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
    float _287 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _328 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _338 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _328);
    float _339 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _328);
    float _340 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _328);
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _345 = _338 * _344;
    float _346 = _339 * _344;
    float _347 = _340 * _344;
    vec4 _352 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _354 = _352.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _530 = sqrt(((_338 * _338) + (_339 * _339)) + (_340 * _340));
        float _536 = (cbMatDynParam._m0[5u].x * _530) + cbMatDynParam._m0[5u].y;
        float _3156 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
        float _537 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _541 = (cbMatDynParam._m0[5u].z * _530) + cbMatDynParam._m0[5u].w;
        float _3167 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) - _537)) + _537) < ((_354 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _366 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _367 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _387 = fma(_265, cbSceneParam._m0[5u].z, fma(_264, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _263));
    float _390 = fma(_265, cbSceneParam._m0[6u].z, fma(_264, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _263));
    float _393 = fma(_265, cbSceneParam._m0[7u].z, fma(_264, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _263));
    uint _406 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = _406 + 9u;
    uint _409 = _408 + uint(cbMatDynParam._m0[0u].w);
    float _415 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0)))) * cbInstanceData._m0[_409].x;
    float _416 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0)))) * cbInstanceData._m0[_409].y;
    float _417 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0)))) * cbInstanceData._m0[_409].z;
    float _3178 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    float _3200 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    float _421 = 1.0 - _271;
    float _422 = _418 * _421;
    float _423 = _419 * _421;
    float _424 = _420 * _421;
    float _429 = (_418 + (-0.039999999105930328369140625)) * _271;
    float _430 = (_419 + (-0.039999999105930328369140625)) * _271;
    float _431 = (_420 + (-0.039999999105930328369140625)) * _271;
    float _432 = _429 + 0.039999999105930328369140625;
    float _434 = _430 + 0.039999999105930328369140625;
    float _435 = _431 + 0.039999999105930328369140625;
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _366, cbSceneParam._m0[86u].y * _367));
    float _447 = _444.x * TEXCOORD.z;
    float _448 = dot(vec3(_263, _264, _265), vec3(_345, _346, _347));
    float _451 = _448 * 2.0;
    float _455 = (_451 * _263) - _345;
    float _456 = (_451 * _264) - _346;
    float _457 = (_451 * _265) - _347;
    float _461 = abs(dot(vec3(_345, _346, _347), vec3(_263, _264, _265)));
    float _3211 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = sqrt(_267);
    float _476 = exp2((_463 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_463 * 3.0));
    float _482 = (1.0 - _476) * ((_463 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _483 = _476 * _463;
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _850;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = fma(_519, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511));
        float _579 = fma(_519, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511));
        float _583 = fma(_519, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511));
        float _608 = _511 + _263;
        float _609 = _515 + _264;
        float _610 = _519 + _265;
        float _620 = fma(_610, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608)) - _575;
        float _621 = fma(_610, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608)) - _579;
        float _622 = fma(_610, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608)) - _583;
        float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
        float _639 = ((_626 * _620) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_575 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_626 * _621) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_579 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_626 * _622) / cbModelParam._m0[34u].z) + ((((((_583 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        float _678 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_644.x + (-0.5));
        float _680 = _678 * (_644.y + (-0.5));
        float _681 = _678 * (_644.z + (-0.5));
        float _688 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_651.x + (-0.5));
        float _690 = _688 * (_651.y + (-0.5));
        float _691 = _688 * (_651.z + (-0.5));
        float _698 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_658.x + (-0.5));
        float _700 = _698 * (_658.y + (-0.5));
        float _701 = _698 * (_658.z + (-0.5));
        float _708 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_665.x + (-0.5));
        float _710 = _708 * (_665.y + (-0.5));
        float _711 = _708 * (_665.z + (-0.5));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = _679 * 0.5;
        float _716 = _689 * 0.5;
        float _717 = _699 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _732 = (dot(vec3(_263, _264, _265), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3237 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _742 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3248 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3259 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))) * (_744 + 1.0))) + _749) * _712;
        float _759 = _680 * 0.5;
        float _760 = _690 * 0.5;
        float _761 = _700 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_263, _264, _265), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3270 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3281 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3292 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) * (_786 + 1.0))) + _791) * _713;
        float _801 = _681 * 0.5;
        float _802 = _691 * 0.5;
        float _803 = _701 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_263, _264, _265), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3303 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3314 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3325 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) * (_828 + 1.0))) + _833) * _714;
        _850 = _681;
        _852 = _680;
        _853 = _679;
        _854 = _691;
        _855 = _690;
        _856 = _689;
        _857 = _701;
        _858 = _700;
        _859 = _699;
        _860 = _714;
        _861 = _713;
        _862 = _712;
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
    }
    else
    {
        _850 = _851;
        _852 = _851;
        _853 = _851;
        _854 = _851;
        _855 = _851;
        _856 = _851;
        _857 = _851;
        _858 = _851;
        _859 = _851;
        _860 = _851;
        _861 = _851;
        _862 = _851;
        _863 = 0.0;
        _864 = 0.0;
        _865 = 0.0;
    }
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _894 = fma(_519, cbModelParam._m0[30u].z, fma(_515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _511));
        float _898 = fma(_519, cbModelParam._m0[31u].z, fma(_515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _511));
        float _902 = fma(_519, cbModelParam._m0[32u].z, fma(_515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _511));
        float _925 = _511 + _263;
        float _926 = _515 + _264;
        float _927 = _519 + _265;
        float _937 = fma(_927, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925)) - _894;
        float _938 = fma(_927, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925)) - _898;
        float _939 = fma(_927, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925)) - _902;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_894 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_898 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[35u].z) + ((((((_902 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _993 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_960.x + (-0.5));
        float _995 = _993 * (_960.y + (-0.5));
        float _996 = _993 * (_960.z + (-0.5));
        float _1003 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_967.x + (-0.5));
        float _1005 = _1003 * (_967.y + (-0.5));
        float _1006 = _1003 * (_967.z + (-0.5));
        float _1013 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_974.x + (-0.5));
        float _1015 = _1013 * (_974.y + (-0.5));
        float _1016 = _1013 * (_974.z + (-0.5));
        float _1023 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_981.x + (-0.5));
        float _1025 = _1023 * (_981.y + (-0.5));
        float _1026 = _1023 * (_981.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_263, _264, _265), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3388 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_1057 + 1.0))) + _1062) * _1027;
        float _1072 = _995 * 0.5;
        float _1073 = _1005 * 0.5;
        float _1074 = _1015 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_263, _264, _265), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3421 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_1099 + 1.0))) + _1104) * _1028;
        float _1114 = _996 * 0.5;
        float _1115 = _1006 * 0.5;
        float _1116 = _1016 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_263, _264, _265), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3454 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1141 + 1.0))) + _1146) * _1029;
        _1163 = _996;
        _1164 = _995;
        _1165 = _994;
        _1166 = _1006;
        _1167 = _1005;
        _1168 = _1004;
        _1169 = _1016;
        _1170 = _1015;
        _1171 = _1014;
        _1172 = _1029;
        _1173 = _1028;
        _1174 = _1027;
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _851;
        _1164 = _851;
        _1165 = _851;
        _1166 = _851;
        _1167 = _851;
        _1168 = _851;
        _1169 = _851;
        _1170 = _851;
        _1171 = _851;
        _1172 = _851;
        _1173 = _851;
        _1174 = _851;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _863)) + _863;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1210 = fma(_1189, cbSceneParam._m0[89u].z, fma(_1188, cbSceneParam._m0[89u].y, _1187 * cbSceneParam._m0[89u].x));
    float _1213 = fma(_1189, cbSceneParam._m0[90u].z, fma(_1188, cbSceneParam._m0[90u].y, _1187 * cbSceneParam._m0[90u].x));
    float _1216 = fma(_1189, cbSceneParam._m0[91u].z, fma(_1188, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1187));
    float _1231 = _455 * 0.5;
    float _1232 = _456 * 0.5;
    float _1233 = _457 * 0.5;
    float _1234 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1237 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1240 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1274;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1247 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_850, _854, _857, _860));
        float _1251 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_852, _855, _858, _861));
        float _1255 = dot(vec4(_1231, _1232, _1233, 1.0), vec4(_853, _856, _859, _862));
        float _1262 = dot(vec4(cbModelParam._m0[39u]), vec4(_1231, _1232, _1233, 1.0));
        _1274 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1274 = 1.0;
    }
    float _1285;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1276 = dot(vec4(cbModelParam._m0[40u]), vec4(_1231, _1232, _1233, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1289 = (_1285 * cbModelParam._m0[1u].x) + (_1274 * (1.0 - cbModelParam._m0[1u].x));
    float _1299 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _267);
    float _1300 = isnan(_1299) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1299 : min(cbModelParam._m0[25u].z, _1299));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1349 = fma(_519, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511)) + cbModelParam._m0[13u].w;
        float _1353 = fma(_519, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511)) + cbModelParam._m0[14u].w;
        float _1357 = fma(_519, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511)) + cbModelParam._m0[15u].w;
        float _1360 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _1363 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _1366 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _1394;
        if (_1360 > 0.0)
        {
            _1394 = abs((1.0 - _1349) / _1360);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1349 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1394 = frontier_phi_17_15_ladder;
        }
        float _1851;
        if (_1363 > 0.0)
        {
            _1851 = abs((1.0 - _1353) / _1363);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1353 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1851 = frontier_phi_26_22_ladder;
        }
        float _2160;
        if (_1366 > 0.0)
        {
            _2160 = abs((1.0 - _1357) / _1366);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1357 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2160 = frontier_phi_40_33_ladder;
        }
        float _2162 = isnan(_1851) ? _1394 : (isnan(_1394) ? _1851 : min(_1394, _1851));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1360) + _1349;
        float _2168 = (_2163 * _1363) + _1353;
        float _2169 = (_2163 * _1366) + _1357;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2170;
        float _2173 = _2170 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2169 > _2173) || ((_2169 < _2171) || ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 < _2171) || (_2167 > _2173))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2169, cbModelParam._m0[9u].z, fma(_2168, cbModelParam._m0[9u].y, _2167 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2169, cbModelParam._m0[10u].z, fma(_2168, cbModelParam._m0[10u].y, _2167 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2169, cbModelParam._m0[11u].z, fma(_2168, cbModelParam._m0[11u].y, _2167 * cbModelParam._m0[11u].x))), _1300);
            frontier_phi_16_40_ladder = _2311.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2311.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2311.x * cbModelParam._m0[1u].y;
        }
        _1382 = frontier_phi_16_40_ladder_2;
        _1384 = frontier_phi_16_40_ladder_1;
        _1386 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _1300);
        _1382 = _1370.x * cbModelParam._m0[1u].y;
        _1384 = _1370.y * cbModelParam._m0[1u].y;
        _1386 = _1370.z * cbModelParam._m0[1u].y;
    }
    float _1390 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _267);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1390 : min(cbModelParam._m0[25u].w, _1390));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_519, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_519, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_519, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1462 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1465 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1856;
        if (_1459 > 0.0)
        {
            _1856 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1856 = frontier_phi_28_24_ladder;
        }
        float _2186;
        if (_1462 > 0.0)
        {
            _2186 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2186 = frontier_phi_42_35_ladder;
        }
        float _2376;
        if (_1465 > 0.0)
        {
            _2376 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2376 = frontier_phi_60_53_ladder;
        }
        float _2378 = isnan(_2186) ? _1856 : (isnan(_1856) ? _2186 : min(_1856, _2186));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1459) + _1448;
        float _2384 = (_2379 * _1462) + _1452;
        float _2385 = (_2379 * _1465) + _1456;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2385, cbModelParam._m0[17u].z, fma(_2384, cbModelParam._m0[17u].y, _2383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2385, cbModelParam._m0[18u].z, fma(_2384, cbModelParam._m0[18u].y, _2383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2385, cbModelParam._m0[19u].z, fma(_2384, cbModelParam._m0[19u].y, _2383 * cbModelParam._m0[19u].x))), _1391);
            frontier_phi_25_60_ladder = _2627.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _2627.y * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_25_60_ladder;
        _1486 = frontier_phi_25_60_ladder_2;
        _1488 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _1391);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1501 = (((_482 * _432) + _483) * _447) * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1503 = (((_482 * _434) + _483) * _447) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1505 = (((_482 * _435) + _483) * _447) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1508 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1501 * cbSceneParam._m0[91u].x));
    vec4 _1522 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_366, _367));
    float _1524 = _1522.w;
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1597 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1554), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1558))).x));
    float _3580 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1602 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1554), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1558))).x));
    float _3591 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1604 = (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)));
    float _1605 = _1604 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1524));
    float _1606 = _1604 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1524));
    float _1607 = _1604 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1524));
    uvec4 _1611 = floatBitsToUint(cbInstanceData._m0[_406 + 5u]);
    uint _1613 = _1611.x * 14u;
    uint _1614 = _1613 + 13u;
    float _1619 = _447 + (-1.0);
    float _1622 = (cbLight._m0[_1614].x * _1619) + 1.0;
    float _1623 = (cbLight._m0[_1614].y * _1619) + 1.0;
    uint _1624 = _1613 + 5u;
    float _1630 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1634 = _1613 + 4u;
    float _1644 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1648 = _1613 | 1u;
    float _1659 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_263, _264, _265));
    float _1662 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_263, _264, _265));
    float _3612 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _3623 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1667 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.3183098733425140380859375;
    float _1669 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.3183098733425140380859375;
    float _1676 = ((cbLight._m0[_1624].x * _1630) * _1669) + (((cbLight._m0[_1634].x * _1605) * _1644) * _1667);
    float _1677 = ((_1630 * cbLight._m0[_1624].y) * _1669) + (((cbLight._m0[_1634].y * _1606) * _1644) * _1667);
    float _1678 = ((_1630 * cbLight._m0[_1624].z) * _1669) + (((cbLight._m0[_1634].z * _1607) * _1644) * _1667);
    uint _1680 = _1613 + 8u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _267) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1613].x + _345;
    float _1696 = cbLight._m0[_1613].y + _346;
    float _1697 = cbLight._m0[_1613].z + _347;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1613].xyz));
    float _3634 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _1709 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _1710 = dot(vec3(_263, _264, _265), vec3(_1702, _1703, _1704));
    float _3656 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1702, _1703, _1704));
    float _3667 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1694 * _1694;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1730 = exp2(log2(1.0 - (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * 5.0);
    float _1731 = 0.959999978542327880859375 - _429;
    float _1733 = 0.959999978542327880859375 - _430;
    float _1734 = 0.959999978542327880859375 - _431;
    float _1741 = 1.0 - _1694;
    float _1752 = (0.5 / (((_1709 * ((_1708 * _1741) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1741) + _1694) * _1708))) * _1708;
    float _3678 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1754 = (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    uint _1768 = _1613 + 9u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1648].w)) * _267) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1648].x + _345;
    float _1782 = cbLight._m0[_1648].y + _346;
    float _1783 = cbLight._m0[_1648].z + _347;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1648].xyz));
    float _3689 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _1795 = dot(vec3(_263, _264, _265), vec3(_1788, _1789, _1790));
    float _3700 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1788, _1789, _1790));
    float _3711 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1780 * _1780;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * 5.0);
    float _1821 = 1.0 - _1780;
    float _1831 = (0.5 / (((_1709 * ((_1794 * _1821) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1821) + _1780) * _1794))) * _1794;
    float _3722 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    float _1843 = (((((_1814 * _1731) + _432) * cbLight._m0[_1768].x) * _1833) * _1630) + ((((cbLight._m0[_1680].x * _1605) * ((_1730 * _1731) + _432)) * _1754) * _1644);
    float _1844 = (((((_1814 * _1733) + _434) * cbLight._m0[_1768].y) * _1833) * _1630) + ((((cbLight._m0[_1680].y * _1606) * ((_1730 * _1733) + _434)) * _1754) * _1644);
    float _1845 = (((((_1814 * _1734) + _435) * cbLight._m0[_1768].z) * _1833) * _1630) + ((((cbLight._m0[_1680].z * _1607) * ((_1730 * _1734) + _435)) * _1754) * _1644);
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    if (_1611.y == 0u)
    {
        float _1901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1901;
        float _1903 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1901;
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1901;
        uvec4 _1916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1917 = _1916.x;
        uint _1928 = uint((float(_1916.y) * floor(float(uint(cbSceneParam._m0[85u].y * _367) / _1917))) + floor(float(uint(cbSceneParam._m0[85u].x * _366) / _1917)));
        float _1938 = (log2(_1904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1939 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        uint _1942 = uint(isnan(14.0) ? _1939 : (isnan(_1939) ? 14.0 : min(_1939, 14.0)));
        uvec4 _1947 = texelFetch(g_lightClusterGridBuffer, int(((_1942 << 2u) + (_1928 << 6u)) >> 2u));
        uint _1948 = _1947.x;
        uint _1949 = _1916.z;
        float _2038;
        float _2040;
        float _2042;
        float _2044;
        float _2046;
        float _2048;
        if (((((1u << ((_1949 >> 4u) & 15u)) + 4294967295u) & _1948) == 0u) || ((_1949 & 240u) == 0u))
        {
            _2038 = 0.0;
            _2040 = 0.0;
            _2042 = 0.0;
            _2044 = 0.0;
            _2046 = 0.0;
            _2048 = 0.0;
        }
        else
        {
            float _2039;
            float _2041;
            float _2043;
            float _2045;
            float _2047;
            float _2049;
            float _2223 = 0.0;
            float _2224 = 0.0;
            float _2225 = 0.0;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            uint _2229 = 0u;
            uint _2238;
            bool _2239;
            for (;;)
            {
                _2238 = texelFetch(g_lightClassification, int((((_1942 << 5u) + (_1928 << 9u)) + (_2229 << 2u)) >> 2u)).x;
                _2239 = _2238 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2239)
                {
                    frontier_phi_55_pred = _2227;
                    frontier_phi_55_pred_1 = _2228;
                    frontier_phi_55_pred_2 = _2226;
                    frontier_phi_55_pred_3 = _2225;
                    frontier_phi_55_pred_4 = _2224;
                    frontier_phi_55_pred_5 = _2223;
                }
                else
                {
                    float _2419;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    uint _2425;
                    _2419 = _2223;
                    _2420 = _2224;
                    _2421 = _2225;
                    _2422 = _2226;
                    _2423 = _2227;
                    _2424 = _2228;
                    _2425 = _2238;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    for (;;)
                    {
                        uint _2429 = uint(findLSB(_2425)) + (_2229 << 5u);
                        uint _2426 = (_2425 + 4294967295u) & _2425;
                        uint _2431 = _2429 * 48u;
                        vec4 _2445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2431)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 3u)).x));
                        uint _2451 = (_2429 * 48u) + 4u;
                        vec4 _2464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2451)).x, texelFetch(g_PointLightRenderingBuffer, int(_2451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2451 + 3u)).x));
                        uint _2470 = (_2429 * 48u) + 8u;
                        vec3 _2481 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2470)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 2u)).x));
                        float _2485 = _2445.x - _1902;
                        float _2486 = _2445.y - _1903;
                        float _2487 = _2445.z - _1904;
                        float _2488 = dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487));
                        float _2491 = inversesqrt(_2488);
                        float _2492 = _2491 * _2485;
                        float _2493 = _2491 * _2486;
                        float _2494 = _2491 * _2487;
                        float _2495 = dot(vec3(_387, _390, _393), vec3(_2492, _2493, _2494));
                        float _2500 = 1.0 - (_2488 * _2445.w);
                        float _3743 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
                        float _2501 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
                        float _2502 = sqrt(_2488) * _2464.w;
                        float _2505 = 1.39999997615814208984375 / (_2502 + 1.39999997615814208984375);
                        float _2506 = _2505 * _2505;
                        float _2509 = ((1.0 - _2506) * _2495) + _2506;
                        float _2512 = _2502 * _2502;
                        float _2516 = ((isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0))) * _2501) / ((_2512 * 0.699999988079071044921875) + 1.0);
                        float _2520 = (-0.0) - _1902;
                        float _2521 = (-0.0) - _1903;
                        float _2522 = (-0.0) - _1904;
                        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
                        float _2527 = _2526 * _2520;
                        float _2528 = _2526 * _2521;
                        float _2529 = _2526 * _2522;
                        float _2537 = exp2(log2(1.0 / ((_2512 * 3.5) + 5.0)) * 0.25);
                        float _2538 = 1.0 - _463;
                        float _2545 = sqrt(1.0 - ((1.0 - (_2538 * _2538)) * (1.0 - (_2537 * _2537))));
                        float _2546 = _2545 * _2545;
                        float _2547 = _2546 * _2546;
                        float _2548 = _2527 + _2492;
                        float _2549 = _2528 + _2493;
                        float _2550 = _2529 + _2494;
                        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
                        float _2558 = dot(vec3(_387, _390, _393), vec3(_2527, _2528, _2529));
                        float _3759 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2561 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
                        float _2562 = dot(vec3(_387, _390, _393), vec3(_2554 * _2548, _2554 * _2549, _2554 * _2550));
                        float _3770 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _2565 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
                        float _2569 = ((_2565 * _2565) * (_2547 + (-1.0))) + 1.0;
                        float _2570 = _2505 * _2546;
                        float _2571 = _2570 * _2570;
                        float _2574 = ((1.0 - _2571) * _2495) + _2571;
                        float _3781 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                        float _2575 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
                        float _2576 = 1.0 - _2546;
                        float _2586 = (0.5 / (((_2575 * ((_2561 * _2576) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2576) + _2546) * _2561))) * _2575;
                        float _3792 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
                        float _2597 = (((_2547 * 3.1415927410125732421875) * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) / ((_2569 * _2569) * ((_2512 * 2.1991131305694580078125) + 3.141590118408203125))) * _2501;
                        _2323 = (_2516 * _2464.x) + _2422;
                        _2324 = (_2516 * _2464.y) + _2423;
                        _2325 = (_2516 * _2464.z) + _2424;
                        _2320 = (_2597 * _2481.x) + _2419;
                        _2321 = (_2597 * _2481.y) + _2420;
                        _2322 = (_2597 * _2481.z) + _2421;
                        if (_2426 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2419 = _2320;
                            _2420 = _2321;
                            _2421 = _2322;
                            _2422 = _2323;
                            _2423 = _2324;
                            _2424 = _2325;
                            _2425 = _2426;
                        }
                    }
                    frontier_phi_55_pred = _2324;
                    frontier_phi_55_pred_1 = _2325;
                    frontier_phi_55_pred_2 = _2323;
                    frontier_phi_55_pred_3 = _2322;
                    frontier_phi_55_pred_4 = _2321;
                    frontier_phi_55_pred_5 = _2320;
                }
                _2047 = frontier_phi_55_pred;
                _2049 = frontier_phi_55_pred_1;
                _2045 = frontier_phi_55_pred_2;
                _2043 = frontier_phi_55_pred_3;
                _2041 = frontier_phi_55_pred_4;
                _2039 = frontier_phi_55_pred_5;
                uint _2230 = _2229 + 1u;
                if (_2230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2223 = _2039;
                    _2224 = _2041;
                    _2225 = _2043;
                    _2226 = _2045;
                    _2227 = _2047;
                    _2228 = _2049;
                    _2229 = _2230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2038 = _2039;
            _2040 = _2041;
            _2042 = _2043;
            _2044 = _2045;
            _2046 = _2047;
            _2048 = _2049;
        }
        uvec4 _2052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2053 = _2052.z;
        uint _2055 = (_2053 >> 8u) & 15u;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        if (((4294967295u << _2055) & _1948) == 0u)
        {
            _2191 = _2038;
            _2193 = _2040;
            _2195 = _2042;
            _2197 = _2044;
            _2199 = _2046;
            _2201 = _2048;
        }
        else
        {
            float _2216 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
            float _2217 = _2216 * _1902;
            float _2218 = _2216 * _1903;
            float _2219 = _2216 * _1904;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2055 < ((_2053 >> 12u) & 15u))
            {
                float _2192;
                float _2194;
                float _2196;
                float _2198;
                float _2200;
                float _2202;
                float _2402 = _2038;
                float _2403 = _2040;
                float _2404 = _2042;
                float _2405 = _2044;
                float _2406 = _2046;
                float _2407 = _2048;
                uint _2408 = _2055;
                uint _2417;
                bool _2418;
                for (;;)
                {
                    _2417 = texelFetch(g_lightClassification, int((((_1942 << 5u) + (_1928 << 9u)) + (_2408 << 2u)) >> 2u)).x;
                    _2418 = _2417 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2418)
                    {
                        frontier_phi_69_pred = _2407;
                        frontier_phi_69_pred_1 = _2406;
                        frontier_phi_69_pred_2 = _2405;
                        frontier_phi_69_pred_3 = _2404;
                        frontier_phi_69_pred_4 = _2403;
                        frontier_phi_69_pred_5 = _2402;
                    }
                    else
                    {
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2635;
                        float _2636;
                        float _2637;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2645 = _2402;
                        float _2646 = _2403;
                        float _2647 = _2404;
                        float _2648 = _2405;
                        float _2649 = _2406;
                        float _2650 = _2407;
                        uint _2651 = _2417;
                        uint _2652;
                        vec4 _2677;
                        float _2678;
                        vec4 _2693;
                        vec3 _2705;
                        vec4 _2721;
                        vec4 _2737;
                        float _2784;
                        bool _2785;
                        for (;;)
                        {
                            uint _2662 = ((_2408 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2651));
                            _2652 = (_2651 + 4294967295u) & _2651;
                            uint _2664 = _2662 * 40u;
                            _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            _2678 = _2677.w;
                            uint _2680 = (_2662 * 40u) + 4u;
                            _2693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 3u)).x));
                            uint _2695 = (_2662 * 40u) + 8u;
                            _2705 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 2u)).x));
                            uint _2708 = (_2662 * 40u) + 16u;
                            _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            uint _2724 = (_2662 * 40u) + 20u;
                            _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2740 = (_2662 * 40u) + 24u;
                            vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2759 = (_2662 * 40u) + 28u;
                            vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            _2784 = fma(_1904, _2772.z, fma(_1903, _2772.y, _2772.x * _1902)) + _2772.w;
                            _2785 = !((fma(_1904, _2753.z, fma(_1903, _2753.y, _2753.x * _1902)) + _2753.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2785)
                            {
                                float _2812 = _2677.x - _1902;
                                float _2813 = _2677.y - _1903;
                                float _2814 = _2677.z - _1904;
                                float _2815 = dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814));
                                float _2818 = inversesqrt(_2815);
                                float _2819 = _2818 * _2812;
                                float _2820 = _2818 * _2813;
                                float _2821 = _2818 * _2814;
                                float _2825 = 1.0 - (_2815 / (_2678 * _2678));
                                float _3803 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2826 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
                                float _2830 = sqrt(_2815) * _2693.w;
                                float _2832 = 1.39999997615814208984375 / (_2830 + 1.39999997615814208984375);
                                float _2833 = _2832 * _2832;
                                float _2836 = ((1.0 - _2833) * dot(vec3(_2819, _2820, _2821), vec3(_387, _390, _393))) + _2833;
                                float _2839 = _2830 * _2830;
                                float _2843 = (fma(_1904, _2721.z, fma(_1903, _2721.y, _2721.x * _1902)) + _2721.w) / _2784;
                                float _2844 = (fma(_1904, _2737.z, fma(_1903, _2737.y, _2737.x * _1902)) + _2737.w) / _2784;
                                float _2848 = 1.0 - dot(vec2(_2843, _2844), vec2(_2843, _2844));
                                float _3819 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                                float _2849 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                                float _2850 = _2849 * (((isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))) * _2826) / ((_2839 * 0.699999988079071044921875) + 1.0));
                                float _2862 = exp2(log2(1.0 / ((_2839 * 3.5) + 5.0)) * 0.25);
                                float _2863 = 1.0 - _463;
                                float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                                float _2871 = _2870 * _2870;
                                float _2872 = _2871 * _2871;
                                float _2873 = _2819 - _2217;
                                float _2874 = _2820 - _2218;
                                float _2875 = _2821 - _2219;
                                float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                                float _2883 = dot(vec3(_387, _390, _393), vec3((-0.0) - _2217, (-0.0) - _2218, (-0.0) - _2219));
                                float _3830 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2886 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                                float _2887 = dot(vec3(_387, _390, _393), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                                float _3841 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                                float _2890 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                                float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                                float _2895 = _2832 * _2871;
                                float _2896 = _2895 * _2895;
                                float _2902 = ((1.0 - _2896) * dot(vec3(_387, _390, _393), vec3(_2819, _2820, _2821))) + _2896;
                                float _3852 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2903 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
                                float _2904 = 1.0 - _2871;
                                float _2914 = (0.5 / (((_2903 * ((_2886 * _2904) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _2904) + _2871) * _2886))) * _2903;
                                float _3863 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2924 = (_2849 * _2826) * (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) / ((_2894 * _2894) * ((_2839 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2850 * _2693.x;
                                frontier_phi_75_pred_1 = _2850 * _2693.z;
                                frontier_phi_75_pred_2 = _2850 * _2693.y;
                                frontier_phi_75_pred_3 = _2924 * _2705.z;
                                frontier_phi_75_pred_4 = _2924 * _2705.y;
                                frontier_phi_75_pred_5 = _2924 * _2705.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2931 = frontier_phi_75_pred;
                            _2933 = frontier_phi_75_pred_1;
                            _2932 = frontier_phi_75_pred_2;
                            _2930 = frontier_phi_75_pred_3;
                            _2929 = frontier_phi_75_pred_4;
                            _2928 = frontier_phi_75_pred_5;
                            _2635 = _2931 + _2648;
                            _2636 = _2932 + _2649;
                            _2637 = _2933 + _2650;
                            _2632 = _2928 + _2645;
                            _2633 = _2929 + _2646;
                            _2634 = _2930 + _2647;
                            if (_2652 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2634;
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2652;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2637;
                        frontier_phi_69_pred_1 = _2636;
                        frontier_phi_69_pred_2 = _2635;
                        frontier_phi_69_pred_3 = _2634;
                        frontier_phi_69_pred_4 = _2633;
                        frontier_phi_69_pred_5 = _2632;
                    }
                    _2202 = frontier_phi_69_pred;
                    _2200 = frontier_phi_69_pred_1;
                    _2198 = frontier_phi_69_pred_2;
                    _2196 = frontier_phi_69_pred_3;
                    _2194 = frontier_phi_69_pred_4;
                    _2192 = frontier_phi_69_pred_5;
                    uint _2409 = _2408 + 1u;
                    if (_2409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2402 = _2192;
                        _2403 = _2194;
                        _2404 = _2196;
                        _2405 = _2198;
                        _2406 = _2200;
                        _2407 = _2202;
                        _2408 = _2409;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2194;
                frontier_phi_44_45_ladder_1 = _2202;
                frontier_phi_44_45_ladder_2 = _2200;
                frontier_phi_44_45_ladder_3 = _2198;
                frontier_phi_44_45_ladder_4 = _2196;
                frontier_phi_44_45_ladder_5 = _2192;
            }
            else
            {
                frontier_phi_44_45_ladder = _2040;
                frontier_phi_44_45_ladder_1 = _2048;
                frontier_phi_44_45_ladder_2 = _2046;
                frontier_phi_44_45_ladder_3 = _2044;
                frontier_phi_44_45_ladder_4 = _2042;
                frontier_phi_44_45_ladder_5 = _2038;
            }
            _2191 = frontier_phi_44_45_ladder_5;
            _2193 = frontier_phi_44_45_ladder;
            _2195 = frontier_phi_44_45_ladder_4;
            _2197 = frontier_phi_44_45_ladder_3;
            _2199 = frontier_phi_44_45_ladder_2;
            _2201 = frontier_phi_44_45_ladder_1;
        }
        float _2206 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _1961 = (_2206 * _2197) + _1676;
        _1963 = (_2206 * _2199) + _1677;
        _1965 = (_2206 * _2201) + _1678;
        _1967 = ((_2191 * _432) * _2206) + _1843;
        _1969 = ((_2193 * _434) * _2206) + _1844;
        _1971 = ((_2195 * _435) * _2206) + _1845;
    }
    else
    {
        _1961 = _1676;
        _1963 = _1677;
        _1965 = _1678;
        _1967 = _1843;
        _1969 = _1844;
        _1971 = _1845;
    }
    float _3879 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3890 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3901 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3912 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _1989 = ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1961 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _447))) + ((_1967 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1289)) * cbPerFrame._m0[3u].x);
    float _1990 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1963 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _447))) + ((_1969 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1289)) * cbPerFrame._m0[3u].x);
    float _1991 = ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1965 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _447))) + ((_1971 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1289)) * cbPerFrame._m0[3u].x);
    float _1996 = cbInstanceData._m0[_406 + 6u].w * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)));
    float _2001 = _366 / cbSceneParam._m0[86u].x;
    float _2002 = _367 / cbSceneParam._m0[86u].y;
    vec4 _2016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2001, _2002, (log2((isnan(cbSceneParam._m0[77u].w) ? _287 : (isnan(_287) ? cbSceneParam._m0[77u].w : min(_287, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2018 = _2016.x;
    float _2019 = _2016.y;
    float _2020 = _2016.z;
    float _2021 = _2016.w;
    float _2102;
    float _2104;
    float _2106;
    float _2108;
    if (_287 > cbSceneParam._m0[78u].w)
    {
        float _2063 = isnan(_287) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _287 : min(cbSceneParam._m0[80u].w, _287));
        float _2064 = _2063 / _287;
        float _2075 = _2064 * _338;
        float _2076 = _339 * _2064;
        float _2077 = (-0.0) - _2076;
        float _2079 = _2064 * _340;
        float _2081 = (cbSceneParam._m0[77u].w * _2077) / _2063;
        float _2082 = _2081 + cbSceneParam._m0[79u].w;
        float _2083 = cbSceneParam._m0[79u].w - _2076;
        float _2089 = sqrt(((_2075 * _2075) + (_2076 * _2076)) + (_2079 * _2079));
        float _2092 = (1.0 - (cbSceneParam._m0[77u].w / _2063)) * _2089;
        float _2098 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2100 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2333;
        if (abs((_2077 - _2081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2333 = ((((_2082 > 0.0) ? exp2(_2098 * _2082) : (2.0 - exp2(_2100 * _2082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2092;
        }
        else
        {
            float _2252 = 1.0 / cbSceneParam._m0[80u].x;
            float _2253 = isnan(_2083) ? _2082 : (isnan(_2082) ? _2083 : max(_2082, _2083));
            float _2254 = isnan(_2083) ? _2082 : (isnan(_2082) ? _2083 : min(_2082, _2083));
            float _2263 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : min(_2253, 0.0));
            float _2264 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : min(_2254, 0.0));
            _2333 = ((abs(_2089 / _2077) * cbSceneParam._m0[80u].y) * ((((_2263 - _2264) * 2.0) - ((exp2(_2098 * (isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0)))) - exp2(_2098 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))))) * _2252)) - ((exp2(_2100 * _2263) - exp2(_2100 * _2264)) * _2252))) + (_2092 * cbSceneParam._m0[80u].z);
        }
        vec4 _2335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2001, _2002, 1.0), 0.0);
        float _2344 = exp2((_2333 * (-1.44269502162933349609375)) * (1.0 - _2335.w));
        float _2345 = log2(_2344);
        float _2361 = log2(_2021);
        _2102 = (exp2(_2361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].x)) * _2335.x) / cbSceneParam._m0[78u].x)) + _2018;
        _2104 = (exp2(_2361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].y)) * _2335.y) / cbSceneParam._m0[78u].y)) + _2019;
        _2106 = (exp2(_2361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].z)) * _2335.z) / cbSceneParam._m0[78u].z)) + _2020;
        _2108 = _2344 * _2021;
    }
    else
    {
        _2102 = _2018;
        _2104 = _2019;
        _2106 = _2020;
        _2108 = _2021;
    }
    bool _2371;
    vec4 _2118;
    vec4 _2140;
    float _2142;
    float _2146;
    float _2147;
    float _2148;
    float _2149;
    bool _2159;
    for (;;)
    {
        _2118 = cbMatDynParam._m0[0u];
        float _2120 = roundEven(_2118.y);
        bool _2121 = _2120 == 3.0;
        float _2122 = log2(_2108);
        float _2129 = exp2(_2122 * cbSceneParam._m0[78u].x) * _1989;
        float _2130 = exp2(_2122 * cbSceneParam._m0[78u].y) * _1990;
        float _2131 = exp2(_2122 * cbSceneParam._m0[78u].z) * _1991;
        float _2138 = _354 + (-0.5);
        _2140 = cbMtdParam._m0[1u];
        _2142 = _2140.y * _2138;
        float _2145 = (_2120 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2146 = _2145 * (_2121 ? _2129 : (_2129 + (cbSceneParam._m0[72u].w * _2102)));
        _2147 = _2145 * (_2121 ? _2130 : (_2130 + (cbSceneParam._m0[72u].w * _2104)));
        _2148 = _2145 * (_2121 ? _2131 : (_2131 + (cbSceneParam._m0[72u].w * _2106)));
        _2149 = _2138 * 0.999000012874603271484375;
        _2159 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2159)
        {
            if ((cbInstanceData._m0[_406 + 7u].x + _2149) < 0.5)
            {
                _2371 = true;
                break;
            }
        }
        uint _2287 = _408 + uint(_2118.w);
        if ((cbInstanceData._m0[_2287].w < 1.0) && ((cbInstanceData._m0[_2287].w + _2149) < 0.5))
        {
            _2371 = true;
            break;
        }
        if ((_2142 + 1.0) < _2140.x)
        {
            _2371 = true;
            break;
        }
        _2371 = false;
        break;
    }
    float _2602;
    if (_2371)
    {
        discard_state = true;
        _2602 = 0.0;
    }
    else
    {
        _2602 = _1996;
    }
    SV_Target.x = _2146;
    SV_Target.y = _2147;
    SV_Target.z = _2148;
    SV_Target.w = _2602;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1996;
    discard_exit();
}


