#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _853;
float _3351;
float _3352;
float _3353;
float _3354;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(C_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = (_231.x * 2.0) + (-1.0);
    float _242 = (_231.y * 2.0) + (-1.0);
    float _243 = dot(vec2(_240, _242), vec2(_240, _242));
    float _3363 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _249 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    float _251 = cbMtdParam._m0[10u].x + _231.z;
    float _254 = fma(_249, _196 * NORMAL.x, fma(_242, _203 * TANGENT.x, (_189 * _182) * _240));
    float _257 = fma(_249, _196 * NORMAL.y, fma(_242, _203 * TANGENT.y, (_189 * _183) * _240));
    float _260 = fma(_249, _196 * NORMAL.z, fma(_242, _203 * TANGENT.z, (_189 * _184) * _240));
    float _264 = inversesqrt(dot(vec3(_254, _257, _260), vec3(_254, _257, _260)));
    float _265 = _264 * _254;
    float _266 = _264 * _257;
    float _267 = _264 * _260;
    float _3374 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _268 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _269 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3407 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3418 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3429 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _273 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _289 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _330 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _340 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _330);
    float _341 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _330);
    float _342 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _330);
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _347 = _340 * _346;
    float _348 = _341 * _346;
    float _349 = _342 * _346;
    vec4 _354 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _356 = _354.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _532 = sqrt(((_340 * _340) + (_341 * _341)) + (_342 * _342));
        float _538 = (cbMatDynParam._m0[5u].x * _532) + cbMatDynParam._m0[5u].y;
        float _3440 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        float _539 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _543 = (cbMatDynParam._m0[5u].z * _532) + cbMatDynParam._m0[5u].w;
        float _3451 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) - _539)) + _539) < ((_356 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _368 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _369 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _389 = fma(_267, cbSceneParam._m0[5u].z, fma(_266, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _265));
    float _392 = fma(_267, cbSceneParam._m0[6u].z, fma(_266, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _265));
    float _395 = fma(_267, cbSceneParam._m0[7u].z, fma(_266, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _265));
    uint _408 = uint(roundEven(NORMAL.w)) * 13u;
    uint _410 = _408 + 9u;
    uint _411 = _410 + uint(cbMatDynParam._m0[0u].w);
    float _417 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_411].x;
    float _418 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_411].y;
    float _419 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_411].z;
    float _3462 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _423 = 1.0 - _273;
    float _424 = _420 * _423;
    float _425 = _421 * _423;
    float _426 = _422 * _423;
    float _431 = (_420 + (-0.039999999105930328369140625)) * _273;
    float _432 = (_421 + (-0.039999999105930328369140625)) * _273;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _273;
    float _434 = _431 + 0.039999999105930328369140625;
    float _436 = _432 + 0.039999999105930328369140625;
    float _437 = _433 + 0.039999999105930328369140625;
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _368, cbSceneParam._m0[86u].y * _369));
    float _449 = _446.x * TEXCOORD.z;
    float _450 = dot(vec3(_265, _266, _267), vec3(_347, _348, _349));
    float _453 = _450 * 2.0;
    float _457 = (_453 * _265) - _347;
    float _458 = (_453 * _266) - _348;
    float _459 = (_453 * _267) - _349;
    float _463 = abs(dot(vec3(_347, _348, _349), vec3(_265, _266, _267)));
    float _3495 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = sqrt(_269);
    float _478 = exp2((_465 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_465 * 3.0));
    float _484 = (1.0 - _478) * ((_465 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _485 = _478 * _465;
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _581 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _585 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _610 = _513 + _265;
        float _611 = _517 + _266;
        float _612 = _521 + _267;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_265, _266, _267), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3543 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_265, _266, _267), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3576 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_265, _266, _267), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3609 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _896 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _900 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _904 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _927 = _513 + _265;
        float _928 = _517 + _266;
        float _929 = _521 + _267;
        float _939 = fma(_929, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[35u].z) + ((((((_904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_962.x + (-0.5));
        float _997 = _995 * (_962.y + (-0.5));
        float _998 = _995 * (_962.z + (-0.5));
        float _1005 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_969.x + (-0.5));
        float _1007 = _1005 * (_969.y + (-0.5));
        float _1008 = _1005 * (_969.z + (-0.5));
        float _1015 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_976.x + (-0.5));
        float _1017 = _1015 * (_976.y + (-0.5));
        float _1018 = _1015 * (_976.z + (-0.5));
        float _1025 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_983.x + (-0.5));
        float _1027 = _1025 * (_983.y + (-0.5));
        float _1028 = _1025 * (_983.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_265, _266, _267), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3672 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1059 + 1.0))) + _1064) * _1029;
        float _1074 = _997 * 0.5;
        float _1075 = _1007 * 0.5;
        float _1076 = _1017 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_265, _266, _267), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3705 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1101 + 1.0))) + _1106) * _1030;
        float _1116 = _998 * 0.5;
        float _1117 = _1008 * 0.5;
        float _1118 = _1018 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_265, _266, _267), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3738 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1143 + 1.0))) + _1148) * _1031;
        _1165 = _998;
        _1166 = _997;
        _1167 = _996;
        _1168 = _1008;
        _1169 = _1007;
        _1170 = _1006;
        _1171 = _1018;
        _1172 = _1017;
        _1173 = _1016;
        _1174 = _1031;
        _1175 = _1030;
        _1176 = _1029;
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = _853;
        _1174 = _853;
        _1175 = _853;
        _1176 = _853;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1190, cbSceneParam._m0[89u].y, _1189 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1190, cbSceneParam._m0[90u].y, _1189 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1190, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1189));
    float _1233 = _457 * 0.5;
    float _1234 = _458 * 0.5;
    float _1235 = _459 * 0.5;
    float _1236 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1239 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1242 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1276;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1249 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_852, _856, _859, _862));
        float _1253 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_854, _857, _860, _863));
        float _1257 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_855, _858, _861, _864));
        float _1264 = dot(vec4(cbModelParam._m0[39u]), vec4(_1233, _1234, _1235, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1287;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1278 = dot(vec4(cbModelParam._m0[40u]), vec4(_1233, _1234, _1235, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1291 = (_1287 * cbModelParam._m0[1u].x) + (_1276 * (1.0 - cbModelParam._m0[1u].x));
    float _1301 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _269);
    float _1302 = isnan(_1301) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1301 : min(cbModelParam._m0[25u].z, _1301));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1365 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1368 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1396 = frontier_phi_17_15_ladder;
        }
        float _1572;
        if (_1365 > 0.0)
        {
            _1572 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1572 = frontier_phi_26_22_ladder;
        }
        float _2077;
        if (_1368 > 0.0)
        {
            _2077 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2077 = frontier_phi_38_33_ladder;
        }
        float _2079 = isnan(_1572) ? _1396 : (isnan(_1396) ? _1572 : min(_1396, _1572));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1362) + _1351;
        float _2085 = (_2080 * _1365) + _1355;
        float _2086 = (_2080 * _1368) + _1359;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_16_38_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_16_38_ladder_2;
        _1386 = frontier_phi_16_38_ladder_1;
        _1388 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1302);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _269);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1464 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1467 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1577;
        if (_1461 > 0.0)
        {
            _1577 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1577 = frontier_phi_28_24_ladder;
        }
        float _2104;
        if (_1464 > 0.0)
        {
            _2104 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2104 = frontier_phi_40_35_ladder;
        }
        float _2492;
        if (_1467 > 0.0)
        {
            _2492 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2492 = frontier_phi_52_47_ladder;
        }
        float _2494 = isnan(_2104) ? _1577 : (isnan(_1577) ? _2104 : min(_1577, _2104));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1461) + _1450;
        float _2500 = (_2495 * _1464) + _1454;
        float _2501 = (_2495 * _1467) + _1458;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_25_52_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_25_52_ladder_2;
        _1488 = frontier_phi_25_52_ladder_1;
        _1490 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1503 = (((_484 * _434) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1505 = (((_484 * _436) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1507 = (((_484 * _437) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1510 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1564 = _1551 / _1563;
    float _1565 = _1555 / _1563;
    float _1566 = _1559 / _1563;
    float _1713;
    float _1714;
    float _1715;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1593 = ((uint(_1566 > cbSceneParam._m0[59u].y) + uint(_1566 > cbSceneParam._m0[59u].x)) + uint(_1566 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1594 = _1593 + 43u;
        uint _1602 = _1593 + 44u;
        uint _1610 = _1593 + 45u;
        uint _1618 = _1593 + 46u;
        float _1629 = fma(_1563, cbSceneParam._m0[_1594].w, fma(_1559, cbSceneParam._m0[_1594].z, fma(_1555, cbSceneParam._m0[_1594].y, _1551 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1563, cbSceneParam._m0[_1602].w, fma(_1559, cbSceneParam._m0[_1602].z, fma(_1555, cbSceneParam._m0[_1602].y, _1551 * cbSceneParam._m0[_1602].x)));
        float _1641 = fma(_1563, cbSceneParam._m0[_1618].w, fma(_1559, cbSceneParam._m0[_1618].z, fma(_1555, cbSceneParam._m0[_1618].y, _1551 * cbSceneParam._m0[_1618].x)));
        float _1646 = cbSceneParam._m0[33u].z * _1641;
        float _1648 = cbSceneParam._m0[33u].w * _1641;
        float _1651 = fma(_1563, cbSceneParam._m0[_1610].w, fma(_1559, cbSceneParam._m0[_1610].z, fma(_1555, cbSceneParam._m0[_1610].y, _1551 * cbSceneParam._m0[_1610].x))) / _1641;
        float _1699 = (cbSceneParam._m0[33u].x - sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566))) * cbSceneParam._m0[33u].y;
        float _3864 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1706 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 + _1629) / _1641, (_1648 + _1633) / _1641), _1651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 + _1629) / _1641, (_1633 - _1646) / _1641), _1651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1629 - _1646) / _1641, (_1633 - _1648) / _1641), _1651), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1629 - _1648) / _1641, (_1646 + _1633) / _1641), _1651), 0.0)).x), vec4(0.25)));
        _1713 = 1.0 - (_1706 * cbSceneParam._m0[34u].x);
        _1714 = 1.0 - (_1706 * cbSceneParam._m0[34u].y);
        _1715 = 1.0 - (_1706 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1713 = 1.0;
        _1714 = 1.0;
        _1715 = 1.0;
    }
    float _1779;
    float _1781;
    float _1783;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1767 = fma(_1563, cbSceneParam._m0[63u].w, fma(_1559, cbSceneParam._m0[63u].z, fma(_1555, cbSceneParam._m0[63u].y, _1551 * cbSceneParam._m0[63u].x)));
        float _1768 = fma(_1563, cbSceneParam._m0[60u].w, fma(_1559, cbSceneParam._m0[60u].z, fma(_1555, cbSceneParam._m0[60u].y, _1551 * cbSceneParam._m0[60u].x))) / _1767;
        float _1769 = fma(_1563, cbSceneParam._m0[61u].w, fma(_1559, cbSceneParam._m0[61u].z, fma(_1555, cbSceneParam._m0[61u].y, _1551 * cbSceneParam._m0[61u].x))) / _1767;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1768 >= cbSceneParam._m0[64u].x) && (_1769 >= cbSceneParam._m0[64u].y)) && (_1768 <= cbSceneParam._m0[64u].z)) && (_1769 <= cbSceneParam._m0[64u].w))
        {
            float _2117 = fma(_1563, cbSceneParam._m0[62u].w, fma(_1559, cbSceneParam._m0[62u].z, fma(_1555, cbSceneParam._m0[62u].y, _1551 * cbSceneParam._m0[62u].x))) / _1767;
            float _2121 = isnan(cbSceneParam._m0[41u].w) ? _2117 : (isnan(_2117) ? cbSceneParam._m0[41u].w : max(_2117, cbSceneParam._m0[41u].w));
            float _2164 = (cbSceneParam._m0[33u].x - sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566))) * cbSceneParam._m0[33u].y;
            float _3880 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
            float _2171 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1768, cbSceneParam._m0[33u].w + _1769), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1768, _1769 - cbSceneParam._m0[33u].z), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1768 - cbSceneParam._m0[33u].z, _1769 - cbSceneParam._m0[33u].w), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1768 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1769), _2121), 0.0)).x), vec4(0.25)));
            float _2175 = 1.0 - (_2171 * cbSceneParam._m0[34u].x);
            float _2176 = 1.0 - (_2171 * cbSceneParam._m0[34u].y);
            float _2177 = 1.0 - (_2171 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2177) ? _1715 : (isnan(_1715) ? _2177 : min(_1715, _2177));
            frontier_phi_37_36_ladder_1 = isnan(_2176) ? _1714 : (isnan(_1714) ? _2176 : min(_1714, _2176));
            frontier_phi_37_36_ladder_2 = isnan(_2175) ? _1713 : (isnan(_1713) ? _2175 : min(_1713, _2175));
        }
        else
        {
            frontier_phi_37_36_ladder = _1715;
            frontier_phi_37_36_ladder_1 = _1714;
            frontier_phi_37_36_ladder_2 = _1713;
        }
        _1779 = frontier_phi_37_36_ladder_2;
        _1781 = frontier_phi_37_36_ladder_1;
        _1783 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1779 = _1713;
        _1781 = _1714;
        _1783 = _1715;
    }
    float _1823 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _513), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _521))).x));
    float _3906 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1828 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _513), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _521))).x));
    float _3917 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)));
    float _1831 = _1830 * _1779;
    float _1832 = _1830 * _1781;
    float _1833 = _1830 * _1783;
    uvec4 _1837 = floatBitsToUint(cbInstanceData._m0[_408 + 5u]);
    uint _1839 = _1837.x * 14u;
    uint _1840 = _1839 + 13u;
    float _1845 = _449 + (-1.0);
    float _1848 = (cbLight._m0[_1840].x * _1845) + 1.0;
    float _1849 = (cbLight._m0[_1840].y * _1845) + 1.0;
    uint _1850 = _1839 + 5u;
    float _1856 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1860 = _1839 + 4u;
    float _1870 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1874 = _1839 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_265, _266, _267));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_265, _266, _267));
    float _3938 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _3949 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1850].x * _1856) * _1895) + (((cbLight._m0[_1860].x * _1831) * _1870) * _1893);
    float _1903 = ((_1856 * cbLight._m0[_1850].y) * _1895) + (((cbLight._m0[_1860].y * _1832) * _1870) * _1893);
    float _1904 = ((_1856 * cbLight._m0[_1850].z) * _1895) + (((cbLight._m0[_1860].z * _1833) * _1870) * _1893);
    uint _1906 = _1839 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _269) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1839].x + _347;
    float _1922 = cbLight._m0[_1839].y + _348;
    float _1923 = cbLight._m0[_1839].z + _349;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1839].xyz));
    float _3960 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _1935 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1936 = dot(vec3(_265, _266, _267), vec3(_1928, _1929, _1930));
    float _3982 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1928, _1929, _1930));
    float _3993 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0);
    float _1957 = 0.959999978542327880859375 - _431;
    float _1959 = 0.959999978542327880859375 - _432;
    float _1960 = 0.959999978542327880859375 - _433;
    float _1967 = 1.0 - _1920;
    float _1978 = (0.5 / (((_1935 * ((_1934 * _1967) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1967) + _1920) * _1934))) * _1934;
    float _4004 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1994 = _1839 + 9u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _269) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1874].x + _347;
    float _2008 = cbLight._m0[_1874].y + _348;
    float _2009 = cbLight._m0[_1874].z + _349;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1874].xyz));
    float _4015 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _2021 = dot(vec3(_265, _266, _267), vec3(_2014, _2015, _2016));
    float _4026 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2014, _2015, _2016));
    float _4037 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2006 * _2006;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0);
    float _2047 = 1.0 - _2006;
    float _2057 = (0.5 / (((_1935 * ((_2020 * _2047) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2047) + _2006) * _2020))) * _2020;
    float _4048 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    float _2069 = (((((_2040 * _1957) + _434) * cbLight._m0[_1994].x) * _2059) * _1856) + ((((cbLight._m0[_1906].x * _1831) * ((_1956 * _1957) + _434)) * _1980) * _1870);
    float _2070 = (((((_2040 * _1959) + _436) * cbLight._m0[_1994].y) * _2059) * _1856) + ((((cbLight._m0[_1906].y * _1832) * ((_1956 * _1959) + _436)) * _1980) * _1870);
    float _2071 = (((((_2040 * _1960) + _437) * cbLight._m0[_1994].z) * _2059) * _1856) + ((((cbLight._m0[_1906].z * _1833) * ((_1956 * _1960) + _437)) * _1980) * _1870);
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1837.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _369) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _368) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
        }
        else
        {
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            uint _2556 = 0u;
            uint _2565;
            bool _2566;
            for (;;)
            {
                _2565 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2556 << 2u)) >> 2u)).x;
                _2566 = _2565 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2566)
                {
                    frontier_phi_63_pred = _2555;
                    frontier_phi_63_pred_1 = _2554;
                    frontier_phi_63_pred_2 = _2553;
                    frontier_phi_63_pred_3 = _2552;
                    frontier_phi_63_pred_4 = _2551;
                    frontier_phi_63_pred_5 = _2550;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2550;
                    _2717 = _2551;
                    _2718 = _2552;
                    _2719 = _2553;
                    _2720 = _2554;
                    _2721 = _2555;
                    _2722 = _2565;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2556 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2218;
                        float _2783 = _2742.y - _2219;
                        float _2784 = _2742.z - _2220;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_389, _392, _395), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4069 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2218;
                        float _2818 = (-0.0) - _2219;
                        float _2819 = (-0.0) - _2220;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2833 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2834 = 1.0 - _465;
                        float _2841 = sqrt(1.0 - ((1.0 - (_2834 * _2834)) * (1.0 - (_2833 * _2833))));
                        float _2842 = _2841 * _2841;
                        float _2843 = _2842 * _2842;
                        float _2844 = _2824 + _2789;
                        float _2845 = _2825 + _2790;
                        float _2846 = _2826 + _2791;
                        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
                        float _2854 = dot(vec3(_389, _392, _395), vec3(_2824, _2825, _2826));
                        float _4085 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2858 = dot(vec3(_389, _392, _395), vec3(_2850 * _2844, _2850 * _2845, _2850 * _2846));
                        float _4096 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2865 = ((_2861 * _2861) * (_2843 + (-1.0))) + 1.0;
                        float _2866 = _2802 * _2842;
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2792) + _2867;
                        float _4107 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2872 = 1.0 - _2842;
                        float _2882 = (0.5 / (((_2871 * ((_2857 * _2872) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2871 * _2872) + _2842) * _2857))) * _2871;
                        float _4118 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2893 = (((_2843 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_2865 * _2865) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2646 = (_2813 * _2761.x) + _2719;
                        _2647 = (_2813 * _2761.y) + _2720;
                        _2648 = (_2813 * _2761.z) + _2721;
                        _2643 = (_2893 * _2778.x) + _2716;
                        _2644 = (_2893 * _2778.y) + _2717;
                        _2645 = (_2893 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_63_pred = _2648;
                    frontier_phi_63_pred_1 = _2647;
                    frontier_phi_63_pred_2 = _2646;
                    frontier_phi_63_pred_3 = _2645;
                    frontier_phi_63_pred_4 = _2644;
                    frontier_phi_63_pred_5 = _2643;
                }
                _2382 = frontier_phi_63_pred;
                _2380 = frontier_phi_63_pred_1;
                _2378 = frontier_phi_63_pred_2;
                _2376 = frontier_phi_63_pred_3;
                _2374 = frontier_phi_63_pred_4;
                _2372 = frontier_phi_63_pred_5;
                uint _2557 = _2556 + 1u;
                if (_2557 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2550 = _2372;
                    _2551 = _2374;
                    _2552 = _2376;
                    _2553 = _2378;
                    _2554 = _2380;
                    _2555 = _2382;
                    _2556 = _2557;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
        }
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.z;
        uint _2388 = (_2386 >> 8u) & 15u;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((4294967295u << _2388) & _2264) == 0u)
        {
            _2518 = _2371;
            _2520 = _2373;
            _2522 = _2375;
            _2524 = _2377;
            _2526 = _2379;
            _2528 = _2381;
        }
        else
        {
            float _2543 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2544 = _2543 * _2218;
            float _2545 = _2543 * _2219;
            float _2546 = _2543 * _2220;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2388 < ((_2386 >> 12u) & 15u))
            {
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2699 = _2371;
                float _2700 = _2373;
                float _2701 = _2375;
                float _2702 = _2377;
                float _2703 = _2379;
                float _2704 = _2381;
                uint _2705 = _2388;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2715)
                    {
                        frontier_phi_74_pred = _2703;
                        frontier_phi_74_pred_1 = _2702;
                        frontier_phi_74_pred_2 = _2701;
                        frontier_phi_74_pred_3 = _2700;
                        frontier_phi_74_pred_4 = _2699;
                        frontier_phi_74_pred_5 = _2704;
                    }
                    else
                    {
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _2920 = _2699;
                        float _2921 = _2700;
                        float _2922 = _2701;
                        float _2923 = _2702;
                        float _2924 = _2703;
                        float _2925 = _2704;
                        uint _2926 = _2714;
                        uint _2927;
                        vec4 _2952;
                        float _2953;
                        vec4 _2968;
                        vec3 _2980;
                        vec4 _2996;
                        vec4 _3012;
                        float _3059;
                        bool _3060;
                        for (;;)
                        {
                            uint _2937 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2926));
                            _2927 = (_2926 + 4294967295u) & _2926;
                            uint _2939 = _2937 * 40u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            _2953 = _2952.w;
                            uint _2955 = (_2937 * 40u) + 4u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2970 = (_2937 * 40u) + 8u;
                            _2980 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x));
                            uint _2983 = (_2937 * 40u) + 16u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2999 = (_2937 * 40u) + 20u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3015 = (_2937 * 40u) + 24u;
                            vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3034 = (_2937 * 40u) + 28u;
                            vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            _3059 = fma(_2220, _3047.z, fma(_2219, _3047.y, _3047.x * _2218)) + _3047.w;
                            _3060 = !((fma(_2220, _3028.z, fma(_2219, _3028.y, _3028.x * _2218)) + _3028.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3060)
                            {
                                float _3087 = _2952.x - _2218;
                                float _3088 = _2952.y - _2219;
                                float _3089 = _2952.z - _2220;
                                float _3090 = dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089));
                                float _3093 = inversesqrt(_3090);
                                float _3094 = _3093 * _3087;
                                float _3095 = _3093 * _3088;
                                float _3096 = _3093 * _3089;
                                float _3100 = 1.0 - (_3090 / (_2953 * _2953));
                                float _4129 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3105 = sqrt(_3090) * _2968.w;
                                float _3107 = 1.39999997615814208984375 / (_3105 + 1.39999997615814208984375);
                                float _3108 = _3107 * _3107;
                                float _3111 = ((1.0 - _3108) * dot(vec3(_3094, _3095, _3096), vec3(_389, _392, _395))) + _3108;
                                float _3114 = _3105 * _3105;
                                float _3118 = (fma(_2220, _2996.z, fma(_2219, _2996.y, _2996.x * _2218)) + _2996.w) / _3059;
                                float _3119 = (fma(_2220, _3012.z, fma(_2219, _3012.y, _3012.x * _2218)) + _3012.w) / _3059;
                                float _3123 = 1.0 - dot(vec2(_3118, _3119), vec2(_3118, _3119));
                                float _4145 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3125 = _3124 * (((isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))) * _3101) / ((_3114 * 0.699999988079071044921875) + 1.0));
                                float _3137 = exp2(log2(1.0 / ((_3114 * 3.5) + 5.0)) * 0.25);
                                float _3138 = 1.0 - _465;
                                float _3145 = sqrt(1.0 - ((1.0 - (_3138 * _3138)) * (1.0 - (_3137 * _3137))));
                                float _3146 = _3145 * _3145;
                                float _3147 = _3146 * _3146;
                                float _3148 = _3094 - _2544;
                                float _3149 = _3095 - _2545;
                                float _3150 = _3096 - _2546;
                                float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                                float _3158 = dot(vec3(_389, _392, _395), vec3((-0.0) - _2544, (-0.0) - _2545, (-0.0) - _2546));
                                float _4156 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3161 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3162 = dot(vec3(_389, _392, _395), vec3(_3154 * _3148, _3154 * _3149, _3154 * _3150));
                                float _4167 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3169 = ((_3165 * _3165) * (_3147 + (-1.0))) + 1.0;
                                float _3170 = _3107 * _3146;
                                float _3171 = _3170 * _3170;
                                float _3177 = ((1.0 - _3171) * dot(vec3(_389, _392, _395), vec3(_3094, _3095, _3096))) + _3171;
                                float _4178 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3179 = 1.0 - _3146;
                                float _3189 = (0.5 / (((_3178 * ((_3161 * _3179) + _3146)) + 9.9999999392252902907785028219223e-09) + (((_3178 * _3179) + _3146) * _3161))) * _3178;
                                float _4189 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3199 = (_3124 * _3101) * (((_3147 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_3169 * _3169) * ((_3114 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3125 * _2968.z;
                                frontier_phi_80_pred_1 = _3125 * _2968.y;
                                frontier_phi_80_pred_2 = _3125 * _2968.x;
                                frontier_phi_80_pred_3 = _3199 * _2980.z;
                                frontier_phi_80_pred_4 = _3199 * _2980.y;
                                frontier_phi_80_pred_5 = _3199 * _2980.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_80_pred;
                            _3207 = frontier_phi_80_pred_1;
                            _3206 = frontier_phi_80_pred_2;
                            _3205 = frontier_phi_80_pred_3;
                            _3204 = frontier_phi_80_pred_4;
                            _3203 = frontier_phi_80_pred_5;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            if (_2927 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2927;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2911;
                        frontier_phi_74_pred_1 = _2910;
                        frontier_phi_74_pred_2 = _2909;
                        frontier_phi_74_pred_3 = _2908;
                        frontier_phi_74_pred_4 = _2907;
                        frontier_phi_74_pred_5 = _2912;
                    }
                    _2527 = frontier_phi_74_pred;
                    _2525 = frontier_phi_74_pred_1;
                    _2523 = frontier_phi_74_pred_2;
                    _2521 = frontier_phi_74_pred_3;
                    _2519 = frontier_phi_74_pred_4;
                    _2529 = frontier_phi_74_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2519;
                        _2700 = _2521;
                        _2701 = _2523;
                        _2702 = _2525;
                        _2703 = _2527;
                        _2704 = _2529;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _2529;
                frontier_phi_54_55_ladder_1 = _2527;
                frontier_phi_54_55_ladder_2 = _2525;
                frontier_phi_54_55_ladder_3 = _2523;
                frontier_phi_54_55_ladder_4 = _2519;
                frontier_phi_54_55_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_54_55_ladder = _2381;
                frontier_phi_54_55_ladder_1 = _2379;
                frontier_phi_54_55_ladder_2 = _2377;
                frontier_phi_54_55_ladder_3 = _2375;
                frontier_phi_54_55_ladder_4 = _2371;
                frontier_phi_54_55_ladder_5 = _2373;
            }
            _2518 = frontier_phi_54_55_ladder_4;
            _2520 = frontier_phi_54_55_ladder_5;
            _2522 = frontier_phi_54_55_ladder_3;
            _2524 = frontier_phi_54_55_ladder_2;
            _2526 = frontier_phi_54_55_ladder_1;
            _2528 = frontier_phi_54_55_ladder;
        }
        float _2533 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _2277 = (_2533 * _2524) + _1902;
        _2279 = (_2533 * _2526) + _1903;
        _2281 = (_2533 * _2528) + _1904;
        _2283 = ((_2518 * _434) * _2533) + _2069;
        _2285 = ((_2520 * _436) * _2533) + _2070;
        _2287 = ((_2522 * _437) * _2533) + _2071;
    }
    else
    {
        _2277 = _1902;
        _2279 = _1903;
        _2281 = _1904;
        _2283 = _2069;
        _2285 = _2070;
        _2287 = _2071;
    }
    float _4205 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _4216 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _4227 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4238 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _2305 = ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2277 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _449))) + ((_2283 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1291)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2279 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _449))) + ((_2285 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1291)) * cbPerFrame._m0[3u].x);
    float _2307 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2281 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _449))) + ((_2287 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1291)) * cbPerFrame._m0[3u].x);
    float _2312 = cbInstanceData._m0[_408 + 6u].w * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)));
    float _2317 = _368 / cbSceneParam._m0[86u].x;
    float _2318 = _369 / cbSceneParam._m0[86u].y;
    vec4 _2332 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2317, _2318, (log2((isnan(cbSceneParam._m0[77u].w) ? _289 : (isnan(_289) ? cbSceneParam._m0[77u].w : min(_289, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2334 = _2332.x;
    float _2335 = _2332.y;
    float _2336 = _2332.z;
    float _2337 = _2332.w;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_289 > cbSceneParam._m0[78u].w)
    {
        float _2396 = isnan(_289) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _289 : min(cbSceneParam._m0[80u].w, _289));
        float _2397 = _2396 / _289;
        float _2408 = _2397 * _340;
        float _2409 = _341 * _2397;
        float _2410 = (-0.0) - _2409;
        float _2412 = _2397 * _342;
        float _2414 = (cbSceneParam._m0[77u].w * _2410) / _2396;
        float _2415 = _2414 + cbSceneParam._m0[79u].w;
        float _2416 = cbSceneParam._m0[79u].w - _2409;
        float _2422 = sqrt(((_2408 * _2408) + (_2409 * _2409)) + (_2412 * _2412));
        float _2425 = (1.0 - (cbSceneParam._m0[77u].w / _2396)) * _2422;
        float _2430 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2432 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2656;
        if (abs((_2410 - _2414) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2656 = ((((_2415 > 0.0) ? exp2(_2430 * _2415) : (2.0 - exp2(_2432 * _2415))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2425;
        }
        else
        {
            float _2579 = 1.0 / cbSceneParam._m0[80u].x;
            float _2580 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : max(_2415, _2416));
            float _2581 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : min(_2415, _2416));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            _2656 = ((abs(_2422 / _2410) * cbSceneParam._m0[80u].y) * ((((_2590 - _2591) * 2.0) - ((exp2(_2430 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0)))) - exp2(_2430 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0))))) * _2579)) - ((exp2(_2432 * _2590) - exp2(_2432 * _2591)) * _2579))) + (_2425 * cbSceneParam._m0[80u].z);
        }
        vec4 _2658 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2317, _2318, 1.0), 0.0);
        float _2667 = exp2((_2656 * (-1.44269502162933349609375)) * (1.0 - _2658.w));
        float _2668 = log2(_2667);
        float _2684 = log2(_2337);
        _2434 = (exp2(_2684 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].x)) * _2658.x) / cbSceneParam._m0[78u].x)) + _2334;
        _2436 = (exp2(_2684 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].y)) * _2658.y) / cbSceneParam._m0[78u].y)) + _2335;
        _2438 = (exp2(_2684 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2668 * cbSceneParam._m0[78u].z)) * _2658.z) / cbSceneParam._m0[78u].z)) + _2336;
        _2440 = _2667 * _2337;
    }
    else
    {
        _2434 = _2334;
        _2436 = _2335;
        _2438 = _2336;
        _2440 = _2337;
    }
    bool _2694;
    vec4 _2450;
    vec4 _2472;
    float _2474;
    float _2478;
    float _2479;
    float _2480;
    float _2481;
    bool _2491;
    for (;;)
    {
        _2450 = cbMatDynParam._m0[0u];
        float _2452 = roundEven(_2450.y);
        bool _2453 = _2452 == 3.0;
        float _2454 = log2(_2440);
        float _2461 = exp2(_2454 * cbSceneParam._m0[78u].x) * _2305;
        float _2462 = exp2(_2454 * cbSceneParam._m0[78u].y) * _2306;
        float _2463 = exp2(_2454 * cbSceneParam._m0[78u].z) * _2307;
        float _2470 = _356 + (-0.5);
        _2472 = cbMtdParam._m0[1u];
        _2474 = _2472.y * _2470;
        float _2477 = (_2452 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2478 = _2477 * (_2453 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2434)));
        _2479 = _2477 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2436)));
        _2480 = _2477 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2438)));
        _2481 = _2470 * 0.999000012874603271484375;
        _2491 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2491)
        {
            if ((cbInstanceData._m0[_408 + 7u].x + _2481) < 0.5)
            {
                _2694 = true;
                break;
            }
        }
        uint _2614 = _410 + uint(_2450.w);
        if ((cbInstanceData._m0[_2614].w < 1.0) && ((cbInstanceData._m0[_2614].w + _2481) < 0.5))
        {
            _2694 = true;
            break;
        }
        if ((_2474 + 1.0) < _2472.x)
        {
            _2694 = true;
            break;
        }
        _2694 = false;
        break;
    }
    float _2898;
    if (_2694)
    {
        discard_state = true;
        _2898 = 0.0;
    }
    else
    {
        _2898 = _2312;
    }
    SV_Target.x = _2478;
    SV_Target.y = _2479;
    SV_Target.z = _2480;
    SV_Target.w = _2898;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2312;
    discard_exit();
}


