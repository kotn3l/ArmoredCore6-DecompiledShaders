#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _806;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(C_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = (_225.x * 2.0) + (-1.0);
    float _236 = (_225.y * 2.0) + (-1.0);
    float _237 = dot(vec2(_234, _236), vec2(_234, _236));
    float _2968 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _243 = sqrt(1.0 - (isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0))));
    float _245 = cbMtdParam._m0[10u].x + _225.z;
    float _248 = fma(_243, _190 * NORMAL.x, fma(_236, _197 * TANGENT.x, (_183 * _176) * _234));
    float _251 = fma(_243, _190 * NORMAL.y, fma(_236, _197 * TANGENT.y, (_183 * _177) * _234));
    float _254 = fma(_243, _190 * NORMAL.z, fma(_236, _197 * TANGENT.z, (_183 * _178) * _234));
    float _258 = inversesqrt(dot(vec3(_248, _251, _254), vec3(_248, _251, _254)));
    float _259 = _258 * _248;
    float _260 = _258 * _251;
    float _261 = _258 * _254;
    float _2979 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _262 = isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0));
    float _2990 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _263 = isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0));
    float _3001 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3012 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3023 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3034 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _267 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _283 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _324 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _334 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _324);
    float _335 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _324);
    float _336 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _324);
    float _340 = inversesqrt(dot(vec3(_334, _335, _336), vec3(_334, _335, _336)));
    float _341 = _334 * _340;
    float _342 = _335 * _340;
    float _343 = _336 * _340;
    float _349 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _350 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _371 = fma(_261, cbSceneParam._m0[5u].z, fma(_260, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _259));
    float _374 = fma(_261, cbSceneParam._m0[6u].z, fma(_260, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _259));
    float _377 = fma(_261, cbSceneParam._m0[7u].z, fma(_260, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _259));
    uint _390 = uint(roundEven(NORMAL.w)) * 13u;
    uint _393 = (_390 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _399 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0)))) * cbInstanceData._m0[_393].x;
    float _400 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0)))) * cbInstanceData._m0[_393].y;
    float _401 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0)))) * cbInstanceData._m0[_393].z;
    float _3045 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
    float _3056 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _403 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
    float _3067 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
    float _405 = 1.0 - _267;
    float _406 = _402 * _405;
    float _407 = _403 * _405;
    float _408 = _404 * _405;
    float _413 = (_402 + (-0.039999999105930328369140625)) * _267;
    float _414 = (_403 + (-0.039999999105930328369140625)) * _267;
    float _415 = (_404 + (-0.039999999105930328369140625)) * _267;
    float _416 = _413 + 0.039999999105930328369140625;
    float _418 = _414 + 0.039999999105930328369140625;
    float _419 = _415 + 0.039999999105930328369140625;
    vec4 _428 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _349, cbSceneParam._m0[86u].y * _350));
    float _431 = _428.x * TEXCOORD.z;
    float _432 = dot(vec3(_259, _260, _261), vec3(_341, _342, _343));
    float _435 = _432 * 2.0;
    float _439 = (_435 * _259) - _341;
    float _440 = (_435 * _260) - _342;
    float _441 = (_435 * _261) - _343;
    float _445 = abs(dot(vec3(_341, _342, _343), vec3(_259, _260, _261)));
    float _3078 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _447 = sqrt(_263);
    float _460 = exp2((_447 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_447 * 3.0));
    float _466 = (1.0 - _460) * ((_447 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _467 = _460 * _447;
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _805;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _530 = fma(_503, cbModelParam._m0[26u].z, fma(_499, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495));
        float _534 = fma(_503, cbModelParam._m0[27u].z, fma(_499, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495));
        float _538 = fma(_503, cbModelParam._m0[28u].z, fma(_499, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495));
        float _563 = _495 + _259;
        float _564 = _499 + _260;
        float _565 = _503 + _261;
        float _575 = fma(_565, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563)) - _530;
        float _576 = fma(_565, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563)) - _534;
        float _577 = fma(_565, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563)) - _538;
        float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
        float _594 = ((_581 * _575) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_530 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _595 = ((_581 * _576) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_534 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _596 = ((_581 * _577) / cbModelParam._m0[34u].z) + ((((((_538 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_594, _595, _596), 0.0);
        float _633 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_599.x + (-0.5));
        float _635 = _633 * (_599.y + (-0.5));
        float _636 = _633 * (_599.z + (-0.5));
        float _643 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_606.x + (-0.5));
        float _645 = _643 * (_606.y + (-0.5));
        float _646 = _643 * (_606.z + (-0.5));
        float _653 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_613.x + (-0.5));
        float _655 = _653 * (_613.y + (-0.5));
        float _656 = _653 * (_613.z + (-0.5));
        float _663 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_620.x + (-0.5));
        float _665 = _663 * (_620.y + (-0.5));
        float _666 = _663 * (_620.z + (-0.5));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = _634 * 0.5;
        float _671 = _644 * 0.5;
        float _672 = _654 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _687 = (dot(vec3(_259, _260, _261), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _3104 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _697 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3115 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _699 = _698 * 2.0;
        float _703 = (1.0 - _698) / (_698 + 1.0);
        float _3126 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _713 = ((((1.0 - _704) * (_699 + 2.0)) * exp2(log2(isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))) * (_699 + 1.0))) + _704) * _667;
        float _714 = _635 * 0.5;
        float _715 = _645 * 0.5;
        float _716 = _655 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _730 = (dot(vec3(_259, _260, _261), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3137 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _739 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3148 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3159 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0))) * (_741 + 1.0))) + _746) * _668;
        float _756 = _636 * 0.5;
        float _757 = _646 * 0.5;
        float _758 = _656 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_259, _260, _261), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3170 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3181 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3192 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0))) * (_783 + 1.0))) + _788) * _669;
        _805 = _636;
        _807 = _635;
        _808 = _634;
        _809 = _646;
        _810 = _645;
        _811 = _644;
        _812 = _656;
        _813 = _655;
        _814 = _654;
        _815 = _669;
        _816 = _668;
        _817 = _667;
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0)));
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
    }
    else
    {
        _805 = _806;
        _807 = _806;
        _808 = _806;
        _809 = _806;
        _810 = _806;
        _811 = _806;
        _812 = _806;
        _813 = _806;
        _814 = _806;
        _815 = _806;
        _816 = _806;
        _817 = _806;
        _818 = 0.0;
        _819 = 0.0;
        _820 = 0.0;
    }
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _846 = fma(_503, cbModelParam._m0[30u].z, fma(_499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _495));
        float _850 = fma(_503, cbModelParam._m0[31u].z, fma(_499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _495));
        float _854 = fma(_503, cbModelParam._m0[32u].z, fma(_499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _495));
        float _877 = _495 + _259;
        float _878 = _499 + _260;
        float _879 = _503 + _261;
        float _889 = fma(_879, cbModelParam._m0[30u].z, fma(_878, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877)) - _846;
        float _890 = fma(_879, cbModelParam._m0[31u].z, fma(_878, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877)) - _850;
        float _891 = fma(_879, cbModelParam._m0[32u].z, fma(_878, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877)) - _854;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_846 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_850 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[35u].z) + ((((((_854 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _945 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_912.x + (-0.5));
        float _947 = _945 * (_912.y + (-0.5));
        float _948 = _945 * (_912.z + (-0.5));
        float _955 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_919.x + (-0.5));
        float _957 = _955 * (_919.y + (-0.5));
        float _958 = _955 * (_919.z + (-0.5));
        float _965 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_926.x + (-0.5));
        float _967 = _965 * (_926.y + (-0.5));
        float _968 = _965 * (_926.z + (-0.5));
        float _975 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_933.x + (-0.5));
        float _977 = _975 * (_933.y + (-0.5));
        float _978 = _975 * (_933.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_259, _260, _261), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3255 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_1009 + 1.0))) + _1014) * _979;
        float _1024 = _947 * 0.5;
        float _1025 = _957 * 0.5;
        float _1026 = _967 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_259, _260, _261), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3266 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3277 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3288 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * (_1051 + 1.0))) + _1056) * _980;
        float _1066 = _948 * 0.5;
        float _1067 = _958 * 0.5;
        float _1068 = _968 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_259, _260, _261), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3299 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3310 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3321 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))) * (_1093 + 1.0))) + _1098) * _981;
        _1115 = _948;
        _1116 = _947;
        _1117 = _946;
        _1118 = _958;
        _1119 = _957;
        _1120 = _956;
        _1121 = _968;
        _1122 = _967;
        _1123 = _966;
        _1124 = _981;
        _1125 = _980;
        _1126 = _979;
        _1127 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _806;
        _1116 = _806;
        _1117 = _806;
        _1118 = _806;
        _1119 = _806;
        _1120 = _806;
        _1121 = _806;
        _1122 = _806;
        _1123 = _806;
        _1124 = _806;
        _1125 = _806;
        _1126 = _806;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1139 = (cbModelParam._m0[1u].x * (_1127 - _818)) + _818;
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _819)) + _819;
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _820)) + _820;
    float _1162 = fma(_1141, cbSceneParam._m0[89u].z, fma(_1140, cbSceneParam._m0[89u].y, _1139 * cbSceneParam._m0[89u].x));
    float _1165 = fma(_1141, cbSceneParam._m0[90u].z, fma(_1140, cbSceneParam._m0[90u].y, _1139 * cbSceneParam._m0[90u].x));
    float _1168 = fma(_1141, cbSceneParam._m0[91u].z, fma(_1140, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1139));
    float _1183 = _439 * 0.5;
    float _1184 = _440 * 0.5;
    float _1185 = _441 * 0.5;
    float _1186 = dot(vec4(_1183, _1184, _1185, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1189 = dot(vec4(_1183, _1184, _1185, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1192 = dot(vec4(_1183, _1184, _1185, 1.0), vec4(_1115, _1118, _1121, _1124));
    float _1226;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1199 = dot(vec4(_1183, _1184, _1185, 1.0), vec4(_805, _809, _812, _815));
        float _1203 = dot(vec4(_1183, _1184, _1185, 1.0), vec4(_807, _810, _813, _816));
        float _1207 = dot(vec4(_1183, _1184, _1185, 1.0), vec4(_808, _811, _814, _817));
        float _1214 = dot(vec4(cbModelParam._m0[39u]), vec4(_1183, _1184, _1185, 1.0));
        _1226 = dot(vec3(isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1214) ? 0.0 : (isnan(0.0) ? _1214 : max(0.0, _1214))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1226 = 1.0;
    }
    float _1237;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1228 = dot(vec4(cbModelParam._m0[40u]), vec4(_1183, _1184, _1185, 1.0));
        _1237 = dot(vec3(isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1228) ? 0.0 : (isnan(0.0) ? _1228 : max(0.0, _1228))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1237 = 1.0;
    }
    float _1241 = (_1237 * cbModelParam._m0[1u].x) + (_1226 * (1.0 - cbModelParam._m0[1u].x));
    float _1251 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _263);
    float _1252 = isnan(_1251) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1251 : min(cbModelParam._m0[25u].z, _1251));
    float _1334;
    float _1336;
    float _1338;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1301 = fma(_503, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495)) + cbModelParam._m0[13u].w;
        float _1305 = fma(_503, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495)) + cbModelParam._m0[14u].w;
        float _1309 = fma(_503, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495)) + cbModelParam._m0[15u].w;
        float _1312 = fma(_441, cbModelParam._m0[13u].z, fma(_440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439));
        float _1315 = fma(_441, cbModelParam._m0[14u].z, fma(_440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439));
        float _1318 = fma(_441, cbModelParam._m0[15u].z, fma(_440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439));
        float _1346;
        if (_1312 > 0.0)
        {
            _1346 = abs((1.0 - _1301) / _1312);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1301 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1346 = frontier_phi_14_12_ladder;
        }
        float _1803;
        if (_1315 > 0.0)
        {
            _1803 = abs((1.0 - _1305) / _1315);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1305 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1803 = frontier_phi_23_19_ladder;
        }
        float _2104;
        if (_1318 > 0.0)
        {
            _2104 = abs((1.0 - _1309) / _1318);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1309 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2104 = frontier_phi_37_30_ladder;
        }
        float _2106 = isnan(_1803) ? _1346 : (isnan(_1346) ? _1803 : min(_1346, _1803));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1312) + _1301;
        float _2112 = (_2107 * _1315) + _1305;
        float _2113 = (_2107 * _1318) + _1309;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2114;
        float _2117 = _2114 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2113 > _2117) || ((_2113 < _2115) || ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 < _2115) || (_2111 > _2117))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1252);
            frontier_phi_13_37_ladder = _2239.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2239.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2239.x * cbModelParam._m0[1u].y;
        }
        _1334 = frontier_phi_13_37_ladder_2;
        _1336 = frontier_phi_13_37_ladder_1;
        _1338 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_439, _440, _441), _1252);
        _1334 = _1322.x * cbModelParam._m0[1u].y;
        _1336 = _1322.y * cbModelParam._m0[1u].y;
        _1338 = _1322.z * cbModelParam._m0[1u].y;
    }
    float _1342 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _263);
    float _1343 = isnan(_1342) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1342 : min(cbModelParam._m0[25u].w, _1342));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1400 = fma(_503, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495)) + cbModelParam._m0[21u].w;
        float _1404 = fma(_503, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495)) + cbModelParam._m0[22u].w;
        float _1408 = fma(_503, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495)) + cbModelParam._m0[23u].w;
        float _1411 = fma(_441, cbModelParam._m0[21u].z, fma(_440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439));
        float _1414 = fma(_441, cbModelParam._m0[22u].z, fma(_440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439));
        float _1417 = fma(_441, cbModelParam._m0[23u].z, fma(_440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439));
        float _1808;
        if (_1411 > 0.0)
        {
            _1808 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1808 = frontier_phi_25_21_ladder;
        }
        float _2130;
        if (_1414 > 0.0)
        {
            _2130 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2130 = frontier_phi_39_32_ladder;
        }
        float _2299;
        if (_1417 > 0.0)
        {
            _2299 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2299 = frontier_phi_53_48_ladder;
        }
        float _2301 = isnan(_2130) ? _1808 : (isnan(_1808) ? _2130 : min(_1808, _2130));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1411) + _1400;
        float _2307 = (_2302 * _1414) + _1404;
        float _2308 = (_2302 * _1417) + _1408;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1343);
            frontier_phi_22_53_ladder = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1436 = frontier_phi_22_53_ladder_2;
        _1438 = frontier_phi_22_53_ladder;
        _1440 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_439, _440, _441), _1343);
        _1436 = _1420.x * cbModelParam._m0[1u].z;
        _1438 = _1420.y * cbModelParam._m0[1u].z;
        _1440 = _1420.z * cbModelParam._m0[1u].z;
    }
    float _1453 = (((_466 * _416) + _467) * _431) * ((cbModelParam._m0[1u].w * (_1436 - _1334)) + _1334);
    float _1455 = (((_466 * _418) + _467) * _431) * ((cbModelParam._m0[1u].w * (_1438 - _1336)) + _1336);
    float _1457 = (((_466 * _419) + _467) * _431) * ((cbModelParam._m0[1u].w * (_1440 - _1338)) + _1338);
    float _1460 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, _1453 * cbSceneParam._m0[91u].x));
    vec4 _1474 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_349, _350));
    float _1476 = _1474.w;
    float _1506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1549 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1506), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1510))).x));
    float _3447 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1554 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1506), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1510))).x));
    float _3458 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1556 = (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)));
    float _1557 = _1556 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1476));
    float _1558 = _1556 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1476));
    float _1559 = _1556 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1476));
    uvec4 _1563 = floatBitsToUint(cbInstanceData._m0[_390 + 5u]);
    uint _1565 = _1563.x * 14u;
    uint _1566 = _1565 + 13u;
    float _1571 = _431 + (-1.0);
    float _1574 = (cbLight._m0[_1566].x * _1571) + 1.0;
    float _1575 = (cbLight._m0[_1566].y * _1571) + 1.0;
    uint _1576 = _1565 + 5u;
    float _1582 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1586 = _1565 + 4u;
    float _1596 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
    uint _1600 = _1565 | 1u;
    float _1611 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_259, _260, _261));
    float _1614 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_259, _260, _261));
    float _3479 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _3490 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1619 = (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.3183098733425140380859375;
    float _1621 = (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * 0.3183098733425140380859375;
    float _1628 = ((cbLight._m0[_1576].x * _1582) * _1621) + (((cbLight._m0[_1586].x * _1557) * _1596) * _1619);
    float _1629 = ((_1582 * cbLight._m0[_1576].y) * _1621) + (((cbLight._m0[_1586].y * _1558) * _1596) * _1619);
    float _1630 = ((_1582 * cbLight._m0[_1576].z) * _1621) + (((cbLight._m0[_1586].z * _1559) * _1596) * _1619);
    uint _1632 = _1565 + 8u;
    float _1645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _263) * 0.949999988079071044921875);
    float _1646 = _1645 * _1645;
    float _1647 = cbLight._m0[_1565].x + _341;
    float _1648 = cbLight._m0[_1565].y + _342;
    float _1649 = cbLight._m0[_1565].z + _343;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1654 = _1653 * _1647;
    float _1655 = _1653 * _1648;
    float _1656 = _1653 * _1649;
    float _1657 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1565].xyz));
    float _3501 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _1661 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _1662 = dot(vec3(_259, _260, _261), vec3(_1654, _1655, _1656));
    float _3523 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _1666 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1654, _1655, _1656));
    float _3534 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1670 = _1646 * _1646;
    float _1674 = ((_1665 * _1665) * (_1670 + (-1.0))) + 1.0;
    float _1682 = exp2(log2(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * 5.0);
    float _1683 = 0.959999978542327880859375 - _413;
    float _1685 = 0.959999978542327880859375 - _414;
    float _1686 = 0.959999978542327880859375 - _415;
    float _1693 = 1.0 - _1646;
    float _1704 = (0.5 / (((_1661 * ((_1660 * _1693) + _1646)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1693) + _1646) * _1660))) * _1660;
    float _3545 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1706 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1670 / ((_1674 * _1674) * 3.141590118408203125));
    uint _1720 = _1565 + 9u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _263) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1600].x + _341;
    float _1734 = cbLight._m0[_1600].y + _342;
    float _1735 = cbLight._m0[_1600].z + _343;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1600].xyz));
    float _3556 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _1747 = dot(vec3(_259, _260, _261), vec3(_1740, _1741, _1742));
    float _3567 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1740, _1741, _1742));
    float _3578 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1732 * _1732;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1766 = exp2(log2(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * 5.0);
    float _1773 = 1.0 - _1732;
    float _1783 = (0.5 / (((_1661 * ((_1746 * _1773) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1773) + _1732) * _1746))) * _1746;
    float _3589 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    float _1795 = (((((_1766 * _1683) + _416) * cbLight._m0[_1720].x) * _1785) * _1582) + ((((cbLight._m0[_1632].x * _1557) * ((_1682 * _1683) + _416)) * _1706) * _1596);
    float _1796 = (((((_1766 * _1685) + _418) * cbLight._m0[_1720].y) * _1785) * _1582) + ((((cbLight._m0[_1632].y * _1558) * ((_1682 * _1685) + _418)) * _1706) * _1596);
    float _1797 = (((((_1766 * _1686) + _419) * cbLight._m0[_1720].z) * _1785) * _1582) + ((((cbLight._m0[_1632].z * _1559) * ((_1682 * _1686) + _419)) * _1706) * _1596);
    float _1913;
    float _1915;
    float _1917;
    float _1919;
    float _1921;
    float _1923;
    if (_1563.y == 0u)
    {
        float _1853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1854 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1853;
        float _1855 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1853;
        float _1856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1853;
        uvec4 _1868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1869 = _1868.x;
        uint _1880 = uint((float(_1868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _350) / _1869))) + floor(float(uint(cbSceneParam._m0[85u].x * _349) / _1869)));
        float _1890 = (log2(_1856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1891 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        uint _1894 = uint(isnan(14.0) ? _1891 : (isnan(_1891) ? 14.0 : min(_1891, 14.0)));
        uvec4 _1899 = texelFetch(g_lightClusterGridBuffer, int(((_1894 << 2u) + (_1880 << 6u)) >> 2u));
        uint _1900 = _1899.x;
        uint _1901 = _1868.z;
        float _1990;
        float _1992;
        float _1994;
        float _1996;
        float _1998;
        float _2000;
        if (((((1u << ((_1901 >> 4u) & 15u)) + 4294967295u) & _1900) == 0u) || ((_1901 & 240u) == 0u))
        {
            _1990 = 0.0;
            _1992 = 0.0;
            _1994 = 0.0;
            _1996 = 0.0;
            _1998 = 0.0;
            _2000 = 0.0;
        }
        else
        {
            float _1991;
            float _1993;
            float _1995;
            float _1997;
            float _1999;
            float _2001;
            float _2167 = 0.0;
            float _2168 = 0.0;
            float _2169 = 0.0;
            float _2170 = 0.0;
            float _2171 = 0.0;
            float _2172 = 0.0;
            uint _2173 = 0u;
            uint _2182;
            bool _2183;
            for (;;)
            {
                _2182 = texelFetch(g_lightClassification, int((((_1894 << 5u) + (_1880 << 9u)) + (_2173 << 2u)) >> 2u)).x;
                _2183 = _2182 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2183)
                {
                    frontier_phi_50_pred = _2170;
                    frontier_phi_50_pred_1 = _2172;
                    frontier_phi_50_pred_2 = _2171;
                    frontier_phi_50_pred_3 = _2169;
                    frontier_phi_50_pred_4 = _2168;
                    frontier_phi_50_pred_5 = _2167;
                }
                else
                {
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    float _2347;
                    uint _2348;
                    _2342 = _2167;
                    _2343 = _2168;
                    _2344 = _2169;
                    _2345 = _2170;
                    _2346 = _2171;
                    _2347 = _2172;
                    _2348 = _2182;
                    float _2248;
                    float _2249;
                    float _2250;
                    float _2251;
                    float _2252;
                    float _2253;
                    for (;;)
                    {
                        uint _2352 = uint(findLSB(_2348)) + (_2173 << 5u);
                        uint _2349 = (_2348 + 4294967295u) & _2348;
                        uint _2354 = _2352 * 48u;
                        vec4 _2368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2354)).x, texelFetch(g_PointLightRenderingBuffer, int(_2354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2354 + 3u)).x));
                        uint _2374 = (_2352 * 48u) + 4u;
                        vec4 _2387 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2374)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 3u)).x));
                        uint _2393 = (_2352 * 48u) + 8u;
                        vec3 _2404 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2393)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2393 + 2u)).x));
                        float _2408 = _2368.x - _1854;
                        float _2409 = _2368.y - _1855;
                        float _2410 = _2368.z - _1856;
                        float _2411 = dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410));
                        float _2414 = inversesqrt(_2411);
                        float _2415 = _2414 * _2408;
                        float _2416 = _2414 * _2409;
                        float _2417 = _2414 * _2410;
                        float _2418 = dot(vec3(_371, _374, _377), vec3(_2415, _2416, _2417));
                        float _2423 = 1.0 - (_2411 * _2368.w);
                        float _3610 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
                        float _2424 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                        float _2425 = sqrt(_2411) * _2387.w;
                        float _2428 = 1.39999997615814208984375 / (_2425 + 1.39999997615814208984375);
                        float _2429 = _2428 * _2428;
                        float _2432 = ((1.0 - _2429) * _2418) + _2429;
                        float _2435 = _2425 * _2425;
                        float _2439 = ((isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0))) * _2424) / ((_2435 * 0.699999988079071044921875) + 1.0);
                        float _2443 = (-0.0) - _1854;
                        float _2444 = (-0.0) - _1855;
                        float _2445 = (-0.0) - _1856;
                        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
                        float _2450 = _2449 * _2443;
                        float _2451 = _2449 * _2444;
                        float _2452 = _2449 * _2445;
                        float _2460 = exp2(log2(1.0 / ((_2435 * 3.5) + 5.0)) * 0.25);
                        float _2461 = 1.0 - _447;
                        float _2468 = sqrt(1.0 - ((1.0 - (_2461 * _2461)) * (1.0 - (_2460 * _2460))));
                        float _2469 = _2468 * _2468;
                        float _2470 = _2469 * _2469;
                        float _2471 = _2450 + _2415;
                        float _2472 = _2451 + _2416;
                        float _2473 = _2452 + _2417;
                        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
                        float _2481 = dot(vec3(_371, _374, _377), vec3(_2450, _2451, _2452));
                        float _3626 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
                        float _2484 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                        float _2485 = dot(vec3(_371, _374, _377), vec3(_2477 * _2471, _2477 * _2472, _2477 * _2473));
                        float _3637 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
                        float _2488 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                        float _2492 = ((_2488 * _2488) * (_2470 + (-1.0))) + 1.0;
                        float _2493 = _2428 * _2469;
                        float _2494 = _2493 * _2493;
                        float _2497 = ((1.0 - _2494) * _2418) + _2494;
                        float _3648 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _2498 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
                        float _2499 = 1.0 - _2469;
                        float _2509 = (0.5 / (((_2498 * ((_2484 * _2499) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2499) + _2469) * _2484))) * _2498;
                        float _3659 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _2520 = (((_2470 * 3.1415927410125732421875) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) / ((_2492 * _2492) * ((_2435 * 2.1991131305694580078125) + 3.141590118408203125))) * _2424;
                        _2251 = (_2439 * _2387.x) + _2345;
                        _2252 = (_2439 * _2387.y) + _2346;
                        _2253 = (_2439 * _2387.z) + _2347;
                        _2248 = (_2520 * _2404.x) + _2342;
                        _2249 = (_2520 * _2404.y) + _2343;
                        _2250 = (_2520 * _2404.z) + _2344;
                        if (_2349 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2342 = _2248;
                            _2343 = _2249;
                            _2344 = _2250;
                            _2345 = _2251;
                            _2346 = _2252;
                            _2347 = _2253;
                            _2348 = _2349;
                        }
                    }
                    frontier_phi_50_pred = _2251;
                    frontier_phi_50_pred_1 = _2253;
                    frontier_phi_50_pred_2 = _2252;
                    frontier_phi_50_pred_3 = _2250;
                    frontier_phi_50_pred_4 = _2249;
                    frontier_phi_50_pred_5 = _2248;
                }
                _1997 = frontier_phi_50_pred;
                _2001 = frontier_phi_50_pred_1;
                _1999 = frontier_phi_50_pred_2;
                _1995 = frontier_phi_50_pred_3;
                _1993 = frontier_phi_50_pred_4;
                _1991 = frontier_phi_50_pred_5;
                uint _2174 = _2173 + 1u;
                if (_2174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2167 = _1991;
                    _2168 = _1993;
                    _2169 = _1995;
                    _2170 = _1997;
                    _2171 = _1999;
                    _2172 = _2001;
                    _2173 = _2174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1990 = _1991;
            _1992 = _1993;
            _1994 = _1995;
            _1996 = _1997;
            _1998 = _1999;
            _2000 = _2001;
        }
        uvec4 _2004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2005 = _2004.z;
        uint _2007 = (_2005 >> 8u) & 15u;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        if (((4294967295u << _2007) & _1900) == 0u)
        {
            _2135 = _1990;
            _2137 = _1992;
            _2139 = _1994;
            _2141 = _1996;
            _2143 = _1998;
            _2145 = _2000;
        }
        else
        {
            float _2160 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
            float _2161 = _2160 * _1854;
            float _2162 = _2160 * _1855;
            float _2163 = _2160 * _1856;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2007 < ((_2005 >> 12u) & 15u))
            {
                float _2136;
                float _2138;
                float _2140;
                float _2142;
                float _2144;
                float _2146;
                float _2325 = _1990;
                float _2326 = _1992;
                float _2327 = _1994;
                float _2328 = _1996;
                float _2329 = _1998;
                float _2330 = _2000;
                uint _2331 = _2007;
                uint _2340;
                bool _2341;
                for (;;)
                {
                    _2340 = texelFetch(g_lightClassification, int((((_1894 << 5u) + (_1880 << 9u)) + (_2331 << 2u)) >> 2u)).x;
                    _2341 = _2340 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2341)
                    {
                        frontier_phi_59_pred = _2330;
                        frontier_phi_59_pred_1 = _2329;
                        frontier_phi_59_pred_2 = _2328;
                        frontier_phi_59_pred_3 = _2327;
                        frontier_phi_59_pred_4 = _2326;
                        frontier_phi_59_pred_5 = _2325;
                    }
                    else
                    {
                        float _2546;
                        float _2547;
                        float _2548;
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2559 = _2325;
                        float _2560 = _2326;
                        float _2561 = _2327;
                        float _2562 = _2328;
                        float _2563 = _2329;
                        float _2564 = _2330;
                        uint _2565 = _2340;
                        uint _2566;
                        vec4 _2591;
                        float _2592;
                        vec4 _2607;
                        vec3 _2619;
                        vec4 _2635;
                        vec4 _2651;
                        float _2698;
                        bool _2699;
                        for (;;)
                        {
                            uint _2576 = ((_2331 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2565));
                            _2566 = (_2565 + 4294967295u) & _2565;
                            uint _2578 = _2576 * 40u;
                            _2591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2578 + 3u)).x));
                            _2592 = _2591.w;
                            uint _2594 = (_2576 * 40u) + 4u;
                            _2607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 3u)).x));
                            uint _2609 = (_2576 * 40u) + 8u;
                            _2619 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x));
                            uint _2622 = (_2576 * 40u) + 16u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2638 = (_2576 * 40u) + 20u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2654 = (_2576 * 40u) + 24u;
                            vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            uint _2673 = (_2576 * 40u) + 28u;
                            vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 3u)).x));
                            _2698 = fma(_1856, _2686.z, fma(_1855, _2686.y, _2686.x * _1854)) + _2686.w;
                            _2699 = !((fma(_1856, _2667.z, fma(_1855, _2667.y, _2667.x * _1854)) + _2667.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2699)
                            {
                                float _2726 = _2591.x - _1854;
                                float _2727 = _2591.y - _1855;
                                float _2728 = _2591.z - _1856;
                                float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                                float _2732 = inversesqrt(_2729);
                                float _2733 = _2732 * _2726;
                                float _2734 = _2732 * _2727;
                                float _2735 = _2732 * _2728;
                                float _2739 = 1.0 - (_2729 / (_2592 * _2592));
                                float _3670 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
                                float _2744 = sqrt(_2729) * _2607.w;
                                float _2746 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                                float _2747 = _2746 * _2746;
                                float _2750 = ((1.0 - _2747) * dot(vec3(_2733, _2734, _2735), vec3(_371, _374, _377))) + _2747;
                                float _2753 = _2744 * _2744;
                                float _2757 = (fma(_1856, _2635.z, fma(_1855, _2635.y, _2635.x * _1854)) + _2635.w) / _2698;
                                float _2758 = (fma(_1856, _2651.z, fma(_1855, _2651.y, _2651.x * _1854)) + _2651.w) / _2698;
                                float _2762 = 1.0 - dot(vec2(_2757, _2758), vec2(_2757, _2758));
                                float _3686 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2763 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                                float _2764 = _2763 * (((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2740) / ((_2753 * 0.699999988079071044921875) + 1.0));
                                float _2776 = exp2(log2(1.0 / ((_2753 * 3.5) + 5.0)) * 0.25);
                                float _2777 = 1.0 - _447;
                                float _2784 = sqrt(1.0 - ((1.0 - (_2777 * _2777)) * (1.0 - (_2776 * _2776))));
                                float _2785 = _2784 * _2784;
                                float _2786 = _2785 * _2785;
                                float _2787 = _2733 - _2161;
                                float _2788 = _2734 - _2162;
                                float _2789 = _2735 - _2163;
                                float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                                float _2797 = dot(vec3(_371, _374, _377), vec3((-0.0) - _2161, (-0.0) - _2162, (-0.0) - _2163));
                                float _3697 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                                float _2800 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                                float _2801 = dot(vec3(_371, _374, _377), vec3(_2793 * _2787, _2793 * _2788, _2793 * _2789));
                                float _3708 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2804 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
                                float _2808 = ((_2804 * _2804) * (_2786 + (-1.0))) + 1.0;
                                float _2809 = _2746 * _2785;
                                float _2810 = _2809 * _2809;
                                float _2816 = ((1.0 - _2810) * dot(vec3(_371, _374, _377), vec3(_2733, _2734, _2735))) + _2810;
                                float _3719 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                                float _2817 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                                float _2818 = 1.0 - _2785;
                                float _2828 = (0.5 / (((_2817 * ((_2800 * _2818) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2818) + _2785) * _2800))) * _2817;
                                float _3730 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                                float _2838 = (_2763 * _2740) * (((_2786 * 3.1415927410125732421875) * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) / ((_2808 * _2808) * ((_2753 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2764 * _2607.z;
                                frontier_phi_65_pred_1 = _2764 * _2607.y;
                                frontier_phi_65_pred_2 = _2764 * _2607.x;
                                frontier_phi_65_pred_3 = _2838 * _2619.z;
                                frontier_phi_65_pred_4 = _2838 * _2619.y;
                                frontier_phi_65_pred_5 = _2838 * _2619.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2847 = frontier_phi_65_pred;
                            _2846 = frontier_phi_65_pred_1;
                            _2845 = frontier_phi_65_pred_2;
                            _2844 = frontier_phi_65_pred_3;
                            _2843 = frontier_phi_65_pred_4;
                            _2842 = frontier_phi_65_pred_5;
                            _2549 = _2845 + _2562;
                            _2550 = _2846 + _2563;
                            _2551 = _2847 + _2564;
                            _2546 = _2842 + _2559;
                            _2547 = _2843 + _2560;
                            _2548 = _2844 + _2561;
                            if (_2566 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2559 = _2546;
                                _2560 = _2547;
                                _2561 = _2548;
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2566;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2551;
                        frontier_phi_59_pred_1 = _2550;
                        frontier_phi_59_pred_2 = _2549;
                        frontier_phi_59_pred_3 = _2548;
                        frontier_phi_59_pred_4 = _2547;
                        frontier_phi_59_pred_5 = _2546;
                    }
                    _2146 = frontier_phi_59_pred;
                    _2144 = frontier_phi_59_pred_1;
                    _2142 = frontier_phi_59_pred_2;
                    _2140 = frontier_phi_59_pred_3;
                    _2138 = frontier_phi_59_pred_4;
                    _2136 = frontier_phi_59_pred_5;
                    uint _2332 = _2331 + 1u;
                    if (_2332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2325 = _2136;
                        _2326 = _2138;
                        _2327 = _2140;
                        _2328 = _2142;
                        _2329 = _2144;
                        _2330 = _2146;
                        _2331 = _2332;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2142;
                frontier_phi_41_42_ladder_1 = _2146;
                frontier_phi_41_42_ladder_2 = _2144;
                frontier_phi_41_42_ladder_3 = _2140;
                frontier_phi_41_42_ladder_4 = _2138;
                frontier_phi_41_42_ladder_5 = _2136;
            }
            else
            {
                frontier_phi_41_42_ladder = _1996;
                frontier_phi_41_42_ladder_1 = _2000;
                frontier_phi_41_42_ladder_2 = _1998;
                frontier_phi_41_42_ladder_3 = _1994;
                frontier_phi_41_42_ladder_4 = _1992;
                frontier_phi_41_42_ladder_5 = _1990;
            }
            _2135 = frontier_phi_41_42_ladder_5;
            _2137 = frontier_phi_41_42_ladder_4;
            _2139 = frontier_phi_41_42_ladder_3;
            _2141 = frontier_phi_41_42_ladder;
            _2143 = frontier_phi_41_42_ladder_2;
            _2145 = frontier_phi_41_42_ladder_1;
        }
        float _2150 = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
        _1913 = (_2150 * _2141) + _1628;
        _1915 = (_2150 * _2143) + _1629;
        _1917 = (_2150 * _2145) + _1630;
        _1919 = ((_2135 * _416) * _2150) + _1795;
        _1921 = ((_2137 * _418) * _2150) + _1796;
        _1923 = ((_2139 * _419) * _2150) + _1797;
    }
    else
    {
        _1913 = _1628;
        _1915 = _1629;
        _1917 = _1630;
        _1919 = _1795;
        _1921 = _1796;
        _1923 = _1797;
    }
    float _3746 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3757 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3768 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3779 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _1948 = cbInstanceData._m0[_390 + 6u].w * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)));
    float _1953 = _349 / cbSceneParam._m0[86u].x;
    float _1954 = _350 / cbSceneParam._m0[86u].y;
    vec4 _1968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1953, _1954, (log2((isnan(cbSceneParam._m0[77u].w) ? _283 : (isnan(_283) ? cbSceneParam._m0[77u].w : min(_283, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1970 = _1968.x;
    float _1971 = _1968.y;
    float _1972 = _1968.z;
    float _1973 = _1968.w;
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    if (_283 > cbSceneParam._m0[78u].w)
    {
        float _2015 = isnan(_283) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _283 : min(cbSceneParam._m0[80u].w, _283));
        float _2016 = _2015 / _283;
        float _2027 = _2016 * _334;
        float _2028 = _335 * _2016;
        float _2029 = (-0.0) - _2028;
        float _2031 = _2016 * _336;
        float _2033 = (cbSceneParam._m0[77u].w * _2029) / _2015;
        float _2034 = _2033 + cbSceneParam._m0[79u].w;
        float _2035 = cbSceneParam._m0[79u].w - _2028;
        float _2041 = sqrt(((_2027 * _2027) + (_2028 * _2028)) + (_2031 * _2031));
        float _2044 = (1.0 - (cbSceneParam._m0[77u].w / _2015)) * _2041;
        float _2050 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2052 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2261;
        if (abs((_2029 - _2033) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2261 = ((((_2034 > 0.0) ? exp2(_2050 * _2034) : (2.0 - exp2(_2052 * _2034))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2044;
        }
        else
        {
            float _2196 = 1.0 / cbSceneParam._m0[80u].x;
            float _2197 = isnan(_2035) ? _2034 : (isnan(_2034) ? _2035 : max(_2034, _2035));
            float _2198 = isnan(_2035) ? _2034 : (isnan(_2034) ? _2035 : min(_2034, _2035));
            float _2207 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : min(_2197, 0.0));
            float _2208 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : min(_2198, 0.0));
            _2261 = ((abs(_2041 / _2029) * cbSceneParam._m0[80u].y) * ((((_2207 - _2208) * 2.0) - ((exp2(_2050 * (isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0)))) - exp2(_2050 * (isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))))) * _2196)) - ((exp2(_2052 * _2207) - exp2(_2052 * _2208)) * _2196))) + (_2044 * cbSceneParam._m0[80u].z);
        }
        vec4 _2263 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1953, _1954, 1.0), 0.0);
        float _2272 = exp2((_2261 * (-1.44269502162933349609375)) * (1.0 - _2263.w));
        float _2273 = log2(_2272);
        float _2289 = log2(_1973);
        _2054 = (exp2(_2289 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2273 * cbSceneParam._m0[78u].x)) * _2263.x) / cbSceneParam._m0[78u].x)) + _1970;
        _2056 = (exp2(_2289 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2273 * cbSceneParam._m0[78u].y)) * _2263.y) / cbSceneParam._m0[78u].y)) + _1971;
        _2058 = (exp2(_2289 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2273 * cbSceneParam._m0[78u].z)) * _2263.z) / cbSceneParam._m0[78u].z)) + _1972;
        _2060 = _2272 * _1973;
    }
    else
    {
        _2054 = _1970;
        _2056 = _1971;
        _2058 = _1972;
        _2060 = _1973;
    }
    float _2072 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2073 = _2072 == 3.0;
    float _2074 = log2(_2060);
    float _2081 = exp2(_2074 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1913 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _431))) + ((_1919 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1241)) * cbPerFrame._m0[3u].x));
    float _2082 = exp2(_2074 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1915 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _431))) + ((_1921 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1241)) * cbPerFrame._m0[3u].x));
    float _2083 = exp2(_2074 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1917 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _431))) + ((_1923 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1241)) * cbPerFrame._m0[3u].x));
    float _2092 = (_2072 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2092 * (_2073 ? _2081 : (_2081 + (cbSceneParam._m0[72u].w * _2054)));
    SV_Target.y = _2092 * (_2073 ? _2082 : (_2082 + (cbSceneParam._m0[72u].w * _2056)));
    SV_Target.z = _2092 * (_2073 ? _2083 : (_2083 + (cbSceneParam._m0[72u].w * _2058)));
    SV_Target.w = _1948;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1948;
}


