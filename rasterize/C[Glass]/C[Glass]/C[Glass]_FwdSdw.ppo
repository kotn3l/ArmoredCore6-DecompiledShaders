#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _808;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(C_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = (_227.x * 2.0) + (-1.0);
    float _238 = (_227.y * 2.0) + (-1.0);
    float _239 = dot(vec2(_236, _238), vec2(_236, _238));
    float _3252 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _245 = sqrt(1.0 - (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))));
    float _247 = cbMtdParam._m0[10u].x + _227.z;
    float _250 = fma(_245, _192 * NORMAL.x, fma(_238, _199 * TANGENT.x, (_185 * _178) * _236));
    float _253 = fma(_245, _192 * NORMAL.y, fma(_238, _199 * TANGENT.y, (_185 * _179) * _236));
    float _256 = fma(_245, _192 * NORMAL.z, fma(_238, _199 * TANGENT.z, (_185 * _180) * _236));
    float _260 = inversesqrt(dot(vec3(_250, _253, _256), vec3(_250, _253, _256)));
    float _261 = _260 * _250;
    float _262 = _260 * _253;
    float _263 = _260 * _256;
    float _3263 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _264 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _265 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3296 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3307 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3318 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _269 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _285 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _326 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _336 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _326);
    float _337 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _326);
    float _338 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _326);
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _343 = _336 * _342;
    float _344 = _337 * _342;
    float _345 = _338 * _342;
    float _351 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _352 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _373 = fma(_263, cbSceneParam._m0[5u].z, fma(_262, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _261));
    float _376 = fma(_263, cbSceneParam._m0[6u].z, fma(_262, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _261));
    float _379 = fma(_263, cbSceneParam._m0[7u].z, fma(_262, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _261));
    uint _392 = uint(roundEven(NORMAL.w)) * 13u;
    uint _395 = (_392 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _401 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_395].x;
    float _402 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_395].y;
    float _403 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_395].z;
    float _3329 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _3351 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _407 = 1.0 - _269;
    float _408 = _404 * _407;
    float _409 = _405 * _407;
    float _410 = _406 * _407;
    float _415 = (_404 + (-0.039999999105930328369140625)) * _269;
    float _416 = (_405 + (-0.039999999105930328369140625)) * _269;
    float _417 = (_406 + (-0.039999999105930328369140625)) * _269;
    float _418 = _415 + 0.039999999105930328369140625;
    float _420 = _416 + 0.039999999105930328369140625;
    float _421 = _417 + 0.039999999105930328369140625;
    vec4 _430 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _351, cbSceneParam._m0[86u].y * _352));
    float _433 = _430.x * TEXCOORD.z;
    float _434 = dot(vec3(_261, _262, _263), vec3(_343, _344, _345));
    float _437 = _434 * 2.0;
    float _441 = (_437 * _261) - _343;
    float _442 = (_437 * _262) - _344;
    float _443 = (_437 * _263) - _345;
    float _447 = abs(dot(vec3(_343, _344, _345), vec3(_261, _262, _263)));
    float _3362 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _449 = sqrt(_265);
    float _462 = exp2((_449 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_449 * 3.0));
    float _468 = (1.0 - _462) * ((_449 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _469 = _462 * _449;
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _807;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _532 = fma(_505, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497));
        float _536 = fma(_505, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497));
        float _540 = fma(_505, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497));
        float _565 = _497 + _261;
        float _566 = _501 + _262;
        float _567 = _505 + _263;
        float _577 = fma(_567, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565)) - _532;
        float _578 = fma(_567, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565)) - _536;
        float _579 = fma(_567, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565)) - _540;
        float _583 = inversesqrt(dot(vec3(_577, _578, _579), vec3(_577, _578, _579)));
        float _596 = ((_583 * _577) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_532 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_583 * _578) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_536 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_583 * _579) / cbModelParam._m0[34u].z) + ((((((_540 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        float _635 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_601.x + (-0.5));
        float _637 = _635 * (_601.y + (-0.5));
        float _638 = _635 * (_601.z + (-0.5));
        float _645 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_608.x + (-0.5));
        float _647 = _645 * (_608.y + (-0.5));
        float _648 = _645 * (_608.z + (-0.5));
        float _655 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_615.x + (-0.5));
        float _657 = _655 * (_615.y + (-0.5));
        float _658 = _655 * (_615.z + (-0.5));
        float _665 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_622.x + (-0.5));
        float _667 = _665 * (_622.y + (-0.5));
        float _668 = _665 * (_622.z + (-0.5));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = _636 * 0.5;
        float _673 = _646 * 0.5;
        float _674 = _656 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _689 = (dot(vec3(_261, _262, _263), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _699 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3410 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_701 + 1.0))) + _706) * _669;
        float _716 = _637 * 0.5;
        float _717 = _647 * 0.5;
        float _718 = _657 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _732 = (dot(vec3(_261, _262, _263), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _741 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3443 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_743 + 1.0))) + _748) * _670;
        float _758 = _638 * 0.5;
        float _759 = _648 * 0.5;
        float _760 = _658 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_261, _262, _263), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3476 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_785 + 1.0))) + _790) * _671;
        _807 = _638;
        _809 = _637;
        _810 = _636;
        _811 = _648;
        _812 = _647;
        _813 = _646;
        _814 = _658;
        _815 = _657;
        _816 = _656;
        _817 = _671;
        _818 = _670;
        _819 = _669;
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
    }
    else
    {
        _807 = _808;
        _809 = _808;
        _810 = _808;
        _811 = _808;
        _812 = _808;
        _813 = _808;
        _814 = _808;
        _815 = _808;
        _816 = _808;
        _817 = _808;
        _818 = _808;
        _819 = _808;
        _820 = 0.0;
        _821 = 0.0;
        _822 = 0.0;
    }
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _848 = fma(_505, cbModelParam._m0[30u].z, fma(_501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _497));
        float _852 = fma(_505, cbModelParam._m0[31u].z, fma(_501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _497));
        float _856 = fma(_505, cbModelParam._m0[32u].z, fma(_501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _497));
        float _879 = _497 + _261;
        float _880 = _501 + _262;
        float _881 = _505 + _263;
        float _891 = fma(_881, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879)) - _848;
        float _892 = fma(_881, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879)) - _852;
        float _893 = fma(_881, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879)) - _856;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_848 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_852 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[35u].z) + ((((((_856 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _947 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_914.x + (-0.5));
        float _949 = _947 * (_914.y + (-0.5));
        float _950 = _947 * (_914.z + (-0.5));
        float _957 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_921.x + (-0.5));
        float _959 = _957 * (_921.y + (-0.5));
        float _960 = _957 * (_921.z + (-0.5));
        float _967 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_928.x + (-0.5));
        float _969 = _967 * (_928.y + (-0.5));
        float _970 = _967 * (_928.z + (-0.5));
        float _977 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_935.x + (-0.5));
        float _979 = _977 * (_935.y + (-0.5));
        float _980 = _977 * (_935.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_261, _262, _263), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3539 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_1011 + 1.0))) + _1016) * _981;
        float _1026 = _949 * 0.5;
        float _1027 = _959 * 0.5;
        float _1028 = _969 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_261, _262, _263), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3572 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1053 + 1.0))) + _1058) * _982;
        float _1068 = _950 * 0.5;
        float _1069 = _960 * 0.5;
        float _1070 = _970 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_261, _262, _263), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3605 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1095 + 1.0))) + _1100) * _983;
        _1117 = _950;
        _1118 = _949;
        _1119 = _948;
        _1120 = _960;
        _1121 = _959;
        _1122 = _958;
        _1123 = _970;
        _1124 = _969;
        _1125 = _968;
        _1126 = _983;
        _1127 = _982;
        _1128 = _981;
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _808;
        _1118 = _808;
        _1119 = _808;
        _1120 = _808;
        _1121 = _808;
        _1122 = _808;
        _1123 = _808;
        _1124 = _808;
        _1125 = _808;
        _1126 = _808;
        _1127 = _808;
        _1128 = _808;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _820)) + _820;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1164 = fma(_1143, cbSceneParam._m0[89u].z, fma(_1142, cbSceneParam._m0[89u].y, _1141 * cbSceneParam._m0[89u].x));
    float _1167 = fma(_1143, cbSceneParam._m0[90u].z, fma(_1142, cbSceneParam._m0[90u].y, _1141 * cbSceneParam._m0[90u].x));
    float _1170 = fma(_1143, cbSceneParam._m0[91u].z, fma(_1142, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1141));
    float _1185 = _441 * 0.5;
    float _1186 = _442 * 0.5;
    float _1187 = _443 * 0.5;
    float _1188 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1191 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1194 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1228;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1201 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_807, _811, _814, _817));
        float _1205 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_809, _812, _815, _818));
        float _1209 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_810, _813, _816, _819));
        float _1216 = dot(vec4(cbModelParam._m0[39u]), vec4(_1185, _1186, _1187, 1.0));
        _1228 = dot(vec3(isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1216) ? 0.0 : (isnan(0.0) ? _1216 : max(0.0, _1216))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1228 = 1.0;
    }
    float _1239;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1230 = dot(vec4(cbModelParam._m0[40u]), vec4(_1185, _1186, _1187, 1.0));
        _1239 = dot(vec3(isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1230) ? 0.0 : (isnan(0.0) ? _1230 : max(0.0, _1230))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1239 = 1.0;
    }
    float _1243 = (_1239 * cbModelParam._m0[1u].x) + (_1228 * (1.0 - cbModelParam._m0[1u].x));
    float _1253 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _265);
    float _1254 = isnan(_1253) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1253 : min(cbModelParam._m0[25u].z, _1253));
    float _1336;
    float _1338;
    float _1340;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1303 = fma(_505, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497)) + cbModelParam._m0[13u].w;
        float _1307 = fma(_505, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497)) + cbModelParam._m0[14u].w;
        float _1311 = fma(_505, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497)) + cbModelParam._m0[15u].w;
        float _1314 = fma(_443, cbModelParam._m0[13u].z, fma(_442, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441));
        float _1317 = fma(_443, cbModelParam._m0[14u].z, fma(_442, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441));
        float _1320 = fma(_443, cbModelParam._m0[15u].z, fma(_442, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441));
        float _1348;
        if (_1314 > 0.0)
        {
            _1348 = abs((1.0 - _1303) / _1314);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1303 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1348 = frontier_phi_14_12_ladder;
        }
        float _1524;
        if (_1317 > 0.0)
        {
            _1524 = abs((1.0 - _1307) / _1317);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1307 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1524 = frontier_phi_23_19_ladder;
        }
        float _2029;
        if (_1320 > 0.0)
        {
            _2029 = abs((1.0 - _1311) / _1320);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1311 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2029 = frontier_phi_35_30_ladder;
        }
        float _2031 = isnan(_1524) ? _1348 : (isnan(_1348) ? _1524 : min(_1348, _1524));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1314) + _1303;
        float _2037 = (_2032 * _1317) + _1307;
        float _2038 = (_2032 * _1320) + _1311;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1254);
            frontier_phi_13_35_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1336 = frontier_phi_13_35_ladder_2;
        _1338 = frontier_phi_13_35_ladder_1;
        _1340 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_441, _442, _443), _1254);
        _1336 = _1324.x * cbModelParam._m0[1u].y;
        _1338 = _1324.y * cbModelParam._m0[1u].y;
        _1340 = _1324.z * cbModelParam._m0[1u].y;
    }
    float _1344 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _265);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1344 : min(cbModelParam._m0[25u].w, _1344));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1402 = fma(_505, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497)) + cbModelParam._m0[21u].w;
        float _1406 = fma(_505, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497)) + cbModelParam._m0[22u].w;
        float _1410 = fma(_505, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497)) + cbModelParam._m0[23u].w;
        float _1413 = fma(_443, cbModelParam._m0[21u].z, fma(_442, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441));
        float _1416 = fma(_443, cbModelParam._m0[22u].z, fma(_442, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441));
        float _1419 = fma(_443, cbModelParam._m0[23u].z, fma(_442, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441));
        float _1529;
        if (_1413 > 0.0)
        {
            _1529 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1529 = frontier_phi_25_21_ladder;
        }
        float _2056;
        if (_1416 > 0.0)
        {
            _2056 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2056 = frontier_phi_37_32_ladder;
        }
        float _2436;
        if (_1419 > 0.0)
        {
            _2436 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2436 = frontier_phi_49_44_ladder;
        }
        float _2438 = isnan(_2056) ? _1529 : (isnan(_1529) ? _2056 : min(_1529, _2056));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1413) + _1402;
        float _2444 = (_2439 * _1416) + _1406;
        float _2445 = (_2439 * _1419) + _1410;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1345);
            frontier_phi_22_49_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1438 = frontier_phi_22_49_ladder_2;
        _1440 = frontier_phi_22_49_ladder_1;
        _1442 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_441, _442, _443), _1345);
        _1438 = _1422.x * cbModelParam._m0[1u].z;
        _1440 = _1422.y * cbModelParam._m0[1u].z;
        _1442 = _1422.z * cbModelParam._m0[1u].z;
    }
    float _1455 = (((_468 * _418) + _469) * _433) * ((cbModelParam._m0[1u].w * (_1438 - _1336)) + _1336);
    float _1457 = (((_468 * _420) + _469) * _433) * ((cbModelParam._m0[1u].w * (_1440 - _1338)) + _1338);
    float _1459 = (((_468 * _421) + _469) * _433) * ((cbModelParam._m0[1u].w * (_1442 - _1340)) + _1340);
    float _1462 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1457, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1465 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1457, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1468 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1457, cbSceneParam._m0[91u].y, _1455 * cbSceneParam._m0[91u].x));
    float _1503 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1507 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1511 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1515 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1516 = _1503 / _1515;
    float _1517 = _1507 / _1515;
    float _1518 = _1511 / _1515;
    float _1665;
    float _1666;
    float _1667;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1545 = ((uint(_1518 > cbSceneParam._m0[59u].y) + uint(_1518 > cbSceneParam._m0[59u].x)) + uint(_1518 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1546 = _1545 + 43u;
        uint _1554 = _1545 + 44u;
        uint _1562 = _1545 + 45u;
        uint _1570 = _1545 + 46u;
        float _1581 = fma(_1515, cbSceneParam._m0[_1546].w, fma(_1511, cbSceneParam._m0[_1546].z, fma(_1507, cbSceneParam._m0[_1546].y, _1503 * cbSceneParam._m0[_1546].x)));
        float _1585 = fma(_1515, cbSceneParam._m0[_1554].w, fma(_1511, cbSceneParam._m0[_1554].z, fma(_1507, cbSceneParam._m0[_1554].y, _1503 * cbSceneParam._m0[_1554].x)));
        float _1593 = fma(_1515, cbSceneParam._m0[_1570].w, fma(_1511, cbSceneParam._m0[_1570].z, fma(_1507, cbSceneParam._m0[_1570].y, _1503 * cbSceneParam._m0[_1570].x)));
        float _1598 = cbSceneParam._m0[33u].z * _1593;
        float _1600 = cbSceneParam._m0[33u].w * _1593;
        float _1603 = fma(_1515, cbSceneParam._m0[_1562].w, fma(_1511, cbSceneParam._m0[_1562].z, fma(_1507, cbSceneParam._m0[_1562].y, _1503 * cbSceneParam._m0[_1562].x))) / _1593;
        float _1651 = (cbSceneParam._m0[33u].x - sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518))) * cbSceneParam._m0[33u].y;
        float _3731 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1658 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1598 + _1581) / _1593, (_1600 + _1585) / _1593), _1603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1600 + _1581) / _1593, (_1585 - _1598) / _1593), _1603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1581 - _1598) / _1593, (_1585 - _1600) / _1593), _1603), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1581 - _1600) / _1593, (_1598 + _1585) / _1593), _1603), 0.0)).x), vec4(0.25)));
        _1665 = 1.0 - (_1658 * cbSceneParam._m0[34u].x);
        _1666 = 1.0 - (_1658 * cbSceneParam._m0[34u].y);
        _1667 = 1.0 - (_1658 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1665 = 1.0;
        _1666 = 1.0;
        _1667 = 1.0;
    }
    float _1731;
    float _1733;
    float _1735;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1719 = fma(_1515, cbSceneParam._m0[63u].w, fma(_1511, cbSceneParam._m0[63u].z, fma(_1507, cbSceneParam._m0[63u].y, _1503 * cbSceneParam._m0[63u].x)));
        float _1720 = fma(_1515, cbSceneParam._m0[60u].w, fma(_1511, cbSceneParam._m0[60u].z, fma(_1507, cbSceneParam._m0[60u].y, _1503 * cbSceneParam._m0[60u].x))) / _1719;
        float _1721 = fma(_1515, cbSceneParam._m0[61u].w, fma(_1511, cbSceneParam._m0[61u].z, fma(_1507, cbSceneParam._m0[61u].y, _1503 * cbSceneParam._m0[61u].x))) / _1719;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1720 >= cbSceneParam._m0[64u].x) && (_1721 >= cbSceneParam._m0[64u].y)) && (_1720 <= cbSceneParam._m0[64u].z)) && (_1721 <= cbSceneParam._m0[64u].w))
        {
            float _2069 = fma(_1515, cbSceneParam._m0[62u].w, fma(_1511, cbSceneParam._m0[62u].z, fma(_1507, cbSceneParam._m0[62u].y, _1503 * cbSceneParam._m0[62u].x))) / _1719;
            float _2073 = isnan(cbSceneParam._m0[41u].w) ? _2069 : (isnan(_2069) ? cbSceneParam._m0[41u].w : max(_2069, cbSceneParam._m0[41u].w));
            float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518))) * cbSceneParam._m0[33u].y;
            float _3747 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
            float _2123 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1720, cbSceneParam._m0[33u].w + _1721), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1720, _1721 - cbSceneParam._m0[33u].z), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1720 - cbSceneParam._m0[33u].z, _1721 - cbSceneParam._m0[33u].w), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1720 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1721), _2073), 0.0)).x), vec4(0.25)));
            float _2127 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
            float _2128 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
            float _2129 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2129) ? _1667 : (isnan(_1667) ? _2129 : min(_1667, _2129));
            frontier_phi_34_33_ladder_1 = isnan(_2128) ? _1666 : (isnan(_1666) ? _2128 : min(_1666, _2128));
            frontier_phi_34_33_ladder_2 = isnan(_2127) ? _1665 : (isnan(_1665) ? _2127 : min(_1665, _2127));
        }
        else
        {
            frontier_phi_34_33_ladder = _1667;
            frontier_phi_34_33_ladder_1 = _1666;
            frontier_phi_34_33_ladder_2 = _1665;
        }
        _1731 = frontier_phi_34_33_ladder_2;
        _1733 = frontier_phi_34_33_ladder_1;
        _1735 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1731 = _1665;
        _1733 = _1666;
        _1735 = _1667;
    }
    float _1775 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _497), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _505))).x));
    float _3773 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1780 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _497), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _505))).x));
    float _3784 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1782 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)));
    float _1783 = _1782 * _1731;
    float _1784 = _1782 * _1733;
    float _1785 = _1782 * _1735;
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_392 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1797 = _433 + (-1.0);
    float _1800 = (cbLight._m0[_1792].x * _1797) + 1.0;
    float _1801 = (cbLight._m0[_1792].y * _1797) + 1.0;
    uint _1802 = _1791 + 5u;
    float _1808 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1812 = _1791 + 4u;
    float _1822 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1826 = _1791 | 1u;
    float _1837 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_261, _262, _263));
    float _1840 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_261, _262, _263));
    float _3805 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _3816 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1845 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1847 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1854 = ((cbLight._m0[_1802].x * _1808) * _1847) + (((cbLight._m0[_1812].x * _1783) * _1822) * _1845);
    float _1855 = ((_1808 * cbLight._m0[_1802].y) * _1847) + (((cbLight._m0[_1812].y * _1784) * _1822) * _1845);
    float _1856 = ((_1808 * cbLight._m0[_1802].z) * _1847) + (((cbLight._m0[_1812].z * _1785) * _1822) * _1845);
    uint _1858 = _1791 + 8u;
    float _1871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _265) * 0.949999988079071044921875);
    float _1872 = _1871 * _1871;
    float _1873 = cbLight._m0[_1791].x + _343;
    float _1874 = cbLight._m0[_1791].y + _344;
    float _1875 = cbLight._m0[_1791].z + _345;
    float _1879 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
    float _1880 = _1879 * _1873;
    float _1881 = _1879 * _1874;
    float _1882 = _1879 * _1875;
    float _1883 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1791].xyz));
    float _3827 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _1887 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1888 = dot(vec3(_261, _262, _263), vec3(_1880, _1881, _1882));
    float _3849 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1880, _1881, _1882));
    float _3860 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1872 * _1872;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1908 = exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0);
    float _1909 = 0.959999978542327880859375 - _415;
    float _1911 = 0.959999978542327880859375 - _416;
    float _1912 = 0.959999978542327880859375 - _417;
    float _1919 = 1.0 - _1872;
    float _1930 = (0.5 / (((_1887 * ((_1886 * _1919) + _1872)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1919) + _1872) * _1886))) * _1886;
    float _3871 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    uint _1946 = _1791 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _265) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1826].x + _343;
    float _1960 = cbLight._m0[_1826].y + _344;
    float _1961 = cbLight._m0[_1826].z + _345;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1826].xyz));
    float _3882 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1973 = dot(vec3(_261, _262, _263), vec3(_1966, _1967, _1968));
    float _3893 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_1966, _1967, _1968));
    float _3904 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1992 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
    float _1999 = 1.0 - _1958;
    float _2009 = (0.5 / (((_1887 * ((_1972 * _1999) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1999) + _1958) * _1972))) * _1972;
    float _3915 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2021 = (((((_1992 * _1909) + _418) * cbLight._m0[_1946].x) * _2011) * _1808) + ((((cbLight._m0[_1858].x * _1783) * ((_1908 * _1909) + _418)) * _1932) * _1822);
    float _2022 = (((((_1992 * _1911) + _420) * cbLight._m0[_1946].y) * _2011) * _1808) + ((((cbLight._m0[_1858].y * _1784) * ((_1908 * _1911) + _420)) * _1932) * _1822);
    float _2023 = (((((_1992 * _1912) + _421) * cbLight._m0[_1946].z) * _2011) * _1808) + ((((cbLight._m0[_1858].z * _1785) * ((_1908 * _1912) + _421)) * _1932) * _1822);
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_1789.y == 0u)
    {
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2169;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2169;
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2169;
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.x;
        uint _2196 = uint((float(_2184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _352) / _2185))) + floor(float(uint(cbSceneParam._m0[85u].x * _351) / _2185)));
        float _2206 = (log2(_2172 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2207 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        uint _2210 = uint(isnan(14.0) ? _2207 : (isnan(_2207) ? 14.0 : min(_2207, 14.0)));
        uvec4 _2215 = texelFetch(g_lightClusterGridBuffer, int(((_2210 << 2u) + (_2196 << 6u)) >> 2u));
        uint _2216 = _2215.x;
        uint _2217 = _2184.z;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        if (((((1u << ((_2217 >> 4u) & 15u)) + 4294967295u) & _2216) == 0u) || ((_2217 & 240u) == 0u))
        {
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
        }
        else
        {
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            uint _2500 = 0u;
            uint _2509;
            bool _2510;
            for (;;)
            {
                _2509 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2500 << 2u)) >> 2u)).x;
                _2510 = _2509 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2510)
                {
                    frontier_phi_58_pred = _2497;
                    frontier_phi_58_pred_1 = _2496;
                    frontier_phi_58_pred_2 = _2495;
                    frontier_phi_58_pred_3 = _2494;
                    frontier_phi_58_pred_4 = _2498;
                    frontier_phi_58_pred_5 = _2499;
                }
                else
                {
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    uint _2645;
                    _2639 = _2494;
                    _2640 = _2495;
                    _2641 = _2496;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2509;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    for (;;)
                    {
                        uint _2649 = uint(findLSB(_2645)) + (_2500 << 5u);
                        uint _2646 = (_2645 + 4294967295u) & _2645;
                        uint _2651 = _2649 * 48u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2671 = (_2649 * 48u) + 4u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2690 = (_2649 * 48u) + 8u;
                        vec3 _2701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x));
                        float _2705 = _2665.x - _2170;
                        float _2706 = _2665.y - _2171;
                        float _2707 = _2665.z - _2172;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2715 = dot(vec3(_373, _376, _379), vec3(_2712, _2713, _2714));
                        float _2720 = 1.0 - (_2708 * _2665.w);
                        float _3936 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                        float _2722 = sqrt(_2708) * _2684.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2715) + _2726;
                        float _2732 = _2722 * _2722;
                        float _2736 = ((isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))) * _2721) / ((_2732 * 0.699999988079071044921875) + 1.0);
                        float _2740 = (-0.0) - _2170;
                        float _2741 = (-0.0) - _2171;
                        float _2742 = (-0.0) - _2172;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2756 = exp2(log2(1.0 / ((_2732 * 3.5) + 5.0)) * 0.25);
                        float _2757 = 1.0 - _449;
                        float _2764 = sqrt(1.0 - ((1.0 - (_2757 * _2757)) * (1.0 - (_2756 * _2756))));
                        float _2765 = _2764 * _2764;
                        float _2766 = _2765 * _2765;
                        float _2767 = _2747 + _2712;
                        float _2768 = _2748 + _2713;
                        float _2769 = _2749 + _2714;
                        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
                        float _2777 = dot(vec3(_373, _376, _379), vec3(_2747, _2748, _2749));
                        float _3952 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                        float _2781 = dot(vec3(_373, _376, _379), vec3(_2773 * _2767, _2773 * _2768, _2773 * _2769));
                        float _3963 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2788 = ((_2784 * _2784) * (_2766 + (-1.0))) + 1.0;
                        float _2789 = _2725 * _2765;
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * _2715) + _2790;
                        float _3974 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2795 = 1.0 - _2765;
                        float _2805 = (0.5 / (((_2794 * ((_2780 * _2795) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _2795) + _2765) * _2780))) * _2794;
                        float _3985 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2816 = (((_2766 * 3.1415927410125732421875) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) / ((_2788 * _2788) * ((_2732 * 2.1991131305694580078125) + 3.141590118408203125))) * _2721;
                        _2574 = (_2736 * _2684.x) + _2642;
                        _2575 = (_2736 * _2684.y) + _2643;
                        _2576 = (_2736 * _2684.z) + _2644;
                        _2571 = (_2816 * _2701.x) + _2639;
                        _2572 = (_2816 * _2701.y) + _2640;
                        _2573 = (_2816 * _2701.z) + _2641;
                        if (_2646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2646;
                        }
                    }
                    frontier_phi_58_pred = _2574;
                    frontier_phi_58_pred_1 = _2573;
                    frontier_phi_58_pred_2 = _2572;
                    frontier_phi_58_pred_3 = _2571;
                    frontier_phi_58_pred_4 = _2575;
                    frontier_phi_58_pred_5 = _2576;
                }
                _2330 = frontier_phi_58_pred;
                _2328 = frontier_phi_58_pred_1;
                _2326 = frontier_phi_58_pred_2;
                _2324 = frontier_phi_58_pred_3;
                _2332 = frontier_phi_58_pred_4;
                _2334 = frontier_phi_58_pred_5;
                uint _2501 = _2500 + 1u;
                if (_2501 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2494 = _2324;
                    _2495 = _2326;
                    _2496 = _2328;
                    _2497 = _2330;
                    _2498 = _2332;
                    _2499 = _2334;
                    _2500 = _2501;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
        }
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.z;
        uint _2340 = (_2338 >> 8u) & 15u;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((4294967295u << _2340) & _2216) == 0u)
        {
            _2462 = _2323;
            _2464 = _2325;
            _2466 = _2327;
            _2468 = _2329;
            _2470 = _2331;
            _2472 = _2333;
        }
        else
        {
            float _2487 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
            float _2488 = _2487 * _2170;
            float _2489 = _2487 * _2171;
            float _2490 = _2487 * _2172;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2340 < ((_2338 >> 12u) & 15u))
            {
                float _2463;
                float _2465;
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2622 = _2323;
                float _2623 = _2325;
                float _2624 = _2327;
                float _2625 = _2329;
                float _2626 = _2331;
                float _2627 = _2333;
                uint _2628 = _2340;
                uint _2637;
                bool _2638;
                for (;;)
                {
                    _2637 = texelFetch(g_lightClassification, int((((_2210 << 5u) + (_2196 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                    _2638 = _2637 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2638)
                    {
                        frontier_phi_64_pred = _2625;
                        frontier_phi_64_pred_1 = _2624;
                        frontier_phi_64_pred_2 = _2623;
                        frontier_phi_64_pred_3 = _2622;
                        frontier_phi_64_pred_4 = _2627;
                        frontier_phi_64_pred_5 = _2626;
                    }
                    else
                    {
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _2834 = _2622;
                        float _2835 = _2623;
                        float _2836 = _2624;
                        float _2837 = _2625;
                        float _2838 = _2626;
                        float _2839 = _2627;
                        uint _2840 = _2637;
                        uint _2841;
                        vec4 _2866;
                        float _2867;
                        vec4 _2882;
                        vec3 _2894;
                        vec4 _2910;
                        vec4 _2926;
                        float _2973;
                        bool _2974;
                        for (;;)
                        {
                            uint _2851 = ((_2628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2840));
                            _2841 = (_2840 + 4294967295u) & _2840;
                            uint _2853 = _2851 * 40u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            _2867 = _2866.w;
                            uint _2869 = (_2851 * 40u) + 4u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2884 = (_2851 * 40u) + 8u;
                            _2894 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x));
                            uint _2897 = (_2851 * 40u) + 16u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2913 = (_2851 * 40u) + 20u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2851 * 40u) + 24u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2948 = (_2851 * 40u) + 28u;
                            vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2973 = fma(_2172, _2961.z, fma(_2171, _2961.y, _2961.x * _2170)) + _2961.w;
                            _2974 = !((fma(_2172, _2942.z, fma(_2171, _2942.y, _2942.x * _2170)) + _2942.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_2974)
                            {
                                float _3001 = _2866.x - _2170;
                                float _3002 = _2866.y - _2171;
                                float _3003 = _2866.z - _2172;
                                float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                                float _3007 = inversesqrt(_3004);
                                float _3008 = _3007 * _3001;
                                float _3009 = _3007 * _3002;
                                float _3010 = _3007 * _3003;
                                float _3014 = 1.0 - (_3004 / (_2867 * _2867));
                                float _3996 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                                float _3019 = sqrt(_3004) * _2882.w;
                                float _3021 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                                float _3022 = _3021 * _3021;
                                float _3025 = ((1.0 - _3022) * dot(vec3(_3008, _3009, _3010), vec3(_373, _376, _379))) + _3022;
                                float _3028 = _3019 * _3019;
                                float _3032 = (fma(_2172, _2910.z, fma(_2171, _2910.y, _2910.x * _2170)) + _2910.w) / _2973;
                                float _3033 = (fma(_2172, _2926.z, fma(_2171, _2926.y, _2926.x * _2170)) + _2926.w) / _2973;
                                float _3037 = 1.0 - dot(vec2(_3032, _3033), vec2(_3032, _3033));
                                float _4012 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                                float _3039 = _3038 * (((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3015) / ((_3028 * 0.699999988079071044921875) + 1.0));
                                float _3051 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                                float _3052 = 1.0 - _449;
                                float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                                float _3060 = _3059 * _3059;
                                float _3061 = _3060 * _3060;
                                float _3062 = _3008 - _2488;
                                float _3063 = _3009 - _2489;
                                float _3064 = _3010 - _2490;
                                float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                                float _3072 = dot(vec3(_373, _376, _379), vec3((-0.0) - _2488, (-0.0) - _2489, (-0.0) - _2490));
                                float _4023 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3075 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _3076 = dot(vec3(_373, _376, _379), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                                float _4034 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                                float _3084 = _3021 * _3060;
                                float _3085 = _3084 * _3084;
                                float _3091 = ((1.0 - _3085) * dot(vec3(_373, _376, _379), vec3(_3008, _3009, _3010))) + _3085;
                                float _4045 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3093 = 1.0 - _3060;
                                float _3103 = (0.5 / (((_3092 * ((_3075 * _3093) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3060) * _3075))) * _3092;
                                float _4056 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3113 = (_3038 * _3015) * (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) / ((_3083 * _3083) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3039 * _2882.x;
                                frontier_phi_70_pred_1 = _3113 * _2894.z;
                                frontier_phi_70_pred_2 = _3113 * _2894.y;
                                frontier_phi_70_pred_3 = _3113 * _2894.x;
                                frontier_phi_70_pred_4 = _3039 * _2882.z;
                                frontier_phi_70_pred_5 = _3039 * _2882.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_70_pred;
                            _3119 = frontier_phi_70_pred_1;
                            _3118 = frontier_phi_70_pred_2;
                            _3117 = frontier_phi_70_pred_3;
                            _3122 = frontier_phi_70_pred_4;
                            _3121 = frontier_phi_70_pred_5;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            if (_2841 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2841;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _2824;
                        frontier_phi_64_pred_1 = _2823;
                        frontier_phi_64_pred_2 = _2822;
                        frontier_phi_64_pred_3 = _2821;
                        frontier_phi_64_pred_4 = _2826;
                        frontier_phi_64_pred_5 = _2825;
                    }
                    _2469 = frontier_phi_64_pred;
                    _2467 = frontier_phi_64_pred_1;
                    _2465 = frontier_phi_64_pred_2;
                    _2463 = frontier_phi_64_pred_3;
                    _2473 = frontier_phi_64_pred_4;
                    _2471 = frontier_phi_64_pred_5;
                    uint _2629 = _2628 + 1u;
                    if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2622 = _2463;
                        _2623 = _2465;
                        _2624 = _2467;
                        _2625 = _2469;
                        _2626 = _2471;
                        _2627 = _2473;
                        _2628 = _2629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2473;
                frontier_phi_51_52_ladder_1 = _2471;
                frontier_phi_51_52_ladder_2 = _2467;
                frontier_phi_51_52_ladder_3 = _2465;
                frontier_phi_51_52_ladder_4 = _2469;
                frontier_phi_51_52_ladder_5 = _2463;
            }
            else
            {
                frontier_phi_51_52_ladder = _2333;
                frontier_phi_51_52_ladder_1 = _2331;
                frontier_phi_51_52_ladder_2 = _2327;
                frontier_phi_51_52_ladder_3 = _2325;
                frontier_phi_51_52_ladder_4 = _2329;
                frontier_phi_51_52_ladder_5 = _2323;
            }
            _2462 = frontier_phi_51_52_ladder_5;
            _2464 = frontier_phi_51_52_ladder_3;
            _2466 = frontier_phi_51_52_ladder_2;
            _2468 = frontier_phi_51_52_ladder_4;
            _2470 = frontier_phi_51_52_ladder_1;
            _2472 = frontier_phi_51_52_ladder;
        }
        float _2477 = isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0));
        _2229 = (_2477 * _2468) + _1854;
        _2231 = (_2477 * _2470) + _1855;
        _2233 = (_2477 * _2472) + _1856;
        _2235 = ((_2462 * _418) * _2477) + _2021;
        _2237 = ((_2464 * _420) * _2477) + _2022;
        _2239 = ((_2466 * _421) * _2477) + _2023;
    }
    else
    {
        _2229 = _1854;
        _2231 = _1855;
        _2233 = _1856;
        _2235 = _2021;
        _2237 = _2022;
        _2239 = _2023;
    }
    float _4072 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _4083 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _4094 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _4105 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _2264 = cbInstanceData._m0[_392 + 6u].w * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)));
    float _2269 = _351 / cbSceneParam._m0[86u].x;
    float _2270 = _352 / cbSceneParam._m0[86u].y;
    vec4 _2284 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, (log2((isnan(cbSceneParam._m0[77u].w) ? _285 : (isnan(_285) ? cbSceneParam._m0[77u].w : min(_285, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2286 = _2284.x;
    float _2287 = _2284.y;
    float _2288 = _2284.z;
    float _2289 = _2284.w;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    if (_285 > cbSceneParam._m0[78u].w)
    {
        float _2348 = isnan(_285) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _285 : min(cbSceneParam._m0[80u].w, _285));
        float _2349 = _2348 / _285;
        float _2360 = _2349 * _336;
        float _2361 = _337 * _2349;
        float _2362 = (-0.0) - _2361;
        float _2364 = _2349 * _338;
        float _2366 = (cbSceneParam._m0[77u].w * _2362) / _2348;
        float _2367 = _2366 + cbSceneParam._m0[79u].w;
        float _2368 = cbSceneParam._m0[79u].w - _2361;
        float _2374 = sqrt(((_2360 * _2360) + (_2361 * _2361)) + (_2364 * _2364));
        float _2377 = (1.0 - (cbSceneParam._m0[77u].w / _2348)) * _2374;
        float _2382 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2384 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2584;
        if (abs((_2362 - _2366) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2584 = ((((_2367 > 0.0) ? exp2(_2382 * _2367) : (2.0 - exp2(_2384 * _2367))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2377;
        }
        else
        {
            float _2523 = 1.0 / cbSceneParam._m0[80u].x;
            float _2524 = isnan(_2368) ? _2367 : (isnan(_2367) ? _2368 : max(_2367, _2368));
            float _2525 = isnan(_2368) ? _2367 : (isnan(_2367) ? _2368 : min(_2367, _2368));
            float _2534 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : min(_2524, 0.0));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            _2584 = ((abs(_2374 / _2362) * cbSceneParam._m0[80u].y) * ((((_2534 - _2535) * 2.0) - ((exp2(_2382 * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0)))) - exp2(_2382 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0))))) * _2523)) - ((exp2(_2384 * _2534) - exp2(_2384 * _2535)) * _2523))) + (_2377 * cbSceneParam._m0[80u].z);
        }
        vec4 _2586 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, 1.0), 0.0);
        float _2595 = exp2((_2584 * (-1.44269502162933349609375)) * (1.0 - _2586.w));
        float _2596 = log2(_2595);
        float _2612 = log2(_2289);
        _2386 = (exp2(_2612 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].x)) * _2586.x) / cbSceneParam._m0[78u].x)) + _2286;
        _2388 = (exp2(_2612 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].y)) * _2586.y) / cbSceneParam._m0[78u].y)) + _2287;
        _2390 = (exp2(_2612 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2596 * cbSceneParam._m0[78u].z)) * _2586.z) / cbSceneParam._m0[78u].z)) + _2288;
        _2392 = _2595 * _2289;
    }
    else
    {
        _2386 = _2286;
        _2388 = _2287;
        _2390 = _2288;
        _2392 = _2289;
    }
    float _2404 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2405 = _2404 == 3.0;
    float _2406 = log2(_2392);
    float _2413 = exp2(_2406 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2229 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _433))) + ((_2235 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1243)) * cbPerFrame._m0[3u].x));
    float _2414 = exp2(_2406 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2231 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _433))) + ((_2237 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1243)) * cbPerFrame._m0[3u].x));
    float _2415 = exp2(_2406 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2233 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _433))) + ((_2239 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1243)) * cbPerFrame._m0[3u].x));
    float _2424 = (_2404 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2424 * (_2405 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2386)));
    SV_Target.y = _2424 * (_2405 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2388)));
    SV_Target.z = _2424 * (_2405 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.w = _2264;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2264;
}


