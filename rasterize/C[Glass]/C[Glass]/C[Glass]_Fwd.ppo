#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Glass_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _804;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(C_Glass_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = (_223.x * 2.0) + (-1.0);
    float _234 = (_223.y * 2.0) + (-1.0);
    float _235 = dot(vec2(_232, _234), vec2(_232, _234));
    float _2925 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _241 = sqrt(1.0 - (isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0))));
    float _243 = cbMtdParam._m0[10u].x + _223.z;
    float _246 = fma(_241, _188 * NORMAL.x, fma(_234, _195 * TANGENT.x, (_181 * _174) * _232));
    float _249 = fma(_241, _188 * NORMAL.y, fma(_234, _195 * TANGENT.y, (_181 * _175) * _232));
    float _252 = fma(_241, _188 * NORMAL.z, fma(_234, _195 * TANGENT.z, (_181 * _176) * _232));
    float _256 = inversesqrt(dot(vec3(_246, _249, _252), vec3(_246, _249, _252)));
    float _257 = _256 * _246;
    float _258 = _256 * _249;
    float _259 = _256 * _252;
    float _2936 = isnan(0.0) ? cbMtdParam._m0[10u].y : (isnan(cbMtdParam._m0[10u].y) ? 0.0 : max(cbMtdParam._m0[10u].y, 0.0));
    float _260 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
    float _2947 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _261 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
    float _2958 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _2969 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _2980 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _2991 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _265 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
    float _281 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _322 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _332 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _322);
    float _333 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _322);
    float _334 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _322);
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _339 = _332 * _338;
    float _340 = _333 * _338;
    float _341 = _334 * _338;
    float _347 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _348 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _369 = fma(_259, cbSceneParam._m0[5u].z, fma(_258, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _257));
    float _372 = fma(_259, cbSceneParam._m0[6u].z, fma(_258, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _257));
    float _375 = fma(_259, cbSceneParam._m0[7u].z, fma(_258, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _257));
    uint _388 = uint(roundEven(NORMAL.w)) * 13u;
    uint _391 = (_388 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _397 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0)))) * cbInstanceData._m0[_391].x;
    float _398 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0)))) * cbInstanceData._m0[_391].y;
    float _399 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0)))) * cbInstanceData._m0[_391].z;
    float _3002 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
    float _3013 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _401 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
    float _3024 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
    float _403 = 1.0 - _265;
    float _404 = _400 * _403;
    float _405 = _401 * _403;
    float _406 = _402 * _403;
    float _411 = (_400 + (-0.039999999105930328369140625)) * _265;
    float _412 = (_401 + (-0.039999999105930328369140625)) * _265;
    float _413 = (_402 + (-0.039999999105930328369140625)) * _265;
    float _414 = _411 + 0.039999999105930328369140625;
    float _416 = _412 + 0.039999999105930328369140625;
    float _417 = _413 + 0.039999999105930328369140625;
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _347, cbSceneParam._m0[86u].y * _348));
    float _429 = _426.x * TEXCOORD.z;
    float _430 = dot(vec3(_257, _258, _259), vec3(_339, _340, _341));
    float _433 = _430 * 2.0;
    float _437 = (_433 * _257) - _339;
    float _438 = (_433 * _258) - _340;
    float _439 = (_433 * _259) - _341;
    float _443 = abs(dot(vec3(_339, _340, _341), vec3(_257, _258, _259)));
    float _3035 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _445 = sqrt(_261);
    float _458 = exp2((_445 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_445 * 3.0));
    float _464 = (1.0 - _458) * ((_445 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _465 = _458 * _445;
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _803;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _528 = fma(_501, cbModelParam._m0[26u].z, fma(_497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _493));
        float _532 = fma(_501, cbModelParam._m0[27u].z, fma(_497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _493));
        float _536 = fma(_501, cbModelParam._m0[28u].z, fma(_497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _493));
        float _561 = _493 + _257;
        float _562 = _497 + _258;
        float _563 = _501 + _259;
        float _573 = fma(_563, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561)) - _528;
        float _574 = fma(_563, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561)) - _532;
        float _575 = fma(_563, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561)) - _536;
        float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
        float _592 = ((_579 * _573) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_528 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_579 * _574) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_532 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _594 = ((_579 * _575) / cbModelParam._m0[34u].z) + ((((((_536 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        float _631 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _632 = _631 * (_597.x + (-0.5));
        float _633 = _631 * (_597.y + (-0.5));
        float _634 = _631 * (_597.z + (-0.5));
        float _641 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_604.x + (-0.5));
        float _643 = _641 * (_604.y + (-0.5));
        float _644 = _641 * (_604.z + (-0.5));
        float _651 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_611.x + (-0.5));
        float _653 = _651 * (_611.y + (-0.5));
        float _654 = _651 * (_611.z + (-0.5));
        float _661 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_618.x + (-0.5));
        float _663 = _661 * (_618.y + (-0.5));
        float _664 = _661 * (_618.z + (-0.5));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = _632 * 0.5;
        float _669 = _642 * 0.5;
        float _670 = _652 * 0.5;
        float _671 = dot(vec3(_668, _669, _670), vec3(_668, _669, _670));
        float _676 = (_671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_671);
        float _685 = (dot(vec3(_257, _258, _259), vec3(_676 * _668, _676 * _669, _676 * _670)) + 1.0) * 0.5;
        float _3061 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _695 = sqrt(((_669 * _669) + (_668 * _668)) + (_670 * _670)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3072 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3083 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0))) * (_697 + 1.0))) + _702) * _665;
        float _712 = _633 * 0.5;
        float _713 = _643 * 0.5;
        float _714 = _653 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _728 = (dot(vec3(_257, _258, _259), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3094 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _737 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3105 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3116 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0))) * (_739 + 1.0))) + _744) * _666;
        float _754 = _634 * 0.5;
        float _755 = _644 * 0.5;
        float _756 = _654 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_257, _258, _259), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3127 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3138 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3149 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_781 + 1.0))) + _786) * _667;
        _803 = _634;
        _805 = _633;
        _806 = _632;
        _807 = _644;
        _808 = _643;
        _809 = _642;
        _810 = _654;
        _811 = _653;
        _812 = _652;
        _813 = _667;
        _814 = _666;
        _815 = _665;
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
    }
    else
    {
        _803 = _804;
        _805 = _804;
        _806 = _804;
        _807 = _804;
        _808 = _804;
        _809 = _804;
        _810 = _804;
        _811 = _804;
        _812 = _804;
        _813 = _804;
        _814 = _804;
        _815 = _804;
        _816 = 0.0;
        _817 = 0.0;
        _818 = 0.0;
    }
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _844 = fma(_501, cbModelParam._m0[30u].z, fma(_497, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _493));
        float _848 = fma(_501, cbModelParam._m0[31u].z, fma(_497, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _493));
        float _852 = fma(_501, cbModelParam._m0[32u].z, fma(_497, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _493));
        float _875 = _493 + _257;
        float _876 = _497 + _258;
        float _877 = _501 + _259;
        float _887 = fma(_877, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875)) - _844;
        float _888 = fma(_877, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875)) - _848;
        float _889 = fma(_877, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875)) - _852;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_844 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_848 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[35u].z) + ((((((_852 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _943 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_910.x + (-0.5));
        float _945 = _943 * (_910.y + (-0.5));
        float _946 = _943 * (_910.z + (-0.5));
        float _953 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_917.x + (-0.5));
        float _955 = _953 * (_917.y + (-0.5));
        float _956 = _953 * (_917.z + (-0.5));
        float _963 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_924.x + (-0.5));
        float _965 = _963 * (_924.y + (-0.5));
        float _966 = _963 * (_924.z + (-0.5));
        float _973 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_931.x + (-0.5));
        float _975 = _973 * (_931.y + (-0.5));
        float _976 = _973 * (_931.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_257, _258, _259), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3190 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3201 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3212 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * (_1007 + 1.0))) + _1012) * _977;
        float _1022 = _945 * 0.5;
        float _1023 = _955 * 0.5;
        float _1024 = _965 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_257, _258, _259), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3245 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_1049 + 1.0))) + _1054) * _978;
        float _1064 = _946 * 0.5;
        float _1065 = _956 * 0.5;
        float _1066 = _966 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_257, _258, _259), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3278 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_1091 + 1.0))) + _1096) * _979;
        _1113 = _946;
        _1114 = _945;
        _1115 = _944;
        _1116 = _956;
        _1117 = _955;
        _1118 = _954;
        _1119 = _966;
        _1120 = _965;
        _1121 = _964;
        _1122 = _979;
        _1123 = _978;
        _1124 = _977;
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1127 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _804;
        _1114 = _804;
        _1115 = _804;
        _1116 = _804;
        _1117 = _804;
        _1118 = _804;
        _1119 = _804;
        _1120 = _804;
        _1121 = _804;
        _1122 = _804;
        _1123 = _804;
        _1124 = _804;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _816)) + _816;
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _817)) + _817;
    float _1139 = (cbModelParam._m0[1u].x * (_1127 - _818)) + _818;
    float _1160 = fma(_1139, cbSceneParam._m0[89u].z, fma(_1138, cbSceneParam._m0[89u].y, _1137 * cbSceneParam._m0[89u].x));
    float _1163 = fma(_1139, cbSceneParam._m0[90u].z, fma(_1138, cbSceneParam._m0[90u].y, _1137 * cbSceneParam._m0[90u].x));
    float _1166 = fma(_1139, cbSceneParam._m0[91u].z, fma(_1138, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1137));
    float _1181 = _437 * 0.5;
    float _1182 = _438 * 0.5;
    float _1183 = _439 * 0.5;
    float _1184 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_1115, _1118, _1121, _1124));
    float _1187 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1190 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1224;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1197 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_803, _807, _810, _813));
        float _1201 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_805, _808, _811, _814));
        float _1205 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_806, _809, _812, _815));
        float _1212 = dot(vec4(cbModelParam._m0[39u]), vec4(_1181, _1182, _1183, 1.0));
        _1224 = dot(vec3(isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1212) ? 0.0 : (isnan(0.0) ? _1212 : max(0.0, _1212))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1224 = 1.0;
    }
    float _1235;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1226 = dot(vec4(cbModelParam._m0[40u]), vec4(_1181, _1182, _1183, 1.0));
        _1235 = dot(vec3(isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1226) ? 0.0 : (isnan(0.0) ? _1226 : max(0.0, _1226))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1235 = 1.0;
    }
    float _1239 = (_1235 * cbModelParam._m0[1u].x) + (_1224 * (1.0 - cbModelParam._m0[1u].x));
    float _1249 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _261);
    float _1250 = isnan(_1249) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1249 : min(cbModelParam._m0[25u].z, _1249));
    float _1332;
    float _1334;
    float _1336;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1299 = fma(_501, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493)) + cbModelParam._m0[13u].w;
        float _1303 = fma(_501, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493)) + cbModelParam._m0[14u].w;
        float _1307 = fma(_501, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493)) + cbModelParam._m0[15u].w;
        float _1310 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _1313 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _1316 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _1344;
        if (_1310 > 0.0)
        {
            _1344 = abs((1.0 - _1299) / _1310);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1299 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1344 = frontier_phi_14_12_ladder;
        }
        float _1760;
        if (_1313 > 0.0)
        {
            _1760 = abs((1.0 - _1303) / _1313);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1303 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1760 = frontier_phi_23_19_ladder;
        }
        float _2061;
        if (_1316 > 0.0)
        {
            _2061 = abs((1.0 - _1307) / _1316);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1307 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2061 = frontier_phi_37_30_ladder;
        }
        float _2063 = isnan(_1760) ? _1344 : (isnan(_1344) ? _1760 : min(_1344, _1760));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1310) + _1299;
        float _2069 = (_2064 * _1313) + _1303;
        float _2070 = (_2064 * _1316) + _1307;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2071;
        float _2074 = _2071 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2070 > _2074) || ((_2070 < _2072) || ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 < _2072) || (_2068 > _2074))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2070, cbModelParam._m0[9u].z, fma(_2069, cbModelParam._m0[9u].y, _2068 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2070, cbModelParam._m0[10u].z, fma(_2069, cbModelParam._m0[10u].y, _2068 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2070, cbModelParam._m0[11u].z, fma(_2069, cbModelParam._m0[11u].y, _2068 * cbModelParam._m0[11u].x))), _1250);
            frontier_phi_13_37_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1332 = frontier_phi_13_37_ladder_2;
        _1334 = frontier_phi_13_37_ladder_1;
        _1336 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _1250);
        _1332 = _1320.x * cbModelParam._m0[1u].y;
        _1334 = _1320.y * cbModelParam._m0[1u].y;
        _1336 = _1320.z * cbModelParam._m0[1u].y;
    }
    float _1340 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _261);
    float _1341 = isnan(_1340) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1340 : min(cbModelParam._m0[25u].w, _1340));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1398 = fma(_501, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493)) + cbModelParam._m0[21u].w;
        float _1402 = fma(_501, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493)) + cbModelParam._m0[22u].w;
        float _1406 = fma(_501, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493)) + cbModelParam._m0[23u].w;
        float _1409 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1412 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1415 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1765;
        if (_1409 > 0.0)
        {
            _1765 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1765 = frontier_phi_25_21_ladder;
        }
        float _2087;
        if (_1412 > 0.0)
        {
            _2087 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2087 = frontier_phi_39_32_ladder;
        }
        float _2256;
        if (_1415 > 0.0)
        {
            _2256 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2256 = frontier_phi_53_48_ladder;
        }
        float _2258 = isnan(_2087) ? _1765 : (isnan(_1765) ? _2087 : min(_1765, _2087));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1409) + _1398;
        float _2264 = (_2259 * _1412) + _1402;
        float _2265 = (_2259 * _1415) + _1406;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2266;
        float _2269 = _2266 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2265 > _2269) || ((_2265 < _2267) || ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 < _2267) || (_2263 > _2269))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2265, cbModelParam._m0[17u].z, fma(_2264, cbModelParam._m0[17u].y, _2263 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2265, cbModelParam._m0[18u].z, fma(_2264, cbModelParam._m0[18u].y, _2263 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2265, cbModelParam._m0[19u].z, fma(_2264, cbModelParam._m0[19u].y, _2263 * cbModelParam._m0[19u].x))), _1341);
            frontier_phi_22_53_ladder = _2498.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2498.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2498.x * cbModelParam._m0[1u].z;
        }
        _1434 = frontier_phi_22_53_ladder_2;
        _1436 = frontier_phi_22_53_ladder;
        _1438 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _1341);
        _1434 = _1418.x * cbModelParam._m0[1u].z;
        _1436 = _1418.y * cbModelParam._m0[1u].z;
        _1438 = _1418.z * cbModelParam._m0[1u].z;
    }
    float _1451 = (((_464 * _414) + _465) * _429) * ((cbModelParam._m0[1u].w * (_1434 - _1332)) + _1332);
    float _1453 = (((_464 * _416) + _465) * _429) * ((cbModelParam._m0[1u].w * (_1436 - _1334)) + _1334);
    float _1455 = (((_464 * _417) + _465) * _429) * ((cbModelParam._m0[1u].w * (_1438 - _1336)) + _1336);
    float _1458 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, _1451 * cbSceneParam._m0[91u].x));
    float _1509 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _493), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _501))).x));
    float _3404 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1514 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _493), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _501))).x));
    float _3415 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _1516 = (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)));
    uvec4 _1520 = floatBitsToUint(cbInstanceData._m0[_388 + 5u]);
    uint _1522 = _1520.x * 14u;
    uint _1523 = _1522 + 13u;
    float _1528 = _429 + (-1.0);
    float _1531 = (cbLight._m0[_1523].x * _1528) + 1.0;
    float _1532 = (cbLight._m0[_1523].y * _1528) + 1.0;
    uint _1533 = _1522 + 5u;
    float _1539 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
    uint _1543 = _1522 + 4u;
    float _1553 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
    uint _1557 = _1522 | 1u;
    float _1568 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_257, _258, _259));
    float _1571 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_257, _258, _259));
    float _3436 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _3447 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1576 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.3183098733425140380859375;
    float _1578 = (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * 0.3183098733425140380859375;
    float _1585 = ((cbLight._m0[_1533].x * _1539) * _1578) + (((cbLight._m0[_1543].x * _1516) * _1553) * _1576);
    float _1586 = ((_1539 * cbLight._m0[_1533].y) * _1578) + (((cbLight._m0[_1543].y * _1516) * _1553) * _1576);
    float _1587 = ((_1539 * cbLight._m0[_1533].z) * _1578) + (((cbLight._m0[_1543].z * _1516) * _1553) * _1576);
    uint _1589 = _1522 + 8u;
    float _1602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1522].w)) * _261) * 0.949999988079071044921875);
    float _1603 = _1602 * _1602;
    float _1604 = cbLight._m0[_1522].x + _339;
    float _1605 = cbLight._m0[_1522].y + _340;
    float _1606 = cbLight._m0[_1522].z + _341;
    float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
    float _1611 = _1610 * _1604;
    float _1612 = _1610 * _1605;
    float _1613 = _1610 * _1606;
    float _1614 = dot(vec3(_257, _258, _259), vec3(cbLight._m0[_1522].xyz));
    float _3458 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1617 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1618 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _1619 = dot(vec3(_257, _258, _259), vec3(_1611, _1612, _1613));
    float _3480 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1622 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _1623 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_1611, _1612, _1613));
    float _3491 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1627 = _1603 * _1603;
    float _1631 = ((_1622 * _1622) * (_1627 + (-1.0))) + 1.0;
    float _1639 = exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0);
    float _1640 = 0.959999978542327880859375 - _411;
    float _1642 = 0.959999978542327880859375 - _412;
    float _1643 = 0.959999978542327880859375 - _413;
    float _1650 = 1.0 - _1603;
    float _1661 = (0.5 / (((_1618 * ((_1617 * _1650) + _1603)) + 9.9999999392252902907785028219223e-09) + (((_1618 * _1650) + _1603) * _1617))) * _1617;
    float _3502 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1663 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1627 / ((_1631 * _1631) * 3.141590118408203125));
    uint _1677 = _1522 + 9u;
    float _1688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _261) * 0.949999988079071044921875);
    float _1689 = _1688 * _1688;
    float _1690 = cbLight._m0[_1557].x + _339;
    float _1691 = cbLight._m0[_1557].y + _340;
    float _1692 = cbLight._m0[_1557].z + _341;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1697 = _1696 * _1690;
    float _1698 = _1696 * _1691;
    float _1699 = _1696 * _1692;
    float _1700 = dot(vec3(_257, _258, _259), vec3(cbLight._m0[_1557].xyz));
    float _3513 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _1704 = dot(vec3(_257, _258, _259), vec3(_1697, _1698, _1699));
    float _3524 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _1708 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1697, _1698, _1699));
    float _3535 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1712 = _1689 * _1689;
    float _1716 = ((_1707 * _1707) * (_1712 + (-1.0))) + 1.0;
    float _1723 = exp2(log2(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * 5.0);
    float _1730 = 1.0 - _1689;
    float _1740 = (0.5 / (((_1618 * ((_1703 * _1730) + _1689)) + 9.9999999392252902907785028219223e-09) + (((_1618 * _1730) + _1689) * _1703))) * _1703;
    float _3546 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1742 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1712 / ((_1716 * _1716) * 3.141590118408203125));
    float _1752 = (((((_1723 * _1640) + _414) * cbLight._m0[_1677].x) * _1742) * _1539) + ((((cbLight._m0[_1589].x * _1516) * ((_1639 * _1640) + _414)) * _1663) * _1553);
    float _1753 = (((((_1723 * _1642) + _416) * cbLight._m0[_1677].y) * _1742) * _1539) + ((((cbLight._m0[_1589].y * _1516) * ((_1639 * _1642) + _416)) * _1663) * _1553);
    float _1754 = (((((_1723 * _1643) + _417) * cbLight._m0[_1677].z) * _1742) * _1539) + ((((cbLight._m0[_1589].z * _1516) * ((_1639 * _1643) + _417)) * _1663) * _1553);
    float _1870;
    float _1872;
    float _1874;
    float _1876;
    float _1878;
    float _1880;
    if (_1520.y == 0u)
    {
        float _1810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1810;
        float _1812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1810;
        float _1813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1810;
        uvec4 _1825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1826 = _1825.x;
        uint _1837 = uint((float(_1825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _348) / _1826))) + floor(float(uint(cbSceneParam._m0[85u].x * _347) / _1826)));
        float _1847 = (log2(_1813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1848 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        uint _1851 = uint(isnan(14.0) ? _1848 : (isnan(_1848) ? 14.0 : min(_1848, 14.0)));
        uvec4 _1856 = texelFetch(g_lightClusterGridBuffer, int(((_1851 << 2u) + (_1837 << 6u)) >> 2u));
        uint _1857 = _1856.x;
        uint _1858 = _1825.z;
        float _1947;
        float _1949;
        float _1951;
        float _1953;
        float _1955;
        float _1957;
        if (((((1u << ((_1858 >> 4u) & 15u)) + 4294967295u) & _1857) == 0u) || ((_1858 & 240u) == 0u))
        {
            _1947 = 0.0;
            _1949 = 0.0;
            _1951 = 0.0;
            _1953 = 0.0;
            _1955 = 0.0;
            _1957 = 0.0;
        }
        else
        {
            float _1948;
            float _1950;
            float _1952;
            float _1954;
            float _1956;
            float _1958;
            float _2124 = 0.0;
            float _2125 = 0.0;
            float _2126 = 0.0;
            float _2127 = 0.0;
            float _2128 = 0.0;
            float _2129 = 0.0;
            uint _2130 = 0u;
            uint _2139;
            bool _2140;
            for (;;)
            {
                _2139 = texelFetch(g_lightClassification, int((((_1851 << 5u) + (_1837 << 9u)) + (_2130 << 2u)) >> 2u)).x;
                _2140 = _2139 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2140)
                {
                    frontier_phi_50_pred = _2127;
                    frontier_phi_50_pred_1 = _2129;
                    frontier_phi_50_pred_2 = _2128;
                    frontier_phi_50_pred_3 = _2126;
                    frontier_phi_50_pred_4 = _2125;
                    frontier_phi_50_pred_5 = _2124;
                }
                else
                {
                    float _2299;
                    float _2300;
                    float _2301;
                    float _2302;
                    float _2303;
                    float _2304;
                    uint _2305;
                    _2299 = _2124;
                    _2300 = _2125;
                    _2301 = _2126;
                    _2302 = _2127;
                    _2303 = _2128;
                    _2304 = _2129;
                    _2305 = _2139;
                    float _2205;
                    float _2206;
                    float _2207;
                    float _2208;
                    float _2209;
                    float _2210;
                    for (;;)
                    {
                        uint _2309 = uint(findLSB(_2305)) + (_2130 << 5u);
                        uint _2306 = (_2305 + 4294967295u) & _2305;
                        uint _2311 = _2309 * 48u;
                        vec4 _2325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2311)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 3u)).x));
                        uint _2331 = (_2309 * 48u) + 4u;
                        vec4 _2344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2331)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 3u)).x));
                        uint _2350 = (_2309 * 48u) + 8u;
                        vec3 _2361 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2350)).x, texelFetch(g_PointLightRenderingBuffer, int(_2350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2350 + 2u)).x));
                        float _2365 = _2325.x - _1811;
                        float _2366 = _2325.y - _1812;
                        float _2367 = _2325.z - _1813;
                        float _2368 = dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367));
                        float _2371 = inversesqrt(_2368);
                        float _2372 = _2371 * _2365;
                        float _2373 = _2371 * _2366;
                        float _2374 = _2371 * _2367;
                        float _2375 = dot(vec3(_369, _372, _375), vec3(_2372, _2373, _2374));
                        float _2380 = 1.0 - (_2368 * _2325.w);
                        float _3567 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
                        float _2381 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
                        float _2382 = sqrt(_2368) * _2344.w;
                        float _2385 = 1.39999997615814208984375 / (_2382 + 1.39999997615814208984375);
                        float _2386 = _2385 * _2385;
                        float _2389 = ((1.0 - _2386) * _2375) + _2386;
                        float _2392 = _2382 * _2382;
                        float _2396 = ((isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0))) * _2381) / ((_2392 * 0.699999988079071044921875) + 1.0);
                        float _2400 = (-0.0) - _1811;
                        float _2401 = (-0.0) - _1812;
                        float _2402 = (-0.0) - _1813;
                        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
                        float _2407 = _2406 * _2400;
                        float _2408 = _2406 * _2401;
                        float _2409 = _2406 * _2402;
                        float _2417 = exp2(log2(1.0 / ((_2392 * 3.5) + 5.0)) * 0.25);
                        float _2418 = 1.0 - _445;
                        float _2425 = sqrt(1.0 - ((1.0 - (_2418 * _2418)) * (1.0 - (_2417 * _2417))));
                        float _2426 = _2425 * _2425;
                        float _2427 = _2426 * _2426;
                        float _2428 = _2407 + _2372;
                        float _2429 = _2408 + _2373;
                        float _2430 = _2409 + _2374;
                        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
                        float _2438 = dot(vec3(_369, _372, _375), vec3(_2407, _2408, _2409));
                        float _3583 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
                        float _2441 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
                        float _2442 = dot(vec3(_369, _372, _375), vec3(_2434 * _2428, _2434 * _2429, _2434 * _2430));
                        float _3594 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
                        float _2445 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
                        float _2449 = ((_2445 * _2445) * (_2427 + (-1.0))) + 1.0;
                        float _2450 = _2385 * _2426;
                        float _2451 = _2450 * _2450;
                        float _2454 = ((1.0 - _2451) * _2375) + _2451;
                        float _3605 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
                        float _2455 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
                        float _2456 = 1.0 - _2426;
                        float _2466 = (0.5 / (((_2455 * ((_2441 * _2456) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2455 * _2456) + _2426) * _2441))) * _2455;
                        float _3616 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
                        float _2477 = (((_2427 * 3.1415927410125732421875) * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) / ((_2449 * _2449) * ((_2392 * 2.1991131305694580078125) + 3.141590118408203125))) * _2381;
                        _2208 = (_2396 * _2344.x) + _2302;
                        _2209 = (_2396 * _2344.y) + _2303;
                        _2210 = (_2396 * _2344.z) + _2304;
                        _2205 = (_2477 * _2361.x) + _2299;
                        _2206 = (_2477 * _2361.y) + _2300;
                        _2207 = (_2477 * _2361.z) + _2301;
                        if (_2306 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2299 = _2205;
                            _2300 = _2206;
                            _2301 = _2207;
                            _2302 = _2208;
                            _2303 = _2209;
                            _2304 = _2210;
                            _2305 = _2306;
                        }
                    }
                    frontier_phi_50_pred = _2208;
                    frontier_phi_50_pred_1 = _2210;
                    frontier_phi_50_pred_2 = _2209;
                    frontier_phi_50_pred_3 = _2207;
                    frontier_phi_50_pred_4 = _2206;
                    frontier_phi_50_pred_5 = _2205;
                }
                _1954 = frontier_phi_50_pred;
                _1958 = frontier_phi_50_pred_1;
                _1956 = frontier_phi_50_pred_2;
                _1952 = frontier_phi_50_pred_3;
                _1950 = frontier_phi_50_pred_4;
                _1948 = frontier_phi_50_pred_5;
                uint _2131 = _2130 + 1u;
                if (_2131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2124 = _1948;
                    _2125 = _1950;
                    _2126 = _1952;
                    _2127 = _1954;
                    _2128 = _1956;
                    _2129 = _1958;
                    _2130 = _2131;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1947 = _1948;
            _1949 = _1950;
            _1951 = _1952;
            _1953 = _1954;
            _1955 = _1956;
            _1957 = _1958;
        }
        uvec4 _1961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1962 = _1961.z;
        uint _1964 = (_1962 >> 8u) & 15u;
        float _2092;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        if (((4294967295u << _1964) & _1857) == 0u)
        {
            _2092 = _1947;
            _2094 = _1949;
            _2096 = _1951;
            _2098 = _1953;
            _2100 = _1955;
            _2102 = _1957;
        }
        else
        {
            float _2117 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
            float _2118 = _2117 * _1811;
            float _2119 = _2117 * _1812;
            float _2120 = _2117 * _1813;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_1964 < ((_1962 >> 12u) & 15u))
            {
                float _2093;
                float _2095;
                float _2097;
                float _2099;
                float _2101;
                float _2103;
                float _2282 = _1947;
                float _2283 = _1949;
                float _2284 = _1951;
                float _2285 = _1953;
                float _2286 = _1955;
                float _2287 = _1957;
                uint _2288 = _1964;
                uint _2297;
                bool _2298;
                for (;;)
                {
                    _2297 = texelFetch(g_lightClassification, int((((_1851 << 5u) + (_1837 << 9u)) + (_2288 << 2u)) >> 2u)).x;
                    _2298 = _2297 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2298)
                    {
                        frontier_phi_59_pred = _2287;
                        frontier_phi_59_pred_1 = _2286;
                        frontier_phi_59_pred_2 = _2285;
                        frontier_phi_59_pred_3 = _2284;
                        frontier_phi_59_pred_4 = _2283;
                        frontier_phi_59_pred_5 = _2282;
                    }
                    else
                    {
                        float _2503;
                        float _2504;
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2516 = _2282;
                        float _2517 = _2283;
                        float _2518 = _2284;
                        float _2519 = _2285;
                        float _2520 = _2286;
                        float _2521 = _2287;
                        uint _2522 = _2297;
                        uint _2523;
                        vec4 _2548;
                        float _2549;
                        vec4 _2564;
                        vec3 _2576;
                        vec4 _2592;
                        vec4 _2608;
                        float _2655;
                        bool _2656;
                        for (;;)
                        {
                            uint _2533 = ((_2288 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2522));
                            _2523 = (_2522 + 4294967295u) & _2522;
                            uint _2535 = _2533 * 40u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            _2549 = _2548.w;
                            uint _2551 = (_2533 * 40u) + 4u;
                            _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            uint _2566 = (_2533 * 40u) + 8u;
                            _2576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x));
                            uint _2579 = (_2533 * 40u) + 16u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2595 = (_2533 * 40u) + 20u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2611 = (_2533 * 40u) + 24u;
                            vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2630 = (_2533 * 40u) + 28u;
                            vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            _2655 = fma(_1813, _2643.z, fma(_1812, _2643.y, _2643.x * _1811)) + _2643.w;
                            _2656 = !((fma(_1813, _2624.z, fma(_1812, _2624.y, _2624.x * _1811)) + _2624.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2656)
                            {
                                float _2683 = _2548.x - _1811;
                                float _2684 = _2548.y - _1812;
                                float _2685 = _2548.z - _1813;
                                float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                                float _2689 = inversesqrt(_2686);
                                float _2690 = _2689 * _2683;
                                float _2691 = _2689 * _2684;
                                float _2692 = _2689 * _2685;
                                float _2696 = 1.0 - (_2686 / (_2549 * _2549));
                                float _3627 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                                float _2697 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                                float _2701 = sqrt(_2686) * _2564.w;
                                float _2703 = 1.39999997615814208984375 / (_2701 + 1.39999997615814208984375);
                                float _2704 = _2703 * _2703;
                                float _2707 = ((1.0 - _2704) * dot(vec3(_2690, _2691, _2692), vec3(_369, _372, _375))) + _2704;
                                float _2710 = _2701 * _2701;
                                float _2714 = (fma(_1813, _2592.z, fma(_1812, _2592.y, _2592.x * _1811)) + _2592.w) / _2655;
                                float _2715 = (fma(_1813, _2608.z, fma(_1812, _2608.y, _2608.x * _1811)) + _2608.w) / _2655;
                                float _2719 = 1.0 - dot(vec2(_2714, _2715), vec2(_2714, _2715));
                                float _3643 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                                float _2720 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
                                float _2721 = _2720 * (((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2697) / ((_2710 * 0.699999988079071044921875) + 1.0));
                                float _2733 = exp2(log2(1.0 / ((_2710 * 3.5) + 5.0)) * 0.25);
                                float _2734 = 1.0 - _445;
                                float _2741 = sqrt(1.0 - ((1.0 - (_2734 * _2734)) * (1.0 - (_2733 * _2733))));
                                float _2742 = _2741 * _2741;
                                float _2743 = _2742 * _2742;
                                float _2744 = _2690 - _2118;
                                float _2745 = _2691 - _2119;
                                float _2746 = _2692 - _2120;
                                float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                                float _2754 = dot(vec3(_369, _372, _375), vec3((-0.0) - _2118, (-0.0) - _2119, (-0.0) - _2120));
                                float _3654 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                                float _2757 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2758 = dot(vec3(_369, _372, _375), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746));
                                float _3665 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2761 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
                                float _2765 = ((_2761 * _2761) * (_2743 + (-1.0))) + 1.0;
                                float _2766 = _2703 * _2742;
                                float _2767 = _2766 * _2766;
                                float _2773 = ((1.0 - _2767) * dot(vec3(_369, _372, _375), vec3(_2690, _2691, _2692))) + _2767;
                                float _3676 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2774 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2775 = 1.0 - _2742;
                                float _2785 = (0.5 / (((_2774 * ((_2757 * _2775) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _2775) + _2742) * _2757))) * _2774;
                                float _3687 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2795 = (_2720 * _2697) * (((_2743 * 3.1415927410125732421875) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) / ((_2765 * _2765) * ((_2710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2721 * _2564.z;
                                frontier_phi_65_pred_1 = _2721 * _2564.y;
                                frontier_phi_65_pred_2 = _2721 * _2564.x;
                                frontier_phi_65_pred_3 = _2795 * _2576.z;
                                frontier_phi_65_pred_4 = _2795 * _2576.y;
                                frontier_phi_65_pred_5 = _2795 * _2576.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _2804 = frontier_phi_65_pred;
                            _2803 = frontier_phi_65_pred_1;
                            _2802 = frontier_phi_65_pred_2;
                            _2801 = frontier_phi_65_pred_3;
                            _2800 = frontier_phi_65_pred_4;
                            _2799 = frontier_phi_65_pred_5;
                            _2506 = _2802 + _2519;
                            _2507 = _2803 + _2520;
                            _2508 = _2804 + _2521;
                            _2503 = _2799 + _2516;
                            _2504 = _2800 + _2517;
                            _2505 = _2801 + _2518;
                            if (_2523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2516 = _2503;
                                _2517 = _2504;
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2523;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2508;
                        frontier_phi_59_pred_1 = _2507;
                        frontier_phi_59_pred_2 = _2506;
                        frontier_phi_59_pred_3 = _2505;
                        frontier_phi_59_pred_4 = _2504;
                        frontier_phi_59_pred_5 = _2503;
                    }
                    _2103 = frontier_phi_59_pred;
                    _2101 = frontier_phi_59_pred_1;
                    _2099 = frontier_phi_59_pred_2;
                    _2097 = frontier_phi_59_pred_3;
                    _2095 = frontier_phi_59_pred_4;
                    _2093 = frontier_phi_59_pred_5;
                    uint _2289 = _2288 + 1u;
                    if (_2289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2282 = _2093;
                        _2283 = _2095;
                        _2284 = _2097;
                        _2285 = _2099;
                        _2286 = _2101;
                        _2287 = _2103;
                        _2288 = _2289;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2099;
                frontier_phi_41_42_ladder_1 = _2103;
                frontier_phi_41_42_ladder_2 = _2101;
                frontier_phi_41_42_ladder_3 = _2097;
                frontier_phi_41_42_ladder_4 = _2095;
                frontier_phi_41_42_ladder_5 = _2093;
            }
            else
            {
                frontier_phi_41_42_ladder = _1953;
                frontier_phi_41_42_ladder_1 = _1957;
                frontier_phi_41_42_ladder_2 = _1955;
                frontier_phi_41_42_ladder_3 = _1951;
                frontier_phi_41_42_ladder_4 = _1949;
                frontier_phi_41_42_ladder_5 = _1947;
            }
            _2092 = frontier_phi_41_42_ladder_5;
            _2094 = frontier_phi_41_42_ladder_4;
            _2096 = frontier_phi_41_42_ladder_3;
            _2098 = frontier_phi_41_42_ladder;
            _2100 = frontier_phi_41_42_ladder_2;
            _2102 = frontier_phi_41_42_ladder_1;
        }
        float _2107 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _1870 = (_2107 * _2098) + _1585;
        _1872 = (_2107 * _2100) + _1586;
        _1874 = (_2107 * _2102) + _1587;
        _1876 = ((_2092 * _414) * _2107) + _1752;
        _1878 = ((_2094 * _416) * _2107) + _1753;
        _1880 = ((_2096 * _417) * _2107) + _1754;
    }
    else
    {
        _1870 = _1585;
        _1872 = _1586;
        _1874 = _1587;
        _1876 = _1752;
        _1878 = _1753;
        _1880 = _1754;
    }
    float _3703 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3714 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3725 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3736 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _1905 = cbInstanceData._m0[_388 + 6u].w * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)));
    float _1910 = _347 / cbSceneParam._m0[86u].x;
    float _1911 = _348 / cbSceneParam._m0[86u].y;
    vec4 _1925 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1910, _1911, (log2((isnan(cbSceneParam._m0[77u].w) ? _281 : (isnan(_281) ? cbSceneParam._m0[77u].w : min(_281, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1927 = _1925.x;
    float _1928 = _1925.y;
    float _1929 = _1925.z;
    float _1930 = _1925.w;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    if (_281 > cbSceneParam._m0[78u].w)
    {
        float _1972 = isnan(_281) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _281 : min(cbSceneParam._m0[80u].w, _281));
        float _1973 = _1972 / _281;
        float _1984 = _1973 * _332;
        float _1985 = _333 * _1973;
        float _1986 = (-0.0) - _1985;
        float _1988 = _1973 * _334;
        float _1990 = (cbSceneParam._m0[77u].w * _1986) / _1972;
        float _1991 = _1990 + cbSceneParam._m0[79u].w;
        float _1992 = cbSceneParam._m0[79u].w - _1985;
        float _1998 = sqrt(((_1984 * _1984) + (_1985 * _1985)) + (_1988 * _1988));
        float _2001 = (1.0 - (cbSceneParam._m0[77u].w / _1972)) * _1998;
        float _2007 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2009 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2218;
        if (abs((_1986 - _1990) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2218 = ((((_1991 > 0.0) ? exp2(_2007 * _1991) : (2.0 - exp2(_2009 * _1991))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2001;
        }
        else
        {
            float _2153 = 1.0 / cbSceneParam._m0[80u].x;
            float _2154 = isnan(_1992) ? _1991 : (isnan(_1991) ? _1992 : max(_1991, _1992));
            float _2155 = isnan(_1992) ? _1991 : (isnan(_1991) ? _1992 : min(_1991, _1992));
            float _2164 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : min(_2154, 0.0));
            float _2165 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : min(_2155, 0.0));
            _2218 = ((abs(_1998 / _1986) * cbSceneParam._m0[80u].y) * ((((_2164 - _2165) * 2.0) - ((exp2(_2007 * (isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0)))) - exp2(_2007 * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))))) * _2153)) - ((exp2(_2009 * _2164) - exp2(_2009 * _2165)) * _2153))) + (_2001 * cbSceneParam._m0[80u].z);
        }
        vec4 _2220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1910, _1911, 1.0), 0.0);
        float _2229 = exp2((_2218 * (-1.44269502162933349609375)) * (1.0 - _2220.w));
        float _2230 = log2(_2229);
        float _2246 = log2(_1930);
        _2011 = (exp2(_2246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2230 * cbSceneParam._m0[78u].x)) * _2220.x) / cbSceneParam._m0[78u].x)) + _1927;
        _2013 = (exp2(_2246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2230 * cbSceneParam._m0[78u].y)) * _2220.y) / cbSceneParam._m0[78u].y)) + _1928;
        _2015 = (exp2(_2246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2230 * cbSceneParam._m0[78u].z)) * _2220.z) / cbSceneParam._m0[78u].z)) + _1929;
        _2017 = _2229 * _1930;
    }
    else
    {
        _2011 = _1927;
        _2013 = _1928;
        _2015 = _1929;
        _2017 = _1930;
    }
    float _2029 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2030 = _2029 == 3.0;
    float _2031 = log2(_2017);
    float _2038 = exp2(_2031 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1870 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _429))) + ((_1876 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1239)) * cbPerFrame._m0[3u].x));
    float _2039 = exp2(_2031 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1872 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _429))) + ((_1878 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1239)) * cbPerFrame._m0[3u].x));
    float _2040 = exp2(_2031 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1874 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _429))) + ((_1880 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1239)) * cbPerFrame._m0[3u].x));
    float _2049 = (_2029 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2049 * (_2030 ? _2038 : (_2038 + (cbSceneParam._m0[72u].w * _2011)));
    SV_Target.y = _2049 * (_2030 ? _2039 : (_2039 + (cbSceneParam._m0[72u].w * _2013)));
    SV_Target.z = _2049 * (_2030 ? _2040 : (_2040 + (cbSceneParam._m0[72u].w * _2015)));
    SV_Target.w = _1905;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1905;
}


