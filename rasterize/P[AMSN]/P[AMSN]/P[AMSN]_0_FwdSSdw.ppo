#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _849;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(P_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(P_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _260 = cbMtdParam._m0[10u].x + _253.x;
    vec4 _272 = texture(sampler2D(P_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3210 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0))));
    float _292 = fma(_289, _211, fma(_282, _203 * TANGENT.x, (_189 * _182) * _280));
    float _295 = fma(_289, _212, fma(_282, _203 * TANGENT.y, (_189 * _183) * _280));
    float _298 = fma(_289, _213, fma(_282, _203 * TANGENT.z, (_189 * _184) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3221 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _306 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
    float _3232 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3243 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3254 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3265 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _310 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _417 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _420 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = (_433 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3276 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _448 = 1.0 - _310;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _310;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _310;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _310;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _474 = _471.x * TEXCOORD.z;
    float _475 = dot(vec3(_303, _304, _305), vec3(_384, _385, _386));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _303) - _384;
    float _483 = (_478 * _304) - _385;
    float _484 = (_478 * _305) - _386;
    float _488 = abs(dot(vec3(_384, _385, _386), vec3(_303, _304, _305)));
    float _3309 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_306);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _848;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _577 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _581 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _606 = _538 + _303;
        float _607 = _542 + _304;
        float _608 = _546 + _305;
        float _618 = fma(_608, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606)) - _573;
        float _619 = fma(_608, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606)) - _577;
        float _620 = fma(_608, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606)) - _581;
        float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
        float _637 = ((_624 * _618) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_573 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_624 * _619) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_577 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_624 * _620) / cbModelParam._m0[34u].z) + ((((((_581 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _638, _639), 0.0);
        float _676 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_642.x + (-0.5));
        float _678 = _676 * (_642.y + (-0.5));
        float _679 = _676 * (_642.z + (-0.5));
        float _686 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_649.x + (-0.5));
        float _688 = _686 * (_649.y + (-0.5));
        float _689 = _686 * (_649.z + (-0.5));
        float _696 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_656.x + (-0.5));
        float _698 = _696 * (_656.y + (-0.5));
        float _699 = _696 * (_656.z + (-0.5));
        float _706 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_663.x + (-0.5));
        float _708 = _706 * (_663.y + (-0.5));
        float _709 = _706 * (_663.z + (-0.5));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = _677 * 0.5;
        float _714 = _687 * 0.5;
        float _715 = _697 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _730 = (dot(vec3(_303, _304, _305), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _740 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3357 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_742 + 1.0))) + _747) * _710;
        float _757 = _678 * 0.5;
        float _758 = _688 * 0.5;
        float _759 = _698 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_303, _304, _305), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3390 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_784 + 1.0))) + _789) * _711;
        float _799 = _679 * 0.5;
        float _800 = _689 * 0.5;
        float _801 = _699 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_303, _304, _305), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3423 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_826 + 1.0))) + _831) * _712;
        _848 = _679;
        _850 = _678;
        _851 = _677;
        _852 = _689;
        _853 = _688;
        _854 = _687;
        _855 = _699;
        _856 = _698;
        _857 = _697;
        _858 = _712;
        _859 = _711;
        _860 = _710;
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
    }
    else
    {
        _848 = _849;
        _850 = _849;
        _851 = _849;
        _852 = _849;
        _853 = _849;
        _854 = _849;
        _855 = _849;
        _856 = _849;
        _857 = _849;
        _858 = _849;
        _859 = _849;
        _860 = _849;
        _861 = 0.0;
        _862 = 0.0;
        _863 = 0.0;
    }
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _889 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _893 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _897 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _920 = _538 + _303;
        float _921 = _542 + _304;
        float _922 = _546 + _305;
        float _932 = fma(_922, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920)) - _889;
        float _933 = fma(_922, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920)) - _893;
        float _934 = fma(_922, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920)) - _897;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_889 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_893 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[35u].z) + ((((((_897 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_955.x + (-0.5));
        float _990 = _988 * (_955.y + (-0.5));
        float _991 = _988 * (_955.z + (-0.5));
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_962.x + (-0.5));
        float _1000 = _998 * (_962.y + (-0.5));
        float _1001 = _998 * (_962.z + (-0.5));
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_969.x + (-0.5));
        float _1010 = _1008 * (_969.y + (-0.5));
        float _1011 = _1008 * (_969.z + (-0.5));
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_303, _304, _305), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3486 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1052 + 1.0))) + _1057) * _1022;
        float _1067 = _990 * 0.5;
        float _1068 = _1000 * 0.5;
        float _1069 = _1010 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_303, _304, _305), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3519 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1094 + 1.0))) + _1099) * _1023;
        float _1109 = _991 * 0.5;
        float _1110 = _1001 * 0.5;
        float _1111 = _1011 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_303, _304, _305), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3552 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1136 + 1.0))) + _1141) * _1024;
        _1158 = _991;
        _1159 = _990;
        _1160 = _989;
        _1161 = _1001;
        _1162 = _1000;
        _1163 = _999;
        _1164 = _1011;
        _1165 = _1010;
        _1166 = _1009;
        _1167 = _1024;
        _1168 = _1023;
        _1169 = _1022;
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _849;
        _1159 = _849;
        _1160 = _849;
        _1161 = _849;
        _1162 = _849;
        _1163 = _849;
        _1164 = _849;
        _1165 = _849;
        _1166 = _849;
        _1167 = _849;
        _1168 = _849;
        _1169 = _849;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1182));
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = _484 * 0.5;
    float _1229 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1232 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1235 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1269;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1242 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_848, _852, _855, _858));
        float _1246 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_850, _853, _856, _859));
        float _1250 = dot(vec4(_1226, _1227, _1228, 1.0), vec4(_851, _854, _857, _860));
        float _1257 = dot(vec4(cbModelParam._m0[39u]), vec4(_1226, _1227, _1228, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1280;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1271 = dot(vec4(cbModelParam._m0[40u]), vec4(_1226, _1227, _1228, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1284 = (_1280 * cbModelParam._m0[1u].x) + (_1269 * (1.0 - cbModelParam._m0[1u].x));
    float _1294 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1295 = isnan(_1294) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1294 : min(cbModelParam._m0[25u].z, _1294));
    float _1377;
    float _1379;
    float _1381;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1344 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1348 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1352 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1355 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1358 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1361 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1389;
        if (_1355 > 0.0)
        {
            _1389 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1389 = frontier_phi_16_14_ladder;
        }
        float _1618;
        if (_1358 > 0.0)
        {
            _1618 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1618 = frontier_phi_25_21_ladder;
        }
        float _1875;
        if (_1361 > 0.0)
        {
            _1875 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1875 = frontier_phi_37_32_ladder;
        }
        float _1877 = isnan(_1618) ? _1389 : (isnan(_1389) ? _1618 : min(_1389, _1618));
        float _1878 = isnan(_1875) ? _1877 : (isnan(_1877) ? _1875 : min(_1877, _1875));
        float _1882 = (_1878 * _1355) + _1344;
        float _1883 = (_1878 * _1358) + _1348;
        float _1884 = (_1878 * _1361) + _1352;
        float _1885 = _1878 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1885;
        float _1889 = _1885 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 > _1889) || ((_1883 < _1887) || ((_1882 < _1887) || (_1882 > _1889))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2012 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1884, cbModelParam._m0[9u].z, fma(_1883, cbModelParam._m0[9u].y, _1882 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1884, cbModelParam._m0[10u].z, fma(_1883, cbModelParam._m0[10u].y, _1882 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1884, cbModelParam._m0[11u].z, fma(_1883, cbModelParam._m0[11u].y, _1882 * cbModelParam._m0[11u].x))), _1295);
            frontier_phi_15_37_ladder = _2012.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2012.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2012.x * cbModelParam._m0[1u].y;
        }
        _1377 = frontier_phi_15_37_ladder_2;
        _1379 = frontier_phi_15_37_ladder_1;
        _1381 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1295);
        _1377 = _1365.x * cbModelParam._m0[1u].y;
        _1379 = _1365.y * cbModelParam._m0[1u].y;
        _1381 = _1365.z * cbModelParam._m0[1u].y;
    }
    float _1385 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1385 : min(cbModelParam._m0[25u].w, _1385));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1443 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1447 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1451 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1454 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1457 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1460 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1623;
        if (_1454 > 0.0)
        {
            _1623 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1623 = frontier_phi_27_23_ladder;
        }
        float _1902;
        if (_1457 > 0.0)
        {
            _1902 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1902 = frontier_phi_39_34_ladder;
        }
        float _2115;
        if (_1460 > 0.0)
        {
            _2115 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2115 = frontier_phi_48_45_ladder;
        }
        float _2117 = isnan(_1902) ? _1623 : (isnan(_1623) ? _1902 : min(_1623, _1902));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1454) + _1443;
        float _2123 = (_2118 * _1457) + _1447;
        float _2124 = (_2118 * _1460) + _1451;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2125;
        float _2128 = _2125 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2124 > _2128) || ((_2124 < _2126) || ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 < _2126) || (_2122 > _2128))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2124, cbModelParam._m0[17u].z, fma(_2123, cbModelParam._m0[17u].y, _2122 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2124, cbModelParam._m0[18u].z, fma(_2123, cbModelParam._m0[18u].y, _2122 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2124, cbModelParam._m0[19u].z, fma(_2123, cbModelParam._m0[19u].y, _2122 * cbModelParam._m0[19u].x))), _1386);
            frontier_phi_24_48_ladder = _2322.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2322.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2322.x * cbModelParam._m0[1u].z;
        }
        _1479 = frontier_phi_24_48_ladder_2;
        _1481 = frontier_phi_24_48_ladder_1;
        _1483 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1386);
        _1479 = _1463.x * cbModelParam._m0[1u].z;
        _1481 = _1463.y * cbModelParam._m0[1u].z;
        _1483 = _1463.z * cbModelParam._m0[1u].z;
    }
    float _1496 = (((_509 * _459) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1500 = (((_509 * _462) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1498, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1498, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1498, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    vec4 _1517 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_392, _393));
    float _1519 = _1517.w;
    float _1531 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1519);
    float _1532 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1519);
    float _1533 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1519);
    uvec4 _1537 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1539 = _1537.x * 14u;
    uint _1540 = _1539 + 13u;
    float _1547 = _474 + (-1.0);
    float _1552 = (cbLight._m0[_1540].x * _1547) + 1.0;
    float _1553 = (cbLight._m0[_1540].y * _1547) + 1.0;
    float _1554 = (cbLight._m0[_1540].z * _1547) + 1.0;
    float _1555 = (cbLight._m0[_1540].w * _1547) + 1.0;
    uint _1556 = _1539 + 5u;
    float _1562 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
    uint _1566 = _1539 + 4u;
    float _1576 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1580 = _1539 | 1u;
    float _1591 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_303, _304, _305));
    float _1594 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_303, _304, _305));
    float _3688 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _3699 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1599 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.3183098733425140380859375;
    float _1601 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.3183098733425140380859375;
    float _1608 = ((cbLight._m0[_1556].x * _1562) * _1601) + (((cbLight._m0[_1566].x * _1531) * _1576) * _1599);
    float _1609 = ((_1562 * cbLight._m0[_1556].y) * _1601) + (((cbLight._m0[_1566].y * _1532) * _1576) * _1599);
    float _1610 = ((_1562 * cbLight._m0[_1556].z) * _1601) + (((cbLight._m0[_1566].z * _1533) * _1576) * _1599);
    uvec4 _1615 = floatBitsToUint(cbLight._m0[_1539 + 12u]);
    bool _1617 = _1615.x == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1617)
    {
        _1628 = _1608;
        _1630 = _1609;
        _1632 = _1610;
    }
    else
    {
        uint _1636 = _1539 + 6u;
        float _1652 = (dot(vec3(cbLight._m0[_1539 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1653 = _1652 * _1652;
        float _3710 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1655 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1628 = (((cbLight._m0[_1636].x * 0.3183098733425140380859375) * _1654) * _1655) + _1608;
        _1630 = (((cbLight._m0[_1636].y * 0.3183098733425140380859375) * _1654) * _1655) + _1609;
        _1632 = (((cbLight._m0[_1636].z * 0.3183098733425140380859375) * _1654) * _1655) + _1610;
    }
    bool _1635 = _1615.y == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1635)
    {
        _1673 = _1628;
        _1675 = _1630;
        _1677 = _1632;
    }
    else
    {
        uint _1846 = _1539 + 7u;
        float _1862 = (dot(vec3(cbLight._m0[_1539 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3726 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1865 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _1673 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1628;
        _1675 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1630;
        _1677 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1632;
    }
    uint _1680 = _1539 + 8u;
    float _1693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1539].w)) * _306) * 0.949999988079071044921875);
    float _1694 = _1693 * _1693;
    float _1695 = cbLight._m0[_1539].x + _384;
    float _1696 = cbLight._m0[_1539].y + _385;
    float _1697 = cbLight._m0[_1539].z + _386;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1702 = _1701 * _1695;
    float _1703 = _1701 * _1696;
    float _1704 = _1701 * _1697;
    float _1705 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1539].xyz));
    float _3742 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1709 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1710 = dot(vec3(_303, _304, _305), vec3(_1702, _1703, _1704));
    float _3764 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1702, _1703, _1704));
    float _3775 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1694 * _1694;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1730 = exp2(log2(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * 5.0);
    float _1731 = 0.959999978542327880859375 - _456;
    float _1733 = 0.959999978542327880859375 - _457;
    float _1734 = 0.959999978542327880859375 - _458;
    float _1741 = 1.0 - _1694;
    float _1752 = (0.5 / (((_1709 * ((_1708 * _1741) + _1694)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1741) + _1694) * _1708))) * _1708;
    float _3786 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1754 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    uint _1768 = _1539 + 9u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _306) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1580].x + _384;
    float _1782 = cbLight._m0[_1580].y + _385;
    float _1783 = cbLight._m0[_1580].z + _386;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1580].xyz));
    float _3797 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1795 = dot(vec3(_303, _304, _305), vec3(_1788, _1789, _1790));
    float _3808 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1788, _1789, _1790));
    float _3819 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1780 * _1780;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1814 = exp2(log2(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * 5.0);
    float _1821 = 1.0 - _1780;
    float _1831 = (0.5 / (((_1709 * ((_1794 * _1821) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1821) + _1780) * _1794))) * _1794;
    float _3830 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    float _1843 = (((((_1814 * _1731) + _459) * cbLight._m0[_1768].x) * _1833) * _1562) + ((((cbLight._m0[_1680].x * _1531) * ((_1730 * _1731) + _459)) * _1754) * _1576);
    float _1844 = (((((_1814 * _1733) + _461) * cbLight._m0[_1768].y) * _1833) * _1562) + ((((cbLight._m0[_1680].y * _1532) * ((_1730 * _1733) + _461)) * _1754) * _1576);
    float _1845 = (((((_1814 * _1734) + _462) * cbLight._m0[_1768].z) * _1833) * _1562) + ((((cbLight._m0[_1680].z * _1533) * ((_1730 * _1734) + _462)) * _1754) * _1576);
    float _1907;
    float _1909;
    float _1911;
    if (_1617)
    {
        _1907 = _1843;
        _1909 = _1844;
        _1911 = _1845;
    }
    else
    {
        uint _1913 = _1539 + 2u;
        uint _1917 = _1539 + 10u;
        float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _306) * 0.949999988079071044921875);
        float _1932 = _1931 * _1931;
        float _1933 = cbLight._m0[_1913].x + _384;
        float _1934 = cbLight._m0[_1913].y + _385;
        float _1935 = cbLight._m0[_1913].z + _386;
        float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
        float _1940 = _1939 * _1933;
        float _1941 = _1939 * _1934;
        float _1942 = _1939 * _1935;
        float _1943 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1913].xyz));
        float _3841 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1947 = dot(vec3(_303, _304, _305), vec3(_1940, _1941, _1942));
        float _3852 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1950 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1951 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_1940, _1941, _1942));
        float _3863 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1955 = _1932 * _1932;
        float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
        float _1966 = exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0);
        float _1973 = 1.0 - _1932;
        float _1983 = (0.5 / (((_1709 * ((_1946 * _1973) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _1973) + _1932) * _1946))) * _1946;
        float _3874 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1985 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
        float _1986 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1907 = (((((_1966 * _1731) + _459) * cbLight._m0[_1917].x) * _1985) * _1986) + _1843;
        _1909 = (((((_1966 * _1733) + _461) * cbLight._m0[_1917].y) * _1985) * _1986) + _1844;
        _1911 = (((((_1966 * _1734) + _462) * cbLight._m0[_1917].z) * _1985) * _1986) + _1845;
    }
    float _2021;
    float _2023;
    float _2025;
    if (_1635)
    {
        _2021 = _1907;
        _2023 = _1909;
        _2025 = _1911;
    }
    else
    {
        uint _2032 = _1539 + 3u;
        uint _2036 = _1539 + 11u;
        float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _306) * 0.949999988079071044921875);
        float _2051 = _2050 * _2050;
        float _2052 = cbLight._m0[_2032].x + _384;
        float _2053 = cbLight._m0[_2032].y + _385;
        float _2054 = cbLight._m0[_2032].z + _386;
        float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
        float _2059 = _2058 * _2052;
        float _2060 = _2058 * _2053;
        float _2061 = _2058 * _2054;
        float _2062 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2032].xyz));
        float _3890 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _2066 = dot(vec3(_303, _304, _305), vec3(_2059, _2060, _2061));
        float _3901 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2059, _2060, _2061));
        float _3912 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = _2051 * _2051;
        float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
        float _2085 = exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0);
        float _2092 = 1.0 - _2051;
        float _2102 = (0.5 / (((_1709 * ((_2065 * _2092) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1709 * _2092) + _2051) * _2065))) * _2065;
        float _3923 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
        _2021 = (((((_2085 * _1731) + _459) * cbLight._m0[_2036].x) * _2104) * _2105) + _1907;
        _2023 = (((((_2085 * _1733) + _461) * cbLight._m0[_2036].y) * _2104) * _2105) + _1909;
        _2025 = (((((_2085 * _1734) + _462) * cbLight._m0[_2036].z) * _2104) * _2105) + _1911;
    }
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    if (_1537.y == 0u)
    {
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2180;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2180;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2180;
        uvec4 _2195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2196 = _2195.x;
        uint _2207 = uint((float(_2195.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2196))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2196)));
        float _2217 = (log2(_2183 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2218 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        uint _2221 = uint(isnan(14.0) ? _2218 : (isnan(_2218) ? 14.0 : min(_2218, 14.0)));
        uvec4 _2226 = texelFetch(g_lightClusterGridBuffer, int(((_2221 << 2u) + (_2207 << 6u)) >> 2u));
        uint _2227 = _2226.x;
        uint _2228 = _2195.z;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((((1u << ((_2228 >> 4u) & 15u)) + 4294967295u) & _2227) == 0u) || ((_2228 & 240u) == 0u))
        {
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
        }
        else
        {
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            uint _2477 = 0u;
            uint _2486;
            bool _2487;
            for (;;)
            {
                _2486 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2477 << 2u)) >> 2u)).x;
                _2487 = _2486 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2487)
                {
                    frontier_phi_63_pred = _2476;
                    frontier_phi_63_pred_1 = _2475;
                    frontier_phi_63_pred_2 = _2474;
                    frontier_phi_63_pred_3 = _2473;
                    frontier_phi_63_pred_4 = _2472;
                    frontier_phi_63_pred_5 = _2471;
                }
                else
                {
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    uint _2601;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2486;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    for (;;)
                    {
                        uint _2605 = uint(findLSB(_2601)) + (_2477 << 5u);
                        uint _2602 = (_2601 + 4294967295u) & _2601;
                        uint _2607 = _2605 * 48u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 3u)).x));
                        uint _2627 = (_2605 * 48u) + 4u;
                        vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2646 = (_2605 * 48u) + 8u;
                        vec3 _2657 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x));
                        float _2661 = _2621.x - _2181;
                        float _2662 = _2621.y - _2182;
                        float _2663 = _2621.z - _2183;
                        float _2664 = dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663));
                        float _2667 = inversesqrt(_2664);
                        float _2668 = _2667 * _2661;
                        float _2669 = _2667 * _2662;
                        float _2670 = _2667 * _2663;
                        float _2671 = dot(vec3(_414, _417, _420), vec3(_2668, _2669, _2670));
                        float _2676 = 1.0 - (_2664 * _2621.w);
                        float _3949 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2677 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2678 = sqrt(_2664) * _2640.w;
                        float _2681 = 1.39999997615814208984375 / (_2678 + 1.39999997615814208984375);
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * _2671) + _2682;
                        float _2688 = _2678 * _2678;
                        float _2692 = ((isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))) * _2677) / ((_2688 * 0.699999988079071044921875) + 1.0);
                        float _2696 = (-0.0) - _2181;
                        float _2697 = (-0.0) - _2182;
                        float _2698 = (-0.0) - _2183;
                        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2713 = exp2(log2(1.0 / ((_2688 * 3.5) + 5.0)) * 0.25);
                        float _2714 = 1.0 - _490;
                        float _2721 = sqrt(1.0 - ((1.0 - (_2714 * _2714)) * (1.0 - (_2713 * _2713))));
                        float _2722 = _2721 * _2721;
                        float _2723 = _2722 * _2722;
                        float _2724 = _2703 + _2668;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
                        float _2734 = dot(vec3(_414, _417, _420), vec3(_2703, _2704, _2705));
                        float _3965 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2738 = dot(vec3(_414, _417, _420), vec3(_2730 * _2724, _2730 * _2725, _2730 * _2726));
                        float _3976 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2741 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _2745 = ((_2741 * _2741) * (_2723 + (-1.0))) + 1.0;
                        float _2746 = _2681 * _2722;
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2671) + _2747;
                        float _3987 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _2752 = 1.0 - _2722;
                        float _2762 = (0.5 / (((_2751 * ((_2737 * _2752) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2751 * _2752) + _2722) * _2737))) * _2751;
                        float _3998 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2773 = (((_2723 * 3.1415927410125732421875) * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) / ((_2745 * _2745) * ((_2688 * 2.1991131305694580078125) + 3.141590118408203125))) * _2677;
                        _2530 = (_2692 * _2640.x) + _2598;
                        _2531 = (_2692 * _2640.y) + _2599;
                        _2532 = (_2692 * _2640.z) + _2600;
                        _2527 = (_2773 * _2657.x) + _2595;
                        _2528 = (_2773 * _2657.y) + _2596;
                        _2529 = (_2773 * _2657.z) + _2597;
                        if (_2602 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2602;
                        }
                    }
                    frontier_phi_63_pred = _2532;
                    frontier_phi_63_pred_1 = _2531;
                    frontier_phi_63_pred_2 = _2530;
                    frontier_phi_63_pred_3 = _2529;
                    frontier_phi_63_pred_4 = _2528;
                    frontier_phi_63_pred_5 = _2527;
                }
                _2338 = frontier_phi_63_pred;
                _2336 = frontier_phi_63_pred_1;
                _2334 = frontier_phi_63_pred_2;
                _2332 = frontier_phi_63_pred_3;
                _2330 = frontier_phi_63_pred_4;
                _2328 = frontier_phi_63_pred_5;
                uint _2478 = _2477 + 1u;
                if (_2478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2471 = _2328;
                    _2472 = _2330;
                    _2473 = _2332;
                    _2474 = _2334;
                    _2475 = _2336;
                    _2476 = _2338;
                    _2477 = _2478;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
        }
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.z;
        uint _2344 = (_2342 >> 8u) & 15u;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((4294967295u << _2344) & _2227) == 0u)
        {
            _2439 = _2327;
            _2441 = _2329;
            _2443 = _2331;
            _2445 = _2333;
            _2447 = _2335;
            _2449 = _2337;
        }
        else
        {
            float _2464 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
            float _2465 = _2464 * _2181;
            float _2466 = _2464 * _2182;
            float _2467 = _2464 * _2183;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2344 < ((_2342 >> 12u) & 15u))
            {
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2578 = _2327;
                float _2579 = _2329;
                float _2580 = _2331;
                float _2581 = _2333;
                float _2582 = _2335;
                float _2583 = _2337;
                uint _2584 = _2344;
                uint _2593;
                bool _2594;
                for (;;)
                {
                    _2593 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                    _2594 = _2593 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2594)
                    {
                        frontier_phi_69_pred = _2583;
                        frontier_phi_69_pred_1 = _2582;
                        frontier_phi_69_pred_2 = _2581;
                        frontier_phi_69_pred_3 = _2580;
                        frontier_phi_69_pred_4 = _2579;
                        frontier_phi_69_pred_5 = _2578;
                    }
                    else
                    {
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        uint _2797 = _2593;
                        uint _2798;
                        vec4 _2823;
                        float _2824;
                        vec4 _2839;
                        vec3 _2851;
                        vec4 _2867;
                        vec4 _2883;
                        float _2930;
                        bool _2931;
                        for (;;)
                        {
                            uint _2808 = ((_2584 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2797));
                            _2798 = (_2797 + 4294967295u) & _2797;
                            uint _2810 = _2808 * 40u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            _2824 = _2823.w;
                            uint _2826 = (_2808 * 40u) + 4u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2841 = (_2808 * 40u) + 8u;
                            _2851 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x));
                            uint _2854 = (_2808 * 40u) + 16u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2870 = (_2808 * 40u) + 20u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2886 = (_2808 * 40u) + 24u;
                            vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2905 = (_2808 * 40u) + 28u;
                            vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2930 = fma(_2183, _2918.z, fma(_2182, _2918.y, _2918.x * _2181)) + _2918.w;
                            _2931 = !((fma(_2183, _2899.z, fma(_2182, _2899.y, _2899.x * _2181)) + _2899.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2931)
                            {
                                float _2958 = _2823.x - _2181;
                                float _2959 = _2823.y - _2182;
                                float _2960 = _2823.z - _2183;
                                float _2961 = dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960));
                                float _2964 = inversesqrt(_2961);
                                float _2965 = _2964 * _2958;
                                float _2966 = _2964 * _2959;
                                float _2967 = _2964 * _2960;
                                float _2971 = 1.0 - (_2961 / (_2824 * _2824));
                                float _4009 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2972 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _2976 = sqrt(_2961) * _2839.w;
                                float _2978 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                                float _2979 = _2978 * _2978;
                                float _2982 = ((1.0 - _2979) * dot(vec3(_2965, _2966, _2967), vec3(_414, _417, _420))) + _2979;
                                float _2985 = _2976 * _2976;
                                float _2989 = (fma(_2183, _2867.z, fma(_2182, _2867.y, _2867.x * _2181)) + _2867.w) / _2930;
                                float _2990 = (fma(_2183, _2883.z, fma(_2182, _2883.y, _2883.x * _2181)) + _2883.w) / _2930;
                                float _2994 = 1.0 - dot(vec2(_2989, _2990), vec2(_2989, _2990));
                                float _4025 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _2996 = _2995 * (((isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))) * _2972) / ((_2985 * 0.699999988079071044921875) + 1.0));
                                float _3008 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                                float _3009 = 1.0 - _490;
                                float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                                float _3017 = _3016 * _3016;
                                float _3018 = _3017 * _3017;
                                float _3019 = _2965 - _2465;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                                float _3029 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2465, (-0.0) - _2466, (-0.0) - _2467));
                                float _4036 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3032 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3033 = dot(vec3(_414, _417, _420), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                                float _4047 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3036 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                                float _3041 = _2978 * _3017;
                                float _3042 = _3041 * _3041;
                                float _3048 = ((1.0 - _3042) * dot(vec3(_414, _417, _420), vec3(_2965, _2966, _2967))) + _3042;
                                float _4058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3050 = 1.0 - _3017;
                                float _3060 = (0.5 / (((_3049 * ((_3032 * _3050) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3017) * _3032))) * _3049;
                                float _4069 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3070 = (_2995 * _2972) * (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) / ((_3040 * _3040) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2996 * _2839.z;
                                frontier_phi_75_pred_1 = _2996 * _2839.y;
                                frontier_phi_75_pred_2 = _2996 * _2839.x;
                                frontier_phi_75_pred_3 = _3070 * _2851.z;
                                frontier_phi_75_pred_4 = _3070 * _2851.y;
                                frontier_phi_75_pred_5 = _3070 * _2851.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3079 = frontier_phi_75_pred;
                            _3078 = frontier_phi_75_pred_1;
                            _3077 = frontier_phi_75_pred_2;
                            _3076 = frontier_phi_75_pred_3;
                            _3075 = frontier_phi_75_pred_4;
                            _3074 = frontier_phi_75_pred_5;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            if (_2798 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2798;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2783;
                        frontier_phi_69_pred_1 = _2782;
                        frontier_phi_69_pred_2 = _2781;
                        frontier_phi_69_pred_3 = _2780;
                        frontier_phi_69_pred_4 = _2779;
                        frontier_phi_69_pred_5 = _2778;
                    }
                    _2450 = frontier_phi_69_pred;
                    _2448 = frontier_phi_69_pred_1;
                    _2446 = frontier_phi_69_pred_2;
                    _2444 = frontier_phi_69_pred_3;
                    _2442 = frontier_phi_69_pred_4;
                    _2440 = frontier_phi_69_pred_5;
                    uint _2585 = _2584 + 1u;
                    if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2578 = _2440;
                        _2579 = _2442;
                        _2580 = _2444;
                        _2581 = _2446;
                        _2582 = _2448;
                        _2583 = _2450;
                        _2584 = _2585;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2450;
                frontier_phi_57_58_ladder_1 = _2448;
                frontier_phi_57_58_ladder_2 = _2446;
                frontier_phi_57_58_ladder_3 = _2444;
                frontier_phi_57_58_ladder_4 = _2442;
                frontier_phi_57_58_ladder_5 = _2440;
            }
            else
            {
                frontier_phi_57_58_ladder = _2337;
                frontier_phi_57_58_ladder_1 = _2335;
                frontier_phi_57_58_ladder_2 = _2333;
                frontier_phi_57_58_ladder_3 = _2331;
                frontier_phi_57_58_ladder_4 = _2329;
                frontier_phi_57_58_ladder_5 = _2327;
            }
            _2439 = frontier_phi_57_58_ladder_5;
            _2441 = frontier_phi_57_58_ladder_4;
            _2443 = frontier_phi_57_58_ladder_3;
            _2445 = frontier_phi_57_58_ladder_2;
            _2447 = frontier_phi_57_58_ladder_1;
            _2449 = frontier_phi_57_58_ladder;
        }
        float _2454 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2239 = (_2454 * _2445) + _1673;
        _2241 = (_2454 * _2447) + _1675;
        _2243 = (_2454 * _2449) + _1677;
        _2245 = ((_2439 * _459) * _2454) + _2021;
        _2247 = ((_2441 * _461) * _2454) + _2023;
        _2249 = ((_2443 * _462) * _2454) + _2025;
    }
    else
    {
        _2239 = _1673;
        _2241 = _1675;
        _2243 = _1677;
        _2245 = _2021;
        _2247 = _2023;
        _2249 = _2025;
    }
    float _4085 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4096 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4107 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _2269 = _433 + 6u;
    float _2277 = _392 / cbSceneParam._m0[86u].x;
    float _2278 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2294 = _2292.x;
    float _2295 = _2292.y;
    float _2296 = _2292.z;
    float _2297 = _2292.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2352 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2353 = _2352 / _326;
        float _2364 = _2353 * _377;
        float _2365 = _378 * _2353;
        float _2366 = (-0.0) - _2365;
        float _2367 = _2353 * _379;
        float _2369 = (cbSceneParam._m0[77u].w * _2366) / _2352;
        float _2370 = _2369 + cbSceneParam._m0[79u].w;
        float _2371 = cbSceneParam._m0[79u].w - _2365;
        float _2377 = sqrt(((_2364 * _2364) + (_2365 * _2365)) + (_2367 * _2367));
        float _2380 = (1.0 - (cbSceneParam._m0[77u].w / _2352)) * _2377;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2540;
        if (abs((_2366 - _2369) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2540 = ((((_2370 > 0.0) ? exp2(_2385 * _2370) : (2.0 - exp2(_2387 * _2370))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2380;
        }
        else
        {
            float _2500 = 1.0 / cbSceneParam._m0[80u].x;
            float _2501 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : max(_2370, _2371));
            float _2502 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : min(_2370, _2371));
            float _2511 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : min(_2501, 0.0));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            _2540 = ((abs(_2377 / _2366) * cbSceneParam._m0[80u].y) * ((((_2511 - _2512) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0))))) * _2500)) - ((exp2(_2387 * _2511) - exp2(_2387 * _2512)) * _2500))) + (_2380 * cbSceneParam._m0[80u].z);
        }
        vec4 _2542 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, 1.0), 0.0);
        float _2551 = exp2((_2540 * (-1.44269502162933349609375)) * (1.0 - _2542.w));
        float _2552 = log2(_2551);
        float _2568 = log2(_2297);
        _2389 = (exp2(_2568 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2552 * cbSceneParam._m0[78u].x)) * _2542.x) / cbSceneParam._m0[78u].x)) + _2294;
        _2391 = (exp2(_2568 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2552 * cbSceneParam._m0[78u].y)) * _2542.y) / cbSceneParam._m0[78u].y)) + _2295;
        _2393 = (exp2(_2568 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2552 * cbSceneParam._m0[78u].z)) * _2542.z) / cbSceneParam._m0[78u].z)) + _2296;
        _2395 = _2551 * _2297;
    }
    else
    {
        _2389 = _2294;
        _2391 = _2295;
        _2393 = _2296;
        _2395 = _2297;
    }
    float _2407 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2408 = _2407 == 3.0;
    float _2409 = log2(_2395);
    float _2416 = exp2(_2409 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2239 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _474))) + ((_2245 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2417 = exp2(_2409 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2241 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _474))) + ((_2247 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2409 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2243 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _474))) + ((_2249 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1284)) * cbPerFrame._m0[3u].x));
    float _2427 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2427 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.y = _2427 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.z = _2427 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.w = cbInstanceData._m0[_2269].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2269].w;
}


