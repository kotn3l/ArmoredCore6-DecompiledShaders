#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _862;
float _3256;
float _3257;
float _3258;
float _3259;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _255.z;
    float _264 = (_255.x * 2.0) + (-1.0);
    float _266 = (_255.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3268 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))));
    float _278 = cbMtdParam._m0[10u].x + _255.w;
    float _281 = fma(_273, _213, fma(_266, _205 * TANGENT.x, (_191 * _184) * _264));
    float _284 = fma(_273, _214, fma(_266, _205 * TANGENT.y, (_191 * _185) * _264));
    float _287 = fma(_273, _215, fma(_266, _205 * TANGENT.z, (_191 * _186) * _264));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _3279 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _295 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3301 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3312 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3323 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _541 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _547 = (cbMatDynParam._m0[5u].x * _541) + cbMatDynParam._m0[5u].y;
        float _3334 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        float _548 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _552 = (cbMatDynParam._m0[5u].z * _541) + cbMatDynParam._m0[5u].w;
        float _3345 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) - _548)) + _548) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_294, cbSceneParam._m0[5u].z, fma(_293, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _292));
    float _418 = fma(_294, cbSceneParam._m0[6u].z, fma(_293, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _292));
    float _421 = fma(_294, cbSceneParam._m0[7u].z, fma(_293, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _292));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3356 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _461 = ((isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * TEXCOORD.z) * _457.x;
    float _462 = dot(vec3(_292, _293, _294), vec3(_373, _374, _375));
    float _465 = _462 * 2.0;
    float _469 = (_465 * _292) - _373;
    float _470 = (_465 * _293) - _374;
    float _471 = (_465 * _294) - _375;
    float _475 = abs(dot(vec3(_373, _374, _375), vec3(_292, _293, _294)));
    float _3389 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = sqrt(_295);
    float _490 = exp2((_477 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_477 * 3.0));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _861;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = fma(_530, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522));
        float _590 = fma(_530, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522));
        float _594 = fma(_530, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522));
        float _619 = _522 + _292;
        float _620 = _526 + _293;
        float _621 = _530 + _294;
        float _631 = fma(_621, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619)) - _586;
        float _632 = fma(_621, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619)) - _590;
        float _633 = fma(_621, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619)) - _594;
        float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
        float _650 = ((_637 * _631) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_586 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_637 * _632) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_590 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_637 * _633) / cbModelParam._m0[34u].z) + ((((((_594 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        float _689 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_655.x + (-0.5));
        float _691 = _689 * (_655.y + (-0.5));
        float _692 = _689 * (_655.z + (-0.5));
        float _699 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_662.x + (-0.5));
        float _701 = _699 * (_662.y + (-0.5));
        float _702 = _699 * (_662.z + (-0.5));
        float _709 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_669.x + (-0.5));
        float _711 = _709 * (_669.y + (-0.5));
        float _712 = _709 * (_669.z + (-0.5));
        float _719 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_676.x + (-0.5));
        float _721 = _719 * (_676.y + (-0.5));
        float _722 = _719 * (_676.z + (-0.5));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = _690 * 0.5;
        float _727 = _700 * 0.5;
        float _728 = _710 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _743 = (dot(vec3(_292, _293, _294), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _753 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3437 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_755 + 1.0))) + _760) * _723;
        float _770 = _691 * 0.5;
        float _771 = _701 * 0.5;
        float _772 = _711 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _786 = (dot(vec3(_292, _293, _294), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _795 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3470 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_797 + 1.0))) + _802) * _724;
        float _812 = _692 * 0.5;
        float _813 = _702 * 0.5;
        float _814 = _712 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_292, _293, _294), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3503 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_839 + 1.0))) + _844) * _725;
        _861 = _692;
        _863 = _691;
        _864 = _690;
        _865 = _702;
        _866 = _701;
        _867 = _700;
        _868 = _712;
        _869 = _711;
        _870 = _710;
        _871 = _725;
        _872 = _724;
        _873 = _723;
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
    }
    else
    {
        _861 = _862;
        _863 = _862;
        _864 = _862;
        _865 = _862;
        _866 = _862;
        _867 = _862;
        _868 = _862;
        _869 = _862;
        _870 = _862;
        _871 = _862;
        _872 = _862;
        _873 = _862;
        _874 = 0.0;
        _875 = 0.0;
        _876 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_530, cbModelParam._m0[30u].z, fma(_526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _522));
        float _909 = fma(_530, cbModelParam._m0[31u].z, fma(_526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _522));
        float _913 = fma(_530, cbModelParam._m0[32u].z, fma(_526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _522));
        float _936 = _522 + _292;
        float _937 = _526 + _293;
        float _938 = _530 + _294;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_292, _293, _294), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3566 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_292, _293, _294), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3599 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_292, _293, _294), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3632 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _862;
        _1175 = _862;
        _1176 = _862;
        _1177 = _862;
        _1178 = _862;
        _1179 = _862;
        _1180 = _862;
        _1181 = _862;
        _1182 = _862;
        _1183 = _862;
        _1184 = _862;
        _1185 = _862;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _874)) + _874;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _875)) + _875;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _876)) + _876;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _469 * 0.5;
    float _1243 = _470 * 0.5;
    float _1244 = _471 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_861, _865, _868, _871));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_863, _866, _869, _872));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _867, _870, _873));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_530, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_530, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_530, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1374 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1377 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1405 = frontier_phi_19_17_ladder;
        }
        float _1632;
        if (_1374 > 0.0)
        {
            _1632 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1632 = frontier_phi_28_24_ladder;
        }
        float _1878;
        if (_1377 > 0.0)
        {
            _1878 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1878 = frontier_phi_40_35_ladder;
        }
        float _1880 = isnan(_1632) ? _1405 : (isnan(_1405) ? _1632 : min(_1405, _1632));
        float _1881 = isnan(_1878) ? _1880 : (isnan(_1880) ? _1878 : min(_1880, _1878));
        float _1885 = (_1881 * _1371) + _1360;
        float _1886 = (_1881 * _1374) + _1364;
        float _1887 = (_1881 * _1377) + _1368;
        float _1888 = _1881 * 9.9999997473787516355514526367188e-05;
        float _1890 = (-1.0) - _1888;
        float _1892 = _1888 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1887 > _1892) || ((_1887 < _1890) || ((_1886 > _1892) || ((_1886 < _1890) || ((_1885 < _1890) || (_1885 > _1892))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1887, cbModelParam._m0[9u].z, fma(_1886, cbModelParam._m0[9u].y, _1885 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1887, cbModelParam._m0[10u].z, fma(_1886, cbModelParam._m0[10u].y, _1885 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1887, cbModelParam._m0[11u].z, fma(_1886, cbModelParam._m0[11u].y, _1885 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_18_40_ladder = _2011.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2011.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2011.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_18_40_ladder_2;
        _1395 = frontier_phi_18_40_ladder_1;
        _1397 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_530, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_530, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_530, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1473 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1476 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1637;
        if (_1470 > 0.0)
        {
            _1637 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1637 = frontier_phi_30_26_ladder;
        }
        float _1905;
        if (_1473 > 0.0)
        {
            _1905 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1905 = frontier_phi_42_37_ladder;
        }
        float _2110;
        if (_1476 > 0.0)
        {
            _2110 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2110 = frontier_phi_51_48_ladder;
        }
        float _2112 = isnan(_1905) ? _1637 : (isnan(_1637) ? _1905 : min(_1637, _1905));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1470) + _1459;
        float _2118 = (_2113 * _1473) + _1463;
        float _2119 = (_2113 * _1476) + _1467;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2120;
        float _2123 = _2120 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2119 > _2123) || ((_2119 < _2121) || ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 < _2121) || (_2117 > _2123))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2119, cbModelParam._m0[17u].z, fma(_2118, cbModelParam._m0[17u].y, _2117 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2119, cbModelParam._m0[18u].z, fma(_2118, cbModelParam._m0[18u].y, _2117 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2119, cbModelParam._m0[19u].z, fma(_2118, cbModelParam._m0[19u].y, _2117 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_27_51_ladder = _2317.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2317.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2317.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_27_51_ladder_2;
        _1497 = frontier_phi_27_51_ladder_1;
        _1499 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1511 = ((((1.0 - _490) * ((_477 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_490 * _477)) * _461;
    float _1512 = _1511 * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1513 = _1511 * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1514 = _1511 * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1517 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    vec4 _1531 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_394, _395));
    float _1533 = _1531.w;
    float _1545 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1533);
    float _1546 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1533);
    float _1547 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1533);
    uvec4 _1551 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1553 = _1551.x * 14u;
    uint _1554 = _1553 + 13u;
    float _1561 = _461 + (-1.0);
    float _1566 = (cbLight._m0[_1554].x * _1561) + 1.0;
    float _1567 = (cbLight._m0[_1554].y * _1561) + 1.0;
    float _1568 = (cbLight._m0[_1554].z * _1561) + 1.0;
    float _1569 = (cbLight._m0[_1554].w * _1561) + 1.0;
    uint _1570 = _1553 + 5u;
    float _1576 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1580 = _1553 + 4u;
    float _1590 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1594 = _1553 | 1u;
    float _1605 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_292, _293, _294));
    float _1608 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_292, _293, _294));
    float _3768 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _3779 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1613 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1615 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1622 = ((cbLight._m0[_1570].x * _1576) * _1615) + (((cbLight._m0[_1580].x * _1545) * _1590) * _1613);
    float _1623 = ((_1576 * cbLight._m0[_1570].y) * _1615) + (((cbLight._m0[_1580].y * _1546) * _1590) * _1613);
    float _1624 = ((_1576 * cbLight._m0[_1570].z) * _1615) + (((cbLight._m0[_1580].z * _1547) * _1590) * _1613);
    uvec4 _1629 = floatBitsToUint(cbLight._m0[_1553 + 12u]);
    bool _1631 = _1629.x == 0u;
    float _1642;
    float _1644;
    float _1646;
    if (_1631)
    {
        _1642 = _1622;
        _1644 = _1623;
        _1646 = _1624;
    }
    else
    {
        uint _1650 = _1553 + 6u;
        float _1666 = (dot(vec3(cbLight._m0[_1553 + 2u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1667 = _1666 * _1666;
        float _3790 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1669 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1642 = (((cbLight._m0[_1650].x * 0.3183098733425140380859375) * _1668) * _1669) + _1622;
        _1644 = (((cbLight._m0[_1650].y * 0.3183098733425140380859375) * _1668) * _1669) + _1623;
        _1646 = (((cbLight._m0[_1650].z * 0.3183098733425140380859375) * _1668) * _1669) + _1624;
    }
    bool _1649 = _1629.y == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1649)
    {
        _1687 = _1642;
        _1689 = _1644;
        _1691 = _1646;
    }
    else
    {
        uint _1849 = _1553 + 7u;
        float _1865 = (dot(vec3(cbLight._m0[_1553 + 3u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1866 = _1865 * _1865;
        float _3806 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1868 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1687 = (((cbLight._m0[_1849].x * 0.3183098733425140380859375) * _1867) * _1868) + _1642;
        _1689 = (((cbLight._m0[_1849].y * 0.3183098733425140380859375) * _1867) * _1868) + _1644;
        _1691 = (((cbLight._m0[_1849].z * 0.3183098733425140380859375) * _1867) * _1868) + _1646;
    }
    uint _1694 = _1553 + 8u;
    float _1707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _295) * 0.949999988079071044921875);
    float _1708 = _1707 * _1707;
    float _1709 = cbLight._m0[_1553].x + _373;
    float _1710 = cbLight._m0[_1553].y + _374;
    float _1711 = cbLight._m0[_1553].z + _375;
    float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
    float _1716 = _1715 * _1709;
    float _1717 = _1715 * _1710;
    float _1718 = _1715 * _1711;
    float _1719 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1553].xyz));
    float _3822 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1722 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _1723 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1724 = dot(vec3(_292, _293, _294), vec3(_1716, _1717, _1718));
    float _3844 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1728 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1716, _1717, _1718));
    float _3855 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1732 = _1708 * _1708;
    float _1736 = ((_1727 * _1727) * (_1732 + (-1.0))) + 1.0;
    float _1747 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1748 = 1.0 - _1708;
    float _1759 = (0.5 / (((_1723 * ((_1722 * _1748) + _1708)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1748) + _1708) * _1722))) * _1722;
    float _3866 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1761 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1732 / ((_1736 * _1736) * 3.141590118408203125));
    uint _1775 = _1553 + 9u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _295) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1594].x + _373;
    float _1789 = cbLight._m0[_1594].y + _374;
    float _1790 = cbLight._m0[_1594].z + _375;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1594].xyz));
    float _3877 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1802 = dot(vec3(_292, _293, _294), vec3(_1795, _1796, _1797));
    float _3888 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1806 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1795, _1796, _1797));
    float _3899 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1810 = _1787 * _1787;
    float _1814 = ((_1805 * _1805) * (_1810 + (-1.0))) + 1.0;
    float _1823 = (exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1824 = 1.0 - _1787;
    float _1834 = (0.5 / (((_1723 * ((_1801 * _1824) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1824) + _1787) * _1801))) * _1801;
    float _3910 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1836 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1810 / ((_1814 * _1814) * 3.141590118408203125));
    float _1846 = (((_1823 * cbLight._m0[_1775].x) * _1836) * _1576) + ((((cbLight._m0[_1694].x * _1545) * _1747) * _1761) * _1590);
    float _1847 = (((_1823 * cbLight._m0[_1775].y) * _1836) * _1576) + ((((cbLight._m0[_1694].y * _1546) * _1747) * _1761) * _1590);
    float _1848 = (((_1823 * cbLight._m0[_1775].z) * _1836) * _1576) + ((((cbLight._m0[_1694].z * _1547) * _1747) * _1761) * _1590);
    float _1910;
    float _1912;
    float _1914;
    if (_1631)
    {
        _1910 = _1846;
        _1912 = _1847;
        _1914 = _1848;
    }
    else
    {
        uint _1916 = _1553 + 2u;
        uint _1920 = _1553 + 10u;
        float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _295) * 0.949999988079071044921875);
        float _1935 = _1934 * _1934;
        float _1936 = cbLight._m0[_1916].x + _373;
        float _1937 = cbLight._m0[_1916].y + _374;
        float _1938 = cbLight._m0[_1916].z + _375;
        float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
        float _1943 = _1942 * _1936;
        float _1944 = _1942 * _1937;
        float _1945 = _1942 * _1938;
        float _1946 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1916].xyz));
        float _3921 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1949 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1950 = dot(vec3(_292, _293, _294), vec3(_1943, _1944, _1945));
        float _3932 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1954 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_1943, _1944, _1945));
        float _3943 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1958 = _1935 * _1935;
        float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
        float _1971 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1972 = 1.0 - _1935;
        float _1982 = (0.5 / (((_1723 * ((_1949 * _1972) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _1972) + _1935) * _1949))) * _1949;
        float _3954 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1984 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
        float _1985 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1910 = (((_1971 * cbLight._m0[_1920].x) * _1984) * _1985) + _1846;
        _1912 = (((_1971 * cbLight._m0[_1920].y) * _1984) * _1985) + _1847;
        _1914 = (((_1971 * cbLight._m0[_1920].z) * _1984) * _1985) + _1848;
    }
    float _2020;
    float _2022;
    float _2024;
    if (_1649)
    {
        _2020 = _1910;
        _2022 = _1912;
        _2024 = _1914;
    }
    else
    {
        uint _2031 = _1553 + 3u;
        uint _2035 = _1553 + 11u;
        float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _295) * 0.949999988079071044921875);
        float _2050 = _2049 * _2049;
        float _2051 = cbLight._m0[_2031].x + _373;
        float _2052 = cbLight._m0[_2031].y + _374;
        float _2053 = cbLight._m0[_2031].z + _375;
        float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
        float _2058 = _2057 * _2051;
        float _2059 = _2057 * _2052;
        float _2060 = _2057 * _2053;
        float _2061 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2031].xyz));
        float _3970 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2065 = dot(vec3(_292, _293, _294), vec3(_2058, _2059, _2060));
        float _3981 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2069 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2058, _2059, _2060));
        float _3992 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2073 = _2050 * _2050;
        float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
        float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2087 = 1.0 - _2050;
        float _2097 = (0.5 / (((_1723 * ((_2064 * _2087) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1723 * _2087) + _2050) * _2064))) * _2064;
        float _4003 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2099 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
        float _2100 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _2020 = (((_2086 * cbLight._m0[_2035].x) * _2099) * _2100) + _1910;
        _2022 = (((_2086 * cbLight._m0[_2035].y) * _2099) * _2100) + _1912;
        _2024 = (((_2086 * cbLight._m0[_2035].z) * _2099) * _2100) + _1914;
    }
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_1551.y == 0u)
    {
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2175;
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2175;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2175;
        uvec4 _2190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2191 = _2190.x;
        uint _2202 = uint((float(_2190.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2191))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2191)));
        float _2212 = (log2(_2178 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2213 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        uint _2216 = uint(isnan(14.0) ? _2213 : (isnan(_2213) ? 14.0 : min(_2213, 14.0)));
        uvec4 _2221 = texelFetch(g_lightClusterGridBuffer, int(((_2216 << 2u) + (_2202 << 6u)) >> 2u));
        uint _2222 = _2221.x;
        uint _2223 = _2190.z;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        if (((((1u << ((_2223 >> 4u) & 15u)) + 4294967295u) & _2222) == 0u) || ((_2223 & 240u) == 0u))
        {
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
        }
        else
        {
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            uint _2480 = 0u;
            uint _2489;
            bool _2490;
            for (;;)
            {
                _2489 = texelFetch(g_lightClassification, int((((_2216 << 5u) + (_2202 << 9u)) + (_2480 << 2u)) >> 2u)).x;
                _2490 = _2489 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2490)
                {
                    frontier_phi_68_pred = _2476;
                    frontier_phi_68_pred_1 = _2479;
                    frontier_phi_68_pred_2 = _2478;
                    frontier_phi_68_pred_3 = _2477;
                    frontier_phi_68_pred_4 = _2475;
                    frontier_phi_68_pred_5 = _2474;
                }
                else
                {
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    uint _2625;
                    _2619 = _2474;
                    _2620 = _2475;
                    _2621 = _2476;
                    _2622 = _2477;
                    _2623 = _2478;
                    _2624 = _2479;
                    _2625 = _2489;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    for (;;)
                    {
                        uint _2629 = uint(findLSB(_2625)) + (_2480 << 5u);
                        uint _2626 = (_2625 + 4294967295u) & _2625;
                        uint _2631 = _2629 * 48u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2651 = (_2629 * 48u) + 4u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2670 = (_2629 * 48u) + 8u;
                        vec3 _2681 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x));
                        float _2685 = _2645.x - _2176;
                        float _2686 = _2645.y - _2177;
                        float _2687 = _2645.z - _2178;
                        float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                        float _2691 = inversesqrt(_2688);
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2695 = dot(vec3(_415, _418, _421), vec3(_2692, _2693, _2694));
                        float _2700 = 1.0 - (_2688 * _2645.w);
                        float _4029 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2702 = sqrt(_2688) * _2664.w;
                        float _2705 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                        float _2706 = _2705 * _2705;
                        float _2709 = ((1.0 - _2706) * _2695) + _2706;
                        float _2712 = _2702 * _2702;
                        float _2716 = ((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2701) / ((_2712 * 0.699999988079071044921875) + 1.0);
                        float _2720 = (-0.0) - _2176;
                        float _2721 = (-0.0) - _2177;
                        float _2722 = (-0.0) - _2178;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2737 = exp2(log2(1.0 / ((_2712 * 3.5) + 5.0)) * 0.25);
                        float _2738 = 1.0 - _477;
                        float _2745 = sqrt(1.0 - ((1.0 - (_2738 * _2738)) * (1.0 - (_2737 * _2737))));
                        float _2746 = _2745 * _2745;
                        float _2747 = _2746 * _2746;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2758 = dot(vec3(_415, _418, _421), vec3(_2727, _2728, _2729));
                        float _4045 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2762 = dot(vec3(_415, _418, _421), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750));
                        float _4056 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2769 = ((_2765 * _2765) * (_2747 + (-1.0))) + 1.0;
                        float _2770 = _2705 * _2746;
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2695) + _2771;
                        float _4067 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2776 = 1.0 - _2746;
                        float _2786 = (0.5 / (((_2775 * ((_2761 * _2776) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2775 * _2776) + _2746) * _2761))) * _2775;
                        float _4078 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2797 = (((_2747 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_2769 * _2769) * ((_2712 * 2.1991131305694580078125) + 3.141590118408203125))) * _2701;
                        _2549 = (_2716 * _2664.x) + _2622;
                        _2550 = (_2716 * _2664.y) + _2623;
                        _2551 = (_2716 * _2664.z) + _2624;
                        _2546 = (_2797 * _2681.x) + _2619;
                        _2547 = (_2797 * _2681.y) + _2620;
                        _2548 = (_2797 * _2681.z) + _2621;
                        if (_2626 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2619 = _2546;
                            _2620 = _2547;
                            _2621 = _2548;
                            _2622 = _2549;
                            _2623 = _2550;
                            _2624 = _2551;
                            _2625 = _2626;
                        }
                    }
                    frontier_phi_68_pred = _2548;
                    frontier_phi_68_pred_1 = _2551;
                    frontier_phi_68_pred_2 = _2550;
                    frontier_phi_68_pred_3 = _2549;
                    frontier_phi_68_pred_4 = _2547;
                    frontier_phi_68_pred_5 = _2546;
                }
                _2327 = frontier_phi_68_pred;
                _2333 = frontier_phi_68_pred_1;
                _2331 = frontier_phi_68_pred_2;
                _2329 = frontier_phi_68_pred_3;
                _2325 = frontier_phi_68_pred_4;
                _2323 = frontier_phi_68_pred_5;
                uint _2481 = _2480 + 1u;
                if (_2481 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2474 = _2323;
                    _2475 = _2325;
                    _2476 = _2327;
                    _2477 = _2329;
                    _2478 = _2331;
                    _2479 = _2333;
                    _2480 = _2481;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
        }
        uvec4 _2336 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2337 = _2336.z;
        uint _2339 = (_2337 >> 8u) & 15u;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        if (((4294967295u << _2339) & _2222) == 0u)
        {
            _2442 = _2322;
            _2444 = _2324;
            _2446 = _2326;
            _2448 = _2328;
            _2450 = _2330;
            _2452 = _2332;
        }
        else
        {
            float _2467 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
            float _2468 = _2467 * _2176;
            float _2469 = _2467 * _2177;
            float _2470 = _2467 * _2178;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2339 < ((_2337 >> 12u) & 15u))
            {
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2602 = _2322;
                float _2603 = _2324;
                float _2604 = _2326;
                float _2605 = _2328;
                float _2606 = _2330;
                float _2607 = _2332;
                uint _2608 = _2339;
                uint _2617;
                bool _2618;
                for (;;)
                {
                    _2617 = texelFetch(g_lightClassification, int((((_2216 << 5u) + (_2202 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                    _2618 = _2617 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2618)
                    {
                        frontier_phi_79_pred = _2607;
                        frontier_phi_79_pred_1 = _2606;
                        frontier_phi_79_pred_2 = _2605;
                        frontier_phi_79_pred_3 = _2604;
                        frontier_phi_79_pred_4 = _2603;
                        frontier_phi_79_pred_5 = _2602;
                    }
                    else
                    {
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _2824 = _2602;
                        float _2825 = _2603;
                        float _2826 = _2604;
                        float _2827 = _2605;
                        float _2828 = _2606;
                        float _2829 = _2607;
                        uint _2830 = _2617;
                        uint _2831;
                        vec4 _2856;
                        float _2857;
                        vec4 _2872;
                        vec3 _2884;
                        vec4 _2900;
                        vec4 _2916;
                        float _2963;
                        bool _2964;
                        for (;;)
                        {
                            uint _2841 = ((_2608 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2830));
                            _2831 = (_2830 + 4294967295u) & _2830;
                            uint _2843 = _2841 * 40u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            _2857 = _2856.w;
                            uint _2859 = (_2841 * 40u) + 4u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2874 = (_2841 * 40u) + 8u;
                            _2884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x));
                            uint _2887 = (_2841 * 40u) + 16u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2841 * 40u) + 20u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2919 = (_2841 * 40u) + 24u;
                            vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2938 = (_2841 * 40u) + 28u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2963 = fma(_2178, _2951.z, fma(_2177, _2951.y, _2951.x * _2176)) + _2951.w;
                            _2964 = !((fma(_2178, _2932.z, fma(_2177, _2932.y, _2932.x * _2176)) + _2932.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2964)
                            {
                                float _2991 = _2856.x - _2176;
                                float _2992 = _2856.y - _2177;
                                float _2993 = _2856.z - _2178;
                                float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                                float _2997 = inversesqrt(_2994);
                                float _2998 = _2997 * _2991;
                                float _2999 = _2997 * _2992;
                                float _3000 = _2997 * _2993;
                                float _3004 = 1.0 - (_2994 / (_2857 * _2857));
                                float _4089 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3009 = sqrt(_2994) * _2872.w;
                                float _3011 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                                float _3012 = _3011 * _3011;
                                float _3015 = ((1.0 - _3012) * dot(vec3(_2998, _2999, _3000), vec3(_415, _418, _421))) + _3012;
                                float _3018 = _3009 * _3009;
                                float _3022 = (fma(_2178, _2900.z, fma(_2177, _2900.y, _2900.x * _2176)) + _2900.w) / _2963;
                                float _3023 = (fma(_2178, _2916.z, fma(_2177, _2916.y, _2916.x * _2176)) + _2916.w) / _2963;
                                float _3027 = 1.0 - dot(vec2(_3022, _3023), vec2(_3022, _3023));
                                float _4105 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3029 = _3028 * (((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3005) / ((_3018 * 0.699999988079071044921875) + 1.0));
                                float _3041 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                                float _3042 = 1.0 - _477;
                                float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                                float _3050 = _3049 * _3049;
                                float _3051 = _3050 * _3050;
                                float _3052 = _2998 - _2468;
                                float _3053 = _2999 - _2469;
                                float _3054 = _3000 - _2470;
                                float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                                float _3062 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2468, (-0.0) - _2469, (-0.0) - _2470));
                                float _4116 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3065 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3066 = dot(vec3(_415, _418, _421), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                                float _4127 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                                float _3074 = _3011 * _3050;
                                float _3075 = _3074 * _3074;
                                float _3081 = ((1.0 - _3075) * dot(vec3(_415, _418, _421), vec3(_2998, _2999, _3000))) + _3075;
                                float _4138 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3083 = 1.0 - _3050;
                                float _3093 = (0.5 / (((_3082 * ((_3065 * _3083) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3050) * _3065))) * _3082;
                                float _4149 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3103 = (_3028 * _3005) * (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) / ((_3073 * _3073) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3029 * _2872.z;
                                frontier_phi_85_pred_1 = _3029 * _2872.y;
                                frontier_phi_85_pred_2 = _3029 * _2872.x;
                                frontier_phi_85_pred_3 = _3103 * _2884.z;
                                frontier_phi_85_pred_4 = _3103 * _2884.y;
                                frontier_phi_85_pred_5 = _3103 * _2884.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3112 = frontier_phi_85_pred;
                            _3111 = frontier_phi_85_pred_1;
                            _3110 = frontier_phi_85_pred_2;
                            _3109 = frontier_phi_85_pred_3;
                            _3108 = frontier_phi_85_pred_4;
                            _3107 = frontier_phi_85_pred_5;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            if (_2831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2831;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2816;
                        frontier_phi_79_pred_1 = _2815;
                        frontier_phi_79_pred_2 = _2814;
                        frontier_phi_79_pred_3 = _2813;
                        frontier_phi_79_pred_4 = _2812;
                        frontier_phi_79_pred_5 = _2811;
                    }
                    _2453 = frontier_phi_79_pred;
                    _2451 = frontier_phi_79_pred_1;
                    _2449 = frontier_phi_79_pred_2;
                    _2447 = frontier_phi_79_pred_3;
                    _2445 = frontier_phi_79_pred_4;
                    _2443 = frontier_phi_79_pred_5;
                    uint _2609 = _2608 + 1u;
                    if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2602 = _2443;
                        _2603 = _2445;
                        _2604 = _2447;
                        _2605 = _2449;
                        _2606 = _2451;
                        _2607 = _2453;
                        _2608 = _2609;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2449;
                frontier_phi_60_61_ladder_1 = _2453;
                frontier_phi_60_61_ladder_2 = _2451;
                frontier_phi_60_61_ladder_3 = _2447;
                frontier_phi_60_61_ladder_4 = _2445;
                frontier_phi_60_61_ladder_5 = _2443;
            }
            else
            {
                frontier_phi_60_61_ladder = _2328;
                frontier_phi_60_61_ladder_1 = _2332;
                frontier_phi_60_61_ladder_2 = _2330;
                frontier_phi_60_61_ladder_3 = _2326;
                frontier_phi_60_61_ladder_4 = _2324;
                frontier_phi_60_61_ladder_5 = _2322;
            }
            _2442 = frontier_phi_60_61_ladder_5;
            _2444 = frontier_phi_60_61_ladder_4;
            _2446 = frontier_phi_60_61_ladder_3;
            _2448 = frontier_phi_60_61_ladder;
            _2450 = frontier_phi_60_61_ladder_2;
            _2452 = frontier_phi_60_61_ladder_1;
        }
        float _2457 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
        _2234 = (_2457 * _2448) + _1687;
        _2236 = (_2457 * _2450) + _1689;
        _2238 = (_2457 * _2452) + _1691;
        _2240 = ((_2442 * 0.039999999105930328369140625) * _2457) + _2020;
        _2242 = ((_2444 * 0.039999999105930328369140625) * _2457) + _2022;
        _2244 = ((_2446 * 0.039999999105930328369140625) * _2457) + _2024;
    }
    else
    {
        _2234 = _1687;
        _2236 = _1689;
        _2238 = _1691;
        _2240 = _2020;
        _2242 = _2022;
        _2244 = _2024;
    }
    float _4165 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4176 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4187 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2261 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2234 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _461))) + ((_2240 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1300)) * cbPerFrame._m0[3u].x);
    float _2262 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2236 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _461))) + ((_2242 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1300)) * cbPerFrame._m0[3u].x);
    float _2263 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2238 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _461))) + ((_2244 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1300)) * cbPerFrame._m0[3u].x);
    uint _2264 = _434 + 6u;
    float _2272 = _394 / cbSceneParam._m0[86u].x;
    float _2273 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2287 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2289 = _2287.x;
    float _2290 = _2287.y;
    float _2291 = _2287.z;
    float _2292 = _2287.w;
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2347 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2348 = _2347 / _315;
        float _2359 = _2348 * _366;
        float _2360 = _367 * _2348;
        float _2361 = (-0.0) - _2360;
        float _2362 = _2348 * _368;
        float _2364 = (cbSceneParam._m0[77u].w * _2361) / _2347;
        float _2365 = _2364 + cbSceneParam._m0[79u].w;
        float _2366 = cbSceneParam._m0[79u].w - _2360;
        float _2372 = sqrt(((_2359 * _2359) + (_2360 * _2360)) + (_2362 * _2362));
        float _2375 = (1.0 - (cbSceneParam._m0[77u].w / _2347)) * _2372;
        float _2380 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2382 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2559;
        if (abs((_2361 - _2364) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2559 = ((((_2365 > 0.0) ? exp2(_2380 * _2365) : (2.0 - exp2(_2382 * _2365))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2375;
        }
        else
        {
            float _2503 = 1.0 / cbSceneParam._m0[80u].x;
            float _2504 = isnan(_2366) ? _2365 : (isnan(_2365) ? _2366 : max(_2365, _2366));
            float _2505 = isnan(_2366) ? _2365 : (isnan(_2365) ? _2366 : min(_2365, _2366));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            _2559 = ((abs(_2372 / _2361) * cbSceneParam._m0[80u].y) * ((((_2514 - _2515) * 2.0) - ((exp2(_2380 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0)))) - exp2(_2380 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0))))) * _2503)) - ((exp2(_2382 * _2514) - exp2(_2382 * _2515)) * _2503))) + (_2375 * cbSceneParam._m0[80u].z);
        }
        vec4 _2561 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2272, _2273, 1.0), 0.0);
        float _2570 = exp2((_2559 * (-1.44269502162933349609375)) * (1.0 - _2561.w));
        float _2571 = log2(_2570);
        float _2587 = log2(_2292);
        _2384 = (exp2(_2587 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2571 * cbSceneParam._m0[78u].x)) * _2561.x) / cbSceneParam._m0[78u].x)) + _2289;
        _2386 = (exp2(_2587 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2571 * cbSceneParam._m0[78u].y)) * _2561.y) / cbSceneParam._m0[78u].y)) + _2290;
        _2388 = (exp2(_2587 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2571 * cbSceneParam._m0[78u].z)) * _2561.z) / cbSceneParam._m0[78u].z)) + _2291;
        _2390 = _2570 * _2292;
    }
    else
    {
        _2384 = _2289;
        _2386 = _2290;
        _2388 = _2291;
        _2390 = _2292;
    }
    bool _2597;
    vec4 _2400;
    vec4 _2422;
    float _2424;
    float _2428;
    float _2429;
    float _2430;
    float _2431;
    bool _2441;
    for (;;)
    {
        _2400 = cbMatDynParam._m0[0u];
        float _2402 = roundEven(_2400.y);
        bool _2403 = _2402 == 3.0;
        float _2404 = log2(_2390);
        float _2411 = exp2(_2404 * cbSceneParam._m0[78u].x) * _2261;
        float _2412 = exp2(_2404 * cbSceneParam._m0[78u].y) * _2262;
        float _2413 = exp2(_2404 * cbSceneParam._m0[78u].z) * _2263;
        float _2420 = _382 + (-0.5);
        _2422 = cbMtdParam._m0[1u];
        _2424 = _2422.y * _2420;
        float _2427 = (_2402 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2428 = _2427 * (_2403 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2384)));
        _2429 = _2427 * (_2403 ? _2412 : (_2412 + (cbSceneParam._m0[72u].w * _2386)));
        _2430 = _2427 * (_2403 ? _2413 : (_2413 + (cbSceneParam._m0[72u].w * _2388)));
        _2431 = _2420 * 0.999000012874603271484375;
        _2441 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2441)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2431) < 0.5)
            {
                _2597 = true;
                break;
            }
        }
        uint _2538 = _436 + uint(_2400.w);
        if ((cbInstanceData._m0[_2538].w < 1.0) && ((cbInstanceData._m0[_2538].w + _2431) < 0.5))
        {
            _2597 = true;
            break;
        }
        if ((_2424 + 1.0) < _2422.x)
        {
            _2597 = true;
            break;
        }
        _2597 = false;
        break;
    }
    float _2802;
    if (_2597)
    {
        discard_state = true;
        _2802 = 0.0;
    }
    else
    {
        _2802 = cbInstanceData._m0[_2264].w;
    }
    SV_Target.x = _2428;
    SV_Target.y = _2429;
    SV_Target.z = _2430;
    SV_Target.w = _2802;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2264].w;
    discard_exit();
}


