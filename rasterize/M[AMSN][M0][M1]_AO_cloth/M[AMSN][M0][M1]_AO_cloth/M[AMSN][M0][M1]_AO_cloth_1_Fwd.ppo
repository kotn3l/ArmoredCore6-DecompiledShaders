#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _815;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _229 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _249.z;
    float _258 = (_249.x * 2.0) + (-1.0);
    float _260 = (_249.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3131 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))));
    float _272 = cbMtdParam._m0[10u].x + _249.w;
    float _275 = fma(_267, _207, fma(_260, _199 * TANGENT.x, (_185 * _178) * _258));
    float _278 = fma(_267, _208, fma(_260, _199 * TANGENT.y, (_185 * _179) * _258));
    float _281 = fma(_267, _209, fma(_260, _199 * TANGENT.z, (_185 * _180) * _258));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3142 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _289 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    float _3153 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3164 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3175 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3186 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _309 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _400 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _403 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3197 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _3219 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    vec4 _439 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _443 = ((isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))) * TEXCOORD.z) * _439.x;
    float _444 = dot(vec3(_286, _287, _288), vec3(_367, _368, _369));
    float _447 = _444 * 2.0;
    float _451 = (_447 * _286) - _367;
    float _452 = (_447 * _287) - _368;
    float _453 = (_447 * _288) - _369;
    float _457 = abs(dot(vec3(_367, _368, _369), vec3(_286, _287, _288)));
    float _3230 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _459 = sqrt(_289);
    float _472 = exp2((_459 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_459 * 3.0));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _814;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _539 = fma(_512, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504));
        float _543 = fma(_512, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504));
        float _547 = fma(_512, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504));
        float _572 = _504 + _286;
        float _573 = _508 + _287;
        float _574 = _512 + _288;
        float _584 = fma(_574, cbModelParam._m0[26u].z, fma(_573, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572)) - _539;
        float _585 = fma(_574, cbModelParam._m0[27u].z, fma(_573, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572)) - _543;
        float _586 = fma(_574, cbModelParam._m0[28u].z, fma(_573, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572)) - _547;
        float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
        float _603 = ((_590 * _584) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_539 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _604 = ((_590 * _585) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_543 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _605 = ((_590 * _586) / cbModelParam._m0[34u].z) + ((((((_547 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        float _642 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_608.x + (-0.5));
        float _644 = _642 * (_608.y + (-0.5));
        float _645 = _642 * (_608.z + (-0.5));
        float _652 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_615.x + (-0.5));
        float _654 = _652 * (_615.y + (-0.5));
        float _655 = _652 * (_615.z + (-0.5));
        float _662 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_622.x + (-0.5));
        float _664 = _662 * (_622.y + (-0.5));
        float _665 = _662 * (_622.z + (-0.5));
        float _672 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_629.x + (-0.5));
        float _674 = _672 * (_629.y + (-0.5));
        float _675 = _672 * (_629.z + (-0.5));
        float _676 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _677 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _678 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _679 = _643 * 0.5;
        float _680 = _653 * 0.5;
        float _681 = _663 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _696 = (dot(vec3(_286, _287, _288), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _706 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_676 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3278 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_708 + 1.0))) + _713) * _676;
        float _723 = _644 * 0.5;
        float _724 = _654 * 0.5;
        float _725 = _664 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_286, _287, _288), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_677 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3311 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_750 + 1.0))) + _755) * _677;
        float _765 = _645 * 0.5;
        float _766 = _655 * 0.5;
        float _767 = _665 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_286, _287, _288), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_678 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3344 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_792 + 1.0))) + _797) * _678;
        _814 = _645;
        _816 = _644;
        _817 = _643;
        _818 = _655;
        _819 = _654;
        _820 = _653;
        _821 = _665;
        _822 = _664;
        _823 = _663;
        _824 = _678;
        _825 = _677;
        _826 = _676;
        _827 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _828 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _829 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
    }
    else
    {
        _814 = _815;
        _816 = _815;
        _817 = _815;
        _818 = _815;
        _819 = _815;
        _820 = _815;
        _821 = _815;
        _822 = _815;
        _823 = _815;
        _824 = _815;
        _825 = _815;
        _826 = _815;
        _827 = 0.0;
        _828 = 0.0;
        _829 = 0.0;
    }
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _855 = fma(_512, cbModelParam._m0[30u].z, fma(_508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _504));
        float _859 = fma(_512, cbModelParam._m0[31u].z, fma(_508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _504));
        float _863 = fma(_512, cbModelParam._m0[32u].z, fma(_508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _504));
        float _886 = _504 + _286;
        float _887 = _508 + _287;
        float _888 = _512 + _288;
        float _898 = fma(_888, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _886)) - _855;
        float _899 = fma(_888, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _886)) - _859;
        float _900 = fma(_888, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _886)) - _863;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_855 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_859 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[35u].z) + ((((((_863 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _954 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_921.x + (-0.5));
        float _956 = _954 * (_921.y + (-0.5));
        float _957 = _954 * (_921.z + (-0.5));
        float _964 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_928.x + (-0.5));
        float _966 = _964 * (_928.y + (-0.5));
        float _967 = _964 * (_928.z + (-0.5));
        float _974 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_935.x + (-0.5));
        float _976 = _974 * (_935.y + (-0.5));
        float _977 = _974 * (_935.z + (-0.5));
        float _984 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_942.x + (-0.5));
        float _986 = _984 * (_942.y + (-0.5));
        float _987 = _984 * (_942.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_286, _287, _288), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3407 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_1018 + 1.0))) + _1023) * _988;
        float _1033 = _956 * 0.5;
        float _1034 = _966 * 0.5;
        float _1035 = _976 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_286, _287, _288), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3440 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1060 + 1.0))) + _1065) * _989;
        float _1075 = _957 * 0.5;
        float _1076 = _967 * 0.5;
        float _1077 = _977 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_286, _287, _288), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3473 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1102 + 1.0))) + _1107) * _990;
        _1124 = _957;
        _1125 = _956;
        _1126 = _955;
        _1127 = _967;
        _1128 = _966;
        _1129 = _965;
        _1130 = _977;
        _1131 = _976;
        _1132 = _975;
        _1133 = _990;
        _1134 = _989;
        _1135 = _988;
        _1136 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1137 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1138 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
    }
    else
    {
        _1124 = _815;
        _1125 = _815;
        _1126 = _815;
        _1127 = _815;
        _1128 = _815;
        _1129 = _815;
        _1130 = _815;
        _1131 = _815;
        _1132 = _815;
        _1133 = _815;
        _1134 = _815;
        _1135 = _815;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1148 = (cbModelParam._m0[1u].x * (_1136 - _827)) + _827;
    float _1149 = (cbModelParam._m0[1u].x * (_1137 - _828)) + _828;
    float _1150 = (cbModelParam._m0[1u].x * (_1138 - _829)) + _829;
    float _1171 = fma(_1150, cbSceneParam._m0[89u].z, fma(_1149, cbSceneParam._m0[89u].y, _1148 * cbSceneParam._m0[89u].x));
    float _1174 = fma(_1150, cbSceneParam._m0[90u].z, fma(_1149, cbSceneParam._m0[90u].y, _1148 * cbSceneParam._m0[90u].x));
    float _1177 = fma(_1150, cbSceneParam._m0[91u].z, fma(_1149, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1148));
    float _1192 = _451 * 0.5;
    float _1193 = _452 * 0.5;
    float _1194 = _453 * 0.5;
    float _1195 = dot(vec4(_1192, _1193, _1194, 1.0), vec4(_1126, _1129, _1132, _1135));
    float _1198 = dot(vec4(_1192, _1193, _1194, 1.0), vec4(_1125, _1128, _1131, _1134));
    float _1201 = dot(vec4(_1192, _1193, _1194, 1.0), vec4(_1124, _1127, _1130, _1133));
    float _1235;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1208 = dot(vec4(_1192, _1193, _1194, 1.0), vec4(_814, _818, _821, _824));
        float _1212 = dot(vec4(_1192, _1193, _1194, 1.0), vec4(_816, _819, _822, _825));
        float _1216 = dot(vec4(_1192, _1193, _1194, 1.0), vec4(_817, _820, _823, _826));
        float _1223 = dot(vec4(cbModelParam._m0[39u]), vec4(_1192, _1193, _1194, 1.0));
        _1235 = dot(vec3(isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1223) ? 0.0 : (isnan(0.0) ? _1223 : max(0.0, _1223))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1235 = 1.0;
    }
    float _1246;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1237 = dot(vec4(cbModelParam._m0[40u]), vec4(_1192, _1193, _1194, 1.0));
        _1246 = dot(vec3(isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1237) ? 0.0 : (isnan(0.0) ? _1237 : max(0.0, _1237))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1246 = 1.0;
    }
    float _1250 = (_1246 * cbModelParam._m0[1u].x) + (_1235 * (1.0 - cbModelParam._m0[1u].x));
    float _1260 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1261 = isnan(_1260) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1260 : min(cbModelParam._m0[25u].z, _1260));
    float _1343;
    float _1345;
    float _1347;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1310 = fma(_512, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504)) + cbModelParam._m0[13u].w;
        float _1314 = fma(_512, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504)) + cbModelParam._m0[14u].w;
        float _1318 = fma(_512, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504)) + cbModelParam._m0[15u].w;
        float _1321 = fma(_453, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451));
        float _1324 = fma(_453, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451));
        float _1327 = fma(_453, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451));
        float _1355;
        if (_1321 > 0.0)
        {
            _1355 = abs((1.0 - _1310) / _1321);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1310 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1355 = frontier_phi_16_14_ladder;
        }
        float _1561;
        if (_1324 > 0.0)
        {
            _1561 = abs((1.0 - _1314) / _1324);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1314 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1561 = frontier_phi_25_21_ladder;
        }
        float _1804;
        if (_1327 > 0.0)
        {
            _1804 = abs((1.0 - _1318) / _1327);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1318 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1804 = frontier_phi_37_32_ladder;
        }
        float _1806 = isnan(_1561) ? _1355 : (isnan(_1355) ? _1561 : min(_1355, _1561));
        float _1807 = isnan(_1804) ? _1806 : (isnan(_1806) ? _1804 : min(_1806, _1804));
        float _1811 = (_1807 * _1321) + _1310;
        float _1812 = (_1807 * _1324) + _1314;
        float _1813 = (_1807 * _1327) + _1318;
        float _1814 = _1807 * 9.9999997473787516355514526367188e-05;
        float _1816 = (-1.0) - _1814;
        float _1818 = _1814 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1813 > _1818) || ((_1813 < _1816) || ((_1812 > _1818) || ((_1812 < _1816) || ((_1811 < _1816) || (_1811 > _1818))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1813, cbModelParam._m0[9u].z, fma(_1812, cbModelParam._m0[9u].y, _1811 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1813, cbModelParam._m0[10u].z, fma(_1812, cbModelParam._m0[10u].y, _1811 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1813, cbModelParam._m0[11u].z, fma(_1812, cbModelParam._m0[11u].y, _1811 * cbModelParam._m0[11u].x))), _1261);
            frontier_phi_15_37_ladder = _1937.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1937.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1937.x * cbModelParam._m0[1u].y;
        }
        _1343 = frontier_phi_15_37_ladder_2;
        _1345 = frontier_phi_15_37_ladder_1;
        _1347 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_451, _452, _453), _1261);
        _1343 = _1331.x * cbModelParam._m0[1u].y;
        _1345 = _1331.y * cbModelParam._m0[1u].y;
        _1347 = _1331.z * cbModelParam._m0[1u].y;
    }
    float _1351 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1352 = isnan(_1351) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1351 : min(cbModelParam._m0[25u].w, _1351));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1409 = fma(_512, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504)) + cbModelParam._m0[21u].w;
        float _1413 = fma(_512, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504)) + cbModelParam._m0[22u].w;
        float _1417 = fma(_512, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504)) + cbModelParam._m0[23u].w;
        float _1420 = fma(_453, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451));
        float _1423 = fma(_453, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451));
        float _1426 = fma(_453, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451));
        float _1566;
        if (_1420 > 0.0)
        {
            _1566 = abs((1.0 - _1409) / _1420);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1409 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1566 = frontier_phi_27_23_ladder;
        }
        float _1831;
        if (_1423 > 0.0)
        {
            _1831 = abs((1.0 - _1413) / _1423);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1413 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1831 = frontier_phi_39_34_ladder;
        }
        float _2036;
        if (_1426 > 0.0)
        {
            _2036 = abs((1.0 - _1417) / _1426);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1417 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2036 = frontier_phi_48_45_ladder;
        }
        float _2038 = isnan(_1831) ? _1566 : (isnan(_1566) ? _1831 : min(_1566, _1831));
        float _2039 = isnan(_2036) ? _2038 : (isnan(_2038) ? _2036 : min(_2038, _2036));
        float _2043 = (_2039 * _1420) + _1409;
        float _2044 = (_2039 * _1423) + _1413;
        float _2045 = (_2039 * _1426) + _1417;
        float _2046 = _2039 * 9.9999997473787516355514526367188e-05;
        float _2047 = (-1.0) - _2046;
        float _2049 = _2046 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2045 > _2049) || ((_2045 < _2047) || ((_2044 > _2049) || ((_2044 < _2047) || ((_2043 < _2047) || (_2043 > _2049))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2045, cbModelParam._m0[17u].z, fma(_2044, cbModelParam._m0[17u].y, _2043 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2045, cbModelParam._m0[18u].z, fma(_2044, cbModelParam._m0[18u].y, _2043 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2045, cbModelParam._m0[19u].z, fma(_2044, cbModelParam._m0[19u].y, _2043 * cbModelParam._m0[19u].x))), _1352);
            frontier_phi_24_48_ladder = _2243.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2243.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2243.x * cbModelParam._m0[1u].z;
        }
        _1445 = frontier_phi_24_48_ladder_2;
        _1447 = frontier_phi_24_48_ladder_1;
        _1449 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_451, _452, _453), _1352);
        _1445 = _1429.x * cbModelParam._m0[1u].z;
        _1447 = _1429.y * cbModelParam._m0[1u].z;
        _1449 = _1429.z * cbModelParam._m0[1u].z;
    }
    float _1461 = ((((1.0 - _472) * ((_459 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_472 * _459)) * _443;
    float _1462 = _1461 * ((cbModelParam._m0[1u].w * (_1445 - _1343)) + _1343);
    float _1463 = _1461 * ((cbModelParam._m0[1u].w * (_1447 - _1345)) + _1345);
    float _1464 = _1461 * ((cbModelParam._m0[1u].w * (_1449 - _1347)) + _1347);
    float _1467 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, _1462 * cbSceneParam._m0[91u].x));
    uvec4 _1483 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1485 = _1483.x * 14u;
    uint _1486 = _1485 + 13u;
    float _1493 = _443 + (-1.0);
    float _1498 = (cbLight._m0[_1486].x * _1493) + 1.0;
    float _1499 = (cbLight._m0[_1486].y * _1493) + 1.0;
    float _1500 = (cbLight._m0[_1486].z * _1493) + 1.0;
    float _1501 = (cbLight._m0[_1486].w * _1493) + 1.0;
    uint _1502 = _1485 + 5u;
    float _1508 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
    uint _1512 = _1485 + 4u;
    float _1519 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
    uint _1523 = _1485 | 1u;
    float _1534 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_286, _287, _288));
    float _1537 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_286, _287, _288));
    float _3609 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _3620 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1542 = (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.3183098733425140380859375;
    float _1544 = (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * 0.3183098733425140380859375;
    float _1551 = ((cbLight._m0[_1502].x * _1508) * _1544) + ((cbLight._m0[_1512].x * _1519) * _1542);
    float _1552 = ((_1508 * cbLight._m0[_1502].y) * _1544) + ((_1519 * cbLight._m0[_1512].y) * _1542);
    float _1553 = ((_1508 * cbLight._m0[_1502].z) * _1544) + ((_1519 * cbLight._m0[_1512].z) * _1542);
    uvec4 _1558 = floatBitsToUint(cbLight._m0[_1485 + 12u]);
    bool _1560 = _1558.x == 0u;
    float _1571;
    float _1573;
    float _1575;
    if (_1560)
    {
        _1571 = _1551;
        _1573 = _1552;
        _1575 = _1553;
    }
    else
    {
        uint _1579 = _1485 + 6u;
        float _1595 = (dot(vec3(cbLight._m0[_1485 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1596 = _1595 * _1595;
        float _3631 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1598 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
        _1571 = (((cbLight._m0[_1579].x * 0.3183098733425140380859375) * _1597) * _1598) + _1551;
        _1573 = (((cbLight._m0[_1579].y * 0.3183098733425140380859375) * _1597) * _1598) + _1552;
        _1575 = (((cbLight._m0[_1579].z * 0.3183098733425140380859375) * _1597) * _1598) + _1553;
    }
    bool _1578 = _1558.y == 0u;
    float _1616;
    float _1618;
    float _1620;
    if (_1578)
    {
        _1616 = _1571;
        _1618 = _1573;
        _1620 = _1575;
    }
    else
    {
        uint _1775 = _1485 + 7u;
        float _1791 = (dot(vec3(cbLight._m0[_1485 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1792 = _1791 * _1791;
        float _3647 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1794 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
        _1616 = (((cbLight._m0[_1775].x * 0.3183098733425140380859375) * _1793) * _1794) + _1571;
        _1618 = (((cbLight._m0[_1775].y * 0.3183098733425140380859375) * _1793) * _1794) + _1573;
        _1620 = (((cbLight._m0[_1775].z * 0.3183098733425140380859375) * _1793) * _1794) + _1575;
    }
    uint _1623 = _1485 + 8u;
    float _1636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1485].w)) * _289) * 0.949999988079071044921875);
    float _1637 = _1636 * _1636;
    float _1638 = cbLight._m0[_1485].x + _367;
    float _1639 = cbLight._m0[_1485].y + _368;
    float _1640 = cbLight._m0[_1485].z + _369;
    float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
    float _1645 = _1644 * _1638;
    float _1646 = _1644 * _1639;
    float _1647 = _1644 * _1640;
    float _1648 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1485].xyz));
    float _3663 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1651 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _1652 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _1653 = dot(vec3(_286, _287, _288), vec3(_1645, _1646, _1647));
    float _3685 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1656 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _1657 = dot(vec3(cbLight._m0[_1485].xyz), vec3(_1645, _1646, _1647));
    float _3696 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1661 = _1637 * _1637;
    float _1665 = ((_1656 * _1656) * (_1661 + (-1.0))) + 1.0;
    float _1676 = (exp2(log2(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1677 = 1.0 - _1637;
    float _1688 = (0.5 / (((_1652 * ((_1651 * _1677) + _1637)) + 9.9999999392252902907785028219223e-09) + (((_1652 * _1677) + _1637) * _1651))) * _1651;
    float _3707 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1690 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1661 / ((_1665 * _1665) * 3.141590118408203125));
    uint _1701 = _1485 + 9u;
    float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1523].w)) * _289) * 0.949999988079071044921875);
    float _1713 = _1712 * _1712;
    float _1714 = cbLight._m0[_1523].x + _367;
    float _1715 = cbLight._m0[_1523].y + _368;
    float _1716 = cbLight._m0[_1523].z + _369;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1721 = _1720 * _1714;
    float _1722 = _1720 * _1715;
    float _1723 = _1720 * _1716;
    float _1724 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1523].xyz));
    float _3718 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _1728 = dot(vec3(_286, _287, _288), vec3(_1721, _1722, _1723));
    float _3729 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1523].xyz), vec3(_1721, _1722, _1723));
    float _3740 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1713 * _1713;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1749 = (exp2(log2(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1750 = 1.0 - _1713;
    float _1760 = (0.5 / (((_1652 * ((_1727 * _1750) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1652 * _1750) + _1713) * _1727))) * _1727;
    float _3751 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    float _1772 = (((_1749 * cbLight._m0[_1701].x) * _1762) * _1508) + (((_1676 * cbLight._m0[_1623].x) * _1690) * _1519);
    float _1773 = (((_1749 * cbLight._m0[_1701].y) * _1762) * _1508) + (((_1676 * cbLight._m0[_1623].y) * _1690) * _1519);
    float _1774 = (((_1749 * cbLight._m0[_1701].z) * _1762) * _1508) + (((_1676 * cbLight._m0[_1623].z) * _1690) * _1519);
    float _1836;
    float _1838;
    float _1840;
    if (_1560)
    {
        _1836 = _1772;
        _1838 = _1773;
        _1840 = _1774;
    }
    else
    {
        uint _1842 = _1485 + 2u;
        uint _1846 = _1485 + 10u;
        float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _289) * 0.949999988079071044921875);
        float _1861 = _1860 * _1860;
        float _1862 = cbLight._m0[_1842].x + _367;
        float _1863 = cbLight._m0[_1842].y + _368;
        float _1864 = cbLight._m0[_1842].z + _369;
        float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
        float _1869 = _1868 * _1862;
        float _1870 = _1868 * _1863;
        float _1871 = _1868 * _1864;
        float _1872 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1842].xyz));
        float _3762 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1875 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1876 = dot(vec3(_286, _287, _288), vec3(_1869, _1870, _1871));
        float _3773 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1879 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1880 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_1869, _1870, _1871));
        float _3784 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1884 = _1861 * _1861;
        float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
        float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1898 = 1.0 - _1861;
        float _1908 = (0.5 / (((_1652 * ((_1875 * _1898) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1652 * _1898) + _1861) * _1875))) * _1875;
        float _3795 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1910 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
        float _1911 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
        _1836 = (((_1897 * cbLight._m0[_1846].x) * _1910) * _1911) + _1772;
        _1838 = (((_1897 * cbLight._m0[_1846].y) * _1910) * _1911) + _1773;
        _1840 = (((_1897 * cbLight._m0[_1846].z) * _1910) * _1911) + _1774;
    }
    float _1946;
    float _1948;
    float _1950;
    if (_1578)
    {
        _1946 = _1836;
        _1948 = _1838;
        _1950 = _1840;
    }
    else
    {
        uint _1957 = _1485 + 3u;
        uint _1961 = _1485 + 11u;
        float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _289) * 0.949999988079071044921875);
        float _1976 = _1975 * _1975;
        float _1977 = cbLight._m0[_1957].x + _367;
        float _1978 = cbLight._m0[_1957].y + _368;
        float _1979 = cbLight._m0[_1957].z + _369;
        float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
        float _1984 = _1983 * _1977;
        float _1985 = _1983 * _1978;
        float _1986 = _1983 * _1979;
        float _1987 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1957].xyz));
        float _3811 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1991 = dot(vec3(_286, _287, _288), vec3(_1984, _1985, _1986));
        float _3822 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1995 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_1984, _1985, _1986));
        float _3833 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1999 = _1976 * _1976;
        float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
        float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2013 = 1.0 - _1976;
        float _2023 = (0.5 / (((_1652 * ((_1990 * _2013) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1652 * _2013) + _1976) * _1990))) * _1990;
        float _3844 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2025 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
        float _2026 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
        _1946 = (((_2012 * cbLight._m0[_1961].x) * _2025) * _2026) + _1836;
        _1948 = (((_2012 * cbLight._m0[_1961].y) * _2025) * _2026) + _1838;
        _1950 = (((_2012 * cbLight._m0[_1961].z) * _2025) * _2026) + _1840;
    }
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    if (_1483.y == 0u)
    {
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2102 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2101;
        float _2103 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2101;
        float _2104 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2101;
        uvec4 _2116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2117 = _2116.x;
        uint _2128 = uint((float(_2116.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2117))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2117)));
        float _2138 = (log2(_2104 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2139 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        uint _2142 = uint(isnan(14.0) ? _2139 : (isnan(_2139) ? 14.0 : min(_2139, 14.0)));
        uvec4 _2147 = texelFetch(g_lightClusterGridBuffer, int(((_2142 << 2u) + (_2128 << 6u)) >> 2u));
        uint _2148 = _2147.x;
        uint _2149 = _2116.z;
        float _2248;
        float _2250;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        if (((((1u << ((_2149 >> 4u) & 15u)) + 4294967295u) & _2148) == 0u) || ((_2149 & 240u) == 0u))
        {
            _2248 = 0.0;
            _2250 = 0.0;
            _2252 = 0.0;
            _2254 = 0.0;
            _2256 = 0.0;
            _2258 = 0.0;
        }
        else
        {
            float _2249;
            float _2251;
            float _2253;
            float _2255;
            float _2257;
            float _2259;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            float _2397 = 0.0;
            uint _2398 = 0u;
            uint _2407;
            bool _2408;
            for (;;)
            {
                _2407 = texelFetch(g_lightClassification, int((((_2142 << 5u) + (_2128 << 9u)) + (_2398 << 2u)) >> 2u)).x;
                _2408 = _2407 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2408)
                {
                    frontier_phi_63_pred = _2397;
                    frontier_phi_63_pred_1 = _2396;
                    frontier_phi_63_pred_2 = _2395;
                    frontier_phi_63_pred_3 = _2394;
                    frontier_phi_63_pred_4 = _2393;
                    frontier_phi_63_pred_5 = _2392;
                }
                else
                {
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    uint _2522;
                    _2516 = _2392;
                    _2517 = _2393;
                    _2518 = _2394;
                    _2519 = _2395;
                    _2520 = _2396;
                    _2521 = _2397;
                    _2522 = _2407;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    for (;;)
                    {
                        uint _2526 = uint(findLSB(_2522)) + (_2398 << 5u);
                        uint _2523 = (_2522 + 4294967295u) & _2522;
                        uint _2528 = _2526 * 48u;
                        vec4 _2542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2528)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 3u)).x));
                        uint _2548 = (_2526 * 48u) + 4u;
                        vec4 _2561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2548)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 3u)).x));
                        uint _2567 = (_2526 * 48u) + 8u;
                        vec3 _2578 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x));
                        float _2582 = _2542.x - _2102;
                        float _2583 = _2542.y - _2103;
                        float _2584 = _2542.z - _2104;
                        float _2585 = dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584));
                        float _2588 = inversesqrt(_2585);
                        float _2589 = _2588 * _2582;
                        float _2590 = _2588 * _2583;
                        float _2591 = _2588 * _2584;
                        float _2592 = dot(vec3(_397, _400, _403), vec3(_2589, _2590, _2591));
                        float _2597 = 1.0 - (_2585 * _2542.w);
                        float _3870 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _2598 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2599 = sqrt(_2585) * _2561.w;
                        float _2602 = 1.39999997615814208984375 / (_2599 + 1.39999997615814208984375);
                        float _2603 = _2602 * _2602;
                        float _2606 = ((1.0 - _2603) * _2592) + _2603;
                        float _2609 = _2599 * _2599;
                        float _2613 = ((isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))) * _2598) / ((_2609 * 0.699999988079071044921875) + 1.0);
                        float _2617 = (-0.0) - _2102;
                        float _2618 = (-0.0) - _2103;
                        float _2619 = (-0.0) - _2104;
                        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
                        float _2624 = _2623 * _2617;
                        float _2625 = _2623 * _2618;
                        float _2626 = _2623 * _2619;
                        float _2634 = exp2(log2(1.0 / ((_2609 * 3.5) + 5.0)) * 0.25);
                        float _2635 = 1.0 - _459;
                        float _2642 = sqrt(1.0 - ((1.0 - (_2635 * _2635)) * (1.0 - (_2634 * _2634))));
                        float _2643 = _2642 * _2642;
                        float _2644 = _2643 * _2643;
                        float _2645 = _2624 + _2589;
                        float _2646 = _2625 + _2590;
                        float _2647 = _2626 + _2591;
                        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
                        float _2655 = dot(vec3(_397, _400, _403), vec3(_2624, _2625, _2626));
                        float _3886 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
                        float _2658 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                        float _2659 = dot(vec3(_397, _400, _403), vec3(_2651 * _2645, _2651 * _2646, _2651 * _2647));
                        float _3897 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2662 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
                        float _2666 = ((_2662 * _2662) * (_2644 + (-1.0))) + 1.0;
                        float _2667 = _2602 * _2643;
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2592) + _2668;
                        float _3908 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2672 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                        float _2673 = 1.0 - _2643;
                        float _2683 = (0.5 / (((_2672 * ((_2658 * _2673) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2672 * _2673) + _2643) * _2658))) * _2672;
                        float _3919 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2694 = (((_2644 * 3.1415927410125732421875) * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) / ((_2666 * _2666) * ((_2609 * 2.1991131305694580078125) + 3.141590118408203125))) * _2598;
                        _2451 = (_2613 * _2561.x) + _2519;
                        _2452 = (_2613 * _2561.y) + _2520;
                        _2453 = (_2613 * _2561.z) + _2521;
                        _2448 = (_2694 * _2578.x) + _2516;
                        _2449 = (_2694 * _2578.y) + _2517;
                        _2450 = (_2694 * _2578.z) + _2518;
                        if (_2523 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2516 = _2448;
                            _2517 = _2449;
                            _2518 = _2450;
                            _2519 = _2451;
                            _2520 = _2452;
                            _2521 = _2453;
                            _2522 = _2523;
                        }
                    }
                    frontier_phi_63_pred = _2453;
                    frontier_phi_63_pred_1 = _2452;
                    frontier_phi_63_pred_2 = _2451;
                    frontier_phi_63_pred_3 = _2450;
                    frontier_phi_63_pred_4 = _2449;
                    frontier_phi_63_pred_5 = _2448;
                }
                _2259 = frontier_phi_63_pred;
                _2257 = frontier_phi_63_pred_1;
                _2255 = frontier_phi_63_pred_2;
                _2253 = frontier_phi_63_pred_3;
                _2251 = frontier_phi_63_pred_4;
                _2249 = frontier_phi_63_pred_5;
                uint _2399 = _2398 + 1u;
                if (_2399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2392 = _2249;
                    _2393 = _2251;
                    _2394 = _2253;
                    _2395 = _2255;
                    _2396 = _2257;
                    _2397 = _2259;
                    _2398 = _2399;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2248 = _2249;
            _2250 = _2251;
            _2252 = _2253;
            _2254 = _2255;
            _2256 = _2257;
            _2258 = _2259;
        }
        uvec4 _2262 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2263 = _2262.z;
        uint _2265 = (_2263 >> 8u) & 15u;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        if (((4294967295u << _2265) & _2148) == 0u)
        {
            _2360 = _2248;
            _2362 = _2250;
            _2364 = _2252;
            _2366 = _2254;
            _2368 = _2256;
            _2370 = _2258;
        }
        else
        {
            float _2385 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
            float _2386 = _2385 * _2102;
            float _2387 = _2385 * _2103;
            float _2388 = _2385 * _2104;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2265 < ((_2263 >> 12u) & 15u))
            {
                float _2361;
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2371;
                float _2499 = _2248;
                float _2500 = _2250;
                float _2501 = _2252;
                float _2502 = _2254;
                float _2503 = _2256;
                float _2504 = _2258;
                uint _2505 = _2265;
                uint _2514;
                bool _2515;
                for (;;)
                {
                    _2514 = texelFetch(g_lightClassification, int((((_2142 << 5u) + (_2128 << 9u)) + (_2505 << 2u)) >> 2u)).x;
                    _2515 = _2514 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2515)
                    {
                        frontier_phi_69_pred = _2504;
                        frontier_phi_69_pred_1 = _2503;
                        frontier_phi_69_pred_2 = _2502;
                        frontier_phi_69_pred_3 = _2501;
                        frontier_phi_69_pred_4 = _2500;
                        frontier_phi_69_pred_5 = _2499;
                    }
                    else
                    {
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _2712 = _2499;
                        float _2713 = _2500;
                        float _2714 = _2501;
                        float _2715 = _2502;
                        float _2716 = _2503;
                        float _2717 = _2504;
                        uint _2718 = _2514;
                        uint _2719;
                        vec4 _2744;
                        float _2745;
                        vec4 _2760;
                        vec3 _2772;
                        vec4 _2788;
                        vec4 _2804;
                        float _2851;
                        bool _2852;
                        for (;;)
                        {
                            uint _2729 = ((_2505 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2718));
                            _2719 = (_2718 + 4294967295u) & _2718;
                            uint _2731 = _2729 * 40u;
                            _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            _2745 = _2744.w;
                            uint _2747 = (_2729 * 40u) + 4u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2762 = (_2729 * 40u) + 8u;
                            _2772 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x));
                            uint _2775 = (_2729 * 40u) + 16u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            uint _2791 = (_2729 * 40u) + 20u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2807 = (_2729 * 40u) + 24u;
                            vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2826 = (_2729 * 40u) + 28u;
                            vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            _2851 = fma(_2104, _2839.z, fma(_2103, _2839.y, _2839.x * _2102)) + _2839.w;
                            _2852 = !((fma(_2104, _2820.z, fma(_2103, _2820.y, _2820.x * _2102)) + _2820.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2852)
                            {
                                float _2879 = _2744.x - _2102;
                                float _2880 = _2744.y - _2103;
                                float _2881 = _2744.z - _2104;
                                float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                                float _2885 = inversesqrt(_2882);
                                float _2886 = _2885 * _2879;
                                float _2887 = _2885 * _2880;
                                float _2888 = _2885 * _2881;
                                float _2892 = 1.0 - (_2882 / (_2745 * _2745));
                                float _3930 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                                float _2893 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2897 = sqrt(_2882) * _2760.w;
                                float _2899 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                                float _2900 = _2899 * _2899;
                                float _2903 = ((1.0 - _2900) * dot(vec3(_2886, _2887, _2888), vec3(_397, _400, _403))) + _2900;
                                float _2906 = _2897 * _2897;
                                float _2910 = (fma(_2104, _2788.z, fma(_2103, _2788.y, _2788.x * _2102)) + _2788.w) / _2851;
                                float _2911 = (fma(_2104, _2804.z, fma(_2103, _2804.y, _2804.x * _2102)) + _2804.w) / _2851;
                                float _2915 = 1.0 - dot(vec2(_2910, _2911), vec2(_2910, _2911));
                                float _3946 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2916 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                                float _2917 = _2916 * (((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2893) / ((_2906 * 0.699999988079071044921875) + 1.0));
                                float _2929 = exp2(log2(1.0 / ((_2906 * 3.5) + 5.0)) * 0.25);
                                float _2930 = 1.0 - _459;
                                float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                                float _2938 = _2937 * _2937;
                                float _2939 = _2938 * _2938;
                                float _2940 = _2886 - _2386;
                                float _2941 = _2887 - _2387;
                                float _2942 = _2888 - _2388;
                                float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                                float _2950 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2386, (-0.0) - _2387, (-0.0) - _2388));
                                float _3957 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2953 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                                float _2954 = dot(vec3(_397, _400, _403), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                                float _3968 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2957 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                                float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                                float _2962 = _2899 * _2938;
                                float _2963 = _2962 * _2962;
                                float _2969 = ((1.0 - _2963) * dot(vec3(_397, _400, _403), vec3(_2886, _2887, _2888))) + _2963;
                                float _3979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                                float _2971 = 1.0 - _2938;
                                float _2981 = (0.5 / (((_2970 * ((_2953 * _2971) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _2971) + _2938) * _2953))) * _2970;
                                float _3990 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2991 = (_2916 * _2893) * (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) / ((_2961 * _2961) * ((_2906 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2917 * _2760.z;
                                frontier_phi_75_pred_1 = _2917 * _2760.y;
                                frontier_phi_75_pred_2 = _2917 * _2760.x;
                                frontier_phi_75_pred_3 = _2991 * _2772.z;
                                frontier_phi_75_pred_4 = _2991 * _2772.y;
                                frontier_phi_75_pred_5 = _2991 * _2772.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3000 = frontier_phi_75_pred;
                            _2999 = frontier_phi_75_pred_1;
                            _2998 = frontier_phi_75_pred_2;
                            _2997 = frontier_phi_75_pred_3;
                            _2996 = frontier_phi_75_pred_4;
                            _2995 = frontier_phi_75_pred_5;
                            _2702 = _2998 + _2715;
                            _2703 = _2999 + _2716;
                            _2704 = _3000 + _2717;
                            _2699 = _2995 + _2712;
                            _2700 = _2996 + _2713;
                            _2701 = _2997 + _2714;
                            if (_2719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2702;
                                _2716 = _2703;
                                _2717 = _2704;
                                _2718 = _2719;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2704;
                        frontier_phi_69_pred_1 = _2703;
                        frontier_phi_69_pred_2 = _2702;
                        frontier_phi_69_pred_3 = _2701;
                        frontier_phi_69_pred_4 = _2700;
                        frontier_phi_69_pred_5 = _2699;
                    }
                    _2371 = frontier_phi_69_pred;
                    _2369 = frontier_phi_69_pred_1;
                    _2367 = frontier_phi_69_pred_2;
                    _2365 = frontier_phi_69_pred_3;
                    _2363 = frontier_phi_69_pred_4;
                    _2361 = frontier_phi_69_pred_5;
                    uint _2506 = _2505 + 1u;
                    if (_2506 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2499 = _2361;
                        _2500 = _2363;
                        _2501 = _2365;
                        _2502 = _2367;
                        _2503 = _2369;
                        _2504 = _2371;
                        _2505 = _2506;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2371;
                frontier_phi_57_58_ladder_1 = _2369;
                frontier_phi_57_58_ladder_2 = _2367;
                frontier_phi_57_58_ladder_3 = _2365;
                frontier_phi_57_58_ladder_4 = _2363;
                frontier_phi_57_58_ladder_5 = _2361;
            }
            else
            {
                frontier_phi_57_58_ladder = _2258;
                frontier_phi_57_58_ladder_1 = _2256;
                frontier_phi_57_58_ladder_2 = _2254;
                frontier_phi_57_58_ladder_3 = _2252;
                frontier_phi_57_58_ladder_4 = _2250;
                frontier_phi_57_58_ladder_5 = _2248;
            }
            _2360 = frontier_phi_57_58_ladder_5;
            _2362 = frontier_phi_57_58_ladder_4;
            _2364 = frontier_phi_57_58_ladder_3;
            _2366 = frontier_phi_57_58_ladder_2;
            _2368 = frontier_phi_57_58_ladder_1;
            _2370 = frontier_phi_57_58_ladder;
        }
        float _2375 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
        _2160 = (_2375 * _2366) + _1616;
        _2162 = (_2375 * _2368) + _1618;
        _2164 = (_2375 * _2370) + _1620;
        _2166 = ((_2360 * 0.039999999105930328369140625) * _2375) + _1946;
        _2168 = ((_2362 * 0.039999999105930328369140625) * _2375) + _1948;
        _2170 = ((_2364 * 0.039999999105930328369140625) * _2375) + _1950;
    }
    else
    {
        _2160 = _1616;
        _2162 = _1618;
        _2164 = _1620;
        _2166 = _1946;
        _2168 = _1948;
        _2170 = _1950;
    }
    float _4006 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4017 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4028 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    uint _2190 = _416 + 6u;
    float _2198 = _375 / cbSceneParam._m0[86u].x;
    float _2199 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2213 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2198, _2199, (log2((isnan(cbSceneParam._m0[77u].w) ? _309 : (isnan(_309) ? cbSceneParam._m0[77u].w : min(_309, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2215 = _2213.x;
    float _2216 = _2213.y;
    float _2217 = _2213.z;
    float _2218 = _2213.w;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    if (_309 > cbSceneParam._m0[78u].w)
    {
        float _2273 = isnan(_309) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _309 : min(cbSceneParam._m0[80u].w, _309));
        float _2274 = _2273 / _309;
        float _2285 = _2274 * _360;
        float _2286 = _361 * _2274;
        float _2287 = (-0.0) - _2286;
        float _2288 = _2274 * _362;
        float _2290 = (cbSceneParam._m0[77u].w * _2287) / _2273;
        float _2291 = _2290 + cbSceneParam._m0[79u].w;
        float _2292 = cbSceneParam._m0[79u].w - _2286;
        float _2298 = sqrt(((_2285 * _2285) + (_2286 * _2286)) + (_2288 * _2288));
        float _2301 = (1.0 - (cbSceneParam._m0[77u].w / _2273)) * _2298;
        float _2306 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2308 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2461;
        if (abs((_2287 - _2290) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2461 = ((((_2291 > 0.0) ? exp2(_2306 * _2291) : (2.0 - exp2(_2308 * _2291))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2301;
        }
        else
        {
            float _2421 = 1.0 / cbSceneParam._m0[80u].x;
            float _2422 = isnan(_2292) ? _2291 : (isnan(_2291) ? _2292 : max(_2291, _2292));
            float _2423 = isnan(_2292) ? _2291 : (isnan(_2291) ? _2292 : min(_2291, _2292));
            float _2432 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : min(_2422, 0.0));
            float _2433 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : min(_2423, 0.0));
            _2461 = ((abs(_2298 / _2287) * cbSceneParam._m0[80u].y) * ((((_2432 - _2433) * 2.0) - ((exp2(_2306 * (isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0)))) - exp2(_2306 * (isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0))))) * _2421)) - ((exp2(_2308 * _2432) - exp2(_2308 * _2433)) * _2421))) + (_2301 * cbSceneParam._m0[80u].z);
        }
        vec4 _2463 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2198, _2199, 1.0), 0.0);
        float _2472 = exp2((_2461 * (-1.44269502162933349609375)) * (1.0 - _2463.w));
        float _2473 = log2(_2472);
        float _2489 = log2(_2218);
        _2310 = (exp2(_2489 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2473 * cbSceneParam._m0[78u].x)) * _2463.x) / cbSceneParam._m0[78u].x)) + _2215;
        _2312 = (exp2(_2489 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2473 * cbSceneParam._m0[78u].y)) * _2463.y) / cbSceneParam._m0[78u].y)) + _2216;
        _2314 = (exp2(_2489 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2473 * cbSceneParam._m0[78u].z)) * _2463.z) / cbSceneParam._m0[78u].z)) + _2217;
        _2316 = _2472 * _2218;
    }
    else
    {
        _2310 = _2215;
        _2312 = _2216;
        _2314 = _2217;
        _2316 = _2218;
    }
    float _2328 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2329 = _2328 == 3.0;
    float _2330 = log2(_2316);
    float _2337 = exp2(_2330 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2160 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _443))) + ((_2166 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1250)) * cbPerFrame._m0[3u].x));
    float _2338 = exp2(_2330 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2162 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _443))) + ((_2168 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _1250)) * cbPerFrame._m0[3u].x));
    float _2339 = exp2(_2330 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2164 + ((isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))) * _443))) + ((_2170 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _1250)) * cbPerFrame._m0[3u].x));
    float _2348 = (_2328 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2348 * (_2329 ? _2337 : (_2337 + (cbSceneParam._m0[72u].w * _2310)));
    SV_Target.y = _2348 * (_2329 ? _2338 : (_2338 + (cbSceneParam._m0[72u].w * _2312)));
    SV_Target.z = _2348 * (_2329 ? _2339 : (_2339 + (cbSceneParam._m0[72u].w * _2314)));
    SV_Target.w = cbInstanceData._m0[_2190].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2190].w;
}


