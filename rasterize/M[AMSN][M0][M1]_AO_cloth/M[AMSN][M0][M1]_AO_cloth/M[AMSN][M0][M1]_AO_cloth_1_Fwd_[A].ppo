#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _860;
float _3230;
float _3231;
float _3232;
float _3233;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _253.z;
    float _262 = (_253.x * 2.0) + (-1.0);
    float _264 = (_253.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3242 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))));
    float _276 = cbMtdParam._m0[10u].x + _253.w;
    float _279 = fma(_271, _211, fma(_264, _203 * TANGENT.x, (_189 * _182) * _262));
    float _282 = fma(_271, _212, fma(_264, _203 * TANGENT.y, (_189 * _183) * _262));
    float _285 = fma(_271, _213, fma(_264, _203 * TANGENT.z, (_189 * _184) * _262));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3253 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _293 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3275 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3286 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3297 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _539 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _545 = (cbMatDynParam._m0[5u].x * _539) + cbMatDynParam._m0[5u].y;
        float _3308 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
        float _546 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _550 = (cbMatDynParam._m0[5u].z * _539) + cbMatDynParam._m0[5u].w;
        float _3319 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) - _546)) + _546) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _416 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _419 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3330 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    vec4 _455 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _459 = ((isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * TEXCOORD.z) * _455.x;
    float _460 = dot(vec3(_290, _291, _292), vec3(_371, _372, _373));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _290) - _371;
    float _468 = (_463 * _291) - _372;
    float _469 = (_463 * _292) - _373;
    float _473 = abs(dot(vec3(_371, _372, _373), vec3(_290, _291, _292)));
    float _3363 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _475 = sqrt(_293);
    float _488 = exp2((_475 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_475 * 3.0));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _859;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = fma(_528, cbModelParam._m0[26u].z, fma(_524, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _520));
        float _588 = fma(_528, cbModelParam._m0[27u].z, fma(_524, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _520));
        float _592 = fma(_528, cbModelParam._m0[28u].z, fma(_524, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _520));
        float _617 = _520 + _290;
        float _618 = _524 + _291;
        float _619 = _528 + _292;
        float _629 = fma(_619, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _617)) - _584;
        float _630 = fma(_619, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _617)) - _588;
        float _631 = fma(_619, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _617)) - _592;
        float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
        float _648 = ((_635 * _629) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_584 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_635 * _630) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_588 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_635 * _631) / cbModelParam._m0[34u].z) + ((((((_592 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        float _687 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_653.x + (-0.5));
        float _689 = _687 * (_653.y + (-0.5));
        float _690 = _687 * (_653.z + (-0.5));
        float _697 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_660.x + (-0.5));
        float _699 = _697 * (_660.y + (-0.5));
        float _700 = _697 * (_660.z + (-0.5));
        float _707 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_667.x + (-0.5));
        float _709 = _707 * (_667.y + (-0.5));
        float _710 = _707 * (_667.z + (-0.5));
        float _717 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_674.x + (-0.5));
        float _719 = _717 * (_674.y + (-0.5));
        float _720 = _717 * (_674.z + (-0.5));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = _688 * 0.5;
        float _725 = _698 * 0.5;
        float _726 = _708 * 0.5;
        float _727 = dot(vec3(_724, _725, _726), vec3(_724, _725, _726));
        float _732 = (_727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_727);
        float _741 = (dot(vec3(_290, _291, _292), vec3(_732 * _724, _732 * _725, _732 * _726)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _751 = sqrt(((_725 * _725) + (_724 * _724)) + (_726 * _726)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3411 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_753 + 1.0))) + _758) * _721;
        float _768 = _689 * 0.5;
        float _769 = _699 * 0.5;
        float _770 = _709 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_290, _291, _292), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3444 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_795 + 1.0))) + _800) * _722;
        float _810 = _690 * 0.5;
        float _811 = _700 * 0.5;
        float _812 = _710 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_290, _291, _292), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3477 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_837 + 1.0))) + _842) * _723;
        _859 = _690;
        _861 = _689;
        _862 = _688;
        _863 = _700;
        _864 = _699;
        _865 = _698;
        _866 = _710;
        _867 = _709;
        _868 = _708;
        _869 = _723;
        _870 = _722;
        _871 = _721;
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
    }
    else
    {
        _859 = _860;
        _861 = _860;
        _862 = _860;
        _863 = _860;
        _864 = _860;
        _865 = _860;
        _866 = _860;
        _867 = _860;
        _868 = _860;
        _869 = _860;
        _870 = _860;
        _871 = _860;
        _872 = 0.0;
        _873 = 0.0;
        _874 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_528, cbModelParam._m0[30u].z, fma(_524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _520));
        float _907 = fma(_528, cbModelParam._m0[31u].z, fma(_524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _520));
        float _911 = fma(_528, cbModelParam._m0[32u].z, fma(_524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _520));
        float _934 = _520 + _290;
        float _935 = _524 + _291;
        float _936 = _528 + _292;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_290, _291, _292), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3540 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_290, _291, _292), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3573 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_290, _291, _292), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3606 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _860;
        _1173 = _860;
        _1174 = _860;
        _1175 = _860;
        _1176 = _860;
        _1177 = _860;
        _1178 = _860;
        _1179 = _860;
        _1180 = _860;
        _1181 = _860;
        _1182 = _860;
        _1183 = _860;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _872)) + _872;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _873)) + _873;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _874)) + _874;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _467 * 0.5;
    float _1241 = _468 * 0.5;
    float _1242 = _469 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_859, _863, _866, _869));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_861, _864, _867, _870));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _865, _868, _871));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_528, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_528, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_528, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1372 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1375 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1403 = frontier_phi_19_17_ladder;
        }
        float _1609;
        if (_1372 > 0.0)
        {
            _1609 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1609 = frontier_phi_28_24_ladder;
        }
        float _1852;
        if (_1375 > 0.0)
        {
            _1852 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1852 = frontier_phi_40_35_ladder;
        }
        float _1854 = isnan(_1609) ? _1403 : (isnan(_1403) ? _1609 : min(_1403, _1609));
        float _1855 = isnan(_1852) ? _1854 : (isnan(_1854) ? _1852 : min(_1854, _1852));
        float _1859 = (_1855 * _1369) + _1358;
        float _1860 = (_1855 * _1372) + _1362;
        float _1861 = (_1855 * _1375) + _1366;
        float _1862 = _1855 * 9.9999997473787516355514526367188e-05;
        float _1864 = (-1.0) - _1862;
        float _1866 = _1862 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1861 > _1866) || ((_1861 < _1864) || ((_1860 > _1866) || ((_1860 < _1864) || ((_1859 < _1864) || (_1859 > _1866))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1861, cbModelParam._m0[9u].z, fma(_1860, cbModelParam._m0[9u].y, _1859 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1861, cbModelParam._m0[10u].z, fma(_1860, cbModelParam._m0[10u].y, _1859 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1861, cbModelParam._m0[11u].z, fma(_1860, cbModelParam._m0[11u].y, _1859 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_18_40_ladder = _1985.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1985.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1985.x * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_18_40_ladder_2;
        _1393 = frontier_phi_18_40_ladder_1;
        _1395 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_528, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_528, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_528, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1471 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1474 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1614;
        if (_1468 > 0.0)
        {
            _1614 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1614 = frontier_phi_30_26_ladder;
        }
        float _1879;
        if (_1471 > 0.0)
        {
            _1879 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1879 = frontier_phi_42_37_ladder;
        }
        float _2084;
        if (_1474 > 0.0)
        {
            _2084 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2084 = frontier_phi_51_48_ladder;
        }
        float _2086 = isnan(_1879) ? _1614 : (isnan(_1614) ? _1879 : min(_1614, _1879));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1468) + _1457;
        float _2092 = (_2087 * _1471) + _1461;
        float _2093 = (_2087 * _1474) + _1465;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2095 = (-1.0) - _2094;
        float _2097 = _2094 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2093 > _2097) || ((_2093 < _2095) || ((_2092 > _2097) || ((_2092 < _2095) || ((_2091 < _2095) || (_2091 > _2097))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2093, cbModelParam._m0[17u].z, fma(_2092, cbModelParam._m0[17u].y, _2091 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2093, cbModelParam._m0[18u].z, fma(_2092, cbModelParam._m0[18u].y, _2091 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2093, cbModelParam._m0[19u].z, fma(_2092, cbModelParam._m0[19u].y, _2091 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_27_51_ladder = _2291.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2291.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2291.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_27_51_ladder_2;
        _1495 = frontier_phi_27_51_ladder_1;
        _1497 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1400);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1509 = ((((1.0 - _488) * ((_475 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_488 * _475)) * _459;
    float _1510 = _1509 * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1511 = _1509 * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1512 = _1509 * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    uvec4 _1531 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1533 = _1531.x * 14u;
    uint _1534 = _1533 + 13u;
    float _1541 = _459 + (-1.0);
    float _1546 = (cbLight._m0[_1534].x * _1541) + 1.0;
    float _1547 = (cbLight._m0[_1534].y * _1541) + 1.0;
    float _1548 = (cbLight._m0[_1534].z * _1541) + 1.0;
    float _1549 = (cbLight._m0[_1534].w * _1541) + 1.0;
    uint _1550 = _1533 + 5u;
    float _1556 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
    uint _1560 = _1533 + 4u;
    float _1567 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
    uint _1571 = _1533 | 1u;
    float _1582 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_290, _291, _292));
    float _1585 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_290, _291, _292));
    float _3742 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _3753 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1590 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.3183098733425140380859375;
    float _1592 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.3183098733425140380859375;
    float _1599 = ((cbLight._m0[_1550].x * _1556) * _1592) + ((cbLight._m0[_1560].x * _1567) * _1590);
    float _1600 = ((_1556 * cbLight._m0[_1550].y) * _1592) + ((_1567 * cbLight._m0[_1560].y) * _1590);
    float _1601 = ((_1556 * cbLight._m0[_1550].z) * _1592) + ((_1567 * cbLight._m0[_1560].z) * _1590);
    uvec4 _1606 = floatBitsToUint(cbLight._m0[_1533 + 12u]);
    bool _1608 = _1606.x == 0u;
    float _1619;
    float _1621;
    float _1623;
    if (_1608)
    {
        _1619 = _1599;
        _1621 = _1600;
        _1623 = _1601;
    }
    else
    {
        uint _1627 = _1533 + 6u;
        float _1643 = (dot(vec3(cbLight._m0[_1533 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1644 = _1643 * _1643;
        float _3764 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1646 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1619 = (((cbLight._m0[_1627].x * 0.3183098733425140380859375) * _1645) * _1646) + _1599;
        _1621 = (((cbLight._m0[_1627].y * 0.3183098733425140380859375) * _1645) * _1646) + _1600;
        _1623 = (((cbLight._m0[_1627].z * 0.3183098733425140380859375) * _1645) * _1646) + _1601;
    }
    bool _1626 = _1606.y == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1626)
    {
        _1664 = _1619;
        _1666 = _1621;
        _1668 = _1623;
    }
    else
    {
        uint _1823 = _1533 + 7u;
        float _1839 = (dot(vec3(cbLight._m0[_1533 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _3780 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1842 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1664 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1619;
        _1666 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1621;
        _1668 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1623;
    }
    uint _1671 = _1533 + 8u;
    float _1684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1533].w)) * _293) * 0.949999988079071044921875);
    float _1685 = _1684 * _1684;
    float _1686 = cbLight._m0[_1533].x + _371;
    float _1687 = cbLight._m0[_1533].y + _372;
    float _1688 = cbLight._m0[_1533].z + _373;
    float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
    float _1693 = _1692 * _1686;
    float _1694 = _1692 * _1687;
    float _1695 = _1692 * _1688;
    float _1696 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1533].xyz));
    float _3796 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1699 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1700 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1701 = dot(vec3(_290, _291, _292), vec3(_1693, _1694, _1695));
    float _3818 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1705 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1693, _1694, _1695));
    float _3829 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1709 = _1685 * _1685;
    float _1713 = ((_1704 * _1704) * (_1709 + (-1.0))) + 1.0;
    float _1724 = (exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1725 = 1.0 - _1685;
    float _1736 = (0.5 / (((_1700 * ((_1699 * _1725) + _1685)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _1725) + _1685) * _1699))) * _1699;
    float _3840 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1738 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1709 / ((_1713 * _1713) * 3.141590118408203125));
    uint _1749 = _1533 + 9u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _293) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1571].x + _371;
    float _1763 = cbLight._m0[_1571].y + _372;
    float _1764 = cbLight._m0[_1571].z + _373;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1571].xyz));
    float _3851 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1776 = dot(vec3(_290, _291, _292), vec3(_1769, _1770, _1771));
    float _3862 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1769, _1770, _1771));
    float _3873 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1761 * _1761;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1797 = (exp2(log2(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1798 = 1.0 - _1761;
    float _1808 = (0.5 / (((_1700 * ((_1775 * _1798) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _1798) + _1761) * _1775))) * _1775;
    float _3884 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    float _1820 = (((_1797 * cbLight._m0[_1749].x) * _1810) * _1556) + (((_1724 * cbLight._m0[_1671].x) * _1738) * _1567);
    float _1821 = (((_1797 * cbLight._m0[_1749].y) * _1810) * _1556) + (((_1724 * cbLight._m0[_1671].y) * _1738) * _1567);
    float _1822 = (((_1797 * cbLight._m0[_1749].z) * _1810) * _1556) + (((_1724 * cbLight._m0[_1671].z) * _1738) * _1567);
    float _1884;
    float _1886;
    float _1888;
    if (_1608)
    {
        _1884 = _1820;
        _1886 = _1821;
        _1888 = _1822;
    }
    else
    {
        uint _1890 = _1533 + 2u;
        uint _1894 = _1533 + 10u;
        float _1908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _293) * 0.949999988079071044921875);
        float _1909 = _1908 * _1908;
        float _1910 = cbLight._m0[_1890].x + _371;
        float _1911 = cbLight._m0[_1890].y + _372;
        float _1912 = cbLight._m0[_1890].z + _373;
        float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
        float _1917 = _1916 * _1910;
        float _1918 = _1916 * _1911;
        float _1919 = _1916 * _1912;
        float _1920 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1890].xyz));
        float _3895 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1923 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1924 = dot(vec3(_290, _291, _292), vec3(_1917, _1918, _1919));
        float _3906 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1928 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_1917, _1918, _1919));
        float _3917 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1932 = _1909 * _1909;
        float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
        float _1945 = (exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1946 = 1.0 - _1909;
        float _1956 = (0.5 / (((_1700 * ((_1923 * _1946) + _1909)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _1946) + _1909) * _1923))) * _1923;
        float _3928 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1958 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
        float _1959 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1884 = (((_1945 * cbLight._m0[_1894].x) * _1958) * _1959) + _1820;
        _1886 = (((_1945 * cbLight._m0[_1894].y) * _1958) * _1959) + _1821;
        _1888 = (((_1945 * cbLight._m0[_1894].z) * _1958) * _1959) + _1822;
    }
    float _1994;
    float _1996;
    float _1998;
    if (_1626)
    {
        _1994 = _1884;
        _1996 = _1886;
        _1998 = _1888;
    }
    else
    {
        uint _2005 = _1533 + 3u;
        uint _2009 = _1533 + 11u;
        float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _293) * 0.949999988079071044921875);
        float _2024 = _2023 * _2023;
        float _2025 = cbLight._m0[_2005].x + _371;
        float _2026 = cbLight._m0[_2005].y + _372;
        float _2027 = cbLight._m0[_2005].z + _373;
        float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
        float _2032 = _2031 * _2025;
        float _2033 = _2031 * _2026;
        float _2034 = _2031 * _2027;
        float _2035 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2005].xyz));
        float _3944 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2039 = dot(vec3(_290, _291, _292), vec3(_2032, _2033, _2034));
        float _3955 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _2043 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2032, _2033, _2034));
        float _3966 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2047 = _2024 * _2024;
        float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
        float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2061 = 1.0 - _2024;
        float _2071 = (0.5 / (((_1700 * ((_2038 * _2061) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1700 * _2061) + _2024) * _2038))) * _2038;
        float _3977 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2073 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
        float _2074 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1994 = (((_2060 * cbLight._m0[_2009].x) * _2073) * _2074) + _1884;
        _1996 = (((_2060 * cbLight._m0[_2009].y) * _2073) * _2074) + _1886;
        _1998 = (((_2060 * cbLight._m0[_2009].z) * _2073) * _2074) + _1888;
    }
    float _2208;
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    if (_1531.y == 0u)
    {
        float _2149 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2150 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2149;
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2149;
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2149;
        uvec4 _2164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2165 = _2164.x;
        uint _2176 = uint((float(_2164.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2165))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2165)));
        float _2186 = (log2(_2152 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2187 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        uint _2190 = uint(isnan(14.0) ? _2187 : (isnan(_2187) ? 14.0 : min(_2187, 14.0)));
        uvec4 _2195 = texelFetch(g_lightClusterGridBuffer, int(((_2190 << 2u) + (_2176 << 6u)) >> 2u));
        uint _2196 = _2195.x;
        uint _2197 = _2164.z;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        if (((((1u << ((_2197 >> 4u) & 15u)) + 4294967295u) & _2196) == 0u) || ((_2197 & 240u) == 0u))
        {
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
        }
        else
        {
            float _2297;
            float _2299;
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            uint _2454 = 0u;
            uint _2463;
            bool _2464;
            for (;;)
            {
                _2463 = texelFetch(g_lightClassification, int((((_2190 << 5u) + (_2176 << 9u)) + (_2454 << 2u)) >> 2u)).x;
                _2464 = _2463 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2464)
                {
                    frontier_phi_68_pred = _2450;
                    frontier_phi_68_pred_1 = _2453;
                    frontier_phi_68_pred_2 = _2452;
                    frontier_phi_68_pred_3 = _2451;
                    frontier_phi_68_pred_4 = _2449;
                    frontier_phi_68_pred_5 = _2448;
                }
                else
                {
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    uint _2599;
                    _2593 = _2448;
                    _2594 = _2449;
                    _2595 = _2450;
                    _2596 = _2451;
                    _2597 = _2452;
                    _2598 = _2453;
                    _2599 = _2463;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    for (;;)
                    {
                        uint _2603 = uint(findLSB(_2599)) + (_2454 << 5u);
                        uint _2600 = (_2599 + 4294967295u) & _2599;
                        uint _2605 = _2603 * 48u;
                        vec4 _2619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 3u)).x));
                        uint _2625 = (_2603 * 48u) + 4u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 3u)).x));
                        uint _2644 = (_2603 * 48u) + 8u;
                        vec3 _2655 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x));
                        float _2659 = _2619.x - _2150;
                        float _2660 = _2619.y - _2151;
                        float _2661 = _2619.z - _2152;
                        float _2662 = dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661));
                        float _2665 = inversesqrt(_2662);
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2669 = dot(vec3(_413, _416, _419), vec3(_2666, _2667, _2668));
                        float _2674 = 1.0 - (_2662 * _2619.w);
                        float _4003 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _2676 = sqrt(_2662) * _2638.w;
                        float _2679 = 1.39999997615814208984375 / (_2676 + 1.39999997615814208984375);
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2669) + _2680;
                        float _2686 = _2676 * _2676;
                        float _2690 = ((isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0))) * _2675) / ((_2686 * 0.699999988079071044921875) + 1.0);
                        float _2694 = (-0.0) - _2150;
                        float _2695 = (-0.0) - _2151;
                        float _2696 = (-0.0) - _2152;
                        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2711 = exp2(log2(1.0 / ((_2686 * 3.5) + 5.0)) * 0.25);
                        float _2712 = 1.0 - _475;
                        float _2719 = sqrt(1.0 - ((1.0 - (_2712 * _2712)) * (1.0 - (_2711 * _2711))));
                        float _2720 = _2719 * _2719;
                        float _2721 = _2720 * _2720;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2724 = _2703 + _2668;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2732 = dot(vec3(_413, _416, _419), vec3(_2701, _2702, _2703));
                        float _4019 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2735 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2736 = dot(vec3(_413, _416, _419), vec3(_2728 * _2722, _2728 * _2723, _2728 * _2724));
                        float _4030 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2739 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2743 = ((_2739 * _2739) * (_2721 + (-1.0))) + 1.0;
                        float _2744 = _2679 * _2720;
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2669) + _2745;
                        float _4041 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2750 = 1.0 - _2720;
                        float _2760 = (0.5 / (((_2749 * ((_2735 * _2750) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2749 * _2750) + _2720) * _2735))) * _2749;
                        float _4052 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2771 = (((_2721 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_2743 * _2743) * ((_2686 * 2.1991131305694580078125) + 3.141590118408203125))) * _2675;
                        _2523 = (_2690 * _2638.x) + _2596;
                        _2524 = (_2690 * _2638.y) + _2597;
                        _2525 = (_2690 * _2638.z) + _2598;
                        _2520 = (_2771 * _2655.x) + _2593;
                        _2521 = (_2771 * _2655.y) + _2594;
                        _2522 = (_2771 * _2655.z) + _2595;
                        if (_2600 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2593 = _2520;
                            _2594 = _2521;
                            _2595 = _2522;
                            _2596 = _2523;
                            _2597 = _2524;
                            _2598 = _2525;
                            _2599 = _2600;
                        }
                    }
                    frontier_phi_68_pred = _2522;
                    frontier_phi_68_pred_1 = _2525;
                    frontier_phi_68_pred_2 = _2524;
                    frontier_phi_68_pred_3 = _2523;
                    frontier_phi_68_pred_4 = _2521;
                    frontier_phi_68_pred_5 = _2520;
                }
                _2301 = frontier_phi_68_pred;
                _2307 = frontier_phi_68_pred_1;
                _2305 = frontier_phi_68_pred_2;
                _2303 = frontier_phi_68_pred_3;
                _2299 = frontier_phi_68_pred_4;
                _2297 = frontier_phi_68_pred_5;
                uint _2455 = _2454 + 1u;
                if (_2455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2448 = _2297;
                    _2449 = _2299;
                    _2450 = _2301;
                    _2451 = _2303;
                    _2452 = _2305;
                    _2453 = _2307;
                    _2454 = _2455;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
        }
        uvec4 _2310 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2311 = _2310.z;
        uint _2313 = (_2311 >> 8u) & 15u;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((4294967295u << _2313) & _2196) == 0u)
        {
            _2416 = _2296;
            _2418 = _2298;
            _2420 = _2300;
            _2422 = _2302;
            _2424 = _2304;
            _2426 = _2306;
        }
        else
        {
            float _2441 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
            float _2442 = _2441 * _2150;
            float _2443 = _2441 * _2151;
            float _2444 = _2441 * _2152;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2313 < ((_2311 >> 12u) & 15u))
            {
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2576 = _2296;
                float _2577 = _2298;
                float _2578 = _2300;
                float _2579 = _2302;
                float _2580 = _2304;
                float _2581 = _2306;
                uint _2582 = _2313;
                uint _2591;
                bool _2592;
                for (;;)
                {
                    _2591 = texelFetch(g_lightClassification, int((((_2190 << 5u) + (_2176 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                    _2592 = _2591 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2592)
                    {
                        frontier_phi_79_pred = _2581;
                        frontier_phi_79_pred_1 = _2580;
                        frontier_phi_79_pred_2 = _2579;
                        frontier_phi_79_pred_3 = _2578;
                        frontier_phi_79_pred_4 = _2577;
                        frontier_phi_79_pred_5 = _2576;
                    }
                    else
                    {
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _2798 = _2576;
                        float _2799 = _2577;
                        float _2800 = _2578;
                        float _2801 = _2579;
                        float _2802 = _2580;
                        float _2803 = _2581;
                        uint _2804 = _2591;
                        uint _2805;
                        vec4 _2830;
                        float _2831;
                        vec4 _2846;
                        vec3 _2858;
                        vec4 _2874;
                        vec4 _2890;
                        float _2937;
                        bool _2938;
                        for (;;)
                        {
                            uint _2815 = ((_2582 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2804));
                            _2805 = (_2804 + 4294967295u) & _2804;
                            uint _2817 = _2815 * 40u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2831 = _2830.w;
                            uint _2833 = (_2815 * 40u) + 4u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2815 * 40u) + 8u;
                            _2858 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x));
                            uint _2861 = (_2815 * 40u) + 16u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2815 * 40u) + 20u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2893 = (_2815 * 40u) + 24u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2912 = (_2815 * 40u) + 28u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2937 = fma(_2152, _2925.z, fma(_2151, _2925.y, _2925.x * _2150)) + _2925.w;
                            _2938 = !((fma(_2152, _2906.z, fma(_2151, _2906.y, _2906.x * _2150)) + _2906.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2938)
                            {
                                float _2965 = _2830.x - _2150;
                                float _2966 = _2830.y - _2151;
                                float _2967 = _2830.z - _2152;
                                float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                                float _2971 = inversesqrt(_2968);
                                float _2972 = _2971 * _2965;
                                float _2973 = _2971 * _2966;
                                float _2974 = _2971 * _2967;
                                float _2978 = 1.0 - (_2968 / (_2831 * _2831));
                                float _4063 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                                float _2983 = sqrt(_2968) * _2846.w;
                                float _2985 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                                float _2986 = _2985 * _2985;
                                float _2989 = ((1.0 - _2986) * dot(vec3(_2972, _2973, _2974), vec3(_413, _416, _419))) + _2986;
                                float _2992 = _2983 * _2983;
                                float _2996 = (fma(_2152, _2874.z, fma(_2151, _2874.y, _2874.x * _2150)) + _2874.w) / _2937;
                                float _2997 = (fma(_2152, _2890.z, fma(_2151, _2890.y, _2890.x * _2150)) + _2890.w) / _2937;
                                float _3001 = 1.0 - dot(vec2(_2996, _2997), vec2(_2996, _2997));
                                float _4079 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3003 = _3002 * (((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2979) / ((_2992 * 0.699999988079071044921875) + 1.0));
                                float _3015 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                                float _3016 = 1.0 - _475;
                                float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                                float _3024 = _3023 * _3023;
                                float _3025 = _3024 * _3024;
                                float _3026 = _2972 - _2442;
                                float _3027 = _2973 - _2443;
                                float _3028 = _2974 - _2444;
                                float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                                float _3036 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2442, (-0.0) - _2443, (-0.0) - _2444));
                                float _4090 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3040 = dot(vec3(_413, _416, _419), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                                float _4101 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                                float _3048 = _2985 * _3024;
                                float _3049 = _3048 * _3048;
                                float _3055 = ((1.0 - _3049) * dot(vec3(_413, _416, _419), vec3(_2972, _2973, _2974))) + _3049;
                                float _4112 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3057 = 1.0 - _3024;
                                float _3067 = (0.5 / (((_3056 * ((_3039 * _3057) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3024) * _3039))) * _3056;
                                float _4123 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3077 = (_3002 * _2979) * (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_3047 * _3047) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3003 * _2846.z;
                                frontier_phi_85_pred_1 = _3003 * _2846.y;
                                frontier_phi_85_pred_2 = _3003 * _2846.x;
                                frontier_phi_85_pred_3 = _3077 * _2858.z;
                                frontier_phi_85_pred_4 = _3077 * _2858.y;
                                frontier_phi_85_pred_5 = _3077 * _2858.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3086 = frontier_phi_85_pred;
                            _3085 = frontier_phi_85_pred_1;
                            _3084 = frontier_phi_85_pred_2;
                            _3083 = frontier_phi_85_pred_3;
                            _3082 = frontier_phi_85_pred_4;
                            _3081 = frontier_phi_85_pred_5;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2790 = _3086 + _2803;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            if (_2805 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2805;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2790;
                        frontier_phi_79_pred_1 = _2789;
                        frontier_phi_79_pred_2 = _2788;
                        frontier_phi_79_pred_3 = _2787;
                        frontier_phi_79_pred_4 = _2786;
                        frontier_phi_79_pred_5 = _2785;
                    }
                    _2427 = frontier_phi_79_pred;
                    _2425 = frontier_phi_79_pred_1;
                    _2423 = frontier_phi_79_pred_2;
                    _2421 = frontier_phi_79_pred_3;
                    _2419 = frontier_phi_79_pred_4;
                    _2417 = frontier_phi_79_pred_5;
                    uint _2583 = _2582 + 1u;
                    if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2576 = _2417;
                        _2577 = _2419;
                        _2578 = _2421;
                        _2579 = _2423;
                        _2580 = _2425;
                        _2581 = _2427;
                        _2582 = _2583;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2423;
                frontier_phi_60_61_ladder_1 = _2427;
                frontier_phi_60_61_ladder_2 = _2425;
                frontier_phi_60_61_ladder_3 = _2421;
                frontier_phi_60_61_ladder_4 = _2419;
                frontier_phi_60_61_ladder_5 = _2417;
            }
            else
            {
                frontier_phi_60_61_ladder = _2302;
                frontier_phi_60_61_ladder_1 = _2306;
                frontier_phi_60_61_ladder_2 = _2304;
                frontier_phi_60_61_ladder_3 = _2300;
                frontier_phi_60_61_ladder_4 = _2298;
                frontier_phi_60_61_ladder_5 = _2296;
            }
            _2416 = frontier_phi_60_61_ladder_5;
            _2418 = frontier_phi_60_61_ladder_4;
            _2420 = frontier_phi_60_61_ladder_3;
            _2422 = frontier_phi_60_61_ladder;
            _2424 = frontier_phi_60_61_ladder_2;
            _2426 = frontier_phi_60_61_ladder_1;
        }
        float _2431 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _2208 = (_2431 * _2422) + _1664;
        _2210 = (_2431 * _2424) + _1666;
        _2212 = (_2431 * _2426) + _1668;
        _2214 = ((_2416 * 0.039999999105930328369140625) * _2431) + _1994;
        _2216 = ((_2418 * 0.039999999105930328369140625) * _2431) + _1996;
        _2218 = ((_2420 * 0.039999999105930328369140625) * _2431) + _1998;
    }
    else
    {
        _2208 = _1664;
        _2210 = _1666;
        _2212 = _1668;
        _2214 = _1994;
        _2216 = _1996;
        _2218 = _1998;
    }
    float _4139 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4150 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4161 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2235 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2208 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _459))) + ((_2214 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1298)) * cbPerFrame._m0[3u].x);
    float _2236 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2210 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _459))) + ((_2216 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1298)) * cbPerFrame._m0[3u].x);
    float _2237 = ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2212 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _459))) + ((_2218 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1298)) * cbPerFrame._m0[3u].x);
    uint _2238 = _432 + 6u;
    float _2246 = _392 / cbSceneParam._m0[86u].x;
    float _2247 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2261 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2246, _2247, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2263 = _2261.x;
    float _2264 = _2261.y;
    float _2265 = _2261.z;
    float _2266 = _2261.w;
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2321 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2322 = _2321 / _313;
        float _2333 = _2322 * _364;
        float _2334 = _365 * _2322;
        float _2335 = (-0.0) - _2334;
        float _2336 = _2322 * _366;
        float _2338 = (cbSceneParam._m0[77u].w * _2335) / _2321;
        float _2339 = _2338 + cbSceneParam._m0[79u].w;
        float _2340 = cbSceneParam._m0[79u].w - _2334;
        float _2346 = sqrt(((_2333 * _2333) + (_2334 * _2334)) + (_2336 * _2336));
        float _2349 = (1.0 - (cbSceneParam._m0[77u].w / _2321)) * _2346;
        float _2354 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2356 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2533;
        if (abs((_2335 - _2338) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2533 = ((((_2339 > 0.0) ? exp2(_2354 * _2339) : (2.0 - exp2(_2356 * _2339))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2349;
        }
        else
        {
            float _2477 = 1.0 / cbSceneParam._m0[80u].x;
            float _2478 = isnan(_2340) ? _2339 : (isnan(_2339) ? _2340 : max(_2339, _2340));
            float _2479 = isnan(_2340) ? _2339 : (isnan(_2339) ? _2340 : min(_2339, _2340));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            float _2489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : min(_2479, 0.0));
            _2533 = ((abs(_2346 / _2335) * cbSceneParam._m0[80u].y) * ((((_2488 - _2489) * 2.0) - ((exp2(_2354 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0)))) - exp2(_2354 * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))))) * _2477)) - ((exp2(_2356 * _2488) - exp2(_2356 * _2489)) * _2477))) + (_2349 * cbSceneParam._m0[80u].z);
        }
        vec4 _2535 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2246, _2247, 1.0), 0.0);
        float _2544 = exp2((_2533 * (-1.44269502162933349609375)) * (1.0 - _2535.w));
        float _2545 = log2(_2544);
        float _2561 = log2(_2266);
        _2358 = (exp2(_2561 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].x)) * _2535.x) / cbSceneParam._m0[78u].x)) + _2263;
        _2360 = (exp2(_2561 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].y)) * _2535.y) / cbSceneParam._m0[78u].y)) + _2264;
        _2362 = (exp2(_2561 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2545 * cbSceneParam._m0[78u].z)) * _2535.z) / cbSceneParam._m0[78u].z)) + _2265;
        _2364 = _2544 * _2266;
    }
    else
    {
        _2358 = _2263;
        _2360 = _2264;
        _2362 = _2265;
        _2364 = _2266;
    }
    bool _2571;
    vec4 _2374;
    vec4 _2396;
    float _2398;
    float _2402;
    float _2403;
    float _2404;
    float _2405;
    bool _2415;
    for (;;)
    {
        _2374 = cbMatDynParam._m0[0u];
        float _2376 = roundEven(_2374.y);
        bool _2377 = _2376 == 3.0;
        float _2378 = log2(_2364);
        float _2385 = exp2(_2378 * cbSceneParam._m0[78u].x) * _2235;
        float _2386 = exp2(_2378 * cbSceneParam._m0[78u].y) * _2236;
        float _2387 = exp2(_2378 * cbSceneParam._m0[78u].z) * _2237;
        float _2394 = _380 + (-0.5);
        _2396 = cbMtdParam._m0[1u];
        _2398 = _2396.y * _2394;
        float _2401 = (_2376 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2402 = _2401 * (_2377 ? _2385 : (_2385 + (cbSceneParam._m0[72u].w * _2358)));
        _2403 = _2401 * (_2377 ? _2386 : (_2386 + (cbSceneParam._m0[72u].w * _2360)));
        _2404 = _2401 * (_2377 ? _2387 : (_2387 + (cbSceneParam._m0[72u].w * _2362)));
        _2405 = _2394 * 0.999000012874603271484375;
        _2415 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2415)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2405) < 0.5)
            {
                _2571 = true;
                break;
            }
        }
        uint _2512 = _434 + uint(_2374.w);
        if ((cbInstanceData._m0[_2512].w < 1.0) && ((cbInstanceData._m0[_2512].w + _2405) < 0.5))
        {
            _2571 = true;
            break;
        }
        if ((_2398 + 1.0) < _2396.x)
        {
            _2571 = true;
            break;
        }
        _2571 = false;
        break;
    }
    float _2776;
    if (_2571)
    {
        discard_state = true;
        _2776 = 0.0;
    }
    else
    {
        _2776 = cbInstanceData._m0[_2238].w;
    }
    SV_Target.x = _2402;
    SV_Target.y = _2403;
    SV_Target.z = _2404;
    SV_Target.w = _2776;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2238].w;
    discard_exit();
}


