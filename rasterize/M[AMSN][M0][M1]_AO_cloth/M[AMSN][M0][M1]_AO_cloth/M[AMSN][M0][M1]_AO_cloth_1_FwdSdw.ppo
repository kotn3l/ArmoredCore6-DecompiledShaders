#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _819;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _253.z;
    float _262 = (_253.x * 2.0) + (-1.0);
    float _264 = (_253.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3418 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    float _276 = cbMtdParam._m0[10u].x + _253.w;
    float _279 = fma(_271, _211, fma(_264, _203 * TANGENT.x, (_189 * _182) * _262));
    float _282 = fma(_271, _212, fma(_264, _203 * TANGENT.y, (_189 * _183) * _262));
    float _285 = fma(_271, _213, fma(_264, _203 * TANGENT.z, (_189 * _184) * _262));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3429 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _293 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3451 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3462 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3473 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _404 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _407 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = (_420 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_423].z;
    float _3484 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    vec4 _443 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _447 = ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * TEXCOORD.z) * _443.x;
    float _448 = dot(vec3(_290, _291, _292), vec3(_371, _372, _373));
    float _451 = _448 * 2.0;
    float _455 = (_451 * _290) - _371;
    float _456 = (_451 * _291) - _372;
    float _457 = (_451 * _292) - _373;
    float _461 = abs(dot(vec3(_371, _372, _373), vec3(_290, _291, _292)));
    float _3517 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = sqrt(_293);
    float _476 = exp2((_463 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_463 * 3.0));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _818;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _543 = fma(_516, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508));
        float _547 = fma(_516, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508));
        float _551 = fma(_516, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508));
        float _576 = _508 + _290;
        float _577 = _512 + _291;
        float _578 = _516 + _292;
        float _588 = fma(_578, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576)) - _543;
        float _589 = fma(_578, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576)) - _547;
        float _590 = fma(_578, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576)) - _551;
        float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
        float _607 = ((_594 * _588) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_543 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _608 = ((_594 * _589) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_547 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _609 = ((_594 * _590) / cbModelParam._m0[34u].z) + ((((((_551 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        float _646 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_612.x + (-0.5));
        float _648 = _646 * (_612.y + (-0.5));
        float _649 = _646 * (_612.z + (-0.5));
        float _656 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_619.x + (-0.5));
        float _658 = _656 * (_619.y + (-0.5));
        float _659 = _656 * (_619.z + (-0.5));
        float _666 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_626.x + (-0.5));
        float _668 = _666 * (_626.y + (-0.5));
        float _669 = _666 * (_626.z + (-0.5));
        float _676 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_633.x + (-0.5));
        float _678 = _676 * (_633.y + (-0.5));
        float _679 = _676 * (_633.z + (-0.5));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = _647 * 0.5;
        float _684 = _657 * 0.5;
        float _685 = _667 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _700 = (dot(vec3(_290, _291, _292), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _710 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3565 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_712 + 1.0))) + _717) * _680;
        float _727 = _648 * 0.5;
        float _728 = _658 * 0.5;
        float _729 = _668 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_290, _291, _292), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3598 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_754 + 1.0))) + _759) * _681;
        float _769 = _649 * 0.5;
        float _770 = _659 * 0.5;
        float _771 = _669 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_290, _291, _292), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3631 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_796 + 1.0))) + _801) * _682;
        _818 = _649;
        _820 = _648;
        _821 = _647;
        _822 = _659;
        _823 = _658;
        _824 = _657;
        _825 = _669;
        _826 = _668;
        _827 = _667;
        _828 = _682;
        _829 = _681;
        _830 = _680;
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
    }
    else
    {
        _818 = _819;
        _820 = _819;
        _821 = _819;
        _822 = _819;
        _823 = _819;
        _824 = _819;
        _825 = _819;
        _826 = _819;
        _827 = _819;
        _828 = _819;
        _829 = _819;
        _830 = _819;
        _831 = 0.0;
        _832 = 0.0;
        _833 = 0.0;
    }
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _859 = fma(_516, cbModelParam._m0[30u].z, fma(_512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _508));
        float _863 = fma(_516, cbModelParam._m0[31u].z, fma(_512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _508));
        float _867 = fma(_516, cbModelParam._m0[32u].z, fma(_512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _508));
        float _890 = _508 + _290;
        float _891 = _512 + _291;
        float _892 = _516 + _292;
        float _902 = fma(_892, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890)) - _859;
        float _903 = fma(_892, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890)) - _863;
        float _904 = fma(_892, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890)) - _867;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_859 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_863 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[35u].z) + ((((((_867 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _958 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_925.x + (-0.5));
        float _960 = _958 * (_925.y + (-0.5));
        float _961 = _958 * (_925.z + (-0.5));
        float _968 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_932.x + (-0.5));
        float _970 = _968 * (_932.y + (-0.5));
        float _971 = _968 * (_932.z + (-0.5));
        float _978 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_939.x + (-0.5));
        float _980 = _978 * (_939.y + (-0.5));
        float _981 = _978 * (_939.z + (-0.5));
        float _988 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_946.x + (-0.5));
        float _990 = _988 * (_946.y + (-0.5));
        float _991 = _988 * (_946.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_290, _291, _292), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3694 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1022 + 1.0))) + _1027) * _992;
        float _1037 = _960 * 0.5;
        float _1038 = _970 * 0.5;
        float _1039 = _980 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_290, _291, _292), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3727 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1064 + 1.0))) + _1069) * _993;
        float _1079 = _961 * 0.5;
        float _1080 = _971 * 0.5;
        float _1081 = _981 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_290, _291, _292), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3760 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1106 + 1.0))) + _1111) * _994;
        _1128 = _961;
        _1129 = _960;
        _1130 = _959;
        _1131 = _971;
        _1132 = _970;
        _1133 = _969;
        _1134 = _981;
        _1135 = _980;
        _1136 = _979;
        _1137 = _994;
        _1138 = _993;
        _1139 = _992;
        _1140 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1141 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _819;
        _1129 = _819;
        _1130 = _819;
        _1131 = _819;
        _1132 = _819;
        _1133 = _819;
        _1134 = _819;
        _1135 = _819;
        _1136 = _819;
        _1137 = _819;
        _1138 = _819;
        _1139 = _819;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1152 = (cbModelParam._m0[1u].x * (_1140 - _831)) + _831;
    float _1153 = (cbModelParam._m0[1u].x * (_1141 - _832)) + _832;
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1175 = fma(_1154, cbSceneParam._m0[89u].z, fma(_1153, cbSceneParam._m0[89u].y, _1152 * cbSceneParam._m0[89u].x));
    float _1178 = fma(_1154, cbSceneParam._m0[90u].z, fma(_1153, cbSceneParam._m0[90u].y, _1152 * cbSceneParam._m0[90u].x));
    float _1181 = fma(_1154, cbSceneParam._m0[91u].z, fma(_1153, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1152));
    float _1196 = _455 * 0.5;
    float _1197 = _456 * 0.5;
    float _1198 = _457 * 0.5;
    float _1199 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1202 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1205 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1128, _1131, _1134, _1137));
    float _1239;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1212 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_818, _822, _825, _828));
        float _1216 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_820, _823, _826, _829));
        float _1220 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_821, _824, _827, _830));
        float _1227 = dot(vec4(cbModelParam._m0[39u]), vec4(_1196, _1197, _1198, 1.0));
        _1239 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1227) ? 0.0 : (isnan(0.0) ? _1227 : max(0.0, _1227))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1239 = 1.0;
    }
    float _1250;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1241 = dot(vec4(cbModelParam._m0[40u]), vec4(_1196, _1197, _1198, 1.0));
        _1250 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1241) ? 0.0 : (isnan(0.0) ? _1241 : max(0.0, _1241))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1250 = 1.0;
    }
    float _1254 = (_1250 * cbModelParam._m0[1u].x) + (_1239 * (1.0 - cbModelParam._m0[1u].x));
    float _1264 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1265 = isnan(_1264) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1264 : min(cbModelParam._m0[25u].z, _1264));
    float _1347;
    float _1349;
    float _1351;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1314 = fma(_516, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508)) + cbModelParam._m0[13u].w;
        float _1318 = fma(_516, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508)) + cbModelParam._m0[14u].w;
        float _1322 = fma(_516, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508)) + cbModelParam._m0[15u].w;
        float _1325 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _1328 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _1331 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _1359;
        if (_1325 > 0.0)
        {
            _1359 = abs((1.0 - _1314) / _1325);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1314 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1359 = frontier_phi_16_14_ladder;
        }
        float _1533;
        if (_1328 > 0.0)
        {
            _1533 = abs((1.0 - _1318) / _1328);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1318 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1533 = frontier_phi_25_21_ladder;
        }
        float _1829;
        if (_1331 > 0.0)
        {
            _1829 = abs((1.0 - _1322) / _1331);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1322 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1829 = frontier_phi_37_32_ladder;
        }
        float _1831 = isnan(_1533) ? _1359 : (isnan(_1359) ? _1533 : min(_1359, _1533));
        float _1832 = isnan(_1829) ? _1831 : (isnan(_1831) ? _1829 : min(_1831, _1829));
        float _1836 = (_1832 * _1325) + _1314;
        float _1837 = (_1832 * _1328) + _1318;
        float _1838 = (_1832 * _1331) + _1322;
        float _1839 = _1832 * 9.9999997473787516355514526367188e-05;
        float _1841 = (-1.0) - _1839;
        float _1843 = _1839 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1838 > _1843) || ((_1838 < _1841) || ((_1837 > _1843) || ((_1837 < _1841) || ((_1836 < _1841) || (_1836 > _1843))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1983 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1838, cbModelParam._m0[9u].z, fma(_1837, cbModelParam._m0[9u].y, _1836 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1838, cbModelParam._m0[10u].z, fma(_1837, cbModelParam._m0[10u].y, _1836 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1838, cbModelParam._m0[11u].z, fma(_1837, cbModelParam._m0[11u].y, _1836 * cbModelParam._m0[11u].x))), _1265);
            frontier_phi_15_37_ladder = _1983.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1983.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1983.z * cbModelParam._m0[1u].y;
        }
        _1347 = frontier_phi_15_37_ladder_1;
        _1349 = frontier_phi_15_37_ladder;
        _1351 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1335 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _1265);
        _1347 = _1335.x * cbModelParam._m0[1u].y;
        _1349 = _1335.y * cbModelParam._m0[1u].y;
        _1351 = _1335.z * cbModelParam._m0[1u].y;
    }
    float _1355 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1356 = isnan(_1355) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1355 : min(cbModelParam._m0[25u].w, _1355));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1413 = fma(_516, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508)) + cbModelParam._m0[21u].w;
        float _1417 = fma(_516, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508)) + cbModelParam._m0[22u].w;
        float _1421 = fma(_516, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508)) + cbModelParam._m0[23u].w;
        float _1424 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1427 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1430 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1538;
        if (_1424 > 0.0)
        {
            _1538 = abs((1.0 - _1413) / _1424);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1413 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1538 = frontier_phi_27_23_ladder;
        }
        float _1856;
        if (_1427 > 0.0)
        {
            _1856 = abs((1.0 - _1417) / _1427);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1417 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1856 = frontier_phi_39_34_ladder;
        }
        float _2183;
        if (_1430 > 0.0)
        {
            _2183 = abs((1.0 - _1421) / _1430);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1421 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2183 = frontier_phi_49_46_ladder;
        }
        float _2185 = isnan(_1856) ? _1538 : (isnan(_1538) ? _1856 : min(_1538, _1856));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1424) + _1413;
        float _2191 = (_2186 * _1427) + _1417;
        float _2192 = (_2186 * _1430) + _1421;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2193;
        float _2196 = _2193 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2192 > _2196) || ((_2192 < _2194) || ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 < _2194) || (_2190 > _2196))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2192, cbModelParam._m0[17u].z, fma(_2191, cbModelParam._m0[17u].y, _2190 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2192, cbModelParam._m0[18u].z, fma(_2191, cbModelParam._m0[18u].y, _2190 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2192, cbModelParam._m0[19u].z, fma(_2191, cbModelParam._m0[19u].y, _2190 * cbModelParam._m0[19u].x))), _1356);
            frontier_phi_24_49_ladder = _2310.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2310.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2310.x * cbModelParam._m0[1u].z;
        }
        _1449 = frontier_phi_24_49_ladder_2;
        _1451 = frontier_phi_24_49_ladder_1;
        _1453 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _1356);
        _1449 = _1433.x * cbModelParam._m0[1u].z;
        _1451 = _1433.y * cbModelParam._m0[1u].z;
        _1453 = _1433.z * cbModelParam._m0[1u].z;
    }
    float _1465 = ((((1.0 - _476) * ((_463 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_476 * _463)) * _447;
    float _1466 = _1465 * ((cbModelParam._m0[1u].w * (_1449 - _1347)) + _1347);
    float _1467 = _1465 * ((cbModelParam._m0[1u].w * (_1451 - _1349)) + _1349);
    float _1468 = _1465 * ((cbModelParam._m0[1u].w * (_1453 - _1351)) + _1351);
    float _1471 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, _1466 * cbSceneParam._m0[91u].x));
    float _1512 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1516 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1520 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1524 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1525 = _1512 / _1524;
    float _1526 = _1516 / _1524;
    float _1527 = _1520 / _1524;
    float _1674;
    float _1675;
    float _1676;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1554 = ((uint(_1527 > cbSceneParam._m0[59u].y) + uint(_1527 > cbSceneParam._m0[59u].x)) + uint(_1527 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1555 = _1554 + 43u;
        uint _1563 = _1554 + 44u;
        uint _1571 = _1554 + 45u;
        uint _1579 = _1554 + 46u;
        float _1590 = fma(_1524, cbSceneParam._m0[_1555].w, fma(_1520, cbSceneParam._m0[_1555].z, fma(_1516, cbSceneParam._m0[_1555].y, _1512 * cbSceneParam._m0[_1555].x)));
        float _1594 = fma(_1524, cbSceneParam._m0[_1563].w, fma(_1520, cbSceneParam._m0[_1563].z, fma(_1516, cbSceneParam._m0[_1563].y, _1512 * cbSceneParam._m0[_1563].x)));
        float _1602 = fma(_1524, cbSceneParam._m0[_1579].w, fma(_1520, cbSceneParam._m0[_1579].z, fma(_1516, cbSceneParam._m0[_1579].y, _1512 * cbSceneParam._m0[_1579].x)));
        float _1607 = cbSceneParam._m0[33u].z * _1602;
        float _1609 = cbSceneParam._m0[33u].w * _1602;
        float _1612 = fma(_1524, cbSceneParam._m0[_1571].w, fma(_1520, cbSceneParam._m0[_1571].z, fma(_1516, cbSceneParam._m0[_1571].y, _1512 * cbSceneParam._m0[_1571].x))) / _1602;
        float _1660 = (cbSceneParam._m0[33u].x - sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527))) * cbSceneParam._m0[33u].y;
        float _3886 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1667 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1607 + _1590) / _1602, (_1609 + _1594) / _1602), _1612), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1609 + _1590) / _1602, (_1594 - _1607) / _1602), _1612), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1590 - _1607) / _1602, (_1594 - _1609) / _1602), _1612), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1590 - _1609) / _1602, (_1607 + _1594) / _1602), _1612), 0.0)).x), vec4(0.25)));
        _1674 = 1.0 - (_1667 * cbSceneParam._m0[34u].x);
        _1675 = 1.0 - (_1667 * cbSceneParam._m0[34u].y);
        _1676 = 1.0 - (_1667 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1674 = 1.0;
        _1675 = 1.0;
        _1676 = 1.0;
    }
    float _1740;
    float _1742;
    float _1744;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1728 = fma(_1524, cbSceneParam._m0[63u].w, fma(_1520, cbSceneParam._m0[63u].z, fma(_1516, cbSceneParam._m0[63u].y, _1512 * cbSceneParam._m0[63u].x)));
        float _1729 = fma(_1524, cbSceneParam._m0[60u].w, fma(_1520, cbSceneParam._m0[60u].z, fma(_1516, cbSceneParam._m0[60u].y, _1512 * cbSceneParam._m0[60u].x))) / _1728;
        float _1730 = fma(_1524, cbSceneParam._m0[61u].w, fma(_1520, cbSceneParam._m0[61u].z, fma(_1516, cbSceneParam._m0[61u].y, _1512 * cbSceneParam._m0[61u].x))) / _1728;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1729 >= cbSceneParam._m0[64u].x) && (_1730 >= cbSceneParam._m0[64u].y)) && (_1729 <= cbSceneParam._m0[64u].z)) && (_1730 <= cbSceneParam._m0[64u].w))
        {
            float _1869 = fma(_1524, cbSceneParam._m0[62u].w, fma(_1520, cbSceneParam._m0[62u].z, fma(_1516, cbSceneParam._m0[62u].y, _1512 * cbSceneParam._m0[62u].x))) / _1728;
            float _1873 = isnan(cbSceneParam._m0[41u].w) ? _1869 : (isnan(_1869) ? cbSceneParam._m0[41u].w : max(_1869, cbSceneParam._m0[41u].w));
            float _1916 = (cbSceneParam._m0[33u].x - sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527))) * cbSceneParam._m0[33u].y;
            float _3902 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
            float _1923 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1729, cbSceneParam._m0[33u].w + _1730), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1729, _1730 - cbSceneParam._m0[33u].z), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1729 - cbSceneParam._m0[33u].z, _1730 - cbSceneParam._m0[33u].w), _1873), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1729 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1730), _1873), 0.0)).x), vec4(0.25)));
            float _1927 = 1.0 - (_1923 * cbSceneParam._m0[34u].x);
            float _1928 = 1.0 - (_1923 * cbSceneParam._m0[34u].y);
            float _1929 = 1.0 - (_1923 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1928) ? _1675 : (isnan(_1675) ? _1928 : min(_1675, _1928));
            frontier_phi_36_35_ladder_1 = isnan(_1929) ? _1676 : (isnan(_1676) ? _1929 : min(_1676, _1929));
            frontier_phi_36_35_ladder_2 = isnan(_1927) ? _1674 : (isnan(_1674) ? _1927 : min(_1674, _1927));
        }
        else
        {
            frontier_phi_36_35_ladder = _1675;
            frontier_phi_36_35_ladder_1 = _1676;
            frontier_phi_36_35_ladder_2 = _1674;
        }
        _1740 = frontier_phi_36_35_ladder_2;
        _1742 = frontier_phi_36_35_ladder;
        _1744 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1740 = _1674;
        _1742 = _1675;
        _1744 = _1676;
    }
    uvec4 _1749 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1751 = _1749.x * 14u;
    uint _1752 = _1751 + 13u;
    float _1759 = _447 + (-1.0);
    float _1764 = (cbLight._m0[_1752].x * _1759) + 1.0;
    float _1765 = (cbLight._m0[_1752].y * _1759) + 1.0;
    float _1766 = (cbLight._m0[_1752].z * _1759) + 1.0;
    float _1767 = (cbLight._m0[_1752].w * _1759) + 1.0;
    uint _1768 = _1751 + 5u;
    float _1774 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1778 = _1751 + 4u;
    float _1788 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1792 = _1751 | 1u;
    float _1803 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_290, _291, _292));
    float _1806 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_290, _291, _292));
    float _3938 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _3949 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1811 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1813 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1820 = ((cbLight._m0[_1768].x * _1774) * _1813) + (((cbLight._m0[_1778].x * _1740) * _1788) * _1811);
    float _1821 = ((_1774 * cbLight._m0[_1768].y) * _1813) + (((cbLight._m0[_1778].y * _1742) * _1788) * _1811);
    float _1822 = ((_1774 * cbLight._m0[_1768].z) * _1813) + (((cbLight._m0[_1778].z * _1744) * _1788) * _1811);
    uvec4 _1826 = floatBitsToUint(cbLight._m0[_1751 + 12u]);
    bool _1828 = _1826.x == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1828)
    {
        _1930 = _1820;
        _1932 = _1821;
        _1934 = _1822;
    }
    else
    {
        uint _1938 = _1751 + 6u;
        float _1954 = (dot(vec3(cbLight._m0[_1751 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _3960 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1957 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1930 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1820;
        _1932 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1821;
        _1934 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1822;
    }
    bool _1937 = _1826.y == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1937)
    {
        _1992 = _1930;
        _1994 = _1932;
        _1996 = _1934;
    }
    else
    {
        uint _2154 = _1751 + 7u;
        float _2170 = (dot(vec3(cbLight._m0[_1751 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _3976 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2173 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1992 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _1930;
        _1994 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _1932;
        _1996 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _1934;
    }
    uint _1999 = _1751 + 8u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _293) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1751].x + _371;
    float _2015 = cbLight._m0[_1751].y + _372;
    float _2016 = cbLight._m0[_1751].z + _373;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1751].xyz));
    float _3992 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2028 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _2029 = dot(vec3(_290, _291, _292), vec3(_2021, _2022, _2023));
    float _4014 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_2021, _2022, _2023));
    float _4025 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2013 * _2013;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2053 = 1.0 - _2013;
    float _2064 = (0.5 / (((_2028 * ((_2027 * _2053) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2053) + _2013) * _2027))) * _2027;
    float _4036 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    uint _2080 = _1751 + 9u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _293) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1792].x + _371;
    float _2094 = cbLight._m0[_1792].y + _372;
    float _2095 = cbLight._m0[_1792].z + _373;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1792].xyz));
    float _4047 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _2107 = dot(vec3(_290, _291, _292), vec3(_2100, _2101, _2102));
    float _4058 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_2100, _2101, _2102));
    float _4069 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2092 * _2092;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2129 = 1.0 - _2092;
    float _2139 = (0.5 / (((_2028 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2129) + _2092) * _2106))) * _2106;
    float _4080 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    float _2151 = (((_2128 * cbLight._m0[_2080].x) * _2141) * _1774) + ((((cbLight._m0[_1999].x * _1740) * _2052) * _2066) * _1788);
    float _2152 = (((_2128 * cbLight._m0[_2080].y) * _2141) * _1774) + ((((cbLight._m0[_1999].y * _1742) * _2052) * _2066) * _1788);
    float _2153 = (((_2128 * cbLight._m0[_2080].z) * _2141) * _1774) + ((((cbLight._m0[_1999].z * _1744) * _2052) * _2066) * _1788);
    float _2209;
    float _2211;
    float _2213;
    if (_1828)
    {
        _2209 = _2151;
        _2211 = _2152;
        _2213 = _2153;
    }
    else
    {
        uint _2215 = _1751 + 2u;
        uint _2219 = _1751 + 10u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _293) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _371;
        float _2236 = cbLight._m0[_2215].y + _372;
        float _2237 = cbLight._m0[_2215].z + _373;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2215].xyz));
        float _4091 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2249 = dot(vec3(_290, _291, _292), vec3(_2242, _2243, _2244));
        float _4102 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4113 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2270 = (exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2271 = 1.0 - _2234;
        float _2281 = (0.5 / (((_2028 * ((_2248 * _2271) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2271) + _2234) * _2248))) * _2248;
        float _4124 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2209 = (((_2270 * cbLight._m0[_2219].x) * _2283) * _2284) + _2151;
        _2211 = (((_2270 * cbLight._m0[_2219].y) * _2283) * _2284) + _2152;
        _2213 = (((_2270 * cbLight._m0[_2219].z) * _2283) * _2284) + _2153;
    }
    float _2315;
    float _2317;
    float _2319;
    if (_1937)
    {
        _2315 = _2209;
        _2317 = _2211;
        _2319 = _2213;
    }
    else
    {
        uint _2326 = _1751 + 3u;
        uint _2330 = _1751 + 11u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _293) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _371;
        float _2347 = cbLight._m0[_2326].y + _372;
        float _2348 = cbLight._m0[_2326].z + _373;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2326].xyz));
        float _4140 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2360 = dot(vec3(_290, _291, _292), vec3(_2353, _2354, _2355));
        float _4151 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4162 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2382 = 1.0 - _2345;
        float _2392 = (0.5 / (((_2028 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2382) + _2345) * _2359))) * _2359;
        float _4173 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2315 = (((_2381 * cbLight._m0[_2330].x) * _2394) * _2395) + _2209;
        _2317 = (((_2381 * cbLight._m0[_2330].y) * _2394) * _2395) + _2211;
        _2319 = (((_2381 * cbLight._m0[_2330].z) * _2394) * _2395) + _2213;
    }
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    if (_1749.y == 0u)
    {
        uvec4 _2416 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2417 = _2416.x;
        uint _2428 = uint((float(_2416.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2417))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2417)));
        float _2438 = (log2(_1527 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2439 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        uint _2442 = uint(isnan(14.0) ? _2439 : (isnan(_2439) ? 14.0 : min(_2439, 14.0)));
        uvec4 _2447 = texelFetch(g_lightClusterGridBuffer, int(((_2442 << 2u) + (_2428 << 6u)) >> 2u));
        uint _2448 = _2447.x;
        uint _2449 = _2416.z;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((((1u << ((_2449 >> 4u) & 15u)) + 4294967295u) & _2448) == 0u) || ((_2449 & 240u) == 0u))
        {
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
        }
        else
        {
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            uint _2677 = 0u;
            uint _2686;
            bool _2687;
            for (;;)
            {
                _2686 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                _2687 = _2686 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2687)
                {
                    frontier_phi_68_pred = _2676;
                    frontier_phi_68_pred_1 = _2675;
                    frontier_phi_68_pred_2 = _2674;
                    frontier_phi_68_pred_3 = _2672;
                    frontier_phi_68_pred_4 = _2671;
                    frontier_phi_68_pred_5 = _2673;
                }
                else
                {
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    uint _2801;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2686;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    for (;;)
                    {
                        uint _2805 = uint(findLSB(_2801)) + (_2677 << 5u);
                        uint _2802 = (_2801 + 4294967295u) & _2801;
                        uint _2807 = _2805 * 48u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2827 = (_2805 * 48u) + 4u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2846 = (_2805 * 48u) + 8u;
                        vec3 _2857 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x));
                        float _2861 = _2821.x - _1525;
                        float _2862 = _2821.y - _1526;
                        float _2863 = _2821.z - _1527;
                        float _2864 = dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863));
                        float _2867 = inversesqrt(_2864);
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2871 = dot(vec3(_401, _404, _407), vec3(_2868, _2869, _2870));
                        float _2876 = 1.0 - (_2864 * _2821.w);
                        float _4199 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2878 = sqrt(_2864) * _2840.w;
                        float _2881 = 1.39999997615814208984375 / (_2878 + 1.39999997615814208984375);
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2871) + _2882;
                        float _2888 = _2878 * _2878;
                        float _2892 = ((isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * _2877) / ((_2888 * 0.699999988079071044921875) + 1.0);
                        float _2896 = (-0.0) - _1525;
                        float _2897 = (-0.0) - _1526;
                        float _2898 = (-0.0) - _1527;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2912 = exp2(log2(1.0 / ((_2888 * 3.5) + 5.0)) * 0.25);
                        float _2913 = 1.0 - _463;
                        float _2920 = sqrt(1.0 - ((1.0 - (_2913 * _2913)) * (1.0 - (_2912 * _2912))));
                        float _2921 = _2920 * _2920;
                        float _2922 = _2921 * _2921;
                        float _2923 = _2903 + _2868;
                        float _2924 = _2904 + _2869;
                        float _2925 = _2905 + _2870;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2933 = dot(vec3(_401, _404, _407), vec3(_2903, _2904, _2905));
                        float _4215 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2937 = dot(vec3(_401, _404, _407), vec3(_2929 * _2923, _2929 * _2924, _2929 * _2925));
                        float _4226 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2944 = ((_2940 * _2940) * (_2922 + (-1.0))) + 1.0;
                        float _2945 = _2881 * _2921;
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2871) + _2946;
                        float _4237 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2951 = 1.0 - _2921;
                        float _2961 = (0.5 / (((_2950 * ((_2936 * _2951) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2950 * _2951) + _2921) * _2936))) * _2950;
                        float _4248 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2972 = (((_2922 * 3.1415927410125732421875) * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) / ((_2944 * _2944) * ((_2888 * 2.1991131305694580078125) + 3.141590118408203125))) * _2877;
                        _2730 = (_2892 * _2840.x) + _2798;
                        _2731 = (_2892 * _2840.y) + _2799;
                        _2732 = (_2892 * _2840.z) + _2800;
                        _2727 = (_2972 * _2857.x) + _2795;
                        _2728 = (_2972 * _2857.y) + _2796;
                        _2729 = (_2972 * _2857.z) + _2797;
                        if (_2802 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2802;
                        }
                    }
                    frontier_phi_68_pred = _2732;
                    frontier_phi_68_pred_1 = _2731;
                    frontier_phi_68_pred_2 = _2730;
                    frontier_phi_68_pred_3 = _2728;
                    frontier_phi_68_pred_4 = _2727;
                    frontier_phi_68_pred_5 = _2729;
                }
                _2538 = frontier_phi_68_pred;
                _2536 = frontier_phi_68_pred_1;
                _2534 = frontier_phi_68_pred_2;
                _2530 = frontier_phi_68_pred_3;
                _2528 = frontier_phi_68_pred_4;
                _2532 = frontier_phi_68_pred_5;
                uint _2678 = _2677 + 1u;
                if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2671 = _2528;
                    _2672 = _2530;
                    _2673 = _2532;
                    _2674 = _2534;
                    _2675 = _2536;
                    _2676 = _2538;
                    _2677 = _2678;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
        }
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.z;
        uint _2544 = (_2542 >> 8u) & 15u;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((4294967295u << _2544) & _2448) == 0u)
        {
            _2639 = _2527;
            _2641 = _2529;
            _2643 = _2531;
            _2645 = _2533;
            _2647 = _2535;
            _2649 = _2537;
        }
        else
        {
            float _2664 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
            float _2665 = _2664 * _1525;
            float _2666 = _2664 * _1526;
            float _2667 = _2664 * _1527;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2544 < ((_2542 >> 12u) & 15u))
            {
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2778 = _2527;
                float _2779 = _2529;
                float _2780 = _2531;
                float _2781 = _2533;
                float _2782 = _2535;
                float _2783 = _2537;
                uint _2784 = _2544;
                uint _2793;
                bool _2794;
                for (;;)
                {
                    _2793 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                    _2794 = _2793 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2794)
                    {
                        frontier_phi_74_pred = _2780;
                        frontier_phi_74_pred_1 = _2779;
                        frontier_phi_74_pred_2 = _2778;
                        frontier_phi_74_pred_3 = _2783;
                        frontier_phi_74_pred_4 = _2782;
                        frontier_phi_74_pred_5 = _2781;
                    }
                    else
                    {
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _2990 = _2778;
                        float _2991 = _2779;
                        float _2992 = _2780;
                        float _2993 = _2781;
                        float _2994 = _2782;
                        float _2995 = _2783;
                        uint _2996 = _2793;
                        uint _2997;
                        vec4 _3022;
                        float _3023;
                        vec4 _3038;
                        vec3 _3050;
                        vec4 _3066;
                        vec4 _3082;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _3007 = ((_2784 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2996));
                            _2997 = (_2996 + 4294967295u) & _2996;
                            uint _3009 = _3007 * 40u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3023 = _3022.w;
                            uint _3025 = (_3007 * 40u) + 4u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3040 = (_3007 * 40u) + 8u;
                            _3050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x));
                            uint _3053 = (_3007 * 40u) + 16u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_3007 * 40u) + 20u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3085 = (_3007 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_3007 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_1527, _3117.z, fma(_1526, _3117.y, _3117.x * _1525)) + _3117.w;
                            _3130 = !((fma(_1527, _3098.z, fma(_1526, _3098.y, _3098.x * _1525)) + _3098.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3130)
                            {
                                float _3157 = _3022.x - _1525;
                                float _3158 = _3022.y - _1526;
                                float _3159 = _3022.z - _1527;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3023 * _3023));
                                float _4259 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3175 = sqrt(_3160) * _3038.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3181 = ((1.0 - _3178) * dot(vec3(_3164, _3165, _3166), vec3(_401, _404, _407))) + _3178;
                                float _3184 = _3175 * _3175;
                                float _3188 = (fma(_1527, _3066.z, fma(_1526, _3066.y, _3066.x * _1525)) + _3066.w) / _3129;
                                float _3189 = (fma(_1527, _3082.z, fma(_1526, _3082.y, _3082.x * _1525)) + _3082.w) / _3129;
                                float _3193 = 1.0 - dot(vec2(_3188, _3189), vec2(_3188, _3189));
                                float _4275 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3195 = _3194 * (((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3171) / ((_3184 * 0.699999988079071044921875) + 1.0));
                                float _3207 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                                float _3208 = 1.0 - _463;
                                float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                                float _3216 = _3215 * _3215;
                                float _3217 = _3216 * _3216;
                                float _3218 = _3164 - _2665;
                                float _3219 = _3165 - _2666;
                                float _3220 = _3166 - _2667;
                                float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                                float _3228 = dot(vec3(_401, _404, _407), vec3((-0.0) - _2665, (-0.0) - _2666, (-0.0) - _2667));
                                float _4286 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3232 = dot(vec3(_401, _404, _407), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                                float _4297 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                                float _3240 = _3177 * _3216;
                                float _3241 = _3240 * _3240;
                                float _3247 = ((1.0 - _3241) * dot(vec3(_401, _404, _407), vec3(_3164, _3165, _3166))) + _3241;
                                float _4308 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3249 = 1.0 - _3216;
                                float _3259 = (0.5 / (((_3248 * ((_3231 * _3249) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3216) * _3231))) * _3248;
                                float _4319 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3269 = (_3194 * _3171) * (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) / ((_3239 * _3239) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3269 * _3050.z;
                                frontier_phi_80_pred_1 = _3269 * _3050.y;
                                frontier_phi_80_pred_2 = _3269 * _3050.x;
                                frontier_phi_80_pred_3 = _3195 * _3038.z;
                                frontier_phi_80_pred_4 = _3195 * _3038.y;
                                frontier_phi_80_pred_5 = _3195 * _3038.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3275 = frontier_phi_80_pred;
                            _3274 = frontier_phi_80_pred_1;
                            _3273 = frontier_phi_80_pred_2;
                            _3278 = frontier_phi_80_pred_3;
                            _3277 = frontier_phi_80_pred_4;
                            _3276 = frontier_phi_80_pred_5;
                            _2980 = _3276 + _2993;
                            _2981 = _3277 + _2994;
                            _2982 = _3278 + _2995;
                            _2977 = _3273 + _2990;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            if (_2997 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2997;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2979;
                        frontier_phi_74_pred_1 = _2978;
                        frontier_phi_74_pred_2 = _2977;
                        frontier_phi_74_pred_3 = _2982;
                        frontier_phi_74_pred_4 = _2981;
                        frontier_phi_74_pred_5 = _2980;
                    }
                    _2644 = frontier_phi_74_pred;
                    _2642 = frontier_phi_74_pred_1;
                    _2640 = frontier_phi_74_pred_2;
                    _2650 = frontier_phi_74_pred_3;
                    _2648 = frontier_phi_74_pred_4;
                    _2646 = frontier_phi_74_pred_5;
                    uint _2785 = _2784 + 1u;
                    if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2778 = _2640;
                        _2779 = _2642;
                        _2780 = _2644;
                        _2781 = _2646;
                        _2782 = _2648;
                        _2783 = _2650;
                        _2784 = _2785;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2648;
                frontier_phi_62_63_ladder_1 = _2646;
                frontier_phi_62_63_ladder_2 = _2644;
                frontier_phi_62_63_ladder_3 = _2650;
                frontier_phi_62_63_ladder_4 = _2642;
                frontier_phi_62_63_ladder_5 = _2640;
            }
            else
            {
                frontier_phi_62_63_ladder = _2535;
                frontier_phi_62_63_ladder_1 = _2533;
                frontier_phi_62_63_ladder_2 = _2531;
                frontier_phi_62_63_ladder_3 = _2537;
                frontier_phi_62_63_ladder_4 = _2529;
                frontier_phi_62_63_ladder_5 = _2527;
            }
            _2639 = frontier_phi_62_63_ladder_5;
            _2641 = frontier_phi_62_63_ladder_4;
            _2643 = frontier_phi_62_63_ladder_2;
            _2645 = frontier_phi_62_63_ladder_1;
            _2647 = frontier_phi_62_63_ladder;
            _2649 = frontier_phi_62_63_ladder_3;
        }
        float _2654 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2460 = (_2654 * _2645) + _1992;
        _2462 = (_2654 * _2647) + _1994;
        _2464 = (_2654 * _2649) + _1996;
        _2466 = ((_2639 * 0.039999999105930328369140625) * _2654) + _2315;
        _2468 = ((_2641 * 0.039999999105930328369140625) * _2654) + _2317;
        _2470 = ((_2643 * 0.039999999105930328369140625) * _2654) + _2319;
    }
    else
    {
        _2460 = _1992;
        _2462 = _1994;
        _2464 = _1996;
        _2466 = _2315;
        _2468 = _2317;
        _2470 = _2319;
    }
    float _4335 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4346 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4357 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    uint _2490 = _420 + 6u;
    float _2498 = _379 / cbSceneParam._m0[86u].x;
    float _2499 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2552 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2553 = _2552 / _313;
        float _2564 = _2553 * _364;
        float _2565 = _365 * _2553;
        float _2566 = (-0.0) - _2565;
        float _2567 = _2553 * _366;
        float _2569 = (cbSceneParam._m0[77u].w * _2566) / _2552;
        float _2570 = _2569 + cbSceneParam._m0[79u].w;
        float _2571 = cbSceneParam._m0[79u].w - _2565;
        float _2577 = sqrt(((_2564 * _2564) + (_2565 * _2565)) + (_2567 * _2567));
        float _2580 = (1.0 - (cbSceneParam._m0[77u].w / _2552)) * _2577;
        float _2585 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2587 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2740;
        if (abs((_2566 - _2569) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2740 = ((((_2570 > 0.0) ? exp2(_2585 * _2570) : (2.0 - exp2(_2587 * _2570))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2580;
        }
        else
        {
            float _2700 = 1.0 / cbSceneParam._m0[80u].x;
            float _2701 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : max(_2570, _2571));
            float _2702 = isnan(_2571) ? _2570 : (isnan(_2570) ? _2571 : min(_2570, _2571));
            float _2711 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : min(_2701, 0.0));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            _2740 = ((abs(_2577 / _2566) * cbSceneParam._m0[80u].y) * ((((_2711 - _2712) * 2.0) - ((exp2(_2585 * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)))) - exp2(_2585 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))))) * _2700)) - ((exp2(_2587 * _2711) - exp2(_2587 * _2712)) * _2700))) + (_2580 * cbSceneParam._m0[80u].z);
        }
        vec4 _2742 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2751 = exp2((_2740 * (-1.44269502162933349609375)) * (1.0 - _2742.w));
        float _2752 = log2(_2751);
        float _2768 = log2(_2518);
        _2589 = (exp2(_2768 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].x)) * _2742.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2591 = (exp2(_2768 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].y)) * _2742.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2593 = (exp2(_2768 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].z)) * _2742.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2595 = _2751 * _2518;
    }
    else
    {
        _2589 = _2515;
        _2591 = _2516;
        _2593 = _2517;
        _2595 = _2518;
    }
    float _2607 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2608 = _2607 == 3.0;
    float _2609 = log2(_2595);
    float _2616 = exp2(_2609 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2460 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _447))) + ((_2466 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1254)) * cbPerFrame._m0[3u].x));
    float _2617 = exp2(_2609 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2462 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _447))) + ((_2468 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _1254)) * cbPerFrame._m0[3u].x));
    float _2618 = exp2(_2609 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2464 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _447))) + ((_2470 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _1254)) * cbPerFrame._m0[3u].x));
    float _2627 = (_2607 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2627 * (_2608 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.y = _2627 * (_2608 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.z = _2627 * (_2608 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.w = cbInstanceData._m0[_2490].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2490].w;
}


