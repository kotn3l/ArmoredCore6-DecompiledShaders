#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _895;
float _3286;
float _3287;
float _3288;
float _3289;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _255.x;
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _273 = _269.z;
    float _278 = (_269.x * 2.0) + (-1.0);
    float _280 = (_269.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3298 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    float _292 = cbMtdParam._m0[10u].x + _269.w;
    float _295 = fma(_287, _213, fma(_280, _205 * TANGENT.x, (_191 * _184) * _278));
    float _298 = fma(_287, _214, fma(_280, _205 * TANGENT.y, (_191 * _185) * _278));
    float _301 = fma(_287, _215, fma(_280, _205 * TANGENT.z, (_191 * _186) * _278));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3309 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _309 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3331 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3342 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3353 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3364 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _314 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    vec4 _395 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _397 = _395.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _574 = sqrt(((_381 * _381) + (_382 * _382)) + (_383 * _383));
        float _580 = (cbMatDynParam._m0[5u].x * _574) + cbMatDynParam._m0[5u].y;
        float _3375 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _581 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _585 = (cbMatDynParam._m0[5u].z * _574) + cbMatDynParam._m0[5u].w;
        float _3386 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) - _581)) + _581) < ((_397 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _409 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _410 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _433 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _436 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3397 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _464 = 1.0 - _314;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _314;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _314;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _314;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _409, cbSceneParam._m0[86u].y * _410));
    float _491 = ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * TEXCOORD.z) * _487.x;
    float _492 = dot(vec3(_306, _307, _308), vec3(_388, _389, _390));
    float _495 = _492 * 2.0;
    float _499 = (_495 * _306) - _388;
    float _500 = (_495 * _307) - _389;
    float _501 = (_495 * _308) - _390;
    float _505 = abs(dot(vec3(_388, _389, _390), vec3(_306, _307, _308)));
    float _3430 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = sqrt(_309);
    float _520 = exp2((_507 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_507 * 3.0));
    float _526 = (1.0 - _520) * ((_507 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _527 = _520 * _507;
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _894;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_563, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555));
        float _623 = fma(_563, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555));
        float _627 = fma(_563, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555));
        float _652 = _555 + _306;
        float _653 = _559 + _307;
        float _654 = _563 + _308;
        float _664 = fma(_654, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652)) - _619;
        float _665 = fma(_654, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652)) - _623;
        float _666 = fma(_654, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652)) - _627;
        float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
        float _683 = ((_670 * _664) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_670 * _665) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_670 * _666) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_688.x + (-0.5));
        float _724 = _722 * (_688.y + (-0.5));
        float _725 = _722 * (_688.z + (-0.5));
        float _732 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_695.x + (-0.5));
        float _734 = _732 * (_695.y + (-0.5));
        float _735 = _732 * (_695.z + (-0.5));
        float _742 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_702.x + (-0.5));
        float _744 = _742 * (_702.y + (-0.5));
        float _745 = _742 * (_702.z + (-0.5));
        float _752 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_709.x + (-0.5));
        float _754 = _752 * (_709.y + (-0.5));
        float _755 = _752 * (_709.z + (-0.5));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = _723 * 0.5;
        float _760 = _733 * 0.5;
        float _761 = _743 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_306, _307, _308), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3478 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_788 + 1.0))) + _793) * _756;
        float _803 = _724 * 0.5;
        float _804 = _734 * 0.5;
        float _805 = _744 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_306, _307, _308), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3511 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_830 + 1.0))) + _835) * _757;
        float _845 = _725 * 0.5;
        float _846 = _735 * 0.5;
        float _847 = _745 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_306, _307, _308), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3544 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_872 + 1.0))) + _877) * _758;
        _894 = _725;
        _896 = _724;
        _897 = _723;
        _898 = _735;
        _899 = _734;
        _900 = _733;
        _901 = _745;
        _902 = _744;
        _903 = _743;
        _904 = _758;
        _905 = _757;
        _906 = _756;
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
    }
    else
    {
        _894 = _895;
        _896 = _895;
        _897 = _895;
        _898 = _895;
        _899 = _895;
        _900 = _895;
        _901 = _895;
        _902 = _895;
        _903 = _895;
        _904 = _895;
        _905 = _895;
        _906 = _895;
        _907 = 0.0;
        _908 = 0.0;
        _909 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_563, cbModelParam._m0[30u].z, fma(_559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _555));
        float _942 = fma(_563, cbModelParam._m0[31u].z, fma(_559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _555));
        float _946 = fma(_563, cbModelParam._m0[32u].z, fma(_559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _555));
        float _969 = _555 + _306;
        float _970 = _559 + _307;
        float _971 = _563 + _308;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_306, _307, _308), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3607 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_306, _307, _308), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3640 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_306, _307, _308), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3673 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _895;
        _1208 = _895;
        _1209 = _895;
        _1210 = _895;
        _1211 = _895;
        _1212 = _895;
        _1213 = _895;
        _1214 = _895;
        _1215 = _895;
        _1216 = _895;
        _1217 = _895;
        _1218 = _895;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _499 * 0.5;
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_894, _898, _901, _904));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_896, _899, _902, _905));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _900, _903, _906));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_563, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_563, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_563, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1407 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1410 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1438 = frontier_phi_19_17_ladder;
        }
        float _1646;
        if (_1407 > 0.0)
        {
            _1646 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1646 = frontier_phi_28_24_ladder;
        }
        float _1900;
        if (_1410 > 0.0)
        {
            _1900 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1900 = frontier_phi_40_35_ladder;
        }
        float _1902 = isnan(_1646) ? _1438 : (isnan(_1438) ? _1646 : min(_1438, _1646));
        float _1903 = isnan(_1900) ? _1902 : (isnan(_1902) ? _1900 : min(_1902, _1900));
        float _1907 = (_1903 * _1404) + _1393;
        float _1908 = (_1903 * _1407) + _1397;
        float _1909 = (_1903 * _1410) + _1401;
        float _1910 = _1903 * 9.9999997473787516355514526367188e-05;
        float _1912 = (-1.0) - _1910;
        float _1914 = _1910 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1909 > _1914) || ((_1909 < _1912) || ((_1908 > _1914) || ((_1908 < _1912) || ((_1907 < _1912) || (_1907 > _1914))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2037 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1909, cbModelParam._m0[9u].z, fma(_1908, cbModelParam._m0[9u].y, _1907 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1909, cbModelParam._m0[10u].z, fma(_1908, cbModelParam._m0[10u].y, _1907 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1909, cbModelParam._m0[11u].z, fma(_1908, cbModelParam._m0[11u].y, _1907 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_18_40_ladder = _2037.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2037.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2037.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_18_40_ladder_2;
        _1428 = frontier_phi_18_40_ladder_1;
        _1430 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_563, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_563, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_563, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1506 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1509 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1651;
        if (_1503 > 0.0)
        {
            _1651 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1651 = frontier_phi_30_26_ladder;
        }
        float _1927;
        if (_1506 > 0.0)
        {
            _1927 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1927 = frontier_phi_42_37_ladder;
        }
        float _2140;
        if (_1509 > 0.0)
        {
            _2140 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2140 = frontier_phi_51_48_ladder;
        }
        float _2142 = isnan(_1927) ? _1651 : (isnan(_1651) ? _1927 : min(_1651, _1927));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1503) + _1492;
        float _2148 = (_2143 * _1506) + _1496;
        float _2149 = (_2143 * _1509) + _1500;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2150;
        float _2153 = _2150 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2149 > _2153) || ((_2149 < _2151) || ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 < _2151) || (_2147 > _2153))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2149, cbModelParam._m0[17u].z, fma(_2148, cbModelParam._m0[17u].y, _2147 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2149, cbModelParam._m0[18u].z, fma(_2148, cbModelParam._m0[18u].y, _2147 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2149, cbModelParam._m0[19u].z, fma(_2148, cbModelParam._m0[19u].y, _2147 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_27_51_ladder = _2347.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2347.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2347.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_27_51_ladder_2;
        _1530 = frontier_phi_27_51_ladder_1;
        _1532 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1545 = (((_526 * _475) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_526 * _477) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_526 * _478) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    uvec4 _1568 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1570 = _1568.x * 14u;
    uint _1571 = _1570 + 13u;
    float _1578 = _491 + (-1.0);
    float _1583 = (cbLight._m0[_1571].x * _1578) + 1.0;
    float _1584 = (cbLight._m0[_1571].y * _1578) + 1.0;
    float _1585 = (cbLight._m0[_1571].z * _1578) + 1.0;
    float _1586 = (cbLight._m0[_1571].w * _1578) + 1.0;
    uint _1587 = _1570 + 5u;
    float _1593 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1597 = _1570 + 4u;
    float _1604 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
    uint _1608 = _1570 | 1u;
    float _1619 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_306, _307, _308));
    float _1622 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_306, _307, _308));
    float _3809 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _3820 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1627 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1629 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1636 = ((cbLight._m0[_1587].x * _1593) * _1629) + ((cbLight._m0[_1597].x * _1604) * _1627);
    float _1637 = ((_1593 * cbLight._m0[_1587].y) * _1629) + ((_1604 * cbLight._m0[_1597].y) * _1627);
    float _1638 = ((_1593 * cbLight._m0[_1587].z) * _1629) + ((_1604 * cbLight._m0[_1597].z) * _1627);
    uvec4 _1643 = floatBitsToUint(cbLight._m0[_1570 + 12u]);
    bool _1645 = _1643.x == 0u;
    float _1656;
    float _1658;
    float _1660;
    if (_1645)
    {
        _1656 = _1636;
        _1658 = _1637;
        _1660 = _1638;
    }
    else
    {
        uint _1664 = _1570 + 6u;
        float _1680 = (dot(vec3(cbLight._m0[_1570 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1681 = _1680 * _1680;
        float _3831 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1683 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1656 = (((cbLight._m0[_1664].x * 0.3183098733425140380859375) * _1682) * _1683) + _1636;
        _1658 = (((cbLight._m0[_1664].y * 0.3183098733425140380859375) * _1682) * _1683) + _1637;
        _1660 = (((cbLight._m0[_1664].z * 0.3183098733425140380859375) * _1682) * _1683) + _1638;
    }
    bool _1663 = _1643.y == 0u;
    float _1701;
    float _1703;
    float _1705;
    if (_1663)
    {
        _1701 = _1656;
        _1703 = _1658;
        _1705 = _1660;
    }
    else
    {
        uint _1871 = _1570 + 7u;
        float _1887 = (dot(vec3(cbLight._m0[_1570 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1888 = _1887 * _1887;
        float _3847 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1890 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1701 = (((cbLight._m0[_1871].x * 0.3183098733425140380859375) * _1889) * _1890) + _1656;
        _1703 = (((cbLight._m0[_1871].y * 0.3183098733425140380859375) * _1889) * _1890) + _1658;
        _1705 = (((cbLight._m0[_1871].z * 0.3183098733425140380859375) * _1889) * _1890) + _1660;
    }
    uint _1708 = _1570 + 8u;
    float _1721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _309) * 0.949999988079071044921875);
    float _1722 = _1721 * _1721;
    float _1723 = cbLight._m0[_1570].x + _388;
    float _1724 = cbLight._m0[_1570].y + _389;
    float _1725 = cbLight._m0[_1570].z + _390;
    float _1729 = inversesqrt(dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725)));
    float _1730 = _1729 * _1723;
    float _1731 = _1729 * _1724;
    float _1732 = _1729 * _1725;
    float _1733 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1570].xyz));
    float _3863 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1736 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _1737 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1738 = dot(vec3(_306, _307, _308), vec3(_1730, _1731, _1732));
    float _3885 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1742 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1730, _1731, _1732));
    float _3896 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1746 = _1722 * _1722;
    float _1750 = ((_1741 * _1741) * (_1746 + (-1.0))) + 1.0;
    float _1758 = exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0);
    float _1759 = 0.959999978542327880859375 - _472;
    float _1761 = 0.959999978542327880859375 - _473;
    float _1762 = 0.959999978542327880859375 - _474;
    float _1769 = 1.0 - _1722;
    float _1780 = (0.5 / (((_1737 * ((_1736 * _1769) + _1722)) + 9.9999999392252902907785028219223e-09) + (((_1737 * _1769) + _1722) * _1736))) * _1736;
    float _3907 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1782 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1746 / ((_1750 * _1750) * 3.141590118408203125));
    uint _1793 = _1570 + 9u;
    float _1804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1608].w)) * _309) * 0.949999988079071044921875);
    float _1805 = _1804 * _1804;
    float _1806 = cbLight._m0[_1608].x + _388;
    float _1807 = cbLight._m0[_1608].y + _389;
    float _1808 = cbLight._m0[_1608].z + _390;
    float _1812 = inversesqrt(dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808)));
    float _1813 = _1812 * _1806;
    float _1814 = _1812 * _1807;
    float _1815 = _1812 * _1808;
    float _1816 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1608].xyz));
    float _3918 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1820 = dot(vec3(_306, _307, _308), vec3(_1813, _1814, _1815));
    float _3929 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_1813, _1814, _1815));
    float _3940 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1805 * _1805;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1839 = exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0);
    float _1846 = 1.0 - _1805;
    float _1856 = (0.5 / (((_1737 * ((_1819 * _1846) + _1805)) + 9.9999999392252902907785028219223e-09) + (((_1737 * _1846) + _1805) * _1819))) * _1819;
    float _3951 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1858 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    float _1868 = (((((_1839 * _1759) + _475) * cbLight._m0[_1793].x) * _1858) * _1593) + (((((_1758 * _1759) + _475) * cbLight._m0[_1708].x) * _1782) * _1604);
    float _1869 = (((((_1839 * _1761) + _477) * cbLight._m0[_1793].y) * _1858) * _1593) + (((((_1758 * _1761) + _477) * cbLight._m0[_1708].y) * _1782) * _1604);
    float _1870 = (((((_1839 * _1762) + _478) * cbLight._m0[_1793].z) * _1858) * _1593) + (((((_1758 * _1762) + _478) * cbLight._m0[_1708].z) * _1782) * _1604);
    float _1932;
    float _1934;
    float _1936;
    if (_1645)
    {
        _1932 = _1868;
        _1934 = _1869;
        _1936 = _1870;
    }
    else
    {
        uint _1938 = _1570 + 2u;
        uint _1942 = _1570 + 10u;
        float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _309) * 0.949999988079071044921875);
        float _1957 = _1956 * _1956;
        float _1958 = cbLight._m0[_1938].x + _388;
        float _1959 = cbLight._m0[_1938].y + _389;
        float _1960 = cbLight._m0[_1938].z + _390;
        float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
        float _1965 = _1964 * _1958;
        float _1966 = _1964 * _1959;
        float _1967 = _1964 * _1960;
        float _1968 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1938].xyz));
        float _3962 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1971 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1972 = dot(vec3(_306, _307, _308), vec3(_1965, _1966, _1967));
        float _3973 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1976 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_1965, _1966, _1967));
        float _3984 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1980 = _1957 * _1957;
        float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
        float _1991 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
        float _1998 = 1.0 - _1957;
        float _2008 = (0.5 / (((_1737 * ((_1971 * _1998) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1737 * _1998) + _1957) * _1971))) * _1971;
        float _3995 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2010 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
        float _2011 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1932 = (((((_1991 * _1759) + _475) * cbLight._m0[_1942].x) * _2010) * _2011) + _1868;
        _1934 = (((((_1991 * _1761) + _477) * cbLight._m0[_1942].y) * _2010) * _2011) + _1869;
        _1936 = (((((_1991 * _1762) + _478) * cbLight._m0[_1942].z) * _2010) * _2011) + _1870;
    }
    float _2046;
    float _2048;
    float _2050;
    if (_1663)
    {
        _2046 = _1932;
        _2048 = _1934;
        _2050 = _1936;
    }
    else
    {
        uint _2057 = _1570 + 3u;
        uint _2061 = _1570 + 11u;
        float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _309) * 0.949999988079071044921875);
        float _2076 = _2075 * _2075;
        float _2077 = cbLight._m0[_2057].x + _388;
        float _2078 = cbLight._m0[_2057].y + _389;
        float _2079 = cbLight._m0[_2057].z + _390;
        float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
        float _2084 = _2083 * _2077;
        float _2085 = _2083 * _2078;
        float _2086 = _2083 * _2079;
        float _2087 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2057].xyz));
        float _4011 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2091 = dot(vec3(_306, _307, _308), vec3(_2084, _2085, _2086));
        float _4022 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2095 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2084, _2085, _2086));
        float _4033 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2099 = _2076 * _2076;
        float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
        float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
        float _2117 = 1.0 - _2076;
        float _2127 = (0.5 / (((_1737 * ((_2090 * _2117) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_1737 * _2117) + _2076) * _2090))) * _2090;
        float _4044 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2129 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
        float _2130 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _2046 = (((((_2110 * _1759) + _475) * cbLight._m0[_2061].x) * _2129) * _2130) + _1932;
        _2048 = (((((_2110 * _1761) + _477) * cbLight._m0[_2061].y) * _2129) * _2130) + _1934;
        _2050 = (((((_2110 * _1762) + _478) * cbLight._m0[_2061].z) * _2129) * _2130) + _1936;
    }
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    if (_1568.y == 0u)
    {
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2205;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2205;
        float _2208 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2205;
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.x;
        uint _2232 = uint((float(_2220.y) * floor(float(uint(cbSceneParam._m0[85u].y * _410) / _2221))) + floor(float(uint(cbSceneParam._m0[85u].x * _409) / _2221)));
        float _2242 = (log2(_2208 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2243 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        uint _2246 = uint(isnan(14.0) ? _2243 : (isnan(_2243) ? 14.0 : min(_2243, 14.0)));
        uvec4 _2251 = texelFetch(g_lightClusterGridBuffer, int(((_2246 << 2u) + (_2232 << 6u)) >> 2u));
        uint _2252 = _2251.x;
        uint _2253 = _2220.z;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        if (((((1u << ((_2253 >> 4u) & 15u)) + 4294967295u) & _2252) == 0u) || ((_2253 & 240u) == 0u))
        {
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
            _2362 = 0.0;
        }
        else
        {
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2363;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            uint _2510 = 0u;
            uint _2519;
            bool _2520;
            for (;;)
            {
                _2519 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                _2520 = _2519 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2520)
                {
                    frontier_phi_68_pred = _2506;
                    frontier_phi_68_pred_1 = _2509;
                    frontier_phi_68_pred_2 = _2508;
                    frontier_phi_68_pred_3 = _2507;
                    frontier_phi_68_pred_4 = _2505;
                    frontier_phi_68_pred_5 = _2504;
                }
                else
                {
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    uint _2655;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2519;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    for (;;)
                    {
                        uint _2659 = uint(findLSB(_2655)) + (_2510 << 5u);
                        uint _2656 = (_2655 + 4294967295u) & _2655;
                        uint _2661 = _2659 * 48u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2681 = (_2659 * 48u) + 4u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2700 = (_2659 * 48u) + 8u;
                        vec3 _2711 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x));
                        float _2715 = _2675.x - _2206;
                        float _2716 = _2675.y - _2207;
                        float _2717 = _2675.z - _2208;
                        float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                        float _2721 = inversesqrt(_2718);
                        float _2722 = _2721 * _2715;
                        float _2723 = _2721 * _2716;
                        float _2724 = _2721 * _2717;
                        float _2725 = dot(vec3(_430, _433, _436), vec3(_2722, _2723, _2724));
                        float _2730 = 1.0 - (_2718 * _2675.w);
                        float _4070 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2731 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2732 = sqrt(_2718) * _2694.w;
                        float _2735 = 1.39999997615814208984375 / (_2732 + 1.39999997615814208984375);
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2725) + _2736;
                        float _2742 = _2732 * _2732;
                        float _2746 = ((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2731) / ((_2742 * 0.699999988079071044921875) + 1.0);
                        float _2750 = (-0.0) - _2206;
                        float _2751 = (-0.0) - _2207;
                        float _2752 = (-0.0) - _2208;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2767 = exp2(log2(1.0 / ((_2742 * 3.5) + 5.0)) * 0.25);
                        float _2768 = 1.0 - _507;
                        float _2775 = sqrt(1.0 - ((1.0 - (_2768 * _2768)) * (1.0 - (_2767 * _2767))));
                        float _2776 = _2775 * _2775;
                        float _2777 = _2776 * _2776;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2780 = _2759 + _2724;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2788 = dot(vec3(_430, _433, _436), vec3(_2757, _2758, _2759));
                        float _4086 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2792 = dot(vec3(_430, _433, _436), vec3(_2784 * _2778, _2784 * _2779, _2784 * _2780));
                        float _4097 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2799 = ((_2795 * _2795) * (_2777 + (-1.0))) + 1.0;
                        float _2800 = _2735 * _2776;
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2725) + _2801;
                        float _4108 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2806 = 1.0 - _2776;
                        float _2816 = (0.5 / (((_2805 * ((_2791 * _2806) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2805 * _2806) + _2776) * _2791))) * _2805;
                        float _4119 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2827 = (((_2777 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_2799 * _2799) * ((_2742 * 2.1991131305694580078125) + 3.141590118408203125))) * _2731;
                        _2579 = (_2746 * _2694.x) + _2652;
                        _2580 = (_2746 * _2694.y) + _2653;
                        _2581 = (_2746 * _2694.z) + _2654;
                        _2576 = (_2827 * _2711.x) + _2649;
                        _2577 = (_2827 * _2711.y) + _2650;
                        _2578 = (_2827 * _2711.z) + _2651;
                        if (_2656 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2581;
                            _2655 = _2656;
                        }
                    }
                    frontier_phi_68_pred = _2578;
                    frontier_phi_68_pred_1 = _2581;
                    frontier_phi_68_pred_2 = _2580;
                    frontier_phi_68_pred_3 = _2579;
                    frontier_phi_68_pred_4 = _2577;
                    frontier_phi_68_pred_5 = _2576;
                }
                _2357 = frontier_phi_68_pred;
                _2363 = frontier_phi_68_pred_1;
                _2361 = frontier_phi_68_pred_2;
                _2359 = frontier_phi_68_pred_3;
                _2355 = frontier_phi_68_pred_4;
                _2353 = frontier_phi_68_pred_5;
                uint _2511 = _2510 + 1u;
                if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2504 = _2353;
                    _2505 = _2355;
                    _2506 = _2357;
                    _2507 = _2359;
                    _2508 = _2361;
                    _2509 = _2363;
                    _2510 = _2511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
            _2362 = _2363;
        }
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.z;
        uint _2369 = (_2367 >> 8u) & 15u;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((4294967295u << _2369) & _2252) == 0u)
        {
            _2472 = _2352;
            _2474 = _2354;
            _2476 = _2356;
            _2478 = _2358;
            _2480 = _2360;
            _2482 = _2362;
        }
        else
        {
            float _2497 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
            float _2498 = _2497 * _2206;
            float _2499 = _2497 * _2207;
            float _2500 = _2497 * _2208;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2369 < ((_2367 >> 12u) & 15u))
            {
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2632 = _2352;
                float _2633 = _2354;
                float _2634 = _2356;
                float _2635 = _2358;
                float _2636 = _2360;
                float _2637 = _2362;
                uint _2638 = _2369;
                uint _2647;
                bool _2648;
                for (;;)
                {
                    _2647 = texelFetch(g_lightClassification, int((((_2246 << 5u) + (_2232 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                    _2648 = _2647 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2648)
                    {
                        frontier_phi_79_pred = _2637;
                        frontier_phi_79_pred_1 = _2636;
                        frontier_phi_79_pred_2 = _2635;
                        frontier_phi_79_pred_3 = _2634;
                        frontier_phi_79_pred_4 = _2633;
                        frontier_phi_79_pred_5 = _2632;
                    }
                    else
                    {
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        float _2857 = _2635;
                        float _2858 = _2636;
                        float _2859 = _2637;
                        uint _2860 = _2647;
                        uint _2861;
                        vec4 _2886;
                        float _2887;
                        vec4 _2902;
                        vec3 _2914;
                        vec4 _2930;
                        vec4 _2946;
                        float _2993;
                        bool _2994;
                        for (;;)
                        {
                            uint _2871 = ((_2638 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2860));
                            _2861 = (_2860 + 4294967295u) & _2860;
                            uint _2873 = _2871 * 40u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            _2887 = _2886.w;
                            uint _2889 = (_2871 * 40u) + 4u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2904 = (_2871 * 40u) + 8u;
                            _2914 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x));
                            uint _2917 = (_2871 * 40u) + 16u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2871 * 40u) + 20u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2871 * 40u) + 24u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2968 = (_2871 * 40u) + 28u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2993 = fma(_2208, _2981.z, fma(_2207, _2981.y, _2981.x * _2206)) + _2981.w;
                            _2994 = !((fma(_2208, _2962.z, fma(_2207, _2962.y, _2962.x * _2206)) + _2962.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2994)
                            {
                                float _3021 = _2886.x - _2206;
                                float _3022 = _2886.y - _2207;
                                float _3023 = _2886.z - _2208;
                                float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                                float _3027 = inversesqrt(_3024);
                                float _3028 = _3027 * _3021;
                                float _3029 = _3027 * _3022;
                                float _3030 = _3027 * _3023;
                                float _3034 = 1.0 - (_3024 / (_2887 * _2887));
                                float _4130 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3039 = sqrt(_3024) * _2902.w;
                                float _3041 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                                float _3042 = _3041 * _3041;
                                float _3045 = ((1.0 - _3042) * dot(vec3(_3028, _3029, _3030), vec3(_430, _433, _436))) + _3042;
                                float _3048 = _3039 * _3039;
                                float _3052 = (fma(_2208, _2930.z, fma(_2207, _2930.y, _2930.x * _2206)) + _2930.w) / _2993;
                                float _3053 = (fma(_2208, _2946.z, fma(_2207, _2946.y, _2946.x * _2206)) + _2946.w) / _2993;
                                float _3057 = 1.0 - dot(vec2(_3052, _3053), vec2(_3052, _3053));
                                float _4146 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3059 = _3058 * (((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3035) / ((_3048 * 0.699999988079071044921875) + 1.0));
                                float _3071 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                                float _3072 = 1.0 - _507;
                                float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                                float _3080 = _3079 * _3079;
                                float _3081 = _3080 * _3080;
                                float _3082 = _3028 - _2498;
                                float _3083 = _3029 - _2499;
                                float _3084 = _3030 - _2500;
                                float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                                float _3092 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2498, (-0.0) - _2499, (-0.0) - _2500));
                                float _4157 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3096 = dot(vec3(_430, _433, _436), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                                float _4168 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                                float _3104 = _3041 * _3080;
                                float _3105 = _3104 * _3104;
                                float _3111 = ((1.0 - _3105) * dot(vec3(_430, _433, _436), vec3(_3028, _3029, _3030))) + _3105;
                                float _4179 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3113 = 1.0 - _3080;
                                float _3123 = (0.5 / (((_3112 * ((_3095 * _3113) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3080) * _3095))) * _3112;
                                float _4190 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3133 = (_3058 * _3035) * (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) / ((_3103 * _3103) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3059 * _2902.z;
                                frontier_phi_85_pred_1 = _3059 * _2902.y;
                                frontier_phi_85_pred_2 = _3059 * _2902.x;
                                frontier_phi_85_pred_3 = _3133 * _2914.z;
                                frontier_phi_85_pred_4 = _3133 * _2914.y;
                                frontier_phi_85_pred_5 = _3133 * _2914.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3142 = frontier_phi_85_pred;
                            _3141 = frontier_phi_85_pred_1;
                            _3140 = frontier_phi_85_pred_2;
                            _3139 = frontier_phi_85_pred_3;
                            _3138 = frontier_phi_85_pred_4;
                            _3137 = frontier_phi_85_pred_5;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            if (_2861 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2861;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2846;
                        frontier_phi_79_pred_1 = _2845;
                        frontier_phi_79_pred_2 = _2844;
                        frontier_phi_79_pred_3 = _2843;
                        frontier_phi_79_pred_4 = _2842;
                        frontier_phi_79_pred_5 = _2841;
                    }
                    _2483 = frontier_phi_79_pred;
                    _2481 = frontier_phi_79_pred_1;
                    _2479 = frontier_phi_79_pred_2;
                    _2477 = frontier_phi_79_pred_3;
                    _2475 = frontier_phi_79_pred_4;
                    _2473 = frontier_phi_79_pred_5;
                    uint _2639 = _2638 + 1u;
                    if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2632 = _2473;
                        _2633 = _2475;
                        _2634 = _2477;
                        _2635 = _2479;
                        _2636 = _2481;
                        _2637 = _2483;
                        _2638 = _2639;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2479;
                frontier_phi_60_61_ladder_1 = _2483;
                frontier_phi_60_61_ladder_2 = _2481;
                frontier_phi_60_61_ladder_3 = _2477;
                frontier_phi_60_61_ladder_4 = _2475;
                frontier_phi_60_61_ladder_5 = _2473;
            }
            else
            {
                frontier_phi_60_61_ladder = _2358;
                frontier_phi_60_61_ladder_1 = _2362;
                frontier_phi_60_61_ladder_2 = _2360;
                frontier_phi_60_61_ladder_3 = _2356;
                frontier_phi_60_61_ladder_4 = _2354;
                frontier_phi_60_61_ladder_5 = _2352;
            }
            _2472 = frontier_phi_60_61_ladder_5;
            _2474 = frontier_phi_60_61_ladder_4;
            _2476 = frontier_phi_60_61_ladder_3;
            _2478 = frontier_phi_60_61_ladder;
            _2480 = frontier_phi_60_61_ladder_2;
            _2482 = frontier_phi_60_61_ladder_1;
        }
        float _2487 = isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0));
        _2264 = (_2487 * _2478) + _1701;
        _2266 = (_2487 * _2480) + _1703;
        _2268 = (_2487 * _2482) + _1705;
        _2270 = ((_2472 * _475) * _2487) + _2046;
        _2272 = ((_2474 * _477) * _2487) + _2048;
        _2274 = ((_2476 * _478) * _2487) + _2050;
    }
    else
    {
        _2264 = _1701;
        _2266 = _1703;
        _2268 = _1705;
        _2270 = _2046;
        _2272 = _2048;
        _2274 = _2050;
    }
    float _4206 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4217 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4228 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2291 = ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2264 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _491))) + ((_2270 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2292 = ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2266 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _491))) + ((_2272 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2293 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2268 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _491))) + ((_2274 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    uint _2294 = _449 + 6u;
    float _2302 = _409 / cbSceneParam._m0[86u].x;
    float _2303 = _410 / cbSceneParam._m0[86u].y;
    vec4 _2317 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2302, _2303, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2319 = _2317.x;
    float _2320 = _2317.y;
    float _2321 = _2317.z;
    float _2322 = _2317.w;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2377 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2378 = _2377 / _330;
        float _2389 = _2378 * _381;
        float _2390 = _382 * _2378;
        float _2391 = (-0.0) - _2390;
        float _2392 = _2378 * _383;
        float _2394 = (cbSceneParam._m0[77u].w * _2391) / _2377;
        float _2395 = _2394 + cbSceneParam._m0[79u].w;
        float _2396 = cbSceneParam._m0[79u].w - _2390;
        float _2402 = sqrt(((_2389 * _2389) + (_2390 * _2390)) + (_2392 * _2392));
        float _2405 = (1.0 - (cbSceneParam._m0[77u].w / _2377)) * _2402;
        float _2410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2589;
        if (abs((_2391 - _2394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2589 = ((((_2395 > 0.0) ? exp2(_2410 * _2395) : (2.0 - exp2(_2412 * _2395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2405;
        }
        else
        {
            float _2533 = 1.0 / cbSceneParam._m0[80u].x;
            float _2534 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : max(_2395, _2396));
            float _2535 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : min(_2395, _2396));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            _2589 = ((abs(_2402 / _2391) * cbSceneParam._m0[80u].y) * ((((_2544 - _2545) * 2.0) - ((exp2(_2410 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)))) - exp2(_2410 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))))) * _2533)) - ((exp2(_2412 * _2544) - exp2(_2412 * _2545)) * _2533))) + (_2405 * cbSceneParam._m0[80u].z);
        }
        vec4 _2591 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2302, _2303, 1.0), 0.0);
        float _2600 = exp2((_2589 * (-1.44269502162933349609375)) * (1.0 - _2591.w));
        float _2601 = log2(_2600);
        float _2617 = log2(_2322);
        _2414 = (exp2(_2617 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2601 * cbSceneParam._m0[78u].x)) * _2591.x) / cbSceneParam._m0[78u].x)) + _2319;
        _2416 = (exp2(_2617 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2601 * cbSceneParam._m0[78u].y)) * _2591.y) / cbSceneParam._m0[78u].y)) + _2320;
        _2418 = (exp2(_2617 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2601 * cbSceneParam._m0[78u].z)) * _2591.z) / cbSceneParam._m0[78u].z)) + _2321;
        _2420 = _2600 * _2322;
    }
    else
    {
        _2414 = _2319;
        _2416 = _2320;
        _2418 = _2321;
        _2420 = _2322;
    }
    bool _2627;
    vec4 _2430;
    vec4 _2452;
    float _2454;
    float _2458;
    float _2459;
    float _2460;
    float _2461;
    bool _2471;
    for (;;)
    {
        _2430 = cbMatDynParam._m0[0u];
        float _2432 = roundEven(_2430.y);
        bool _2433 = _2432 == 3.0;
        float _2434 = log2(_2420);
        float _2441 = exp2(_2434 * cbSceneParam._m0[78u].x) * _2291;
        float _2442 = exp2(_2434 * cbSceneParam._m0[78u].y) * _2292;
        float _2443 = exp2(_2434 * cbSceneParam._m0[78u].z) * _2293;
        float _2450 = _397 + (-0.5);
        _2452 = cbMtdParam._m0[1u];
        _2454 = _2452.y * _2450;
        float _2457 = (_2432 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2458 = _2457 * (_2433 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2414)));
        _2459 = _2457 * (_2433 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2416)));
        _2460 = _2457 * (_2433 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2418)));
        _2461 = _2450 * 0.999000012874603271484375;
        _2471 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2471)
        {
            if ((cbInstanceData._m0[_449 + 7u].x + _2461) < 0.5)
            {
                _2627 = true;
                break;
            }
        }
        uint _2568 = _451 + uint(_2430.w);
        if ((cbInstanceData._m0[_2568].w < 1.0) && ((cbInstanceData._m0[_2568].w + _2461) < 0.5))
        {
            _2627 = true;
            break;
        }
        if ((_2454 + 1.0) < _2452.x)
        {
            _2627 = true;
            break;
        }
        _2627 = false;
        break;
    }
    float _2832;
    if (_2627)
    {
        discard_state = true;
        _2832 = 0.0;
    }
    else
    {
        _2832 = cbInstanceData._m0[_2294].w;
    }
    SV_Target.x = _2458;
    SV_Target.y = _2459;
    SV_Target.z = _2460;
    SV_Target.w = _2832;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2294].w;
    discard_exit();
}


