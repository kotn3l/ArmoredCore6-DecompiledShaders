#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _817;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_AMSN_M0_M1_AO_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _251.z;
    float _260 = (_251.x * 2.0) + (-1.0);
    float _262 = (_251.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3157 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))));
    float _274 = cbMtdParam._m0[10u].x + _251.w;
    float _277 = fma(_269, _209, fma(_262, _201 * TANGENT.x, (_187 * _180) * _260));
    float _280 = fma(_269, _210, fma(_262, _201 * TANGENT.y, (_187 * _181) * _260));
    float _283 = fma(_269, _211, fma(_262, _201 * TANGENT.z, (_187 * _182) * _260));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3168 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _291 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _3179 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3190 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3201 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3212 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _402 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _405 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)))) * cbInstanceData._m0[_421].z;
    float _3223 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _3234 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _3245 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _445 = ((isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0))) * TEXCOORD.z) * _441.x;
    float _446 = dot(vec3(_288, _289, _290), vec3(_369, _370, _371));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _288) - _369;
    float _454 = (_449 * _289) - _370;
    float _455 = (_449 * _290) - _371;
    float _459 = abs(dot(vec3(_369, _370, _371), vec3(_288, _289, _290)));
    float _3256 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _461 = sqrt(_291);
    float _474 = exp2((_461 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_461 * 3.0));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _816;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _541 = fma(_514, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _506));
        float _545 = fma(_514, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _506));
        float _549 = fma(_514, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _506));
        float _574 = _506 + _288;
        float _575 = _510 + _289;
        float _576 = _514 + _290;
        float _586 = fma(_576, cbModelParam._m0[26u].z, fma(_575, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _574)) - _541;
        float _587 = fma(_576, cbModelParam._m0[27u].z, fma(_575, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _574)) - _545;
        float _588 = fma(_576, cbModelParam._m0[28u].z, fma(_575, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _574)) - _549;
        float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
        float _605 = ((_592 * _586) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_541 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _606 = ((_592 * _587) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_545 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _607 = ((_592 * _588) / cbModelParam._m0[34u].z) + ((((((_549 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_605, _606, _607), 0.0);
        float _644 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_610.x + (-0.5));
        float _646 = _644 * (_610.y + (-0.5));
        float _647 = _644 * (_610.z + (-0.5));
        float _654 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_617.x + (-0.5));
        float _656 = _654 * (_617.y + (-0.5));
        float _657 = _654 * (_617.z + (-0.5));
        float _664 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_624.x + (-0.5));
        float _666 = _664 * (_624.y + (-0.5));
        float _667 = _664 * (_624.z + (-0.5));
        float _674 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_631.x + (-0.5));
        float _676 = _674 * (_631.y + (-0.5));
        float _677 = _674 * (_631.z + (-0.5));
        float _678 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _679 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = _645 * 0.5;
        float _682 = _655 * 0.5;
        float _683 = _665 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _698 = (dot(vec3(_288, _289, _290), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _708 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_678 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3304 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_710 + 1.0))) + _715) * _678;
        float _725 = _646 * 0.5;
        float _726 = _656 * 0.5;
        float _727 = _666 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_288, _289, _290), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_679 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3337 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_752 + 1.0))) + _757) * _679;
        float _767 = _647 * 0.5;
        float _768 = _657 * 0.5;
        float _769 = _667 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_288, _289, _290), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3370 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_794 + 1.0))) + _799) * _680;
        _816 = _647;
        _818 = _646;
        _819 = _645;
        _820 = _657;
        _821 = _656;
        _822 = _655;
        _823 = _667;
        _824 = _666;
        _825 = _665;
        _826 = _680;
        _827 = _679;
        _828 = _678;
        _829 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _830 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
    }
    else
    {
        _816 = _817;
        _818 = _817;
        _819 = _817;
        _820 = _817;
        _821 = _817;
        _822 = _817;
        _823 = _817;
        _824 = _817;
        _825 = _817;
        _826 = _817;
        _827 = _817;
        _828 = _817;
        _829 = 0.0;
        _830 = 0.0;
        _831 = 0.0;
    }
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _857 = fma(_514, cbModelParam._m0[30u].z, fma(_510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _506));
        float _861 = fma(_514, cbModelParam._m0[31u].z, fma(_510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _506));
        float _865 = fma(_514, cbModelParam._m0[32u].z, fma(_510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _506));
        float _888 = _506 + _288;
        float _889 = _510 + _289;
        float _890 = _514 + _290;
        float _900 = fma(_890, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888)) - _857;
        float _901 = fma(_890, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888)) - _861;
        float _902 = fma(_890, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888)) - _865;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_857 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_861 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[35u].z) + ((((((_865 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _956 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_923.x + (-0.5));
        float _958 = _956 * (_923.y + (-0.5));
        float _959 = _956 * (_923.z + (-0.5));
        float _966 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_930.x + (-0.5));
        float _968 = _966 * (_930.y + (-0.5));
        float _969 = _966 * (_930.z + (-0.5));
        float _976 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_937.x + (-0.5));
        float _978 = _976 * (_937.y + (-0.5));
        float _979 = _976 * (_937.z + (-0.5));
        float _986 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_944.x + (-0.5));
        float _988 = _986 * (_944.y + (-0.5));
        float _989 = _986 * (_944.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_288, _289, _290), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3433 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_1020 + 1.0))) + _1025) * _990;
        float _1035 = _958 * 0.5;
        float _1036 = _968 * 0.5;
        float _1037 = _978 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_288, _289, _290), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3466 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_1062 + 1.0))) + _1067) * _991;
        float _1077 = _959 * 0.5;
        float _1078 = _969 * 0.5;
        float _1079 = _979 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_288, _289, _290), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3499 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1104 + 1.0))) + _1109) * _992;
        _1126 = _959;
        _1127 = _958;
        _1128 = _957;
        _1129 = _969;
        _1130 = _968;
        _1131 = _967;
        _1132 = _979;
        _1133 = _978;
        _1134 = _977;
        _1135 = _992;
        _1136 = _991;
        _1137 = _990;
        _1138 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1139 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1140 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _817;
        _1127 = _817;
        _1128 = _817;
        _1129 = _817;
        _1130 = _817;
        _1131 = _817;
        _1132 = _817;
        _1133 = _817;
        _1134 = _817;
        _1135 = _817;
        _1136 = _817;
        _1137 = _817;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1150 = (cbModelParam._m0[1u].x * (_1138 - _829)) + _829;
    float _1151 = (cbModelParam._m0[1u].x * (_1139 - _830)) + _830;
    float _1152 = (cbModelParam._m0[1u].x * (_1140 - _831)) + _831;
    float _1173 = fma(_1152, cbSceneParam._m0[89u].z, fma(_1151, cbSceneParam._m0[89u].y, _1150 * cbSceneParam._m0[89u].x));
    float _1176 = fma(_1152, cbSceneParam._m0[90u].z, fma(_1151, cbSceneParam._m0[90u].y, _1150 * cbSceneParam._m0[90u].x));
    float _1179 = fma(_1152, cbSceneParam._m0[91u].z, fma(_1151, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1150));
    float _1194 = _453 * 0.5;
    float _1195 = _454 * 0.5;
    float _1196 = _455 * 0.5;
    float _1197 = dot(vec4(_1194, _1195, _1196, 1.0), vec4(_1128, _1131, _1134, _1137));
    float _1200 = dot(vec4(_1194, _1195, _1196, 1.0), vec4(_1127, _1130, _1133, _1136));
    float _1203 = dot(vec4(_1194, _1195, _1196, 1.0), vec4(_1126, _1129, _1132, _1135));
    float _1237;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1210 = dot(vec4(_1194, _1195, _1196, 1.0), vec4(_816, _820, _823, _826));
        float _1214 = dot(vec4(_1194, _1195, _1196, 1.0), vec4(_818, _821, _824, _827));
        float _1218 = dot(vec4(_1194, _1195, _1196, 1.0), vec4(_819, _822, _825, _828));
        float _1225 = dot(vec4(cbModelParam._m0[39u]), vec4(_1194, _1195, _1196, 1.0));
        _1237 = dot(vec3(isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1225) ? 0.0 : (isnan(0.0) ? _1225 : max(0.0, _1225))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1237 = 1.0;
    }
    float _1248;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1239 = dot(vec4(cbModelParam._m0[40u]), vec4(_1194, _1195, _1196, 1.0));
        _1248 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1239) ? 0.0 : (isnan(0.0) ? _1239 : max(0.0, _1239))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1248 = 1.0;
    }
    float _1252 = (_1248 * cbModelParam._m0[1u].x) + (_1237 * (1.0 - cbModelParam._m0[1u].x));
    float _1262 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1263 = isnan(_1262) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1262 : min(cbModelParam._m0[25u].z, _1262));
    float _1345;
    float _1347;
    float _1349;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1312 = fma(_514, cbModelParam._m0[13u].z, fma(_510, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506)) + cbModelParam._m0[13u].w;
        float _1316 = fma(_514, cbModelParam._m0[14u].z, fma(_510, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506)) + cbModelParam._m0[14u].w;
        float _1320 = fma(_514, cbModelParam._m0[15u].z, fma(_510, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506)) + cbModelParam._m0[15u].w;
        float _1323 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1326 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1329 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1357;
        if (_1323 > 0.0)
        {
            _1357 = abs((1.0 - _1312) / _1323);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1312 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1357 = frontier_phi_16_14_ladder;
        }
        float _1584;
        if (_1326 > 0.0)
        {
            _1584 = abs((1.0 - _1316) / _1326);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1316 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1584 = frontier_phi_25_21_ladder;
        }
        float _1830;
        if (_1329 > 0.0)
        {
            _1830 = abs((1.0 - _1320) / _1329);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1320 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1830 = frontier_phi_37_32_ladder;
        }
        float _1832 = isnan(_1584) ? _1357 : (isnan(_1357) ? _1584 : min(_1357, _1584));
        float _1833 = isnan(_1830) ? _1832 : (isnan(_1832) ? _1830 : min(_1832, _1830));
        float _1837 = (_1833 * _1323) + _1312;
        float _1838 = (_1833 * _1326) + _1316;
        float _1839 = (_1833 * _1329) + _1320;
        float _1840 = _1833 * 9.9999997473787516355514526367188e-05;
        float _1842 = (-1.0) - _1840;
        float _1844 = _1840 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1839 > _1844) || ((_1839 < _1842) || ((_1838 > _1844) || ((_1838 < _1842) || ((_1837 < _1842) || (_1837 > _1844))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1963 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1839, cbModelParam._m0[9u].z, fma(_1838, cbModelParam._m0[9u].y, _1837 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1839, cbModelParam._m0[10u].z, fma(_1838, cbModelParam._m0[10u].y, _1837 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1839, cbModelParam._m0[11u].z, fma(_1838, cbModelParam._m0[11u].y, _1837 * cbModelParam._m0[11u].x))), _1263);
            frontier_phi_15_37_ladder = _1963.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1963.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1963.x * cbModelParam._m0[1u].y;
        }
        _1345 = frontier_phi_15_37_ladder_2;
        _1347 = frontier_phi_15_37_ladder_1;
        _1349 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _1263);
        _1345 = _1333.x * cbModelParam._m0[1u].y;
        _1347 = _1333.y * cbModelParam._m0[1u].y;
        _1349 = _1333.z * cbModelParam._m0[1u].y;
    }
    float _1353 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1354 = isnan(_1353) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1353 : min(cbModelParam._m0[25u].w, _1353));
    float _1447;
    float _1449;
    float _1451;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1411 = fma(_514, cbModelParam._m0[21u].z, fma(_510, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506)) + cbModelParam._m0[21u].w;
        float _1415 = fma(_514, cbModelParam._m0[22u].z, fma(_510, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506)) + cbModelParam._m0[22u].w;
        float _1419 = fma(_514, cbModelParam._m0[23u].z, fma(_510, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506)) + cbModelParam._m0[23u].w;
        float _1422 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1425 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1428 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1589;
        if (_1422 > 0.0)
        {
            _1589 = abs((1.0 - _1411) / _1422);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1411 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1589 = frontier_phi_27_23_ladder;
        }
        float _1857;
        if (_1425 > 0.0)
        {
            _1857 = abs((1.0 - _1415) / _1425);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1415 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1857 = frontier_phi_39_34_ladder;
        }
        float _2062;
        if (_1428 > 0.0)
        {
            _2062 = abs((1.0 - _1419) / _1428);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1419 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2062 = frontier_phi_48_45_ladder;
        }
        float _2064 = isnan(_1857) ? _1589 : (isnan(_1589) ? _1857 : min(_1589, _1857));
        float _2065 = isnan(_2062) ? _2064 : (isnan(_2064) ? _2062 : min(_2064, _2062));
        float _2069 = (_2065 * _1422) + _1411;
        float _2070 = (_2065 * _1425) + _1415;
        float _2071 = (_2065 * _1428) + _1419;
        float _2072 = _2065 * 9.9999997473787516355514526367188e-05;
        float _2073 = (-1.0) - _2072;
        float _2075 = _2072 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2071 > _2075) || ((_2071 < _2073) || ((_2070 > _2075) || ((_2070 < _2073) || ((_2069 < _2073) || (_2069 > _2075))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2071, cbModelParam._m0[17u].z, fma(_2070, cbModelParam._m0[17u].y, _2069 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2071, cbModelParam._m0[18u].z, fma(_2070, cbModelParam._m0[18u].y, _2069 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2071, cbModelParam._m0[19u].z, fma(_2070, cbModelParam._m0[19u].y, _2069 * cbModelParam._m0[19u].x))), _1354);
            frontier_phi_24_48_ladder = _2269.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2269.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2269.x * cbModelParam._m0[1u].z;
        }
        _1447 = frontier_phi_24_48_ladder_2;
        _1449 = frontier_phi_24_48_ladder_1;
        _1451 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1354);
        _1447 = _1431.x * cbModelParam._m0[1u].z;
        _1449 = _1431.y * cbModelParam._m0[1u].z;
        _1451 = _1431.z * cbModelParam._m0[1u].z;
    }
    float _1463 = ((((1.0 - _474) * ((_461 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_474 * _461)) * _445;
    float _1464 = _1463 * ((cbModelParam._m0[1u].w * (_1447 - _1345)) + _1345);
    float _1465 = _1463 * ((cbModelParam._m0[1u].w * (_1449 - _1347)) + _1347);
    float _1466 = _1463 * ((cbModelParam._m0[1u].w * (_1451 - _1349)) + _1349);
    float _1469 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, _1464 * cbSceneParam._m0[91u].x));
    vec4 _1483 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_377, _378));
    float _1485 = _1483.w;
    float _1497 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1485);
    float _1498 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1485);
    float _1499 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1485);
    uvec4 _1503 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1505 = _1503.x * 14u;
    uint _1506 = _1505 + 13u;
    float _1513 = _445 + (-1.0);
    float _1518 = (cbLight._m0[_1506].x * _1513) + 1.0;
    float _1519 = (cbLight._m0[_1506].y * _1513) + 1.0;
    float _1520 = (cbLight._m0[_1506].z * _1513) + 1.0;
    float _1521 = (cbLight._m0[_1506].w * _1513) + 1.0;
    uint _1522 = _1505 + 5u;
    float _1528 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
    uint _1532 = _1505 + 4u;
    float _1542 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
    uint _1546 = _1505 | 1u;
    float _1557 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_288, _289, _290));
    float _1560 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_288, _289, _290));
    float _3635 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _3646 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1565 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * 0.3183098733425140380859375;
    float _1567 = (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.3183098733425140380859375;
    float _1574 = ((cbLight._m0[_1522].x * _1528) * _1567) + (((cbLight._m0[_1532].x * _1497) * _1542) * _1565);
    float _1575 = ((_1528 * cbLight._m0[_1522].y) * _1567) + (((cbLight._m0[_1532].y * _1498) * _1542) * _1565);
    float _1576 = ((_1528 * cbLight._m0[_1522].z) * _1567) + (((cbLight._m0[_1532].z * _1499) * _1542) * _1565);
    uvec4 _1581 = floatBitsToUint(cbLight._m0[_1505 + 12u]);
    bool _1583 = _1581.x == 0u;
    float _1594;
    float _1596;
    float _1598;
    if (_1583)
    {
        _1594 = _1574;
        _1596 = _1575;
        _1598 = _1576;
    }
    else
    {
        uint _1602 = _1505 + 6u;
        float _1618 = (dot(vec3(cbLight._m0[_1505 + 2u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1619 = _1618 * _1618;
        float _3657 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1621 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1594 = (((cbLight._m0[_1602].x * 0.3183098733425140380859375) * _1620) * _1621) + _1574;
        _1596 = (((cbLight._m0[_1602].y * 0.3183098733425140380859375) * _1620) * _1621) + _1575;
        _1598 = (((cbLight._m0[_1602].z * 0.3183098733425140380859375) * _1620) * _1621) + _1576;
    }
    bool _1601 = _1581.y == 0u;
    float _1639;
    float _1641;
    float _1643;
    if (_1601)
    {
        _1639 = _1594;
        _1641 = _1596;
        _1643 = _1598;
    }
    else
    {
        uint _1801 = _1505 + 7u;
        float _1817 = (dot(vec3(cbLight._m0[_1505 + 3u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1818 = _1817 * _1817;
        float _3673 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1820 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1639 = (((cbLight._m0[_1801].x * 0.3183098733425140380859375) * _1819) * _1820) + _1594;
        _1641 = (((cbLight._m0[_1801].y * 0.3183098733425140380859375) * _1819) * _1820) + _1596;
        _1643 = (((cbLight._m0[_1801].z * 0.3183098733425140380859375) * _1819) * _1820) + _1598;
    }
    uint _1646 = _1505 + 8u;
    float _1659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1505].w)) * _291) * 0.949999988079071044921875);
    float _1660 = _1659 * _1659;
    float _1661 = cbLight._m0[_1505].x + _369;
    float _1662 = cbLight._m0[_1505].y + _370;
    float _1663 = cbLight._m0[_1505].z + _371;
    float _1667 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
    float _1668 = _1667 * _1661;
    float _1669 = _1667 * _1662;
    float _1670 = _1667 * _1663;
    float _1671 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1505].xyz));
    float _3689 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1674 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _1675 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1676 = dot(vec3(_288, _289, _290), vec3(_1668, _1669, _1670));
    float _3711 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _1680 = dot(vec3(cbLight._m0[_1505].xyz), vec3(_1668, _1669, _1670));
    float _3722 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1684 = _1660 * _1660;
    float _1688 = ((_1679 * _1679) * (_1684 + (-1.0))) + 1.0;
    float _1699 = (exp2(log2(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1700 = 1.0 - _1660;
    float _1711 = (0.5 / (((_1675 * ((_1674 * _1700) + _1660)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _1700) + _1660) * _1674))) * _1674;
    float _3733 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1713 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1684 / ((_1688 * _1688) * 3.141590118408203125));
    uint _1727 = _1505 + 9u;
    float _1738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1546].w)) * _291) * 0.949999988079071044921875);
    float _1739 = _1738 * _1738;
    float _1740 = cbLight._m0[_1546].x + _369;
    float _1741 = cbLight._m0[_1546].y + _370;
    float _1742 = cbLight._m0[_1546].z + _371;
    float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
    float _1747 = _1746 * _1740;
    float _1748 = _1746 * _1741;
    float _1749 = _1746 * _1742;
    float _1750 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1546].xyz));
    float _3744 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1754 = dot(vec3(_288, _289, _290), vec3(_1747, _1748, _1749));
    float _3755 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1747, _1748, _1749));
    float _3766 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1739 * _1739;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1775 = (exp2(log2(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1776 = 1.0 - _1739;
    float _1786 = (0.5 / (((_1675 * ((_1753 * _1776) + _1739)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _1776) + _1739) * _1753))) * _1753;
    float _3777 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    float _1798 = (((_1775 * cbLight._m0[_1727].x) * _1788) * _1528) + ((((cbLight._m0[_1646].x * _1497) * _1699) * _1713) * _1542);
    float _1799 = (((_1775 * cbLight._m0[_1727].y) * _1788) * _1528) + ((((cbLight._m0[_1646].y * _1498) * _1699) * _1713) * _1542);
    float _1800 = (((_1775 * cbLight._m0[_1727].z) * _1788) * _1528) + ((((cbLight._m0[_1646].z * _1499) * _1699) * _1713) * _1542);
    float _1862;
    float _1864;
    float _1866;
    if (_1583)
    {
        _1862 = _1798;
        _1864 = _1799;
        _1866 = _1800;
    }
    else
    {
        uint _1868 = _1505 + 2u;
        uint _1872 = _1505 + 10u;
        float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _291) * 0.949999988079071044921875);
        float _1887 = _1886 * _1886;
        float _1888 = cbLight._m0[_1868].x + _369;
        float _1889 = cbLight._m0[_1868].y + _370;
        float _1890 = cbLight._m0[_1868].z + _371;
        float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
        float _1895 = _1894 * _1888;
        float _1896 = _1894 * _1889;
        float _1897 = _1894 * _1890;
        float _1898 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1868].xyz));
        float _3788 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1901 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1902 = dot(vec3(_288, _289, _290), vec3(_1895, _1896, _1897));
        float _3799 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1905 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1906 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_1895, _1896, _1897));
        float _3810 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1910 = _1887 * _1887;
        float _1914 = ((_1905 * _1905) * (_1910 + (-1.0))) + 1.0;
        float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1924 = 1.0 - _1887;
        float _1934 = (0.5 / (((_1675 * ((_1901 * _1924) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _1924) + _1887) * _1901))) * _1901;
        float _3821 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1936 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1910 / ((_1914 * _1914) * 3.141590118408203125));
        float _1937 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1862 = (((_1923 * cbLight._m0[_1872].x) * _1936) * _1937) + _1798;
        _1864 = (((_1923 * cbLight._m0[_1872].y) * _1936) * _1937) + _1799;
        _1866 = (((_1923 * cbLight._m0[_1872].z) * _1936) * _1937) + _1800;
    }
    float _1972;
    float _1974;
    float _1976;
    if (_1601)
    {
        _1972 = _1862;
        _1974 = _1864;
        _1976 = _1866;
    }
    else
    {
        uint _1983 = _1505 + 3u;
        uint _1987 = _1505 + 11u;
        float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _291) * 0.949999988079071044921875);
        float _2002 = _2001 * _2001;
        float _2003 = cbLight._m0[_1983].x + _369;
        float _2004 = cbLight._m0[_1983].y + _370;
        float _2005 = cbLight._m0[_1983].z + _371;
        float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
        float _2010 = _2009 * _2003;
        float _2011 = _2009 * _2004;
        float _2012 = _2009 * _2005;
        float _2013 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1983].xyz));
        float _3837 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _2017 = dot(vec3(_288, _289, _290), vec3(_2010, _2011, _2012));
        float _3848 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _2021 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2010, _2011, _2012));
        float _3859 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2025 = _2002 * _2002;
        float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
        float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2039 = 1.0 - _2002;
        float _2049 = (0.5 / (((_1675 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1675 * _2039) + _2002) * _2016))) * _2016;
        float _3870 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2051 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
        float _2052 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
        _1972 = (((_2038 * cbLight._m0[_1987].x) * _2051) * _2052) + _1862;
        _1974 = (((_2038 * cbLight._m0[_1987].y) * _2051) * _2052) + _1864;
        _1976 = (((_2038 * cbLight._m0[_1987].z) * _2051) * _2052) + _1866;
    }
    float _2186;
    float _2188;
    float _2190;
    float _2192;
    float _2194;
    float _2196;
    if (_1503.y == 0u)
    {
        float _2127 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2128 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2127;
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2127;
        float _2130 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2127;
        uvec4 _2142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2143 = _2142.x;
        uint _2154 = uint((float(_2142.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _2143))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _2143)));
        float _2164 = (log2(_2130 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2165 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        uint _2168 = uint(isnan(14.0) ? _2165 : (isnan(_2165) ? 14.0 : min(_2165, 14.0)));
        uvec4 _2173 = texelFetch(g_lightClusterGridBuffer, int(((_2168 << 2u) + (_2154 << 6u)) >> 2u));
        uint _2174 = _2173.x;
        uint _2175 = _2142.z;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((((1u << ((_2175 >> 4u) & 15u)) + 4294967295u) & _2174) == 0u) || ((_2175 & 240u) == 0u))
        {
            _2274 = 0.0;
            _2276 = 0.0;
            _2278 = 0.0;
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
        }
        else
        {
            float _2275;
            float _2277;
            float _2279;
            float _2281;
            float _2283;
            float _2285;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            uint _2424 = 0u;
            uint _2433;
            bool _2434;
            for (;;)
            {
                _2433 = texelFetch(g_lightClassification, int((((_2168 << 5u) + (_2154 << 9u)) + (_2424 << 2u)) >> 2u)).x;
                _2434 = _2433 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2434)
                {
                    frontier_phi_63_pred = _2423;
                    frontier_phi_63_pred_1 = _2422;
                    frontier_phi_63_pred_2 = _2421;
                    frontier_phi_63_pred_3 = _2420;
                    frontier_phi_63_pred_4 = _2419;
                    frontier_phi_63_pred_5 = _2418;
                }
                else
                {
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    uint _2548;
                    _2542 = _2418;
                    _2543 = _2419;
                    _2544 = _2420;
                    _2545 = _2421;
                    _2546 = _2422;
                    _2547 = _2423;
                    _2548 = _2433;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    for (;;)
                    {
                        uint _2552 = uint(findLSB(_2548)) + (_2424 << 5u);
                        uint _2549 = (_2548 + 4294967295u) & _2548;
                        uint _2554 = _2552 * 48u;
                        vec4 _2568 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2554)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 3u)).x));
                        uint _2574 = (_2552 * 48u) + 4u;
                        vec4 _2587 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2574)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 3u)).x));
                        uint _2593 = (_2552 * 48u) + 8u;
                        vec3 _2604 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x));
                        float _2608 = _2568.x - _2128;
                        float _2609 = _2568.y - _2129;
                        float _2610 = _2568.z - _2130;
                        float _2611 = dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610));
                        float _2614 = inversesqrt(_2611);
                        float _2615 = _2614 * _2608;
                        float _2616 = _2614 * _2609;
                        float _2617 = _2614 * _2610;
                        float _2618 = dot(vec3(_399, _402, _405), vec3(_2615, _2616, _2617));
                        float _2623 = 1.0 - (_2611 * _2568.w);
                        float _3896 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                        float _2624 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                        float _2625 = sqrt(_2611) * _2587.w;
                        float _2628 = 1.39999997615814208984375 / (_2625 + 1.39999997615814208984375);
                        float _2629 = _2628 * _2628;
                        float _2632 = ((1.0 - _2629) * _2618) + _2629;
                        float _2635 = _2625 * _2625;
                        float _2639 = ((isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))) * _2624) / ((_2635 * 0.699999988079071044921875) + 1.0);
                        float _2643 = (-0.0) - _2128;
                        float _2644 = (-0.0) - _2129;
                        float _2645 = (-0.0) - _2130;
                        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
                        float _2650 = _2649 * _2643;
                        float _2651 = _2649 * _2644;
                        float _2652 = _2649 * _2645;
                        float _2660 = exp2(log2(1.0 / ((_2635 * 3.5) + 5.0)) * 0.25);
                        float _2661 = 1.0 - _461;
                        float _2668 = sqrt(1.0 - ((1.0 - (_2661 * _2661)) * (1.0 - (_2660 * _2660))));
                        float _2669 = _2668 * _2668;
                        float _2670 = _2669 * _2669;
                        float _2671 = _2650 + _2615;
                        float _2672 = _2651 + _2616;
                        float _2673 = _2652 + _2617;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2681 = dot(vec3(_399, _402, _405), vec3(_2650, _2651, _2652));
                        float _3912 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2684 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2685 = dot(vec3(_399, _402, _405), vec3(_2677 * _2671, _2677 * _2672, _2677 * _2673));
                        float _3923 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2688 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2692 = ((_2688 * _2688) * (_2670 + (-1.0))) + 1.0;
                        float _2693 = _2628 * _2669;
                        float _2694 = _2693 * _2693;
                        float _2697 = ((1.0 - _2694) * _2618) + _2694;
                        float _3934 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2698 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                        float _2699 = 1.0 - _2669;
                        float _2709 = (0.5 / (((_2698 * ((_2684 * _2699) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2698 * _2699) + _2669) * _2684))) * _2698;
                        float _3945 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2720 = (((_2670 * 3.1415927410125732421875) * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) / ((_2692 * _2692) * ((_2635 * 2.1991131305694580078125) + 3.141590118408203125))) * _2624;
                        _2477 = (_2639 * _2587.x) + _2545;
                        _2478 = (_2639 * _2587.y) + _2546;
                        _2479 = (_2639 * _2587.z) + _2547;
                        _2474 = (_2720 * _2604.x) + _2542;
                        _2475 = (_2720 * _2604.y) + _2543;
                        _2476 = (_2720 * _2604.z) + _2544;
                        if (_2549 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2542 = _2474;
                            _2543 = _2475;
                            _2544 = _2476;
                            _2545 = _2477;
                            _2546 = _2478;
                            _2547 = _2479;
                            _2548 = _2549;
                        }
                    }
                    frontier_phi_63_pred = _2479;
                    frontier_phi_63_pred_1 = _2478;
                    frontier_phi_63_pred_2 = _2477;
                    frontier_phi_63_pred_3 = _2476;
                    frontier_phi_63_pred_4 = _2475;
                    frontier_phi_63_pred_5 = _2474;
                }
                _2285 = frontier_phi_63_pred;
                _2283 = frontier_phi_63_pred_1;
                _2281 = frontier_phi_63_pred_2;
                _2279 = frontier_phi_63_pred_3;
                _2277 = frontier_phi_63_pred_4;
                _2275 = frontier_phi_63_pred_5;
                uint _2425 = _2424 + 1u;
                if (_2425 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2418 = _2275;
                    _2419 = _2277;
                    _2420 = _2279;
                    _2421 = _2281;
                    _2422 = _2283;
                    _2423 = _2285;
                    _2424 = _2425;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2274 = _2275;
            _2276 = _2277;
            _2278 = _2279;
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
        }
        uvec4 _2288 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2289 = _2288.z;
        uint _2291 = (_2289 >> 8u) & 15u;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((4294967295u << _2291) & _2174) == 0u)
        {
            _2386 = _2274;
            _2388 = _2276;
            _2390 = _2278;
            _2392 = _2280;
            _2394 = _2282;
            _2396 = _2284;
        }
        else
        {
            float _2411 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
            float _2412 = _2411 * _2128;
            float _2413 = _2411 * _2129;
            float _2414 = _2411 * _2130;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2291 < ((_2289 >> 12u) & 15u))
            {
                float _2387;
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2397;
                float _2525 = _2274;
                float _2526 = _2276;
                float _2527 = _2278;
                float _2528 = _2280;
                float _2529 = _2282;
                float _2530 = _2284;
                uint _2531 = _2291;
                uint _2540;
                bool _2541;
                for (;;)
                {
                    _2540 = texelFetch(g_lightClassification, int((((_2168 << 5u) + (_2154 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                    _2541 = _2540 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2541)
                    {
                        frontier_phi_69_pred = _2530;
                        frontier_phi_69_pred_1 = _2529;
                        frontier_phi_69_pred_2 = _2528;
                        frontier_phi_69_pred_3 = _2527;
                        frontier_phi_69_pred_4 = _2526;
                        frontier_phi_69_pred_5 = _2525;
                    }
                    else
                    {
                        float _2725;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _2738 = _2525;
                        float _2739 = _2526;
                        float _2740 = _2527;
                        float _2741 = _2528;
                        float _2742 = _2529;
                        float _2743 = _2530;
                        uint _2744 = _2540;
                        uint _2745;
                        vec4 _2770;
                        float _2771;
                        vec4 _2786;
                        vec3 _2798;
                        vec4 _2814;
                        vec4 _2830;
                        float _2877;
                        bool _2878;
                        for (;;)
                        {
                            uint _2755 = ((_2531 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2744));
                            _2745 = (_2744 + 4294967295u) & _2744;
                            uint _2757 = _2755 * 40u;
                            _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            _2771 = _2770.w;
                            uint _2773 = (_2755 * 40u) + 4u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            uint _2788 = (_2755 * 40u) + 8u;
                            _2798 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x));
                            uint _2801 = (_2755 * 40u) + 16u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2817 = (_2755 * 40u) + 20u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2833 = (_2755 * 40u) + 24u;
                            vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2852 = (_2755 * 40u) + 28u;
                            vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            _2877 = fma(_2130, _2865.z, fma(_2129, _2865.y, _2865.x * _2128)) + _2865.w;
                            _2878 = !((fma(_2130, _2846.z, fma(_2129, _2846.y, _2846.x * _2128)) + _2846.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2878)
                            {
                                float _2905 = _2770.x - _2128;
                                float _2906 = _2770.y - _2129;
                                float _2907 = _2770.z - _2130;
                                float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                                float _2911 = inversesqrt(_2908);
                                float _2912 = _2911 * _2905;
                                float _2913 = _2911 * _2906;
                                float _2914 = _2911 * _2907;
                                float _2918 = 1.0 - (_2908 / (_2771 * _2771));
                                float _3956 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                                float _2919 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                                float _2923 = sqrt(_2908) * _2786.w;
                                float _2925 = 1.39999997615814208984375 / (_2923 + 1.39999997615814208984375);
                                float _2926 = _2925 * _2925;
                                float _2929 = ((1.0 - _2926) * dot(vec3(_2912, _2913, _2914), vec3(_399, _402, _405))) + _2926;
                                float _2932 = _2923 * _2923;
                                float _2936 = (fma(_2130, _2814.z, fma(_2129, _2814.y, _2814.x * _2128)) + _2814.w) / _2877;
                                float _2937 = (fma(_2130, _2830.z, fma(_2129, _2830.y, _2830.x * _2128)) + _2830.w) / _2877;
                                float _2941 = 1.0 - dot(vec2(_2936, _2937), vec2(_2936, _2937));
                                float _3972 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2942 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _2943 = _2942 * (((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2919) / ((_2932 * 0.699999988079071044921875) + 1.0));
                                float _2955 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                                float _2956 = 1.0 - _461;
                                float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                                float _2964 = _2963 * _2963;
                                float _2965 = _2964 * _2964;
                                float _2966 = _2912 - _2412;
                                float _2967 = _2913 - _2413;
                                float _2968 = _2914 - _2414;
                                float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                                float _2976 = dot(vec3(_399, _402, _405), vec3((-0.0) - _2412, (-0.0) - _2413, (-0.0) - _2414));
                                float _3983 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2979 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _2980 = dot(vec3(_399, _402, _405), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                                float _3994 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2983 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                                float _2988 = _2925 * _2964;
                                float _2989 = _2988 * _2988;
                                float _2995 = ((1.0 - _2989) * dot(vec3(_399, _402, _405), vec3(_2912, _2913, _2914))) + _2989;
                                float _4005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _2997 = 1.0 - _2964;
                                float _3007 = (0.5 / (((_2996 * ((_2979 * _2997) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2996 * _2997) + _2964) * _2979))) * _2996;
                                float _4016 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3017 = (_2942 * _2919) * (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) / ((_2987 * _2987) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2943 * _2786.z;
                                frontier_phi_75_pred_1 = _2943 * _2786.y;
                                frontier_phi_75_pred_2 = _2943 * _2786.x;
                                frontier_phi_75_pred_3 = _3017 * _2798.z;
                                frontier_phi_75_pred_4 = _3017 * _2798.y;
                                frontier_phi_75_pred_5 = _3017 * _2798.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3026 = frontier_phi_75_pred;
                            _3025 = frontier_phi_75_pred_1;
                            _3024 = frontier_phi_75_pred_2;
                            _3023 = frontier_phi_75_pred_3;
                            _3022 = frontier_phi_75_pred_4;
                            _3021 = frontier_phi_75_pred_5;
                            _2728 = _3024 + _2741;
                            _2729 = _3025 + _2742;
                            _2730 = _3026 + _2743;
                            _2725 = _3021 + _2738;
                            _2726 = _3022 + _2739;
                            _2727 = _3023 + _2740;
                            if (_2745 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2729;
                                _2743 = _2730;
                                _2744 = _2745;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2730;
                        frontier_phi_69_pred_1 = _2729;
                        frontier_phi_69_pred_2 = _2728;
                        frontier_phi_69_pred_3 = _2727;
                        frontier_phi_69_pred_4 = _2726;
                        frontier_phi_69_pred_5 = _2725;
                    }
                    _2397 = frontier_phi_69_pred;
                    _2395 = frontier_phi_69_pred_1;
                    _2393 = frontier_phi_69_pred_2;
                    _2391 = frontier_phi_69_pred_3;
                    _2389 = frontier_phi_69_pred_4;
                    _2387 = frontier_phi_69_pred_5;
                    uint _2532 = _2531 + 1u;
                    if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2525 = _2387;
                        _2526 = _2389;
                        _2527 = _2391;
                        _2528 = _2393;
                        _2529 = _2395;
                        _2530 = _2397;
                        _2531 = _2532;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2397;
                frontier_phi_57_58_ladder_1 = _2395;
                frontier_phi_57_58_ladder_2 = _2393;
                frontier_phi_57_58_ladder_3 = _2391;
                frontier_phi_57_58_ladder_4 = _2389;
                frontier_phi_57_58_ladder_5 = _2387;
            }
            else
            {
                frontier_phi_57_58_ladder = _2284;
                frontier_phi_57_58_ladder_1 = _2282;
                frontier_phi_57_58_ladder_2 = _2280;
                frontier_phi_57_58_ladder_3 = _2278;
                frontier_phi_57_58_ladder_4 = _2276;
                frontier_phi_57_58_ladder_5 = _2274;
            }
            _2386 = frontier_phi_57_58_ladder_5;
            _2388 = frontier_phi_57_58_ladder_4;
            _2390 = frontier_phi_57_58_ladder_3;
            _2392 = frontier_phi_57_58_ladder_2;
            _2394 = frontier_phi_57_58_ladder_1;
            _2396 = frontier_phi_57_58_ladder;
        }
        float _2401 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _2186 = (_2401 * _2392) + _1639;
        _2188 = (_2401 * _2394) + _1641;
        _2190 = (_2401 * _2396) + _1643;
        _2192 = ((_2386 * 0.039999999105930328369140625) * _2401) + _1972;
        _2194 = ((_2388 * 0.039999999105930328369140625) * _2401) + _1974;
        _2196 = ((_2390 * 0.039999999105930328369140625) * _2401) + _1976;
    }
    else
    {
        _2186 = _1639;
        _2188 = _1641;
        _2190 = _1643;
        _2192 = _1972;
        _2194 = _1974;
        _2196 = _1976;
    }
    float _4032 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4043 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _4054 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    uint _2216 = _418 + 6u;
    float _2224 = _377 / cbSceneParam._m0[86u].x;
    float _2225 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2239 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2224, _2225, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2241 = _2239.x;
    float _2242 = _2239.y;
    float _2243 = _2239.z;
    float _2244 = _2239.w;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2299 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2300 = _2299 / _311;
        float _2311 = _2300 * _362;
        float _2312 = _363 * _2300;
        float _2313 = (-0.0) - _2312;
        float _2314 = _2300 * _364;
        float _2316 = (cbSceneParam._m0[77u].w * _2313) / _2299;
        float _2317 = _2316 + cbSceneParam._m0[79u].w;
        float _2318 = cbSceneParam._m0[79u].w - _2312;
        float _2324 = sqrt(((_2311 * _2311) + (_2312 * _2312)) + (_2314 * _2314));
        float _2327 = (1.0 - (cbSceneParam._m0[77u].w / _2299)) * _2324;
        float _2332 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2334 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2487;
        if (abs((_2313 - _2316) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2487 = ((((_2317 > 0.0) ? exp2(_2332 * _2317) : (2.0 - exp2(_2334 * _2317))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2327;
        }
        else
        {
            float _2447 = 1.0 / cbSceneParam._m0[80u].x;
            float _2448 = isnan(_2318) ? _2317 : (isnan(_2317) ? _2318 : max(_2317, _2318));
            float _2449 = isnan(_2318) ? _2317 : (isnan(_2317) ? _2318 : min(_2317, _2318));
            float _2458 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : min(_2448, 0.0));
            float _2459 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : min(_2449, 0.0));
            _2487 = ((abs(_2324 / _2313) * cbSceneParam._m0[80u].y) * ((((_2458 - _2459) * 2.0) - ((exp2(_2332 * (isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0)))) - exp2(_2332 * (isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0))))) * _2447)) - ((exp2(_2334 * _2458) - exp2(_2334 * _2459)) * _2447))) + (_2327 * cbSceneParam._m0[80u].z);
        }
        vec4 _2489 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2224, _2225, 1.0), 0.0);
        float _2498 = exp2((_2487 * (-1.44269502162933349609375)) * (1.0 - _2489.w));
        float _2499 = log2(_2498);
        float _2515 = log2(_2244);
        _2336 = (exp2(_2515 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2499 * cbSceneParam._m0[78u].x)) * _2489.x) / cbSceneParam._m0[78u].x)) + _2241;
        _2338 = (exp2(_2515 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2499 * cbSceneParam._m0[78u].y)) * _2489.y) / cbSceneParam._m0[78u].y)) + _2242;
        _2340 = (exp2(_2515 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2499 * cbSceneParam._m0[78u].z)) * _2489.z) / cbSceneParam._m0[78u].z)) + _2243;
        _2342 = _2498 * _2244;
    }
    else
    {
        _2336 = _2241;
        _2338 = _2242;
        _2340 = _2243;
        _2342 = _2244;
    }
    float _2354 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2355 = _2354 == 3.0;
    float _2356 = log2(_2342);
    float _2363 = exp2(_2356 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2186 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _445))) + ((_2192 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1252)) * cbPerFrame._m0[3u].x));
    float _2364 = exp2(_2356 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2188 + ((isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))) * _445))) + ((_2194 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _1252)) * cbPerFrame._m0[3u].x));
    float _2365 = exp2(_2356 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2190 + ((isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))) * _445))) + ((_2196 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _1252)) * cbPerFrame._m0[3u].x));
    float _2374 = (_2354 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2374 * (_2355 ? _2363 : (_2363 + (cbSceneParam._m0[72u].w * _2336)));
    SV_Target.y = _2374 * (_2355 ? _2364 : (_2364 + (cbSceneParam._m0[72u].w * _2338)));
    SV_Target.z = _2374 * (_2355 ? _2365 : (_2365 + (cbSceneParam._m0[72u].w * _2340)));
    SV_Target.w = cbInstanceData._m0[_2216].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2216].w;
}


