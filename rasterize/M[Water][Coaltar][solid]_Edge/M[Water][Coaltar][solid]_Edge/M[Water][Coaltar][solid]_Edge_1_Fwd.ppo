#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1042;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _203 = _202 * _195;
    float _204 = _202 * _196;
    float _205 = _202 * _197;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _285 = _284 * _273;
    float _286 = _284 * _274;
    float _287 = _284 * _275;
    float _295 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _296 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _310 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8, SS_BumpMap), vec2((_295 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_296 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _318 = (_310.x * 2.0) + (-1.0);
    float _320 = (_310.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3439 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))));
    float _330 = fma(_327, _210, fma(_320, _217, _318 * _203));
    float _333 = fma(_327, _211, fma(_320, _218, _318 * _204));
    float _336 = fma(_327, _212, fma(_320, _219, _318 * _205));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    float _349 = (dot(vec4(_285, _286, _287, 0.0), vec4(_340 * _330, _340 * _333, _340 * _336, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _362 = dot(vec3(_273, _274, _275), vec3(_203, _204, _205));
    float _365 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _368 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _374 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _395 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _415 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_362 * cbMtdParam._m0[12u].x) * _374) * _395) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_365 * cbMtdParam._m0[12u].x) * _374) * _395) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _438 = dot(vec4(_285, _286, _287, 0.0), vec4(_210, _211, _212, 0.0)) - cbMtdParam._m0[12u].w;
    float _3450 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _445 = exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _460 = (((((sin(_349) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _415.x) * cbMtdParam._m0[9u].x) * ((_445 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _469 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _415.y) * cbMtdParam._m0[9u].y) * ((_445 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_349 * 0.85000002384185791015625) + 1.0);
    float _478 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _415.z) * cbMtdParam._m0[9u].z) * ((_445 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_349 * 0.699999988079071044921875) + 1.0);
    vec4 _490 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _494 = cbMtdParam._m0[12u].z * _490.x;
    vec4 _507 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3466 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _521 = sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))));
    float _523 = cbMtdParam._m0[14u].w + _507.z;
    vec4 _535 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _295) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _296) + cbTextureTilingScale._m0[1u].w));
    float _539 = cbMtdParam._m0[13u].w * _535.x;
    float _557 = fma(_521, _210, fma(_515, _217, _514 * _203));
    float _560 = fma(_521, _211, fma(_515, _218, _514 * _204));
    float _563 = fma(_521, _212, fma(_515, _219, _514 * _205));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3477 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3488 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _572 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _573 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3504 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3515 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3526 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _592 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _622 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _625 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = (_638 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3537 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _663 = _660.x * TEXCOORD.z;
    float _664 = dot(vec3(_568, _569, _570), vec3(_285, _286, _287));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _568) - _285;
    float _672 = (_667 * _569) - _286;
    float _673 = (_667 * _570) - _287;
    float _677 = abs(dot(vec3(_285, _286, _287), vec3(_568, _569, _570)));
    float _3570 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _686 = 10.0 / (_592 + 10.0);
    float _687 = sqrt(_572);
    float _699 = exp2((_687 * 5.0) * log2(1.0 - (_678 * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1041;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _770 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _774 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _799 = _731 + _568;
        float _800 = _735 + _569;
        float _801 = _739 + _570;
        float _811 = fma(_801, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799)) - _766;
        float _812 = fma(_801, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799)) - _770;
        float _813 = fma(_801, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799)) - _774;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _869 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_835.x + (-0.5));
        float _871 = _869 * (_835.y + (-0.5));
        float _872 = _869 * (_835.z + (-0.5));
        float _879 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_842.x + (-0.5));
        float _881 = _879 * (_842.y + (-0.5));
        float _882 = _879 * (_842.z + (-0.5));
        float _889 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_849.x + (-0.5));
        float _891 = _889 * (_849.y + (-0.5));
        float _892 = _889 * (_849.z + (-0.5));
        float _899 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_856.x + (-0.5));
        float _901 = _899 * (_856.y + (-0.5));
        float _902 = _899 * (_856.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _923 = (dot(vec3(_568, _569, _570), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _933 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3618 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_935 + 1.0))) + _940) * _903;
        float _950 = _871 * 0.5;
        float _951 = _881 * 0.5;
        float _952 = _891 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_568, _569, _570), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3651 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_977 + 1.0))) + _982) * _904;
        float _992 = _872 * 0.5;
        float _993 = _882 * 0.5;
        float _994 = _892 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_568, _569, _570), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3684 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1019 + 1.0))) + _1024) * _905;
        _1041 = _872;
        _1043 = _871;
        _1044 = _870;
        _1045 = _882;
        _1046 = _881;
        _1047 = _880;
        _1048 = _892;
        _1049 = _891;
        _1050 = _890;
        _1051 = _905;
        _1052 = _904;
        _1053 = _903;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _1042;
        _1043 = _1042;
        _1044 = _1042;
        _1045 = _1042;
        _1046 = _1042;
        _1047 = _1042;
        _1048 = _1042;
        _1049 = _1042;
        _1050 = _1042;
        _1051 = _1042;
        _1052 = _1042;
        _1053 = _1042;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1086 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1090 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1113 = _731 + _568;
        float _1114 = _735 + _569;
        float _1115 = _739 + _570;
        float _1125 = fma(_1115, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1082 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1086 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[35u].z) + ((((((_1090 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1181 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1148.x + (-0.5));
        float _1183 = _1181 * (_1148.y + (-0.5));
        float _1184 = _1181 * (_1148.z + (-0.5));
        float _1191 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1155.x + (-0.5));
        float _1193 = _1191 * (_1155.y + (-0.5));
        float _1194 = _1191 * (_1155.z + (-0.5));
        float _1201 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1162.x + (-0.5));
        float _1203 = _1201 * (_1162.y + (-0.5));
        float _1204 = _1201 * (_1162.z + (-0.5));
        float _1211 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1169.x + (-0.5));
        float _1213 = _1211 * (_1169.y + (-0.5));
        float _1214 = _1211 * (_1169.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_568, _569, _570), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3747 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1245 + 1.0))) + _1250) * _1215;
        float _1260 = _1183 * 0.5;
        float _1261 = _1193 * 0.5;
        float _1262 = _1203 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_568, _569, _570), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3780 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1287 + 1.0))) + _1292) * _1216;
        float _1302 = _1184 * 0.5;
        float _1303 = _1194 * 0.5;
        float _1304 = _1204 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_568, _569, _570), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3813 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1329 + 1.0))) + _1334) * _1217;
        _1351 = _1184;
        _1352 = _1183;
        _1353 = _1182;
        _1354 = _1194;
        _1355 = _1193;
        _1356 = _1192;
        _1357 = _1204;
        _1358 = _1203;
        _1359 = _1202;
        _1360 = _1217;
        _1361 = _1216;
        _1362 = _1215;
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1042;
        _1352 = _1042;
        _1353 = _1042;
        _1354 = _1042;
        _1355 = _1042;
        _1356 = _1042;
        _1357 = _1042;
        _1358 = _1042;
        _1359 = _1042;
        _1360 = _1042;
        _1361 = _1042;
        _1362 = _1042;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1054)) + _1054;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1398 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1375));
    float _1419 = _671 * 0.5;
    float _1420 = _672 * 0.5;
    float _1421 = _673 * 0.5;
    float _1422 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1425 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1428 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1462;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1435 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1041, _1045, _1048, _1051));
        float _1439 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1443 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1450 = dot(vec4(cbModelParam._m0[39u]), vec4(_1419, _1420, _1421, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1473;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1464 = dot(vec4(cbModelParam._m0[40u]), vec4(_1419, _1420, _1421, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1477 = (_1473 * cbModelParam._m0[1u].x) + (_1462 * (1.0 - cbModelParam._m0[1u].x));
    float _1487 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _572);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1487 : min(cbModelParam._m0[25u].z, _1487));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1535 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1539 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1543 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1546 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1549 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1552 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1580;
        if (_1546 > 0.0)
        {
            _1580 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1580 = frontier_phi_14_12_ladder;
        }
        float _1803;
        if (_1549 > 0.0)
        {
            _1803 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1803 = frontier_phi_23_19_ladder;
        }
        float _2038;
        if (_1552 > 0.0)
        {
            _2038 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2038 = frontier_phi_34_30_ladder;
        }
        float _2040 = isnan(_1803) ? _1580 : (isnan(_1580) ? _1803 : min(_1580, _1803));
        float _2041 = isnan(_2038) ? _2040 : (isnan(_2040) ? _2038 : min(_2040, _2038));
        float _2045 = (_2041 * _1546) + _1535;
        float _2046 = (_2041 * _1549) + _1539;
        float _2047 = (_2041 * _1552) + _1543;
        float _2048 = _2041 * 9.9999997473787516355514526367188e-05;
        float _2050 = (-1.0) - _2048;
        float _2052 = _2048 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2047 > _2052) || ((_2047 < _2050) || ((_2046 > _2052) || ((_2046 < _2050) || ((_2045 < _2050) || (_2045 > _2052))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2047, cbModelParam._m0[9u].z, fma(_2046, cbModelParam._m0[9u].y, _2045 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2047, cbModelParam._m0[10u].z, fma(_2046, cbModelParam._m0[10u].y, _2045 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2047, cbModelParam._m0[11u].z, fma(_2046, cbModelParam._m0[11u].y, _2045 * cbModelParam._m0[11u].x))), _1488);
            frontier_phi_13_34_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1568 = frontier_phi_13_34_ladder_2;
        _1570 = frontier_phi_13_34_ladder_1;
        _1572 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1488);
        _1568 = _1556.x * cbModelParam._m0[1u].y;
        _1570 = _1556.y * cbModelParam._m0[1u].y;
        _1572 = _1556.z * cbModelParam._m0[1u].y;
    }
    float _1576 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _572);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1576 : min(cbModelParam._m0[25u].w, _1576));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1632 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1636 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1640 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1643 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1646 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1649 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1808;
        if (_1643 > 0.0)
        {
            _1808 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1808 = frontier_phi_25_21_ladder;
        }
        float _2065;
        if (_1646 > 0.0)
        {
            _2065 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2065 = frontier_phi_36_32_ladder;
        }
        float _2522;
        if (_1649 > 0.0)
        {
            _2522 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2522 = frontier_phi_47_42_ladder;
        }
        float _2524 = isnan(_2065) ? _1808 : (isnan(_1808) ? _2065 : min(_1808, _2065));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1643) + _1632;
        float _2530 = (_2525 * _1646) + _1636;
        float _2531 = (_2525 * _1649) + _1640;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1577);
            frontier_phi_22_47_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1668 = frontier_phi_22_47_ladder_2;
        _1670 = frontier_phi_22_47_ladder_1;
        _1672 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1577);
        _1668 = _1652.x * cbModelParam._m0[1u].z;
        _1670 = _1652.y * cbModelParam._m0[1u].z;
        _1672 = _1652.z * cbModelParam._m0[1u].z;
    }
    float _1684 = ((((1.0 - _699) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_699 * _687)) * _663;
    float _1685 = _1684 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1686 = _1684 * ((cbModelParam._m0[1u].w * (_1670 - _1570)) + _1570);
    float _1687 = _1684 * ((cbModelParam._m0[1u].w * (_1672 - _1572)) + _1572);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, _1685 * cbSceneParam._m0[91u].x));
    float _1707 = _598 / cbSceneParam._m0[86u].x;
    float _1715 = (cbSceneParam._m0[88u].y * (1.0 - _572)) + cbSceneParam._m0[88u].z;
    float _3939 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1717 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 5.0;
    float _1722 = (_686 * cbMtdParam._m0[13u].z) * dot(vec3(_568, _569, _570), vec3(1.0, 0.0, 0.0));
    vec4 _1732 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1722 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1722 + _1707) * cbSceneParam._m0[86u].x, _599), _1717).w) + _1707) * cbSceneParam._m0[86u].x, _599), _1717);
    float _1748 = 1.0 - _1732.w;
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1766 = _663 + (-1.0);
    float _1769 = (cbLight._m0[_1761].x * _1766) + 1.0;
    float _1770 = (cbLight._m0[_1761].y * _1766) + 1.0;
    uint _1772 = _1760 + 4u;
    float _1783 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_568, _569, _570));
    float _1786 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1787 = _1760 + 5u;
    uint _1793 = _1760 | 1u;
    float _1799 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_568, _569, _570));
    float _1802 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    float _1867;
    float _1868;
    float _1869;
    if (_573 == 0.0)
    {
        float _3960 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _3971 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1821 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
        float _1823 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
        _1867 = ((cbLight._m0[_1787].x * _1802) * _1823) + ((cbLight._m0[_1772].x * _1786) * _1821);
        _1868 = ((_1802 * cbLight._m0[_1787].y) * _1823) + ((_1786 * cbLight._m0[_1772].y) * _1821);
        _1869 = ((_1802 * cbLight._m0[_1787].z) * _1823) + ((_1786 * cbLight._m0[_1772].z) * _1821);
    }
    else
    {
        float _1833 = _1783 + _573;
        float _1836 = (_573 * 2.0) + 1.0;
        float _1837 = (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) / _1836;
        float _1844 = _1799 + _573;
        float _1846 = (isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) / _1836;
        _1867 = (((_1846 * cbLight._m0[_1787].x) * _1802) + ((_1837 * cbLight._m0[_1772].x) * _1786)) * 0.3183098733425140380859375;
        _1868 = (((_1846 * cbLight._m0[_1787].y) * _1802) + ((_1837 * cbLight._m0[_1772].y) * _1786)) * 0.3183098733425140380859375;
        _1869 = (((_1846 * cbLight._m0[_1787].z) * _1802) + ((_1837 * cbLight._m0[_1772].z) * _1786)) * 0.3183098733425140380859375;
    }
    uint _1873 = _1760 + 8u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _572) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1760].x + _285;
    float _1892 = cbLight._m0[_1760].y + _286;
    float _1893 = cbLight._m0[_1760].z + _287;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1760].xyz));
    float _3992 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1905 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1906 = dot(vec3(_568, _569, _570), vec3(_1898, _1899, _1900));
    float _4014 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1898, _1899, _1900));
    float _4025 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1890 * _1890;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1905 * ((_1904 * _1930) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _1930) + _1890) * _1904))) * _1904;
    float _4036 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    uint _1956 = _1760 + 9u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _572) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1793].x + _285;
    float _1973 = cbLight._m0[_1793].y + _286;
    float _1974 = cbLight._m0[_1793].z + _287;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1793].xyz));
    float _4047 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1986 = dot(vec3(_568, _569, _570), vec3(_1979, _1980, _1981));
    float _4058 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1979, _1980, _1981));
    float _4069 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1971 * _1971;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2008 = 1.0 - _1971;
    float _2018 = (0.5 / (((_1905 * ((_1985 * _2008) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2008) + _1971) * _1985))) * _1985;
    float _4080 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    float _2030 = (((_2007 * cbLight._m0[_1956].x) * _2020) * _1802) + (((_1929 * cbLight._m0[_1873].x) * _1943) * _1786);
    float _2031 = (((_2007 * cbLight._m0[_1956].y) * _2020) * _1802) + (((_1929 * cbLight._m0[_1873].y) * _1943) * _1786);
    float _2032 = (((_2007 * cbLight._m0[_1956].z) * _2020) * _1802) + (((_1929 * cbLight._m0[_1873].z) * _1943) * _1786);
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_1758.y == 0u)
    {
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2109;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2109;
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2109;
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.x;
        uint _2136 = uint((float(_2124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2125))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2125)));
        float _2146 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2147 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        uint _2150 = uint(isnan(14.0) ? _2147 : (isnan(_2147) ? 14.0 : min(_2147, 14.0)));
        uvec4 _2155 = texelFetch(g_lightClusterGridBuffer, int(((_2150 << 2u) + (_2136 << 6u)) >> 2u));
        uint _2156 = _2155.x;
        uint _2157 = _2124.z;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((((1u << ((_2157 >> 4u) & 15u)) + 4294967295u) & _2156) == 0u) || ((_2157 & 240u) == 0u))
        {
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
        }
        else
        {
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            uint _2586 = 0u;
            uint _2595;
            bool _2596;
            for (;;)
            {
                _2595 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                _2596 = _2595 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2596)
                {
                    frontier_phi_56_pred = _2580;
                    frontier_phi_56_pred_1 = _2585;
                    frontier_phi_56_pred_2 = _2584;
                    frontier_phi_56_pred_3 = _2583;
                    frontier_phi_56_pred_4 = _2582;
                    frontier_phi_56_pred_5 = _2581;
                }
                else
                {
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    uint _2731;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2595;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2735 = uint(findLSB(_2731)) + (_2586 << 5u);
                        uint _2732 = (_2731 + 4294967295u) & _2731;
                        uint _2737 = _2735 * 48u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2757 = (_2735 * 48u) + 4u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        float _2771 = _2770.x;
                        float _2772 = _2770.y;
                        float _2773 = _2770.z;
                        uint _2776 = (_2735 * 48u) + 8u;
                        vec3 _2787 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x));
                        uint _2792 = (_2735 * 48u) + 12u;
                        vec2 _2800 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x));
                        float _2806 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
                        float _2807 = _2806 * _2110;
                        float _2808 = _2806 * _2111;
                        float _2809 = _2806 * _2112;
                        float _2810 = _2751.x - _2110;
                        float _2811 = _2751.y - _2111;
                        float _2812 = _2751.z - _2112;
                        float _2813 = dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812));
                        float _2816 = inversesqrt(_2813);
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2820 = dot(vec3(_619, _622, _625), vec3(_2817, _2818, _2819));
                        float _2825 = 1.0 - (_2813 * _2751.w);
                        float _4101 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2827 = sqrt(_2813) * _2770.w;
                        float _2830 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                        float _2831 = _2830 * _2830;
                        float _2832 = 1.0 - _2831;
                        float _2834 = (_2832 * _2832) * _573;
                        float _2837 = ((_2832 * _2820) + _2831) + _2834;
                        float _2842 = _2827 * _2827;
                        float _2846 = ((isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))) * _2826) / (((_2834 * 2.0) + 1.0) * ((_2842 * 0.699999988079071044921875) + 1.0));
                        float _2850 = dot(vec3(_2817, _2818, _2819), vec3(_2807, _2808, _2809));
                        float _4117 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2857 = dot(vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809), vec3(_619, _622, _625)) + 1.0;
                        float _2859 = (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) * 0.5;
                        float _2867 = ((_2859 * _2859) * _2800.x) * exp2((_2800.y * 32.0) * log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))));
                        float _2869 = _573 / (_573 + 1.0);
                        float _2885 = (-0.0) - _2110;
                        float _2886 = (-0.0) - _2111;
                        float _2887 = (-0.0) - _2112;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2902 = exp2(log2(1.0 / ((_2842 * 3.5) + 5.0)) * 0.25);
                        float _2903 = 1.0 - _687;
                        float _2910 = sqrt(1.0 - ((1.0 - (_2903 * _2903)) * (1.0 - (_2902 * _2902))));
                        float _2911 = _2910 * _2910;
                        float _2912 = _2911 * _2911;
                        float _2913 = _2892 + _2817;
                        float _2914 = _2893 + _2818;
                        float _2915 = _2894 + _2819;
                        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
                        float _2923 = dot(vec3(_619, _622, _625), vec3(_2892, _2893, _2894));
                        float _4133 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2927 = dot(vec3(_619, _622, _625), vec3(_2919 * _2913, _2919 * _2914, _2919 * _2915));
                        float _4144 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2934 = ((_2930 * _2930) * (_2912 + (-1.0))) + 1.0;
                        float _2935 = _2830 * _2911;
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2820) + _2936;
                        float _4155 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2941 = 1.0 - _2911;
                        float _2951 = (0.5 / (((_2940 * ((_2926 * _2941) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2940 * _2941) + _2911) * _2926))) * _2940;
                        float _4166 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2962 = (((_2912 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2934 * _2934) * ((_2842 * 2.1991131305694580078125) + 3.141590118408203125))) * _2826;
                        _2660 = (((((_2771 * 0.3183098733425140380859375) * _2869) * _2867) + _2771) * _2846) + _2728;
                        _2661 = (((((_2772 * 0.3183098733425140380859375) * _2869) * _2867) + _2772) * _2846) + _2729;
                        _2662 = (((((_2773 * 0.3183098733425140380859375) * _2869) * _2867) + _2773) * _2846) + _2730;
                        _2657 = (_2962 * _2787.x) + _2725;
                        _2658 = (_2962 * _2787.y) + _2726;
                        _2659 = (_2962 * _2787.z) + _2727;
                        if (_2732 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2732;
                        }
                    }
                    frontier_phi_56_pred = _2657;
                    frontier_phi_56_pred_1 = _2662;
                    frontier_phi_56_pred_2 = _2661;
                    frontier_phi_56_pred_3 = _2660;
                    frontier_phi_56_pred_4 = _2659;
                    frontier_phi_56_pred_5 = _2658;
                }
                _2380 = frontier_phi_56_pred;
                _2390 = frontier_phi_56_pred_1;
                _2388 = frontier_phi_56_pred_2;
                _2386 = frontier_phi_56_pred_3;
                _2384 = frontier_phi_56_pred_4;
                _2382 = frontier_phi_56_pred_5;
                uint _2587 = _2586 + 1u;
                if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2580 = _2380;
                    _2581 = _2382;
                    _2582 = _2384;
                    _2583 = _2386;
                    _2584 = _2388;
                    _2585 = _2390;
                    _2586 = _2587;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
        }
        uvec4 _2393 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2394 = _2393.z;
        uint _2396 = (_2394 >> 8u) & 15u;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((4294967295u << _2396) & _2156) == 0u)
        {
            _2548 = _2379;
            _2550 = _2381;
            _2552 = _2383;
            _2554 = _2385;
            _2556 = _2387;
            _2558 = _2389;
        }
        else
        {
            float _2573 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _2574 = _2573 * _2110;
            float _2575 = _2573 * _2111;
            float _2576 = _2573 * _2112;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2396 < ((_2394 >> 12u) & 15u))
            {
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2708 = _2379;
                float _2709 = _2381;
                float _2710 = _2383;
                float _2711 = _2385;
                float _2712 = _2387;
                float _2713 = _2389;
                uint _2714 = _2396;
                uint _2723;
                bool _2724;
                for (;;)
                {
                    _2723 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                    _2724 = _2723 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2724)
                    {
                        frontier_phi_62_pred = _2713;
                        frontier_phi_62_pred_1 = _2712;
                        frontier_phi_62_pred_2 = _2711;
                        frontier_phi_62_pred_3 = _2710;
                        frontier_phi_62_pred_4 = _2709;
                        frontier_phi_62_pred_5 = _2708;
                    }
                    else
                    {
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _2980 = _2708;
                        float _2981 = _2709;
                        float _2982 = _2710;
                        float _2983 = _2711;
                        float _2984 = _2712;
                        float _2985 = _2713;
                        uint _2986 = _2723;
                        uint _2987;
                        vec4 _3012;
                        float _3013;
                        vec4 _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        vec3 _3043;
                        vec2 _3052;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _2997 = ((_2714 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2986));
                            _2987 = (_2986 + 4294967295u) & _2986;
                            uint _2999 = _2997 * 40u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            _3013 = _3012.w;
                            uint _3015 = (_2997 * 40u) + 4u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.x;
                            _3030 = _3028.y;
                            _3031 = _3028.z;
                            uint _3033 = (_2997 * 40u) + 8u;
                            _3043 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x));
                            uint _3045 = (_2997 * 40u) + 12u;
                            _3052 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x));
                            uint _3054 = (_2997 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_2997 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_2997 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_2997 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2112, _3118.z, fma(_2111, _3118.y, _3118.x * _2110)) + _3118.w;
                            _3131 = !((fma(_2112, _3099.z, fma(_2111, _3099.y, _3099.x * _2110)) + _3099.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3131)
                            {
                                float _3157 = _3012.x - _2110;
                                float _3158 = _3012.y - _2111;
                                float _3159 = _3012.z - _2112;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3013 * _3013));
                                float _4177 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3175 = sqrt(_3160) * _3028.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3179 = 1.0 - _3178;
                                float _3181 = (_3179 * _3179) * _573;
                                float _3184 = ((_3179 * dot(vec3(_3164, _3165, _3166), vec3(_619, _622, _625))) + _3178) + _3181;
                                float _3189 = _3175 * _3175;
                                float _3194 = (fma(_2112, _3067.z, fma(_2111, _3067.y, _3067.x * _2110)) + _3067.w) / _3130;
                                float _3195 = (fma(_2112, _3083.z, fma(_2111, _3083.y, _3083.x * _2110)) + _3083.w) / _3130;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4193 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3171) / (((_3181 * 2.0) + 1.0) * ((_3189 * 0.699999988079071044921875) + 1.0)));
                                float _3202 = (-0.0) - _2574;
                                float _3203 = (-0.0) - _2575;
                                float _3204 = (-0.0) - _2576;
                                float _3205 = dot(vec3(_3164, _3165, _3166), vec3(_2574, _2575, _2576));
                                float _4204 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3212 = dot(vec3(_3202, _3203, _3204), vec3(_619, _622, _625)) + 1.0;
                                float _3214 = (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * 0.5;
                                float _3221 = ((_3214 * _3214) * _3052.x) * exp2((_3052.y * 32.0) * log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))));
                                float _3223 = _573 / (_573 + 1.0);
                                float _3244 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _687;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3164 - _2574;
                                float _3256 = _3165 - _2575;
                                float _3257 = _3166 - _2576;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_619, _622, _625), vec3(_3202, _3203, _3204));
                                float _4220 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3269 = dot(vec3(_619, _622, _625), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4231 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3177 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_619, _622, _625), vec3(_3164, _3165, _3166))) + _3278;
                                float _4242 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4253 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3200 * _3171) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) / ((_3276 * _3276) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3031 * 0.3183098733425140380859375) * _3223) * _3221) + _3031) * _3201;
                                frontier_phi_68_pred_1 = ((((_3030 * 0.3183098733425140380859375) * _3223) * _3221) + _3030) * _3201;
                                frontier_phi_68_pred_2 = ((((_3029 * 0.3183098733425140380859375) * _3223) * _3221) + _3029) * _3201;
                                frontier_phi_68_pred_3 = _3306 * _3043.z;
                                frontier_phi_68_pred_4 = _3306 * _3043.y;
                                frontier_phi_68_pred_5 = _3306 * _3043.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_68_pred;
                            _3314 = frontier_phi_68_pred_1;
                            _3313 = frontier_phi_68_pred_2;
                            _3312 = frontier_phi_68_pred_3;
                            _3311 = frontier_phi_68_pred_4;
                            _3310 = frontier_phi_68_pred_5;
                            _2970 = _3313 + _2983;
                            _2971 = _3314 + _2984;
                            _2972 = _3315 + _2985;
                            _2967 = _3310 + _2980;
                            _2968 = _3311 + _2981;
                            _2969 = _3312 + _2982;
                            if (_2987 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2987;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2972;
                        frontier_phi_62_pred_1 = _2971;
                        frontier_phi_62_pred_2 = _2970;
                        frontier_phi_62_pred_3 = _2969;
                        frontier_phi_62_pred_4 = _2968;
                        frontier_phi_62_pred_5 = _2967;
                    }
                    _2559 = frontier_phi_62_pred;
                    _2557 = frontier_phi_62_pred_1;
                    _2555 = frontier_phi_62_pred_2;
                    _2553 = frontier_phi_62_pred_3;
                    _2551 = frontier_phi_62_pred_4;
                    _2549 = frontier_phi_62_pred_5;
                    uint _2715 = _2714 + 1u;
                    if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2708 = _2549;
                        _2709 = _2551;
                        _2710 = _2553;
                        _2711 = _2555;
                        _2712 = _2557;
                        _2713 = _2559;
                        _2714 = _2715;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2559;
                frontier_phi_49_50_ladder_1 = _2555;
                frontier_phi_49_50_ladder_2 = _2557;
                frontier_phi_49_50_ladder_3 = _2553;
                frontier_phi_49_50_ladder_4 = _2551;
                frontier_phi_49_50_ladder_5 = _2549;
            }
            else
            {
                frontier_phi_49_50_ladder = _2389;
                frontier_phi_49_50_ladder_1 = _2385;
                frontier_phi_49_50_ladder_2 = _2387;
                frontier_phi_49_50_ladder_3 = _2383;
                frontier_phi_49_50_ladder_4 = _2381;
                frontier_phi_49_50_ladder_5 = _2379;
            }
            _2548 = frontier_phi_49_50_ladder_5;
            _2550 = frontier_phi_49_50_ladder_4;
            _2552 = frontier_phi_49_50_ladder_3;
            _2554 = frontier_phi_49_50_ladder_1;
            _2556 = frontier_phi_49_50_ladder_2;
            _2558 = frontier_phi_49_50_ladder;
        }
        float _2563 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2169 = (_2563 * _2554) + _1867;
        _2171 = (_2563 * _2556) + _1868;
        _2173 = (_2563 * _2558) + _1869;
        _2175 = ((_2548 * 0.039999999105930328369140625) * _2563) + _2030;
        _2177 = ((_2550 * 0.039999999105930328369140625) * _2563) + _2031;
        _2179 = ((_2552 * 0.039999999105930328369140625) * _2563) + _2032;
    }
    else
    {
        _2169 = _1867;
        _2171 = _1868;
        _2173 = _1869;
        _2175 = _2030;
        _2177 = _2031;
        _2179 = _2032;
    }
    float _2193 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2194 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2195 = cbSceneParam._m0[86u].x * (_1707 + ((_686 * cbMtdParam._m0[13u].y) * dot(vec3(_568, _569, _570), vec3(_203, _204, _205))));
    float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
    float _2197 = isnan(_2194) ? _599 : (isnan(_599) ? _2194 : min(_599, _2194));
    vec4 _2199 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2196, _2197), 0.0);
    float _2201 = _2199.x;
    bool _2222 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2201)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2201))) > _592;
    float _2223 = _2222 ? _2196 : _598;
    float _2224 = _2222 ? _2197 : _599;
    vec4 _2226 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2223, _2224));
    vec4 _2231 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2223, _2224));
    float _2233 = _2231.x;
    float _2253 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2233)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2233))) - _592;
    bool _2263 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2267 = (isnan(_2253) ? 0.0 : (isnan(0.0) ? _2253 : max(0.0, _2253))) * (-1.44269502162933349609375);
    float _4284 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4295 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4306 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _2294 = 0.959999978542327880859375 - (exp2(log2(1.0 - _678) * 5.0) * 0.959999978542327880859375);
    float _2297 = ((_2226.x * _2294) * exp2(_2267 * (_2263 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2300 = ((_2226.y * _2294) * exp2(_2267 * (_2263 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2303 = ((_2226.z * _2294) * exp2(_2267 * (_2263 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2325 = _598 / cbSceneParam._m0[86u].x;
    float _2326 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _592 : (isnan(_592) ? cbSceneParam._m0[77u].w : min(_592, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_592 > cbSceneParam._m0[78u].w)
    {
        float _2404 = isnan(_592) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _592 : min(cbSceneParam._m0[80u].w, _592));
        float _2405 = _2404 / _592;
        float _2416 = _2405 * _273;
        float _2417 = _274 * _2405;
        float _2418 = (-0.0) - _2417;
        float _2419 = _2405 * _275;
        float _2421 = (cbSceneParam._m0[77u].w * _2418) / _2404;
        float _2422 = _2421 + cbSceneParam._m0[79u].w;
        float _2423 = cbSceneParam._m0[79u].w - _2417;
        float _2429 = sqrt(((_2416 * _2416) + (_2417 * _2417)) + (_2419 * _2419));
        float _2432 = (1.0 - (cbSceneParam._m0[77u].w / _2404)) * _2429;
        float _2437 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2418 - _2421) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2422 > 0.0) ? exp2(_2437 * _2422) : (2.0 - exp2(_2438 * _2422))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2432;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : max(_2422, _2423));
            float _2611 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : min(_2422, _2423));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2670 = ((abs(_2429 / _2418) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2437 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2437 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2438 * _2620) - exp2(_2438 * _2621)) * _2609))) + (_2432 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2345);
        _2440 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2442 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2444 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2446 = _2681 * _2345;
    }
    else
    {
        _2440 = _2342;
        _2442 = _2343;
        _2444 = _2344;
        _2446 = _2345;
    }
    bool _2458 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2459 = log2(_2446);
    float _2466 = exp2(_2459 * cbSceneParam._m0[78u].x) * ((_2297 + (((((_1684 * _1732.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1477) * _1748)) + _2175) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2169 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _663))) - _2297) * cbMtdParam._m0[15u].x));
    float _2467 = exp2(_2459 * cbSceneParam._m0[78u].y) * ((_2300 + (((((_1684 * _1732.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1477) * _1748)) + _2177) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2171 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _663))) - _2300) * cbMtdParam._m0[15u].x));
    float _2468 = exp2(_2459 * cbSceneParam._m0[78u].z) * ((_2303 + (((((_1684 * _1732.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1477) * _1748)) + _2179) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2173 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _663))) - _2303) * cbMtdParam._m0[15u].x));
    vec4 _2476 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_598, _599));
    float _2478 = _2476.x;
    float _2499 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2478)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2478))) - _592) * cbMtdParam._m0[14u].z;
    float _4357 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (cbInstanceData._m0[_638 + 6u].w * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)));
    float _2510 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2510 * (_2458 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
    SV_Target.y = _2510 * (_2458 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
    SV_Target.z = _2510 * (_2458 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.w = _2501;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2501;
}


