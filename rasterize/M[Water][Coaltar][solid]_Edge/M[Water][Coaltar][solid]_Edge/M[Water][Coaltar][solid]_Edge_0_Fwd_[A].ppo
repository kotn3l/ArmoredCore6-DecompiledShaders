#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1023;
float _3475;
float _3476;
float _3477;
float _3478;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _205 = _204 * _197;
    float _206 = _204 * _198;
    float _207 = _204 * _199;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _285 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _286 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _297 = dot(vec3(_275, _276, _277), vec3(_205, _206, _207));
    float _300 = dot(vec3(_275, _276, _277), vec3(_219, _220, _221));
    float _303 = dot(vec3(_275, _276, _277), vec3(_212, _213, _214));
    float _309 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _333 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _353 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_297 * cbMtdParam._m0[12u].x) * _309) * _333) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_300 * cbMtdParam._m0[12u].x) * _309) * _333) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _376 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _377 = _376 * _275;
    float _378 = _376 * _276;
    float _379 = _376 * _277;
    float _383 = dot(vec4(_377, _378, _379, 0.0), vec4(_212, _213, _214, 0.0)) - cbMtdParam._m0[12u].w;
    float _3487 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _390 = exp2(log2(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _405 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _353.x) * cbMtdParam._m0[9u].x) * ((_390 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _409 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _353.y) * cbMtdParam._m0[9u].y) * ((_390 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _413 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _353.z) * cbMtdParam._m0[9u].z) * ((_390 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _425 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _429 = cbMtdParam._m0[12u].z * _425.x;
    vec4 _442 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    float _450 = (_442.x * 2.0) + (-1.0);
    float _451 = (_442.y * 2.0) + (-1.0);
    float _452 = dot(vec2(_450, _451), vec2(_450, _451));
    float _3503 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    float _462 = cbMtdParam._m0[14u].w + _442.z;
    vec4 _474 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _285) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _286) + cbTextureTilingScale._m0[1u].w));
    float _478 = cbMtdParam._m0[13u].w * _474.x;
    float _496 = fma(_457, _212, fma(_451, _219, _450 * _205));
    float _499 = fma(_457, _213, fma(_451, _220, _450 * _206));
    float _502 = fma(_457, _214, fma(_451, _221, _450 * _207));
    float _506 = inversesqrt(dot(vec3(_496, _499, _502), vec3(_496, _499, _502)));
    float _507 = _506 * _496;
    float _508 = _506 * _499;
    float _509 = _506 * _502;
    float _3514 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3525 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _511 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _512 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3541 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3552 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3563 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _536 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _538 = _536.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _702 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _708 = (cbMatDynParam._m0[5u].x * _702) + cbMatDynParam._m0[5u].y;
        float _3574 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _713 = (cbMatDynParam._m0[5u].z * _702) + cbMatDynParam._m0[5u].w;
        float _3585 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) - _709)) + _709) < ((_538 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _571 = fma(_509, cbSceneParam._m0[5u].z, fma(_508, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _507));
    float _574 = fma(_509, cbSceneParam._m0[6u].z, fma(_508, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _507));
    float _577 = fma(_509, cbSceneParam._m0[7u].z, fma(_508, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _507));
    uint _590 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _590 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3596 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _615 = _612.x * TEXCOORD.z;
    float _616 = dot(vec3(_507, _508, _509), vec3(_377, _378, _379));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _507) - _377;
    float _624 = (_619 * _508) - _378;
    float _625 = (_619 * _509) - _379;
    float _629 = abs(dot(vec3(_377, _378, _379), vec3(_507, _508, _509)));
    float _3629 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _638 = 10.0 / (_531 + 10.0);
    float _639 = sqrt(_511);
    float _651 = exp2((_639 * 5.0) * log2(1.0 - (_630 * 0.999000012874603271484375))) / (4.0 - (_639 * 3.0));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1022;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _747 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _751 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _755 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _780 = _683 + _507;
        float _781 = _687 + _508;
        float _782 = _691 + _509;
        float _792 = fma(_782, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780)) - _747;
        float _793 = fma(_782, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780)) - _751;
        float _794 = fma(_782, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780)) - _755;
        float _798 = inversesqrt(dot(vec3(_792, _793, _794), vec3(_792, _793, _794)));
        float _811 = ((_798 * _792) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_747 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_798 * _793) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_751 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_798 * _794) / cbModelParam._m0[34u].z) + ((((((_755 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        float _850 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_816.x + (-0.5));
        float _852 = _850 * (_816.y + (-0.5));
        float _853 = _850 * (_816.z + (-0.5));
        float _860 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_823.x + (-0.5));
        float _862 = _860 * (_823.y + (-0.5));
        float _863 = _860 * (_823.z + (-0.5));
        float _870 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_830.x + (-0.5));
        float _872 = _870 * (_830.y + (-0.5));
        float _873 = _870 * (_830.z + (-0.5));
        float _880 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_837.x + (-0.5));
        float _882 = _880 * (_837.y + (-0.5));
        float _883 = _880 * (_837.z + (-0.5));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = _851 * 0.5;
        float _888 = _861 * 0.5;
        float _889 = _871 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _904 = (dot(vec3(_507, _508, _509), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _914 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3677 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_916 + 1.0))) + _921) * _884;
        float _931 = _852 * 0.5;
        float _932 = _862 * 0.5;
        float _933 = _872 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_507, _508, _509), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3710 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_958 + 1.0))) + _963) * _885;
        float _973 = _853 * 0.5;
        float _974 = _863 * 0.5;
        float _975 = _873 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_507, _508, _509), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3743 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1000 + 1.0))) + _1005) * _886;
        _1022 = _853;
        _1024 = _852;
        _1025 = _851;
        _1026 = _863;
        _1027 = _862;
        _1028 = _861;
        _1029 = _873;
        _1030 = _872;
        _1031 = _871;
        _1032 = _886;
        _1033 = _885;
        _1034 = _884;
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
    }
    else
    {
        _1022 = _1023;
        _1024 = _1023;
        _1025 = _1023;
        _1026 = _1023;
        _1027 = _1023;
        _1028 = _1023;
        _1029 = _1023;
        _1030 = _1023;
        _1031 = _1023;
        _1032 = _1023;
        _1033 = _1023;
        _1034 = _1023;
        _1035 = 0.0;
        _1036 = 0.0;
        _1037 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1070 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1074 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1097 = _683 + _507;
        float _1098 = _687 + _508;
        float _1099 = _691 + _509;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_507, _508, _509), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3806 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_507, _508, _509), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3839 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_507, _508, _509), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3872 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1023;
        _1336 = _1023;
        _1337 = _1023;
        _1338 = _1023;
        _1339 = _1023;
        _1340 = _1023;
        _1341 = _1023;
        _1342 = _1023;
        _1343 = _1023;
        _1344 = _1023;
        _1345 = _1023;
        _1346 = _1023;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1035)) + _1035;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1036)) + _1036;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1037)) + _1037;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _623 * 0.5;
    float _1404 = _624 * 0.5;
    float _1405 = _625 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1022, _1026, _1029, _1032));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _511);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1519 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1523 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1527 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1530 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1533 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1536 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1564;
        if (_1530 > 0.0)
        {
            _1564 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1564 = frontier_phi_17_15_ladder;
        }
        float _1787;
        if (_1533 > 0.0)
        {
            _1787 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1787 = frontier_phi_26_22_ladder;
        }
        float _2022;
        if (_1536 > 0.0)
        {
            _2022 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2022 = frontier_phi_37_33_ladder;
        }
        float _2024 = isnan(_1787) ? _1564 : (isnan(_1564) ? _1787 : min(_1564, _1787));
        float _2025 = isnan(_2022) ? _2024 : (isnan(_2024) ? _2022 : min(_2024, _2022));
        float _2029 = (_2025 * _1530) + _1519;
        float _2030 = (_2025 * _1533) + _1523;
        float _2031 = (_2025 * _1536) + _1527;
        float _2032 = _2025 * 9.9999997473787516355514526367188e-05;
        float _2034 = (-1.0) - _2032;
        float _2036 = _2032 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2031 > _2036) || ((_2031 < _2034) || ((_2030 > _2036) || ((_2030 < _2034) || ((_2029 < _2034) || (_2029 > _2036))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2031, cbModelParam._m0[9u].z, fma(_2030, cbModelParam._m0[9u].y, _2029 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2031, cbModelParam._m0[10u].z, fma(_2030, cbModelParam._m0[10u].y, _2029 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2031, cbModelParam._m0[11u].z, fma(_2030, cbModelParam._m0[11u].y, _2029 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_16_37_ladder = _2354.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2354.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2354.x * cbModelParam._m0[1u].y;
        }
        _1552 = frontier_phi_16_37_ladder_2;
        _1554 = frontier_phi_16_37_ladder_1;
        _1556 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1472);
        _1552 = _1540.x * cbModelParam._m0[1u].y;
        _1554 = _1540.y * cbModelParam._m0[1u].y;
        _1556 = _1540.z * cbModelParam._m0[1u].y;
    }
    float _1560 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _511);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1560 : min(cbModelParam._m0[25u].w, _1560));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1630 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1633 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1792;
        if (_1627 > 0.0)
        {
            _1792 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1792 = frontier_phi_28_24_ladder;
        }
        float _2049;
        if (_1630 > 0.0)
        {
            _2049 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2049 = frontier_phi_39_35_ladder;
        }
        float _2514;
        if (_1633 > 0.0)
        {
            _2514 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2514 = frontier_phi_50_45_ladder;
        }
        float _2516 = isnan(_2049) ? _1792 : (isnan(_1792) ? _2049 : min(_1792, _2049));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1627) + _1616;
        float _2522 = (_2517 * _1630) + _1620;
        float _2523 = (_2517 * _1633) + _1624;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2524;
        float _2527 = _2524 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2523 > _2527) || ((_2523 < _2525) || ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 < _2525) || (_2521 > _2527))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2523, cbModelParam._m0[17u].z, fma(_2522, cbModelParam._m0[17u].y, _2521 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2523, cbModelParam._m0[18u].z, fma(_2522, cbModelParam._m0[18u].y, _2521 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2523, cbModelParam._m0[19u].z, fma(_2522, cbModelParam._m0[19u].y, _2521 * cbModelParam._m0[19u].x))), _1561);
            frontier_phi_25_50_ladder = _2660.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2660.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2660.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_25_50_ladder_2;
        _1654 = frontier_phi_25_50_ladder_1;
        _1656 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1561);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1668 = ((((1.0 - _651) * ((_639 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_651 * _639)) * _615;
    float _1669 = _1668 * ((cbModelParam._m0[1u].w * (_1652 - _1552)) + _1552);
    float _1670 = _1668 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1671 = _1668 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    float _1691 = _550 / cbSceneParam._m0[86u].x;
    float _1699 = (cbSceneParam._m0[88u].y * (1.0 - _511)) + cbSceneParam._m0[88u].z;
    float _3998 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1701 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 5.0;
    float _1706 = (_638 * cbMtdParam._m0[13u].z) * dot(vec3(_507, _508, _509), vec3(1.0, 0.0, 0.0));
    vec4 _1716 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1706 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1706 + _1691) * cbSceneParam._m0[86u].x, _551), _1701).w) + _1691) * cbSceneParam._m0[86u].x, _551), _1701);
    float _1732 = 1.0 - _1716.w;
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_590 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1750 = _615 + (-1.0);
    float _1753 = (cbLight._m0[_1745].x * _1750) + 1.0;
    float _1754 = (cbLight._m0[_1745].y * _1750) + 1.0;
    uint _1756 = _1744 + 4u;
    float _1767 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_507, _508, _509));
    float _1770 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1771 = _1744 + 5u;
    uint _1777 = _1744 | 1u;
    float _1783 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_507, _508, _509));
    float _1786 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    float _1851;
    float _1852;
    float _1853;
    if (_512 == 0.0)
    {
        float _4019 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _4030 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1805 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
        float _1807 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
        _1851 = ((cbLight._m0[_1771].x * _1786) * _1807) + ((cbLight._m0[_1756].x * _1770) * _1805);
        _1852 = ((_1786 * cbLight._m0[_1771].y) * _1807) + ((_1770 * cbLight._m0[_1756].y) * _1805);
        _1853 = ((_1786 * cbLight._m0[_1771].z) * _1807) + ((_1770 * cbLight._m0[_1756].z) * _1805);
    }
    else
    {
        float _1817 = _1767 + _512;
        float _1820 = (_512 * 2.0) + 1.0;
        float _1821 = (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) / _1820;
        float _1828 = _1783 + _512;
        float _1830 = (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) / _1820;
        _1851 = (((_1830 * cbLight._m0[_1771].x) * _1786) + ((_1821 * cbLight._m0[_1756].x) * _1770)) * 0.3183098733425140380859375;
        _1852 = (((_1830 * cbLight._m0[_1771].y) * _1786) + ((_1821 * cbLight._m0[_1756].y) * _1770)) * 0.3183098733425140380859375;
        _1853 = (((_1830 * cbLight._m0[_1771].z) * _1786) + ((_1821 * cbLight._m0[_1756].z) * _1770)) * 0.3183098733425140380859375;
    }
    uint _1857 = _1744 + 8u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _511) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1744].x + _377;
    float _1876 = cbLight._m0[_1744].y + _378;
    float _1877 = cbLight._m0[_1744].z + _379;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_507, _508, _509), vec3(cbLight._m0[_1744].xyz));
    float _4051 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1889 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1890 = dot(vec3(_507, _508, _509), vec3(_1882, _1883, _1884));
    float _4073 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1894 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1882, _1883, _1884));
    float _4084 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1898 = _1874 * _1874;
    float _1902 = ((_1893 * _1893) * (_1898 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1874;
    float _1925 = (0.5 / (((_1889 * ((_1888 * _1914) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1914) + _1874) * _1888))) * _1888;
    float _4095 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1898 / ((_1902 * _1902) * 3.141590118408203125));
    uint _1940 = _1744 + 9u;
    float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _511) * 0.949999988079071044921875);
    float _1955 = _1954 * _1954;
    float _1956 = cbLight._m0[_1777].x + _377;
    float _1957 = cbLight._m0[_1777].y + _378;
    float _1958 = cbLight._m0[_1777].z + _379;
    float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
    float _1963 = _1962 * _1956;
    float _1964 = _1962 * _1957;
    float _1965 = _1962 * _1958;
    float _1966 = dot(vec3(_507, _508, _509), vec3(cbLight._m0[_1777].xyz));
    float _4106 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1970 = dot(vec3(_507, _508, _509), vec3(_1963, _1964, _1965));
    float _4117 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1963, _1964, _1965));
    float _4128 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1955 * _1955;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1992 = 1.0 - _1955;
    float _2002 = (0.5 / (((_1889 * ((_1969 * _1992) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1992) + _1955) * _1969))) * _1969;
    float _4139 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    float _2014 = (((_1991 * cbLight._m0[_1940].x) * _2004) * _1786) + (((_1913 * cbLight._m0[_1857].x) * _1927) * _1770);
    float _2015 = (((_1991 * cbLight._m0[_1940].y) * _2004) * _1786) + (((_1913 * cbLight._m0[_1857].y) * _1927) * _1770);
    float _2016 = (((_1991 * cbLight._m0[_1940].z) * _2004) * _1786) + (((_1913 * cbLight._m0[_1857].z) * _1927) * _1770);
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    if (_1742.y == 0u)
    {
        float _2093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2093;
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2093;
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2093;
        uvec4 _2108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2109 = _2108.x;
        uint _2120 = uint((float(_2108.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2109))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2109)));
        float _2130 = (log2(_2096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2131 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        uint _2134 = uint(isnan(14.0) ? _2131 : (isnan(_2131) ? 14.0 : min(_2131, 14.0)));
        uvec4 _2139 = texelFetch(g_lightClusterGridBuffer, int(((_2134 << 2u) + (_2120 << 6u)) >> 2u));
        uint _2140 = _2139.x;
        uint _2141 = _2108.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2141 >> 4u) & 15u)) + 4294967295u) & _2140) == 0u) || ((_2141 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            uint _2578 = 0u;
            uint _2587;
            bool _2588;
            for (;;)
            {
                _2587 = texelFetch(g_lightClassification, int((((_2134 << 5u) + (_2120 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                _2588 = _2587 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2588)
                {
                    frontier_phi_61_pred = _2573;
                    frontier_phi_61_pred_1 = _2577;
                    frontier_phi_61_pred_2 = _2576;
                    frontier_phi_61_pred_3 = _2575;
                    frontier_phi_61_pred_4 = _2574;
                    frontier_phi_61_pred_5 = _2572;
                }
                else
                {
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    uint _2744;
                    _2738 = _2572;
                    _2739 = _2573;
                    _2740 = _2574;
                    _2741 = _2575;
                    _2742 = _2576;
                    _2743 = _2577;
                    _2744 = _2587;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    for (;;)
                    {
                        uint _2748 = uint(findLSB(_2744)) + (_2578 << 5u);
                        uint _2745 = (_2744 + 4294967295u) & _2744;
                        uint _2750 = _2748 * 48u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2770 = (_2748 * 48u) + 4u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        float _2784 = _2783.x;
                        float _2785 = _2783.y;
                        float _2786 = _2783.z;
                        uint _2789 = (_2748 * 48u) + 8u;
                        vec3 _2800 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x));
                        uint _2805 = (_2748 * 48u) + 12u;
                        vec2 _2813 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x));
                        float _2819 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
                        float _2820 = _2819 * _2094;
                        float _2821 = _2819 * _2095;
                        float _2822 = _2819 * _2096;
                        float _2823 = _2764.x - _2094;
                        float _2824 = _2764.y - _2095;
                        float _2825 = _2764.z - _2096;
                        float _2826 = dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825));
                        float _2829 = inversesqrt(_2826);
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2833 = dot(vec3(_571, _574, _577), vec3(_2830, _2831, _2832));
                        float _2838 = 1.0 - (_2826 * _2764.w);
                        float _4160 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2840 = sqrt(_2826) * _2783.w;
                        float _2843 = 1.39999997615814208984375 / (_2840 + 1.39999997615814208984375);
                        float _2844 = _2843 * _2843;
                        float _2845 = 1.0 - _2844;
                        float _2847 = (_2845 * _2845) * _512;
                        float _2850 = ((_2845 * _2833) + _2844) + _2847;
                        float _2855 = _2840 * _2840;
                        float _2860 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2839) / (((_2847 * 2.0) + 1.0) * ((_2855 * 0.699999988079071044921875) + 1.0));
                        float _2864 = dot(vec3(_2830, _2831, _2832), vec3(_2820, _2821, _2822));
                        float _4176 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2871 = dot(vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822), vec3(_571, _574, _577)) + 1.0;
                        float _2873 = (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * 0.5;
                        float _2881 = ((_2873 * _2873) * _2813.x) * exp2((_2813.y * 32.0) * log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))));
                        float _2883 = _512 / (_512 + 1.0);
                        float _2899 = (-0.0) - _2094;
                        float _2900 = (-0.0) - _2095;
                        float _2901 = (-0.0) - _2096;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2916 = exp2(log2(1.0 / ((_2855 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _639;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2906 + _2830;
                        float _2928 = _2907 + _2831;
                        float _2929 = _2908 + _2832;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_571, _574, _577), vec3(_2906, _2907, _2908));
                        float _4192 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2941 = dot(vec3(_571, _574, _577), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4203 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2843 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2833) + _2950;
                        float _4214 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4225 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2976 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2948 * _2948) * ((_2855 * 2.1991131305694580078125) + 3.141590118408203125))) * _2839;
                        _2668 = (((((_2784 * 0.3183098733425140380859375) * _2883) * _2881) + _2784) * _2860) + _2741;
                        _2669 = (((((_2785 * 0.3183098733425140380859375) * _2883) * _2881) + _2785) * _2860) + _2742;
                        _2670 = (((((_2786 * 0.3183098733425140380859375) * _2883) * _2881) + _2786) * _2860) + _2743;
                        _2665 = (_2976 * _2800.x) + _2738;
                        _2666 = (_2976 * _2800.y) + _2739;
                        _2667 = (_2976 * _2800.z) + _2740;
                        if (_2745 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2745;
                        }
                    }
                    frontier_phi_61_pred = _2666;
                    frontier_phi_61_pred_1 = _2670;
                    frontier_phi_61_pred_2 = _2669;
                    frontier_phi_61_pred_3 = _2668;
                    frontier_phi_61_pred_4 = _2667;
                    frontier_phi_61_pred_5 = _2665;
                }
                _2366 = frontier_phi_61_pred;
                _2374 = frontier_phi_61_pred_1;
                _2372 = frontier_phi_61_pred_2;
                _2370 = frontier_phi_61_pred_3;
                _2368 = frontier_phi_61_pred_4;
                _2364 = frontier_phi_61_pred_5;
                uint _2579 = _2578 + 1u;
                if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2572 = _2364;
                    _2573 = _2366;
                    _2574 = _2368;
                    _2575 = _2370;
                    _2576 = _2372;
                    _2577 = _2374;
                    _2578 = _2579;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((4294967295u << _2380) & _2140) == 0u)
        {
            _2540 = _2363;
            _2542 = _2365;
            _2544 = _2367;
            _2546 = _2369;
            _2548 = _2371;
            _2550 = _2373;
        }
        else
        {
            float _2565 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
            float _2566 = _2565 * _2094;
            float _2567 = _2565 * _2095;
            float _2568 = _2565 * _2096;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2721 = _2363;
                float _2722 = _2365;
                float _2723 = _2367;
                float _2724 = _2369;
                float _2725 = _2371;
                float _2726 = _2373;
                uint _2727 = _2380;
                uint _2736;
                bool _2737;
                for (;;)
                {
                    _2736 = texelFetch(g_lightClassification, int((((_2134 << 5u) + (_2120 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                    _2737 = _2736 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2737)
                    {
                        frontier_phi_72_pred = _2726;
                        frontier_phi_72_pred_1 = _2725;
                        frontier_phi_72_pred_2 = _2724;
                        frontier_phi_72_pred_3 = _2723;
                        frontier_phi_72_pred_4 = _2722;
                        frontier_phi_72_pred_5 = _2721;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3003 = _2721;
                        float _3004 = _2722;
                        float _3005 = _2723;
                        float _3006 = _2724;
                        float _3007 = _2725;
                        float _3008 = _2726;
                        uint _3009 = _2736;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        vec3 _3066;
                        vec2 _3075;
                        vec4 _3090;
                        vec4 _3106;
                        float _3153;
                        bool _3154;
                        for (;;)
                        {
                            uint _3020 = ((_2727 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3052 = _3051.x;
                            _3053 = _3051.y;
                            _3054 = _3051.z;
                            uint _3056 = (_3020 * 40u) + 8u;
                            _3066 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x));
                            uint _3068 = (_3020 * 40u) + 12u;
                            _3075 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x));
                            uint _3077 = (_3020 * 40u) + 16u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3093 = (_3020 * 40u) + 20u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3109 = (_3020 * 40u) + 24u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3128 = (_3020 * 40u) + 28u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3153 = fma(_2096, _3141.z, fma(_2095, _3141.y, _3141.x * _2094)) + _3141.w;
                            _3154 = !((fma(_2096, _3122.z, fma(_2095, _3122.y, _3122.x * _2094)) + _3122.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3154)
                            {
                                float _3180 = _3035.x - _2094;
                                float _3181 = _3035.y - _2095;
                                float _3182 = _3035.z - _2096;
                                float _3183 = dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182));
                                float _3186 = inversesqrt(_3183);
                                float _3187 = _3186 * _3180;
                                float _3188 = _3186 * _3181;
                                float _3189 = _3186 * _3182;
                                float _3193 = 1.0 - (_3183 / (_3036 * _3036));
                                float _4236 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3198 = sqrt(_3183) * _3051.w;
                                float _3200 = 1.39999997615814208984375 / (_3198 + 1.39999997615814208984375);
                                float _3201 = _3200 * _3200;
                                float _3202 = 1.0 - _3201;
                                float _3204 = (_3202 * _3202) * _512;
                                float _3207 = ((_3202 * dot(vec3(_3187, _3188, _3189), vec3(_571, _574, _577))) + _3201) + _3204;
                                float _3212 = _3198 * _3198;
                                float _3217 = (fma(_2096, _3090.z, fma(_2095, _3090.y, _3090.x * _2094)) + _3090.w) / _3153;
                                float _3218 = (fma(_2096, _3106.z, fma(_2095, _3106.y, _3106.x * _2094)) + _3106.w) / _3153;
                                float _3222 = 1.0 - dot(vec2(_3217, _3218), vec2(_3217, _3218));
                                float _4252 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3224 = _3223 * (((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3194) / (((_3204 * 2.0) + 1.0) * ((_3212 * 0.699999988079071044921875) + 1.0)));
                                float _3225 = (-0.0) - _2566;
                                float _3226 = (-0.0) - _2567;
                                float _3227 = (-0.0) - _2568;
                                float _3228 = dot(vec3(_3187, _3188, _3189), vec3(_2566, _2567, _2568));
                                float _4263 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3235 = dot(vec3(_3225, _3226, _3227), vec3(_571, _574, _577)) + 1.0;
                                float _3237 = (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * 0.5;
                                float _3244 = ((_3237 * _3237) * _3075.x) * exp2((_3075.y * 32.0) * log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))));
                                float _3246 = _512 / (_512 + 1.0);
                                float _3267 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _639;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3187 - _2566;
                                float _3279 = _3188 - _2567;
                                float _3280 = _3189 - _2568;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_571, _574, _577), vec3(_3225, _3226, _3227));
                                float _4279 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3292 = dot(vec3(_571, _574, _577), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4290 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3200 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_571, _574, _577), vec3(_3187, _3188, _3189))) + _3301;
                                float _4301 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4312 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3223 * _3194) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_3299 * _3299) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3052 * 0.3183098733425140380859375) * _3246) * _3244) + _3052) * _3224;
                                frontier_phi_78_pred_1 = ((((_3054 * 0.3183098733425140380859375) * _3246) * _3244) + _3054) * _3224;
                                frontier_phi_78_pred_2 = ((((_3053 * 0.3183098733425140380859375) * _3246) * _3244) + _3053) * _3224;
                                frontier_phi_78_pred_3 = _3329 * _3066.z;
                                frontier_phi_78_pred_4 = _3329 * _3066.y;
                                frontier_phi_78_pred_5 = _3329 * _3066.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3336 = frontier_phi_78_pred;
                            _3338 = frontier_phi_78_pred_1;
                            _3337 = frontier_phi_78_pred_2;
                            _3335 = frontier_phi_78_pred_3;
                            _3334 = frontier_phi_78_pred_4;
                            _3333 = frontier_phi_78_pred_5;
                            _2993 = _3336 + _3006;
                            _2994 = _3337 + _3007;
                            _2995 = _3338 + _3008;
                            _2990 = _3333 + _3003;
                            _2991 = _3334 + _3004;
                            _2992 = _3335 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2995;
                        frontier_phi_72_pred_1 = _2994;
                        frontier_phi_72_pred_2 = _2993;
                        frontier_phi_72_pred_3 = _2992;
                        frontier_phi_72_pred_4 = _2991;
                        frontier_phi_72_pred_5 = _2990;
                    }
                    _2551 = frontier_phi_72_pred;
                    _2549 = frontier_phi_72_pred_1;
                    _2547 = frontier_phi_72_pred_2;
                    _2545 = frontier_phi_72_pred_3;
                    _2543 = frontier_phi_72_pred_4;
                    _2541 = frontier_phi_72_pred_5;
                    uint _2728 = _2727 + 1u;
                    if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2721 = _2541;
                        _2722 = _2543;
                        _2723 = _2545;
                        _2724 = _2547;
                        _2725 = _2549;
                        _2726 = _2551;
                        _2727 = _2728;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2551;
                frontier_phi_52_53_ladder_1 = _2543;
                frontier_phi_52_53_ladder_2 = _2549;
                frontier_phi_52_53_ladder_3 = _2547;
                frontier_phi_52_53_ladder_4 = _2545;
                frontier_phi_52_53_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_52_53_ladder = _2373;
                frontier_phi_52_53_ladder_1 = _2365;
                frontier_phi_52_53_ladder_2 = _2371;
                frontier_phi_52_53_ladder_3 = _2369;
                frontier_phi_52_53_ladder_4 = _2367;
                frontier_phi_52_53_ladder_5 = _2363;
            }
            _2540 = frontier_phi_52_53_ladder_5;
            _2542 = frontier_phi_52_53_ladder_1;
            _2544 = frontier_phi_52_53_ladder_4;
            _2546 = frontier_phi_52_53_ladder_3;
            _2548 = frontier_phi_52_53_ladder_2;
            _2550 = frontier_phi_52_53_ladder;
        }
        float _2555 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2153 = (_2555 * _2546) + _1851;
        _2155 = (_2555 * _2548) + _1852;
        _2157 = (_2555 * _2550) + _1853;
        _2159 = ((_2540 * 0.039999999105930328369140625) * _2555) + _2014;
        _2161 = ((_2542 * 0.039999999105930328369140625) * _2555) + _2015;
        _2163 = ((_2544 * 0.039999999105930328369140625) * _2555) + _2016;
    }
    else
    {
        _2153 = _1851;
        _2155 = _1852;
        _2157 = _1853;
        _2159 = _2014;
        _2161 = _2015;
        _2163 = _2016;
    }
    float _2177 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2178 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2179 = cbSceneParam._m0[86u].x * (_1691 + ((_638 * cbMtdParam._m0[13u].y) * dot(vec3(_507, _508, _509), vec3(_205, _206, _207))));
    float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
    float _2181 = isnan(_2178) ? _551 : (isnan(_551) ? _2178 : min(_551, _2178));
    vec4 _2183 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2180, _2181), 0.0);
    float _2185 = _2183.x;
    bool _2206 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2185)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2185))) > _531;
    float _2207 = _2206 ? _2180 : _550;
    float _2208 = _2206 ? _2181 : _551;
    vec4 _2210 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2207, _2208));
    vec4 _2215 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2207, _2208));
    float _2217 = _2215.x;
    float _2237 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2217)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2217))) - _531;
    bool _2247 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2251 = (isnan(_2237) ? 0.0 : (isnan(0.0) ? _2237 : max(0.0, _2237))) * (-1.44269502162933349609375);
    float _4343 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4354 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4365 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2278 = 0.959999978542327880859375 - (exp2(log2(1.0 - _630) * 5.0) * 0.959999978542327880859375);
    float _2281 = ((_2210.x * _2278) * exp2(_2251 * (_2247 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2284 = ((_2210.y * _2278) * exp2(_2251 * (_2247 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2287 = ((_2210.z * _2278) * exp2(_2251 * (_2247 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2295 = (_2281 + (((((_1668 * _1716.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1461) * _1732)) + _2159) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2153 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _615))) - _2281) * cbMtdParam._m0[15u].x);
    float _2297 = (_2284 + (((((_1668 * _1716.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1461) * _1732)) + _2161) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2155 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _615))) - _2284) * cbMtdParam._m0[15u].x);
    float _2299 = (_2287 + (((((_1668 * _1716.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1461) * _1732)) + _2163) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2157 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _615))) - _2287) * cbMtdParam._m0[15u].x);
    float _2304 = cbInstanceData._m0[_590 + 6u].w * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)));
    float _2309 = _550 / cbSceneParam._m0[86u].x;
    float _2310 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2389 = _2388 / _531;
        float _2400 = _2389 * _275;
        float _2401 = _276 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2403 = _2389 * _277;
        float _2405 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2406 = _2405 + cbSceneParam._m0[79u].w;
        float _2407 = cbSceneParam._m0[79u].w - _2401;
        float _2413 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2403 * _2403));
        float _2416 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2413;
        float _2421 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2422 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2678;
        if (abs((_2402 - _2405) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2678 = ((((_2406 > 0.0) ? exp2(_2421 * _2406) : (2.0 - exp2(_2422 * _2406))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2416;
        }
        else
        {
            float _2601 = 1.0 / cbSceneParam._m0[80u].x;
            float _2602 = isnan(_2407) ? _2406 : (isnan(_2406) ? _2407 : max(_2406, _2407));
            float _2603 = isnan(_2407) ? _2406 : (isnan(_2406) ? _2407 : min(_2406, _2407));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            _2678 = ((abs(_2413 / _2402) * cbSceneParam._m0[80u].y) * ((((_2612 - _2613) * 2.0) - ((exp2(_2421 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0)))) - exp2(_2421 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))))) * _2601)) - ((exp2(_2422 * _2612) - exp2(_2422 * _2613)) * _2601))) + (_2416 * cbSceneParam._m0[80u].z);
        }
        vec4 _2680 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2689 = exp2((_2678 * (-1.44269502162933349609375)) * (1.0 - _2680.w));
        float _2690 = log2(_2689);
        float _2706 = log2(_2329);
        _2424 = (exp2(_2706 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].x)) * _2680.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2426 = (exp2(_2706 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].y)) * _2680.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2428 = (exp2(_2706 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].z)) * _2680.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2430 = _2689 * _2329;
    }
    else
    {
        _2424 = _2326;
        _2426 = _2327;
        _2428 = _2328;
        _2430 = _2329;
    }
    bool _2716;
    float _2485;
    vec4 _2488;
    float _2490;
    vec4 _2492;
    float _2500;
    float _2501;
    float _2502;
    float _2503;
    bool _2513;
    for (;;)
    {
        bool _2442 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2443 = log2(_2430);
        float _2450 = exp2(_2443 * cbSceneParam._m0[78u].x) * _2295;
        float _2451 = exp2(_2443 * cbSceneParam._m0[78u].y) * _2297;
        float _2452 = exp2(_2443 * cbSceneParam._m0[78u].z) * _2299;
        vec4 _2460 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_550, _551));
        float _2462 = _2460.x;
        float _2483 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2462)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2462))) - _531) * cbMtdParam._m0[14u].z;
        float _4416 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        _2485 = _2304 * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)));
        float _2486 = _538 + (-0.5);
        _2488 = cbMtdParam._m0[1u];
        _2490 = _2488.y * _2486;
        _2492 = cbMatDynParam._m0[0u];
        float _2499 = (roundEven(_2492.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2500 = _2499 * (_2442 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
        _2501 = _2499 * (_2442 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2426)));
        _2502 = _2499 * (_2442 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2428)));
        _2503 = _2486 * 0.999000012874603271484375;
        _2513 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2513)
        {
            if ((cbInstanceData._m0[_590 + 7u].x + _2503) < 0.5)
            {
                _2716 = true;
                break;
            }
        }
        uint _2636 = _591 + uint(_2492.w);
        if ((cbInstanceData._m0[_2636].w < 1.0) && ((cbInstanceData._m0[_2636].w + _2503) < 0.5))
        {
            _2716 = true;
            break;
        }
        if ((_2490 + _429) < _2488.x)
        {
            _2716 = true;
            break;
        }
        _2716 = false;
        break;
    }
    float _2981;
    if (_2716)
    {
        discard_state = true;
        _2981 = 0.0;
    }
    else
    {
        _2981 = _2485;
    }
    SV_Target.x = _2500;
    SV_Target.y = _2501;
    SV_Target.z = _2502;
    SV_Target.w = _2981;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2485;
    discard_exit();
}


