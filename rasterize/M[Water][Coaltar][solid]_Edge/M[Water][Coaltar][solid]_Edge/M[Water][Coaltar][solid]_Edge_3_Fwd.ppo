#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _978;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _201 = _200 * _193;
    float _202 = _200 * _194;
    float _203 = _200 * _195;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _281 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _282 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _293 = dot(vec3(_271, _272, _273), vec3(_201, _202, _203));
    float _296 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _299 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _305 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _329 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _349 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_293 * cbMtdParam._m0[12u].x) * _305) * _329) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_296 * cbMtdParam._m0[12u].x) * _305) * _329) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _372 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _373 = _372 * _271;
    float _374 = _372 * _272;
    float _375 = _372 * _273;
    float _379 = dot(vec4(_373, _374, _375, 0.0), vec4(_208, _209, _210, 0.0)) - cbMtdParam._m0[12u].w;
    float _3376 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _386 = exp2(log2(1.0 - (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _401 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _349.x) * cbMtdParam._m0[9u].x) * ((_386 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _405 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _349.y) * cbMtdParam._m0[9u].y) * ((_386 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _409 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _349.z) * cbMtdParam._m0[9u].z) * ((_386 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _421 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _425 = cbMtdParam._m0[12u].z * _421.x;
    vec4 _438 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    float _446 = (_438.x * 2.0) + (-1.0);
    float _447 = (_438.y * 2.0) + (-1.0);
    float _448 = dot(vec2(_446, _447), vec2(_446, _447));
    float _3392 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    float _458 = cbMtdParam._m0[14u].w + _438.z;
    vec4 _470 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _281) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _282) + cbTextureTilingScale._m0[1u].w));
    float _474 = cbMtdParam._m0[13u].w * _470.x;
    float _492 = fma(_453, _208, fma(_447, _215, _446 * _201));
    float _495 = fma(_453, _209, fma(_447, _216, _446 * _202));
    float _498 = fma(_453, _210, fma(_447, _217, _446 * _203));
    float _502 = inversesqrt(dot(vec3(_492, _495, _498), vec3(_492, _495, _498)));
    float _503 = _502 * _492;
    float _504 = _502 * _495;
    float _505 = _502 * _498;
    float _3403 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3414 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _507 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _508 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3430 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3441 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3452 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _527 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _555 = fma(_505, cbSceneParam._m0[5u].z, fma(_504, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _503));
    float _558 = fma(_505, cbSceneParam._m0[6u].z, fma(_504, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _503));
    float _561 = fma(_505, cbSceneParam._m0[7u].z, fma(_504, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _503));
    uint _574 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = (_574 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _582 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_576].x;
    float _583 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_576].y;
    float _584 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_576].z;
    float _3463 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    vec4 _596 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _533, cbSceneParam._m0[86u].y * _534));
    float _599 = _596.x * TEXCOORD.z;
    float _600 = dot(vec3(_503, _504, _505), vec3(_373, _374, _375));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _503) - _373;
    float _608 = (_603 * _504) - _374;
    float _609 = (_603 * _505) - _375;
    float _613 = abs(dot(vec3(_373, _374, _375), vec3(_503, _504, _505)));
    float _3496 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _622 = 10.0 / (_527 + 10.0);
    float _623 = sqrt(_507);
    float _635 = exp2((_623 * 5.0) * log2(1.0 - (_614 * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _977;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _702 = fma(_675, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667));
        float _706 = fma(_675, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667));
        float _710 = fma(_675, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667));
        float _735 = _667 + _503;
        float _736 = _671 + _504;
        float _737 = _675 + _505;
        float _747 = fma(_737, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735)) - _702;
        float _748 = fma(_737, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735)) - _706;
        float _749 = fma(_737, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735)) - _710;
        float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
        float _766 = ((_753 * _747) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_702 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_753 * _748) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_706 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_753 * _749) / cbModelParam._m0[34u].z) + ((((((_710 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_766, _767, _768), 0.0);
        float _805 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_771.x + (-0.5));
        float _807 = _805 * (_771.y + (-0.5));
        float _808 = _805 * (_771.z + (-0.5));
        float _815 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_778.x + (-0.5));
        float _817 = _815 * (_778.y + (-0.5));
        float _818 = _815 * (_778.z + (-0.5));
        float _825 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_785.x + (-0.5));
        float _827 = _825 * (_785.y + (-0.5));
        float _828 = _825 * (_785.z + (-0.5));
        float _835 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_792.x + (-0.5));
        float _837 = _835 * (_792.y + (-0.5));
        float _838 = _835 * (_792.z + (-0.5));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = _806 * 0.5;
        float _843 = _816 * 0.5;
        float _844 = _826 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _859 = (dot(vec3(_503, _504, _505), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _869 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3544 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_871 + 1.0))) + _876) * _839;
        float _886 = _807 * 0.5;
        float _887 = _817 * 0.5;
        float _888 = _827 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_503, _504, _505), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3577 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_913 + 1.0))) + _918) * _840;
        float _928 = _808 * 0.5;
        float _929 = _818 * 0.5;
        float _930 = _828 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_503, _504, _505), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3610 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_955 + 1.0))) + _960) * _841;
        _977 = _808;
        _979 = _807;
        _980 = _806;
        _981 = _818;
        _982 = _817;
        _983 = _816;
        _984 = _828;
        _985 = _827;
        _986 = _826;
        _987 = _841;
        _988 = _840;
        _989 = _839;
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
    }
    else
    {
        _977 = _978;
        _979 = _978;
        _980 = _978;
        _981 = _978;
        _982 = _978;
        _983 = _978;
        _984 = _978;
        _985 = _978;
        _986 = _978;
        _987 = _978;
        _988 = _978;
        _989 = _978;
        _990 = 0.0;
        _991 = 0.0;
        _992 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1018 = fma(_675, cbModelParam._m0[30u].z, fma(_671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _667));
        float _1022 = fma(_675, cbModelParam._m0[31u].z, fma(_671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _667));
        float _1026 = fma(_675, cbModelParam._m0[32u].z, fma(_671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _667));
        float _1049 = _667 + _503;
        float _1050 = _671 + _504;
        float _1051 = _675 + _505;
        float _1061 = fma(_1051, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049)) - _1018;
        float _1062 = fma(_1051, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049)) - _1022;
        float _1063 = fma(_1051, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049)) - _1026;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1018 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1022 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[35u].z) + ((((((_1026 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_503, _504, _505), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3673 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_503, _504, _505), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3706 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_503, _504, _505), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3739 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _978;
        _1288 = _978;
        _1289 = _978;
        _1290 = _978;
        _1291 = _978;
        _1292 = _978;
        _1293 = _978;
        _1294 = _978;
        _1295 = _978;
        _1296 = _978;
        _1297 = _978;
        _1298 = _978;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _990)) + _990;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _607 * 0.5;
    float _1356 = _608 * 0.5;
    float _1357 = _609 * 0.5;
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_977, _981, _984, _987));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_979, _982, _985, _988));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_980, _983, _986, _989));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1423 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1423 : min(cbModelParam._m0[25u].z, _1423));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1471 = fma(_675, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667)) + cbModelParam._m0[13u].w;
        float _1475 = fma(_675, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667)) + cbModelParam._m0[14u].w;
        float _1479 = fma(_675, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667)) + cbModelParam._m0[15u].w;
        float _1482 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1485 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1488 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1516;
        if (_1482 > 0.0)
        {
            _1516 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1516 = frontier_phi_14_12_ladder;
        }
        float _1739;
        if (_1485 > 0.0)
        {
            _1739 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1739 = frontier_phi_23_19_ladder;
        }
        float _1974;
        if (_1488 > 0.0)
        {
            _1974 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1974 = frontier_phi_34_30_ladder;
        }
        float _1976 = isnan(_1739) ? _1516 : (isnan(_1516) ? _1739 : min(_1516, _1739));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1482) + _1471;
        float _1982 = (_1977 * _1485) + _1475;
        float _1983 = (_1977 * _1488) + _1479;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1986 = (-1.0) - _1984;
        float _1988 = _1984 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1983 > _1988) || ((_1983 < _1986) || ((_1982 > _1988) || ((_1982 < _1986) || ((_1981 < _1986) || (_1981 > _1988))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1983, cbModelParam._m0[9u].z, fma(_1982, cbModelParam._m0[9u].y, _1981 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1983, cbModelParam._m0[10u].z, fma(_1982, cbModelParam._m0[10u].y, _1981 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1983, cbModelParam._m0[11u].z, fma(_1982, cbModelParam._m0[11u].y, _1981 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_13_34_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1504 = frontier_phi_13_34_ladder_2;
        _1506 = frontier_phi_13_34_ladder_1;
        _1508 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1424);
        _1504 = _1492.x * cbModelParam._m0[1u].y;
        _1506 = _1492.y * cbModelParam._m0[1u].y;
        _1508 = _1492.z * cbModelParam._m0[1u].y;
    }
    float _1512 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1512 : min(cbModelParam._m0[25u].w, _1512));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1568 = fma(_675, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667)) + cbModelParam._m0[21u].w;
        float _1572 = fma(_675, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667)) + cbModelParam._m0[22u].w;
        float _1576 = fma(_675, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667)) + cbModelParam._m0[23u].w;
        float _1579 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1582 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1585 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1744;
        if (_1579 > 0.0)
        {
            _1744 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1744 = frontier_phi_25_21_ladder;
        }
        float _2001;
        if (_1582 > 0.0)
        {
            _2001 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2001 = frontier_phi_36_32_ladder;
        }
        float _2458;
        if (_1585 > 0.0)
        {
            _2458 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2458 = frontier_phi_47_42_ladder;
        }
        float _2460 = isnan(_2001) ? _1744 : (isnan(_1744) ? _2001 : min(_1744, _2001));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1579) + _1568;
        float _2466 = (_2461 * _1582) + _1572;
        float _2467 = (_2461 * _1585) + _1576;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1513);
            frontier_phi_22_47_ladder = _2588.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2588.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2588.x * cbModelParam._m0[1u].z;
        }
        _1604 = frontier_phi_22_47_ladder_2;
        _1606 = frontier_phi_22_47_ladder_1;
        _1608 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1513);
        _1604 = _1588.x * cbModelParam._m0[1u].z;
        _1606 = _1588.y * cbModelParam._m0[1u].z;
        _1608 = _1588.z * cbModelParam._m0[1u].z;
    }
    float _1620 = ((((1.0 - _635) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_635 * _623)) * _599;
    float _1621 = _1620 * ((cbModelParam._m0[1u].w * (_1604 - _1504)) + _1504);
    float _1622 = _1620 * ((cbModelParam._m0[1u].w * (_1606 - _1506)) + _1506);
    float _1623 = _1620 * ((cbModelParam._m0[1u].w * (_1608 - _1508)) + _1508);
    float _1626 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    float _1643 = _533 / cbSceneParam._m0[86u].x;
    float _1651 = (cbSceneParam._m0[88u].y * (1.0 - _507)) + cbSceneParam._m0[88u].z;
    float _3865 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1653 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 5.0;
    float _1658 = (_622 * cbMtdParam._m0[13u].z) * dot(vec3(_503, _504, _505), vec3(1.0, 0.0, 0.0));
    vec4 _1668 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1658 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1658 + _1643) * cbSceneParam._m0[86u].x, _534), _1653).w) + _1643) * cbSceneParam._m0[86u].x, _534), _1653);
    float _1684 = 1.0 - _1668.w;
    uvec4 _1694 = floatBitsToUint(cbInstanceData._m0[_574 + 5u]);
    uint _1696 = _1694.x * 14u;
    uint _1697 = _1696 + 13u;
    float _1702 = _599 + (-1.0);
    float _1705 = (cbLight._m0[_1697].x * _1702) + 1.0;
    float _1706 = (cbLight._m0[_1697].y * _1702) + 1.0;
    uint _1708 = _1696 + 4u;
    float _1719 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_503, _504, _505));
    float _1722 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    uint _1723 = _1696 + 5u;
    uint _1729 = _1696 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_503, _504, _505));
    float _1738 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
    float _1803;
    float _1804;
    float _1805;
    if (_508 == 0.0)
    {
        float _3886 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _3897 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1757 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
        float _1759 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
        _1803 = ((cbLight._m0[_1723].x * _1738) * _1759) + ((cbLight._m0[_1708].x * _1722) * _1757);
        _1804 = ((_1738 * cbLight._m0[_1723].y) * _1759) + ((_1722 * cbLight._m0[_1708].y) * _1757);
        _1805 = ((_1738 * cbLight._m0[_1723].z) * _1759) + ((_1722 * cbLight._m0[_1708].z) * _1757);
    }
    else
    {
        float _1769 = _1719 + _508;
        float _1772 = (_508 * 2.0) + 1.0;
        float _1773 = (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) / _1772;
        float _1780 = _1735 + _508;
        float _1782 = (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) / _1772;
        _1803 = (((_1782 * cbLight._m0[_1723].x) * _1738) + ((_1773 * cbLight._m0[_1708].x) * _1722)) * 0.3183098733425140380859375;
        _1804 = (((_1782 * cbLight._m0[_1723].y) * _1738) + ((_1773 * cbLight._m0[_1708].y) * _1722)) * 0.3183098733425140380859375;
        _1805 = (((_1782 * cbLight._m0[_1723].z) * _1738) + ((_1773 * cbLight._m0[_1708].z) * _1722)) * 0.3183098733425140380859375;
    }
    uint _1809 = _1696 + 8u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1696].w)) * _507) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1696].x + _373;
    float _1828 = cbLight._m0[_1696].y + _374;
    float _1829 = cbLight._m0[_1696].z + _375;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_1696].xyz));
    float _3918 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _1841 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1842 = dot(vec3(_503, _504, _505), vec3(_1834, _1835, _1836));
    float _3940 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1846 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1834, _1835, _1836));
    float _3951 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1850 = _1826 * _1826;
    float _1854 = ((_1845 * _1845) * (_1850 + (-1.0))) + 1.0;
    float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1866 = 1.0 - _1826;
    float _1877 = (0.5 / (((_1841 * ((_1840 * _1866) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1866) + _1826) * _1840))) * _1840;
    float _3962 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1850 / ((_1854 * _1854) * 3.141590118408203125));
    uint _1892 = _1696 + 9u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _507) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1729].x + _373;
    float _1909 = cbLight._m0[_1729].y + _374;
    float _1910 = cbLight._m0[_1729].z + _375;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_1729].xyz));
    float _3973 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1922 = dot(vec3(_503, _504, _505), vec3(_1915, _1916, _1917));
    float _3984 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1915, _1916, _1917));
    float _3995 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1907 * _1907;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1944 = 1.0 - _1907;
    float _1954 = (0.5 / (((_1841 * ((_1921 * _1944) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1944) + _1907) * _1921))) * _1921;
    float _4006 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    float _1966 = (((_1943 * cbLight._m0[_1892].x) * _1956) * _1738) + (((_1865 * cbLight._m0[_1809].x) * _1879) * _1722);
    float _1967 = (((_1943 * cbLight._m0[_1892].y) * _1956) * _1738) + (((_1865 * cbLight._m0[_1809].y) * _1879) * _1722);
    float _1968 = (((_1943 * cbLight._m0[_1892].z) * _1956) * _1738) + (((_1865 * cbLight._m0[_1809].z) * _1879) * _1722);
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    float _2113;
    float _2115;
    if (_1694.y == 0u)
    {
        float _2045 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2046 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2045;
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2045;
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2045;
        uvec4 _2060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2061 = _2060.x;
        uint _2072 = uint((float(_2060.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _2061))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _2061)));
        float _2082 = (log2(_2048 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2083 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        uint _2086 = uint(isnan(14.0) ? _2083 : (isnan(_2083) ? 14.0 : min(_2083, 14.0)));
        uvec4 _2091 = texelFetch(g_lightClusterGridBuffer, int(((_2086 << 2u) + (_2072 << 6u)) >> 2u));
        uint _2092 = _2091.x;
        uint _2093 = _2060.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2093 >> 4u) & 15u)) + 4294967295u) & _2092) == 0u) || ((_2093 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            uint _2522 = 0u;
            uint _2531;
            bool _2532;
            for (;;)
            {
                _2531 = texelFetch(g_lightClassification, int((((_2086 << 5u) + (_2072 << 9u)) + (_2522 << 2u)) >> 2u)).x;
                _2532 = _2531 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2532)
                {
                    frontier_phi_56_pred = _2516;
                    frontier_phi_56_pred_1 = _2521;
                    frontier_phi_56_pred_2 = _2520;
                    frontier_phi_56_pred_3 = _2519;
                    frontier_phi_56_pred_4 = _2518;
                    frontier_phi_56_pred_5 = _2517;
                }
                else
                {
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    uint _2667;
                    _2661 = _2516;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2531;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    for (;;)
                    {
                        uint _2671 = uint(findLSB(_2667)) + (_2522 << 5u);
                        uint _2668 = (_2667 + 4294967295u) & _2667;
                        uint _2673 = _2671 * 48u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2693 = (_2671 * 48u) + 4u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        float _2707 = _2706.x;
                        float _2708 = _2706.y;
                        float _2709 = _2706.z;
                        uint _2712 = (_2671 * 48u) + 8u;
                        vec3 _2723 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x));
                        uint _2728 = (_2671 * 48u) + 12u;
                        vec2 _2736 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x));
                        float _2742 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
                        float _2743 = _2742 * _2046;
                        float _2744 = _2742 * _2047;
                        float _2745 = _2742 * _2048;
                        float _2746 = _2687.x - _2046;
                        float _2747 = _2687.y - _2047;
                        float _2748 = _2687.z - _2048;
                        float _2749 = dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748));
                        float _2752 = inversesqrt(_2749);
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2756 = dot(vec3(_555, _558, _561), vec3(_2753, _2754, _2755));
                        float _2761 = 1.0 - (_2749 * _2687.w);
                        float _4027 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2762 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2763 = sqrt(_2749) * _2706.w;
                        float _2766 = 1.39999997615814208984375 / (_2763 + 1.39999997615814208984375);
                        float _2767 = _2766 * _2766;
                        float _2768 = 1.0 - _2767;
                        float _2770 = (_2768 * _2768) * _508;
                        float _2773 = ((_2768 * _2756) + _2767) + _2770;
                        float _2778 = _2763 * _2763;
                        float _2783 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2762) / (((_2770 * 2.0) + 1.0) * ((_2778 * 0.699999988079071044921875) + 1.0));
                        float _2787 = dot(vec3(_2753, _2754, _2755), vec3(_2743, _2744, _2745));
                        float _4043 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2794 = dot(vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745), vec3(_555, _558, _561)) + 1.0;
                        float _2796 = (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * 0.5;
                        float _2804 = ((_2796 * _2796) * _2736.x) * exp2((_2736.y * 32.0) * log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))));
                        float _2806 = _508 / (_508 + 1.0);
                        float _2822 = (-0.0) - _2046;
                        float _2823 = (-0.0) - _2047;
                        float _2824 = (-0.0) - _2048;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2829 = _2828 * _2822;
                        float _2830 = _2828 * _2823;
                        float _2831 = _2828 * _2824;
                        float _2839 = exp2(log2(1.0 / ((_2778 * 3.5) + 5.0)) * 0.25);
                        float _2840 = 1.0 - _623;
                        float _2847 = sqrt(1.0 - ((1.0 - (_2840 * _2840)) * (1.0 - (_2839 * _2839))));
                        float _2848 = _2847 * _2847;
                        float _2849 = _2848 * _2848;
                        float _2850 = _2829 + _2753;
                        float _2851 = _2830 + _2754;
                        float _2852 = _2831 + _2755;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2860 = dot(vec3(_555, _558, _561), vec3(_2829, _2830, _2831));
                        float _4059 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2863 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2864 = dot(vec3(_555, _558, _561), vec3(_2856 * _2850, _2856 * _2851, _2856 * _2852));
                        float _4070 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2867 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2871 = ((_2867 * _2867) * (_2849 + (-1.0))) + 1.0;
                        float _2872 = _2766 * _2848;
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2756) + _2873;
                        float _4081 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2878 = 1.0 - _2848;
                        float _2888 = (0.5 / (((_2877 * ((_2863 * _2878) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _2878) + _2848) * _2863))) * _2877;
                        float _4092 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2899 = (((_2849 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_2871 * _2871) * ((_2778 * 2.1991131305694580078125) + 3.141590118408203125))) * _2762;
                        _2596 = (((((_2707 * 0.3183098733425140380859375) * _2806) * _2804) + _2707) * _2783) + _2664;
                        _2597 = (((((_2708 * 0.3183098733425140380859375) * _2806) * _2804) + _2708) * _2783) + _2665;
                        _2598 = (((((_2709 * 0.3183098733425140380859375) * _2806) * _2804) + _2709) * _2783) + _2666;
                        _2593 = (_2899 * _2723.x) + _2661;
                        _2594 = (_2899 * _2723.y) + _2662;
                        _2595 = (_2899 * _2723.z) + _2663;
                        if (_2668 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2668;
                        }
                    }
                    frontier_phi_56_pred = _2593;
                    frontier_phi_56_pred_1 = _2598;
                    frontier_phi_56_pred_2 = _2597;
                    frontier_phi_56_pred_3 = _2596;
                    frontier_phi_56_pred_4 = _2595;
                    frontier_phi_56_pred_5 = _2594;
                }
                _2316 = frontier_phi_56_pred;
                _2326 = frontier_phi_56_pred_1;
                _2324 = frontier_phi_56_pred_2;
                _2322 = frontier_phi_56_pred_3;
                _2320 = frontier_phi_56_pred_4;
                _2318 = frontier_phi_56_pred_5;
                uint _2523 = _2522 + 1u;
                if (_2523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2516 = _2316;
                    _2517 = _2318;
                    _2518 = _2320;
                    _2519 = _2322;
                    _2520 = _2324;
                    _2521 = _2326;
                    _2522 = _2523;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((4294967295u << _2332) & _2092) == 0u)
        {
            _2484 = _2315;
            _2486 = _2317;
            _2488 = _2319;
            _2490 = _2321;
            _2492 = _2323;
            _2494 = _2325;
        }
        else
        {
            float _2509 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
            float _2510 = _2509 * _2046;
            float _2511 = _2509 * _2047;
            float _2512 = _2509 * _2048;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2644 = _2315;
                float _2645 = _2317;
                float _2646 = _2319;
                float _2647 = _2321;
                float _2648 = _2323;
                float _2649 = _2325;
                uint _2650 = _2332;
                uint _2659;
                bool _2660;
                for (;;)
                {
                    _2659 = texelFetch(g_lightClassification, int((((_2086 << 5u) + (_2072 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                    _2660 = _2659 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2660)
                    {
                        frontier_phi_62_pred = _2649;
                        frontier_phi_62_pred_1 = _2648;
                        frontier_phi_62_pred_2 = _2647;
                        frontier_phi_62_pred_3 = _2646;
                        frontier_phi_62_pred_4 = _2645;
                        frontier_phi_62_pred_5 = _2644;
                    }
                    else
                    {
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _2917 = _2644;
                        float _2918 = _2645;
                        float _2919 = _2646;
                        float _2920 = _2647;
                        float _2921 = _2648;
                        float _2922 = _2649;
                        uint _2923 = _2659;
                        uint _2924;
                        vec4 _2949;
                        float _2950;
                        vec4 _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        vec3 _2980;
                        vec2 _2989;
                        vec4 _3004;
                        vec4 _3020;
                        float _3067;
                        bool _3068;
                        for (;;)
                        {
                            uint _2934 = ((_2650 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2923));
                            _2924 = (_2923 + 4294967295u) & _2923;
                            uint _2936 = _2934 * 40u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2950 = _2949.w;
                            uint _2952 = (_2934 * 40u) + 4u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            _2966 = _2965.x;
                            _2967 = _2965.y;
                            _2968 = _2965.z;
                            uint _2970 = (_2934 * 40u) + 8u;
                            _2980 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x));
                            uint _2982 = (_2934 * 40u) + 12u;
                            _2989 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x));
                            uint _2991 = (_2934 * 40u) + 16u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2934 * 40u) + 20u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3023 = (_2934 * 40u) + 24u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3042 = (_2934 * 40u) + 28u;
                            vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3067 = fma(_2048, _3055.z, fma(_2047, _3055.y, _3055.x * _2046)) + _3055.w;
                            _3068 = !((fma(_2048, _3036.z, fma(_2047, _3036.y, _3036.x * _2046)) + _3036.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3068)
                            {
                                float _3094 = _2949.x - _2046;
                                float _3095 = _2949.y - _2047;
                                float _3096 = _2949.z - _2048;
                                float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                                float _3100 = inversesqrt(_3097);
                                float _3101 = _3100 * _3094;
                                float _3102 = _3100 * _3095;
                                float _3103 = _3100 * _3096;
                                float _3107 = 1.0 - (_3097 / (_2950 * _2950));
                                float _4103 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3112 = sqrt(_3097) * _2965.w;
                                float _3114 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                                float _3115 = _3114 * _3114;
                                float _3116 = 1.0 - _3115;
                                float _3118 = (_3116 * _3116) * _508;
                                float _3121 = ((_3116 * dot(vec3(_3101, _3102, _3103), vec3(_555, _558, _561))) + _3115) + _3118;
                                float _3126 = _3112 * _3112;
                                float _3131 = (fma(_2048, _3004.z, fma(_2047, _3004.y, _3004.x * _2046)) + _3004.w) / _3067;
                                float _3132 = (fma(_2048, _3020.z, fma(_2047, _3020.y, _3020.x * _2046)) + _3020.w) / _3067;
                                float _3136 = 1.0 - dot(vec2(_3131, _3132), vec2(_3131, _3132));
                                float _4119 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3138 = _3137 * (((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3108) / (((_3118 * 2.0) + 1.0) * ((_3126 * 0.699999988079071044921875) + 1.0)));
                                float _3139 = (-0.0) - _2510;
                                float _3140 = (-0.0) - _2511;
                                float _3141 = (-0.0) - _2512;
                                float _3142 = dot(vec3(_3101, _3102, _3103), vec3(_2510, _2511, _2512));
                                float _4130 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3149 = dot(vec3(_3139, _3140, _3141), vec3(_555, _558, _561)) + 1.0;
                                float _3151 = (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * 0.5;
                                float _3158 = ((_3151 * _3151) * _2989.x) * exp2((_2989.y * 32.0) * log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))));
                                float _3160 = _508 / (_508 + 1.0);
                                float _3181 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                                float _3182 = 1.0 - _623;
                                float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                                float _3190 = _3189 * _3189;
                                float _3191 = _3190 * _3190;
                                float _3192 = _3101 - _2510;
                                float _3193 = _3102 - _2511;
                                float _3194 = _3103 - _2512;
                                float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                                float _3202 = dot(vec3(_555, _558, _561), vec3(_3139, _3140, _3141));
                                float _4146 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3205 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3206 = dot(vec3(_555, _558, _561), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                                float _4157 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3209 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                                float _3214 = _3114 * _3190;
                                float _3215 = _3214 * _3214;
                                float _3221 = ((1.0 - _3215) * dot(vec3(_555, _558, _561), vec3(_3101, _3102, _3103))) + _3215;
                                float _4168 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3223 = 1.0 - _3190;
                                float _3233 = (0.5 / (((_3222 * ((_3205 * _3223) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3190) * _3205))) * _3222;
                                float _4179 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3243 = (_3137 * _3108) * (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_3213 * _3213) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_2968 * 0.3183098733425140380859375) * _3160) * _3158) + _2968) * _3138;
                                frontier_phi_68_pred_1 = ((((_2967 * 0.3183098733425140380859375) * _3160) * _3158) + _2967) * _3138;
                                frontier_phi_68_pred_2 = ((((_2966 * 0.3183098733425140380859375) * _3160) * _3158) + _2966) * _3138;
                                frontier_phi_68_pred_3 = _3243 * _2980.z;
                                frontier_phi_68_pred_4 = _3243 * _2980.y;
                                frontier_phi_68_pred_5 = _3243 * _2980.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3252 = frontier_phi_68_pred;
                            _3251 = frontier_phi_68_pred_1;
                            _3250 = frontier_phi_68_pred_2;
                            _3249 = frontier_phi_68_pred_3;
                            _3248 = frontier_phi_68_pred_4;
                            _3247 = frontier_phi_68_pred_5;
                            _2907 = _3250 + _2920;
                            _2908 = _3251 + _2921;
                            _2909 = _3252 + _2922;
                            _2904 = _3247 + _2917;
                            _2905 = _3248 + _2918;
                            _2906 = _3249 + _2919;
                            if (_2924 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2924;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2909;
                        frontier_phi_62_pred_1 = _2908;
                        frontier_phi_62_pred_2 = _2907;
                        frontier_phi_62_pred_3 = _2906;
                        frontier_phi_62_pred_4 = _2905;
                        frontier_phi_62_pred_5 = _2904;
                    }
                    _2495 = frontier_phi_62_pred;
                    _2493 = frontier_phi_62_pred_1;
                    _2491 = frontier_phi_62_pred_2;
                    _2489 = frontier_phi_62_pred_3;
                    _2487 = frontier_phi_62_pred_4;
                    _2485 = frontier_phi_62_pred_5;
                    uint _2651 = _2650 + 1u;
                    if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2644 = _2485;
                        _2645 = _2487;
                        _2646 = _2489;
                        _2647 = _2491;
                        _2648 = _2493;
                        _2649 = _2495;
                        _2650 = _2651;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2495;
                frontier_phi_49_50_ladder_1 = _2491;
                frontier_phi_49_50_ladder_2 = _2493;
                frontier_phi_49_50_ladder_3 = _2489;
                frontier_phi_49_50_ladder_4 = _2487;
                frontier_phi_49_50_ladder_5 = _2485;
            }
            else
            {
                frontier_phi_49_50_ladder = _2325;
                frontier_phi_49_50_ladder_1 = _2321;
                frontier_phi_49_50_ladder_2 = _2323;
                frontier_phi_49_50_ladder_3 = _2319;
                frontier_phi_49_50_ladder_4 = _2317;
                frontier_phi_49_50_ladder_5 = _2315;
            }
            _2484 = frontier_phi_49_50_ladder_5;
            _2486 = frontier_phi_49_50_ladder_4;
            _2488 = frontier_phi_49_50_ladder_3;
            _2490 = frontier_phi_49_50_ladder_1;
            _2492 = frontier_phi_49_50_ladder_2;
            _2494 = frontier_phi_49_50_ladder;
        }
        float _2499 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2105 = (_2499 * _2490) + _1803;
        _2107 = (_2499 * _2492) + _1804;
        _2109 = (_2499 * _2494) + _1805;
        _2111 = ((_2484 * 0.039999999105930328369140625) * _2499) + _1966;
        _2113 = ((_2486 * 0.039999999105930328369140625) * _2499) + _1967;
        _2115 = ((_2488 * 0.039999999105930328369140625) * _2499) + _1968;
    }
    else
    {
        _2105 = _1803;
        _2107 = _1804;
        _2109 = _1805;
        _2111 = _1966;
        _2113 = _1967;
        _2115 = _1968;
    }
    float _2129 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2130 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2131 = cbSceneParam._m0[86u].x * (_1643 + ((_622 * cbMtdParam._m0[13u].y) * dot(vec3(_503, _504, _505), vec3(_201, _202, _203))));
    float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
    float _2133 = isnan(_2130) ? _534 : (isnan(_534) ? _2130 : min(_534, _2130));
    vec4 _2135 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2132, _2133), 0.0);
    float _2137 = _2135.x;
    bool _2158 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2137)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2137))) > _527;
    float _2159 = _2158 ? _2132 : _533;
    float _2160 = _2158 ? _2133 : _534;
    vec4 _2162 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2159, _2160));
    vec4 _2167 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2159, _2160));
    float _2169 = _2167.x;
    float _2189 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2169)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2169))) - _527;
    bool _2199 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2203 = (isnan(_2189) ? 0.0 : (isnan(0.0) ? _2189 : max(0.0, _2189))) * (-1.44269502162933349609375);
    float _4210 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4221 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4232 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2230 = 0.959999978542327880859375 - (exp2(log2(1.0 - _614) * 5.0) * 0.959999978542327880859375);
    float _2233 = ((_2162.x * _2230) * exp2(_2203 * (_2199 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2236 = ((_2162.y * _2230) * exp2(_2203 * (_2199 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2239 = ((_2162.z * _2230) * exp2(_2203 * (_2199 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2261 = _533 / cbSceneParam._m0[86u].x;
    float _2262 = _534 / cbSceneParam._m0[86u].y;
    vec4 _2276 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, (log2((isnan(cbSceneParam._m0[77u].w) ? _527 : (isnan(_527) ? cbSceneParam._m0[77u].w : min(_527, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2278 = _2276.x;
    float _2279 = _2276.y;
    float _2280 = _2276.z;
    float _2281 = _2276.w;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    if (_527 > cbSceneParam._m0[78u].w)
    {
        float _2340 = isnan(_527) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _527 : min(cbSceneParam._m0[80u].w, _527));
        float _2341 = _2340 / _527;
        float _2352 = _2341 * _271;
        float _2353 = _272 * _2341;
        float _2354 = (-0.0) - _2353;
        float _2355 = _2341 * _273;
        float _2357 = (cbSceneParam._m0[77u].w * _2354) / _2340;
        float _2358 = _2357 + cbSceneParam._m0[79u].w;
        float _2359 = cbSceneParam._m0[79u].w - _2353;
        float _2365 = sqrt(((_2352 * _2352) + (_2353 * _2353)) + (_2355 * _2355));
        float _2368 = (1.0 - (cbSceneParam._m0[77u].w / _2340)) * _2365;
        float _2373 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2374 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2606;
        if (abs((_2354 - _2357) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2606 = ((((_2358 > 0.0) ? exp2(_2373 * _2358) : (2.0 - exp2(_2374 * _2358))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2368;
        }
        else
        {
            float _2545 = 1.0 / cbSceneParam._m0[80u].x;
            float _2546 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : max(_2358, _2359));
            float _2547 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : min(_2358, _2359));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            _2606 = ((abs(_2365 / _2354) * cbSceneParam._m0[80u].y) * ((((_2556 - _2557) * 2.0) - ((exp2(_2373 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0)))) - exp2(_2373 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))))) * _2545)) - ((exp2(_2374 * _2556) - exp2(_2374 * _2557)) * _2545))) + (_2368 * cbSceneParam._m0[80u].z);
        }
        vec4 _2608 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, 1.0), 0.0);
        float _2617 = exp2((_2606 * (-1.44269502162933349609375)) * (1.0 - _2608.w));
        float _2618 = log2(_2617);
        float _2634 = log2(_2281);
        _2376 = (exp2(_2634 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2618 * cbSceneParam._m0[78u].x)) * _2608.x) / cbSceneParam._m0[78u].x)) + _2278;
        _2378 = (exp2(_2634 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2618 * cbSceneParam._m0[78u].y)) * _2608.y) / cbSceneParam._m0[78u].y)) + _2279;
        _2380 = (exp2(_2634 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2618 * cbSceneParam._m0[78u].z)) * _2608.z) / cbSceneParam._m0[78u].z)) + _2280;
        _2382 = _2617 * _2281;
    }
    else
    {
        _2376 = _2278;
        _2378 = _2279;
        _2380 = _2280;
        _2382 = _2281;
    }
    bool _2394 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2395 = log2(_2382);
    float _2402 = exp2(_2395 * cbSceneParam._m0[78u].x) * ((_2233 + (((((_1620 * _1668.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1413) * _1684)) + _2111) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2105 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _599))) - _2233) * cbMtdParam._m0[15u].x));
    float _2403 = exp2(_2395 * cbSceneParam._m0[78u].y) * ((_2236 + (((((_1620 * _1668.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1413) * _1684)) + _2113) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2107 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _599))) - _2236) * cbMtdParam._m0[15u].x));
    float _2404 = exp2(_2395 * cbSceneParam._m0[78u].z) * ((_2239 + (((((_1620 * _1668.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1413) * _1684)) + _2115) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2109 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _599))) - _2239) * cbMtdParam._m0[15u].x));
    vec4 _2412 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_533, _534));
    float _2414 = _2412.x;
    float _2435 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2414)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2414))) - _527) * cbMtdParam._m0[14u].z;
    float _4283 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2437 = (cbInstanceData._m0[_574 + 6u].w * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)));
    float _2446 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2446 * (_2394 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2376)));
    SV_Target.y = _2446 * (_2394 ? _2403 : (_2403 + (cbSceneParam._m0[72u].w * _2378)));
    SV_Target.z = _2446 * (_2394 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2380)));
    SV_Target.w = _2437;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2437;
}


