#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1046;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _207 = _206 * _199;
    float _208 = _206 * _200;
    float _209 = _206 * _201;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    float _288 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _289 = _288 * _277;
    float _290 = _288 * _278;
    float _291 = _288 * _279;
    float _299 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _300 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _314 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8, SS_BumpMap), vec2((_299 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_300 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _322 = (_314.x * 2.0) + (-1.0);
    float _324 = (_314.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3726 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    float _353 = (dot(vec4(_289, _290, _291, 0.0), vec4(_344 * _334, _344 * _337, _344 * _340, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _366 = dot(vec3(_277, _278, _279), vec3(_207, _208, _209));
    float _369 = dot(vec3(_277, _278, _279), vec3(_221, _222, _223));
    float _372 = dot(vec3(_277, _278, _279), vec3(_214, _215, _216));
    float _378 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _399 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _419 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_366 * cbMtdParam._m0[12u].x) * _378) * _399) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_369 * cbMtdParam._m0[12u].x) * _378) * _399) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _442 = dot(vec4(_289, _290, _291, 0.0), vec4(_214, _215, _216, 0.0)) - cbMtdParam._m0[12u].w;
    float _3737 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _449 = exp2(log2(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _464 = (((((sin(_353) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _419.x) * cbMtdParam._m0[9u].x) * ((_449 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _473 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _419.y) * cbMtdParam._m0[9u].y) * ((_449 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_353 * 0.85000002384185791015625) + 1.0);
    float _482 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _419.z) * cbMtdParam._m0[9u].z) * ((_449 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_353 * 0.699999988079071044921875) + 1.0);
    vec4 _494 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _498 = cbMtdParam._m0[12u].z * _494.x;
    vec4 _511 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3753 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = sqrt(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))));
    float _527 = cbMtdParam._m0[14u].w + _511.z;
    vec4 _539 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _299) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _300) + cbTextureTilingScale._m0[1u].w));
    float _543 = cbMtdParam._m0[13u].w * _539.x;
    float _561 = fma(_525, _214, fma(_519, _221, _518 * _207));
    float _564 = fma(_525, _215, fma(_519, _222, _518 * _208));
    float _567 = fma(_525, _216, fma(_519, _223, _518 * _209));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3764 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3775 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _576 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _577 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3791 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3802 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3813 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _626 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _629 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _642 = uint(roundEven(NORMAL.w)) * 13u;
    uint _644 = (_642 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3824 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _664 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _667 = _664.x * TEXCOORD.z;
    float _668 = dot(vec3(_572, _573, _574), vec3(_289, _290, _291));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _572) - _289;
    float _676 = (_671 * _573) - _290;
    float _677 = (_671 * _574) - _291;
    float _681 = abs(dot(vec3(_289, _290, _291), vec3(_572, _573, _574)));
    float _3857 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _690 = 10.0 / (_596 + 10.0);
    float _691 = sqrt(_576);
    float _703 = exp2((_691 * 5.0) * log2(1.0 - (_682 * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1045;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _774 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _778 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _803 = _735 + _572;
        float _804 = _739 + _573;
        float _805 = _743 + _574;
        float _815 = fma(_805, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803)) - _770;
        float _816 = fma(_805, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803)) - _774;
        float _817 = fma(_805, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803)) - _778;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_839.x + (-0.5));
        float _875 = _873 * (_839.y + (-0.5));
        float _876 = _873 * (_839.z + (-0.5));
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_846.x + (-0.5));
        float _885 = _883 * (_846.y + (-0.5));
        float _886 = _883 * (_846.z + (-0.5));
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_853.x + (-0.5));
        float _895 = _893 * (_853.y + (-0.5));
        float _896 = _893 * (_853.z + (-0.5));
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _927 = (dot(vec3(_572, _573, _574), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _937 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3905 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_939 + 1.0))) + _944) * _907;
        float _954 = _875 * 0.5;
        float _955 = _885 * 0.5;
        float _956 = _895 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_572, _573, _574), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3938 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_981 + 1.0))) + _986) * _908;
        float _996 = _876 * 0.5;
        float _997 = _886 * 0.5;
        float _998 = _896 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_572, _573, _574), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3971 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1023 + 1.0))) + _1028) * _909;
        _1045 = _876;
        _1047 = _875;
        _1048 = _874;
        _1049 = _886;
        _1050 = _885;
        _1051 = _884;
        _1052 = _896;
        _1053 = _895;
        _1054 = _894;
        _1055 = _909;
        _1056 = _908;
        _1057 = _907;
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _1046;
        _1047 = _1046;
        _1048 = _1046;
        _1049 = _1046;
        _1050 = _1046;
        _1051 = _1046;
        _1052 = _1046;
        _1053 = _1046;
        _1054 = _1046;
        _1055 = _1046;
        _1056 = _1046;
        _1057 = _1046;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1090 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1094 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1117 = _735 + _572;
        float _1118 = _739 + _573;
        float _1119 = _743 + _574;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_572, _573, _574), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4034 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_572, _573, _574), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4067 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_572, _573, _574), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4100 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1046;
        _1356 = _1046;
        _1357 = _1046;
        _1358 = _1046;
        _1359 = _1046;
        _1360 = _1046;
        _1361 = _1046;
        _1362 = _1046;
        _1363 = _1046;
        _1364 = _1046;
        _1365 = _1046;
        _1366 = _1046;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _675 * 0.5;
    float _1424 = _676 * 0.5;
    float _1425 = _677 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1045, _1049, _1052, _1055));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1553 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1556 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1584 = frontier_phi_14_12_ladder;
        }
        float _1807;
        if (_1553 > 0.0)
        {
            _1807 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1807 = frontier_phi_23_19_ladder;
        }
        float _2071;
        if (_1556 > 0.0)
        {
            _2071 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2071 = frontier_phi_35_30_ladder;
        }
        float _2073 = isnan(_1807) ? _1584 : (isnan(_1584) ? _1807 : min(_1584, _1807));
        float _2074 = isnan(_2071) ? _2073 : (isnan(_2073) ? _2071 : min(_2073, _2071));
        float _2078 = (_2074 * _1550) + _1539;
        float _2079 = (_2074 * _1553) + _1543;
        float _2080 = (_2074 * _1556) + _1547;
        float _2081 = _2074 * 9.9999997473787516355514526367188e-05;
        float _2083 = (-1.0) - _2081;
        float _2085 = _2081 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2080 > _2085) || ((_2080 < _2083) || ((_2079 > _2085) || ((_2079 < _2083) || ((_2078 < _2083) || (_2078 > _2085))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2080, cbModelParam._m0[9u].z, fma(_2079, cbModelParam._m0[9u].y, _2078 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2080, cbModelParam._m0[10u].z, fma(_2079, cbModelParam._m0[10u].y, _2078 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2080, cbModelParam._m0[11u].z, fma(_2079, cbModelParam._m0[11u].y, _2078 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_13_35_ladder = _2234.x * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2234.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2234.y * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_13_35_ladder;
        _1574 = frontier_phi_13_35_ladder_2;
        _1576 = frontier_phi_13_35_ladder_1;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1492);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1650 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1653 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1812;
        if (_1647 > 0.0)
        {
            _1812 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1812 = frontier_phi_25_21_ladder;
        }
        float _2098;
        if (_1650 > 0.0)
        {
            _2098 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2098 = frontier_phi_37_32_ladder;
        }
        float _2417;
        if (_1653 > 0.0)
        {
            _2417 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2417 = frontier_phi_46_44_ladder;
        }
        float _2419 = isnan(_2098) ? _1812 : (isnan(_1812) ? _2098 : min(_1812, _2098));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1647) + _1636;
        float _2425 = (_2420 * _1650) + _1640;
        float _2426 = (_2420 * _1653) + _1644;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2427;
        float _2430 = _2427 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2426 > _2430) || ((_2426 < _2428) || ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 < _2428) || (_2424 > _2430))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2426, cbModelParam._m0[17u].z, fma(_2425, cbModelParam._m0[17u].y, _2424 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2426, cbModelParam._m0[18u].z, fma(_2425, cbModelParam._m0[18u].y, _2424 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2426, cbModelParam._m0[19u].z, fma(_2425, cbModelParam._m0[19u].y, _2424 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_22_46_ladder = _2700.x * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2700.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2700.y * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_22_46_ladder;
        _1674 = frontier_phi_22_46_ladder_2;
        _1676 = frontier_phi_22_46_ladder_1;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1581);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _703) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_703 * _691)) * _667;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1572)) + _1572);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    float _1711 = _602 / cbSceneParam._m0[86u].x;
    float _1719 = (cbSceneParam._m0[88u].y * (1.0 - _576)) + cbSceneParam._m0[88u].z;
    float _4226 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 5.0;
    float _1726 = (_690 * cbMtdParam._m0[13u].z) * dot(vec3(_572, _573, _574), vec3(1.0, 0.0, 0.0));
    vec4 _1736 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1726 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1726 + _1711) * cbSceneParam._m0[86u].x, _603), _1721).w) + _1711) * cbSceneParam._m0[86u].x, _603), _1721);
    float _1752 = 1.0 - _1736.w;
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1798 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1799 = _1786 / _1798;
    float _1800 = _1790 / _1798;
    float _1801 = _1794 / _1798;
    float _1948;
    float _1949;
    float _1950;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1828 = ((uint(_1801 > cbSceneParam._m0[59u].y) + uint(_1801 > cbSceneParam._m0[59u].x)) + uint(_1801 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1829 = _1828 + 43u;
        uint _1837 = _1828 + 44u;
        uint _1845 = _1828 + 45u;
        uint _1853 = _1828 + 46u;
        float _1864 = fma(_1798, cbSceneParam._m0[_1829].w, fma(_1794, cbSceneParam._m0[_1829].z, fma(_1790, cbSceneParam._m0[_1829].y, _1786 * cbSceneParam._m0[_1829].x)));
        float _1868 = fma(_1798, cbSceneParam._m0[_1837].w, fma(_1794, cbSceneParam._m0[_1837].z, fma(_1790, cbSceneParam._m0[_1837].y, _1786 * cbSceneParam._m0[_1837].x)));
        float _1876 = fma(_1798, cbSceneParam._m0[_1853].w, fma(_1794, cbSceneParam._m0[_1853].z, fma(_1790, cbSceneParam._m0[_1853].y, _1786 * cbSceneParam._m0[_1853].x)));
        float _1881 = cbSceneParam._m0[33u].z * _1876;
        float _1883 = cbSceneParam._m0[33u].w * _1876;
        float _1886 = fma(_1798, cbSceneParam._m0[_1845].w, fma(_1794, cbSceneParam._m0[_1845].z, fma(_1790, cbSceneParam._m0[_1845].y, _1786 * cbSceneParam._m0[_1845].x))) / _1876;
        float _1934 = (cbSceneParam._m0[33u].x - sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801))) * cbSceneParam._m0[33u].y;
        float _4237 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1941 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 + _1864) / _1876, (_1883 + _1868) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 + _1864) / _1876, (_1868 - _1881) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 - _1881) / _1876, (_1868 - _1883) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 - _1883) / _1876, (_1881 + _1868) / _1876), _1886), 0.0)).x), vec4(0.25)));
        _1948 = 1.0 - (_1941 * cbSceneParam._m0[34u].x);
        _1949 = 1.0 - (_1941 * cbSceneParam._m0[34u].y);
        _1950 = 1.0 - (_1941 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1948 = 1.0;
        _1949 = 1.0;
        _1950 = 1.0;
    }
    float _2014;
    float _2016;
    float _2018;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2002 = fma(_1798, cbSceneParam._m0[63u].w, fma(_1794, cbSceneParam._m0[63u].z, fma(_1790, cbSceneParam._m0[63u].y, _1786 * cbSceneParam._m0[63u].x)));
        float _2003 = fma(_1798, cbSceneParam._m0[60u].w, fma(_1794, cbSceneParam._m0[60u].z, fma(_1790, cbSceneParam._m0[60u].y, _1786 * cbSceneParam._m0[60u].x))) / _2002;
        float _2004 = fma(_1798, cbSceneParam._m0[61u].w, fma(_1794, cbSceneParam._m0[61u].z, fma(_1790, cbSceneParam._m0[61u].y, _1786 * cbSceneParam._m0[61u].x))) / _2002;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2003 >= cbSceneParam._m0[64u].x) && (_2004 >= cbSceneParam._m0[64u].y)) && (_2003 <= cbSceneParam._m0[64u].z)) && (_2004 <= cbSceneParam._m0[64u].w))
        {
            float _2111 = fma(_1798, cbSceneParam._m0[62u].w, fma(_1794, cbSceneParam._m0[62u].z, fma(_1790, cbSceneParam._m0[62u].y, _1786 * cbSceneParam._m0[62u].x))) / _2002;
            float _2115 = isnan(cbSceneParam._m0[41u].w) ? _2111 : (isnan(_2111) ? cbSceneParam._m0[41u].w : max(_2111, cbSceneParam._m0[41u].w));
            float _2158 = (cbSceneParam._m0[33u].x - sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801))) * cbSceneParam._m0[33u].y;
            float _4253 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
            float _2165 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2003, cbSceneParam._m0[33u].w + _2004), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2003, _2004 - cbSceneParam._m0[33u].z), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2003 - cbSceneParam._m0[33u].z, _2004 - cbSceneParam._m0[33u].w), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2003 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2004), _2115), 0.0)).x), vec4(0.25)));
            float _2169 = 1.0 - (_2165 * cbSceneParam._m0[34u].x);
            float _2170 = 1.0 - (_2165 * cbSceneParam._m0[34u].y);
            float _2171 = 1.0 - (_2165 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2171) ? _1950 : (isnan(_1950) ? _2171 : min(_1950, _2171));
            frontier_phi_34_33_ladder_1 = isnan(_2170) ? _1949 : (isnan(_1949) ? _2170 : min(_1949, _2170));
            frontier_phi_34_33_ladder_2 = isnan(_2169) ? _1948 : (isnan(_1948) ? _2169 : min(_1948, _2169));
        }
        else
        {
            frontier_phi_34_33_ladder = _1950;
            frontier_phi_34_33_ladder_1 = _1949;
            frontier_phi_34_33_ladder_2 = _1948;
        }
        _2014 = frontier_phi_34_33_ladder_2;
        _2016 = frontier_phi_34_33_ladder_1;
        _2018 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2014 = _1948;
        _2016 = _1949;
        _2018 = _1950;
    }
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_642 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2031 = _667 + (-1.0);
    float _2034 = (cbLight._m0[_2026].x * _2031) + 1.0;
    float _2035 = (cbLight._m0[_2026].y * _2031) + 1.0;
    uint _2037 = _2025 + 4u;
    float _2048 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_572, _573, _574));
    float _2051 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    float _2052 = cbLight._m0[_2037].x * _2014;
    float _2053 = cbLight._m0[_2037].y * _2016;
    float _2054 = cbLight._m0[_2037].z * _2018;
    uint _2055 = _2025 + 5u;
    uint _2061 = _2025 | 1u;
    float _2067 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_572, _573, _574));
    float _2070 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    float _2243;
    float _2244;
    float _2245;
    if (_577 == 0.0)
    {
        float _4289 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _4300 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2180 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
        float _2182 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
        _2243 = ((cbLight._m0[_2055].x * _2070) * _2182) + ((_2052 * _2051) * _2180);
        _2244 = ((_2070 * cbLight._m0[_2055].y) * _2182) + ((_2053 * _2051) * _2180);
        _2245 = ((_2070 * cbLight._m0[_2055].z) * _2182) + ((_2054 * _2051) * _2180);
    }
    else
    {
        float _2192 = _2048 + _577;
        float _2195 = (_577 * 2.0) + 1.0;
        float _2196 = (isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) / _2195;
        float _2203 = _2067 + _577;
        float _2205 = (isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) / _2195;
        _2243 = (((_2205 * cbLight._m0[_2055].x) * _2070) + ((_2052 * _2196) * _2051)) * 0.3183098733425140380859375;
        _2244 = (((_2205 * cbLight._m0[_2055].y) * _2070) + ((_2053 * _2196) * _2051)) * 0.3183098733425140380859375;
        _2245 = (((_2205 * cbLight._m0[_2055].z) * _2070) + ((_2054 * _2196) * _2051)) * 0.3183098733425140380859375;
    }
    uint _2249 = _2025 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _576) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2025].x + _289;
    float _2268 = cbLight._m0[_2025].y + _290;
    float _2269 = cbLight._m0[_2025].z + _291;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2025].xyz));
    float _4321 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2281 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2282 = dot(vec3(_572, _573, _574), vec3(_2274, _2275, _2276));
    float _4343 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2274, _2275, _2276));
    float _4354 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2281 * ((_2280 * _2306) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2306) + _2266) * _2280))) * _2280;
    float _4365 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2335 = _2025 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _576) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2061].x + _289;
    float _2352 = cbLight._m0[_2061].y + _290;
    float _2353 = cbLight._m0[_2061].z + _291;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2061].xyz));
    float _4376 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2365 = dot(vec3(_572, _573, _574), vec3(_2358, _2359, _2360));
    float _4387 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2358, _2359, _2360));
    float _4398 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2387 = 1.0 - _2350;
    float _2397 = (0.5 / (((_2281 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2387) + _2350) * _2364))) * _2364;
    float _4409 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2409 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2070) + ((((cbLight._m0[_2249].x * _2014) * _2305) * _2319) * _2051);
    float _2410 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2070) + ((((cbLight._m0[_2249].y * _2016) * _2305) * _2319) * _2051);
    float _2411 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2070) + ((((cbLight._m0[_2249].z * _2018) * _2305) * _2319) * _2051);
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_2023.y == 0u)
    {
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.x;
        uint _2466 = uint((float(_2454.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2455))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2455)));
        float _2476 = (log2(_1801 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2477 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        uint _2480 = uint(isnan(14.0) ? _2477 : (isnan(_2477) ? 14.0 : min(_2477, 14.0)));
        uvec4 _2485 = texelFetch(g_lightClusterGridBuffer, int(((_2480 << 2u) + (_2466 << 6u)) >> 2u));
        uint _2486 = _2485.x;
        uint _2487 = _2454.z;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((((1u << ((_2487 >> 4u) & 15u)) + 4294967295u) & _2486) == 0u) || ((_2487 & 240u) == 0u))
        {
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
        }
        else
        {
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2896)
                {
                    frontier_phi_61_pred = _2880;
                    frontier_phi_61_pred_1 = _2881;
                    frontier_phi_61_pred_2 = _2885;
                    frontier_phi_61_pred_3 = _2884;
                    frontier_phi_61_pred_4 = _2883;
                    frontier_phi_61_pred_5 = _2882;
                }
                else
                {
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    uint _3010;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2895;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3014 = uint(findLSB(_3010)) + (_2886 << 5u);
                        uint _3011 = (_3010 + 4294967295u) & _3010;
                        uint _3016 = _3014 * 48u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3036 = (_3014 * 48u) + 4u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        float _3050 = _3049.x;
                        float _3051 = _3049.y;
                        float _3052 = _3049.z;
                        uint _3055 = (_3014 * 48u) + 8u;
                        vec3 _3066 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x));
                        uint _3071 = (_3014 * 48u) + 12u;
                        vec2 _3079 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x));
                        float _3085 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
                        float _3086 = _3085 * _1799;
                        float _3087 = _3085 * _1800;
                        float _3088 = _3085 * _1801;
                        float _3089 = _3030.x - _1799;
                        float _3090 = _3030.y - _1800;
                        float _3091 = _3030.z - _1801;
                        float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                        float _3095 = inversesqrt(_3092);
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3099 = dot(vec3(_623, _626, _629), vec3(_3096, _3097, _3098));
                        float _3104 = 1.0 - (_3092 * _3030.w);
                        float _4430 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3106 = sqrt(_3092) * _3049.w;
                        float _3109 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                        float _3110 = _3109 * _3109;
                        float _3111 = 1.0 - _3110;
                        float _3113 = (_3111 * _3111) * _577;
                        float _3116 = ((_3111 * _3099) + _3110) + _3113;
                        float _3121 = _3106 * _3106;
                        float _3125 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3105) / (((_3113 * 2.0) + 1.0) * ((_3121 * 0.699999988079071044921875) + 1.0));
                        float _3129 = dot(vec3(_3096, _3097, _3098), vec3(_3086, _3087, _3088));
                        float _4446 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3136 = dot(vec3((-0.0) - _3086, (-0.0) - _3087, (-0.0) - _3088), vec3(_623, _626, _629)) + 1.0;
                        float _3138 = (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * 0.5;
                        float _3146 = ((_3138 * _3138) * _3079.x) * exp2((_3079.y * 32.0) * log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))));
                        float _3148 = _577 / (_577 + 1.0);
                        float _3164 = (-0.0) - _1799;
                        float _3165 = (-0.0) - _1800;
                        float _3166 = (-0.0) - _1801;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3180 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _691;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3171 + _3096;
                        float _3192 = _3172 + _3097;
                        float _3193 = _3173 + _3098;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_623, _626, _629), vec3(_3171, _3172, _3173));
                        float _4462 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3205 = dot(vec3(_623, _626, _629), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4473 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3109 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3099) + _3214;
                        float _4484 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4495 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3212 * _3212) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125))) * _3105;
                        _2939 = (((((_3050 * 0.3183098733425140380859375) * _3148) * _3146) + _3050) * _3125) + _3007;
                        _2940 = (((((_3051 * 0.3183098733425140380859375) * _3148) * _3146) + _3051) * _3125) + _3008;
                        _2941 = (((((_3052 * 0.3183098733425140380859375) * _3148) * _3146) + _3052) * _3125) + _3009;
                        _2936 = (_3240 * _3066.x) + _3004;
                        _2937 = (_3240 * _3066.y) + _3005;
                        _2938 = (_3240 * _3066.z) + _3006;
                        if (_3011 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _3011;
                        }
                    }
                    frontier_phi_61_pred = _2936;
                    frontier_phi_61_pred_1 = _2937;
                    frontier_phi_61_pred_2 = _2941;
                    frontier_phi_61_pred_3 = _2940;
                    frontier_phi_61_pred_4 = _2939;
                    frontier_phi_61_pred_5 = _2938;
                }
                _2706 = frontier_phi_61_pred;
                _2708 = frontier_phi_61_pred_1;
                _2716 = frontier_phi_61_pred_2;
                _2714 = frontier_phi_61_pred_3;
                _2712 = frontier_phi_61_pred_4;
                _2710 = frontier_phi_61_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2706;
                    _2881 = _2708;
                    _2882 = _2710;
                    _2883 = _2712;
                    _2884 = _2714;
                    _2885 = _2716;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
        }
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.z;
        uint _2722 = (_2720 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2722) & _2486) == 0u)
        {
            _2848 = _2705;
            _2850 = _2707;
            _2852 = _2709;
            _2854 = _2711;
            _2856 = _2713;
            _2858 = _2715;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
            float _2874 = _2873 * _1799;
            float _2875 = _2873 * _1800;
            float _2876 = _2873 * _1801;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2722 < ((_2720 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2987 = _2705;
                float _2988 = _2707;
                float _2989 = _2709;
                float _2990 = _2711;
                float _2991 = _2713;
                float _2992 = _2715;
                uint _2993 = _2722;
                uint _3002;
                bool _3003;
                for (;;)
                {
                    _3002 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                    _3003 = _3002 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3003)
                    {
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2992;
                        frontier_phi_67_pred_2 = _2991;
                        frontier_phi_67_pred_3 = _2990;
                        frontier_phi_67_pred_4 = _2989;
                        frontier_phi_67_pred_5 = _2988;
                    }
                    else
                    {
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3258 = _2987;
                        float _3259 = _2988;
                        float _3260 = _2989;
                        float _3261 = _2990;
                        float _3262 = _2991;
                        float _3263 = _2992;
                        uint _3264 = _3002;
                        uint _3265;
                        vec4 _3290;
                        float _3291;
                        vec4 _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        vec3 _3321;
                        vec2 _3330;
                        vec4 _3345;
                        vec4 _3361;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3275 = ((_2993 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3264));
                            _3265 = (_3264 + 4294967295u) & _3264;
                            uint _3277 = _3275 * 40u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3291 = _3290.w;
                            uint _3293 = (_3275 * 40u) + 4u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.x;
                            _3308 = _3306.y;
                            _3309 = _3306.z;
                            uint _3311 = (_3275 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3275 * 40u) + 12u;
                            _3330 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x));
                            uint _3332 = (_3275 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3275 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3364 = (_3275 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3275 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_1801, _3396.z, fma(_1800, _3396.y, _3396.x * _1799)) + _3396.w;
                            _3409 = !((fma(_1801, _3377.z, fma(_1800, _3377.y, _3377.x * _1799)) + _3377.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3409)
                            {
                                float _3435 = _3290.x - _1799;
                                float _3436 = _3290.y - _1800;
                                float _3437 = _3290.z - _1801;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3291 * _3291));
                                float _4506 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3453 = sqrt(_3438) * _3306.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3457 = 1.0 - _3456;
                                float _3459 = (_3457 * _3457) * _577;
                                float _3462 = ((_3457 * dot(vec3(_3442, _3443, _3444), vec3(_623, _626, _629))) + _3456) + _3459;
                                float _3467 = _3453 * _3453;
                                float _3472 = (fma(_1801, _3345.z, fma(_1800, _3345.y, _3345.x * _1799)) + _3345.w) / _3408;
                                float _3473 = (fma(_1801, _3361.z, fma(_1800, _3361.y, _3361.x * _1799)) + _3361.w) / _3408;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4522 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3449) / (((_3459 * 2.0) + 1.0) * ((_3467 * 0.699999988079071044921875) + 1.0)));
                                float _3480 = (-0.0) - _2874;
                                float _3481 = (-0.0) - _2875;
                                float _3482 = (-0.0) - _2876;
                                float _3483 = dot(vec3(_3442, _3443, _3444), vec3(_2874, _2875, _2876));
                                float _4533 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3490 = dot(vec3(_3480, _3481, _3482), vec3(_623, _626, _629)) + 1.0;
                                float _3492 = (isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * 0.5;
                                float _3499 = ((_3492 * _3492) * _3330.x) * exp2((_3330.y * 32.0) * log2(isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))));
                                float _3501 = _577 / (_577 + 1.0);
                                float _3522 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3523 = 1.0 - _691;
                                float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                                float _3531 = _3530 * _3530;
                                float _3532 = _3531 * _3531;
                                float _3533 = _3442 - _2874;
                                float _3534 = _3443 - _2875;
                                float _3535 = _3444 - _2876;
                                float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                                float _3543 = dot(vec3(_623, _626, _629), vec3(_3480, _3481, _3482));
                                float _4549 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3547 = dot(vec3(_623, _626, _629), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                                float _4560 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                                float _3555 = _3455 * _3531;
                                float _3556 = _3555 * _3555;
                                float _3562 = ((1.0 - _3556) * dot(vec3(_623, _626, _629), vec3(_3442, _3443, _3444))) + _3556;
                                float _4571 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3564 = 1.0 - _3531;
                                float _3574 = (0.5 / (((_3563 * ((_3546 * _3564) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3531) * _3546))) * _3563;
                                float _4582 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3584 = (_3478 * _3449) * (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3554 * _3554) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = ((((_3309 * 0.3183098733425140380859375) * _3501) * _3499) + _3309) * _3479;
                                frontier_phi_73_pred_1 = ((((_3308 * 0.3183098733425140380859375) * _3501) * _3499) + _3308) * _3479;
                                frontier_phi_73_pred_2 = ((((_3307 * 0.3183098733425140380859375) * _3501) * _3499) + _3307) * _3479;
                                frontier_phi_73_pred_3 = _3584 * _3321.z;
                                frontier_phi_73_pred_4 = _3584 * _3321.y;
                                frontier_phi_73_pred_5 = _3584 * _3321.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3593 = frontier_phi_73_pred;
                            _3592 = frontier_phi_73_pred_1;
                            _3591 = frontier_phi_73_pred_2;
                            _3590 = frontier_phi_73_pred_3;
                            _3589 = frontier_phi_73_pred_4;
                            _3588 = frontier_phi_73_pred_5;
                            _3248 = _3591 + _3261;
                            _3249 = _3592 + _3262;
                            _3250 = _3593 + _3263;
                            _3245 = _3588 + _3258;
                            _3246 = _3589 + _3259;
                            _3247 = _3590 + _3260;
                            if (_3265 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3265;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3245;
                        frontier_phi_67_pred_1 = _3250;
                        frontier_phi_67_pred_2 = _3249;
                        frontier_phi_67_pred_3 = _3248;
                        frontier_phi_67_pred_4 = _3247;
                        frontier_phi_67_pred_5 = _3246;
                    }
                    _2849 = frontier_phi_67_pred;
                    _2859 = frontier_phi_67_pred_1;
                    _2857 = frontier_phi_67_pred_2;
                    _2855 = frontier_phi_67_pred_3;
                    _2853 = frontier_phi_67_pred_4;
                    _2851 = frontier_phi_67_pred_5;
                    uint _2994 = _2993 + 1u;
                    if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2987 = _2849;
                        _2988 = _2851;
                        _2989 = _2853;
                        _2990 = _2855;
                        _2991 = _2857;
                        _2992 = _2859;
                        _2993 = _2994;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2857;
                frontier_phi_55_56_ladder_1 = _2859;
                frontier_phi_55_56_ladder_2 = _2855;
                frontier_phi_55_56_ladder_3 = _2853;
                frontier_phi_55_56_ladder_4 = _2851;
                frontier_phi_55_56_ladder_5 = _2849;
            }
            else
            {
                frontier_phi_55_56_ladder = _2713;
                frontier_phi_55_56_ladder_1 = _2715;
                frontier_phi_55_56_ladder_2 = _2711;
                frontier_phi_55_56_ladder_3 = _2709;
                frontier_phi_55_56_ladder_4 = _2707;
                frontier_phi_55_56_ladder_5 = _2705;
            }
            _2848 = frontier_phi_55_56_ladder_5;
            _2850 = frontier_phi_55_56_ladder_4;
            _2852 = frontier_phi_55_56_ladder_3;
            _2854 = frontier_phi_55_56_ladder_2;
            _2856 = frontier_phi_55_56_ladder;
            _2858 = frontier_phi_55_56_ladder_1;
        }
        float _2863 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2499 = (_2863 * _2854) + _2243;
        _2501 = (_2863 * _2856) + _2244;
        _2503 = (_2863 * _2858) + _2245;
        _2505 = ((_2848 * 0.039999999105930328369140625) * _2863) + _2409;
        _2507 = ((_2850 * 0.039999999105930328369140625) * _2863) + _2410;
        _2509 = ((_2852 * 0.039999999105930328369140625) * _2863) + _2411;
    }
    else
    {
        _2499 = _2243;
        _2501 = _2244;
        _2503 = _2245;
        _2505 = _2409;
        _2507 = _2410;
        _2509 = _2411;
    }
    float _2523 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2524 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2525 = cbSceneParam._m0[86u].x * (_1711 + ((_690 * cbMtdParam._m0[13u].y) * dot(vec3(_572, _573, _574), vec3(_207, _208, _209))));
    float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
    float _2527 = isnan(_2524) ? _603 : (isnan(_603) ? _2524 : min(_603, _2524));
    vec4 _2529 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2526, _2527), 0.0);
    float _2531 = _2529.x;
    bool _2552 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2531)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2531))) > _596;
    float _2553 = _2552 ? _2526 : _602;
    float _2554 = _2552 ? _2527 : _603;
    vec4 _2556 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2553, _2554));
    vec4 _2561 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2553, _2554));
    float _2563 = _2561.x;
    float _2583 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2563)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2563))) - _596;
    bool _2593 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2597 = (isnan(_2583) ? 0.0 : (isnan(0.0) ? _2583 : max(0.0, _2583))) * (-1.44269502162933349609375);
    float _4613 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4624 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4635 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2624 = 0.959999978542327880859375 - (exp2(log2(1.0 - _682) * 5.0) * 0.959999978542327880859375);
    float _2627 = ((_2556.x * _2624) * exp2(_2597 * (_2593 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2630 = ((_2556.y * _2624) * exp2(_2597 * (_2593 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2633 = ((_2556.z * _2624) * exp2(_2597 * (_2593 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2655 = _602 / cbSceneParam._m0[86u].x;
    float _2656 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2730 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2731 = _2730 / _596;
        float _2742 = _2731 * _277;
        float _2743 = _278 * _2731;
        float _2744 = (-0.0) - _2743;
        float _2745 = _2731 * _279;
        float _2747 = (cbSceneParam._m0[77u].w * _2744) / _2730;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2743;
        float _2755 = sqrt(((_2742 * _2742) + (_2743 * _2743)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2730)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2744 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2764 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2911 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2949 = ((abs(_2755 / _2744) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2764 * _2920) - exp2(_2764 * _2921)) * _2909))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2675);
        _2766 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2768 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2770 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2772 = _2960 * _2675;
    }
    else
    {
        _2766 = _2672;
        _2768 = _2673;
        _2770 = _2674;
        _2772 = _2675;
    }
    bool _2784 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2785 = log2(_2772);
    float _2792 = exp2(_2785 * cbSceneParam._m0[78u].x) * ((_2627 + (((((_1688 * _1736.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1481) * _1752)) + _2505) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2499 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _667))) - _2627) * cbMtdParam._m0[15u].x));
    float _2793 = exp2(_2785 * cbSceneParam._m0[78u].y) * ((_2630 + (((((_1688 * _1736.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1481) * _1752)) + _2507) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2501 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _667))) - _2630) * cbMtdParam._m0[15u].x));
    float _2794 = exp2(_2785 * cbSceneParam._m0[78u].z) * ((_2633 + (((((_1688 * _1736.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1481) * _1752)) + _2509) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2503 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _667))) - _2633) * cbMtdParam._m0[15u].x));
    vec4 _2802 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_602, _603));
    float _2804 = _2802.x;
    float _2825 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2804)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2804))) - _596) * cbMtdParam._m0[14u].z;
    float _4686 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2827 = (cbInstanceData._m0[_642 + 6u].w * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)));
    float _2836 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2836 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2836 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2836 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = _2827;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2827;
}


