#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1044;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _205 = _204 * _197;
    float _206 = _204 * _198;
    float _207 = _204 * _199;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _286 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _287 = _286 * _275;
    float _288 = _286 * _276;
    float _289 = _286 * _277;
    float _297 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _298 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _312 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8, SS_BumpMap), vec2((_297 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_298 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _320 = (_312.x * 2.0) + (-1.0);
    float _322 = (_312.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3471 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    float _351 = (dot(vec4(_287, _288, _289, 0.0), vec4(_342 * _332, _342 * _335, _342 * _338, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _364 = dot(vec3(_275, _276, _277), vec3(_205, _206, _207));
    float _367 = dot(vec3(_275, _276, _277), vec3(_219, _220, _221));
    float _370 = dot(vec3(_275, _276, _277), vec3(_212, _213, _214));
    float _376 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _397 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _417 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_364 * cbMtdParam._m0[12u].x) * _376) * _397) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_367 * cbMtdParam._m0[12u].x) * _376) * _397) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _440 = dot(vec4(_287, _288, _289, 0.0), vec4(_212, _213, _214, 0.0)) - cbMtdParam._m0[12u].w;
    float _3482 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _447 = exp2(log2(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _462 = (((((sin(_351) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _417.x) * cbMtdParam._m0[9u].x) * ((_447 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _471 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _417.y) * cbMtdParam._m0[9u].y) * ((_447 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_351 * 0.85000002384185791015625) + 1.0);
    float _480 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _417.z) * cbMtdParam._m0[9u].z) * ((_447 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_351 * 0.699999988079071044921875) + 1.0);
    vec4 _492 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _496 = cbMtdParam._m0[12u].z * _492.x;
    vec4 _509 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    float _516 = (_509.x * 2.0) + (-1.0);
    float _517 = (_509.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3498 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _523 = sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))));
    float _525 = cbMtdParam._m0[14u].w + _509.z;
    vec4 _537 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _297) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _298) + cbTextureTilingScale._m0[1u].w));
    float _541 = cbMtdParam._m0[13u].w * _537.x;
    float _559 = fma(_523, _212, fma(_517, _219, _516 * _205));
    float _562 = fma(_523, _213, fma(_517, _220, _516 * _206));
    float _565 = fma(_523, _214, fma(_517, _221, _516 * _207));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3509 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3520 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _574 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _575 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3536 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3547 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3558 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _624 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _627 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _640 = uint(roundEven(NORMAL.w)) * 13u;
    uint _642 = (_640 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3569 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _665 = _662.x * TEXCOORD.z;
    float _666 = dot(vec3(_570, _571, _572), vec3(_287, _288, _289));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _570) - _287;
    float _674 = (_669 * _571) - _288;
    float _675 = (_669 * _572) - _289;
    float _679 = abs(dot(vec3(_287, _288, _289), vec3(_570, _571, _572)));
    float _3602 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _688 = 10.0 / (_594 + 10.0);
    float _689 = sqrt(_574);
    float _701 = exp2((_689 * 5.0) * log2(1.0 - (_680 * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _772 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _776 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _801 = _733 + _570;
        float _802 = _737 + _571;
        float _803 = _741 + _572;
        float _813 = fma(_803, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801)) - _768;
        float _814 = fma(_803, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801)) - _772;
        float _815 = fma(_803, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801)) - _776;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(_570, _571, _572), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3650 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_570, _571, _572), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3683 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_570, _571, _572), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3716 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1088 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1092 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1115 = _733 + _570;
        float _1116 = _737 + _571;
        float _1117 = _741 + _572;
        float _1127 = fma(_1117, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1084 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1088 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[35u].z) + ((((((_1092 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1183 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1150.x + (-0.5));
        float _1185 = _1183 * (_1150.y + (-0.5));
        float _1186 = _1183 * (_1150.z + (-0.5));
        float _1193 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1157.x + (-0.5));
        float _1195 = _1193 * (_1157.y + (-0.5));
        float _1196 = _1193 * (_1157.z + (-0.5));
        float _1203 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1164.x + (-0.5));
        float _1205 = _1203 * (_1164.y + (-0.5));
        float _1206 = _1203 * (_1164.z + (-0.5));
        float _1213 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1171.x + (-0.5));
        float _1215 = _1213 * (_1171.y + (-0.5));
        float _1216 = _1213 * (_1171.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_570, _571, _572), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3779 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1247 + 1.0))) + _1252) * _1217;
        float _1262 = _1185 * 0.5;
        float _1263 = _1195 * 0.5;
        float _1264 = _1205 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_570, _571, _572), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3812 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1289 + 1.0))) + _1294) * _1218;
        float _1304 = _1186 * 0.5;
        float _1305 = _1196 * 0.5;
        float _1306 = _1206 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_570, _571, _572), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3845 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1331 + 1.0))) + _1336) * _1219;
        _1353 = _1186;
        _1354 = _1185;
        _1355 = _1184;
        _1356 = _1196;
        _1357 = _1195;
        _1358 = _1194;
        _1359 = _1206;
        _1360 = _1205;
        _1361 = _1204;
        _1362 = _1219;
        _1363 = _1218;
        _1364 = _1217;
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1044;
        _1354 = _1044;
        _1355 = _1044;
        _1356 = _1044;
        _1357 = _1044;
        _1358 = _1044;
        _1359 = _1044;
        _1360 = _1044;
        _1361 = _1044;
        _1362 = _1044;
        _1363 = _1044;
        _1364 = _1044;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1400 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1403 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1406 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1377));
    float _1421 = _673 * 0.5;
    float _1422 = _674 * 0.5;
    float _1423 = _675 * 0.5;
    float _1424 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1427 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1430 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1464;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1437 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1441 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1445 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1452 = dot(vec4(cbModelParam._m0[39u]), vec4(_1421, _1422, _1423, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1475;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1466 = dot(vec4(cbModelParam._m0[40u]), vec4(_1421, _1422, _1423, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1479 = (_1475 * cbModelParam._m0[1u].x) + (_1464 * (1.0 - cbModelParam._m0[1u].x));
    float _1489 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _574);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1489 : min(cbModelParam._m0[25u].z, _1489));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1537 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1541 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1545 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1548 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1551 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1554 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1582;
        if (_1548 > 0.0)
        {
            _1582 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1582 = frontier_phi_14_12_ladder;
        }
        float _1826;
        if (_1551 > 0.0)
        {
            _1826 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1826 = frontier_phi_23_19_ladder;
        }
        float _2064;
        if (_1554 > 0.0)
        {
            _2064 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2064 = frontier_phi_34_30_ladder;
        }
        float _2066 = isnan(_1826) ? _1582 : (isnan(_1582) ? _1826 : min(_1582, _1826));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1548) + _1537;
        float _2072 = (_2067 * _1551) + _1541;
        float _2073 = (_2067 * _1554) + _1545;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2074;
        float _2078 = _2074 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 > _2078) || ((_2072 < _2076) || ((_2071 < _2076) || (_2071 > _2078))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2073, cbModelParam._m0[9u].z, fma(_2072, cbModelParam._m0[9u].y, _2071 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2073, cbModelParam._m0[10u].z, fma(_2072, cbModelParam._m0[10u].y, _2071 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2073, cbModelParam._m0[11u].z, fma(_2072, cbModelParam._m0[11u].y, _2071 * cbModelParam._m0[11u].x))), _1490);
            frontier_phi_13_34_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1570 = frontier_phi_13_34_ladder_2;
        _1572 = frontier_phi_13_34_ladder_1;
        _1574 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1490);
        _1570 = _1558.x * cbModelParam._m0[1u].y;
        _1572 = _1558.y * cbModelParam._m0[1u].y;
        _1574 = _1558.z * cbModelParam._m0[1u].y;
    }
    float _1578 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _574);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1578 : min(cbModelParam._m0[25u].w, _1578));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1648 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1651 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1831;
        if (_1645 > 0.0)
        {
            _1831 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1831 = frontier_phi_25_21_ladder;
        }
        float _2091;
        if (_1648 > 0.0)
        {
            _2091 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2091 = frontier_phi_36_32_ladder;
        }
        float _2554;
        if (_1651 > 0.0)
        {
            _2554 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2554 = frontier_phi_47_42_ladder;
        }
        float _2556 = isnan(_2091) ? _1831 : (isnan(_1831) ? _2091 : min(_1831, _2091));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _1645) + _1634;
        float _2562 = (_2557 * _1648) + _1638;
        float _2563 = (_2557 * _1651) + _1642;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2564;
        float _2567 = _2564 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2563 > _2567) || ((_2563 < _2565) || ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 < _2565) || (_2561 > _2567))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2563, cbModelParam._m0[17u].z, fma(_2562, cbModelParam._m0[17u].y, _2561 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2563, cbModelParam._m0[18u].z, fma(_2562, cbModelParam._m0[18u].y, _2561 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2563, cbModelParam._m0[19u].z, fma(_2562, cbModelParam._m0[19u].y, _2561 * cbModelParam._m0[19u].x))), _1579);
            frontier_phi_22_47_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_22_47_ladder_2;
        _1672 = frontier_phi_22_47_ladder_1;
        _1674 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1579);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _701) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_701 * _689)) * _665;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1570)) + _1570);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1572)) + _1572);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    float _1709 = _600 / cbSceneParam._m0[86u].x;
    float _1717 = (cbSceneParam._m0[88u].y * (1.0 - _574)) + cbSceneParam._m0[88u].z;
    float _3971 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1719 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 5.0;
    float _1724 = (_688 * cbMtdParam._m0[13u].z) * dot(vec3(_570, _571, _572), vec3(1.0, 0.0, 0.0));
    vec4 _1734 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1724 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1724 + _1709) * cbSceneParam._m0[86u].x, _601), _1719).w) + _1709) * cbSceneParam._m0[86u].x, _601), _1719);
    float _1750 = 1.0 - _1734.w;
    vec4 _1758 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_600, _601));
    float _1760 = _1758.w;
    float _1772 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1760);
    float _1773 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1760);
    float _1774 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1760);
    uvec4 _1778 = floatBitsToUint(cbInstanceData._m0[_640 + 5u]);
    uint _1780 = _1778.x * 14u;
    uint _1781 = _1780 + 13u;
    float _1786 = _665 + (-1.0);
    float _1789 = (cbLight._m0[_1781].x * _1786) + 1.0;
    float _1790 = (cbLight._m0[_1781].y * _1786) + 1.0;
    uint _1792 = _1780 + 4u;
    float _1803 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_570, _571, _572));
    float _1806 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    float _1807 = cbLight._m0[_1792].x * _1772;
    float _1808 = cbLight._m0[_1792].y * _1773;
    float _1809 = cbLight._m0[_1792].z * _1774;
    uint _1810 = _1780 + 5u;
    uint _1816 = _1780 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_570, _571, _572));
    float _1825 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    float _1890;
    float _1891;
    float _1892;
    if (_575 == 0.0)
    {
        float _3992 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _4003 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1844 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
        float _1846 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
        _1890 = ((cbLight._m0[_1810].x * _1825) * _1846) + ((_1807 * _1806) * _1844);
        _1891 = ((_1825 * cbLight._m0[_1810].y) * _1846) + ((_1808 * _1806) * _1844);
        _1892 = ((_1825 * cbLight._m0[_1810].z) * _1846) + ((_1809 * _1806) * _1844);
    }
    else
    {
        float _1856 = _1803 + _575;
        float _1859 = (_575 * 2.0) + 1.0;
        float _1860 = (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) / _1859;
        float _1867 = _1822 + _575;
        float _1869 = (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) / _1859;
        _1890 = (((_1869 * cbLight._m0[_1810].x) * _1825) + ((_1807 * _1860) * _1806)) * 0.3183098733425140380859375;
        _1891 = (((_1869 * cbLight._m0[_1810].y) * _1825) + ((_1808 * _1860) * _1806)) * 0.3183098733425140380859375;
        _1892 = (((_1869 * cbLight._m0[_1810].z) * _1825) + ((_1809 * _1860) * _1806)) * 0.3183098733425140380859375;
    }
    uint _1896 = _1780 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _574) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1780].x + _287;
    float _1915 = cbLight._m0[_1780].y + _288;
    float _1916 = cbLight._m0[_1780].z + _289;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1780].xyz));
    float _4024 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1928 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1929 = dot(vec3(_570, _571, _572), vec3(_1921, _1922, _1923));
    float _4046 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1921, _1922, _1923));
    float _4057 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = 1.0 - _1913;
    float _1964 = (0.5 / (((_1928 * ((_1927 * _1953) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1953) + _1913) * _1927))) * _1927;
    float _4068 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1982 = _1780 + 9u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _574) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1816].x + _287;
    float _1999 = cbLight._m0[_1816].y + _288;
    float _2000 = cbLight._m0[_1816].z + _289;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1816].xyz));
    float _4079 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2012 = dot(vec3(_570, _571, _572), vec3(_2005, _2006, _2007));
    float _4090 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2005, _2006, _2007));
    float _4101 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1997 * _1997;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2033 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2034 = 1.0 - _1997;
    float _2044 = (0.5 / (((_1928 * ((_2011 * _2034) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2034) + _1997) * _2011))) * _2011;
    float _4112 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    float _2056 = (((_2033 * cbLight._m0[_1982].x) * _2046) * _1825) + ((((cbLight._m0[_1896].x * _1772) * _1952) * _1966) * _1806);
    float _2057 = (((_2033 * cbLight._m0[_1982].y) * _2046) * _1825) + ((((cbLight._m0[_1896].y * _1773) * _1952) * _1966) * _1806);
    float _2058 = (((_2033 * cbLight._m0[_1982].z) * _2046) * _1825) + ((((cbLight._m0[_1896].z * _1774) * _1952) * _1966) * _1806);
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_1778.y == 0u)
    {
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2135;
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2135;
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2135;
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.x;
        uint _2162 = uint((float(_2150.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2151))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2151)));
        float _2172 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2173 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        uint _2176 = uint(isnan(14.0) ? _2173 : (isnan(_2173) ? 14.0 : min(_2173, 14.0)));
        uvec4 _2181 = texelFetch(g_lightClusterGridBuffer, int(((_2176 << 2u) + (_2162 << 6u)) >> 2u));
        uint _2182 = _2181.x;
        uint _2183 = _2150.z;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((((1u << ((_2183 >> 4u) & 15u)) + 4294967295u) & _2182) == 0u) || ((_2183 & 240u) == 0u))
        {
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
        }
        else
        {
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            uint _2618 = 0u;
            uint _2627;
            bool _2628;
            for (;;)
            {
                _2627 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2618 << 2u)) >> 2u)).x;
                _2628 = _2627 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2628)
                {
                    frontier_phi_56_pred = _2612;
                    frontier_phi_56_pred_1 = _2617;
                    frontier_phi_56_pred_2 = _2616;
                    frontier_phi_56_pred_3 = _2615;
                    frontier_phi_56_pred_4 = _2614;
                    frontier_phi_56_pred_5 = _2613;
                }
                else
                {
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    uint _2763;
                    _2757 = _2612;
                    _2758 = _2613;
                    _2759 = _2614;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2627;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    for (;;)
                    {
                        uint _2767 = uint(findLSB(_2763)) + (_2618 << 5u);
                        uint _2764 = (_2763 + 4294967295u) & _2763;
                        uint _2769 = _2767 * 48u;
                        vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2789 = (_2767 * 48u) + 4u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        float _2803 = _2802.x;
                        float _2804 = _2802.y;
                        float _2805 = _2802.z;
                        uint _2808 = (_2767 * 48u) + 8u;
                        vec3 _2819 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x));
                        uint _2824 = (_2767 * 48u) + 12u;
                        vec2 _2832 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x));
                        float _2838 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
                        float _2839 = _2838 * _2136;
                        float _2840 = _2838 * _2137;
                        float _2841 = _2838 * _2138;
                        float _2842 = _2783.x - _2136;
                        float _2843 = _2783.y - _2137;
                        float _2844 = _2783.z - _2138;
                        float _2845 = dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844));
                        float _2848 = inversesqrt(_2845);
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2852 = dot(vec3(_621, _624, _627), vec3(_2849, _2850, _2851));
                        float _2857 = 1.0 - (_2845 * _2783.w);
                        float _4133 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2859 = sqrt(_2845) * _2802.w;
                        float _2862 = 1.39999997615814208984375 / (_2859 + 1.39999997615814208984375);
                        float _2863 = _2862 * _2862;
                        float _2864 = 1.0 - _2863;
                        float _2866 = (_2864 * _2864) * _575;
                        float _2869 = ((_2864 * _2852) + _2863) + _2866;
                        float _2874 = _2859 * _2859;
                        float _2878 = ((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2858) / (((_2866 * 2.0) + 1.0) * ((_2874 * 0.699999988079071044921875) + 1.0));
                        float _2882 = dot(vec3(_2849, _2850, _2851), vec3(_2839, _2840, _2841));
                        float _4149 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2889 = dot(vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841), vec3(_621, _624, _627)) + 1.0;
                        float _2891 = (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * 0.5;
                        float _2899 = ((_2891 * _2891) * _2832.x) * exp2((_2832.y * 32.0) * log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))));
                        float _2901 = _575 / (_575 + 1.0);
                        float _2917 = (-0.0) - _2136;
                        float _2918 = (-0.0) - _2137;
                        float _2919 = (-0.0) - _2138;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2934 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                        float _2935 = 1.0 - _689;
                        float _2942 = sqrt(1.0 - ((1.0 - (_2935 * _2935)) * (1.0 - (_2934 * _2934))));
                        float _2943 = _2942 * _2942;
                        float _2944 = _2943 * _2943;
                        float _2945 = _2924 + _2849;
                        float _2946 = _2925 + _2850;
                        float _2947 = _2926 + _2851;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2955 = dot(vec3(_621, _624, _627), vec3(_2924, _2925, _2926));
                        float _4165 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2959 = dot(vec3(_621, _624, _627), vec3(_2951 * _2945, _2951 * _2946, _2951 * _2947));
                        float _4176 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2966 = ((_2962 * _2962) * (_2944 + (-1.0))) + 1.0;
                        float _2967 = _2862 * _2943;
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2852) + _2968;
                        float _4187 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2973 = 1.0 - _2943;
                        float _2983 = (0.5 / (((_2972 * ((_2958 * _2973) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2972 * _2973) + _2943) * _2958))) * _2972;
                        float _4198 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2994 = (((_2944 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_2966 * _2966) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125))) * _2858;
                        _2692 = (((((_2803 * 0.3183098733425140380859375) * _2901) * _2899) + _2803) * _2878) + _2760;
                        _2693 = (((((_2804 * 0.3183098733425140380859375) * _2901) * _2899) + _2804) * _2878) + _2761;
                        _2694 = (((((_2805 * 0.3183098733425140380859375) * _2901) * _2899) + _2805) * _2878) + _2762;
                        _2689 = (_2994 * _2819.x) + _2757;
                        _2690 = (_2994 * _2819.y) + _2758;
                        _2691 = (_2994 * _2819.z) + _2759;
                        if (_2764 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2764;
                        }
                    }
                    frontier_phi_56_pred = _2689;
                    frontier_phi_56_pred_1 = _2694;
                    frontier_phi_56_pred_2 = _2693;
                    frontier_phi_56_pred_3 = _2692;
                    frontier_phi_56_pred_4 = _2691;
                    frontier_phi_56_pred_5 = _2690;
                }
                _2412 = frontier_phi_56_pred;
                _2422 = frontier_phi_56_pred_1;
                _2420 = frontier_phi_56_pred_2;
                _2418 = frontier_phi_56_pred_3;
                _2416 = frontier_phi_56_pred_4;
                _2414 = frontier_phi_56_pred_5;
                uint _2619 = _2618 + 1u;
                if (_2619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2612 = _2412;
                    _2613 = _2414;
                    _2614 = _2416;
                    _2615 = _2418;
                    _2616 = _2420;
                    _2617 = _2422;
                    _2618 = _2619;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
        }
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.z;
        uint _2428 = (_2426 >> 8u) & 15u;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((4294967295u << _2428) & _2182) == 0u)
        {
            _2580 = _2411;
            _2582 = _2413;
            _2584 = _2415;
            _2586 = _2417;
            _2588 = _2419;
            _2590 = _2421;
        }
        else
        {
            float _2605 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _2606 = _2605 * _2136;
            float _2607 = _2605 * _2137;
            float _2608 = _2605 * _2138;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2428 < ((_2426 >> 12u) & 15u))
            {
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2740 = _2411;
                float _2741 = _2413;
                float _2742 = _2415;
                float _2743 = _2417;
                float _2744 = _2419;
                float _2745 = _2421;
                uint _2746 = _2428;
                uint _2755;
                bool _2756;
                for (;;)
                {
                    _2755 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2746 << 2u)) >> 2u)).x;
                    _2756 = _2755 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2756)
                    {
                        frontier_phi_62_pred = _2745;
                        frontier_phi_62_pred_1 = _2744;
                        frontier_phi_62_pred_2 = _2743;
                        frontier_phi_62_pred_3 = _2742;
                        frontier_phi_62_pred_4 = _2741;
                        frontier_phi_62_pred_5 = _2740;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3012 = _2740;
                        float _3013 = _2741;
                        float _3014 = _2742;
                        float _3015 = _2743;
                        float _3016 = _2744;
                        float _3017 = _2745;
                        uint _3018 = _2755;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        vec3 _3075;
                        vec2 _3084;
                        vec4 _3099;
                        vec4 _3115;
                        float _3162;
                        bool _3163;
                        for (;;)
                        {
                            uint _3029 = ((_2746 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3061 = _3060.x;
                            _3062 = _3060.y;
                            _3063 = _3060.z;
                            uint _3065 = (_3029 * 40u) + 8u;
                            _3075 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x));
                            uint _3077 = (_3029 * 40u) + 12u;
                            _3084 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x));
                            uint _3086 = (_3029 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3102 = (_3029 * 40u) + 20u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3118 = (_3029 * 40u) + 24u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3137 = (_3029 * 40u) + 28u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3162 = fma(_2138, _3150.z, fma(_2137, _3150.y, _3150.x * _2136)) + _3150.w;
                            _3163 = !((fma(_2138, _3131.z, fma(_2137, _3131.y, _3131.x * _2136)) + _3131.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3163)
                            {
                                float _3189 = _3044.x - _2136;
                                float _3190 = _3044.y - _2137;
                                float _3191 = _3044.z - _2138;
                                float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                                float _3195 = inversesqrt(_3192);
                                float _3196 = _3195 * _3189;
                                float _3197 = _3195 * _3190;
                                float _3198 = _3195 * _3191;
                                float _3202 = 1.0 - (_3192 / (_3045 * _3045));
                                float _4209 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3207 = sqrt(_3192) * _3060.w;
                                float _3209 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                                float _3210 = _3209 * _3209;
                                float _3211 = 1.0 - _3210;
                                float _3213 = (_3211 * _3211) * _575;
                                float _3216 = ((_3211 * dot(vec3(_3196, _3197, _3198), vec3(_621, _624, _627))) + _3210) + _3213;
                                float _3221 = _3207 * _3207;
                                float _3226 = (fma(_2138, _3099.z, fma(_2137, _3099.y, _3099.x * _2136)) + _3099.w) / _3162;
                                float _3227 = (fma(_2138, _3115.z, fma(_2137, _3115.y, _3115.x * _2136)) + _3115.w) / _3162;
                                float _3231 = 1.0 - dot(vec2(_3226, _3227), vec2(_3226, _3227));
                                float _4225 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3233 = _3232 * (((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3203) / (((_3213 * 2.0) + 1.0) * ((_3221 * 0.699999988079071044921875) + 1.0)));
                                float _3234 = (-0.0) - _2606;
                                float _3235 = (-0.0) - _2607;
                                float _3236 = (-0.0) - _2608;
                                float _3237 = dot(vec3(_3196, _3197, _3198), vec3(_2606, _2607, _2608));
                                float _4236 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3244 = dot(vec3(_3234, _3235, _3236), vec3(_621, _624, _627)) + 1.0;
                                float _3246 = (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * 0.5;
                                float _3253 = ((_3246 * _3246) * _3084.x) * exp2((_3084.y * 32.0) * log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))));
                                float _3255 = _575 / (_575 + 1.0);
                                float _3276 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3277 = 1.0 - _689;
                                float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                                float _3285 = _3284 * _3284;
                                float _3286 = _3285 * _3285;
                                float _3287 = _3196 - _2606;
                                float _3288 = _3197 - _2607;
                                float _3289 = _3198 - _2608;
                                float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                                float _3297 = dot(vec3(_621, _624, _627), vec3(_3234, _3235, _3236));
                                float _4252 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3301 = dot(vec3(_621, _624, _627), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                                float _4263 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                                float _3309 = _3209 * _3285;
                                float _3310 = _3309 * _3309;
                                float _3316 = ((1.0 - _3310) * dot(vec3(_621, _624, _627), vec3(_3196, _3197, _3198))) + _3310;
                                float _4274 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3318 = 1.0 - _3285;
                                float _3328 = (0.5 / (((_3317 * ((_3300 * _3318) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3285) * _3300))) * _3317;
                                float _4285 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3338 = (_3232 * _3203) * (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3308 * _3308) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3063 * 0.3183098733425140380859375) * _3255) * _3253) + _3063) * _3233;
                                frontier_phi_68_pred_1 = ((((_3062 * 0.3183098733425140380859375) * _3255) * _3253) + _3062) * _3233;
                                frontier_phi_68_pred_2 = ((((_3061 * 0.3183098733425140380859375) * _3255) * _3253) + _3061) * _3233;
                                frontier_phi_68_pred_3 = _3338 * _3075.z;
                                frontier_phi_68_pred_4 = _3338 * _3075.y;
                                frontier_phi_68_pred_5 = _3338 * _3075.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_68_pred;
                            _3346 = frontier_phi_68_pred_1;
                            _3345 = frontier_phi_68_pred_2;
                            _3344 = frontier_phi_68_pred_3;
                            _3343 = frontier_phi_68_pred_4;
                            _3342 = frontier_phi_68_pred_5;
                            _3002 = _3345 + _3015;
                            _3003 = _3346 + _3016;
                            _3004 = _3347 + _3017;
                            _2999 = _3342 + _3012;
                            _3000 = _3343 + _3013;
                            _3001 = _3344 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _3004;
                        frontier_phi_62_pred_1 = _3003;
                        frontier_phi_62_pred_2 = _3002;
                        frontier_phi_62_pred_3 = _3001;
                        frontier_phi_62_pred_4 = _3000;
                        frontier_phi_62_pred_5 = _2999;
                    }
                    _2591 = frontier_phi_62_pred;
                    _2589 = frontier_phi_62_pred_1;
                    _2587 = frontier_phi_62_pred_2;
                    _2585 = frontier_phi_62_pred_3;
                    _2583 = frontier_phi_62_pred_4;
                    _2581 = frontier_phi_62_pred_5;
                    uint _2747 = _2746 + 1u;
                    if (_2747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2740 = _2581;
                        _2741 = _2583;
                        _2742 = _2585;
                        _2743 = _2587;
                        _2744 = _2589;
                        _2745 = _2591;
                        _2746 = _2747;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2591;
                frontier_phi_49_50_ladder_1 = _2587;
                frontier_phi_49_50_ladder_2 = _2589;
                frontier_phi_49_50_ladder_3 = _2585;
                frontier_phi_49_50_ladder_4 = _2583;
                frontier_phi_49_50_ladder_5 = _2581;
            }
            else
            {
                frontier_phi_49_50_ladder = _2421;
                frontier_phi_49_50_ladder_1 = _2417;
                frontier_phi_49_50_ladder_2 = _2419;
                frontier_phi_49_50_ladder_3 = _2415;
                frontier_phi_49_50_ladder_4 = _2413;
                frontier_phi_49_50_ladder_5 = _2411;
            }
            _2580 = frontier_phi_49_50_ladder_5;
            _2582 = frontier_phi_49_50_ladder_4;
            _2584 = frontier_phi_49_50_ladder_3;
            _2586 = frontier_phi_49_50_ladder_1;
            _2588 = frontier_phi_49_50_ladder_2;
            _2590 = frontier_phi_49_50_ladder;
        }
        float _2595 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2195 = (_2595 * _2586) + _1890;
        _2197 = (_2595 * _2588) + _1891;
        _2199 = (_2595 * _2590) + _1892;
        _2201 = ((_2580 * 0.039999999105930328369140625) * _2595) + _2056;
        _2203 = ((_2582 * 0.039999999105930328369140625) * _2595) + _2057;
        _2205 = ((_2584 * 0.039999999105930328369140625) * _2595) + _2058;
    }
    else
    {
        _2195 = _1890;
        _2197 = _1891;
        _2199 = _1892;
        _2201 = _2056;
        _2203 = _2057;
        _2205 = _2058;
    }
    float _2225 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2226 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2227 = cbSceneParam._m0[86u].x * ((_600 / cbSceneParam._m0[86u].x) + ((_688 * cbMtdParam._m0[13u].y) * dot(vec3(_570, _571, _572), vec3(_205, _206, _207))));
    float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
    float _2229 = isnan(_2226) ? _601 : (isnan(_601) ? _2226 : min(_601, _2226));
    vec4 _2231 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2228, _2229), 0.0);
    float _2233 = _2231.x;
    bool _2254 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2233)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2233))) > _594;
    float _2255 = _2254 ? _2228 : _600;
    float _2256 = _2254 ? _2229 : _601;
    vec4 _2258 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2255, _2256));
    vec4 _2263 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2255, _2256));
    float _2265 = _2263.x;
    float _2285 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2265)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2265))) - _594;
    bool _2295 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2299 = (isnan(_2285) ? 0.0 : (isnan(0.0) ? _2285 : max(0.0, _2285))) * (-1.44269502162933349609375);
    float _4316 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4327 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4338 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2326 = 0.959999978542327880859375 - (exp2(log2(1.0 - _680) * 5.0) * 0.959999978542327880859375);
    float _2329 = ((_2258.x * _2326) * exp2(_2299 * (_2295 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2332 = ((_2258.y * _2326) * exp2(_2299 * (_2295 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2335 = ((_2258.z * _2326) * exp2(_2299 * (_2295 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2357 = _600 / cbSceneParam._m0[86u].x;
    float _2358 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2436 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2437 = _2436 / _594;
        float _2448 = _2437 * _275;
        float _2449 = _276 * _2437;
        float _2450 = (-0.0) - _2449;
        float _2451 = _2437 * _277;
        float _2453 = (cbSceneParam._m0[77u].w * _2450) / _2436;
        float _2454 = _2453 + cbSceneParam._m0[79u].w;
        float _2455 = cbSceneParam._m0[79u].w - _2449;
        float _2461 = sqrt(((_2448 * _2448) + (_2449 * _2449)) + (_2451 * _2451));
        float _2464 = (1.0 - (cbSceneParam._m0[77u].w / _2436)) * _2461;
        float _2469 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2470 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2702;
        if (abs((_2450 - _2453) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2702 = ((((_2454 > 0.0) ? exp2(_2469 * _2454) : (2.0 - exp2(_2470 * _2454))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2464;
        }
        else
        {
            float _2641 = 1.0 / cbSceneParam._m0[80u].x;
            float _2642 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : max(_2454, _2455));
            float _2643 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : min(_2454, _2455));
            float _2652 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : min(_2642, 0.0));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            _2702 = ((abs(_2461 / _2450) * cbSceneParam._m0[80u].y) * ((((_2652 - _2653) * 2.0) - ((exp2(_2469 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0)))) - exp2(_2469 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0))))) * _2641)) - ((exp2(_2470 * _2652) - exp2(_2470 * _2653)) * _2641))) + (_2464 * cbSceneParam._m0[80u].z);
        }
        vec4 _2704 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2713 = exp2((_2702 * (-1.44269502162933349609375)) * (1.0 - _2704.w));
        float _2714 = log2(_2713);
        float _2730 = log2(_2377);
        _2472 = (exp2(_2730 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].x)) * _2704.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2474 = (exp2(_2730 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].y)) * _2704.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2476 = (exp2(_2730 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2714 * cbSceneParam._m0[78u].z)) * _2704.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2478 = _2713 * _2377;
    }
    else
    {
        _2472 = _2374;
        _2474 = _2375;
        _2476 = _2376;
        _2478 = _2377;
    }
    bool _2490 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2491 = log2(_2478);
    float _2498 = exp2(_2491 * cbSceneParam._m0[78u].x) * ((_2329 + (((((_1686 * _1734.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1479) * _1750)) + _2201) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2195 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _665))) - _2329) * cbMtdParam._m0[15u].x));
    float _2499 = exp2(_2491 * cbSceneParam._m0[78u].y) * ((_2332 + (((((_1686 * _1734.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1479) * _1750)) + _2203) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2197 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _665))) - _2332) * cbMtdParam._m0[15u].x));
    float _2500 = exp2(_2491 * cbSceneParam._m0[78u].z) * ((_2335 + (((((_1686 * _1734.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1479) * _1750)) + _2205) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2199 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _665))) - _2335) * cbMtdParam._m0[15u].x));
    vec4 _2508 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_600, _601));
    float _2510 = _2508.x;
    float _2531 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2510)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2510))) - _594) * cbMtdParam._m0[14u].z;
    float _4389 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (cbInstanceData._m0[_640 + 6u].w * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)));
    float _2542 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2542 * (_2490 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.y = _2542 * (_2490 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.z = _2542 * (_2490 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.w = _2533;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2533;
}


