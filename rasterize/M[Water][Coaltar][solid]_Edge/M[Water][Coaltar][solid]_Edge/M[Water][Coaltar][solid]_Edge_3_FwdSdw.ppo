#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _982;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _205 = _204 * _197;
    float _206 = _204 * _198;
    float _207 = _204 * _199;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _285 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _286 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _297 = dot(vec3(_275, _276, _277), vec3(_205, _206, _207));
    float _300 = dot(vec3(_275, _276, _277), vec3(_219, _220, _221));
    float _303 = dot(vec3(_275, _276, _277), vec3(_212, _213, _214));
    float _309 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _333 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _353 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_297 * cbMtdParam._m0[12u].x) * _309) * _333) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_300 * cbMtdParam._m0[12u].x) * _309) * _333) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _376 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _377 = _376 * _275;
    float _378 = _376 * _276;
    float _379 = _376 * _277;
    float _383 = dot(vec4(_377, _378, _379, 0.0), vec4(_212, _213, _214, 0.0)) - cbMtdParam._m0[12u].w;
    float _3663 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _390 = exp2(log2(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _405 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _353.x) * cbMtdParam._m0[9u].x) * ((_390 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _409 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _353.y) * cbMtdParam._m0[9u].y) * ((_390 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _413 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _353.z) * cbMtdParam._m0[9u].z) * ((_390 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _425 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _429 = cbMtdParam._m0[12u].z * _425.x;
    vec4 _442 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    float _450 = (_442.x * 2.0) + (-1.0);
    float _451 = (_442.y * 2.0) + (-1.0);
    float _452 = dot(vec2(_450, _451), vec2(_450, _451));
    float _3679 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    float _462 = cbMtdParam._m0[14u].w + _442.z;
    vec4 _474 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _285) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _286) + cbTextureTilingScale._m0[1u].w));
    float _478 = cbMtdParam._m0[13u].w * _474.x;
    float _496 = fma(_457, _212, fma(_451, _219, _450 * _205));
    float _499 = fma(_457, _213, fma(_451, _220, _450 * _206));
    float _502 = fma(_457, _214, fma(_451, _221, _450 * _207));
    float _506 = inversesqrt(dot(vec3(_496, _499, _502), vec3(_496, _499, _502)));
    float _507 = _506 * _496;
    float _508 = _506 * _499;
    float _509 = _506 * _502;
    float _3690 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3701 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _511 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _512 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3717 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3728 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3739 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _559 = fma(_509, cbSceneParam._m0[5u].z, fma(_508, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _507));
    float _562 = fma(_509, cbSceneParam._m0[6u].z, fma(_508, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _507));
    float _565 = fma(_509, cbSceneParam._m0[7u].z, fma(_508, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _507));
    uint _578 = uint(roundEven(NORMAL.w)) * 13u;
    uint _580 = (_578 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3750 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _603 = _600.x * TEXCOORD.z;
    float _604 = dot(vec3(_507, _508, _509), vec3(_377, _378, _379));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _507) - _377;
    float _612 = (_607 * _508) - _378;
    float _613 = (_607 * _509) - _379;
    float _617 = abs(dot(vec3(_377, _378, _379), vec3(_507, _508, _509)));
    float _3783 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _626 = 10.0 / (_531 + 10.0);
    float _627 = sqrt(_511);
    float _639 = exp2((_627 * 5.0) * log2(1.0 - (_618 * 0.999000012874603271484375))) / (4.0 - (_627 * 3.0));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _981;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _706 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _710 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _714 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _739 = _671 + _507;
        float _740 = _675 + _508;
        float _741 = _679 + _509;
        float _751 = fma(_741, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739)) - _706;
        float _752 = fma(_741, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739)) - _710;
        float _753 = fma(_741, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739)) - _714;
        float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
        float _770 = ((_757 * _751) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_706 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_757 * _752) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_710 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_757 * _753) / cbModelParam._m0[34u].z) + ((((((_714 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        float _809 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_775.x + (-0.5));
        float _811 = _809 * (_775.y + (-0.5));
        float _812 = _809 * (_775.z + (-0.5));
        float _819 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_782.x + (-0.5));
        float _821 = _819 * (_782.y + (-0.5));
        float _822 = _819 * (_782.z + (-0.5));
        float _829 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_789.x + (-0.5));
        float _831 = _829 * (_789.y + (-0.5));
        float _832 = _829 * (_789.z + (-0.5));
        float _839 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_796.x + (-0.5));
        float _841 = _839 * (_796.y + (-0.5));
        float _842 = _839 * (_796.z + (-0.5));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = _810 * 0.5;
        float _847 = _820 * 0.5;
        float _848 = _830 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _863 = (dot(vec3(_507, _508, _509), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _873 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3831 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_875 + 1.0))) + _880) * _843;
        float _890 = _811 * 0.5;
        float _891 = _821 * 0.5;
        float _892 = _831 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_507, _508, _509), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3864 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_917 + 1.0))) + _922) * _844;
        float _932 = _812 * 0.5;
        float _933 = _822 * 0.5;
        float _934 = _832 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_507, _508, _509), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3897 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_959 + 1.0))) + _964) * _845;
        _981 = _812;
        _983 = _811;
        _984 = _810;
        _985 = _822;
        _986 = _821;
        _987 = _820;
        _988 = _832;
        _989 = _831;
        _990 = _830;
        _991 = _845;
        _992 = _844;
        _993 = _843;
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
    }
    else
    {
        _981 = _982;
        _983 = _982;
        _984 = _982;
        _985 = _982;
        _986 = _982;
        _987 = _982;
        _988 = _982;
        _989 = _982;
        _990 = _982;
        _991 = _982;
        _992 = _982;
        _993 = _982;
        _994 = 0.0;
        _995 = 0.0;
        _996 = 0.0;
    }
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1022 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1026 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1030 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1053 = _671 + _507;
        float _1054 = _675 + _508;
        float _1055 = _679 + _509;
        float _1065 = fma(_1055, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053)) - _1022;
        float _1066 = fma(_1055, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053)) - _1026;
        float _1067 = fma(_1055, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053)) - _1030;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1022 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1026 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[35u].z) + ((((((_1030 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1121 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1088.x + (-0.5));
        float _1123 = _1121 * (_1088.y + (-0.5));
        float _1124 = _1121 * (_1088.z + (-0.5));
        float _1131 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1095.x + (-0.5));
        float _1133 = _1131 * (_1095.y + (-0.5));
        float _1134 = _1131 * (_1095.z + (-0.5));
        float _1141 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1102.x + (-0.5));
        float _1143 = _1141 * (_1102.y + (-0.5));
        float _1144 = _1141 * (_1102.z + (-0.5));
        float _1151 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1109.x + (-0.5));
        float _1153 = _1151 * (_1109.y + (-0.5));
        float _1154 = _1151 * (_1109.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_507, _508, _509), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3960 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1185 + 1.0))) + _1190) * _1155;
        float _1200 = _1123 * 0.5;
        float _1201 = _1133 * 0.5;
        float _1202 = _1143 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_507, _508, _509), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3993 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1227 + 1.0))) + _1232) * _1156;
        float _1242 = _1124 * 0.5;
        float _1243 = _1134 * 0.5;
        float _1244 = _1144 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_507, _508, _509), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4026 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1269 + 1.0))) + _1274) * _1157;
        _1291 = _1124;
        _1292 = _1123;
        _1293 = _1122;
        _1294 = _1134;
        _1295 = _1133;
        _1296 = _1132;
        _1297 = _1144;
        _1298 = _1143;
        _1299 = _1142;
        _1300 = _1157;
        _1301 = _1156;
        _1302 = _1155;
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _982;
        _1292 = _982;
        _1293 = _982;
        _1294 = _982;
        _1295 = _982;
        _1296 = _982;
        _1297 = _982;
        _1298 = _982;
        _1299 = _982;
        _1300 = _982;
        _1301 = _982;
        _1302 = _982;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1315));
    float _1359 = _611 * 0.5;
    float _1360 = _612 * 0.5;
    float _1361 = _613 * 0.5;
    float _1362 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1365 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1368 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1402;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1375 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_981, _985, _988, _991));
        float _1379 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_983, _986, _989, _992));
        float _1383 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_984, _987, _990, _993));
        float _1390 = dot(vec4(cbModelParam._m0[39u]), vec4(_1359, _1360, _1361, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1413;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1404 = dot(vec4(cbModelParam._m0[40u]), vec4(_1359, _1360, _1361, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1417 = (_1413 * cbModelParam._m0[1u].x) + (_1402 * (1.0 - cbModelParam._m0[1u].x));
    float _1427 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _511);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1427 : min(cbModelParam._m0[25u].z, _1427));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1489 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1492 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1520 = frontier_phi_14_12_ladder;
        }
        float _1743;
        if (_1489 > 0.0)
        {
            _1743 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1743 = frontier_phi_23_19_ladder;
        }
        float _2007;
        if (_1492 > 0.0)
        {
            _2007 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2007 = frontier_phi_35_30_ladder;
        }
        float _2009 = isnan(_1743) ? _1520 : (isnan(_1520) ? _1743 : min(_1520, _1743));
        float _2010 = isnan(_2007) ? _2009 : (isnan(_2009) ? _2007 : min(_2009, _2007));
        float _2014 = (_2010 * _1486) + _1475;
        float _2015 = (_2010 * _1489) + _1479;
        float _2016 = (_2010 * _1492) + _1483;
        float _2017 = _2010 * 9.9999997473787516355514526367188e-05;
        float _2019 = (-1.0) - _2017;
        float _2021 = _2017 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2016 > _2021) || ((_2016 < _2019) || ((_2015 > _2021) || ((_2015 < _2019) || ((_2014 < _2019) || (_2014 > _2021))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2016, cbModelParam._m0[9u].z, fma(_2015, cbModelParam._m0[9u].y, _2014 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2016, cbModelParam._m0[10u].z, fma(_2015, cbModelParam._m0[10u].y, _2014 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2016, cbModelParam._m0[11u].z, fma(_2015, cbModelParam._m0[11u].y, _2014 * cbModelParam._m0[11u].x))), _1428);
            frontier_phi_13_35_ladder = _2170.x * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2170.y * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_13_35_ladder;
        _1510 = frontier_phi_13_35_ladder_2;
        _1512 = frontier_phi_13_35_ladder_1;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1428);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _511);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1572 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1576 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1580 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1583 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1586 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1589 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1748;
        if (_1583 > 0.0)
        {
            _1748 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1748 = frontier_phi_25_21_ladder;
        }
        float _2034;
        if (_1586 > 0.0)
        {
            _2034 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2034 = frontier_phi_37_32_ladder;
        }
        float _2353;
        if (_1589 > 0.0)
        {
            _2353 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2353 = frontier_phi_46_44_ladder;
        }
        float _2355 = isnan(_2034) ? _1748 : (isnan(_1748) ? _2034 : min(_1748, _2034));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1583) + _1572;
        float _2361 = (_2356 * _1586) + _1576;
        float _2362 = (_2356 * _1589) + _1580;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_22_46_ladder = _2636.x * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2636.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2636.y * cbModelParam._m0[1u].z;
        }
        _1608 = frontier_phi_22_46_ladder;
        _1610 = frontier_phi_22_46_ladder_2;
        _1612 = frontier_phi_22_46_ladder_1;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1517);
        _1608 = _1592.x * cbModelParam._m0[1u].z;
        _1610 = _1592.y * cbModelParam._m0[1u].z;
        _1612 = _1592.z * cbModelParam._m0[1u].z;
    }
    float _1624 = ((((1.0 - _639) * ((_627 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_639 * _627)) * _603;
    float _1625 = _1624 * ((cbModelParam._m0[1u].w * (_1608 - _1508)) + _1508);
    float _1626 = _1624 * ((cbModelParam._m0[1u].w * (_1610 - _1510)) + _1510);
    float _1627 = _1624 * ((cbModelParam._m0[1u].w * (_1612 - _1512)) + _1512);
    float _1630 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, _1625 * cbSceneParam._m0[91u].x));
    float _1647 = _537 / cbSceneParam._m0[86u].x;
    float _1655 = (cbSceneParam._m0[88u].y * (1.0 - _511)) + cbSceneParam._m0[88u].z;
    float _4152 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1657 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 5.0;
    float _1662 = (_626 * cbMtdParam._m0[13u].z) * dot(vec3(_507, _508, _509), vec3(1.0, 0.0, 0.0));
    vec4 _1672 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1662 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1662 + _1647) * cbSceneParam._m0[86u].x, _538), _1657).w) + _1647) * cbSceneParam._m0[86u].x, _538), _1657);
    float _1688 = 1.0 - _1672.w;
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1726 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1730 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1735 = _1722 / _1734;
    float _1736 = _1726 / _1734;
    float _1737 = _1730 / _1734;
    float _1884;
    float _1885;
    float _1886;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1764 = ((uint(_1737 > cbSceneParam._m0[59u].y) + uint(_1737 > cbSceneParam._m0[59u].x)) + uint(_1737 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1765 = _1764 + 43u;
        uint _1773 = _1764 + 44u;
        uint _1781 = _1764 + 45u;
        uint _1789 = _1764 + 46u;
        float _1800 = fma(_1734, cbSceneParam._m0[_1765].w, fma(_1730, cbSceneParam._m0[_1765].z, fma(_1726, cbSceneParam._m0[_1765].y, _1722 * cbSceneParam._m0[_1765].x)));
        float _1804 = fma(_1734, cbSceneParam._m0[_1773].w, fma(_1730, cbSceneParam._m0[_1773].z, fma(_1726, cbSceneParam._m0[_1773].y, _1722 * cbSceneParam._m0[_1773].x)));
        float _1812 = fma(_1734, cbSceneParam._m0[_1789].w, fma(_1730, cbSceneParam._m0[_1789].z, fma(_1726, cbSceneParam._m0[_1789].y, _1722 * cbSceneParam._m0[_1789].x)));
        float _1817 = cbSceneParam._m0[33u].z * _1812;
        float _1819 = cbSceneParam._m0[33u].w * _1812;
        float _1822 = fma(_1734, cbSceneParam._m0[_1781].w, fma(_1730, cbSceneParam._m0[_1781].z, fma(_1726, cbSceneParam._m0[_1781].y, _1722 * cbSceneParam._m0[_1781].x))) / _1812;
        float _1870 = (cbSceneParam._m0[33u].x - sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737))) * cbSceneParam._m0[33u].y;
        float _4163 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1877 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 + _1800) / _1812, (_1819 + _1804) / _1812), _1822), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1819 + _1800) / _1812, (_1804 - _1817) / _1812), _1822), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1800 - _1817) / _1812, (_1804 - _1819) / _1812), _1822), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1800 - _1819) / _1812, (_1817 + _1804) / _1812), _1822), 0.0)).x), vec4(0.25)));
        _1884 = 1.0 - (_1877 * cbSceneParam._m0[34u].x);
        _1885 = 1.0 - (_1877 * cbSceneParam._m0[34u].y);
        _1886 = 1.0 - (_1877 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1884 = 1.0;
        _1885 = 1.0;
        _1886 = 1.0;
    }
    float _1950;
    float _1952;
    float _1954;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1938 = fma(_1734, cbSceneParam._m0[63u].w, fma(_1730, cbSceneParam._m0[63u].z, fma(_1726, cbSceneParam._m0[63u].y, _1722 * cbSceneParam._m0[63u].x)));
        float _1939 = fma(_1734, cbSceneParam._m0[60u].w, fma(_1730, cbSceneParam._m0[60u].z, fma(_1726, cbSceneParam._m0[60u].y, _1722 * cbSceneParam._m0[60u].x))) / _1938;
        float _1940 = fma(_1734, cbSceneParam._m0[61u].w, fma(_1730, cbSceneParam._m0[61u].z, fma(_1726, cbSceneParam._m0[61u].y, _1722 * cbSceneParam._m0[61u].x))) / _1938;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1939 >= cbSceneParam._m0[64u].x) && (_1940 >= cbSceneParam._m0[64u].y)) && (_1939 <= cbSceneParam._m0[64u].z)) && (_1940 <= cbSceneParam._m0[64u].w))
        {
            float _2047 = fma(_1734, cbSceneParam._m0[62u].w, fma(_1730, cbSceneParam._m0[62u].z, fma(_1726, cbSceneParam._m0[62u].y, _1722 * cbSceneParam._m0[62u].x))) / _1938;
            float _2051 = isnan(cbSceneParam._m0[41u].w) ? _2047 : (isnan(_2047) ? cbSceneParam._m0[41u].w : max(_2047, cbSceneParam._m0[41u].w));
            float _2094 = (cbSceneParam._m0[33u].x - sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737))) * cbSceneParam._m0[33u].y;
            float _4179 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
            float _2101 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1939, cbSceneParam._m0[33u].w + _1940), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1939, _1940 - cbSceneParam._m0[33u].z), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1939 - cbSceneParam._m0[33u].z, _1940 - cbSceneParam._m0[33u].w), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1939 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1940), _2051), 0.0)).x), vec4(0.25)));
            float _2105 = 1.0 - (_2101 * cbSceneParam._m0[34u].x);
            float _2106 = 1.0 - (_2101 * cbSceneParam._m0[34u].y);
            float _2107 = 1.0 - (_2101 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2107) ? _1886 : (isnan(_1886) ? _2107 : min(_1886, _2107));
            frontier_phi_34_33_ladder_1 = isnan(_2106) ? _1885 : (isnan(_1885) ? _2106 : min(_1885, _2106));
            frontier_phi_34_33_ladder_2 = isnan(_2105) ? _1884 : (isnan(_1884) ? _2105 : min(_1884, _2105));
        }
        else
        {
            frontier_phi_34_33_ladder = _1886;
            frontier_phi_34_33_ladder_1 = _1885;
            frontier_phi_34_33_ladder_2 = _1884;
        }
        _1950 = frontier_phi_34_33_ladder_2;
        _1952 = frontier_phi_34_33_ladder_1;
        _1954 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1950 = _1884;
        _1952 = _1885;
        _1954 = _1886;
    }
    uvec4 _1959 = floatBitsToUint(cbInstanceData._m0[_578 + 5u]);
    uint _1961 = _1959.x * 14u;
    uint _1962 = _1961 + 13u;
    float _1967 = _603 + (-1.0);
    float _1970 = (cbLight._m0[_1962].x * _1967) + 1.0;
    float _1971 = (cbLight._m0[_1962].y * _1967) + 1.0;
    uint _1973 = _1961 + 4u;
    float _1984 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_507, _508, _509));
    float _1987 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    float _1988 = cbLight._m0[_1973].x * _1950;
    float _1989 = cbLight._m0[_1973].y * _1952;
    float _1990 = cbLight._m0[_1973].z * _1954;
    uint _1991 = _1961 + 5u;
    uint _1997 = _1961 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_507, _508, _509));
    float _2006 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    float _2179;
    float _2180;
    float _2181;
    if (_512 == 0.0)
    {
        float _4215 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _4226 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2116 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
        float _2118 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
        _2179 = ((cbLight._m0[_1991].x * _2006) * _2118) + ((_1988 * _1987) * _2116);
        _2180 = ((_2006 * cbLight._m0[_1991].y) * _2118) + ((_1989 * _1987) * _2116);
        _2181 = ((_2006 * cbLight._m0[_1991].z) * _2118) + ((_1990 * _1987) * _2116);
    }
    else
    {
        float _2128 = _1984 + _512;
        float _2131 = (_512 * 2.0) + 1.0;
        float _2132 = (isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) / _2131;
        float _2139 = _2003 + _512;
        float _2141 = (isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) / _2131;
        _2179 = (((_2141 * cbLight._m0[_1991].x) * _2006) + ((_1988 * _2132) * _1987)) * 0.3183098733425140380859375;
        _2180 = (((_2141 * cbLight._m0[_1991].y) * _2006) + ((_1989 * _2132) * _1987)) * 0.3183098733425140380859375;
        _2181 = (((_2141 * cbLight._m0[_1991].z) * _2006) + ((_1990 * _2132) * _1987)) * 0.3183098733425140380859375;
    }
    uint _2185 = _1961 + 8u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _511) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_1961].x + _377;
    float _2204 = cbLight._m0[_1961].y + _378;
    float _2205 = cbLight._m0[_1961].z + _379;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_507, _508, _509), vec3(cbLight._m0[_1961].xyz));
    float _4247 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _2217 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2218 = dot(vec3(_507, _508, _509), vec3(_2210, _2211, _2212));
    float _4269 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2210, _2211, _2212));
    float _4280 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2202 * _2202;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2241 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2242 = 1.0 - _2202;
    float _2253 = (0.5 / (((_2217 * ((_2216 * _2242) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2242) + _2202) * _2216))) * _2216;
    float _4291 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    uint _2271 = _1961 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _511) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_1997].x + _377;
    float _2288 = cbLight._m0[_1997].y + _378;
    float _2289 = cbLight._m0[_1997].z + _379;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_507, _508, _509), vec3(cbLight._m0[_1997].xyz));
    float _4302 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2301 = dot(vec3(_507, _508, _509), vec3(_2294, _2295, _2296));
    float _4313 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2294, _2295, _2296));
    float _4324 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2323 = 1.0 - _2286;
    float _2333 = (0.5 / (((_2217 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2323) + _2286) * _2300))) * _2300;
    float _4335 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2345 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2006) + ((((cbLight._m0[_2185].x * _1950) * _2241) * _2255) * _1987);
    float _2346 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2006) + ((((cbLight._m0[_2185].y * _1952) * _2241) * _2255) * _1987);
    float _2347 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2006) + ((((cbLight._m0[_2185].z * _1954) * _2241) * _2255) * _1987);
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_1959.y == 0u)
    {
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.x;
        uint _2402 = uint((float(_2390.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _2391))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _2391)));
        float _2412 = (log2(_1737 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2413 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        uint _2416 = uint(isnan(14.0) ? _2413 : (isnan(_2413) ? 14.0 : min(_2413, 14.0)));
        uvec4 _2421 = texelFetch(g_lightClusterGridBuffer, int(((_2416 << 2u) + (_2402 << 6u)) >> 2u));
        uint _2422 = _2421.x;
        uint _2423 = _2390.z;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((((1u << ((_2423 >> 4u) & 15u)) + 4294967295u) & _2422) == 0u) || ((_2423 & 240u) == 0u))
        {
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
        }
        else
        {
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            uint _2822 = 0u;
            uint _2831;
            bool _2832;
            for (;;)
            {
                _2831 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                _2832 = _2831 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2832)
                {
                    frontier_phi_61_pred = _2816;
                    frontier_phi_61_pred_1 = _2817;
                    frontier_phi_61_pred_2 = _2821;
                    frontier_phi_61_pred_3 = _2820;
                    frontier_phi_61_pred_4 = _2819;
                    frontier_phi_61_pred_5 = _2818;
                }
                else
                {
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    uint _2946;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2831;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    for (;;)
                    {
                        uint _2950 = uint(findLSB(_2946)) + (_2822 << 5u);
                        uint _2947 = (_2946 + 4294967295u) & _2946;
                        uint _2952 = _2950 * 48u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2972 = (_2950 * 48u) + 4u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 3u)).x));
                        float _2986 = _2985.x;
                        float _2987 = _2985.y;
                        float _2988 = _2985.z;
                        uint _2991 = (_2950 * 48u) + 8u;
                        vec3 _3002 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x));
                        uint _3007 = (_2950 * 48u) + 12u;
                        vec2 _3015 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x));
                        float _3021 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
                        float _3022 = _3021 * _1735;
                        float _3023 = _3021 * _1736;
                        float _3024 = _3021 * _1737;
                        float _3025 = _2966.x - _1735;
                        float _3026 = _2966.y - _1736;
                        float _3027 = _2966.z - _1737;
                        float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                        float _3031 = inversesqrt(_3028);
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3035 = dot(vec3(_559, _562, _565), vec3(_3032, _3033, _3034));
                        float _3040 = 1.0 - (_3028 * _2966.w);
                        float _4356 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3042 = sqrt(_3028) * _2985.w;
                        float _3045 = 1.39999997615814208984375 / (_3042 + 1.39999997615814208984375);
                        float _3046 = _3045 * _3045;
                        float _3047 = 1.0 - _3046;
                        float _3049 = (_3047 * _3047) * _512;
                        float _3052 = ((_3047 * _3035) + _3046) + _3049;
                        float _3057 = _3042 * _3042;
                        float _3062 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3041) / (((_3049 * 2.0) + 1.0) * ((_3057 * 0.699999988079071044921875) + 1.0));
                        float _3066 = dot(vec3(_3032, _3033, _3034), vec3(_3022, _3023, _3024));
                        float _4372 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3073 = dot(vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024), vec3(_559, _562, _565)) + 1.0;
                        float _3075 = (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * 0.5;
                        float _3083 = ((_3075 * _3075) * _3015.x) * exp2((_3015.y * 32.0) * log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))));
                        float _3085 = _512 / (_512 + 1.0);
                        float _3101 = (-0.0) - _1735;
                        float _3102 = (-0.0) - _1736;
                        float _3103 = (-0.0) - _1737;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3117 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                        float _3118 = 1.0 - _627;
                        float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                        float _3126 = _3125 * _3125;
                        float _3127 = _3126 * _3126;
                        float _3128 = _3108 + _3032;
                        float _3129 = _3109 + _3033;
                        float _3130 = _3110 + _3034;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3138 = dot(vec3(_559, _562, _565), vec3(_3108, _3109, _3110));
                        float _4388 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3142 = dot(vec3(_559, _562, _565), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                        float _4399 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                        float _3150 = _3045 * _3126;
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3035) + _3151;
                        float _4410 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3156 = 1.0 - _3126;
                        float _3166 = (0.5 / (((_3155 * ((_3141 * _3156) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3126) * _3141))) * _3155;
                        float _4421 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3177 = (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3149 * _3149) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125))) * _3041;
                        _2875 = (((((_2986 * 0.3183098733425140380859375) * _3085) * _3083) + _2986) * _3062) + _2943;
                        _2876 = (((((_2987 * 0.3183098733425140380859375) * _3085) * _3083) + _2987) * _3062) + _2944;
                        _2877 = (((((_2988 * 0.3183098733425140380859375) * _3085) * _3083) + _2988) * _3062) + _2945;
                        _2872 = (_3177 * _3002.x) + _2940;
                        _2873 = (_3177 * _3002.y) + _2941;
                        _2874 = (_3177 * _3002.z) + _2942;
                        if (_2947 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2947;
                        }
                    }
                    frontier_phi_61_pred = _2872;
                    frontier_phi_61_pred_1 = _2873;
                    frontier_phi_61_pred_2 = _2877;
                    frontier_phi_61_pred_3 = _2876;
                    frontier_phi_61_pred_4 = _2875;
                    frontier_phi_61_pred_5 = _2874;
                }
                _2642 = frontier_phi_61_pred;
                _2644 = frontier_phi_61_pred_1;
                _2652 = frontier_phi_61_pred_2;
                _2650 = frontier_phi_61_pred_3;
                _2648 = frontier_phi_61_pred_4;
                _2646 = frontier_phi_61_pred_5;
                uint _2823 = _2822 + 1u;
                if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2816 = _2642;
                    _2817 = _2644;
                    _2818 = _2646;
                    _2819 = _2648;
                    _2820 = _2650;
                    _2821 = _2652;
                    _2822 = _2823;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
        }
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.z;
        uint _2658 = (_2656 >> 8u) & 15u;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((4294967295u << _2658) & _2422) == 0u)
        {
            _2784 = _2641;
            _2786 = _2643;
            _2788 = _2645;
            _2790 = _2647;
            _2792 = _2649;
            _2794 = _2651;
        }
        else
        {
            float _2809 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
            float _2810 = _2809 * _1735;
            float _2811 = _2809 * _1736;
            float _2812 = _2809 * _1737;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2658 < ((_2656 >> 12u) & 15u))
            {
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2923 = _2641;
                float _2924 = _2643;
                float _2925 = _2645;
                float _2926 = _2647;
                float _2927 = _2649;
                float _2928 = _2651;
                uint _2929 = _2658;
                uint _2938;
                bool _2939;
                for (;;)
                {
                    _2938 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                    _2939 = _2938 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2939)
                    {
                        frontier_phi_67_pred = _2923;
                        frontier_phi_67_pred_1 = _2928;
                        frontier_phi_67_pred_2 = _2927;
                        frontier_phi_67_pred_3 = _2926;
                        frontier_phi_67_pred_4 = _2925;
                        frontier_phi_67_pred_5 = _2924;
                    }
                    else
                    {
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3195 = _2923;
                        float _3196 = _2924;
                        float _3197 = _2925;
                        float _3198 = _2926;
                        float _3199 = _2927;
                        float _3200 = _2928;
                        uint _3201 = _2938;
                        uint _3202;
                        vec4 _3227;
                        float _3228;
                        vec4 _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        vec3 _3258;
                        vec2 _3267;
                        vec4 _3282;
                        vec4 _3298;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3212 = ((_2929 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3201));
                            _3202 = (_3201 + 4294967295u) & _3201;
                            uint _3214 = _3212 * 40u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3228 = _3227.w;
                            uint _3230 = (_3212 * 40u) + 4u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3244 = _3243.x;
                            _3245 = _3243.y;
                            _3246 = _3243.z;
                            uint _3248 = (_3212 * 40u) + 8u;
                            _3258 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x));
                            uint _3260 = (_3212 * 40u) + 12u;
                            _3267 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x));
                            uint _3269 = (_3212 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3212 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3301 = (_3212 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3212 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_1737, _3333.z, fma(_1736, _3333.y, _3333.x * _1735)) + _3333.w;
                            _3346 = !((fma(_1737, _3314.z, fma(_1736, _3314.y, _3314.x * _1735)) + _3314.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3346)
                            {
                                float _3372 = _3227.x - _1735;
                                float _3373 = _3227.y - _1736;
                                float _3374 = _3227.z - _1737;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3228 * _3228));
                                float _4432 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3390 = sqrt(_3375) * _3243.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3394 = 1.0 - _3393;
                                float _3396 = (_3394 * _3394) * _512;
                                float _3399 = ((_3394 * dot(vec3(_3379, _3380, _3381), vec3(_559, _562, _565))) + _3393) + _3396;
                                float _3404 = _3390 * _3390;
                                float _3409 = (fma(_1737, _3282.z, fma(_1736, _3282.y, _3282.x * _1735)) + _3282.w) / _3345;
                                float _3410 = (fma(_1737, _3298.z, fma(_1736, _3298.y, _3298.x * _1735)) + _3298.w) / _3345;
                                float _3414 = 1.0 - dot(vec2(_3409, _3410), vec2(_3409, _3410));
                                float _4448 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3416 = _3415 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3386) / (((_3396 * 2.0) + 1.0) * ((_3404 * 0.699999988079071044921875) + 1.0)));
                                float _3417 = (-0.0) - _2810;
                                float _3418 = (-0.0) - _2811;
                                float _3419 = (-0.0) - _2812;
                                float _3420 = dot(vec3(_3379, _3380, _3381), vec3(_2810, _2811, _2812));
                                float _4459 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3427 = dot(vec3(_3417, _3418, _3419), vec3(_559, _562, _565)) + 1.0;
                                float _3429 = (isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * 0.5;
                                float _3436 = ((_3429 * _3429) * _3267.x) * exp2((_3267.y * 32.0) * log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))));
                                float _3438 = _512 / (_512 + 1.0);
                                float _3459 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _627;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3379 - _2810;
                                float _3471 = _3380 - _2811;
                                float _3472 = _3381 - _2812;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_559, _562, _565), vec3(_3417, _3418, _3419));
                                float _4475 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3484 = dot(vec3(_559, _562, _565), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4486 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3392 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_559, _562, _565), vec3(_3379, _3380, _3381))) + _3493;
                                float _4497 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4508 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3415 * _3386) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3491 * _3491) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = ((((_3246 * 0.3183098733425140380859375) * _3438) * _3436) + _3246) * _3416;
                                frontier_phi_73_pred_1 = ((((_3245 * 0.3183098733425140380859375) * _3438) * _3436) + _3245) * _3416;
                                frontier_phi_73_pred_2 = ((((_3244 * 0.3183098733425140380859375) * _3438) * _3436) + _3244) * _3416;
                                frontier_phi_73_pred_3 = _3521 * _3258.z;
                                frontier_phi_73_pred_4 = _3521 * _3258.y;
                                frontier_phi_73_pred_5 = _3521 * _3258.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3530 = frontier_phi_73_pred;
                            _3529 = frontier_phi_73_pred_1;
                            _3528 = frontier_phi_73_pred_2;
                            _3527 = frontier_phi_73_pred_3;
                            _3526 = frontier_phi_73_pred_4;
                            _3525 = frontier_phi_73_pred_5;
                            _3185 = _3528 + _3198;
                            _3186 = _3529 + _3199;
                            _3187 = _3530 + _3200;
                            _3182 = _3525 + _3195;
                            _3183 = _3526 + _3196;
                            _3184 = _3527 + _3197;
                            if (_3202 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3202;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3182;
                        frontier_phi_67_pred_1 = _3187;
                        frontier_phi_67_pred_2 = _3186;
                        frontier_phi_67_pred_3 = _3185;
                        frontier_phi_67_pred_4 = _3184;
                        frontier_phi_67_pred_5 = _3183;
                    }
                    _2785 = frontier_phi_67_pred;
                    _2795 = frontier_phi_67_pred_1;
                    _2793 = frontier_phi_67_pred_2;
                    _2791 = frontier_phi_67_pred_3;
                    _2789 = frontier_phi_67_pred_4;
                    _2787 = frontier_phi_67_pred_5;
                    uint _2930 = _2929 + 1u;
                    if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2923 = _2785;
                        _2924 = _2787;
                        _2925 = _2789;
                        _2926 = _2791;
                        _2927 = _2793;
                        _2928 = _2795;
                        _2929 = _2930;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2793;
                frontier_phi_55_56_ladder_1 = _2795;
                frontier_phi_55_56_ladder_2 = _2791;
                frontier_phi_55_56_ladder_3 = _2789;
                frontier_phi_55_56_ladder_4 = _2787;
                frontier_phi_55_56_ladder_5 = _2785;
            }
            else
            {
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            _2784 = frontier_phi_55_56_ladder_5;
            _2786 = frontier_phi_55_56_ladder_4;
            _2788 = frontier_phi_55_56_ladder_3;
            _2790 = frontier_phi_55_56_ladder_2;
            _2792 = frontier_phi_55_56_ladder;
            _2794 = frontier_phi_55_56_ladder_1;
        }
        float _2799 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2435 = (_2799 * _2790) + _2179;
        _2437 = (_2799 * _2792) + _2180;
        _2439 = (_2799 * _2794) + _2181;
        _2441 = ((_2784 * 0.039999999105930328369140625) * _2799) + _2345;
        _2443 = ((_2786 * 0.039999999105930328369140625) * _2799) + _2346;
        _2445 = ((_2788 * 0.039999999105930328369140625) * _2799) + _2347;
    }
    else
    {
        _2435 = _2179;
        _2437 = _2180;
        _2439 = _2181;
        _2441 = _2345;
        _2443 = _2346;
        _2445 = _2347;
    }
    float _2459 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2460 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2461 = cbSceneParam._m0[86u].x * (_1647 + ((_626 * cbMtdParam._m0[13u].y) * dot(vec3(_507, _508, _509), vec3(_205, _206, _207))));
    float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
    float _2463 = isnan(_2460) ? _538 : (isnan(_538) ? _2460 : min(_538, _2460));
    vec4 _2465 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2462, _2463), 0.0);
    float _2467 = _2465.x;
    bool _2488 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2467)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2467))) > _531;
    float _2489 = _2488 ? _2462 : _537;
    float _2490 = _2488 ? _2463 : _538;
    vec4 _2492 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2489, _2490));
    vec4 _2497 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2489, _2490));
    float _2499 = _2497.x;
    float _2519 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2499)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2499))) - _531;
    bool _2529 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2533 = (isnan(_2519) ? 0.0 : (isnan(0.0) ? _2519 : max(0.0, _2519))) * (-1.44269502162933349609375);
    float _4539 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4550 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4561 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _2560 = 0.959999978542327880859375 - (exp2(log2(1.0 - _618) * 5.0) * 0.959999978542327880859375);
    float _2563 = ((_2492.x * _2560) * exp2(_2533 * (_2529 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2566 = ((_2492.y * _2560) * exp2(_2533 * (_2529 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2569 = ((_2492.z * _2560) * exp2(_2533 * (_2529 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2591 = _537 / cbSceneParam._m0[86u].x;
    float _2592 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2606 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2608 = _2606.x;
    float _2609 = _2606.y;
    float _2610 = _2606.z;
    float _2611 = _2606.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2666 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2667 = _2666 / _531;
        float _2678 = _2667 * _275;
        float _2679 = _276 * _2667;
        float _2680 = (-0.0) - _2679;
        float _2681 = _2667 * _277;
        float _2683 = (cbSceneParam._m0[77u].w * _2680) / _2666;
        float _2684 = _2683 + cbSceneParam._m0[79u].w;
        float _2685 = cbSceneParam._m0[79u].w - _2679;
        float _2691 = sqrt(((_2678 * _2678) + (_2679 * _2679)) + (_2681 * _2681));
        float _2694 = (1.0 - (cbSceneParam._m0[77u].w / _2666)) * _2691;
        float _2699 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2885;
        if (abs((_2680 - _2683) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2885 = ((((_2684 > 0.0) ? exp2(_2699 * _2684) : (2.0 - exp2(_2700 * _2684))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2694;
        }
        else
        {
            float _2845 = 1.0 / cbSceneParam._m0[80u].x;
            float _2846 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : max(_2684, _2685));
            float _2847 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : min(_2684, _2685));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            _2885 = ((abs(_2691 / _2680) * cbSceneParam._m0[80u].y) * ((((_2856 - _2857) * 2.0) - ((exp2(_2699 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0)))) - exp2(_2699 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))))) * _2845)) - ((exp2(_2700 * _2856) - exp2(_2700 * _2857)) * _2845))) + (_2694 * cbSceneParam._m0[80u].z);
        }
        vec4 _2887 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, 1.0), 0.0);
        float _2896 = exp2((_2885 * (-1.44269502162933349609375)) * (1.0 - _2887.w));
        float _2897 = log2(_2896);
        float _2913 = log2(_2611);
        _2702 = (exp2(_2913 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].x)) * _2887.x) / cbSceneParam._m0[78u].x)) + _2608;
        _2704 = (exp2(_2913 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].y)) * _2887.y) / cbSceneParam._m0[78u].y)) + _2609;
        _2706 = (exp2(_2913 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].z)) * _2887.z) / cbSceneParam._m0[78u].z)) + _2610;
        _2708 = _2896 * _2611;
    }
    else
    {
        _2702 = _2608;
        _2704 = _2609;
        _2706 = _2610;
        _2708 = _2611;
    }
    bool _2720 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2721 = log2(_2708);
    float _2728 = exp2(_2721 * cbSceneParam._m0[78u].x) * ((_2563 + (((((_1624 * _1672.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1417) * _1688)) + _2441) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2435 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _603))) - _2563) * cbMtdParam._m0[15u].x));
    float _2729 = exp2(_2721 * cbSceneParam._m0[78u].y) * ((_2566 + (((((_1624 * _1672.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1417) * _1688)) + _2443) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2437 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _603))) - _2566) * cbMtdParam._m0[15u].x));
    float _2730 = exp2(_2721 * cbSceneParam._m0[78u].z) * ((_2569 + (((((_1624 * _1672.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1417) * _1688)) + _2445) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2439 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _603))) - _2569) * cbMtdParam._m0[15u].x));
    vec4 _2738 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_537, _538));
    float _2740 = _2738.x;
    float _2761 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2740)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2740))) - _531) * cbMtdParam._m0[14u].z;
    float _4612 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2763 = (cbInstanceData._m0[_578 + 6u].w * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)));
    float _2772 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2772 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.y = _2772 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.z = _2772 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.w = _2763;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2763;
}


