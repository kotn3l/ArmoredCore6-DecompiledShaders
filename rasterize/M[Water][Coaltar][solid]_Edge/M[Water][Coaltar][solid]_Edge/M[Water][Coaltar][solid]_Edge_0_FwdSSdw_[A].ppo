#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1025;
float _3507;
float _3508;
float _3509;
float _3510;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _207 = _206 * _199;
    float _208 = _206 * _200;
    float _209 = _206 * _201;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    float _287 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _288 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _299 = dot(vec3(_277, _278, _279), vec3(_207, _208, _209));
    float _302 = dot(vec3(_277, _278, _279), vec3(_221, _222, _223));
    float _305 = dot(vec3(_277, _278, _279), vec3(_214, _215, _216));
    float _311 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _335 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _355 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_299 * cbMtdParam._m0[12u].x) * _311) * _335) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_302 * cbMtdParam._m0[12u].x) * _311) * _335) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _378 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _379 = _378 * _277;
    float _380 = _378 * _278;
    float _381 = _378 * _279;
    float _385 = dot(vec4(_379, _380, _381, 0.0), vec4(_214, _215, _216, 0.0)) - cbMtdParam._m0[12u].w;
    float _3519 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _392 = exp2(log2(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _407 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _355.x) * cbMtdParam._m0[9u].x) * ((_392 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _411 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _355.y) * cbMtdParam._m0[9u].y) * ((_392 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _415 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _355.z) * cbMtdParam._m0[9u].z) * ((_392 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _427 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _431 = cbMtdParam._m0[12u].z * _427.x;
    vec4 _444 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    float _452 = (_444.x * 2.0) + (-1.0);
    float _453 = (_444.y * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3535 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    float _464 = cbMtdParam._m0[14u].w + _444.z;
    vec4 _476 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _287) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _288) + cbTextureTilingScale._m0[1u].w));
    float _480 = cbMtdParam._m0[13u].w * _476.x;
    float _498 = fma(_459, _214, fma(_453, _221, _452 * _207));
    float _501 = fma(_459, _215, fma(_453, _222, _452 * _208));
    float _504 = fma(_459, _216, fma(_453, _223, _452 * _209));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    float _509 = _508 * _498;
    float _510 = _508 * _501;
    float _511 = _508 * _504;
    float _3546 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3557 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _513 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _514 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3573 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3584 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3595 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _538 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _540 = _538.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _704 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _710 = (cbMatDynParam._m0[5u].x * _704) + cbMatDynParam._m0[5u].y;
        float _3606 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _715 = (cbMatDynParam._m0[5u].z * _704) + cbMatDynParam._m0[5u].w;
        float _3617 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) - _711)) + _711) < ((_540 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _573 = fma(_511, cbSceneParam._m0[5u].z, fma(_510, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _509));
    float _576 = fma(_511, cbSceneParam._m0[6u].z, fma(_510, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _509));
    float _579 = fma(_511, cbSceneParam._m0[7u].z, fma(_510, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _509));
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = _592 + 9u;
    uint _594 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3628 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    vec4 _614 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _617 = _614.x * TEXCOORD.z;
    float _618 = dot(vec3(_509, _510, _511), vec3(_379, _380, _381));
    float _621 = _618 * 2.0;
    float _625 = (_621 * _509) - _379;
    float _626 = (_621 * _510) - _380;
    float _627 = (_621 * _511) - _381;
    float _631 = abs(dot(vec3(_379, _380, _381), vec3(_509, _510, _511)));
    float _3661 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _640 = 10.0 / (_533 + 10.0);
    float _641 = sqrt(_513);
    float _653 = exp2((_641 * 5.0) * log2(1.0 - (_632 * 0.999000012874603271484375))) / (4.0 - (_641 * 3.0));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1024;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _749 = fma(_693, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685));
        float _753 = fma(_693, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685));
        float _757 = fma(_693, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685));
        float _782 = _685 + _509;
        float _783 = _689 + _510;
        float _784 = _693 + _511;
        float _794 = fma(_784, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782)) - _749;
        float _795 = fma(_784, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782)) - _753;
        float _796 = fma(_784, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782)) - _757;
        float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
        float _813 = ((_800 * _794) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_749 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_800 * _795) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_753 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_800 * _796) / cbModelParam._m0[34u].z) + ((((((_757 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        float _852 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_818.x + (-0.5));
        float _854 = _852 * (_818.y + (-0.5));
        float _855 = _852 * (_818.z + (-0.5));
        float _862 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_825.x + (-0.5));
        float _864 = _862 * (_825.y + (-0.5));
        float _865 = _862 * (_825.z + (-0.5));
        float _872 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_832.x + (-0.5));
        float _874 = _872 * (_832.y + (-0.5));
        float _875 = _872 * (_832.z + (-0.5));
        float _882 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_839.x + (-0.5));
        float _884 = _882 * (_839.y + (-0.5));
        float _885 = _882 * (_839.z + (-0.5));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = _853 * 0.5;
        float _890 = _863 * 0.5;
        float _891 = _873 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _906 = (dot(vec3(_509, _510, _511), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _916 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3709 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_918 + 1.0))) + _923) * _886;
        float _933 = _854 * 0.5;
        float _934 = _864 * 0.5;
        float _935 = _874 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_509, _510, _511), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3742 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_960 + 1.0))) + _965) * _887;
        float _975 = _855 * 0.5;
        float _976 = _865 * 0.5;
        float _977 = _875 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_509, _510, _511), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3775 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1002 + 1.0))) + _1007) * _888;
        _1024 = _855;
        _1026 = _854;
        _1027 = _853;
        _1028 = _865;
        _1029 = _864;
        _1030 = _863;
        _1031 = _875;
        _1032 = _874;
        _1033 = _873;
        _1034 = _888;
        _1035 = _887;
        _1036 = _886;
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
    }
    else
    {
        _1024 = _1025;
        _1026 = _1025;
        _1027 = _1025;
        _1028 = _1025;
        _1029 = _1025;
        _1030 = _1025;
        _1031 = _1025;
        _1032 = _1025;
        _1033 = _1025;
        _1034 = _1025;
        _1035 = _1025;
        _1036 = _1025;
        _1037 = 0.0;
        _1038 = 0.0;
        _1039 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_693, cbModelParam._m0[30u].z, fma(_689, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _685));
        float _1072 = fma(_693, cbModelParam._m0[31u].z, fma(_689, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _685));
        float _1076 = fma(_693, cbModelParam._m0[32u].z, fma(_689, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _685));
        float _1099 = _685 + _509;
        float _1100 = _689 + _510;
        float _1101 = _693 + _511;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_509, _510, _511), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3838 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_509, _510, _511), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3871 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_509, _510, _511), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3904 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1025;
        _1338 = _1025;
        _1339 = _1025;
        _1340 = _1025;
        _1341 = _1025;
        _1342 = _1025;
        _1343 = _1025;
        _1344 = _1025;
        _1345 = _1025;
        _1346 = _1025;
        _1347 = _1025;
        _1348 = _1025;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1037)) + _1037;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1038)) + _1038;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1039)) + _1039;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _625 * 0.5;
    float _1406 = _626 * 0.5;
    float _1407 = _627 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1024, _1028, _1031, _1034));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _513);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_693, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_693, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_693, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_627, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625));
        float _1535 = fma(_627, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625));
        float _1538 = fma(_627, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1566 = frontier_phi_17_15_ladder;
        }
        float _1810;
        if (_1535 > 0.0)
        {
            _1810 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1810 = frontier_phi_26_22_ladder;
        }
        float _2048;
        if (_1538 > 0.0)
        {
            _2048 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2048 = frontier_phi_37_33_ladder;
        }
        float _2050 = isnan(_1810) ? _1566 : (isnan(_1566) ? _1810 : min(_1566, _1810));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1532) + _1521;
        float _2056 = (_2051 * _1535) + _1525;
        float _2057 = (_2051 * _1538) + _1529;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_16_37_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_16_37_ladder_2;
        _1556 = frontier_phi_16_37_ladder_1;
        _1558 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_625, _626, _627), _1474);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _513);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1618 = fma(_693, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685)) + cbModelParam._m0[21u].w;
        float _1622 = fma(_693, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685)) + cbModelParam._m0[22u].w;
        float _1626 = fma(_693, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685)) + cbModelParam._m0[23u].w;
        float _1629 = fma(_627, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625));
        float _1632 = fma(_627, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625));
        float _1635 = fma(_627, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625));
        float _1815;
        if (_1629 > 0.0)
        {
            _1815 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1815 = frontier_phi_28_24_ladder;
        }
        float _2075;
        if (_1632 > 0.0)
        {
            _2075 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2075 = frontier_phi_39_35_ladder;
        }
        float _2546;
        if (_1635 > 0.0)
        {
            _2546 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2546 = frontier_phi_50_45_ladder;
        }
        float _2548 = isnan(_2075) ? _1815 : (isnan(_1815) ? _2075 : min(_1815, _2075));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1629) + _1618;
        float _2554 = (_2549 * _1632) + _1622;
        float _2555 = (_2549 * _1635) + _1626;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_25_50_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1654 = frontier_phi_25_50_ladder_2;
        _1656 = frontier_phi_25_50_ladder_1;
        _1658 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_625, _626, _627), _1563);
        _1654 = _1638.x * cbModelParam._m0[1u].z;
        _1656 = _1638.y * cbModelParam._m0[1u].z;
        _1658 = _1638.z * cbModelParam._m0[1u].z;
    }
    float _1670 = ((((1.0 - _653) * ((_641 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_653 * _641)) * _617;
    float _1671 = _1670 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1672 = _1670 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1673 = _1670 * ((cbModelParam._m0[1u].w * (_1658 - _1558)) + _1558);
    float _1676 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, _1671 * cbSceneParam._m0[91u].x));
    float _1693 = _552 / cbSceneParam._m0[86u].x;
    float _1701 = (cbSceneParam._m0[88u].y * (1.0 - _513)) + cbSceneParam._m0[88u].z;
    float _4030 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1703 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 5.0;
    float _1708 = (_640 * cbMtdParam._m0[13u].z) * dot(vec3(_509, _510, _511), vec3(1.0, 0.0, 0.0));
    vec4 _1718 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1708 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1708 + _1693) * cbSceneParam._m0[86u].x, _553), _1703).w) + _1693) * cbSceneParam._m0[86u].x, _553), _1703);
    float _1734 = 1.0 - _1718.w;
    vec4 _1742 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1744 = _1742.w;
    float _1756 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1744);
    float _1757 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1744);
    float _1758 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1744);
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1770 = _617 + (-1.0);
    float _1773 = (cbLight._m0[_1765].x * _1770) + 1.0;
    float _1774 = (cbLight._m0[_1765].y * _1770) + 1.0;
    uint _1776 = _1764 + 4u;
    float _1787 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_509, _510, _511));
    float _1790 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    float _1791 = cbLight._m0[_1776].x * _1756;
    float _1792 = cbLight._m0[_1776].y * _1757;
    float _1793 = cbLight._m0[_1776].z * _1758;
    uint _1794 = _1764 + 5u;
    uint _1800 = _1764 | 1u;
    float _1806 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_509, _510, _511));
    float _1809 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    float _1874;
    float _1875;
    float _1876;
    if (_514 == 0.0)
    {
        float _4051 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _4062 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1828 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
        float _1830 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
        _1874 = ((cbLight._m0[_1794].x * _1809) * _1830) + ((_1791 * _1790) * _1828);
        _1875 = ((_1809 * cbLight._m0[_1794].y) * _1830) + ((_1792 * _1790) * _1828);
        _1876 = ((_1809 * cbLight._m0[_1794].z) * _1830) + ((_1793 * _1790) * _1828);
    }
    else
    {
        float _1840 = _1787 + _514;
        float _1843 = (_514 * 2.0) + 1.0;
        float _1844 = (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) / _1843;
        float _1851 = _1806 + _514;
        float _1853 = (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) / _1843;
        _1874 = (((_1853 * cbLight._m0[_1794].x) * _1809) + ((_1791 * _1844) * _1790)) * 0.3183098733425140380859375;
        _1875 = (((_1853 * cbLight._m0[_1794].y) * _1809) + ((_1792 * _1844) * _1790)) * 0.3183098733425140380859375;
        _1876 = (((_1853 * cbLight._m0[_1794].z) * _1809) + ((_1793 * _1844) * _1790)) * 0.3183098733425140380859375;
    }
    uint _1880 = _1764 + 8u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _513) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1764].x + _379;
    float _1899 = cbLight._m0[_1764].y + _380;
    float _1900 = cbLight._m0[_1764].z + _381;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_509, _510, _511), vec3(cbLight._m0[_1764].xyz));
    float _4083 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1912 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1913 = dot(vec3(_509, _510, _511), vec3(_1905, _1906, _1907));
    float _4105 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1905, _1906, _1907));
    float _4116 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1897 * _1897;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1937 = 1.0 - _1897;
    float _1948 = (0.5 / (((_1912 * ((_1911 * _1937) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _1937) + _1897) * _1911))) * _1911;
    float _4127 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    uint _1966 = _1764 + 9u;
    float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _513) * 0.949999988079071044921875);
    float _1981 = _1980 * _1980;
    float _1982 = cbLight._m0[_1800].x + _379;
    float _1983 = cbLight._m0[_1800].y + _380;
    float _1984 = cbLight._m0[_1800].z + _381;
    float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
    float _1989 = _1988 * _1982;
    float _1990 = _1988 * _1983;
    float _1991 = _1988 * _1984;
    float _1992 = dot(vec3(_509, _510, _511), vec3(cbLight._m0[_1800].xyz));
    float _4138 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1996 = dot(vec3(_509, _510, _511), vec3(_1989, _1990, _1991));
    float _4149 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_1989, _1990, _1991));
    float _4160 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1981 * _1981;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2017 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2018 = 1.0 - _1981;
    float _2028 = (0.5 / (((_1912 * ((_1995 * _2018) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2018) + _1981) * _1995))) * _1995;
    float _4171 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    float _2040 = (((_2017 * cbLight._m0[_1966].x) * _2030) * _1809) + ((((cbLight._m0[_1880].x * _1756) * _1936) * _1950) * _1790);
    float _2041 = (((_2017 * cbLight._m0[_1966].y) * _2030) * _1809) + ((((cbLight._m0[_1880].y * _1757) * _1936) * _1950) * _1790);
    float _2042 = (((_2017 * cbLight._m0[_1966].z) * _2030) * _1809) + ((((cbLight._m0[_1880].z * _1758) * _1936) * _1950) * _1790);
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_1762.y == 0u)
    {
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2120 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2119;
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2119;
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2119;
        uvec4 _2134 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2135 = _2134.x;
        uint _2146 = uint((float(_2134.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2135))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2135)));
        float _2156 = (log2(_2122 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2157 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        uint _2160 = uint(isnan(14.0) ? _2157 : (isnan(_2157) ? 14.0 : min(_2157, 14.0)));
        uvec4 _2165 = texelFetch(g_lightClusterGridBuffer, int(((_2160 << 2u) + (_2146 << 6u)) >> 2u));
        uint _2166 = _2165.x;
        uint _2167 = _2134.z;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        if (((((1u << ((_2167 >> 4u) & 15u)) + 4294967295u) & _2166) == 0u) || ((_2167 & 240u) == 0u))
        {
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
        }
        else
        {
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            uint _2610 = 0u;
            uint _2619;
            bool _2620;
            for (;;)
            {
                _2619 = texelFetch(g_lightClassification, int((((_2160 << 5u) + (_2146 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                _2620 = _2619 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2620)
                {
                    frontier_phi_61_pred = _2605;
                    frontier_phi_61_pred_1 = _2609;
                    frontier_phi_61_pred_2 = _2608;
                    frontier_phi_61_pred_3 = _2607;
                    frontier_phi_61_pred_4 = _2606;
                    frontier_phi_61_pred_5 = _2604;
                }
                else
                {
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    uint _2776;
                    _2770 = _2604;
                    _2771 = _2605;
                    _2772 = _2606;
                    _2773 = _2607;
                    _2774 = _2608;
                    _2775 = _2609;
                    _2776 = _2619;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    for (;;)
                    {
                        uint _2780 = uint(findLSB(_2776)) + (_2610 << 5u);
                        uint _2777 = (_2776 + 4294967295u) & _2776;
                        uint _2782 = _2780 * 48u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2802 = (_2780 * 48u) + 4u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        float _2816 = _2815.x;
                        float _2817 = _2815.y;
                        float _2818 = _2815.z;
                        uint _2821 = (_2780 * 48u) + 8u;
                        vec3 _2832 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x));
                        uint _2837 = (_2780 * 48u) + 12u;
                        vec2 _2845 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x));
                        float _2851 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
                        float _2852 = _2851 * _2120;
                        float _2853 = _2851 * _2121;
                        float _2854 = _2851 * _2122;
                        float _2855 = _2796.x - _2120;
                        float _2856 = _2796.y - _2121;
                        float _2857 = _2796.z - _2122;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_573, _576, _579), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2796.w);
                        float _4192 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2872 = sqrt(_2858) * _2815.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2877 = 1.0 - _2876;
                        float _2879 = (_2877 * _2877) * _514;
                        float _2882 = ((_2877 * _2865) + _2876) + _2879;
                        float _2887 = _2872 * _2872;
                        float _2892 = ((isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * _2871) / (((_2879 * 2.0) + 1.0) * ((_2887 * 0.699999988079071044921875) + 1.0));
                        float _2896 = dot(vec3(_2862, _2863, _2864), vec3(_2852, _2853, _2854));
                        float _4208 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2903 = dot(vec3((-0.0) - _2852, (-0.0) - _2853, (-0.0) - _2854), vec3(_573, _576, _579)) + 1.0;
                        float _2905 = (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * 0.5;
                        float _2913 = ((_2905 * _2905) * _2845.x) * exp2((_2845.y * 32.0) * log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))));
                        float _2915 = _514 / (_514 + 1.0);
                        float _2931 = (-0.0) - _2120;
                        float _2932 = (-0.0) - _2121;
                        float _2933 = (-0.0) - _2122;
                        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2948 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                        float _2949 = 1.0 - _641;
                        float _2956 = sqrt(1.0 - ((1.0 - (_2949 * _2949)) * (1.0 - (_2948 * _2948))));
                        float _2957 = _2956 * _2956;
                        float _2958 = _2957 * _2957;
                        float _2959 = _2938 + _2862;
                        float _2960 = _2939 + _2863;
                        float _2961 = _2940 + _2864;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2969 = dot(vec3(_573, _576, _579), vec3(_2938, _2939, _2940));
                        float _4224 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2972 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2973 = dot(vec3(_573, _576, _579), vec3(_2965 * _2959, _2965 * _2960, _2965 * _2961));
                        float _4235 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2980 = ((_2976 * _2976) * (_2958 + (-1.0))) + 1.0;
                        float _2981 = _2875 * _2957;
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2865) + _2982;
                        float _4246 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2987 = 1.0 - _2957;
                        float _2997 = (0.5 / (((_2986 * ((_2972 * _2987) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2986 * _2987) + _2957) * _2972))) * _2986;
                        float _4257 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3008 = (((_2958 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2980 * _2980) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2700 = (((((_2816 * 0.3183098733425140380859375) * _2915) * _2913) + _2816) * _2892) + _2773;
                        _2701 = (((((_2817 * 0.3183098733425140380859375) * _2915) * _2913) + _2817) * _2892) + _2774;
                        _2702 = (((((_2818 * 0.3183098733425140380859375) * _2915) * _2913) + _2818) * _2892) + _2775;
                        _2697 = (_3008 * _2832.x) + _2770;
                        _2698 = (_3008 * _2832.y) + _2771;
                        _2699 = (_3008 * _2832.z) + _2772;
                        if (_2777 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2777;
                        }
                    }
                    frontier_phi_61_pred = _2698;
                    frontier_phi_61_pred_1 = _2702;
                    frontier_phi_61_pred_2 = _2701;
                    frontier_phi_61_pred_3 = _2700;
                    frontier_phi_61_pred_4 = _2699;
                    frontier_phi_61_pred_5 = _2697;
                }
                _2398 = frontier_phi_61_pred;
                _2406 = frontier_phi_61_pred_1;
                _2404 = frontier_phi_61_pred_2;
                _2402 = frontier_phi_61_pred_3;
                _2400 = frontier_phi_61_pred_4;
                _2396 = frontier_phi_61_pred_5;
                uint _2611 = _2610 + 1u;
                if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2604 = _2396;
                    _2605 = _2398;
                    _2606 = _2400;
                    _2607 = _2402;
                    _2608 = _2404;
                    _2609 = _2406;
                    _2610 = _2611;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
        }
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.z;
        uint _2412 = (_2410 >> 8u) & 15u;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((4294967295u << _2412) & _2166) == 0u)
        {
            _2572 = _2395;
            _2574 = _2397;
            _2576 = _2399;
            _2578 = _2401;
            _2580 = _2403;
            _2582 = _2405;
        }
        else
        {
            float _2597 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
            float _2598 = _2597 * _2120;
            float _2599 = _2597 * _2121;
            float _2600 = _2597 * _2122;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2412 < ((_2410 >> 12u) & 15u))
            {
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2753 = _2395;
                float _2754 = _2397;
                float _2755 = _2399;
                float _2756 = _2401;
                float _2757 = _2403;
                float _2758 = _2405;
                uint _2759 = _2412;
                uint _2768;
                bool _2769;
                for (;;)
                {
                    _2768 = texelFetch(g_lightClassification, int((((_2160 << 5u) + (_2146 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                    _2769 = _2768 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2769)
                    {
                        frontier_phi_72_pred = _2758;
                        frontier_phi_72_pred_1 = _2757;
                        frontier_phi_72_pred_2 = _2756;
                        frontier_phi_72_pred_3 = _2755;
                        frontier_phi_72_pred_4 = _2754;
                        frontier_phi_72_pred_5 = _2753;
                    }
                    else
                    {
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3035 = _2753;
                        float _3036 = _2754;
                        float _3037 = _2755;
                        float _3038 = _2756;
                        float _3039 = _2757;
                        float _3040 = _2758;
                        uint _3041 = _2768;
                        uint _3042;
                        vec4 _3067;
                        float _3068;
                        vec4 _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        vec3 _3098;
                        vec2 _3107;
                        vec4 _3122;
                        vec4 _3138;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3052 = ((_2759 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3041));
                            _3042 = (_3041 + 4294967295u) & _3041;
                            uint _3054 = _3052 * 40u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3068 = _3067.w;
                            uint _3070 = (_3052 * 40u) + 4u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3084 = _3083.x;
                            _3085 = _3083.y;
                            _3086 = _3083.z;
                            uint _3088 = (_3052 * 40u) + 8u;
                            _3098 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x));
                            uint _3100 = (_3052 * 40u) + 12u;
                            _3107 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x));
                            uint _3109 = (_3052 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3052 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3052 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3052 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_2122, _3173.z, fma(_2121, _3173.y, _3173.x * _2120)) + _3173.w;
                            _3186 = !((fma(_2122, _3154.z, fma(_2121, _3154.y, _3154.x * _2120)) + _3154.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3186)
                            {
                                float _3212 = _3067.x - _2120;
                                float _3213 = _3067.y - _2121;
                                float _3214 = _3067.z - _2122;
                                float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                                float _3218 = inversesqrt(_3215);
                                float _3219 = _3218 * _3212;
                                float _3220 = _3218 * _3213;
                                float _3221 = _3218 * _3214;
                                float _3225 = 1.0 - (_3215 / (_3068 * _3068));
                                float _4268 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3230 = sqrt(_3215) * _3083.w;
                                float _3232 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                                float _3233 = _3232 * _3232;
                                float _3234 = 1.0 - _3233;
                                float _3236 = (_3234 * _3234) * _514;
                                float _3239 = ((_3234 * dot(vec3(_3219, _3220, _3221), vec3(_573, _576, _579))) + _3233) + _3236;
                                float _3244 = _3230 * _3230;
                                float _3249 = (fma(_2122, _3122.z, fma(_2121, _3122.y, _3122.x * _2120)) + _3122.w) / _3185;
                                float _3250 = (fma(_2122, _3138.z, fma(_2121, _3138.y, _3138.x * _2120)) + _3138.w) / _3185;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4284 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3226) / (((_3236 * 2.0) + 1.0) * ((_3244 * 0.699999988079071044921875) + 1.0)));
                                float _3257 = (-0.0) - _2598;
                                float _3258 = (-0.0) - _2599;
                                float _3259 = (-0.0) - _2600;
                                float _3260 = dot(vec3(_3219, _3220, _3221), vec3(_2598, _2599, _2600));
                                float _4295 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3267 = dot(vec3(_3257, _3258, _3259), vec3(_573, _576, _579)) + 1.0;
                                float _3269 = (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * 0.5;
                                float _3276 = ((_3269 * _3269) * _3107.x) * exp2((_3107.y * 32.0) * log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))));
                                float _3278 = _514 / (_514 + 1.0);
                                float _3299 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3300 = 1.0 - _641;
                                float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                                float _3308 = _3307 * _3307;
                                float _3309 = _3308 * _3308;
                                float _3310 = _3219 - _2598;
                                float _3311 = _3220 - _2599;
                                float _3312 = _3221 - _2600;
                                float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                                float _3320 = dot(vec3(_573, _576, _579), vec3(_3257, _3258, _3259));
                                float _4311 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3324 = dot(vec3(_573, _576, _579), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                                float _4322 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                                float _3332 = _3232 * _3308;
                                float _3333 = _3332 * _3332;
                                float _3339 = ((1.0 - _3333) * dot(vec3(_573, _576, _579), vec3(_3219, _3220, _3221))) + _3333;
                                float _4333 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3341 = 1.0 - _3308;
                                float _3351 = (0.5 / (((_3340 * ((_3323 * _3341) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3308) * _3323))) * _3340;
                                float _4344 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3361 = (_3255 * _3226) * (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) / ((_3331 * _3331) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3084 * 0.3183098733425140380859375) * _3278) * _3276) + _3084) * _3256;
                                frontier_phi_78_pred_1 = ((((_3086 * 0.3183098733425140380859375) * _3278) * _3276) + _3086) * _3256;
                                frontier_phi_78_pred_2 = ((((_3085 * 0.3183098733425140380859375) * _3278) * _3276) + _3085) * _3256;
                                frontier_phi_78_pred_3 = _3361 * _3098.z;
                                frontier_phi_78_pred_4 = _3361 * _3098.y;
                                frontier_phi_78_pred_5 = _3361 * _3098.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3368 = frontier_phi_78_pred;
                            _3370 = frontier_phi_78_pred_1;
                            _3369 = frontier_phi_78_pred_2;
                            _3367 = frontier_phi_78_pred_3;
                            _3366 = frontier_phi_78_pred_4;
                            _3365 = frontier_phi_78_pred_5;
                            _3025 = _3368 + _3038;
                            _3026 = _3369 + _3039;
                            _3027 = _3370 + _3040;
                            _3022 = _3365 + _3035;
                            _3023 = _3366 + _3036;
                            _3024 = _3367 + _3037;
                            if (_3042 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3042;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3027;
                        frontier_phi_72_pred_1 = _3026;
                        frontier_phi_72_pred_2 = _3025;
                        frontier_phi_72_pred_3 = _3024;
                        frontier_phi_72_pred_4 = _3023;
                        frontier_phi_72_pred_5 = _3022;
                    }
                    _2583 = frontier_phi_72_pred;
                    _2581 = frontier_phi_72_pred_1;
                    _2579 = frontier_phi_72_pred_2;
                    _2577 = frontier_phi_72_pred_3;
                    _2575 = frontier_phi_72_pred_4;
                    _2573 = frontier_phi_72_pred_5;
                    uint _2760 = _2759 + 1u;
                    if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2753 = _2573;
                        _2754 = _2575;
                        _2755 = _2577;
                        _2756 = _2579;
                        _2757 = _2581;
                        _2758 = _2583;
                        _2759 = _2760;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2583;
                frontier_phi_52_53_ladder_1 = _2575;
                frontier_phi_52_53_ladder_2 = _2581;
                frontier_phi_52_53_ladder_3 = _2579;
                frontier_phi_52_53_ladder_4 = _2577;
                frontier_phi_52_53_ladder_5 = _2573;
            }
            else
            {
                frontier_phi_52_53_ladder = _2405;
                frontier_phi_52_53_ladder_1 = _2397;
                frontier_phi_52_53_ladder_2 = _2403;
                frontier_phi_52_53_ladder_3 = _2401;
                frontier_phi_52_53_ladder_4 = _2399;
                frontier_phi_52_53_ladder_5 = _2395;
            }
            _2572 = frontier_phi_52_53_ladder_5;
            _2574 = frontier_phi_52_53_ladder_1;
            _2576 = frontier_phi_52_53_ladder_4;
            _2578 = frontier_phi_52_53_ladder_3;
            _2580 = frontier_phi_52_53_ladder_2;
            _2582 = frontier_phi_52_53_ladder;
        }
        float _2587 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _2179 = (_2587 * _2578) + _1874;
        _2181 = (_2587 * _2580) + _1875;
        _2183 = (_2587 * _2582) + _1876;
        _2185 = ((_2572 * 0.039999999105930328369140625) * _2587) + _2040;
        _2187 = ((_2574 * 0.039999999105930328369140625) * _2587) + _2041;
        _2189 = ((_2576 * 0.039999999105930328369140625) * _2587) + _2042;
    }
    else
    {
        _2179 = _1874;
        _2181 = _1875;
        _2183 = _1876;
        _2185 = _2040;
        _2187 = _2041;
        _2189 = _2042;
    }
    float _2209 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2210 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2211 = cbSceneParam._m0[86u].x * ((_552 / cbSceneParam._m0[86u].x) + ((_640 * cbMtdParam._m0[13u].y) * dot(vec3(_509, _510, _511), vec3(_207, _208, _209))));
    float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
    float _2213 = isnan(_2210) ? _553 : (isnan(_553) ? _2210 : min(_553, _2210));
    vec4 _2215 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2212, _2213), 0.0);
    float _2217 = _2215.x;
    bool _2238 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2217)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2217))) > _533;
    float _2239 = _2238 ? _2212 : _552;
    float _2240 = _2238 ? _2213 : _553;
    vec4 _2242 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2239, _2240));
    vec4 _2247 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2239, _2240));
    float _2249 = _2247.x;
    float _2269 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2249)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2249))) - _533;
    bool _2279 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2283 = (isnan(_2269) ? 0.0 : (isnan(0.0) ? _2269 : max(0.0, _2269))) * (-1.44269502162933349609375);
    float _4375 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4386 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4397 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2310 = 0.959999978542327880859375 - (exp2(log2(1.0 - _632) * 5.0) * 0.959999978542327880859375);
    float _2313 = ((_2242.x * _2310) * exp2(_2283 * (_2279 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2316 = ((_2242.y * _2310) * exp2(_2283 * (_2279 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2319 = ((_2242.z * _2310) * exp2(_2283 * (_2279 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2327 = (_2313 + (((((_1670 * _1718.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1463) * _1734)) + _2185) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2179 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _617))) - _2313) * cbMtdParam._m0[15u].x);
    float _2329 = (_2316 + (((((_1670 * _1718.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1463) * _1734)) + _2187) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2181 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _617))) - _2316) * cbMtdParam._m0[15u].x);
    float _2331 = (_2319 + (((((_1670 * _1718.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1463) * _1734)) + _2189) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2183 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _617))) - _2319) * cbMtdParam._m0[15u].x);
    float _2336 = cbInstanceData._m0[_592 + 6u].w * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)));
    float _2341 = _552 / cbSceneParam._m0[86u].x;
    float _2342 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2356 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2358 = _2356.x;
    float _2359 = _2356.y;
    float _2360 = _2356.z;
    float _2361 = _2356.w;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2420 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2421 = _2420 / _533;
        float _2432 = _2421 * _277;
        float _2433 = _278 * _2421;
        float _2434 = (-0.0) - _2433;
        float _2435 = _2421 * _279;
        float _2437 = (cbSceneParam._m0[77u].w * _2434) / _2420;
        float _2438 = _2437 + cbSceneParam._m0[79u].w;
        float _2439 = cbSceneParam._m0[79u].w - _2433;
        float _2445 = sqrt(((_2432 * _2432) + (_2433 * _2433)) + (_2435 * _2435));
        float _2448 = (1.0 - (cbSceneParam._m0[77u].w / _2420)) * _2445;
        float _2453 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2454 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2710;
        if (abs((_2434 - _2437) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2710 = ((((_2438 > 0.0) ? exp2(_2453 * _2438) : (2.0 - exp2(_2454 * _2438))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2448;
        }
        else
        {
            float _2633 = 1.0 / cbSceneParam._m0[80u].x;
            float _2634 = isnan(_2439) ? _2438 : (isnan(_2438) ? _2439 : max(_2438, _2439));
            float _2635 = isnan(_2439) ? _2438 : (isnan(_2438) ? _2439 : min(_2438, _2439));
            float _2644 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : min(_2634, 0.0));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            _2710 = ((abs(_2445 / _2434) * cbSceneParam._m0[80u].y) * ((((_2644 - _2645) * 2.0) - ((exp2(_2453 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0)))) - exp2(_2453 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0))))) * _2633)) - ((exp2(_2454 * _2644) - exp2(_2454 * _2645)) * _2633))) + (_2448 * cbSceneParam._m0[80u].z);
        }
        vec4 _2712 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, 1.0), 0.0);
        float _2721 = exp2((_2710 * (-1.44269502162933349609375)) * (1.0 - _2712.w));
        float _2722 = log2(_2721);
        float _2738 = log2(_2361);
        _2456 = (exp2(_2738 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2722 * cbSceneParam._m0[78u].x)) * _2712.x) / cbSceneParam._m0[78u].x)) + _2358;
        _2458 = (exp2(_2738 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2722 * cbSceneParam._m0[78u].y)) * _2712.y) / cbSceneParam._m0[78u].y)) + _2359;
        _2460 = (exp2(_2738 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2722 * cbSceneParam._m0[78u].z)) * _2712.z) / cbSceneParam._m0[78u].z)) + _2360;
        _2462 = _2721 * _2361;
    }
    else
    {
        _2456 = _2358;
        _2458 = _2359;
        _2460 = _2360;
        _2462 = _2361;
    }
    bool _2748;
    float _2517;
    vec4 _2520;
    float _2522;
    vec4 _2524;
    float _2532;
    float _2533;
    float _2534;
    float _2535;
    bool _2545;
    for (;;)
    {
        bool _2474 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2475 = log2(_2462);
        float _2482 = exp2(_2475 * cbSceneParam._m0[78u].x) * _2327;
        float _2483 = exp2(_2475 * cbSceneParam._m0[78u].y) * _2329;
        float _2484 = exp2(_2475 * cbSceneParam._m0[78u].z) * _2331;
        vec4 _2492 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_552, _553));
        float _2494 = _2492.x;
        float _2515 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2494)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2494))) - _533) * cbMtdParam._m0[14u].z;
        float _4448 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        _2517 = _2336 * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)));
        float _2518 = _540 + (-0.5);
        _2520 = cbMtdParam._m0[1u];
        _2522 = _2520.y * _2518;
        _2524 = cbMatDynParam._m0[0u];
        float _2531 = (roundEven(_2524.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2532 = _2531 * (_2474 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2456)));
        _2533 = _2531 * (_2474 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2458)));
        _2534 = _2531 * (_2474 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2460)));
        _2535 = _2518 * 0.999000012874603271484375;
        _2545 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2545)
        {
            if ((cbInstanceData._m0[_592 + 7u].x + _2535) < 0.5)
            {
                _2748 = true;
                break;
            }
        }
        uint _2668 = _593 + uint(_2524.w);
        if ((cbInstanceData._m0[_2668].w < 1.0) && ((cbInstanceData._m0[_2668].w + _2535) < 0.5))
        {
            _2748 = true;
            break;
        }
        if ((_2522 + _431) < _2520.x)
        {
            _2748 = true;
            break;
        }
        _2748 = false;
        break;
    }
    float _3013;
    if (_2748)
    {
        discard_state = true;
        _3013 = 0.0;
    }
    else
    {
        _3013 = _2517;
    }
    SV_Target.x = _2532;
    SV_Target.y = _2533;
    SV_Target.z = _2534;
    SV_Target.w = _3013;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2517;
    discard_exit();
}


