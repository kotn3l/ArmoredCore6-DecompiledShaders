#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1091;
float _3825;
float _3826;
float _3827;
float _3828;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _211 = _210 * _203;
    float _212 = _210 * _204;
    float _213 = _210 * _205;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _271 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _281 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _271);
    float _282 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _271);
    float _283 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _271);
    float _292 = inversesqrt(dot(vec3(_281, _282, _283), vec3(_281, _282, _283)));
    float _293 = _292 * _281;
    float _294 = _292 * _282;
    float _295 = _292 * _283;
    float _303 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _304 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _318 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8, SS_BumpMap), vec2((_303 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_304 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _326 = (_318.x * 2.0) + (-1.0);
    float _328 = (_318.y * 2.0) + (-1.0);
    float _329 = dot(vec2(_326, _328), vec2(_326, _328));
    float _3837 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))));
    float _338 = fma(_335, _218, fma(_328, _225, _326 * _211));
    float _341 = fma(_335, _219, fma(_328, _226, _326 * _212));
    float _344 = fma(_335, _220, fma(_328, _227, _326 * _213));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _357 = (dot(vec4(_293, _294, _295, 0.0), vec4(_348 * _338, _348 * _341, _348 * _344, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _370 = dot(vec3(_281, _282, _283), vec3(_211, _212, _213));
    float _373 = dot(vec3(_281, _282, _283), vec3(_225, _226, _227));
    float _376 = dot(vec3(_281, _282, _283), vec3(_218, _219, _220));
    float _382 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _403 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _423 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_370 * cbMtdParam._m0[12u].x) * _382) * _403) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_373 * cbMtdParam._m0[12u].x) * _382) * _403) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _446 = dot(vec4(_293, _294, _295, 0.0), vec4(_218, _219, _220, 0.0)) - cbMtdParam._m0[12u].w;
    float _3848 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _453 = exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _468 = (((((sin(_357) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _423.x) * cbMtdParam._m0[9u].x) * ((_453 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _477 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _423.y) * cbMtdParam._m0[9u].y) * ((_453 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_357 * 0.85000002384185791015625) + 1.0);
    float _486 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _423.z) * cbMtdParam._m0[9u].z) * ((_453 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_357 * 0.699999988079071044921875) + 1.0);
    vec4 _498 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _502 = cbMtdParam._m0[12u].z * _498.x;
    vec4 _515 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    float _522 = (_515.x * 2.0) + (-1.0);
    float _523 = (_515.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3864 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    float _531 = cbMtdParam._m0[14u].w + _515.z;
    vec4 _543 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _303) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _304) + cbTextureTilingScale._m0[1u].w));
    float _547 = cbMtdParam._m0[13u].w * _543.x;
    float _565 = fma(_529, _218, fma(_523, _225, _522 * _211));
    float _568 = fma(_529, _219, fma(_523, _226, _522 * _212));
    float _571 = fma(_529, _220, fma(_523, _227, _522 * _213));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3875 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3886 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _580 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _581 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3902 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3913 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3924 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _605 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _607 = _605.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _770 = sqrt(((_281 * _281) + (_282 * _282)) + (_283 * _283));
        float _776 = (cbMatDynParam._m0[5u].x * _770) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _781 = (cbMatDynParam._m0[5u].z * _770) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _777)) + _777) < ((_607 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _642 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _645 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    uint _658 = uint(roundEven(NORMAL.w)) * 13u;
    uint _659 = _658 + 9u;
    uint _660 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3957 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _683 = _680.x * TEXCOORD.z;
    float _684 = dot(vec3(_576, _577, _578), vec3(_293, _294, _295));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _576) - _293;
    float _692 = (_687 * _577) - _294;
    float _693 = (_687 * _578) - _295;
    float _697 = abs(dot(vec3(_293, _294, _295), vec3(_576, _577, _578)));
    float _3990 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _706 = 10.0 / (_600 + 10.0);
    float _707 = sqrt(_580);
    float _719 = exp2((_707 * 5.0) * log2(1.0 - (_698 * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1090;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _815 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _819 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _823 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _848 = _751 + _576;
        float _849 = _755 + _577;
        float _850 = _759 + _578;
        float _860 = fma(_850, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848)) - _815;
        float _861 = fma(_850, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848)) - _819;
        float _862 = fma(_850, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848)) - _823;
        float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
        float _879 = ((_866 * _860) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_815 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_866 * _861) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_819 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_866 * _862) / cbModelParam._m0[34u].z) + ((((((_823 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        float _918 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_884.x + (-0.5));
        float _920 = _918 * (_884.y + (-0.5));
        float _921 = _918 * (_884.z + (-0.5));
        float _928 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_891.x + (-0.5));
        float _930 = _928 * (_891.y + (-0.5));
        float _931 = _928 * (_891.z + (-0.5));
        float _938 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_898.x + (-0.5));
        float _940 = _938 * (_898.y + (-0.5));
        float _941 = _938 * (_898.z + (-0.5));
        float _948 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_905.x + (-0.5));
        float _950 = _948 * (_905.y + (-0.5));
        float _951 = _948 * (_905.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _972 = (dot(vec3(_576, _577, _578), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _982 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _4038 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_984 + 1.0))) + _989) * _952;
        float _999 = _920 * 0.5;
        float _1000 = _930 * 0.5;
        float _1001 = _940 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_576, _577, _578), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _4071 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1026 + 1.0))) + _1031) * _953;
        float _1041 = _921 * 0.5;
        float _1042 = _931 * 0.5;
        float _1043 = _941 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_576, _577, _578), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _4104 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1068 + 1.0))) + _1073) * _954;
        _1090 = _921;
        _1092 = _920;
        _1093 = _919;
        _1094 = _931;
        _1095 = _930;
        _1096 = _929;
        _1097 = _941;
        _1098 = _940;
        _1099 = _939;
        _1100 = _954;
        _1101 = _953;
        _1102 = _952;
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _1091;
        _1092 = _1091;
        _1093 = _1091;
        _1094 = _1091;
        _1095 = _1091;
        _1096 = _1091;
        _1097 = _1091;
        _1098 = _1091;
        _1099 = _1091;
        _1100 = _1091;
        _1101 = _1091;
        _1102 = _1091;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1138 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1142 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1165 = _751 + _576;
        float _1166 = _755 + _577;
        float _1167 = _759 + _578;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_576, _577, _578), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4167 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_576, _577, _578), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4200 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_576, _577, _578), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4233 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1091;
        _1404 = _1091;
        _1405 = _1091;
        _1406 = _1091;
        _1407 = _1091;
        _1408 = _1091;
        _1409 = _1091;
        _1410 = _1091;
        _1411 = _1091;
        _1412 = _1091;
        _1413 = _1091;
        _1414 = _1091;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _691 * 0.5;
    float _1472 = _692 * 0.5;
    float _1473 = _693 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1090, _1094, _1097, _1100));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1601 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1604 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1632 = frontier_phi_17_15_ladder;
        }
        float _1855;
        if (_1601 > 0.0)
        {
            _1855 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1855 = frontier_phi_26_22_ladder;
        }
        float _2119;
        if (_1604 > 0.0)
        {
            _2119 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2119 = frontier_phi_38_33_ladder;
        }
        float _2121 = isnan(_1855) ? _1632 : (isnan(_1632) ? _1855 : min(_1632, _1855));
        float _2122 = isnan(_2119) ? _2121 : (isnan(_2121) ? _2119 : min(_2121, _2119));
        float _2126 = (_2122 * _1598) + _1587;
        float _2127 = (_2122 * _1601) + _1591;
        float _2128 = (_2122 * _1604) + _1595;
        float _2129 = _2122 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2129;
        float _2133 = _2129 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 > _2133) || ((_2127 < _2131) || ((_2126 < _2131) || (_2126 > _2133))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2282 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2128, cbModelParam._m0[9u].z, fma(_2127, cbModelParam._m0[9u].y, _2126 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2128, cbModelParam._m0[10u].z, fma(_2127, cbModelParam._m0[10u].y, _2126 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2128, cbModelParam._m0[11u].z, fma(_2127, cbModelParam._m0[11u].y, _2126 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_16_38_ladder = _2282.x * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2282.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2282.y * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_16_38_ladder;
        _1622 = frontier_phi_16_38_ladder_2;
        _1624 = frontier_phi_16_38_ladder_1;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1540);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1698 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1701 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1860;
        if (_1695 > 0.0)
        {
            _1860 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1860 = frontier_phi_28_24_ladder;
        }
        float _2146;
        if (_1698 > 0.0)
        {
            _2146 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2146 = frontier_phi_40_35_ladder;
        }
        float _2465;
        if (_1701 > 0.0)
        {
            _2465 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2465 = frontier_phi_49_47_ladder;
        }
        float _2467 = isnan(_2146) ? _1860 : (isnan(_1860) ? _2146 : min(_1860, _2146));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1695) + _1684;
        float _2473 = (_2468 * _1698) + _1688;
        float _2474 = (_2468 * _1701) + _1692;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2475;
        float _2478 = _2475 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2474 > _2478) || ((_2474 < _2476) || ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 < _2476) || (_2472 > _2478))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2474, cbModelParam._m0[17u].z, fma(_2473, cbModelParam._m0[17u].y, _2472 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2474, cbModelParam._m0[18u].z, fma(_2473, cbModelParam._m0[18u].y, _2472 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2474, cbModelParam._m0[19u].z, fma(_2473, cbModelParam._m0[19u].y, _2472 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_25_49_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_25_49_ladder_2;
        _1722 = frontier_phi_25_49_ladder_1;
        _1724 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1629);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _719) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_719 * _707)) * _683;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    float _1759 = _619 / cbSceneParam._m0[86u].x;
    float _1767 = (cbSceneParam._m0[88u].y * (1.0 - _580)) + cbSceneParam._m0[88u].z;
    float _4359 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 5.0;
    float _1774 = (_706 * cbMtdParam._m0[13u].z) * dot(vec3(_576, _577, _578), vec3(1.0, 0.0, 0.0));
    vec4 _1784 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1774 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1774 + _1759) * cbSceneParam._m0[86u].x, _620), _1769).w) + _1759) * cbSceneParam._m0[86u].x, _620), _1769);
    float _1800 = 1.0 - _1784.w;
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1846 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1847 = _1834 / _1846;
    float _1848 = _1838 / _1846;
    float _1849 = _1842 / _1846;
    float _1996;
    float _1997;
    float _1998;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1876 = ((uint(_1849 > cbSceneParam._m0[59u].y) + uint(_1849 > cbSceneParam._m0[59u].x)) + uint(_1849 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1877 = _1876 + 43u;
        uint _1885 = _1876 + 44u;
        uint _1893 = _1876 + 45u;
        uint _1901 = _1876 + 46u;
        float _1912 = fma(_1846, cbSceneParam._m0[_1877].w, fma(_1842, cbSceneParam._m0[_1877].z, fma(_1838, cbSceneParam._m0[_1877].y, _1834 * cbSceneParam._m0[_1877].x)));
        float _1916 = fma(_1846, cbSceneParam._m0[_1885].w, fma(_1842, cbSceneParam._m0[_1885].z, fma(_1838, cbSceneParam._m0[_1885].y, _1834 * cbSceneParam._m0[_1885].x)));
        float _1924 = fma(_1846, cbSceneParam._m0[_1901].w, fma(_1842, cbSceneParam._m0[_1901].z, fma(_1838, cbSceneParam._m0[_1901].y, _1834 * cbSceneParam._m0[_1901].x)));
        float _1929 = cbSceneParam._m0[33u].z * _1924;
        float _1931 = cbSceneParam._m0[33u].w * _1924;
        float _1934 = fma(_1846, cbSceneParam._m0[_1893].w, fma(_1842, cbSceneParam._m0[_1893].z, fma(_1838, cbSceneParam._m0[_1893].y, _1834 * cbSceneParam._m0[_1893].x))) / _1924;
        float _1982 = (cbSceneParam._m0[33u].x - sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849))) * cbSceneParam._m0[33u].y;
        float _4370 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1989 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 + _1912) / _1924, (_1931 + _1916) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 + _1912) / _1924, (_1916 - _1929) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 - _1929) / _1924, (_1916 - _1931) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 - _1931) / _1924, (_1929 + _1916) / _1924), _1934), 0.0)).x), vec4(0.25)));
        _1996 = 1.0 - (_1989 * cbSceneParam._m0[34u].x);
        _1997 = 1.0 - (_1989 * cbSceneParam._m0[34u].y);
        _1998 = 1.0 - (_1989 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1996 = 1.0;
        _1997 = 1.0;
        _1998 = 1.0;
    }
    float _2062;
    float _2064;
    float _2066;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2050 = fma(_1846, cbSceneParam._m0[63u].w, fma(_1842, cbSceneParam._m0[63u].z, fma(_1838, cbSceneParam._m0[63u].y, _1834 * cbSceneParam._m0[63u].x)));
        float _2051 = fma(_1846, cbSceneParam._m0[60u].w, fma(_1842, cbSceneParam._m0[60u].z, fma(_1838, cbSceneParam._m0[60u].y, _1834 * cbSceneParam._m0[60u].x))) / _2050;
        float _2052 = fma(_1846, cbSceneParam._m0[61u].w, fma(_1842, cbSceneParam._m0[61u].z, fma(_1838, cbSceneParam._m0[61u].y, _1834 * cbSceneParam._m0[61u].x))) / _2050;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2051 >= cbSceneParam._m0[64u].x) && (_2052 >= cbSceneParam._m0[64u].y)) && (_2051 <= cbSceneParam._m0[64u].z)) && (_2052 <= cbSceneParam._m0[64u].w))
        {
            float _2159 = fma(_1846, cbSceneParam._m0[62u].w, fma(_1842, cbSceneParam._m0[62u].z, fma(_1838, cbSceneParam._m0[62u].y, _1834 * cbSceneParam._m0[62u].x))) / _2050;
            float _2163 = isnan(cbSceneParam._m0[41u].w) ? _2159 : (isnan(_2159) ? cbSceneParam._m0[41u].w : max(_2159, cbSceneParam._m0[41u].w));
            float _2206 = (cbSceneParam._m0[33u].x - sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849))) * cbSceneParam._m0[33u].y;
            float _4386 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
            float _2213 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2051, cbSceneParam._m0[33u].w + _2052), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2051, _2052 - cbSceneParam._m0[33u].z), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2051 - cbSceneParam._m0[33u].z, _2052 - cbSceneParam._m0[33u].w), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2051 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2052), _2163), 0.0)).x), vec4(0.25)));
            float _2217 = 1.0 - (_2213 * cbSceneParam._m0[34u].x);
            float _2218 = 1.0 - (_2213 * cbSceneParam._m0[34u].y);
            float _2219 = 1.0 - (_2213 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2219) ? _1998 : (isnan(_1998) ? _2219 : min(_1998, _2219));
            frontier_phi_37_36_ladder_1 = isnan(_2218) ? _1997 : (isnan(_1997) ? _2218 : min(_1997, _2218));
            frontier_phi_37_36_ladder_2 = isnan(_2217) ? _1996 : (isnan(_1996) ? _2217 : min(_1996, _2217));
        }
        else
        {
            frontier_phi_37_36_ladder = _1998;
            frontier_phi_37_36_ladder_1 = _1997;
            frontier_phi_37_36_ladder_2 = _1996;
        }
        _2062 = frontier_phi_37_36_ladder_2;
        _2064 = frontier_phi_37_36_ladder_1;
        _2066 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2062 = _1996;
        _2064 = _1997;
        _2066 = _1998;
    }
    uvec4 _2071 = floatBitsToUint(cbInstanceData._m0[_658 + 5u]);
    uint _2073 = _2071.x * 14u;
    uint _2074 = _2073 + 13u;
    float _2079 = _683 + (-1.0);
    float _2082 = (cbLight._m0[_2074].x * _2079) + 1.0;
    float _2083 = (cbLight._m0[_2074].y * _2079) + 1.0;
    uint _2085 = _2073 + 4u;
    float _2096 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_576, _577, _578));
    float _2099 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    float _2100 = cbLight._m0[_2085].x * _2062;
    float _2101 = cbLight._m0[_2085].y * _2064;
    float _2102 = cbLight._m0[_2085].z * _2066;
    uint _2103 = _2073 + 5u;
    uint _2109 = _2073 | 1u;
    float _2115 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_576, _577, _578));
    float _2118 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    float _2291;
    float _2292;
    float _2293;
    if (_581 == 0.0)
    {
        float _4422 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _4433 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2228 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
        float _2230 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
        _2291 = ((cbLight._m0[_2103].x * _2118) * _2230) + ((_2100 * _2099) * _2228);
        _2292 = ((_2118 * cbLight._m0[_2103].y) * _2230) + ((_2101 * _2099) * _2228);
        _2293 = ((_2118 * cbLight._m0[_2103].z) * _2230) + ((_2102 * _2099) * _2228);
    }
    else
    {
        float _2240 = _2096 + _581;
        float _2243 = (_581 * 2.0) + 1.0;
        float _2244 = (isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0))) / _2243;
        float _2251 = _2115 + _581;
        float _2253 = (isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) / _2243;
        _2291 = (((_2253 * cbLight._m0[_2103].x) * _2118) + ((_2100 * _2244) * _2099)) * 0.3183098733425140380859375;
        _2292 = (((_2253 * cbLight._m0[_2103].y) * _2118) + ((_2101 * _2244) * _2099)) * 0.3183098733425140380859375;
        _2293 = (((_2253 * cbLight._m0[_2103].z) * _2118) + ((_2102 * _2244) * _2099)) * 0.3183098733425140380859375;
    }
    uint _2297 = _2073 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _580) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2073].x + _293;
    float _2316 = cbLight._m0[_2073].y + _294;
    float _2317 = cbLight._m0[_2073].z + _295;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2073].xyz));
    float _4454 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _4465 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2329 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2330 = dot(vec3(_576, _577, _578), vec3(_2322, _2323, _2324));
    float _4476 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2322, _2323, _2324));
    float _4487 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2329 * ((_2328 * _2354) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2354) + _2314) * _2328))) * _2328;
    float _4498 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2383 = _2073 + 9u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _580) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2109].x + _293;
    float _2400 = cbLight._m0[_2109].y + _294;
    float _2401 = cbLight._m0[_2109].z + _295;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2109].xyz));
    float _4509 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2413 = dot(vec3(_576, _577, _578), vec3(_2406, _2407, _2408));
    float _4520 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2406, _2407, _2408));
    float _4531 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2398 * _2398;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2398;
    float _2445 = (0.5 / (((_2329 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2435) + _2398) * _2412))) * _2412;
    float _4542 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    float _2457 = (((_2434 * cbLight._m0[_2383].x) * _2447) * _2118) + ((((cbLight._m0[_2297].x * _2062) * _2353) * _2367) * _2099);
    float _2458 = (((_2434 * cbLight._m0[_2383].y) * _2447) * _2118) + ((((cbLight._m0[_2297].y * _2064) * _2353) * _2367) * _2099);
    float _2459 = (((_2434 * cbLight._m0[_2383].z) * _2447) * _2118) + ((((cbLight._m0[_2297].z * _2066) * _2353) * _2367) * _2099);
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_2071.y == 0u)
    {
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.x;
        uint _2514 = uint((float(_2502.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2503))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2503)));
        float _2524 = (log2(_1849 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        uint _2528 = uint(isnan(14.0) ? _2525 : (isnan(_2525) ? 14.0 : min(_2525, 14.0)));
        uvec4 _2533 = texelFetch(g_lightClusterGridBuffer, int(((_2528 << 2u) + (_2514 << 6u)) >> 2u));
        uint _2534 = _2533.x;
        uint _2535 = _2502.z;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((((1u << ((_2535 >> 4u) & 15u)) + 4294967295u) & _2534) == 0u) || ((_2535 & 240u) == 0u))
        {
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
        }
        else
        {
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            uint _2942 = 0u;
            uint _2951;
            bool _2952;
            for (;;)
            {
                _2951 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                _2952 = _2951 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2952)
                {
                    frontier_phi_66_pred = _2938;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2939;
                    frontier_phi_66_pred_4 = _2941;
                    frontier_phi_66_pred_5 = _2940;
                }
                else
                {
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    uint _3087;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2951;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3091 = uint(findLSB(_3087)) + (_2942 << 5u);
                        uint _3088 = (_3087 + 4294967295u) & _3087;
                        uint _3093 = _3091 * 48u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3113 = (_3091 * 48u) + 4u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        float _3127 = _3126.x;
                        float _3128 = _3126.y;
                        float _3129 = _3126.z;
                        uint _3132 = (_3091 * 48u) + 8u;
                        vec3 _3143 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x));
                        uint _3148 = (_3091 * 48u) + 12u;
                        vec2 _3156 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x));
                        float _3162 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
                        float _3163 = _3162 * _1847;
                        float _3164 = _3162 * _1848;
                        float _3165 = _3162 * _1849;
                        float _3166 = _3107.x - _1847;
                        float _3167 = _3107.y - _1848;
                        float _3168 = _3107.z - _1849;
                        float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                        float _3172 = inversesqrt(_3169);
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3176 = dot(vec3(_639, _642, _645), vec3(_3173, _3174, _3175));
                        float _3181 = 1.0 - (_3169 * _3107.w);
                        float _4563 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3183 = sqrt(_3169) * _3126.w;
                        float _3186 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                        float _3187 = _3186 * _3186;
                        float _3188 = 1.0 - _3187;
                        float _3190 = (_3188 * _3188) * _581;
                        float _3193 = ((_3188 * _3176) + _3187) + _3190;
                        float _3198 = _3183 * _3183;
                        float _3202 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3182) / (((_3190 * 2.0) + 1.0) * ((_3198 * 0.699999988079071044921875) + 1.0));
                        float _3206 = dot(vec3(_3173, _3174, _3175), vec3(_3163, _3164, _3165));
                        float _4579 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3213 = dot(vec3((-0.0) - _3163, (-0.0) - _3164, (-0.0) - _3165), vec3(_639, _642, _645)) + 1.0;
                        float _3215 = (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * 0.5;
                        float _3223 = ((_3215 * _3215) * _3156.x) * exp2((_3156.y * 32.0) * log2(isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))));
                        float _3225 = _581 / (_581 + 1.0);
                        float _3241 = (-0.0) - _1847;
                        float _3242 = (-0.0) - _1848;
                        float _3243 = (-0.0) - _1849;
                        float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3257 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                        float _3258 = 1.0 - _707;
                        float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                        float _3266 = _3265 * _3265;
                        float _3267 = _3266 * _3266;
                        float _3268 = _3248 + _3173;
                        float _3269 = _3249 + _3174;
                        float _3270 = _3250 + _3175;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3278 = dot(vec3(_639, _642, _645), vec3(_3248, _3249, _3250));
                        float _4595 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3282 = dot(vec3(_639, _642, _645), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                        float _4606 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                        float _3290 = _3186 * _3266;
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3176) + _3291;
                        float _4617 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3296 = 1.0 - _3266;
                        float _3306 = (0.5 / (((_3295 * ((_3281 * _3296) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3266) * _3281))) * _3295;
                        float _4628 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3317 = (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3289 * _3289) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125))) * _3182;
                        _3011 = (((((_3127 * 0.3183098733425140380859375) * _3225) * _3223) + _3127) * _3202) + _3084;
                        _3012 = (((((_3128 * 0.3183098733425140380859375) * _3225) * _3223) + _3128) * _3202) + _3085;
                        _3013 = (((((_3129 * 0.3183098733425140380859375) * _3225) * _3223) + _3129) * _3202) + _3086;
                        _3008 = (_3317 * _3143.x) + _3081;
                        _3009 = (_3317 * _3143.y) + _3082;
                        _3010 = (_3317 * _3143.z) + _3083;
                        if (_3088 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3088;
                        }
                    }
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3011;
                    frontier_phi_66_pred_4 = _3013;
                    frontier_phi_66_pred_5 = _3012;
                }
                _2758 = frontier_phi_66_pred;
                _2756 = frontier_phi_66_pred_1;
                _2754 = frontier_phi_66_pred_2;
                _2760 = frontier_phi_66_pred_3;
                _2764 = frontier_phi_66_pred_4;
                _2762 = frontier_phi_66_pred_5;
                uint _2943 = _2942 + 1u;
                if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2936 = _2754;
                    _2937 = _2756;
                    _2938 = _2758;
                    _2939 = _2760;
                    _2940 = _2762;
                    _2941 = _2764;
                    _2942 = _2943;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
        }
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.z;
        uint _2770 = (_2768 >> 8u) & 15u;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((4294967295u << _2770) & _2534) == 0u)
        {
            _2904 = _2753;
            _2906 = _2755;
            _2908 = _2757;
            _2910 = _2759;
            _2912 = _2761;
            _2914 = _2763;
        }
        else
        {
            float _2929 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
            float _2930 = _2929 * _1847;
            float _2931 = _2929 * _1848;
            float _2932 = _2929 * _1849;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2770 < ((_2768 >> 12u) & 15u))
            {
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _3064 = _2753;
                float _3065 = _2755;
                float _3066 = _2757;
                float _3067 = _2759;
                float _3068 = _2761;
                float _3069 = _2763;
                uint _3070 = _2770;
                uint _3079;
                bool _3080;
                for (;;)
                {
                    _3079 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                    _3080 = _3079 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3080)
                    {
                        frontier_phi_77_pred = _3066;
                        frontier_phi_77_pred_1 = _3065;
                        frontier_phi_77_pred_2 = _3064;
                        frontier_phi_77_pred_3 = _3069;
                        frontier_phi_77_pred_4 = _3068;
                        frontier_phi_77_pred_5 = _3067;
                    }
                    else
                    {
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3344 = _3064;
                        float _3345 = _3065;
                        float _3346 = _3066;
                        float _3347 = _3067;
                        float _3348 = _3068;
                        float _3349 = _3069;
                        uint _3350 = _3079;
                        uint _3351;
                        vec4 _3376;
                        float _3377;
                        vec4 _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        vec3 _3407;
                        vec2 _3416;
                        vec4 _3431;
                        vec4 _3447;
                        float _3494;
                        bool _3495;
                        for (;;)
                        {
                            uint _3361 = ((_3070 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3350));
                            _3351 = (_3350 + 4294967295u) & _3350;
                            uint _3363 = _3361 * 40u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3377 = _3376.w;
                            uint _3379 = (_3361 * 40u) + 4u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.x;
                            _3394 = _3392.y;
                            _3395 = _3392.z;
                            uint _3397 = (_3361 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3361 * 40u) + 12u;
                            _3416 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x));
                            uint _3418 = (_3361 * 40u) + 16u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3434 = (_3361 * 40u) + 20u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3450 = (_3361 * 40u) + 24u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3469 = (_3361 * 40u) + 28u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3494 = fma(_1849, _3482.z, fma(_1848, _3482.y, _3482.x * _1847)) + _3482.w;
                            _3495 = !((fma(_1849, _3463.z, fma(_1848, _3463.y, _3463.x * _1847)) + _3463.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3495)
                            {
                                float _3521 = _3376.x - _1847;
                                float _3522 = _3376.y - _1848;
                                float _3523 = _3376.z - _1849;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3377 * _3377));
                                float _4639 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3539 = sqrt(_3524) * _3392.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3543 = 1.0 - _3542;
                                float _3545 = (_3543 * _3543) * _581;
                                float _3548 = ((_3543 * dot(vec3(_3528, _3529, _3530), vec3(_639, _642, _645))) + _3542) + _3545;
                                float _3553 = _3539 * _3539;
                                float _3558 = (fma(_1849, _3431.z, fma(_1848, _3431.y, _3431.x * _1847)) + _3431.w) / _3494;
                                float _3559 = (fma(_1849, _3447.z, fma(_1848, _3447.y, _3447.x * _1847)) + _3447.w) / _3494;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4655 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3535) / (((_3545 * 2.0) + 1.0) * ((_3553 * 0.699999988079071044921875) + 1.0)));
                                float _3566 = (-0.0) - _2930;
                                float _3567 = (-0.0) - _2931;
                                float _3568 = (-0.0) - _2932;
                                float _3569 = dot(vec3(_3528, _3529, _3530), vec3(_2930, _2931, _2932));
                                float _4666 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3576 = dot(vec3(_3566, _3567, _3568), vec3(_639, _642, _645)) + 1.0;
                                float _3578 = (isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * 0.5;
                                float _3585 = ((_3578 * _3578) * _3416.x) * exp2((_3416.y * 32.0) * log2(isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))));
                                float _3587 = _581 / (_581 + 1.0);
                                float _3608 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3609 = 1.0 - _707;
                                float _3616 = sqrt(1.0 - ((1.0 - (_3609 * _3609)) * (1.0 - (_3608 * _3608))));
                                float _3617 = _3616 * _3616;
                                float _3618 = _3617 * _3617;
                                float _3619 = _3528 - _2930;
                                float _3620 = _3529 - _2931;
                                float _3621 = _3530 - _2932;
                                float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                                float _3629 = dot(vec3(_639, _642, _645), vec3(_3566, _3567, _3568));
                                float _4682 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3633 = dot(vec3(_639, _642, _645), vec3(_3625 * _3619, _3625 * _3620, _3625 * _3621));
                                float _4693 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3640 = ((_3636 * _3636) * (_3618 + (-1.0))) + 1.0;
                                float _3641 = _3541 * _3617;
                                float _3642 = _3641 * _3641;
                                float _3648 = ((1.0 - _3642) * dot(vec3(_639, _642, _645), vec3(_3528, _3529, _3530))) + _3642;
                                float _4704 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3650 = 1.0 - _3617;
                                float _3660 = (0.5 / (((_3649 * ((_3632 * _3650) + _3617)) + 9.9999999392252902907785028219223e-09) + (((_3649 * _3650) + _3617) * _3632))) * _3649;
                                float _4715 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3670 = (_3564 * _3535) * (((_3618 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3640 * _3640) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3670 * _3407.z;
                                frontier_phi_83_pred_1 = _3670 * _3407.y;
                                frontier_phi_83_pred_2 = _3670 * _3407.x;
                                frontier_phi_83_pred_3 = ((((_3395 * 0.3183098733425140380859375) * _3587) * _3585) + _3395) * _3565;
                                frontier_phi_83_pred_4 = ((((_3394 * 0.3183098733425140380859375) * _3587) * _3585) + _3394) * _3565;
                                frontier_phi_83_pred_5 = ((((_3393 * 0.3183098733425140380859375) * _3587) * _3585) + _3393) * _3565;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_83_pred;
                            _3675 = frontier_phi_83_pred_1;
                            _3674 = frontier_phi_83_pred_2;
                            _3679 = frontier_phi_83_pred_3;
                            _3678 = frontier_phi_83_pred_4;
                            _3677 = frontier_phi_83_pred_5;
                            _3334 = _3677 + _3347;
                            _3335 = _3678 + _3348;
                            _3336 = _3679 + _3349;
                            _3331 = _3674 + _3344;
                            _3332 = _3675 + _3345;
                            _3333 = _3676 + _3346;
                            if (_3351 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3351;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3333;
                        frontier_phi_77_pred_1 = _3332;
                        frontier_phi_77_pred_2 = _3331;
                        frontier_phi_77_pred_3 = _3336;
                        frontier_phi_77_pred_4 = _3335;
                        frontier_phi_77_pred_5 = _3334;
                    }
                    _2909 = frontier_phi_77_pred;
                    _2907 = frontier_phi_77_pred_1;
                    _2905 = frontier_phi_77_pred_2;
                    _2915 = frontier_phi_77_pred_3;
                    _2913 = frontier_phi_77_pred_4;
                    _2911 = frontier_phi_77_pred_5;
                    uint _3071 = _3070 + 1u;
                    if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3064 = _2905;
                        _3065 = _2907;
                        _3066 = _2909;
                        _3067 = _2911;
                        _3068 = _2913;
                        _3069 = _2915;
                        _3070 = _3071;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2915;
                frontier_phi_58_59_ladder_1 = _2913;
                frontier_phi_58_59_ladder_2 = _2911;
                frontier_phi_58_59_ladder_3 = _2907;
                frontier_phi_58_59_ladder_4 = _2905;
                frontier_phi_58_59_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_58_59_ladder = _2763;
                frontier_phi_58_59_ladder_1 = _2761;
                frontier_phi_58_59_ladder_2 = _2759;
                frontier_phi_58_59_ladder_3 = _2755;
                frontier_phi_58_59_ladder_4 = _2753;
                frontier_phi_58_59_ladder_5 = _2757;
            }
            _2904 = frontier_phi_58_59_ladder_4;
            _2906 = frontier_phi_58_59_ladder_3;
            _2908 = frontier_phi_58_59_ladder_5;
            _2910 = frontier_phi_58_59_ladder_2;
            _2912 = frontier_phi_58_59_ladder_1;
            _2914 = frontier_phi_58_59_ladder;
        }
        float _2919 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2547 = (_2919 * _2910) + _2291;
        _2549 = (_2919 * _2912) + _2292;
        _2551 = (_2919 * _2914) + _2293;
        _2553 = ((_2904 * 0.039999999105930328369140625) * _2919) + _2457;
        _2555 = ((_2906 * 0.039999999105930328369140625) * _2919) + _2458;
        _2557 = ((_2908 * 0.039999999105930328369140625) * _2919) + _2459;
    }
    else
    {
        _2547 = _2291;
        _2549 = _2292;
        _2551 = _2293;
        _2553 = _2457;
        _2555 = _2458;
        _2557 = _2459;
    }
    float _2571 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2572 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2573 = cbSceneParam._m0[86u].x * (_1759 + ((_706 * cbMtdParam._m0[13u].y) * dot(vec3(_576, _577, _578), vec3(_211, _212, _213))));
    float _2574 = isnan(_2571) ? _2573 : (isnan(_2573) ? _2571 : min(_2573, _2571));
    float _2575 = isnan(_2572) ? _620 : (isnan(_620) ? _2572 : min(_620, _2572));
    vec4 _2577 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2574, _2575), 0.0);
    float _2579 = _2577.x;
    bool _2600 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2579)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2579))) > _600;
    float _2601 = _2600 ? _2574 : _619;
    float _2602 = _2600 ? _2575 : _620;
    vec4 _2604 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2601, _2602));
    vec4 _2609 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2601, _2602));
    float _2611 = _2609.x;
    float _2631 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2611)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2611))) - _600;
    bool _2641 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2645 = (isnan(_2631) ? 0.0 : (isnan(0.0) ? _2631 : max(0.0, _2631))) * (-1.44269502162933349609375);
    float _4746 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4757 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4768 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2672 = 0.959999978542327880859375 - (exp2(log2(1.0 - _698) * 5.0) * 0.959999978542327880859375);
    float _2675 = ((_2604.x * _2672) * exp2(_2645 * (_2641 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2678 = ((_2604.y * _2672) * exp2(_2645 * (_2641 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2681 = ((_2604.z * _2672) * exp2(_2645 * (_2641 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2689 = (_2675 + (((((_1736 * _1784.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1529) * _1800)) + _2553) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2547 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _683))) - _2675) * cbMtdParam._m0[15u].x);
    float _2691 = (_2678 + (((((_1736 * _1784.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1529) * _1800)) + _2555) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2549 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _683))) - _2678) * cbMtdParam._m0[15u].x);
    float _2693 = (_2681 + (((((_1736 * _1784.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1529) * _1800)) + _2557) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2551 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _683))) - _2681) * cbMtdParam._m0[15u].x);
    float _2698 = cbInstanceData._m0[_658 + 6u].w * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)));
    float _2703 = _619 / cbSceneParam._m0[86u].x;
    float _2704 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2720 = _2718.x;
    float _2721 = _2718.y;
    float _2722 = _2718.z;
    float _2723 = _2718.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2778 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2779 = _2778 / _600;
        float _2790 = _2779 * _281;
        float _2791 = _282 * _2779;
        float _2792 = (-0.0) - _2791;
        float _2793 = _2779 * _283;
        float _2795 = (cbSceneParam._m0[77u].w * _2792) / _2778;
        float _2796 = _2795 + cbSceneParam._m0[79u].w;
        float _2797 = cbSceneParam._m0[79u].w - _2791;
        float _2803 = sqrt(((_2790 * _2790) + (_2791 * _2791)) + (_2793 * _2793));
        float _2806 = (1.0 - (cbSceneParam._m0[77u].w / _2778)) * _2803;
        float _2811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2792 - _2795) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2796 > 0.0) ? exp2(_2811 * _2796) : (2.0 - exp2(_2812 * _2796))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2806;
        }
        else
        {
            float _2965 = 1.0 / cbSceneParam._m0[80u].x;
            float _2966 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : max(_2796, _2797));
            float _2967 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : min(_2796, _2797));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            _3021 = ((abs(_2803 / _2792) * cbSceneParam._m0[80u].y) * ((((_2976 - _2977) * 2.0) - ((exp2(_2811 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0)))) - exp2(_2811 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))))) * _2965)) - ((exp2(_2812 * _2976) - exp2(_2812 * _2977)) * _2965))) + (_2806 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2723);
        _2814 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2720;
        _2816 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2721;
        _2818 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2722;
        _2820 = _3032 * _2723;
    }
    else
    {
        _2814 = _2720;
        _2816 = _2721;
        _2818 = _2722;
        _2820 = _2723;
    }
    bool _3059;
    float _2875;
    vec4 _2878;
    float _2880;
    vec4 _2882;
    float _2890;
    float _2891;
    float _2892;
    float _2893;
    bool _2903;
    for (;;)
    {
        bool _2832 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2833 = log2(_2820);
        float _2840 = exp2(_2833 * cbSceneParam._m0[78u].x) * _2689;
        float _2841 = exp2(_2833 * cbSceneParam._m0[78u].y) * _2691;
        float _2842 = exp2(_2833 * cbSceneParam._m0[78u].z) * _2693;
        vec4 _2850 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_619, _620));
        float _2852 = _2850.x;
        float _2873 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2852)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2852))) - _600) * cbMtdParam._m0[14u].z;
        float _4819 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        _2875 = _2698 * (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)));
        float _2876 = _607 + (-0.5);
        _2878 = cbMtdParam._m0[1u];
        _2880 = _2878.y * _2876;
        _2882 = cbMatDynParam._m0[0u];
        float _2889 = (roundEven(_2882.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2890 = _2889 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2814)));
        _2891 = _2889 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2816)));
        _2892 = _2889 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2818)));
        _2893 = _2876 * 0.999000012874603271484375;
        _2903 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2903)
        {
            if ((cbInstanceData._m0[_658 + 7u].x + _2893) < 0.5)
            {
                _3059 = true;
                break;
            }
        }
        uint _3000 = _659 + uint(_2882.w);
        if ((cbInstanceData._m0[_3000].w < 1.0) && ((cbInstanceData._m0[_3000].w + _2893) < 0.5))
        {
            _3059 = true;
            break;
        }
        if ((_2880 + _502) < _2878.x)
        {
            _3059 = true;
            break;
        }
        _3059 = false;
        break;
    }
    float _3322;
    if (_3059)
    {
        discard_state = true;
        _3322 = 0.0;
    }
    else
    {
        _3322 = _2875;
    }
    SV_Target.x = _2890;
    SV_Target.y = _2891;
    SV_Target.z = _2892;
    SV_Target.w = _3322;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2875;
    discard_exit();
}


