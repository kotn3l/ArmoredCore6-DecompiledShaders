#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1027;
float _3762;
float _3763;
float _3764;
float _3765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _209 = _208 * _201;
    float _210 = _208 * _202;
    float _211 = _208 * _203;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _289 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _290 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _301 = dot(vec3(_279, _280, _281), vec3(_209, _210, _211));
    float _304 = dot(vec3(_279, _280, _281), vec3(_223, _224, _225));
    float _307 = dot(vec3(_279, _280, _281), vec3(_216, _217, _218));
    float _313 = inversesqrt(dot(vec3(_301, _304, _307), vec3(_301, _304, _307)));
    float _337 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _357 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_301 * cbMtdParam._m0[12u].x) * _313) * _337) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_304 * cbMtdParam._m0[12u].x) * _313) * _337) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _380 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _381 = _380 * _279;
    float _382 = _380 * _280;
    float _383 = _380 * _281;
    float _387 = dot(vec4(_381, _382, _383, 0.0), vec4(_216, _217, _218, 0.0)) - cbMtdParam._m0[12u].w;
    float _3774 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _394 = exp2(log2(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _409 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _357.x) * cbMtdParam._m0[9u].x) * ((_394 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _413 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _357.y) * cbMtdParam._m0[9u].y) * ((_394 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _417 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _357.z) * cbMtdParam._m0[9u].z) * ((_394 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _429 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _433 = cbMtdParam._m0[12u].z * _429.x;
    vec4 _446 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    float _454 = (_446.x * 2.0) + (-1.0);
    float _455 = (_446.y * 2.0) + (-1.0);
    float _456 = dot(vec2(_454, _455), vec2(_454, _455));
    float _3790 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _461 = sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))));
    float _466 = cbMtdParam._m0[14u].w + _446.z;
    vec4 _478 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _289) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _290) + cbTextureTilingScale._m0[1u].w));
    float _482 = cbMtdParam._m0[13u].w * _478.x;
    float _500 = fma(_461, _216, fma(_455, _223, _454 * _209));
    float _503 = fma(_461, _217, fma(_455, _224, _454 * _210));
    float _506 = fma(_461, _218, fma(_455, _225, _454 * _211));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _3801 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3812 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _515 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _516 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3828 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3839 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3850 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _706 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _712 = (cbMatDynParam._m0[5u].x * _706) + cbMatDynParam._m0[5u].y;
        float _3861 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _717 = (cbMatDynParam._m0[5u].z * _706) + cbMatDynParam._m0[5u].w;
        float _3872 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) - _713)) + _713) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _575 = fma(_513, cbSceneParam._m0[5u].z, fma(_512, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _511));
    float _578 = fma(_513, cbSceneParam._m0[6u].z, fma(_512, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _511));
    float _581 = fma(_513, cbSceneParam._m0[7u].z, fma(_512, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _511));
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _594 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3883 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    vec4 _616 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _619 = _616.x * TEXCOORD.z;
    float _620 = dot(vec3(_511, _512, _513), vec3(_381, _382, _383));
    float _623 = _620 * 2.0;
    float _627 = (_623 * _511) - _381;
    float _628 = (_623 * _512) - _382;
    float _629 = (_623 * _513) - _383;
    float _633 = abs(dot(vec3(_381, _382, _383), vec3(_511, _512, _513)));
    float _3916 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _642 = 10.0 / (_535 + 10.0);
    float _643 = sqrt(_515);
    float _655 = exp2((_643 * 5.0) * log2(1.0 - (_634 * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1026;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _751 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _755 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _759 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _784 = _687 + _511;
        float _785 = _691 + _512;
        float _786 = _695 + _513;
        float _796 = fma(_786, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784)) - _751;
        float _797 = fma(_786, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784)) - _755;
        float _798 = fma(_786, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784)) - _759;
        float _802 = inversesqrt(dot(vec3(_796, _797, _798), vec3(_796, _797, _798)));
        float _815 = ((_802 * _796) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_751 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_802 * _797) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_755 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_802 * _798) / cbModelParam._m0[34u].z) + ((((((_759 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        float _854 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_820.x + (-0.5));
        float _856 = _854 * (_820.y + (-0.5));
        float _857 = _854 * (_820.z + (-0.5));
        float _864 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_827.x + (-0.5));
        float _866 = _864 * (_827.y + (-0.5));
        float _867 = _864 * (_827.z + (-0.5));
        float _874 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_834.x + (-0.5));
        float _876 = _874 * (_834.y + (-0.5));
        float _877 = _874 * (_834.z + (-0.5));
        float _884 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_841.x + (-0.5));
        float _886 = _884 * (_841.y + (-0.5));
        float _887 = _884 * (_841.z + (-0.5));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = _855 * 0.5;
        float _892 = _865 * 0.5;
        float _893 = _875 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _908 = (dot(vec3(_511, _512, _513), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _918 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3964 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_920 + 1.0))) + _925) * _888;
        float _935 = _856 * 0.5;
        float _936 = _866 * 0.5;
        float _937 = _876 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_511, _512, _513), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3997 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_962 + 1.0))) + _967) * _889;
        float _977 = _857 * 0.5;
        float _978 = _867 * 0.5;
        float _979 = _877 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_511, _512, _513), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _4030 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1004 + 1.0))) + _1009) * _890;
        _1026 = _857;
        _1028 = _856;
        _1029 = _855;
        _1030 = _867;
        _1031 = _866;
        _1032 = _865;
        _1033 = _877;
        _1034 = _876;
        _1035 = _875;
        _1036 = _890;
        _1037 = _889;
        _1038 = _888;
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
    }
    else
    {
        _1026 = _1027;
        _1028 = _1027;
        _1029 = _1027;
        _1030 = _1027;
        _1031 = _1027;
        _1032 = _1027;
        _1033 = _1027;
        _1034 = _1027;
        _1035 = _1027;
        _1036 = _1027;
        _1037 = _1027;
        _1038 = _1027;
        _1039 = 0.0;
        _1040 = 0.0;
        _1041 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1074 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1078 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1101 = _687 + _511;
        float _1102 = _691 + _512;
        float _1103 = _695 + _513;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_511, _512, _513), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4093 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_511, _512, _513), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4126 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_511, _512, _513), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4159 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1027;
        _1340 = _1027;
        _1341 = _1027;
        _1342 = _1027;
        _1343 = _1027;
        _1344 = _1027;
        _1345 = _1027;
        _1346 = _1027;
        _1347 = _1027;
        _1348 = _1027;
        _1349 = _1027;
        _1350 = _1027;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1039)) + _1039;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _627 * 0.5;
    float _1408 = _628 * 0.5;
    float _1409 = _629 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1026, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _515);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_629, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627));
        float _1537 = fma(_629, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627));
        float _1540 = fma(_629, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1568 = frontier_phi_17_15_ladder;
        }
        float _1791;
        if (_1537 > 0.0)
        {
            _1791 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1791 = frontier_phi_26_22_ladder;
        }
        float _2055;
        if (_1540 > 0.0)
        {
            _2055 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2055 = frontier_phi_38_33_ladder;
        }
        float _2057 = isnan(_1791) ? _1568 : (isnan(_1568) ? _1791 : min(_1568, _1791));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1534) + _1523;
        float _2063 = (_2058 * _1537) + _1527;
        float _2064 = (_2058 * _1540) + _1531;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2065;
        float _2069 = _2065 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 > _2069) || ((_2063 < _2067) || ((_2062 < _2067) || (_2062 > _2069))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2064, cbModelParam._m0[9u].z, fma(_2063, cbModelParam._m0[9u].y, _2062 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2064, cbModelParam._m0[10u].z, fma(_2063, cbModelParam._m0[10u].y, _2062 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2064, cbModelParam._m0[11u].z, fma(_2063, cbModelParam._m0[11u].y, _2062 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_16_38_ladder = _2218.x * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2218.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2218.y * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_16_38_ladder;
        _1558 = frontier_phi_16_38_ladder_2;
        _1560 = frontier_phi_16_38_ladder_1;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_627, _628, _629), _1476);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _515);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1620 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1624 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1628 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1631 = fma(_629, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627));
        float _1634 = fma(_629, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627));
        float _1637 = fma(_629, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627));
        float _1796;
        if (_1631 > 0.0)
        {
            _1796 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1796 = frontier_phi_28_24_ladder;
        }
        float _2082;
        if (_1634 > 0.0)
        {
            _2082 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2082 = frontier_phi_40_35_ladder;
        }
        float _2401;
        if (_1637 > 0.0)
        {
            _2401 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2401 = frontier_phi_49_47_ladder;
        }
        float _2403 = isnan(_2082) ? _1796 : (isnan(_1796) ? _2082 : min(_1796, _2082));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1631) + _1620;
        float _2409 = (_2404 * _1634) + _1624;
        float _2410 = (_2404 * _1637) + _1628;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2411;
        float _2414 = _2411 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2410 > _2414) || ((_2410 < _2412) || ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 < _2412) || (_2408 > _2414))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2410, cbModelParam._m0[17u].z, fma(_2409, cbModelParam._m0[17u].y, _2408 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2410, cbModelParam._m0[18u].z, fma(_2409, cbModelParam._m0[18u].y, _2408 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2410, cbModelParam._m0[19u].z, fma(_2409, cbModelParam._m0[19u].y, _2408 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_25_49_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1656 = frontier_phi_25_49_ladder_2;
        _1658 = frontier_phi_25_49_ladder_1;
        _1660 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_627, _628, _629), _1565);
        _1656 = _1640.x * cbModelParam._m0[1u].z;
        _1658 = _1640.y * cbModelParam._m0[1u].z;
        _1660 = _1640.z * cbModelParam._m0[1u].z;
    }
    float _1672 = ((((1.0 - _655) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _643)) * _619;
    float _1673 = _1672 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1674 = _1672 * ((cbModelParam._m0[1u].w * (_1658 - _1558)) + _1558);
    float _1675 = _1672 * ((cbModelParam._m0[1u].w * (_1660 - _1560)) + _1560);
    float _1678 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, _1673 * cbSceneParam._m0[91u].x));
    float _1695 = _554 / cbSceneParam._m0[86u].x;
    float _1703 = (cbSceneParam._m0[88u].y * (1.0 - _515)) + cbSceneParam._m0[88u].z;
    float _4285 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1705 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 5.0;
    float _1710 = (_642 * cbMtdParam._m0[13u].z) * dot(vec3(_511, _512, _513), vec3(1.0, 0.0, 0.0));
    vec4 _1720 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1710 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1710 + _1695) * cbSceneParam._m0[86u].x, _555), _1705).w) + _1695) * cbSceneParam._m0[86u].x, _555), _1705);
    float _1736 = 1.0 - _1720.w;
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1783 = _1770 / _1782;
    float _1784 = _1774 / _1782;
    float _1785 = _1778 / _1782;
    float _1932;
    float _1933;
    float _1934;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1812 = ((uint(_1785 > cbSceneParam._m0[59u].y) + uint(_1785 > cbSceneParam._m0[59u].x)) + uint(_1785 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1813 = _1812 + 43u;
        uint _1821 = _1812 + 44u;
        uint _1829 = _1812 + 45u;
        uint _1837 = _1812 + 46u;
        float _1848 = fma(_1782, cbSceneParam._m0[_1813].w, fma(_1778, cbSceneParam._m0[_1813].z, fma(_1774, cbSceneParam._m0[_1813].y, _1770 * cbSceneParam._m0[_1813].x)));
        float _1852 = fma(_1782, cbSceneParam._m0[_1821].w, fma(_1778, cbSceneParam._m0[_1821].z, fma(_1774, cbSceneParam._m0[_1821].y, _1770 * cbSceneParam._m0[_1821].x)));
        float _1860 = fma(_1782, cbSceneParam._m0[_1837].w, fma(_1778, cbSceneParam._m0[_1837].z, fma(_1774, cbSceneParam._m0[_1837].y, _1770 * cbSceneParam._m0[_1837].x)));
        float _1865 = cbSceneParam._m0[33u].z * _1860;
        float _1867 = cbSceneParam._m0[33u].w * _1860;
        float _1870 = fma(_1782, cbSceneParam._m0[_1829].w, fma(_1778, cbSceneParam._m0[_1829].z, fma(_1774, cbSceneParam._m0[_1829].y, _1770 * cbSceneParam._m0[_1829].x))) / _1860;
        float _1918 = (cbSceneParam._m0[33u].x - sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785))) * cbSceneParam._m0[33u].y;
        float _4296 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1925 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 + _1848) / _1860, (_1867 + _1852) / _1860), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 + _1848) / _1860, (_1852 - _1865) / _1860), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1848 - _1865) / _1860, (_1852 - _1867) / _1860), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1848 - _1867) / _1860, (_1865 + _1852) / _1860), _1870), 0.0)).x), vec4(0.25)));
        _1932 = 1.0 - (_1925 * cbSceneParam._m0[34u].x);
        _1933 = 1.0 - (_1925 * cbSceneParam._m0[34u].y);
        _1934 = 1.0 - (_1925 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1932 = 1.0;
        _1933 = 1.0;
        _1934 = 1.0;
    }
    float _1998;
    float _2000;
    float _2002;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1986 = fma(_1782, cbSceneParam._m0[63u].w, fma(_1778, cbSceneParam._m0[63u].z, fma(_1774, cbSceneParam._m0[63u].y, _1770 * cbSceneParam._m0[63u].x)));
        float _1987 = fma(_1782, cbSceneParam._m0[60u].w, fma(_1778, cbSceneParam._m0[60u].z, fma(_1774, cbSceneParam._m0[60u].y, _1770 * cbSceneParam._m0[60u].x))) / _1986;
        float _1988 = fma(_1782, cbSceneParam._m0[61u].w, fma(_1778, cbSceneParam._m0[61u].z, fma(_1774, cbSceneParam._m0[61u].y, _1770 * cbSceneParam._m0[61u].x))) / _1986;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1987 >= cbSceneParam._m0[64u].x) && (_1988 >= cbSceneParam._m0[64u].y)) && (_1987 <= cbSceneParam._m0[64u].z)) && (_1988 <= cbSceneParam._m0[64u].w))
        {
            float _2095 = fma(_1782, cbSceneParam._m0[62u].w, fma(_1778, cbSceneParam._m0[62u].z, fma(_1774, cbSceneParam._m0[62u].y, _1770 * cbSceneParam._m0[62u].x))) / _1986;
            float _2099 = isnan(cbSceneParam._m0[41u].w) ? _2095 : (isnan(_2095) ? cbSceneParam._m0[41u].w : max(_2095, cbSceneParam._m0[41u].w));
            float _2142 = (cbSceneParam._m0[33u].x - sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785))) * cbSceneParam._m0[33u].y;
            float _4312 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
            float _2149 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1987, cbSceneParam._m0[33u].w + _1988), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1987, _1988 - cbSceneParam._m0[33u].z), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1987 - cbSceneParam._m0[33u].z, _1988 - cbSceneParam._m0[33u].w), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1987 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1988), _2099), 0.0)).x), vec4(0.25)));
            float _2153 = 1.0 - (_2149 * cbSceneParam._m0[34u].x);
            float _2154 = 1.0 - (_2149 * cbSceneParam._m0[34u].y);
            float _2155 = 1.0 - (_2149 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2155) ? _1934 : (isnan(_1934) ? _2155 : min(_1934, _2155));
            frontier_phi_37_36_ladder_1 = isnan(_2154) ? _1933 : (isnan(_1933) ? _2154 : min(_1933, _2154));
            frontier_phi_37_36_ladder_2 = isnan(_2153) ? _1932 : (isnan(_1932) ? _2153 : min(_1932, _2153));
        }
        else
        {
            frontier_phi_37_36_ladder = _1934;
            frontier_phi_37_36_ladder_1 = _1933;
            frontier_phi_37_36_ladder_2 = _1932;
        }
        _1998 = frontier_phi_37_36_ladder_2;
        _2000 = frontier_phi_37_36_ladder_1;
        _2002 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1998 = _1932;
        _2000 = _1933;
        _2002 = _1934;
    }
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2015 = _619 + (-1.0);
    float _2018 = (cbLight._m0[_2010].x * _2015) + 1.0;
    float _2019 = (cbLight._m0[_2010].y * _2015) + 1.0;
    uint _2021 = _2009 + 4u;
    float _2032 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_511, _512, _513));
    float _2035 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    float _2036 = cbLight._m0[_2021].x * _1998;
    float _2037 = cbLight._m0[_2021].y * _2000;
    float _2038 = cbLight._m0[_2021].z * _2002;
    uint _2039 = _2009 + 5u;
    uint _2045 = _2009 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_511, _512, _513));
    float _2054 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    float _2227;
    float _2228;
    float _2229;
    if (_516 == 0.0)
    {
        float _4348 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _4359 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2164 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
        float _2166 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
        _2227 = ((cbLight._m0[_2039].x * _2054) * _2166) + ((_2036 * _2035) * _2164);
        _2228 = ((_2054 * cbLight._m0[_2039].y) * _2166) + ((_2037 * _2035) * _2164);
        _2229 = ((_2054 * cbLight._m0[_2039].z) * _2166) + ((_2038 * _2035) * _2164);
    }
    else
    {
        float _2176 = _2032 + _516;
        float _2179 = (_516 * 2.0) + 1.0;
        float _2180 = (isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) / _2179;
        float _2187 = _2051 + _516;
        float _2189 = (isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) / _2179;
        _2227 = (((_2189 * cbLight._m0[_2039].x) * _2054) + ((_2036 * _2180) * _2035)) * 0.3183098733425140380859375;
        _2228 = (((_2189 * cbLight._m0[_2039].y) * _2054) + ((_2037 * _2180) * _2035)) * 0.3183098733425140380859375;
        _2229 = (((_2189 * cbLight._m0[_2039].z) * _2054) + ((_2038 * _2180) * _2035)) * 0.3183098733425140380859375;
    }
    uint _2233 = _2009 + 8u;
    float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _515) * 0.949999988079071044921875);
    float _2250 = _2249 * _2249;
    float _2251 = cbLight._m0[_2009].x + _381;
    float _2252 = cbLight._m0[_2009].y + _382;
    float _2253 = cbLight._m0[_2009].z + _383;
    float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
    float _2258 = _2257 * _2251;
    float _2259 = _2257 * _2252;
    float _2260 = _2257 * _2253;
    float _2261 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2009].xyz));
    float _4380 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _2265 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2266 = dot(vec3(_511, _512, _513), vec3(_2258, _2259, _2260));
    float _4402 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2258, _2259, _2260));
    float _4413 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2250 * _2250;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2289 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2290 = 1.0 - _2250;
    float _2301 = (0.5 / (((_2265 * ((_2264 * _2290) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2290) + _2250) * _2264))) * _2264;
    float _4424 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    uint _2319 = _2009 + 9u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _515) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2045].x + _381;
    float _2336 = cbLight._m0[_2045].y + _382;
    float _2337 = cbLight._m0[_2045].z + _383;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_511, _512, _513), vec3(cbLight._m0[_2045].xyz));
    float _4435 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2349 = dot(vec3(_511, _512, _513), vec3(_2342, _2343, _2344));
    float _4446 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2342, _2343, _2344));
    float _4457 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2334 * _2334;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2371 = 1.0 - _2334;
    float _2381 = (0.5 / (((_2265 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2371) + _2334) * _2348))) * _2348;
    float _4468 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    float _2393 = (((_2370 * cbLight._m0[_2319].x) * _2383) * _2054) + ((((cbLight._m0[_2233].x * _1998) * _2289) * _2303) * _2035);
    float _2394 = (((_2370 * cbLight._m0[_2319].y) * _2383) * _2054) + ((((cbLight._m0[_2233].y * _2000) * _2289) * _2303) * _2035);
    float _2395 = (((_2370 * cbLight._m0[_2319].z) * _2383) * _2054) + ((((cbLight._m0[_2233].z * _2002) * _2289) * _2303) * _2035);
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_2007.y == 0u)
    {
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.x;
        uint _2450 = uint((float(_2438.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2439))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2439)));
        float _2460 = (log2(_1785 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2461 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        uint _2464 = uint(isnan(14.0) ? _2461 : (isnan(_2461) ? 14.0 : min(_2461, 14.0)));
        uvec4 _2469 = texelFetch(g_lightClusterGridBuffer, int(((_2464 << 2u) + (_2450 << 6u)) >> 2u));
        uint _2470 = _2469.x;
        uint _2471 = _2438.z;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((((1u << ((_2471 >> 4u) & 15u)) + 4294967295u) & _2470) == 0u) || ((_2471 & 240u) == 0u))
        {
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
        }
        else
        {
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            uint _2878 = 0u;
            uint _2887;
            bool _2888;
            for (;;)
            {
                _2887 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                _2888 = _2887 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2888)
                {
                    frontier_phi_66_pred = _2874;
                    frontier_phi_66_pred_1 = _2873;
                    frontier_phi_66_pred_2 = _2872;
                    frontier_phi_66_pred_3 = _2875;
                    frontier_phi_66_pred_4 = _2877;
                    frontier_phi_66_pred_5 = _2876;
                }
                else
                {
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    uint _3023;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2887;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    for (;;)
                    {
                        uint _3027 = uint(findLSB(_3023)) + (_2878 << 5u);
                        uint _3024 = (_3023 + 4294967295u) & _3023;
                        uint _3029 = _3027 * 48u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3049 = (_3027 * 48u) + 4u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 3u)).x));
                        float _3063 = _3062.x;
                        float _3064 = _3062.y;
                        float _3065 = _3062.z;
                        uint _3068 = (_3027 * 48u) + 8u;
                        vec3 _3079 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x));
                        uint _3084 = (_3027 * 48u) + 12u;
                        vec2 _3092 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x));
                        float _3098 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
                        float _3099 = _3098 * _1783;
                        float _3100 = _3098 * _1784;
                        float _3101 = _3098 * _1785;
                        float _3102 = _3043.x - _1783;
                        float _3103 = _3043.y - _1784;
                        float _3104 = _3043.z - _1785;
                        float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                        float _3108 = inversesqrt(_3105);
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3112 = dot(vec3(_575, _578, _581), vec3(_3109, _3110, _3111));
                        float _3117 = 1.0 - (_3105 * _3043.w);
                        float _4489 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3119 = sqrt(_3105) * _3062.w;
                        float _3122 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                        float _3123 = _3122 * _3122;
                        float _3124 = 1.0 - _3123;
                        float _3126 = (_3124 * _3124) * _516;
                        float _3129 = ((_3124 * _3112) + _3123) + _3126;
                        float _3134 = _3119 * _3119;
                        float _3139 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3118) / (((_3126 * 2.0) + 1.0) * ((_3134 * 0.699999988079071044921875) + 1.0));
                        float _3143 = dot(vec3(_3109, _3110, _3111), vec3(_3099, _3100, _3101));
                        float _4505 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3150 = dot(vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101), vec3(_575, _578, _581)) + 1.0;
                        float _3152 = (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))) * 0.5;
                        float _3160 = ((_3152 * _3152) * _3092.x) * exp2((_3092.y * 32.0) * log2(isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))));
                        float _3162 = _516 / (_516 + 1.0);
                        float _3178 = (-0.0) - _1783;
                        float _3179 = (-0.0) - _1784;
                        float _3180 = (-0.0) - _1785;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3194 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                        float _3195 = 1.0 - _643;
                        float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                        float _3203 = _3202 * _3202;
                        float _3204 = _3203 * _3203;
                        float _3205 = _3185 + _3109;
                        float _3206 = _3186 + _3110;
                        float _3207 = _3187 + _3111;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3215 = dot(vec3(_575, _578, _581), vec3(_3185, _3186, _3187));
                        float _4521 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3219 = dot(vec3(_575, _578, _581), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                        float _4532 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                        float _3227 = _3122 * _3203;
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3112) + _3228;
                        float _4543 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3233 = 1.0 - _3203;
                        float _3243 = (0.5 / (((_3232 * ((_3218 * _3233) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3203) * _3218))) * _3232;
                        float _4554 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3254 = (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3226 * _3226) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125))) * _3118;
                        _2947 = (((((_3063 * 0.3183098733425140380859375) * _3162) * _3160) + _3063) * _3139) + _3020;
                        _2948 = (((((_3064 * 0.3183098733425140380859375) * _3162) * _3160) + _3064) * _3139) + _3021;
                        _2949 = (((((_3065 * 0.3183098733425140380859375) * _3162) * _3160) + _3065) * _3139) + _3022;
                        _2944 = (_3254 * _3079.x) + _3017;
                        _2945 = (_3254 * _3079.y) + _3018;
                        _2946 = (_3254 * _3079.z) + _3019;
                        if (_3024 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _3024;
                        }
                    }
                    frontier_phi_66_pred = _2946;
                    frontier_phi_66_pred_1 = _2945;
                    frontier_phi_66_pred_2 = _2944;
                    frontier_phi_66_pred_3 = _2947;
                    frontier_phi_66_pred_4 = _2949;
                    frontier_phi_66_pred_5 = _2948;
                }
                _2694 = frontier_phi_66_pred;
                _2692 = frontier_phi_66_pred_1;
                _2690 = frontier_phi_66_pred_2;
                _2696 = frontier_phi_66_pred_3;
                _2700 = frontier_phi_66_pred_4;
                _2698 = frontier_phi_66_pred_5;
                uint _2879 = _2878 + 1u;
                if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2872 = _2690;
                    _2873 = _2692;
                    _2874 = _2694;
                    _2875 = _2696;
                    _2876 = _2698;
                    _2877 = _2700;
                    _2878 = _2879;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
        }
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.z;
        uint _2706 = (_2704 >> 8u) & 15u;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        if (((4294967295u << _2706) & _2470) == 0u)
        {
            _2840 = _2689;
            _2842 = _2691;
            _2844 = _2693;
            _2846 = _2695;
            _2848 = _2697;
            _2850 = _2699;
        }
        else
        {
            float _2865 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
            float _2866 = _2865 * _1783;
            float _2867 = _2865 * _1784;
            float _2868 = _2865 * _1785;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2706 < ((_2704 >> 12u) & 15u))
            {
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _3000 = _2689;
                float _3001 = _2691;
                float _3002 = _2693;
                float _3003 = _2695;
                float _3004 = _2697;
                float _3005 = _2699;
                uint _3006 = _2706;
                uint _3015;
                bool _3016;
                for (;;)
                {
                    _3015 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                    _3016 = _3015 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3016)
                    {
                        frontier_phi_77_pred = _3002;
                        frontier_phi_77_pred_1 = _3001;
                        frontier_phi_77_pred_2 = _3000;
                        frontier_phi_77_pred_3 = _3005;
                        frontier_phi_77_pred_4 = _3004;
                        frontier_phi_77_pred_5 = _3003;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3281 = _3000;
                        float _3282 = _3001;
                        float _3283 = _3002;
                        float _3284 = _3003;
                        float _3285 = _3004;
                        float _3286 = _3005;
                        uint _3287 = _3015;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        vec3 _3344;
                        vec2 _3353;
                        vec4 _3368;
                        vec4 _3384;
                        float _3431;
                        bool _3432;
                        for (;;)
                        {
                            uint _3298 = ((_3006 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3330 = _3329.x;
                            _3331 = _3329.y;
                            _3332 = _3329.z;
                            uint _3334 = (_3298 * 40u) + 8u;
                            _3344 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x));
                            uint _3346 = (_3298 * 40u) + 12u;
                            _3353 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x));
                            uint _3355 = (_3298 * 40u) + 16u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3371 = (_3298 * 40u) + 20u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3387 = (_3298 * 40u) + 24u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3406 = (_3298 * 40u) + 28u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3431 = fma(_1785, _3419.z, fma(_1784, _3419.y, _3419.x * _1783)) + _3419.w;
                            _3432 = !((fma(_1785, _3400.z, fma(_1784, _3400.y, _3400.x * _1783)) + _3400.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3432)
                            {
                                float _3458 = _3313.x - _1783;
                                float _3459 = _3313.y - _1784;
                                float _3460 = _3313.z - _1785;
                                float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                                float _3464 = inversesqrt(_3461);
                                float _3465 = _3464 * _3458;
                                float _3466 = _3464 * _3459;
                                float _3467 = _3464 * _3460;
                                float _3471 = 1.0 - (_3461 / (_3314 * _3314));
                                float _4565 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3476 = sqrt(_3461) * _3329.w;
                                float _3478 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                                float _3479 = _3478 * _3478;
                                float _3480 = 1.0 - _3479;
                                float _3482 = (_3480 * _3480) * _516;
                                float _3485 = ((_3480 * dot(vec3(_3465, _3466, _3467), vec3(_575, _578, _581))) + _3479) + _3482;
                                float _3490 = _3476 * _3476;
                                float _3495 = (fma(_1785, _3368.z, fma(_1784, _3368.y, _3368.x * _1783)) + _3368.w) / _3431;
                                float _3496 = (fma(_1785, _3384.z, fma(_1784, _3384.y, _3384.x * _1783)) + _3384.w) / _3431;
                                float _3500 = 1.0 - dot(vec2(_3495, _3496), vec2(_3495, _3496));
                                float _4581 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3502 = _3501 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3472) / (((_3482 * 2.0) + 1.0) * ((_3490 * 0.699999988079071044921875) + 1.0)));
                                float _3503 = (-0.0) - _2866;
                                float _3504 = (-0.0) - _2867;
                                float _3505 = (-0.0) - _2868;
                                float _3506 = dot(vec3(_3465, _3466, _3467), vec3(_2866, _2867, _2868));
                                float _4592 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3513 = dot(vec3(_3503, _3504, _3505), vec3(_575, _578, _581)) + 1.0;
                                float _3515 = (isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * 0.5;
                                float _3522 = ((_3515 * _3515) * _3353.x) * exp2((_3353.y * 32.0) * log2(isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))));
                                float _3524 = _516 / (_516 + 1.0);
                                float _3545 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3546 = 1.0 - _643;
                                float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                                float _3554 = _3553 * _3553;
                                float _3555 = _3554 * _3554;
                                float _3556 = _3465 - _2866;
                                float _3557 = _3466 - _2867;
                                float _3558 = _3467 - _2868;
                                float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                                float _3566 = dot(vec3(_575, _578, _581), vec3(_3503, _3504, _3505));
                                float _4608 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3570 = dot(vec3(_575, _578, _581), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                                float _4619 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                                float _3578 = _3478 * _3554;
                                float _3579 = _3578 * _3578;
                                float _3585 = ((1.0 - _3579) * dot(vec3(_575, _578, _581), vec3(_3465, _3466, _3467))) + _3579;
                                float _4630 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3587 = 1.0 - _3554;
                                float _3597 = (0.5 / (((_3586 * ((_3569 * _3587) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3554) * _3569))) * _3586;
                                float _4641 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3607 = (_3501 * _3472) * (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3577 * _3577) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3607 * _3344.z;
                                frontier_phi_83_pred_1 = _3607 * _3344.y;
                                frontier_phi_83_pred_2 = _3607 * _3344.x;
                                frontier_phi_83_pred_3 = ((((_3332 * 0.3183098733425140380859375) * _3524) * _3522) + _3332) * _3502;
                                frontier_phi_83_pred_4 = ((((_3331 * 0.3183098733425140380859375) * _3524) * _3522) + _3331) * _3502;
                                frontier_phi_83_pred_5 = ((((_3330 * 0.3183098733425140380859375) * _3524) * _3522) + _3330) * _3502;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3613 = frontier_phi_83_pred;
                            _3612 = frontier_phi_83_pred_1;
                            _3611 = frontier_phi_83_pred_2;
                            _3616 = frontier_phi_83_pred_3;
                            _3615 = frontier_phi_83_pred_4;
                            _3614 = frontier_phi_83_pred_5;
                            _3271 = _3614 + _3284;
                            _3272 = _3615 + _3285;
                            _3273 = _3616 + _3286;
                            _3268 = _3611 + _3281;
                            _3269 = _3612 + _3282;
                            _3270 = _3613 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3270;
                        frontier_phi_77_pred_1 = _3269;
                        frontier_phi_77_pred_2 = _3268;
                        frontier_phi_77_pred_3 = _3273;
                        frontier_phi_77_pred_4 = _3272;
                        frontier_phi_77_pred_5 = _3271;
                    }
                    _2845 = frontier_phi_77_pred;
                    _2843 = frontier_phi_77_pred_1;
                    _2841 = frontier_phi_77_pred_2;
                    _2851 = frontier_phi_77_pred_3;
                    _2849 = frontier_phi_77_pred_4;
                    _2847 = frontier_phi_77_pred_5;
                    uint _3007 = _3006 + 1u;
                    if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3000 = _2841;
                        _3001 = _2843;
                        _3002 = _2845;
                        _3003 = _2847;
                        _3004 = _2849;
                        _3005 = _2851;
                        _3006 = _3007;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2851;
                frontier_phi_58_59_ladder_1 = _2849;
                frontier_phi_58_59_ladder_2 = _2847;
                frontier_phi_58_59_ladder_3 = _2843;
                frontier_phi_58_59_ladder_4 = _2841;
                frontier_phi_58_59_ladder_5 = _2845;
            }
            else
            {
                frontier_phi_58_59_ladder = _2699;
                frontier_phi_58_59_ladder_1 = _2697;
                frontier_phi_58_59_ladder_2 = _2695;
                frontier_phi_58_59_ladder_3 = _2691;
                frontier_phi_58_59_ladder_4 = _2689;
                frontier_phi_58_59_ladder_5 = _2693;
            }
            _2840 = frontier_phi_58_59_ladder_4;
            _2842 = frontier_phi_58_59_ladder_3;
            _2844 = frontier_phi_58_59_ladder_5;
            _2846 = frontier_phi_58_59_ladder_2;
            _2848 = frontier_phi_58_59_ladder_1;
            _2850 = frontier_phi_58_59_ladder;
        }
        float _2855 = isnan(1.0) ? _619 : (isnan(_619) ? 1.0 : min(_619, 1.0));
        _2483 = (_2855 * _2846) + _2227;
        _2485 = (_2855 * _2848) + _2228;
        _2487 = (_2855 * _2850) + _2229;
        _2489 = ((_2840 * 0.039999999105930328369140625) * _2855) + _2393;
        _2491 = ((_2842 * 0.039999999105930328369140625) * _2855) + _2394;
        _2493 = ((_2844 * 0.039999999105930328369140625) * _2855) + _2395;
    }
    else
    {
        _2483 = _2227;
        _2485 = _2228;
        _2487 = _2229;
        _2489 = _2393;
        _2491 = _2394;
        _2493 = _2395;
    }
    float _2507 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2508 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2509 = cbSceneParam._m0[86u].x * (_1695 + ((_642 * cbMtdParam._m0[13u].y) * dot(vec3(_511, _512, _513), vec3(_209, _210, _211))));
    float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
    float _2511 = isnan(_2508) ? _555 : (isnan(_555) ? _2508 : min(_555, _2508));
    vec4 _2513 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2510, _2511), 0.0);
    float _2515 = _2513.x;
    bool _2536 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2515)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2515))) > _535;
    float _2537 = _2536 ? _2510 : _554;
    float _2538 = _2536 ? _2511 : _555;
    vec4 _2540 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2537, _2538));
    vec4 _2545 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2537, _2538));
    float _2547 = _2545.x;
    float _2567 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2547)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2547))) - _535;
    bool _2577 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2581 = (isnan(_2567) ? 0.0 : (isnan(0.0) ? _2567 : max(0.0, _2567))) * (-1.44269502162933349609375);
    float _4672 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4683 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4694 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2608 = 0.959999978542327880859375 - (exp2(log2(1.0 - _634) * 5.0) * 0.959999978542327880859375);
    float _2611 = ((_2540.x * _2608) * exp2(_2581 * (_2577 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2614 = ((_2540.y * _2608) * exp2(_2581 * (_2577 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2617 = ((_2540.z * _2608) * exp2(_2581 * (_2577 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2625 = (_2611 + (((((_1672 * _1720.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1465) * _1736)) + _2489) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2483 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _619))) - _2611) * cbMtdParam._m0[15u].x);
    float _2627 = (_2614 + (((((_1672 * _1720.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1465) * _1736)) + _2491) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2485 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _619))) - _2614) * cbMtdParam._m0[15u].x);
    float _2629 = (_2617 + (((((_1672 * _1720.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1465) * _1736)) + _2493) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2487 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _619))) - _2617) * cbMtdParam._m0[15u].x);
    float _2634 = cbInstanceData._m0[_594 + 6u].w * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)));
    float _2639 = _554 / cbSceneParam._m0[86u].x;
    float _2640 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2654 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2656 = _2654.x;
    float _2657 = _2654.y;
    float _2658 = _2654.z;
    float _2659 = _2654.w;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2714 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2715 = _2714 / _535;
        float _2726 = _2715 * _279;
        float _2727 = _280 * _2715;
        float _2728 = (-0.0) - _2727;
        float _2729 = _2715 * _281;
        float _2731 = (cbSceneParam._m0[77u].w * _2728) / _2714;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2727;
        float _2739 = sqrt(((_2726 * _2726) + (_2727 * _2727)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2714)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2748 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2957;
        if (abs((_2728 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2957 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2748 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2901 = 1.0 / cbSceneParam._m0[80u].x;
            float _2902 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2903 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            _2957 = ((abs(_2739 / _2728) * cbSceneParam._m0[80u].y) * ((((_2912 - _2913) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))))) * _2901)) - ((exp2(_2748 * _2912) - exp2(_2748 * _2913)) * _2901))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2959 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, 1.0), 0.0);
        float _2968 = exp2((_2957 * (-1.44269502162933349609375)) * (1.0 - _2959.w));
        float _2969 = log2(_2968);
        float _2985 = log2(_2659);
        _2750 = (exp2(_2985 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].x)) * _2959.x) / cbSceneParam._m0[78u].x)) + _2656;
        _2752 = (exp2(_2985 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].y)) * _2959.y) / cbSceneParam._m0[78u].y)) + _2657;
        _2754 = (exp2(_2985 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2969 * cbSceneParam._m0[78u].z)) * _2959.z) / cbSceneParam._m0[78u].z)) + _2658;
        _2756 = _2968 * _2659;
    }
    else
    {
        _2750 = _2656;
        _2752 = _2657;
        _2754 = _2658;
        _2756 = _2659;
    }
    bool _2995;
    float _2811;
    vec4 _2814;
    float _2816;
    vec4 _2818;
    float _2826;
    float _2827;
    float _2828;
    float _2829;
    bool _2839;
    for (;;)
    {
        bool _2768 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2769 = log2(_2756);
        float _2776 = exp2(_2769 * cbSceneParam._m0[78u].x) * _2625;
        float _2777 = exp2(_2769 * cbSceneParam._m0[78u].y) * _2627;
        float _2778 = exp2(_2769 * cbSceneParam._m0[78u].z) * _2629;
        vec4 _2786 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_554, _555));
        float _2788 = _2786.x;
        float _2809 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2788)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2788))) - _535) * cbMtdParam._m0[14u].z;
        float _4745 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        _2811 = _2634 * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)));
        float _2812 = _542 + (-0.5);
        _2814 = cbMtdParam._m0[1u];
        _2816 = _2814.y * _2812;
        _2818 = cbMatDynParam._m0[0u];
        float _2825 = (roundEven(_2818.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2826 = _2825 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
        _2827 = _2825 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
        _2828 = _2825 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2754)));
        _2829 = _2812 * 0.999000012874603271484375;
        _2839 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2839)
        {
            if ((cbInstanceData._m0[_594 + 7u].x + _2829) < 0.5)
            {
                _2995 = true;
                break;
            }
        }
        uint _2936 = _595 + uint(_2818.w);
        if ((cbInstanceData._m0[_2936].w < 1.0) && ((cbInstanceData._m0[_2936].w + _2829) < 0.5))
        {
            _2995 = true;
            break;
        }
        if ((_2816 + _433) < _2814.x)
        {
            _2995 = true;
            break;
        }
        _2995 = false;
        break;
    }
    float _3259;
    if (_2995)
    {
        discard_state = true;
        _3259 = 0.0;
    }
    else
    {
        _3259 = _2811;
    }
    SV_Target.x = _2826;
    SV_Target.y = _2827;
    SV_Target.z = _2828;
    SV_Target.w = _3259;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2811;
    discard_exit();
}


