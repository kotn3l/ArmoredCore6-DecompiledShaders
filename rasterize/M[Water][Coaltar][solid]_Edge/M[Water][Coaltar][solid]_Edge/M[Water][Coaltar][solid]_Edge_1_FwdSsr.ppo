#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _100 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _101 = _100 * NORMAL.x;
    float _102 = _100 * NORMAL.y;
    float _103 = _100 * NORMAL.z;
    vec4 _126 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _134 = cbMtdParam._m0[14u].w + _126.z;
    float _685 = isnan(0.0) ? _134 : (isnan(_134) ? 0.0 : max(_134, 0.0));
    float _136 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
    float _150 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _151 = POSITION_1.x / POSITION_1.w;
    float _152 = POSITION_1.y / POSITION_1.w;
    float _156 = (_151 * 0.5) + 0.5;
    float _157 = 0.5 - (_152 * 0.5);
    float _162;
    float _164;
    float _166;
    float _168;
    if (_136 < cbPerScene._m0[22u].z)
    {
        _162 = 0.0;
        _164 = 0.0;
        _166 = 0.0;
        _168 = 0.0;
    }
    else
    {
        float _174 = 1.0 / _150;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _174))
        {
            float _200 = fma(_103, cbPerScene._m0[8u].z, fma(_102, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _101));
            float _203 = fma(_103, cbPerScene._m0[9u].z, fma(_102, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _101));
            float _206 = fma(_103, cbPerScene._m0[10u].z, fma(_102, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _101));
            float _213 = (_150 * _151) * cbPerScene._m0[28u].x;
            float _215 = (_150 * _152) * cbPerScene._m0[28u].y;
            float _219 = inversesqrt(dot(vec3(_213, _215, _150), vec3(_213, _215, _150)));
            float _220 = _213 * _219;
            float _221 = _215 * _219;
            float _222 = _219 * _150;
            float _226 = dot(vec3(_220, _221, _222), vec3(_200, _203, _206)) * 2.0;
            float _231 = _220 - (_226 * _200);
            float _232 = _221 - (_226 * _203);
            float _233 = _222 - (_226 * _206);
            float _237 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
            float _240 = _233 * _237;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_240 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _253 = abs(dot(vec3((-0.0) - _220, (-0.0) - _221, (-0.0) - _222), vec3(_200, _203, _206)));
                float _696 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
                float _264 = (((_136 * _136) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _273 = (cbPerScene._m0[29u].x * (1.0 - _136)) + cbPerScene._m0[29u].y;
                float _707 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
                float _281 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_264 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _284 = _240 - cbPerScene._m0[16u].x;
                    float _718 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
                    float _285 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
                    float _286 = _285 * _285;
                    float _288 = (_264 - cbPerScene._m0[22u].x) * 10.0;
                    float _729 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
                    float _290 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
                    float _291 = isnan(_290) ? _286 : (isnan(_286) ? _290 : min(_286, _290));
                    float _295 = (cbPerScene._m0[21u].x - _150) * cbPerScene._m0[21u].z;
                    float _745 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
                    float _296 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
                    float _297 = isnan(_296) ? _291 : (isnan(_291) ? _296 : min(_291, _296));
                    float _298 = (_231 * _237) + _213;
                    float _299 = (_232 * _237) + _215;
                    float _300 = _240 + _150;
                    float _332 = fma(_300, cbPerScene._m0[7u].z, fma(_299, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _298)) + cbPerScene._m0[7u].w;
                    float _336 = ((fma(_300, cbPerScene._m0[4u].z, fma(_299, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _298)) + cbPerScene._m0[4u].w) / _332) - _156;
                    float _337 = ((fma(_300, cbPerScene._m0[5u].z, fma(_299, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _298)) + cbPerScene._m0[5u].w) / _332) - _157;
                    float _343 = cbPerScene._m0[18u].x * _336;
                    float _344 = cbPerScene._m0[18u].y * _337;
                    float _349 = sqrt((_343 * _343) + (_344 * _344)) + 9.9999997473787516355514526367188e-06;
                    float _354 = (_336 / _349) * _281;
                    float _355 = (_337 / _349) * _281;
                    float _356 = (((1.0 / _300) - _174) / _349) * _281;
                    float _385 = abs(float(_354 > 0.0) - _156) / (abs(_354) + 1.0000000116860974230803549289703e-07);
                    float _386 = abs(float(_355 > 0.0) - _157) / (abs(_355) + 1.0000000116860974230803549289703e-07);
                    float _388 = (abs(((_356 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _174) / (abs(_356) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _389 = isnan(_386) ? _385 : (isnan(_385) ? _386 : min(_385, _386));
                    float _390 = isnan(_388) ? _389 : (isnan(_389) ? _388 : min(_389, _388));
                    uint _393 = uint(int(isnan(cbPerScene._m0[23u].y) ? _390 : (isnan(_390) ? cbPerScene._m0[23u].y : min(_390, cbPerScene._m0[23u].y))));
                    float _169;
                    float _398;
                    float _400;
                    float _402;
                    if (int(_393) > int(0u))
                    {
                        float _395 = _356 + _174;
                        float _396 = _355 + _157;
                        float _397 = _354 + _156;
                        float _399;
                        float _401;
                        float _403;
                        float _404;
                        uint _415;
                        float _417;
                        float _419;
                        float _421;
                        float _423;
                        float _425;
                        float _427;
                        float _429;
                        uint _431;
                        float _433;
                        float _435;
                        float _437;
                        float _410 = 0.0;
                        float _411 = 0.0;
                        float _412 = 0.0;
                        float _413 = 0.0;
                        uint _414 = 0u;
                        float _416 = _174;
                        float _418 = _397;
                        float _420 = _396;
                        float _422 = _395;
                        float _424 = _156;
                        float _426 = _157;
                        float _428 = _174;
                        uint _430 = 1u;
                        float _432 = 0.0;
                        float _434 = 0.0;
                        float _436 = 0.0;
                        float _448;
                        float _455;
                        float _456;
                        float _457;
                        float _458;
                        float _459;
                        float _460;
                        uint _461;
                        float _462;
                        bool _469;
                        for (;;)
                        {
                            _448 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _418, cbSceneParam._m0[86u].y * _420), 0.0).x;
                            bool _454 = _414 == (_393 + 4294967295u);
                            _455 = _454 ? _432 : _418;
                            _456 = _454 ? _434 : _420;
                            _457 = _454 ? _436 : _422;
                            _458 = _454 ? _432 : _424;
                            _459 = _454 ? _434 : _426;
                            _460 = _454 ? _436 : _428;
                            _461 = _454 ? 1u : _430;
                            _462 = _454 ? (-1.0) : (_422 - _448);
                            _469 = (_461 != 0u) && ((_462 <= 0.0) && ((_454 ? (-1.0) : (_448 - (_416 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_469)
                            {
                                uint _479 = uint(int(log2(_281) + 0.999000012874603271484375));
                                float _490;
                                float _492;
                                float _494;
                                float _496;
                                float _498;
                                float _500;
                                float _502;
                                if (int(_479) > int(0u))
                                {
                                    uint _600;
                                    float _602;
                                    float _603;
                                    float _604;
                                    float _605;
                                    float _606;
                                    float _607;
                                    float _608;
                                    _600 = 0u;
                                    _602 = _455;
                                    _603 = _456;
                                    _604 = _457;
                                    _605 = _458;
                                    _606 = _459;
                                    _607 = _460;
                                    _608 = _448;
                                    float _491;
                                    float _493;
                                    float _495;
                                    float _497;
                                    float _499;
                                    float _501;
                                    float _503;
                                    for (;;)
                                    {
                                        float _612 = (_605 + _602) * 0.5;
                                        float _613 = (_606 + _603) * 0.5;
                                        float _614 = (_607 + _604) * 0.5;
                                        vec4 _622 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _612, cbSceneParam._m0[86u].y * _613), 0.0);
                                        float _624 = _622.x;
                                        bool _626 = (_614 - _624) < 0.0;
                                        _491 = _626 ? _612 : _602;
                                        _493 = _626 ? _613 : _603;
                                        _495 = _626 ? _614 : _604;
                                        _497 = _626 ? _605 : _612;
                                        _499 = _626 ? _606 : _613;
                                        _501 = _626 ? _607 : _614;
                                        _503 = _626 ? _624 : _608;
                                        uint _601 = _600 + 1u;
                                        if (_601 == _479)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _600 = _601;
                                            _602 = _491;
                                            _603 = _493;
                                            _604 = _495;
                                            _605 = _497;
                                            _606 = _499;
                                            _607 = _501;
                                            _608 = _503;
                                        }
                                    }
                                    _490 = _491;
                                    _492 = _493;
                                    _494 = _495;
                                    _496 = _497;
                                    _498 = _499;
                                    _500 = _501;
                                    _502 = _503;
                                }
                                else
                                {
                                    _490 = _455;
                                    _492 = _456;
                                    _494 = _457;
                                    _496 = _458;
                                    _498 = _459;
                                    _500 = _460;
                                    _502 = _448;
                                }
                                float _512 = cbPerScene._m0[28u].x * ((_490 * 2.0) + (-1.0));
                                float _513 = cbPerScene._m0[28u].y * (1.0 - (_492 * 2.0));
                                float _545 = fma(_502, cbPerScene._m0[27u].w, fma(_513, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _512) + cbPerScene._m0[27u].z);
                                float _546 = fma(_502, cbPerScene._m0[24u].w, fma(_513, cbPerScene._m0[24u].y, _512 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _545;
                                float _547 = fma(_502, cbPerScene._m0[25u].w, fma(_513, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _512) + cbPerScene._m0[25u].z) / _545;
                                vec4 _556 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _546, cbSceneParam._m0[87u].w * _547), 0.0);
                                float _561 = isnan(_297) ? 1.0 : (isnan(1.0) ? _297 : min(1.0, _297));
                                float _562 = 0.5 - _546;
                                float _563 = 0.5 - _547;
                                float _564 = _562 * 2.0;
                                float _565 = _563 * 2.0;
                                float _566 = _564 * _564;
                                float _567 = _565 * _565;
                                float _781 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
                                float _792 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
                                float _576 = inversesqrt(dot(vec2(_354, _355), vec2(_354, _355)));
                                float _582 = inversesqrt(dot(vec2(_564, _565), vec2(_564, _565)));
                                float _588 = dot(vec2((_562 * (-2.0)) * _582, (_563 * (-2.0)) * _582), vec2(_576 * _354, _576 * _355));
                                float _803 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
                                float _595 = ((1.0 - (isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0)))) * (1.0 - (isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0))))) * (4.0 - ((isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0))) * 2.0));
                                float _814 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
                                float _596 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
                                float _597 = _596 * _596;
                                frontier_phi_14_pred = _436;
                                frontier_phi_14_pred_1 = _434;
                                frontier_phi_14_pred_2 = _432;
                                frontier_phi_14_pred_3 = _461;
                                frontier_phi_14_pred_4 = _500;
                                frontier_phi_14_pred_5 = _498;
                                frontier_phi_14_pred_6 = _496;
                                frontier_phi_14_pred_7 = _494;
                                frontier_phi_14_pred_8 = _492;
                                frontier_phi_14_pred_9 = _490;
                                frontier_phi_14_pred_10 = _416;
                                frontier_phi_14_pred_11 = isnan(_597) ? _561 : (isnan(_561) ? _597 : min(_561, _597));
                                frontier_phi_14_pred_12 = _556.z;
                                frontier_phi_14_pred_13 = _556.y;
                                frontier_phi_14_pred_14 = _556.x;
                                frontier_phi_14_pred_15 = _393;
                            }
                            else
                            {
                                bool _481 = _462 > 0.0;
                                frontier_phi_14_pred = _481 ? _457 : _436;
                                frontier_phi_14_pred_1 = _481 ? _456 : _434;
                                frontier_phi_14_pred_2 = _481 ? _455 : _432;
                                frontier_phi_14_pred_3 = uint(_481);
                                frontier_phi_14_pred_4 = _457;
                                frontier_phi_14_pred_5 = _456;
                                frontier_phi_14_pred_6 = _455;
                                frontier_phi_14_pred_7 = _457 + _356;
                                frontier_phi_14_pred_8 = _456 + _355;
                                frontier_phi_14_pred_9 = _455 + _354;
                                frontier_phi_14_pred_10 = _448;
                                frontier_phi_14_pred_11 = _413;
                                frontier_phi_14_pred_12 = _412;
                                frontier_phi_14_pred_13 = _411;
                                frontier_phi_14_pred_14 = _410;
                                frontier_phi_14_pred_15 = _414 + 1u;
                            }
                            _437 = frontier_phi_14_pred;
                            _435 = frontier_phi_14_pred_1;
                            _433 = frontier_phi_14_pred_2;
                            _431 = frontier_phi_14_pred_3;
                            _429 = frontier_phi_14_pred_4;
                            _427 = frontier_phi_14_pred_5;
                            _425 = frontier_phi_14_pred_6;
                            _423 = frontier_phi_14_pred_7;
                            _421 = frontier_phi_14_pred_8;
                            _419 = frontier_phi_14_pred_9;
                            _417 = frontier_phi_14_pred_10;
                            _404 = frontier_phi_14_pred_11;
                            _403 = frontier_phi_14_pred_12;
                            _401 = frontier_phi_14_pred_13;
                            _399 = frontier_phi_14_pred_14;
                            _415 = frontier_phi_14_pred_15;
                            if (int(_415) < int(_393))
                            {
                                _410 = _399;
                                _411 = _401;
                                _412 = _403;
                                _413 = _404;
                                _414 = _415;
                                _416 = _417;
                                _418 = _419;
                                _420 = _421;
                                _422 = _423;
                                _424 = _425;
                                _426 = _427;
                                _428 = _429;
                                _430 = _431;
                                _432 = _433;
                                _434 = _435;
                                _436 = _437;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _398 = _399;
                        _400 = _401;
                        _402 = _403;
                        _169 = _404;
                    }
                    else
                    {
                        _398 = 0.0;
                        _400 = 0.0;
                        _402 = 0.0;
                        _169 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_398) || isnan(_400)) || isnan(_402))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_169 * _398) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _169;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_169 * _402) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_169 * _400) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _162 = frontier_phi_1_2_ladder;
        _164 = frontier_phi_1_2_ladder_3;
        _166 = frontier_phi_1_2_ladder_2;
        _168 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _162;
    SV_Target.y = _164;
    SV_Target.z = _166;
    SV_Target.w = _168;
}


