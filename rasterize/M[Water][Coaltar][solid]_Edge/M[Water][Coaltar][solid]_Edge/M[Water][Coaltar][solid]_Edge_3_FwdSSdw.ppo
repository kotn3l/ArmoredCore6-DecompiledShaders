#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _980;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _203 = _202 * _195;
    float _204 = _202 * _196;
    float _205 = _202 * _197;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _283 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _284 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _295 = dot(vec3(_273, _274, _275), vec3(_203, _204, _205));
    float _298 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _301 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _307 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _331 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _351 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_295 * cbMtdParam._m0[12u].x) * _307) * _331) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_298 * cbMtdParam._m0[12u].x) * _307) * _331) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _374 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _375 = _374 * _273;
    float _376 = _374 * _274;
    float _377 = _374 * _275;
    float _381 = dot(vec4(_375, _376, _377, 0.0), vec4(_210, _211, _212, 0.0)) - cbMtdParam._m0[12u].w;
    float _3408 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _388 = exp2(log2(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _403 = (((cbMtdParam._m0[10u].x * 4.55000019073486328125) * _351.x) * cbMtdParam._m0[9u].x) * ((_388 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _407 = (((cbMtdParam._m0[10u].y * 4.55000019073486328125) * _351.y) * cbMtdParam._m0[9u].y) * ((_388 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0);
    float _411 = (((cbMtdParam._m0[10u].z * 4.55000019073486328125) * _351.z) * cbMtdParam._m0[9u].z) * ((_388 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0);
    vec4 _423 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _427 = cbMtdParam._m0[12u].z * _423.x;
    vec4 _440 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    float _448 = (_440.x * 2.0) + (-1.0);
    float _449 = (_440.y * 2.0) + (-1.0);
    float _450 = dot(vec2(_448, _449), vec2(_448, _449));
    float _3424 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = sqrt(1.0 - (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))));
    float _460 = cbMtdParam._m0[14u].w + _440.z;
    vec4 _472 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _283) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _284) + cbTextureTilingScale._m0[1u].w));
    float _476 = cbMtdParam._m0[13u].w * _472.x;
    float _494 = fma(_455, _210, fma(_449, _217, _448 * _203));
    float _497 = fma(_455, _211, fma(_449, _218, _448 * _204));
    float _500 = fma(_455, _212, fma(_449, _219, _448 * _205));
    float _504 = inversesqrt(dot(vec3(_494, _497, _500), vec3(_494, _497, _500)));
    float _505 = _504 * _494;
    float _506 = _504 * _497;
    float _507 = _504 * _500;
    float _3435 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3446 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _509 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _510 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3462 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3473 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3484 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _529 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _557 = fma(_507, cbSceneParam._m0[5u].z, fma(_506, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _505));
    float _560 = fma(_507, cbSceneParam._m0[6u].z, fma(_506, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _505));
    float _563 = fma(_507, cbSceneParam._m0[7u].z, fma(_506, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _505));
    uint _576 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = (_576 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3495 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _601 = _598.x * TEXCOORD.z;
    float _602 = dot(vec3(_505, _506, _507), vec3(_375, _376, _377));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _505) - _375;
    float _610 = (_605 * _506) - _376;
    float _611 = (_605 * _507) - _377;
    float _615 = abs(dot(vec3(_375, _376, _377), vec3(_505, _506, _507)));
    float _3528 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _624 = 10.0 / (_529 + 10.0);
    float _625 = sqrt(_509);
    float _637 = exp2((_625 * 5.0) * log2(1.0 - (_616 * 0.999000012874603271484375))) / (4.0 - (_625 * 3.0));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _979;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _704 = fma(_677, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669));
        float _708 = fma(_677, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669));
        float _712 = fma(_677, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669));
        float _737 = _669 + _505;
        float _738 = _673 + _506;
        float _739 = _677 + _507;
        float _749 = fma(_739, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737)) - _704;
        float _750 = fma(_739, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737)) - _708;
        float _751 = fma(_739, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737)) - _712;
        float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
        float _768 = ((_755 * _749) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_704 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_755 * _750) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_708 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_755 * _751) / cbModelParam._m0[34u].z) + ((((((_712 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        float _807 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_773.x + (-0.5));
        float _809 = _807 * (_773.y + (-0.5));
        float _810 = _807 * (_773.z + (-0.5));
        float _817 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_780.x + (-0.5));
        float _819 = _817 * (_780.y + (-0.5));
        float _820 = _817 * (_780.z + (-0.5));
        float _827 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_787.x + (-0.5));
        float _829 = _827 * (_787.y + (-0.5));
        float _830 = _827 * (_787.z + (-0.5));
        float _837 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_794.x + (-0.5));
        float _839 = _837 * (_794.y + (-0.5));
        float _840 = _837 * (_794.z + (-0.5));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = _808 * 0.5;
        float _845 = _818 * 0.5;
        float _846 = _828 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _861 = (dot(vec3(_505, _506, _507), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _871 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3576 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_873 + 1.0))) + _878) * _841;
        float _888 = _809 * 0.5;
        float _889 = _819 * 0.5;
        float _890 = _829 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_505, _506, _507), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3609 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_915 + 1.0))) + _920) * _842;
        float _930 = _810 * 0.5;
        float _931 = _820 * 0.5;
        float _932 = _830 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_505, _506, _507), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3642 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_957 + 1.0))) + _962) * _843;
        _979 = _810;
        _981 = _809;
        _982 = _808;
        _983 = _820;
        _984 = _819;
        _985 = _818;
        _986 = _830;
        _987 = _829;
        _988 = _828;
        _989 = _843;
        _990 = _842;
        _991 = _841;
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
    }
    else
    {
        _979 = _980;
        _981 = _980;
        _982 = _980;
        _983 = _980;
        _984 = _980;
        _985 = _980;
        _986 = _980;
        _987 = _980;
        _988 = _980;
        _989 = _980;
        _990 = _980;
        _991 = _980;
        _992 = 0.0;
        _993 = 0.0;
        _994 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_677, cbModelParam._m0[30u].z, fma(_673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _669));
        float _1024 = fma(_677, cbModelParam._m0[31u].z, fma(_673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _669));
        float _1028 = fma(_677, cbModelParam._m0[32u].z, fma(_673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _669));
        float _1051 = _669 + _505;
        float _1052 = _673 + _506;
        float _1053 = _677 + _507;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_505, _506, _507), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3705 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_505, _506, _507), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3738 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_505, _506, _507), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3771 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _980;
        _1290 = _980;
        _1291 = _980;
        _1292 = _980;
        _1293 = _980;
        _1294 = _980;
        _1295 = _980;
        _1296 = _980;
        _1297 = _980;
        _1298 = _980;
        _1299 = _980;
        _1300 = _980;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _609 * 0.5;
    float _1358 = _610 * 0.5;
    float _1359 = _611 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_979, _983, _986, _989));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_981, _984, _987, _990));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_982, _985, _988, _991));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _509);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_677, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_677, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_677, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1487 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1490 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1518;
        if (_1484 > 0.0)
        {
            _1518 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1518 = frontier_phi_14_12_ladder;
        }
        float _1762;
        if (_1487 > 0.0)
        {
            _1762 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1762 = frontier_phi_23_19_ladder;
        }
        float _2000;
        if (_1490 > 0.0)
        {
            _2000 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2000 = frontier_phi_34_30_ladder;
        }
        float _2002 = isnan(_1762) ? _1518 : (isnan(_1518) ? _1762 : min(_1518, _1762));
        float _2003 = isnan(_2000) ? _2002 : (isnan(_2002) ? _2000 : min(_2002, _2000));
        float _2007 = (_2003 * _1484) + _1473;
        float _2008 = (_2003 * _1487) + _1477;
        float _2009 = (_2003 * _1490) + _1481;
        float _2010 = _2003 * 9.9999997473787516355514526367188e-05;
        float _2012 = (-1.0) - _2010;
        float _2014 = _2010 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_2009 > _2014) || ((_2009 < _2012) || ((_2008 > _2014) || ((_2008 < _2012) || ((_2007 < _2012) || (_2007 > _2014))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2009, cbModelParam._m0[9u].z, fma(_2008, cbModelParam._m0[9u].y, _2007 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2009, cbModelParam._m0[10u].z, fma(_2008, cbModelParam._m0[10u].y, _2007 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2009, cbModelParam._m0[11u].z, fma(_2008, cbModelParam._m0[11u].y, _2007 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_13_34_ladder = _2338.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _2338.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _2338.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_13_34_ladder_2;
        _1508 = frontier_phi_13_34_ladder_1;
        _1510 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1426);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1514 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _509);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1514 : min(cbModelParam._m0[25u].w, _1514));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_677, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_677, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_677, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1584 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1587 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1767;
        if (_1581 > 0.0)
        {
            _1767 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1767 = frontier_phi_25_21_ladder;
        }
        float _2027;
        if (_1584 > 0.0)
        {
            _2027 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2027 = frontier_phi_36_32_ladder;
        }
        float _2490;
        if (_1587 > 0.0)
        {
            _2490 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2490 = frontier_phi_47_42_ladder;
        }
        float _2492 = isnan(_2027) ? _1767 : (isnan(_1767) ? _2027 : min(_1767, _2027));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1581) + _1570;
        float _2498 = (_2493 * _1584) + _1574;
        float _2499 = (_2493 * _1587) + _1578;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_22_47_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_22_47_ladder_2;
        _1608 = frontier_phi_22_47_ladder_1;
        _1610 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1515);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1622 = ((((1.0 - _637) * ((_625 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_637 * _625)) * _601;
    float _1623 = _1622 * ((cbModelParam._m0[1u].w * (_1606 - _1506)) + _1506);
    float _1624 = _1622 * ((cbModelParam._m0[1u].w * (_1608 - _1508)) + _1508);
    float _1625 = _1622 * ((cbModelParam._m0[1u].w * (_1610 - _1510)) + _1510);
    float _1628 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    float _1645 = _535 / cbSceneParam._m0[86u].x;
    float _1653 = (cbSceneParam._m0[88u].y * (1.0 - _509)) + cbSceneParam._m0[88u].z;
    float _3897 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1655 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 5.0;
    float _1660 = (_624 * cbMtdParam._m0[13u].z) * dot(vec3(_505, _506, _507), vec3(1.0, 0.0, 0.0));
    vec4 _1670 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1660 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1660 + _1645) * cbSceneParam._m0[86u].x, _536), _1655).w) + _1645) * cbSceneParam._m0[86u].x, _536), _1655);
    float _1686 = 1.0 - _1670.w;
    vec4 _1694 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_535, _536));
    float _1696 = _1694.w;
    float _1708 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1696);
    float _1709 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1696);
    float _1710 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1696);
    uvec4 _1714 = floatBitsToUint(cbInstanceData._m0[_576 + 5u]);
    uint _1716 = _1714.x * 14u;
    uint _1717 = _1716 + 13u;
    float _1722 = _601 + (-1.0);
    float _1725 = (cbLight._m0[_1717].x * _1722) + 1.0;
    float _1726 = (cbLight._m0[_1717].y * _1722) + 1.0;
    uint _1728 = _1716 + 4u;
    float _1739 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_505, _506, _507));
    float _1742 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    float _1743 = cbLight._m0[_1728].x * _1708;
    float _1744 = cbLight._m0[_1728].y * _1709;
    float _1745 = cbLight._m0[_1728].z * _1710;
    uint _1746 = _1716 + 5u;
    uint _1752 = _1716 | 1u;
    float _1758 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_505, _506, _507));
    float _1761 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    float _1826;
    float _1827;
    float _1828;
    if (_510 == 0.0)
    {
        float _3918 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _3929 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1780 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
        float _1782 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
        _1826 = ((cbLight._m0[_1746].x * _1761) * _1782) + ((_1743 * _1742) * _1780);
        _1827 = ((_1761 * cbLight._m0[_1746].y) * _1782) + ((_1744 * _1742) * _1780);
        _1828 = ((_1761 * cbLight._m0[_1746].z) * _1782) + ((_1745 * _1742) * _1780);
    }
    else
    {
        float _1792 = _1739 + _510;
        float _1795 = (_510 * 2.0) + 1.0;
        float _1796 = (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) / _1795;
        float _1803 = _1758 + _510;
        float _1805 = (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) / _1795;
        _1826 = (((_1805 * cbLight._m0[_1746].x) * _1761) + ((_1743 * _1796) * _1742)) * 0.3183098733425140380859375;
        _1827 = (((_1805 * cbLight._m0[_1746].y) * _1761) + ((_1744 * _1796) * _1742)) * 0.3183098733425140380859375;
        _1828 = (((_1805 * cbLight._m0[_1746].z) * _1761) + ((_1745 * _1796) * _1742)) * 0.3183098733425140380859375;
    }
    uint _1832 = _1716 + 8u;
    float _1848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1716].w)) * _509) * 0.949999988079071044921875);
    float _1849 = _1848 * _1848;
    float _1850 = cbLight._m0[_1716].x + _375;
    float _1851 = cbLight._m0[_1716].y + _376;
    float _1852 = cbLight._m0[_1716].z + _377;
    float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
    float _1857 = _1856 * _1850;
    float _1858 = _1856 * _1851;
    float _1859 = _1856 * _1852;
    float _1860 = dot(vec3(_505, _506, _507), vec3(cbLight._m0[_1716].xyz));
    float _3950 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1864 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1865 = dot(vec3(_505, _506, _507), vec3(_1857, _1858, _1859));
    float _3972 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1869 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1857, _1858, _1859));
    float _3983 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1873 = _1849 * _1849;
    float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
    float _1888 = (exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1889 = 1.0 - _1849;
    float _1900 = (0.5 / (((_1864 * ((_1863 * _1889) + _1849)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1889) + _1849) * _1863))) * _1863;
    float _3994 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1902 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
    uint _1918 = _1716 + 9u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _509) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1752].x + _375;
    float _1935 = cbLight._m0[_1752].y + _376;
    float _1936 = cbLight._m0[_1752].z + _377;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_505, _506, _507), vec3(cbLight._m0[_1752].xyz));
    float _4005 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1948 = dot(vec3(_505, _506, _507), vec3(_1941, _1942, _1943));
    float _4016 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1941, _1942, _1943));
    float _4027 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1933 * _1933;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = 1.0 - _1933;
    float _1980 = (0.5 / (((_1864 * ((_1947 * _1970) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1970) + _1933) * _1947))) * _1947;
    float _4038 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    float _1992 = (((_1969 * cbLight._m0[_1918].x) * _1982) * _1761) + ((((cbLight._m0[_1832].x * _1708) * _1888) * _1902) * _1742);
    float _1993 = (((_1969 * cbLight._m0[_1918].y) * _1982) * _1761) + ((((cbLight._m0[_1832].y * _1709) * _1888) * _1902) * _1742);
    float _1994 = (((_1969 * cbLight._m0[_1918].z) * _1982) * _1761) + ((((cbLight._m0[_1832].z * _1710) * _1888) * _1902) * _1742);
    float _2131;
    float _2133;
    float _2135;
    float _2137;
    float _2139;
    float _2141;
    if (_1714.y == 0u)
    {
        float _2071 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2071;
        float _2073 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2071;
        float _2074 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2071;
        uvec4 _2086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2087 = _2086.x;
        uint _2098 = uint((float(_2086.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _2087))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _2087)));
        float _2108 = (log2(_2074 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2109 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        uint _2112 = uint(isnan(14.0) ? _2109 : (isnan(_2109) ? 14.0 : min(_2109, 14.0)));
        uvec4 _2117 = texelFetch(g_lightClusterGridBuffer, int(((_2112 << 2u) + (_2098 << 6u)) >> 2u));
        uint _2118 = _2117.x;
        uint _2119 = _2086.z;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        if (((((1u << ((_2119 >> 4u) & 15u)) + 4294967295u) & _2118) == 0u) || ((_2119 & 240u) == 0u))
        {
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
        }
        else
        {
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            uint _2554 = 0u;
            uint _2563;
            bool _2564;
            for (;;)
            {
                _2563 = texelFetch(g_lightClassification, int((((_2112 << 5u) + (_2098 << 9u)) + (_2554 << 2u)) >> 2u)).x;
                _2564 = _2563 == 0u;
                float frontier_phi_56_pred;
                float frontier_phi_56_pred_1;
                float frontier_phi_56_pred_2;
                float frontier_phi_56_pred_3;
                float frontier_phi_56_pred_4;
                float frontier_phi_56_pred_5;
                if (_2564)
                {
                    frontier_phi_56_pred = _2548;
                    frontier_phi_56_pred_1 = _2553;
                    frontier_phi_56_pred_2 = _2552;
                    frontier_phi_56_pred_3 = _2551;
                    frontier_phi_56_pred_4 = _2550;
                    frontier_phi_56_pred_5 = _2549;
                }
                else
                {
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    uint _2699;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2551;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2563;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    for (;;)
                    {
                        uint _2703 = uint(findLSB(_2699)) + (_2554 << 5u);
                        uint _2700 = (_2699 + 4294967295u) & _2699;
                        uint _2705 = _2703 * 48u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2725 = (_2703 * 48u) + 4u;
                        vec4 _2738 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        float _2739 = _2738.x;
                        float _2740 = _2738.y;
                        float _2741 = _2738.z;
                        uint _2744 = (_2703 * 48u) + 8u;
                        vec3 _2755 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x));
                        uint _2760 = (_2703 * 48u) + 12u;
                        vec2 _2768 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x));
                        float _2774 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
                        float _2775 = _2774 * _2072;
                        float _2776 = _2774 * _2073;
                        float _2777 = _2774 * _2074;
                        float _2778 = _2719.x - _2072;
                        float _2779 = _2719.y - _2073;
                        float _2780 = _2719.z - _2074;
                        float _2781 = dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780));
                        float _2784 = inversesqrt(_2781);
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2788 = dot(vec3(_557, _560, _563), vec3(_2785, _2786, _2787));
                        float _2793 = 1.0 - (_2781 * _2719.w);
                        float _4059 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2795 = sqrt(_2781) * _2738.w;
                        float _2798 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                        float _2799 = _2798 * _2798;
                        float _2800 = 1.0 - _2799;
                        float _2802 = (_2800 * _2800) * _510;
                        float _2805 = ((_2800 * _2788) + _2799) + _2802;
                        float _2810 = _2795 * _2795;
                        float _2815 = ((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2794) / (((_2802 * 2.0) + 1.0) * ((_2810 * 0.699999988079071044921875) + 1.0));
                        float _2819 = dot(vec3(_2785, _2786, _2787), vec3(_2775, _2776, _2777));
                        float _4075 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2826 = dot(vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777), vec3(_557, _560, _563)) + 1.0;
                        float _2828 = (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))) * 0.5;
                        float _2836 = ((_2828 * _2828) * _2768.x) * exp2((_2768.y * 32.0) * log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))));
                        float _2838 = _510 / (_510 + 1.0);
                        float _2854 = (-0.0) - _2072;
                        float _2855 = (-0.0) - _2073;
                        float _2856 = (-0.0) - _2074;
                        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2871 = exp2(log2(1.0 / ((_2810 * 3.5) + 5.0)) * 0.25);
                        float _2872 = 1.0 - _625;
                        float _2879 = sqrt(1.0 - ((1.0 - (_2872 * _2872)) * (1.0 - (_2871 * _2871))));
                        float _2880 = _2879 * _2879;
                        float _2881 = _2880 * _2880;
                        float _2882 = _2861 + _2785;
                        float _2883 = _2862 + _2786;
                        float _2884 = _2863 + _2787;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2892 = dot(vec3(_557, _560, _563), vec3(_2861, _2862, _2863));
                        float _4091 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2896 = dot(vec3(_557, _560, _563), vec3(_2888 * _2882, _2888 * _2883, _2888 * _2884));
                        float _4102 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2899 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2903 = ((_2899 * _2899) * (_2881 + (-1.0))) + 1.0;
                        float _2904 = _2798 * _2880;
                        float _2905 = _2904 * _2904;
                        float _2908 = ((1.0 - _2905) * _2788) + _2905;
                        float _4113 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2909 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2910 = 1.0 - _2880;
                        float _2920 = (0.5 / (((_2909 * ((_2895 * _2910) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2909 * _2910) + _2880) * _2895))) * _2909;
                        float _4124 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2931 = (((_2881 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_2903 * _2903) * ((_2810 * 2.1991131305694580078125) + 3.141590118408203125))) * _2794;
                        _2628 = (((((_2739 * 0.3183098733425140380859375) * _2838) * _2836) + _2739) * _2815) + _2696;
                        _2629 = (((((_2740 * 0.3183098733425140380859375) * _2838) * _2836) + _2740) * _2815) + _2697;
                        _2630 = (((((_2741 * 0.3183098733425140380859375) * _2838) * _2836) + _2741) * _2815) + _2698;
                        _2625 = (_2931 * _2755.x) + _2693;
                        _2626 = (_2931 * _2755.y) + _2694;
                        _2627 = (_2931 * _2755.z) + _2695;
                        if (_2700 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2693 = _2625;
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2700;
                        }
                    }
                    frontier_phi_56_pred = _2625;
                    frontier_phi_56_pred_1 = _2630;
                    frontier_phi_56_pred_2 = _2629;
                    frontier_phi_56_pred_3 = _2628;
                    frontier_phi_56_pred_4 = _2627;
                    frontier_phi_56_pred_5 = _2626;
                }
                _2348 = frontier_phi_56_pred;
                _2358 = frontier_phi_56_pred_1;
                _2356 = frontier_phi_56_pred_2;
                _2354 = frontier_phi_56_pred_3;
                _2352 = frontier_phi_56_pred_4;
                _2350 = frontier_phi_56_pred_5;
                uint _2555 = _2554 + 1u;
                if (_2555 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2548 = _2348;
                    _2549 = _2350;
                    _2550 = _2352;
                    _2551 = _2354;
                    _2552 = _2356;
                    _2553 = _2358;
                    _2554 = _2555;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
        }
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.z;
        uint _2364 = (_2362 >> 8u) & 15u;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((4294967295u << _2364) & _2118) == 0u)
        {
            _2516 = _2347;
            _2518 = _2349;
            _2520 = _2351;
            _2522 = _2353;
            _2524 = _2355;
            _2526 = _2357;
        }
        else
        {
            float _2541 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
            float _2542 = _2541 * _2072;
            float _2543 = _2541 * _2073;
            float _2544 = _2541 * _2074;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2364 < ((_2362 >> 12u) & 15u))
            {
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2676 = _2347;
                float _2677 = _2349;
                float _2678 = _2351;
                float _2679 = _2353;
                float _2680 = _2355;
                float _2681 = _2357;
                uint _2682 = _2364;
                uint _2691;
                bool _2692;
                for (;;)
                {
                    _2691 = texelFetch(g_lightClassification, int((((_2112 << 5u) + (_2098 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                    _2692 = _2691 == 0u;
                    float frontier_phi_62_pred;
                    float frontier_phi_62_pred_1;
                    float frontier_phi_62_pred_2;
                    float frontier_phi_62_pred_3;
                    float frontier_phi_62_pred_4;
                    float frontier_phi_62_pred_5;
                    if (_2692)
                    {
                        frontier_phi_62_pred = _2681;
                        frontier_phi_62_pred_1 = _2680;
                        frontier_phi_62_pred_2 = _2679;
                        frontier_phi_62_pred_3 = _2678;
                        frontier_phi_62_pred_4 = _2677;
                        frontier_phi_62_pred_5 = _2676;
                    }
                    else
                    {
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2949 = _2676;
                        float _2950 = _2677;
                        float _2951 = _2678;
                        float _2952 = _2679;
                        float _2953 = _2680;
                        float _2954 = _2681;
                        uint _2955 = _2691;
                        uint _2956;
                        vec4 _2981;
                        float _2982;
                        vec4 _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        vec3 _3012;
                        vec2 _3021;
                        vec4 _3036;
                        vec4 _3052;
                        float _3099;
                        bool _3100;
                        for (;;)
                        {
                            uint _2966 = ((_2682 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2955));
                            _2956 = (_2955 + 4294967295u) & _2955;
                            uint _2968 = _2966 * 40u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2982 = _2981.w;
                            uint _2984 = (_2966 * 40u) + 4u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _2998 = _2997.x;
                            _2999 = _2997.y;
                            _3000 = _2997.z;
                            uint _3002 = (_2966 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3014 = (_2966 * 40u) + 12u;
                            _3021 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x));
                            uint _3023 = (_2966 * 40u) + 16u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3039 = (_2966 * 40u) + 20u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3055 = (_2966 * 40u) + 24u;
                            vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3074 = (_2966 * 40u) + 28u;
                            vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3099 = fma(_2074, _3087.z, fma(_2073, _3087.y, _3087.x * _2072)) + _3087.w;
                            _3100 = !((fma(_2074, _3068.z, fma(_2073, _3068.y, _3068.x * _2072)) + _3068.w) <= 0.0);
                            float frontier_phi_68_pred;
                            float frontier_phi_68_pred_1;
                            float frontier_phi_68_pred_2;
                            float frontier_phi_68_pred_3;
                            float frontier_phi_68_pred_4;
                            float frontier_phi_68_pred_5;
                            if (_3100)
                            {
                                float _3126 = _2981.x - _2072;
                                float _3127 = _2981.y - _2073;
                                float _3128 = _2981.z - _2074;
                                float _3129 = dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128));
                                float _3132 = inversesqrt(_3129);
                                float _3133 = _3132 * _3126;
                                float _3134 = _3132 * _3127;
                                float _3135 = _3132 * _3128;
                                float _3139 = 1.0 - (_3129 / (_2982 * _2982));
                                float _4135 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3144 = sqrt(_3129) * _2997.w;
                                float _3146 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                                float _3147 = _3146 * _3146;
                                float _3148 = 1.0 - _3147;
                                float _3150 = (_3148 * _3148) * _510;
                                float _3153 = ((_3148 * dot(vec3(_3133, _3134, _3135), vec3(_557, _560, _563))) + _3147) + _3150;
                                float _3158 = _3144 * _3144;
                                float _3163 = (fma(_2074, _3036.z, fma(_2073, _3036.y, _3036.x * _2072)) + _3036.w) / _3099;
                                float _3164 = (fma(_2074, _3052.z, fma(_2073, _3052.y, _3052.x * _2072)) + _3052.w) / _3099;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4151 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3140) / (((_3150 * 2.0) + 1.0) * ((_3158 * 0.699999988079071044921875) + 1.0)));
                                float _3171 = (-0.0) - _2542;
                                float _3172 = (-0.0) - _2543;
                                float _3173 = (-0.0) - _2544;
                                float _3174 = dot(vec3(_3133, _3134, _3135), vec3(_2542, _2543, _2544));
                                float _4162 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3181 = dot(vec3(_3171, _3172, _3173), vec3(_557, _560, _563)) + 1.0;
                                float _3183 = (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * 0.5;
                                float _3190 = ((_3183 * _3183) * _3021.x) * exp2((_3021.y * 32.0) * log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))));
                                float _3192 = _510 / (_510 + 1.0);
                                float _3213 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _625;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3133 - _2542;
                                float _3225 = _3134 - _2543;
                                float _3226 = _3135 - _2544;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_557, _560, _563), vec3(_3171, _3172, _3173));
                                float _4178 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3238 = dot(vec3(_557, _560, _563), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4189 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3146 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_557, _560, _563), vec3(_3133, _3134, _3135))) + _3247;
                                float _4200 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4211 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3169 * _3140) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_3245 * _3245) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_68_pred = ((((_3000 * 0.3183098733425140380859375) * _3192) * _3190) + _3000) * _3170;
                                frontier_phi_68_pred_1 = ((((_2999 * 0.3183098733425140380859375) * _3192) * _3190) + _2999) * _3170;
                                frontier_phi_68_pred_2 = ((((_2998 * 0.3183098733425140380859375) * _3192) * _3190) + _2998) * _3170;
                                frontier_phi_68_pred_3 = _3275 * _3012.z;
                                frontier_phi_68_pred_4 = _3275 * _3012.y;
                                frontier_phi_68_pred_5 = _3275 * _3012.x;
                            }
                            else
                            {
                                frontier_phi_68_pred = 0.0;
                                frontier_phi_68_pred_1 = 0.0;
                                frontier_phi_68_pred_2 = 0.0;
                                frontier_phi_68_pred_3 = 0.0;
                                frontier_phi_68_pred_4 = 0.0;
                                frontier_phi_68_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_68_pred;
                            _3283 = frontier_phi_68_pred_1;
                            _3282 = frontier_phi_68_pred_2;
                            _3281 = frontier_phi_68_pred_3;
                            _3280 = frontier_phi_68_pred_4;
                            _3279 = frontier_phi_68_pred_5;
                            _2939 = _3282 + _2952;
                            _2940 = _3283 + _2953;
                            _2941 = _3284 + _2954;
                            _2936 = _3279 + _2949;
                            _2937 = _3280 + _2950;
                            _2938 = _3281 + _2951;
                            if (_2956 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2956;
                                continue;
                            }
                        }
                        frontier_phi_62_pred = _2941;
                        frontier_phi_62_pred_1 = _2940;
                        frontier_phi_62_pred_2 = _2939;
                        frontier_phi_62_pred_3 = _2938;
                        frontier_phi_62_pred_4 = _2937;
                        frontier_phi_62_pred_5 = _2936;
                    }
                    _2527 = frontier_phi_62_pred;
                    _2525 = frontier_phi_62_pred_1;
                    _2523 = frontier_phi_62_pred_2;
                    _2521 = frontier_phi_62_pred_3;
                    _2519 = frontier_phi_62_pred_4;
                    _2517 = frontier_phi_62_pred_5;
                    uint _2683 = _2682 + 1u;
                    if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2676 = _2517;
                        _2677 = _2519;
                        _2678 = _2521;
                        _2679 = _2523;
                        _2680 = _2525;
                        _2681 = _2527;
                        _2682 = _2683;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2527;
                frontier_phi_49_50_ladder_1 = _2523;
                frontier_phi_49_50_ladder_2 = _2525;
                frontier_phi_49_50_ladder_3 = _2521;
                frontier_phi_49_50_ladder_4 = _2519;
                frontier_phi_49_50_ladder_5 = _2517;
            }
            else
            {
                frontier_phi_49_50_ladder = _2357;
                frontier_phi_49_50_ladder_1 = _2353;
                frontier_phi_49_50_ladder_2 = _2355;
                frontier_phi_49_50_ladder_3 = _2351;
                frontier_phi_49_50_ladder_4 = _2349;
                frontier_phi_49_50_ladder_5 = _2347;
            }
            _2516 = frontier_phi_49_50_ladder_5;
            _2518 = frontier_phi_49_50_ladder_4;
            _2520 = frontier_phi_49_50_ladder_3;
            _2522 = frontier_phi_49_50_ladder_1;
            _2524 = frontier_phi_49_50_ladder_2;
            _2526 = frontier_phi_49_50_ladder;
        }
        float _2531 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _2131 = (_2531 * _2522) + _1826;
        _2133 = (_2531 * _2524) + _1827;
        _2135 = (_2531 * _2526) + _1828;
        _2137 = ((_2516 * 0.039999999105930328369140625) * _2531) + _1992;
        _2139 = ((_2518 * 0.039999999105930328369140625) * _2531) + _1993;
        _2141 = ((_2520 * 0.039999999105930328369140625) * _2531) + _1994;
    }
    else
    {
        _2131 = _1826;
        _2133 = _1827;
        _2135 = _1828;
        _2137 = _1992;
        _2139 = _1993;
        _2141 = _1994;
    }
    float _2161 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2162 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2163 = cbSceneParam._m0[86u].x * ((_535 / cbSceneParam._m0[86u].x) + ((_624 * cbMtdParam._m0[13u].y) * dot(vec3(_505, _506, _507), vec3(_203, _204, _205))));
    float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
    float _2165 = isnan(_2162) ? _536 : (isnan(_536) ? _2162 : min(_536, _2162));
    vec4 _2167 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2164, _2165), 0.0);
    float _2169 = _2167.x;
    bool _2190 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2169)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2169))) > _529;
    float _2191 = _2190 ? _2164 : _535;
    float _2192 = _2190 ? _2165 : _536;
    vec4 _2194 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2191, _2192));
    vec4 _2199 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2191, _2192));
    float _2201 = _2199.x;
    float _2221 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2201)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2201))) - _529;
    bool _2231 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2235 = (isnan(_2221) ? 0.0 : (isnan(0.0) ? _2221 : max(0.0, _2221))) * (-1.44269502162933349609375);
    float _4242 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4253 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4264 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _2262 = 0.959999978542327880859375 - (exp2(log2(1.0 - _616) * 5.0) * 0.959999978542327880859375);
    float _2265 = ((_2194.x * _2262) * exp2(_2235 * (_2231 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2268 = ((_2194.y * _2262) * exp2(_2235 * (_2231 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2271 = ((_2194.z * _2262) * exp2(_2235 * (_2231 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2293 = _535 / cbSceneParam._m0[86u].x;
    float _2294 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2308 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, (log2((isnan(cbSceneParam._m0[77u].w) ? _529 : (isnan(_529) ? cbSceneParam._m0[77u].w : min(_529, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2310 = _2308.x;
    float _2311 = _2308.y;
    float _2312 = _2308.z;
    float _2313 = _2308.w;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_529 > cbSceneParam._m0[78u].w)
    {
        float _2372 = isnan(_529) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _529 : min(cbSceneParam._m0[80u].w, _529));
        float _2373 = _2372 / _529;
        float _2384 = _2373 * _273;
        float _2385 = _274 * _2373;
        float _2386 = (-0.0) - _2385;
        float _2387 = _2373 * _275;
        float _2389 = (cbSceneParam._m0[77u].w * _2386) / _2372;
        float _2390 = _2389 + cbSceneParam._m0[79u].w;
        float _2391 = cbSceneParam._m0[79u].w - _2385;
        float _2397 = sqrt(((_2384 * _2384) + (_2385 * _2385)) + (_2387 * _2387));
        float _2400 = (1.0 - (cbSceneParam._m0[77u].w / _2372)) * _2397;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2406 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2638;
        if (abs((_2386 - _2389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2638 = ((((_2390 > 0.0) ? exp2(_2405 * _2390) : (2.0 - exp2(_2406 * _2390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2400;
        }
        else
        {
            float _2577 = 1.0 / cbSceneParam._m0[80u].x;
            float _2578 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : max(_2390, _2391));
            float _2579 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : min(_2390, _2391));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            _2638 = ((abs(_2397 / _2386) * cbSceneParam._m0[80u].y) * ((((_2588 - _2589) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0))))) * _2577)) - ((exp2(_2406 * _2588) - exp2(_2406 * _2589)) * _2577))) + (_2400 * cbSceneParam._m0[80u].z);
        }
        vec4 _2640 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, 1.0), 0.0);
        float _2649 = exp2((_2638 * (-1.44269502162933349609375)) * (1.0 - _2640.w));
        float _2650 = log2(_2649);
        float _2666 = log2(_2313);
        _2408 = (exp2(_2666 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].x)) * _2640.x) / cbSceneParam._m0[78u].x)) + _2310;
        _2410 = (exp2(_2666 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].y)) * _2640.y) / cbSceneParam._m0[78u].y)) + _2311;
        _2412 = (exp2(_2666 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2650 * cbSceneParam._m0[78u].z)) * _2640.z) / cbSceneParam._m0[78u].z)) + _2312;
        _2414 = _2649 * _2313;
    }
    else
    {
        _2408 = _2310;
        _2410 = _2311;
        _2412 = _2312;
        _2414 = _2313;
    }
    bool _2426 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2427 = log2(_2414);
    float _2434 = exp2(_2427 * cbSceneParam._m0[78u].x) * ((_2265 + (((((_1622 * _1670.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1415) * _1686)) + _2137) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2131 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _601))) - _2265) * cbMtdParam._m0[15u].x));
    float _2435 = exp2(_2427 * cbSceneParam._m0[78u].y) * ((_2268 + (((((_1622 * _1670.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1415) * _1686)) + _2139) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2133 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _601))) - _2268) * cbMtdParam._m0[15u].x));
    float _2436 = exp2(_2427 * cbSceneParam._m0[78u].z) * ((_2271 + (((((_1622 * _1670.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1415) * _1686)) + _2141) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2135 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _601))) - _2271) * cbMtdParam._m0[15u].x));
    vec4 _2444 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_535, _536));
    float _2446 = _2444.x;
    float _2467 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2446)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2446))) - _529) * cbMtdParam._m0[14u].z;
    float _4315 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (cbInstanceData._m0[_576 + 6u].w * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)));
    float _2478 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2478 * (_2426 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.y = _2478 * (_2426 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.z = _2478 * (_2426 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2412)));
    SV_Target.w = _2469;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2469;
}


