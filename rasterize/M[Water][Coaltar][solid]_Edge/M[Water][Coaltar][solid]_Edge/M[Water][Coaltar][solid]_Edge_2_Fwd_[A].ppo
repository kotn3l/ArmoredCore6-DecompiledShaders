#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1087;
float _3538;
float _3539;
float _3540;
float _3541;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _207 = _206 * _199;
    float _208 = _206 * _200;
    float _209 = _206 * _201;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    float _288 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _289 = _288 * _277;
    float _290 = _288 * _278;
    float _291 = _288 * _279;
    float _299 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _300 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _314 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8, SS_BumpMap), vec2((_299 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_300 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _322 = (_314.x * 2.0) + (-1.0);
    float _324 = (_314.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3550 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    float _353 = (dot(vec4(_289, _290, _291, 0.0), vec4(_344 * _334, _344 * _337, _344 * _340, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _366 = dot(vec3(_277, _278, _279), vec3(_207, _208, _209));
    float _369 = dot(vec3(_277, _278, _279), vec3(_221, _222, _223));
    float _372 = dot(vec3(_277, _278, _279), vec3(_214, _215, _216));
    float _378 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _399 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _419 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_366 * cbMtdParam._m0[12u].x) * _378) * _399) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_369 * cbMtdParam._m0[12u].x) * _378) * _399) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _442 = dot(vec4(_289, _290, _291, 0.0), vec4(_214, _215, _216, 0.0)) - cbMtdParam._m0[12u].w;
    float _3561 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _449 = exp2(log2(1.0 - (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _464 = (((((sin(_353) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _419.x) * cbMtdParam._m0[9u].x) * ((_449 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _473 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _419.y) * cbMtdParam._m0[9u].y) * ((_449 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_353 * 0.85000002384185791015625) + 1.0);
    float _482 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _419.z) * cbMtdParam._m0[9u].z) * ((_449 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_353 * 0.699999988079071044921875) + 1.0);
    vec4 _494 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _498 = cbMtdParam._m0[12u].z * _494.x;
    vec4 _511 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3577 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _527 = cbMtdParam._m0[14u].w + _511.z;
    vec4 _539 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _299) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _300) + cbTextureTilingScale._m0[1u].w));
    float _543 = cbMtdParam._m0[13u].w * _539.x;
    float _561 = fma(_525, _214, fma(_519, _221, _518 * _207));
    float _564 = fma(_525, _215, fma(_519, _222, _518 * _208));
    float _567 = fma(_525, _216, fma(_519, _223, _518 * _209));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3588 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3599 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _576 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _577 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3615 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3626 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3637 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _601 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _603 = _601.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _766 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _772 = (cbMatDynParam._m0[5u].x * _766) + cbMatDynParam._m0[5u].y;
        float _3648 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _777 = (cbMatDynParam._m0[5u].z * _766) + cbMatDynParam._m0[5u].w;
        float _3659 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) - _773)) + _773) < ((_603 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _638 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _641 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _654 = uint(roundEven(NORMAL.w)) * 13u;
    uint _655 = _654 + 9u;
    uint _656 = _655 + uint(cbMatDynParam._m0[0u].w);
    float _662 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_656].x;
    float _663 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_656].y;
    float _664 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_656].z;
    float _3670 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _679 = _676.x * TEXCOORD.z;
    float _680 = dot(vec3(_572, _573, _574), vec3(_289, _290, _291));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _572) - _289;
    float _688 = (_683 * _573) - _290;
    float _689 = (_683 * _574) - _291;
    float _693 = abs(dot(vec3(_289, _290, _291), vec3(_572, _573, _574)));
    float _3703 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _702 = 10.0 / (_596 + 10.0);
    float _703 = sqrt(_576);
    float _715 = exp2((_703 * 5.0) * log2(1.0 - (_694 * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _815 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _819 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _844 = _747 + _572;
        float _845 = _751 + _573;
        float _846 = _755 + _574;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_572, _573, _574), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3751 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_572, _573, _574), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3784 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_572, _573, _574), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3817 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1130 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1134 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1138 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1161 = _747 + _572;
        float _1162 = _751 + _573;
        float _1163 = _755 + _574;
        float _1173 = fma(_1163, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161)) - _1130;
        float _1174 = fma(_1163, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161)) - _1134;
        float _1175 = fma(_1163, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161)) - _1138;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1130 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1134 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[35u].z) + ((((((_1138 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1229 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1196.x + (-0.5));
        float _1231 = _1229 * (_1196.y + (-0.5));
        float _1232 = _1229 * (_1196.z + (-0.5));
        float _1239 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1203.x + (-0.5));
        float _1241 = _1239 * (_1203.y + (-0.5));
        float _1242 = _1239 * (_1203.z + (-0.5));
        float _1249 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1210.x + (-0.5));
        float _1251 = _1249 * (_1210.y + (-0.5));
        float _1252 = _1249 * (_1210.z + (-0.5));
        float _1259 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1217.x + (-0.5));
        float _1261 = _1259 * (_1217.y + (-0.5));
        float _1262 = _1259 * (_1217.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_572, _573, _574), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3880 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1293 + 1.0))) + _1298) * _1263;
        float _1308 = _1231 * 0.5;
        float _1309 = _1241 * 0.5;
        float _1310 = _1251 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_572, _573, _574), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3913 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1335 + 1.0))) + _1340) * _1264;
        float _1350 = _1232 * 0.5;
        float _1351 = _1242 * 0.5;
        float _1352 = _1252 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_572, _573, _574), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3946 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1377 + 1.0))) + _1382) * _1265;
        _1399 = _1232;
        _1400 = _1231;
        _1401 = _1230;
        _1402 = _1242;
        _1403 = _1241;
        _1404 = _1240;
        _1405 = _1252;
        _1406 = _1251;
        _1407 = _1250;
        _1408 = _1265;
        _1409 = _1264;
        _1410 = _1263;
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = _1087;
        _1408 = _1087;
        _1409 = _1087;
        _1410 = _1087;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1099)) + _1099;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1446 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1423));
    float _1467 = _687 * 0.5;
    float _1468 = _688 * 0.5;
    float _1469 = _689 * 0.5;
    float _1470 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1473 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1476 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1510;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1483 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1487 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1491 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1498 = dot(vec4(cbModelParam._m0[39u]), vec4(_1467, _1468, _1469, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1521;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1512 = dot(vec4(cbModelParam._m0[40u]), vec4(_1467, _1468, _1469, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1525 = (_1521 * cbModelParam._m0[1u].x) + (_1510 * (1.0 - cbModelParam._m0[1u].x));
    float _1535 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1535 : min(cbModelParam._m0[25u].z, _1535));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1583 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1587 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1591 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1594 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1597 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1600 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1628;
        if (_1594 > 0.0)
        {
            _1628 = abs((1.0 - _1583) / _1594);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1583 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1628 = frontier_phi_17_15_ladder;
        }
        float _1851;
        if (_1597 > 0.0)
        {
            _1851 = abs((1.0 - _1587) / _1597);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1587 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1851 = frontier_phi_26_22_ladder;
        }
        float _2086;
        if (_1600 > 0.0)
        {
            _2086 = abs((1.0 - _1591) / _1600);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1591 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2086 = frontier_phi_37_33_ladder;
        }
        float _2088 = isnan(_1851) ? _1628 : (isnan(_1628) ? _1851 : min(_1628, _1851));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1594) + _1583;
        float _2094 = (_2089 * _1597) + _1587;
        float _2095 = (_2089 * _1600) + _1591;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2098 = (-1.0) - _2096;
        float _2100 = _2096 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2095 > _2100) || ((_2095 < _2098) || ((_2094 > _2100) || ((_2094 < _2098) || ((_2093 < _2098) || (_2093 > _2100))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2095, cbModelParam._m0[9u].z, fma(_2094, cbModelParam._m0[9u].y, _2093 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2095, cbModelParam._m0[10u].z, fma(_2094, cbModelParam._m0[10u].y, _2093 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2095, cbModelParam._m0[11u].z, fma(_2094, cbModelParam._m0[11u].y, _2093 * cbModelParam._m0[11u].x))), _1536);
            frontier_phi_16_37_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1616 = frontier_phi_16_37_ladder_2;
        _1618 = frontier_phi_16_37_ladder_1;
        _1620 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1536);
        _1616 = _1604.x * cbModelParam._m0[1u].y;
        _1618 = _1604.y * cbModelParam._m0[1u].y;
        _1620 = _1604.z * cbModelParam._m0[1u].y;
    }
    float _1624 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1624 : min(cbModelParam._m0[25u].w, _1624));
    float _1716;
    float _1718;
    float _1720;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1680 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1684 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1688 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1691 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1694 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1697 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1856;
        if (_1691 > 0.0)
        {
            _1856 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1856 = frontier_phi_28_24_ladder;
        }
        float _2113;
        if (_1694 > 0.0)
        {
            _2113 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2113 = frontier_phi_39_35_ladder;
        }
        float _2578;
        if (_1697 > 0.0)
        {
            _2578 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2578 = frontier_phi_50_45_ladder;
        }
        float _2580 = isnan(_2113) ? _1856 : (isnan(_1856) ? _2113 : min(_1856, _2113));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1691) + _1680;
        float _2586 = (_2581 * _1694) + _1684;
        float _2587 = (_2581 * _1697) + _1688;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1625);
            frontier_phi_25_50_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1716 = frontier_phi_25_50_ladder_2;
        _1718 = frontier_phi_25_50_ladder_1;
        _1720 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1625);
        _1716 = _1700.x * cbModelParam._m0[1u].z;
        _1718 = _1700.y * cbModelParam._m0[1u].z;
        _1720 = _1700.z * cbModelParam._m0[1u].z;
    }
    float _1732 = ((((1.0 - _715) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_715 * _703)) * _679;
    float _1733 = _1732 * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1734 = _1732 * ((cbModelParam._m0[1u].w * (_1718 - _1618)) + _1618);
    float _1735 = _1732 * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1733 * cbSceneParam._m0[91u].x));
    float _1755 = _615 / cbSceneParam._m0[86u].x;
    float _1763 = (cbSceneParam._m0[88u].y * (1.0 - _576)) + cbSceneParam._m0[88u].z;
    float _4072 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 5.0;
    float _1770 = (_702 * cbMtdParam._m0[13u].z) * dot(vec3(_572, _573, _574), vec3(1.0, 0.0, 0.0));
    vec4 _1780 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1770 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1770 + _1755) * cbSceneParam._m0[86u].x, _616), _1765).w) + _1755) * cbSceneParam._m0[86u].x, _616), _1765);
    float _1796 = 1.0 - _1780.w;
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_654 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1814 = _679 + (-1.0);
    float _1817 = (cbLight._m0[_1809].x * _1814) + 1.0;
    float _1818 = (cbLight._m0[_1809].y * _1814) + 1.0;
    uint _1820 = _1808 + 4u;
    float _1831 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_572, _573, _574));
    float _1834 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1835 = _1808 + 5u;
    uint _1841 = _1808 | 1u;
    float _1847 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_572, _573, _574));
    float _1850 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    float _1915;
    float _1916;
    float _1917;
    if (_577 == 0.0)
    {
        float _4093 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _4104 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1869 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
        float _1871 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
        _1915 = ((cbLight._m0[_1835].x * _1850) * _1871) + ((cbLight._m0[_1820].x * _1834) * _1869);
        _1916 = ((_1850 * cbLight._m0[_1835].y) * _1871) + ((_1834 * cbLight._m0[_1820].y) * _1869);
        _1917 = ((_1850 * cbLight._m0[_1835].z) * _1871) + ((_1834 * cbLight._m0[_1820].z) * _1869);
    }
    else
    {
        float _1881 = _1831 + _577;
        float _1884 = (_577 * 2.0) + 1.0;
        float _1885 = (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) / _1884;
        float _1892 = _1847 + _577;
        float _1894 = (isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) / _1884;
        _1915 = (((_1894 * cbLight._m0[_1835].x) * _1850) + ((_1885 * cbLight._m0[_1820].x) * _1834)) * 0.3183098733425140380859375;
        _1916 = (((_1894 * cbLight._m0[_1835].y) * _1850) + ((_1885 * cbLight._m0[_1820].y) * _1834)) * 0.3183098733425140380859375;
        _1917 = (((_1894 * cbLight._m0[_1835].z) * _1850) + ((_1885 * cbLight._m0[_1820].z) * _1834)) * 0.3183098733425140380859375;
    }
    uint _1921 = _1808 + 8u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _576) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1808].x + _289;
    float _1940 = cbLight._m0[_1808].y + _290;
    float _1941 = cbLight._m0[_1808].z + _291;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1808].xyz));
    float _4125 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1953 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1954 = dot(vec3(_572, _573, _574), vec3(_1946, _1947, _1948));
    float _4147 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1946, _1947, _1948));
    float _4158 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1938 * _1938;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1977 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1978 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1953 * ((_1952 * _1978) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _1978) + _1938) * _1952))) * _1952;
    float _4169 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    uint _2004 = _1808 + 9u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _576) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1841].x + _289;
    float _2021 = cbLight._m0[_1841].y + _290;
    float _2022 = cbLight._m0[_1841].z + _291;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1841].xyz));
    float _4180 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2034 = dot(vec3(_572, _573, _574), vec3(_2027, _2028, _2029));
    float _4191 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2027, _2028, _2029));
    float _4202 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2019 * _2019;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2019;
    float _2066 = (0.5 / (((_1953 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2056) + _2019) * _2033))) * _2033;
    float _4213 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    float _2078 = (((_2055 * cbLight._m0[_2004].x) * _2068) * _1850) + (((_1977 * cbLight._m0[_1921].x) * _1991) * _1834);
    float _2079 = (((_2055 * cbLight._m0[_2004].y) * _2068) * _1850) + (((_1977 * cbLight._m0[_1921].y) * _1991) * _1834);
    float _2080 = (((_2055 * cbLight._m0[_2004].z) * _2068) * _1850) + (((_1977 * cbLight._m0[_1921].z) * _1991) * _1834);
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_1806.y == 0u)
    {
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2157;
        float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2157;
        float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2157;
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.x;
        uint _2184 = uint((float(_2172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2173))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2173)));
        float _2194 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2195 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        uint _2198 = uint(isnan(14.0) ? _2195 : (isnan(_2195) ? 14.0 : min(_2195, 14.0)));
        uvec4 _2203 = texelFetch(g_lightClusterGridBuffer, int(((_2198 << 2u) + (_2184 << 6u)) >> 2u));
        uint _2204 = _2203.x;
        uint _2205 = _2172.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2205 >> 4u) & 15u)) + 4294967295u) & _2204) == 0u) || ((_2205 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            uint _2642 = 0u;
            uint _2651;
            bool _2652;
            for (;;)
            {
                _2651 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                _2652 = _2651 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2652)
                {
                    frontier_phi_61_pred = _2637;
                    frontier_phi_61_pred_1 = _2641;
                    frontier_phi_61_pred_2 = _2640;
                    frontier_phi_61_pred_3 = _2639;
                    frontier_phi_61_pred_4 = _2638;
                    frontier_phi_61_pred_5 = _2636;
                }
                else
                {
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    uint _2808;
                    _2802 = _2636;
                    _2803 = _2637;
                    _2804 = _2638;
                    _2805 = _2639;
                    _2806 = _2640;
                    _2807 = _2641;
                    _2808 = _2651;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    for (;;)
                    {
                        uint _2812 = uint(findLSB(_2808)) + (_2642 << 5u);
                        uint _2809 = (_2808 + 4294967295u) & _2808;
                        uint _2814 = _2812 * 48u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2834 = (_2812 * 48u) + 4u;
                        vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        float _2848 = _2847.x;
                        float _2849 = _2847.y;
                        float _2850 = _2847.z;
                        uint _2853 = (_2812 * 48u) + 8u;
                        vec3 _2864 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x));
                        uint _2869 = (_2812 * 48u) + 12u;
                        vec2 _2877 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x));
                        float _2883 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
                        float _2884 = _2883 * _2158;
                        float _2885 = _2883 * _2159;
                        float _2886 = _2883 * _2160;
                        float _2887 = _2828.x - _2158;
                        float _2888 = _2828.y - _2159;
                        float _2889 = _2828.z - _2160;
                        float _2890 = dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889));
                        float _2893 = inversesqrt(_2890);
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2897 = dot(vec3(_635, _638, _641), vec3(_2894, _2895, _2896));
                        float _2902 = 1.0 - (_2890 * _2828.w);
                        float _4234 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2903 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2904 = sqrt(_2890) * _2847.w;
                        float _2907 = 1.39999997615814208984375 / (_2904 + 1.39999997615814208984375);
                        float _2908 = _2907 * _2907;
                        float _2909 = 1.0 - _2908;
                        float _2911 = (_2909 * _2909) * _577;
                        float _2914 = ((_2909 * _2897) + _2908) + _2911;
                        float _2919 = _2904 * _2904;
                        float _2923 = ((isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))) * _2903) / (((_2911 * 2.0) + 1.0) * ((_2919 * 0.699999988079071044921875) + 1.0));
                        float _2927 = dot(vec3(_2894, _2895, _2896), vec3(_2884, _2885, _2886));
                        float _4250 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2934 = dot(vec3((-0.0) - _2884, (-0.0) - _2885, (-0.0) - _2886), vec3(_635, _638, _641)) + 1.0;
                        float _2936 = (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))) * 0.5;
                        float _2944 = ((_2936 * _2936) * _2877.x) * exp2((_2877.y * 32.0) * log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))));
                        float _2946 = _577 / (_577 + 1.0);
                        float _2962 = (-0.0) - _2158;
                        float _2963 = (-0.0) - _2159;
                        float _2964 = (-0.0) - _2160;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2979 = exp2(log2(1.0 / ((_2919 * 3.5) + 5.0)) * 0.25);
                        float _2980 = 1.0 - _703;
                        float _2987 = sqrt(1.0 - ((1.0 - (_2980 * _2980)) * (1.0 - (_2979 * _2979))));
                        float _2988 = _2987 * _2987;
                        float _2989 = _2988 * _2988;
                        float _2990 = _2969 + _2894;
                        float _2991 = _2970 + _2895;
                        float _2992 = _2971 + _2896;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _3000 = dot(vec3(_635, _638, _641), vec3(_2969, _2970, _2971));
                        float _4266 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _3004 = dot(vec3(_635, _638, _641), vec3(_2996 * _2990, _2996 * _2991, _2996 * _2992));
                        float _4277 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3011 = ((_3007 * _3007) * (_2989 + (-1.0))) + 1.0;
                        float _3012 = _2907 * _2988;
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _2897) + _3013;
                        float _4288 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3018 = 1.0 - _2988;
                        float _3028 = (0.5 / (((_3017 * ((_3003 * _3018) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_3017 * _3018) + _2988) * _3003))) * _3017;
                        float _4299 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3039 = (((_2989 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_3011 * _3011) * ((_2919 * 2.1991131305694580078125) + 3.141590118408203125))) * _2903;
                        _2732 = (((((_2848 * 0.3183098733425140380859375) * _2946) * _2944) + _2848) * _2923) + _2805;
                        _2733 = (((((_2849 * 0.3183098733425140380859375) * _2946) * _2944) + _2849) * _2923) + _2806;
                        _2734 = (((((_2850 * 0.3183098733425140380859375) * _2946) * _2944) + _2850) * _2923) + _2807;
                        _2729 = (_3039 * _2864.x) + _2802;
                        _2730 = (_3039 * _2864.y) + _2803;
                        _2731 = (_3039 * _2864.z) + _2804;
                        if (_2809 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2809;
                        }
                    }
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2734;
                    frontier_phi_61_pred_2 = _2733;
                    frontier_phi_61_pred_3 = _2732;
                    frontier_phi_61_pred_4 = _2731;
                    frontier_phi_61_pred_5 = _2729;
                }
                _2430 = frontier_phi_61_pred;
                _2438 = frontier_phi_61_pred_1;
                _2436 = frontier_phi_61_pred_2;
                _2434 = frontier_phi_61_pred_3;
                _2432 = frontier_phi_61_pred_4;
                _2428 = frontier_phi_61_pred_5;
                uint _2643 = _2642 + 1u;
                if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2636 = _2428;
                    _2637 = _2430;
                    _2638 = _2432;
                    _2639 = _2434;
                    _2640 = _2436;
                    _2641 = _2438;
                    _2642 = _2643;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((4294967295u << _2444) & _2204) == 0u)
        {
            _2604 = _2427;
            _2606 = _2429;
            _2608 = _2431;
            _2610 = _2433;
            _2612 = _2435;
            _2614 = _2437;
        }
        else
        {
            float _2629 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _2630 = _2629 * _2158;
            float _2631 = _2629 * _2159;
            float _2632 = _2629 * _2160;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2785 = _2427;
                float _2786 = _2429;
                float _2787 = _2431;
                float _2788 = _2433;
                float _2789 = _2435;
                float _2790 = _2437;
                uint _2791 = _2444;
                uint _2800;
                bool _2801;
                for (;;)
                {
                    _2800 = texelFetch(g_lightClassification, int((((_2198 << 5u) + (_2184 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                    _2801 = _2800 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2801)
                    {
                        frontier_phi_72_pred = _2790;
                        frontier_phi_72_pred_1 = _2789;
                        frontier_phi_72_pred_2 = _2788;
                        frontier_phi_72_pred_3 = _2787;
                        frontier_phi_72_pred_4 = _2786;
                        frontier_phi_72_pred_5 = _2785;
                    }
                    else
                    {
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3066 = _2785;
                        float _3067 = _2786;
                        float _3068 = _2787;
                        float _3069 = _2788;
                        float _3070 = _2789;
                        float _3071 = _2790;
                        uint _3072 = _2800;
                        uint _3073;
                        vec4 _3098;
                        float _3099;
                        vec4 _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        vec3 _3129;
                        vec2 _3138;
                        vec4 _3153;
                        vec4 _3169;
                        float _3216;
                        bool _3217;
                        for (;;)
                        {
                            uint _3083 = ((_2791 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3072));
                            _3073 = (_3072 + 4294967295u) & _3072;
                            uint _3085 = _3083 * 40u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3099 = _3098.w;
                            uint _3101 = (_3083 * 40u) + 4u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3115 = _3114.x;
                            _3116 = _3114.y;
                            _3117 = _3114.z;
                            uint _3119 = (_3083 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3131 = (_3083 * 40u) + 12u;
                            _3138 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x));
                            uint _3140 = (_3083 * 40u) + 16u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3156 = (_3083 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3172 = (_3083 * 40u) + 24u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3191 = (_3083 * 40u) + 28u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3216 = fma(_2160, _3204.z, fma(_2159, _3204.y, _3204.x * _2158)) + _3204.w;
                            _3217 = !((fma(_2160, _3185.z, fma(_2159, _3185.y, _3185.x * _2158)) + _3185.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3217)
                            {
                                float _3243 = _3098.x - _2158;
                                float _3244 = _3098.y - _2159;
                                float _3245 = _3098.z - _2160;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3099 * _3099));
                                float _4310 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3261 = sqrt(_3246) * _3114.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3265 = 1.0 - _3264;
                                float _3267 = (_3265 * _3265) * _577;
                                float _3270 = ((_3265 * dot(vec3(_3250, _3251, _3252), vec3(_635, _638, _641))) + _3264) + _3267;
                                float _3275 = _3261 * _3261;
                                float _3280 = (fma(_2160, _3153.z, fma(_2159, _3153.y, _3153.x * _2158)) + _3153.w) / _3216;
                                float _3281 = (fma(_2160, _3169.z, fma(_2159, _3169.y, _3169.x * _2158)) + _3169.w) / _3216;
                                float _3285 = 1.0 - dot(vec2(_3280, _3281), vec2(_3280, _3281));
                                float _4326 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3287 = _3286 * (((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3257) / (((_3267 * 2.0) + 1.0) * ((_3275 * 0.699999988079071044921875) + 1.0)));
                                float _3288 = (-0.0) - _2630;
                                float _3289 = (-0.0) - _2631;
                                float _3290 = (-0.0) - _2632;
                                float _3291 = dot(vec3(_3250, _3251, _3252), vec3(_2630, _2631, _2632));
                                float _4337 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3298 = dot(vec3(_3288, _3289, _3290), vec3(_635, _638, _641)) + 1.0;
                                float _3300 = (isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * 0.5;
                                float _3307 = ((_3300 * _3300) * _3138.x) * exp2((_3138.y * 32.0) * log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))));
                                float _3309 = _577 / (_577 + 1.0);
                                float _3330 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _703;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3250 - _2630;
                                float _3342 = _3251 - _2631;
                                float _3343 = _3252 - _2632;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_635, _638, _641), vec3(_3288, _3289, _3290));
                                float _4353 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3355 = dot(vec3(_635, _638, _641), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4364 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3263 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_635, _638, _641), vec3(_3250, _3251, _3252))) + _3364;
                                float _4375 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4386 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3286 * _3257) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3362 * _3362) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3115 * 0.3183098733425140380859375) * _3309) * _3307) + _3115) * _3287;
                                frontier_phi_78_pred_1 = ((((_3117 * 0.3183098733425140380859375) * _3309) * _3307) + _3117) * _3287;
                                frontier_phi_78_pred_2 = ((((_3116 * 0.3183098733425140380859375) * _3309) * _3307) + _3116) * _3287;
                                frontier_phi_78_pred_3 = _3392 * _3129.z;
                                frontier_phi_78_pred_4 = _3392 * _3129.y;
                                frontier_phi_78_pred_5 = _3392 * _3129.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_78_pred;
                            _3401 = frontier_phi_78_pred_1;
                            _3400 = frontier_phi_78_pred_2;
                            _3398 = frontier_phi_78_pred_3;
                            _3397 = frontier_phi_78_pred_4;
                            _3396 = frontier_phi_78_pred_5;
                            _3056 = _3399 + _3069;
                            _3057 = _3400 + _3070;
                            _3058 = _3401 + _3071;
                            _3053 = _3396 + _3066;
                            _3054 = _3397 + _3067;
                            _3055 = _3398 + _3068;
                            if (_3073 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3073;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3058;
                        frontier_phi_72_pred_1 = _3057;
                        frontier_phi_72_pred_2 = _3056;
                        frontier_phi_72_pred_3 = _3055;
                        frontier_phi_72_pred_4 = _3054;
                        frontier_phi_72_pred_5 = _3053;
                    }
                    _2615 = frontier_phi_72_pred;
                    _2613 = frontier_phi_72_pred_1;
                    _2611 = frontier_phi_72_pred_2;
                    _2609 = frontier_phi_72_pred_3;
                    _2607 = frontier_phi_72_pred_4;
                    _2605 = frontier_phi_72_pred_5;
                    uint _2792 = _2791 + 1u;
                    if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2785 = _2605;
                        _2786 = _2607;
                        _2787 = _2609;
                        _2788 = _2611;
                        _2789 = _2613;
                        _2790 = _2615;
                        _2791 = _2792;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2615;
                frontier_phi_52_53_ladder_1 = _2607;
                frontier_phi_52_53_ladder_2 = _2613;
                frontier_phi_52_53_ladder_3 = _2611;
                frontier_phi_52_53_ladder_4 = _2609;
                frontier_phi_52_53_ladder_5 = _2605;
            }
            else
            {
                frontier_phi_52_53_ladder = _2437;
                frontier_phi_52_53_ladder_1 = _2429;
                frontier_phi_52_53_ladder_2 = _2435;
                frontier_phi_52_53_ladder_3 = _2433;
                frontier_phi_52_53_ladder_4 = _2431;
                frontier_phi_52_53_ladder_5 = _2427;
            }
            _2604 = frontier_phi_52_53_ladder_5;
            _2606 = frontier_phi_52_53_ladder_1;
            _2608 = frontier_phi_52_53_ladder_4;
            _2610 = frontier_phi_52_53_ladder_3;
            _2612 = frontier_phi_52_53_ladder_2;
            _2614 = frontier_phi_52_53_ladder;
        }
        float _2619 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2217 = (_2619 * _2610) + _1915;
        _2219 = (_2619 * _2612) + _1916;
        _2221 = (_2619 * _2614) + _1917;
        _2223 = ((_2604 * 0.039999999105930328369140625) * _2619) + _2078;
        _2225 = ((_2606 * 0.039999999105930328369140625) * _2619) + _2079;
        _2227 = ((_2608 * 0.039999999105930328369140625) * _2619) + _2080;
    }
    else
    {
        _2217 = _1915;
        _2219 = _1916;
        _2221 = _1917;
        _2223 = _2078;
        _2225 = _2079;
        _2227 = _2080;
    }
    float _2241 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2242 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2243 = cbSceneParam._m0[86u].x * (_1755 + ((_702 * cbMtdParam._m0[13u].y) * dot(vec3(_572, _573, _574), vec3(_207, _208, _209))));
    float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
    float _2245 = isnan(_2242) ? _616 : (isnan(_616) ? _2242 : min(_616, _2242));
    vec4 _2247 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2244, _2245), 0.0);
    float _2249 = _2247.x;
    bool _2270 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2249)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2249))) > _596;
    float _2271 = _2270 ? _2244 : _615;
    float _2272 = _2270 ? _2245 : _616;
    vec4 _2274 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2271, _2272));
    vec4 _2279 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2271, _2272));
    float _2281 = _2279.x;
    float _2301 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2281)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2281))) - _596;
    bool _2311 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2315 = (isnan(_2301) ? 0.0 : (isnan(0.0) ? _2301 : max(0.0, _2301))) * (-1.44269502162933349609375);
    float _4417 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4428 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4439 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _2342 = 0.959999978542327880859375 - (exp2(log2(1.0 - _694) * 5.0) * 0.959999978542327880859375);
    float _2345 = ((_2274.x * _2342) * exp2(_2315 * (_2311 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2348 = ((_2274.y * _2342) * exp2(_2315 * (_2311 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2351 = ((_2274.z * _2342) * exp2(_2315 * (_2311 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2359 = (_2345 + (((((_1732 * _1780.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1525) * _1796)) + _2223) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2217 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _679))) - _2345) * cbMtdParam._m0[15u].x);
    float _2361 = (_2348 + (((((_1732 * _1780.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1525) * _1796)) + _2225) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2219 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _679))) - _2348) * cbMtdParam._m0[15u].x);
    float _2363 = (_2351 + (((((_1732 * _1780.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1525) * _1796)) + _2227) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2221 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _679))) - _2351) * cbMtdParam._m0[15u].x);
    float _2368 = cbInstanceData._m0[_654 + 6u].w * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)));
    float _2373 = _615 / cbSceneParam._m0[86u].x;
    float _2374 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2388 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2390 = _2388.x;
    float _2391 = _2388.y;
    float _2392 = _2388.z;
    float _2393 = _2388.w;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2453 = _2452 / _596;
        float _2464 = _2453 * _277;
        float _2465 = _278 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2467 = _2453 * _279;
        float _2469 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2465;
        float _2477 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2477;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2486 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2742;
        if (abs((_2466 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2742 = ((((_2470 > 0.0) ? exp2(_2485 * _2470) : (2.0 - exp2(_2486 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2665 = 1.0 / cbSceneParam._m0[80u].x;
            float _2666 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2667 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            _2742 = ((abs(_2477 / _2466) * cbSceneParam._m0[80u].y) * ((((_2676 - _2677) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))))) * _2665)) - ((exp2(_2486 * _2676) - exp2(_2486 * _2677)) * _2665))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2744 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, 1.0), 0.0);
        float _2753 = exp2((_2742 * (-1.44269502162933349609375)) * (1.0 - _2744.w));
        float _2754 = log2(_2753);
        float _2770 = log2(_2393);
        _2488 = (exp2(_2770 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].x)) * _2744.x) / cbSceneParam._m0[78u].x)) + _2390;
        _2490 = (exp2(_2770 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].y)) * _2744.y) / cbSceneParam._m0[78u].y)) + _2391;
        _2492 = (exp2(_2770 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].z)) * _2744.z) / cbSceneParam._m0[78u].z)) + _2392;
        _2494 = _2753 * _2393;
    }
    else
    {
        _2488 = _2390;
        _2490 = _2391;
        _2492 = _2392;
        _2494 = _2393;
    }
    bool _2780;
    float _2549;
    vec4 _2552;
    float _2554;
    vec4 _2556;
    float _2564;
    float _2565;
    float _2566;
    float _2567;
    bool _2577;
    for (;;)
    {
        bool _2506 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2507 = log2(_2494);
        float _2514 = exp2(_2507 * cbSceneParam._m0[78u].x) * _2359;
        float _2515 = exp2(_2507 * cbSceneParam._m0[78u].y) * _2361;
        float _2516 = exp2(_2507 * cbSceneParam._m0[78u].z) * _2363;
        vec4 _2524 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_615, _616));
        float _2526 = _2524.x;
        float _2547 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2526)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2526))) - _596) * cbMtdParam._m0[14u].z;
        float _4490 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        _2549 = _2368 * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)));
        float _2550 = _603 + (-0.5);
        _2552 = cbMtdParam._m0[1u];
        _2554 = _2552.y * _2550;
        _2556 = cbMatDynParam._m0[0u];
        float _2563 = (roundEven(_2556.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2564 = _2563 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2488)));
        _2565 = _2563 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2490)));
        _2566 = _2563 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2492)));
        _2567 = _2550 * 0.999000012874603271484375;
        _2577 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2577)
        {
            if ((cbInstanceData._m0[_654 + 7u].x + _2567) < 0.5)
            {
                _2780 = true;
                break;
            }
        }
        uint _2700 = _655 + uint(_2556.w);
        if ((cbInstanceData._m0[_2700].w < 1.0) && ((cbInstanceData._m0[_2700].w + _2567) < 0.5))
        {
            _2780 = true;
            break;
        }
        if ((_2554 + _498) < _2552.x)
        {
            _2780 = true;
            break;
        }
        _2780 = false;
        break;
    }
    float _3044;
    if (_2780)
    {
        discard_state = true;
        _3044 = 0.0;
    }
    else
    {
        _3044 = _2549;
    }
    SV_Target.x = _2564;
    SV_Target.y = _2565;
    SV_Target.z = _2566;
    SV_Target.w = _3044;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2549;
    discard_exit();
}


