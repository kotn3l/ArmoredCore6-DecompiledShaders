#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 5) in vec2 TEXCOORD_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    vec4 _101 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _108 = cbMtdParam._m0[12u].z * _101.x;
    uint _111 = uint(roundEven(NORMAL.w));
    float _155 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _165 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _155);
    float _166 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _155);
    float _167 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _155);
    vec4 _172 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _174 = _172.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _207 = sqrt(((_165 * _165) + (_166 * _166)) + (_167 * _167));
        float _214 = (cbMatDynParam._m0[5u].x * _207) + cbMatDynParam._m0[5u].y;
        float _285 = isnan(0.0) ? _214 : (isnan(_214) ? 0.0 : max(_214, 0.0));
        float _216 = isnan(1.0) ? _285 : (isnan(_285) ? 1.0 : min(_285, 1.0));
        float _220 = (cbMatDynParam._m0[5u].z * _207) + cbMatDynParam._m0[5u].w;
        float _296 = isnan(0.0) ? _220 : (isnan(_220) ? 0.0 : max(_220, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0))) - _216)) + _216) < ((_174 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _257;
    vec4 _185;
    float _187;
    float _188;
    bool _199;
    uint _200;
    for (;;)
    {
        float _182 = _174 + (-0.5);
        _185 = cbMtdParam._m0[1u];
        _187 = _185.y * _182;
        _188 = _182 * 0.999000012874603271484375;
        _199 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _200 = _111 * 13u;
        if (_199)
        {
            if ((cbInstanceData._m0[_200 + 7u].x + _188) < 0.5)
            {
                _257 = true;
                break;
            }
        }
        uint _246 = (_200 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_246].w < 1.0) && ((cbInstanceData._m0[_246].w + _188) < 0.5))
        {
            _257 = true;
            break;
        }
        if ((_187 + _108) < _185.x)
        {
            _257 = true;
            break;
        }
        _257 = false;
        break;
    }
    if (_257)
    {
        discard_state = true;
    }
    discard_exit();
}


