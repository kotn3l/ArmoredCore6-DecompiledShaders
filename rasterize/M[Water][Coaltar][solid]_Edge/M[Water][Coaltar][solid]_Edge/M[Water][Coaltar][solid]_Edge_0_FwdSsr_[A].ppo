#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _113 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _114 = _113 * NORMAL.x;
    float _115 = _113 * NORMAL.y;
    float _116 = _113 * NORMAL.z;
    vec4 _139 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _147 = cbMtdParam._m0[14u].w + _139.z;
    float _808 = isnan(0.0) ? _147 : (isnan(_147) ? 0.0 : max(_147, 0.0));
    float _149 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
    float _163 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _207 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _217 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _207);
    float _218 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _207);
    float _219 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _207);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _249 = sqrt(((_217 * _217) + (_218 * _218)) + (_219 * _219));
        float _256 = (cbMatDynParam._m0[5u].x * _249) + cbMatDynParam._m0[5u].y;
        float _819 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
        float _257 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        float _261 = (cbMatDynParam._m0[5u].z * _249) + cbMatDynParam._m0[5u].w;
        float _830 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _830 : (isnan(_830) ? 1.0 : min(_830, 1.0))) - _257)) + _257) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _229 = POSITION_1.x / POSITION_1.w;
    float _230 = POSITION_1.y / POSITION_1.w;
    float _234 = (_229 * 0.5) + 0.5;
    float _235 = 0.5 - (_230 * 0.5);
    float _274;
    float _276;
    float _278;
    float _280;
    if (_149 < cbPerScene._m0[22u].z)
    {
        _274 = 0.0;
        _276 = 0.0;
        _278 = 0.0;
        _280 = 0.0;
    }
    else
    {
        float _286 = 1.0 / _163;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _286))
        {
            float _312 = fma(_116, cbPerScene._m0[8u].z, fma(_115, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _114));
            float _315 = fma(_116, cbPerScene._m0[9u].z, fma(_115, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _114));
            float _318 = fma(_116, cbPerScene._m0[10u].z, fma(_115, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _114));
            float _325 = (_229 * _163) * cbPerScene._m0[28u].x;
            float _327 = (_230 * _163) * cbPerScene._m0[28u].y;
            float _331 = inversesqrt(dot(vec3(_325, _327, _163), vec3(_325, _327, _163)));
            float _332 = _325 * _331;
            float _333 = _327 * _331;
            float _334 = _331 * _163;
            float _338 = dot(vec3(_332, _333, _334), vec3(_312, _315, _318)) * 2.0;
            float _343 = _332 - (_338 * _312);
            float _344 = _333 - (_338 * _315);
            float _345 = _334 - (_338 * _318);
            float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
            float _352 = _345 * _349;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_352 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _365 = abs(dot(vec3((-0.0) - _332, (-0.0) - _333, (-0.0) - _334), vec3(_312, _315, _318)));
                float _841 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
                float _376 = (((_149 * _149) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _841 : (isnan(_841) ? 1.0 : min(_841, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _385 = (cbPerScene._m0[29u].x * (1.0 - _149)) + cbPerScene._m0[29u].y;
                float _852 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
                float _393 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_376 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _396 = _352 - cbPerScene._m0[16u].x;
                    float _863 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
                    float _397 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
                    float _398 = _397 * _397;
                    float _400 = (_376 - cbPerScene._m0[22u].x) * 10.0;
                    float _874 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
                    float _402 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
                    float _403 = isnan(_402) ? _398 : (isnan(_398) ? _402 : min(_398, _402));
                    float _407 = (cbPerScene._m0[21u].x - _163) * cbPerScene._m0[21u].z;
                    float _890 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
                    float _408 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
                    float _409 = isnan(_408) ? _403 : (isnan(_403) ? _408 : min(_403, _408));
                    float _410 = (_343 * _349) + _325;
                    float _411 = (_344 * _349) + _327;
                    float _412 = _352 + _163;
                    float _443 = fma(_412, cbPerScene._m0[7u].z, fma(_411, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _410)) + cbPerScene._m0[7u].w;
                    float _447 = ((fma(_412, cbPerScene._m0[4u].z, fma(_411, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _410)) + cbPerScene._m0[4u].w) / _443) - _234;
                    float _448 = ((fma(_412, cbPerScene._m0[5u].z, fma(_411, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _410)) + cbPerScene._m0[5u].w) / _443) - _235;
                    float _454 = cbPerScene._m0[18u].x * _447;
                    float _455 = cbPerScene._m0[18u].y * _448;
                    float _460 = sqrt((_454 * _454) + (_455 * _455)) + 9.9999997473787516355514526367188e-06;
                    float _465 = (_447 / _460) * _393;
                    float _466 = (_448 / _460) * _393;
                    float _467 = (((1.0 / _412) - _286) / _460) * _393;
                    float _496 = abs(float(_465 > 0.0) - _234) / (abs(_465) + 1.0000000116860974230803549289703e-07);
                    float _497 = abs(float(_466 > 0.0) - _235) / (abs(_466) + 1.0000000116860974230803549289703e-07);
                    float _499 = (abs(((_467 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _286) / (abs(_467) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _500 = isnan(_497) ? _496 : (isnan(_496) ? _497 : min(_496, _497));
                    float _501 = isnan(_499) ? _500 : (isnan(_500) ? _499 : min(_500, _499));
                    uint _504 = uint(int(isnan(cbPerScene._m0[23u].y) ? _501 : (isnan(_501) ? cbPerScene._m0[23u].y : min(_501, cbPerScene._m0[23u].y))));
                    float _281;
                    float _509;
                    float _511;
                    float _513;
                    if (int(_504) > int(0u))
                    {
                        float _506 = _467 + _286;
                        float _507 = _466 + _235;
                        float _508 = _465 + _234;
                        float _510;
                        float _512;
                        float _514;
                        float _515;
                        uint _526;
                        float _528;
                        float _530;
                        float _532;
                        float _534;
                        float _536;
                        float _538;
                        float _540;
                        uint _542;
                        float _544;
                        float _546;
                        float _548;
                        float _521 = 0.0;
                        float _522 = 0.0;
                        float _523 = 0.0;
                        float _524 = 0.0;
                        uint _525 = 0u;
                        float _527 = _286;
                        float _529 = _508;
                        float _531 = _507;
                        float _533 = _506;
                        float _535 = _234;
                        float _537 = _235;
                        float _539 = _286;
                        uint _541 = 1u;
                        float _543 = 0.0;
                        float _545 = 0.0;
                        float _547 = 0.0;
                        float _559;
                        float _566;
                        float _567;
                        float _568;
                        float _569;
                        float _570;
                        float _571;
                        uint _572;
                        float _573;
                        bool _580;
                        for (;;)
                        {
                            _559 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _529, cbSceneParam._m0[86u].y * _531), 0.0).x;
                            bool _565 = _525 == (_504 + 4294967295u);
                            _566 = _565 ? _543 : _529;
                            _567 = _565 ? _545 : _531;
                            _568 = _565 ? _547 : _533;
                            _569 = _565 ? _543 : _535;
                            _570 = _565 ? _545 : _537;
                            _571 = _565 ? _547 : _539;
                            _572 = _565 ? 1u : _541;
                            _573 = _565 ? (-1.0) : (_533 - _559);
                            _580 = (_572 != 0u) && ((_573 <= 0.0) && ((_565 ? (-1.0) : (_559 - (_527 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_580)
                            {
                                uint _590 = uint(int(log2(_393) + 0.999000012874603271484375));
                                float _601;
                                float _603;
                                float _605;
                                float _607;
                                float _609;
                                float _611;
                                float _613;
                                if (int(_590) > int(0u))
                                {
                                    uint _711;
                                    float _713;
                                    float _714;
                                    float _715;
                                    float _716;
                                    float _717;
                                    float _718;
                                    float _719;
                                    _711 = 0u;
                                    _713 = _566;
                                    _714 = _567;
                                    _715 = _568;
                                    _716 = _569;
                                    _717 = _570;
                                    _718 = _571;
                                    _719 = _559;
                                    float _602;
                                    float _604;
                                    float _606;
                                    float _608;
                                    float _610;
                                    float _612;
                                    float _614;
                                    for (;;)
                                    {
                                        float _723 = (_716 + _713) * 0.5;
                                        float _724 = (_717 + _714) * 0.5;
                                        float _725 = (_718 + _715) * 0.5;
                                        vec4 _733 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _723, cbSceneParam._m0[86u].y * _724), 0.0);
                                        float _735 = _733.x;
                                        bool _737 = (_725 - _735) < 0.0;
                                        _602 = _737 ? _723 : _713;
                                        _604 = _737 ? _724 : _714;
                                        _606 = _737 ? _725 : _715;
                                        _608 = _737 ? _716 : _723;
                                        _610 = _737 ? _717 : _724;
                                        _612 = _737 ? _718 : _725;
                                        _614 = _737 ? _735 : _719;
                                        uint _712 = _711 + 1u;
                                        if (_712 == _590)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _711 = _712;
                                            _713 = _602;
                                            _714 = _604;
                                            _715 = _606;
                                            _716 = _608;
                                            _717 = _610;
                                            _718 = _612;
                                            _719 = _614;
                                        }
                                    }
                                    _601 = _602;
                                    _603 = _604;
                                    _605 = _606;
                                    _607 = _608;
                                    _609 = _610;
                                    _611 = _612;
                                    _613 = _614;
                                }
                                else
                                {
                                    _601 = _566;
                                    _603 = _567;
                                    _605 = _568;
                                    _607 = _569;
                                    _609 = _570;
                                    _611 = _571;
                                    _613 = _559;
                                }
                                float _623 = cbPerScene._m0[28u].x * ((_601 * 2.0) + (-1.0));
                                float _624 = cbPerScene._m0[28u].y * (1.0 - (_603 * 2.0));
                                float _656 = fma(_613, cbPerScene._m0[27u].w, fma(_624, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _623) + cbPerScene._m0[27u].z);
                                float _657 = fma(_613, cbPerScene._m0[24u].w, fma(_624, cbPerScene._m0[24u].y, _623 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _656;
                                float _658 = fma(_613, cbPerScene._m0[25u].w, fma(_624, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _623) + cbPerScene._m0[25u].z) / _656;
                                vec4 _667 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _657, cbSceneParam._m0[87u].w * _658), 0.0);
                                float _672 = isnan(_409) ? 1.0 : (isnan(1.0) ? _409 : min(1.0, _409));
                                float _673 = 0.5 - _657;
                                float _674 = 0.5 - _658;
                                float _675 = _673 * 2.0;
                                float _676 = _674 * 2.0;
                                float _677 = _675 * _675;
                                float _678 = _676 * _676;
                                float _926 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
                                float _937 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
                                float _687 = inversesqrt(dot(vec2(_465, _466), vec2(_465, _466)));
                                float _693 = inversesqrt(dot(vec2(_675, _676), vec2(_675, _676)));
                                float _699 = dot(vec2((_673 * (-2.0)) * _693, (_674 * (-2.0)) * _693), vec2(_687 * _465, _687 * _466));
                                float _948 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
                                float _706 = ((1.0 - (isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0)))) * (1.0 - (isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0))))) * (4.0 - ((isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0))) * 2.0));
                                float _959 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
                                float _707 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
                                float _708 = _707 * _707;
                                frontier_phi_17_pred = _547;
                                frontier_phi_17_pred_1 = _545;
                                frontier_phi_17_pred_2 = _543;
                                frontier_phi_17_pred_3 = _572;
                                frontier_phi_17_pred_4 = _611;
                                frontier_phi_17_pred_5 = _609;
                                frontier_phi_17_pred_6 = _607;
                                frontier_phi_17_pred_7 = _605;
                                frontier_phi_17_pred_8 = _603;
                                frontier_phi_17_pred_9 = _601;
                                frontier_phi_17_pred_10 = _527;
                                frontier_phi_17_pred_11 = isnan(_708) ? _672 : (isnan(_672) ? _708 : min(_672, _708));
                                frontier_phi_17_pred_12 = _667.z;
                                frontier_phi_17_pred_13 = _667.y;
                                frontier_phi_17_pred_14 = _667.x;
                                frontier_phi_17_pred_15 = _504;
                            }
                            else
                            {
                                bool _592 = _573 > 0.0;
                                frontier_phi_17_pred = _592 ? _568 : _547;
                                frontier_phi_17_pred_1 = _592 ? _567 : _545;
                                frontier_phi_17_pred_2 = _592 ? _566 : _543;
                                frontier_phi_17_pred_3 = uint(_592);
                                frontier_phi_17_pred_4 = _568;
                                frontier_phi_17_pred_5 = _567;
                                frontier_phi_17_pred_6 = _566;
                                frontier_phi_17_pred_7 = _568 + _467;
                                frontier_phi_17_pred_8 = _567 + _466;
                                frontier_phi_17_pred_9 = _566 + _465;
                                frontier_phi_17_pred_10 = _559;
                                frontier_phi_17_pred_11 = _524;
                                frontier_phi_17_pred_12 = _523;
                                frontier_phi_17_pred_13 = _522;
                                frontier_phi_17_pred_14 = _521;
                                frontier_phi_17_pred_15 = _525 + 1u;
                            }
                            _548 = frontier_phi_17_pred;
                            _546 = frontier_phi_17_pred_1;
                            _544 = frontier_phi_17_pred_2;
                            _542 = frontier_phi_17_pred_3;
                            _540 = frontier_phi_17_pred_4;
                            _538 = frontier_phi_17_pred_5;
                            _536 = frontier_phi_17_pred_6;
                            _534 = frontier_phi_17_pred_7;
                            _532 = frontier_phi_17_pred_8;
                            _530 = frontier_phi_17_pred_9;
                            _528 = frontier_phi_17_pred_10;
                            _515 = frontier_phi_17_pred_11;
                            _514 = frontier_phi_17_pred_12;
                            _512 = frontier_phi_17_pred_13;
                            _510 = frontier_phi_17_pred_14;
                            _526 = frontier_phi_17_pred_15;
                            if (int(_526) < int(_504))
                            {
                                _521 = _510;
                                _522 = _512;
                                _523 = _514;
                                _524 = _515;
                                _525 = _526;
                                _527 = _528;
                                _529 = _530;
                                _531 = _532;
                                _533 = _534;
                                _535 = _536;
                                _537 = _538;
                                _539 = _540;
                                _541 = _542;
                                _543 = _544;
                                _545 = _546;
                                _547 = _548;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _509 = _510;
                        _511 = _512;
                        _513 = _514;
                        _281 = _515;
                    }
                    else
                    {
                        _509 = 0.0;
                        _511 = 0.0;
                        _513 = 0.0;
                        _281 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_509) || isnan(_511)) || isnan(_513))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_281 * _509) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _281;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_281 * _513) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_281 * _511) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _274 = frontier_phi_3_4_ladder;
        _276 = frontier_phi_3_4_ladder_3;
        _278 = frontier_phi_3_4_ladder_2;
        _280 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _274;
    SV_Target.y = _276;
    SV_Target.z = _278;
    SV_Target.w = _280;
    discard_exit();
}


