#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4;
layout(set = 0, binding = 1) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7;
layout(set = 0, binding = 5) uniform texture2D M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1089;
float _3570;
float _3571;
float _3572;
float _3573;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _209 = _208 * _201;
    float _210 = _208 * _202;
    float _211 = _208 * _203;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _290 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _291 = _290 * _279;
    float _292 = _290 * _280;
    float _293 = _290 * _281;
    float _301 = (cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _302 = (cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _316 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_8, SS_BumpMap), vec2((_301 * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (_302 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _324 = (_316.x * 2.0) + (-1.0);
    float _326 = (_316.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3582 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))));
    float _336 = fma(_333, _216, fma(_326, _223, _324 * _209));
    float _339 = fma(_333, _217, fma(_326, _224, _324 * _210));
    float _342 = fma(_333, _218, fma(_326, _225, _324 * _211));
    float _346 = inversesqrt(dot(vec3(_336, _339, _342), vec3(_336, _339, _342)));
    float _355 = (dot(vec4(_291, _292, _293, 0.0), vec4(_346 * _336, _346 * _339, _346 * _342, 0.0)) * (cbMtdParam._m0[14u].x - cbMtdParam._m0[14u].y)) + cbMtdParam._m0[14u].y;
    float _368 = dot(vec3(_279, _280, _281), vec3(_209, _210, _211));
    float _371 = dot(vec3(_279, _280, _281), vec3(_223, _224, _225));
    float _374 = dot(vec3(_279, _280, _281), vec3(_216, _217, _218));
    float _380 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _401 = dot(vec4(texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[12u].y;
    vec4 _421 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_368 * cbMtdParam._m0[12u].x) * _380) * _401) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_371 * cbMtdParam._m0[12u].x) * _380) * _401) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _444 = dot(vec4(_291, _292, _293, 0.0), vec4(_216, _217, _218, 0.0)) - cbMtdParam._m0[12u].w;
    float _3593 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _451 = exp2(log2(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[13u].x : (isnan(cbMtdParam._m0[13u].x) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[13u].x, 0.001000000047497451305389404296875))));
    float _466 = (((((sin(_355) + 1.0) * 2.275000095367431640625) * cbMtdParam._m0[10u].x) * _421.x) * cbMtdParam._m0[9u].x) * ((_451 * (cbMtdParam._m0[11u].x + (-1.0))) + 1.0);
    float _475 = ((((cbMtdParam._m0[10u].y * 2.275000095367431640625) * _421.y) * cbMtdParam._m0[9u].y) * ((_451 * (cbMtdParam._m0[11u].y + (-1.0))) + 1.0)) * (sin(_355 * 0.85000002384185791015625) + 1.0);
    float _484 = ((((cbMtdParam._m0[10u].z * 2.275000095367431640625) * _421.z) * cbMtdParam._m0[9u].z) * ((_451 * (cbMtdParam._m0[11u].z + (-1.0))) + 1.0)) * (sin(_355 * 0.699999988079071044921875) + 1.0);
    vec4 _496 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _500 = cbMtdParam._m0[12u].z * _496.x;
    vec4 _513 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    float _520 = (_513.x * 2.0) + (-1.0);
    float _521 = (_513.y * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3609 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = sqrt(1.0 - (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))));
    float _529 = cbMtdParam._m0[14u].w + _513.z;
    vec4 _541 = texture(sampler2D(M_Water_Coaltar_solid_Edge_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * _301) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _302) + cbTextureTilingScale._m0[1u].w));
    float _545 = cbMtdParam._m0[13u].w * _541.x;
    float _563 = fma(_527, _216, fma(_521, _223, _520 * _209));
    float _566 = fma(_527, _217, fma(_521, _224, _520 * _210));
    float _569 = fma(_527, _218, fma(_521, _225, _520 * _211));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3620 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3631 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _578 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _579 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3647 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3658 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3669 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _603 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _605 = _603.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _768 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _774 = (cbMatDynParam._m0[5u].x * _768) + cbMatDynParam._m0[5u].y;
        float _3680 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _779 = (cbMatDynParam._m0[5u].z * _768) + cbMatDynParam._m0[5u].w;
        float _3691 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) - _775)) + _775) < ((_605 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _640 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _643 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _656 = uint(roundEven(NORMAL.w)) * 13u;
    uint _657 = _656 + 9u;
    uint _658 = _657 + uint(cbMatDynParam._m0[0u].w);
    float _664 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_658].x;
    float _665 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_658].y;
    float _666 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_658].z;
    float _3702 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _681 = _678.x * TEXCOORD.z;
    float _682 = dot(vec3(_574, _575, _576), vec3(_291, _292, _293));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _574) - _291;
    float _690 = (_685 * _575) - _292;
    float _691 = (_685 * _576) - _293;
    float _695 = abs(dot(vec3(_291, _292, _293), vec3(_574, _575, _576)));
    float _3735 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _704 = 10.0 / (_598 + 10.0);
    float _705 = sqrt(_578);
    float _717 = exp2((_705 * 5.0) * log2(1.0 - (_696 * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _817 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _821 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _846 = _749 + _574;
        float _847 = _753 + _575;
        float _848 = _757 + _576;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_574, _575, _576), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3783 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_574, _575, _576), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3816 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_574, _575, _576), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3849 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1136 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1140 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1163 = _749 + _574;
        float _1164 = _753 + _575;
        float _1165 = _757 + _576;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_574, _575, _576), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3912 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_574, _575, _576), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3945 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_574, _575, _576), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3978 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = _1089;
        _1410 = _1089;
        _1411 = _1089;
        _1412 = _1089;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _689 * 0.5;
    float _1470 = _690 * 0.5;
    float _1471 = _691 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1512;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1523;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1514 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1527 = (_1523 * cbModelParam._m0[1u].x) + (_1512 * (1.0 - cbModelParam._m0[1u].x));
    float _1537 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1537 : min(cbModelParam._m0[25u].z, _1537));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1585 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1589 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1593 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1596 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1599 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1602 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1630;
        if (_1596 > 0.0)
        {
            _1630 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1630 = frontier_phi_17_15_ladder;
        }
        float _1874;
        if (_1599 > 0.0)
        {
            _1874 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1874 = frontier_phi_26_22_ladder;
        }
        float _2112;
        if (_1602 > 0.0)
        {
            _2112 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2112 = frontier_phi_37_33_ladder;
        }
        float _2114 = isnan(_1874) ? _1630 : (isnan(_1630) ? _1874 : min(_1630, _1874));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1596) + _1585;
        float _2120 = (_2115 * _1599) + _1589;
        float _2121 = (_2115 * _1602) + _1593;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1538);
            frontier_phi_16_37_ladder = _2450.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _2450.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _2450.x * cbModelParam._m0[1u].y;
        }
        _1618 = frontier_phi_16_37_ladder_2;
        _1620 = frontier_phi_16_37_ladder_1;
        _1622 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1538);
        _1618 = _1606.x * cbModelParam._m0[1u].y;
        _1620 = _1606.y * cbModelParam._m0[1u].y;
        _1622 = _1606.z * cbModelParam._m0[1u].y;
    }
    float _1626 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1626 : min(cbModelParam._m0[25u].w, _1626));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1682 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1686 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1690 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1693 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1696 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1699 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1879;
        if (_1693 > 0.0)
        {
            _1879 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1879 = frontier_phi_28_24_ladder;
        }
        float _2139;
        if (_1696 > 0.0)
        {
            _2139 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2139 = frontier_phi_39_35_ladder;
        }
        float _2610;
        if (_1699 > 0.0)
        {
            _2610 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2610 = frontier_phi_50_45_ladder;
        }
        float _2612 = isnan(_2139) ? _1879 : (isnan(_1879) ? _2139 : min(_1879, _2139));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1693) + _1682;
        float _2618 = (_2613 * _1696) + _1686;
        float _2619 = (_2613 * _1699) + _1690;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1627);
            frontier_phi_25_50_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1718 = frontier_phi_25_50_ladder_2;
        _1720 = frontier_phi_25_50_ladder_1;
        _1722 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1627);
        _1718 = _1702.x * cbModelParam._m0[1u].z;
        _1720 = _1702.y * cbModelParam._m0[1u].z;
        _1722 = _1702.z * cbModelParam._m0[1u].z;
    }
    float _1734 = ((((1.0 - _717) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_717 * _705)) * _681;
    float _1735 = _1734 * ((cbModelParam._m0[1u].w * (_1718 - _1618)) + _1618);
    float _1736 = _1734 * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1737 = _1734 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1740 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1735 * cbSceneParam._m0[91u].x));
    float _1757 = _617 / cbSceneParam._m0[86u].x;
    float _1765 = (cbSceneParam._m0[88u].y * (1.0 - _578)) + cbSceneParam._m0[88u].z;
    float _4104 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1767 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 5.0;
    float _1772 = (_704 * cbMtdParam._m0[13u].z) * dot(vec3(_574, _575, _576), vec3(1.0, 0.0, 0.0));
    vec4 _1782 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1772 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1772 + _1757) * cbSceneParam._m0[86u].x, _618), _1767).w) + _1757) * cbSceneParam._m0[86u].x, _618), _1767);
    float _1798 = 1.0 - _1782.w;
    vec4 _1806 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_617, _618));
    float _1808 = _1806.w;
    float _1820 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1808);
    float _1821 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1808);
    float _1822 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1808);
    uvec4 _1826 = floatBitsToUint(cbInstanceData._m0[_656 + 5u]);
    uint _1828 = _1826.x * 14u;
    uint _1829 = _1828 + 13u;
    float _1834 = _681 + (-1.0);
    float _1837 = (cbLight._m0[_1829].x * _1834) + 1.0;
    float _1838 = (cbLight._m0[_1829].y * _1834) + 1.0;
    uint _1840 = _1828 + 4u;
    float _1851 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_574, _575, _576));
    float _1854 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    float _1855 = cbLight._m0[_1840].x * _1820;
    float _1856 = cbLight._m0[_1840].y * _1821;
    float _1857 = cbLight._m0[_1840].z * _1822;
    uint _1858 = _1828 + 5u;
    uint _1864 = _1828 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_574, _575, _576));
    float _1873 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    float _1938;
    float _1939;
    float _1940;
    if (_579 == 0.0)
    {
        float _4125 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _4136 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1892 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
        float _1894 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
        _1938 = ((cbLight._m0[_1858].x * _1873) * _1894) + ((_1855 * _1854) * _1892);
        _1939 = ((_1873 * cbLight._m0[_1858].y) * _1894) + ((_1856 * _1854) * _1892);
        _1940 = ((_1873 * cbLight._m0[_1858].z) * _1894) + ((_1857 * _1854) * _1892);
    }
    else
    {
        float _1904 = _1851 + _579;
        float _1907 = (_579 * 2.0) + 1.0;
        float _1908 = (isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) / _1907;
        float _1915 = _1870 + _579;
        float _1917 = (isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) / _1907;
        _1938 = (((_1917 * cbLight._m0[_1858].x) * _1873) + ((_1855 * _1908) * _1854)) * 0.3183098733425140380859375;
        _1939 = (((_1917 * cbLight._m0[_1858].y) * _1873) + ((_1856 * _1908) * _1854)) * 0.3183098733425140380859375;
        _1940 = (((_1917 * cbLight._m0[_1858].z) * _1873) + ((_1857 * _1908) * _1854)) * 0.3183098733425140380859375;
    }
    uint _1944 = _1828 + 8u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _578) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1828].x + _291;
    float _1963 = cbLight._m0[_1828].y + _292;
    float _1964 = cbLight._m0[_1828].z + _293;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1828].xyz));
    float _4157 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1976 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _1977 = dot(vec3(_574, _575, _576), vec3(_1969, _1970, _1971));
    float _4179 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1969, _1970, _1971));
    float _4190 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1961 * _1961;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1976 * ((_1975 * _2001) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2001) + _1961) * _1975))) * _1975;
    float _4201 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    uint _2030 = _1828 + 9u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _578) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1864].x + _291;
    float _2047 = cbLight._m0[_1864].y + _292;
    float _2048 = cbLight._m0[_1864].z + _293;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1864].xyz));
    float _4212 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2060 = dot(vec3(_574, _575, _576), vec3(_2053, _2054, _2055));
    float _4223 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2053, _2054, _2055));
    float _4234 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2045 * _2045;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2045;
    float _2092 = (0.5 / (((_1976 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2082) + _2045) * _2059))) * _2059;
    float _4245 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    float _2104 = (((_2081 * cbLight._m0[_2030].x) * _2094) * _1873) + ((((cbLight._m0[_1944].x * _1820) * _2000) * _2014) * _1854);
    float _2105 = (((_2081 * cbLight._m0[_2030].y) * _2094) * _1873) + ((((cbLight._m0[_1944].y * _1821) * _2000) * _2014) * _1854);
    float _2106 = (((_2081 * cbLight._m0[_2030].z) * _2094) * _1873) + ((((cbLight._m0[_1944].z * _1822) * _2000) * _2014) * _1854);
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_1826.y == 0u)
    {
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2183;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2183;
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2183;
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.x;
        uint _2210 = uint((float(_2198.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2199))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2199)));
        float _2220 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2221 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        uint _2224 = uint(isnan(14.0) ? _2221 : (isnan(_2221) ? 14.0 : min(_2221, 14.0)));
        uvec4 _2229 = texelFetch(g_lightClusterGridBuffer, int(((_2224 << 2u) + (_2210 << 6u)) >> 2u));
        uint _2230 = _2229.x;
        uint _2231 = _2198.z;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        if (((((1u << ((_2231 >> 4u) & 15u)) + 4294967295u) & _2230) == 0u) || ((_2231 & 240u) == 0u))
        {
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
        }
        else
        {
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            uint _2674 = 0u;
            uint _2683;
            bool _2684;
            for (;;)
            {
                _2683 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                _2684 = _2683 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2684)
                {
                    frontier_phi_61_pred = _2669;
                    frontier_phi_61_pred_1 = _2673;
                    frontier_phi_61_pred_2 = _2672;
                    frontier_phi_61_pred_3 = _2671;
                    frontier_phi_61_pred_4 = _2670;
                    frontier_phi_61_pred_5 = _2668;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2668;
                    _2835 = _2669;
                    _2836 = _2670;
                    _2837 = _2671;
                    _2838 = _2672;
                    _2839 = _2673;
                    _2840 = _2683;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2674 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        float _2880 = _2879.x;
                        float _2881 = _2879.y;
                        float _2882 = _2879.z;
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        uint _2901 = (_2844 * 48u) + 12u;
                        vec2 _2909 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x));
                        float _2915 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
                        float _2916 = _2915 * _2184;
                        float _2917 = _2915 * _2185;
                        float _2918 = _2915 * _2186;
                        float _2919 = _2860.x - _2184;
                        float _2920 = _2860.y - _2185;
                        float _2921 = _2860.z - _2186;
                        float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                        float _2925 = inversesqrt(_2922);
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2929 = dot(vec3(_637, _640, _643), vec3(_2926, _2927, _2928));
                        float _2934 = 1.0 - (_2922 * _2860.w);
                        float _4266 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2936 = sqrt(_2922) * _2879.w;
                        float _2939 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                        float _2940 = _2939 * _2939;
                        float _2941 = 1.0 - _2940;
                        float _2943 = (_2941 * _2941) * _579;
                        float _2946 = ((_2941 * _2929) + _2940) + _2943;
                        float _2951 = _2936 * _2936;
                        float _2955 = ((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2935) / (((_2943 * 2.0) + 1.0) * ((_2951 * 0.699999988079071044921875) + 1.0));
                        float _2959 = dot(vec3(_2926, _2927, _2928), vec3(_2916, _2917, _2918));
                        float _4282 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2966 = dot(vec3((-0.0) - _2916, (-0.0) - _2917, (-0.0) - _2918), vec3(_637, _640, _643)) + 1.0;
                        float _2968 = (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * 0.5;
                        float _2976 = ((_2968 * _2968) * _2909.x) * exp2((_2909.y * 32.0) * log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))));
                        float _2978 = _579 / (_579 + 1.0);
                        float _2994 = (-0.0) - _2184;
                        float _2995 = (-0.0) - _2185;
                        float _2996 = (-0.0) - _2186;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3011 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _705;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3001 + _2926;
                        float _3023 = _3002 + _2927;
                        float _3024 = _3003 + _2928;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_637, _640, _643), vec3(_3001, _3002, _3003));
                        float _4298 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _3036 = dot(vec3(_637, _640, _643), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4309 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2939 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2929) + _3045;
                        float _4320 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4331 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3043 * _3043) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2935;
                        _2764 = (((((_2880 * 0.3183098733425140380859375) * _2978) * _2976) + _2880) * _2955) + _2837;
                        _2765 = (((((_2881 * 0.3183098733425140380859375) * _2978) * _2976) + _2881) * _2955) + _2838;
                        _2766 = (((((_2882 * 0.3183098733425140380859375) * _2978) * _2976) + _2882) * _2955) + _2839;
                        _2761 = (_3071 * _2896.x) + _2834;
                        _2762 = (_3071 * _2896.y) + _2835;
                        _2763 = (_3071 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_61_pred = _2762;
                    frontier_phi_61_pred_1 = _2766;
                    frontier_phi_61_pred_2 = _2765;
                    frontier_phi_61_pred_3 = _2764;
                    frontier_phi_61_pred_4 = _2763;
                    frontier_phi_61_pred_5 = _2761;
                }
                _2462 = frontier_phi_61_pred;
                _2470 = frontier_phi_61_pred_1;
                _2468 = frontier_phi_61_pred_2;
                _2466 = frontier_phi_61_pred_3;
                _2464 = frontier_phi_61_pred_4;
                _2460 = frontier_phi_61_pred_5;
                uint _2675 = _2674 + 1u;
                if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2668 = _2460;
                    _2669 = _2462;
                    _2670 = _2464;
                    _2671 = _2466;
                    _2672 = _2468;
                    _2673 = _2470;
                    _2674 = _2675;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
        }
        uvec4 _2473 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2474 = _2473.z;
        uint _2476 = (_2474 >> 8u) & 15u;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((4294967295u << _2476) & _2230) == 0u)
        {
            _2636 = _2459;
            _2638 = _2461;
            _2640 = _2463;
            _2642 = _2465;
            _2644 = _2467;
            _2646 = _2469;
        }
        else
        {
            float _2661 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _2662 = _2661 * _2184;
            float _2663 = _2661 * _2185;
            float _2664 = _2661 * _2186;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2476 < ((_2474 >> 12u) & 15u))
            {
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2817 = _2459;
                float _2818 = _2461;
                float _2819 = _2463;
                float _2820 = _2465;
                float _2821 = _2467;
                float _2822 = _2469;
                uint _2823 = _2476;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2224 << 5u) + (_2210 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2833)
                    {
                        frontier_phi_72_pred = _2822;
                        frontier_phi_72_pred_1 = _2821;
                        frontier_phi_72_pred_2 = _2820;
                        frontier_phi_72_pred_3 = _2819;
                        frontier_phi_72_pred_4 = _2818;
                        frontier_phi_72_pred_5 = _2817;
                    }
                    else
                    {
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3098 = _2817;
                        float _3099 = _2818;
                        float _3100 = _2819;
                        float _3101 = _2820;
                        float _3102 = _2821;
                        float _3103 = _2822;
                        uint _3104 = _2832;
                        uint _3105;
                        vec4 _3130;
                        float _3131;
                        vec4 _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        vec3 _3161;
                        vec2 _3170;
                        vec4 _3185;
                        vec4 _3201;
                        float _3248;
                        bool _3249;
                        for (;;)
                        {
                            uint _3115 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3104));
                            _3105 = (_3104 + 4294967295u) & _3104;
                            uint _3117 = _3115 * 40u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3131 = _3130.w;
                            uint _3133 = (_3115 * 40u) + 4u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            _3147 = _3146.x;
                            _3148 = _3146.y;
                            _3149 = _3146.z;
                            uint _3151 = (_3115 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3163 = (_3115 * 40u) + 12u;
                            _3170 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x));
                            uint _3172 = (_3115 * 40u) + 16u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3188 = (_3115 * 40u) + 20u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3204 = (_3115 * 40u) + 24u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3223 = (_3115 * 40u) + 28u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3248 = fma(_2186, _3236.z, fma(_2185, _3236.y, _3236.x * _2184)) + _3236.w;
                            _3249 = !((fma(_2186, _3217.z, fma(_2185, _3217.y, _3217.x * _2184)) + _3217.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3249)
                            {
                                float _3275 = _3130.x - _2184;
                                float _3276 = _3130.y - _2185;
                                float _3277 = _3130.z - _2186;
                                float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                                float _3281 = inversesqrt(_3278);
                                float _3282 = _3281 * _3275;
                                float _3283 = _3281 * _3276;
                                float _3284 = _3281 * _3277;
                                float _3288 = 1.0 - (_3278 / (_3131 * _3131));
                                float _4342 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3293 = sqrt(_3278) * _3146.w;
                                float _3295 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                                float _3296 = _3295 * _3295;
                                float _3297 = 1.0 - _3296;
                                float _3299 = (_3297 * _3297) * _579;
                                float _3302 = ((_3297 * dot(vec3(_3282, _3283, _3284), vec3(_637, _640, _643))) + _3296) + _3299;
                                float _3307 = _3293 * _3293;
                                float _3312 = (fma(_2186, _3185.z, fma(_2185, _3185.y, _3185.x * _2184)) + _3185.w) / _3248;
                                float _3313 = (fma(_2186, _3201.z, fma(_2185, _3201.y, _3201.x * _2184)) + _3201.w) / _3248;
                                float _3317 = 1.0 - dot(vec2(_3312, _3313), vec2(_3312, _3313));
                                float _4358 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3319 = _3318 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3289) / (((_3299 * 2.0) + 1.0) * ((_3307 * 0.699999988079071044921875) + 1.0)));
                                float _3320 = (-0.0) - _2662;
                                float _3321 = (-0.0) - _2663;
                                float _3322 = (-0.0) - _2664;
                                float _3323 = dot(vec3(_3282, _3283, _3284), vec3(_2662, _2663, _2664));
                                float _4369 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3330 = dot(vec3(_3320, _3321, _3322), vec3(_637, _640, _643)) + 1.0;
                                float _3332 = (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * 0.5;
                                float _3339 = ((_3332 * _3332) * _3170.x) * exp2((_3170.y * 32.0) * log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))));
                                float _3341 = _579 / (_579 + 1.0);
                                float _3362 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3363 = 1.0 - _705;
                                float _3370 = sqrt(1.0 - ((1.0 - (_3363 * _3363)) * (1.0 - (_3362 * _3362))));
                                float _3371 = _3370 * _3370;
                                float _3372 = _3371 * _3371;
                                float _3373 = _3282 - _2662;
                                float _3374 = _3283 - _2663;
                                float _3375 = _3284 - _2664;
                                float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                                float _3383 = dot(vec3(_637, _640, _643), vec3(_3320, _3321, _3322));
                                float _4385 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3386 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3387 = dot(vec3(_637, _640, _643), vec3(_3379 * _3373, _3379 * _3374, _3379 * _3375));
                                float _4396 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3394 = ((_3390 * _3390) * (_3372 + (-1.0))) + 1.0;
                                float _3395 = _3295 * _3371;
                                float _3396 = _3395 * _3395;
                                float _3402 = ((1.0 - _3396) * dot(vec3(_637, _640, _643), vec3(_3282, _3283, _3284))) + _3396;
                                float _4407 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3404 = 1.0 - _3371;
                                float _3414 = (0.5 / (((_3403 * ((_3386 * _3404) + _3371)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3371) * _3386))) * _3403;
                                float _4418 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3424 = (_3318 * _3289) * (((_3372 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3394 * _3394) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3147 * 0.3183098733425140380859375) * _3341) * _3339) + _3147) * _3319;
                                frontier_phi_78_pred_1 = ((((_3149 * 0.3183098733425140380859375) * _3341) * _3339) + _3149) * _3319;
                                frontier_phi_78_pred_2 = ((((_3148 * 0.3183098733425140380859375) * _3341) * _3339) + _3148) * _3319;
                                frontier_phi_78_pred_3 = _3424 * _3161.z;
                                frontier_phi_78_pred_4 = _3424 * _3161.y;
                                frontier_phi_78_pred_5 = _3424 * _3161.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3431 = frontier_phi_78_pred;
                            _3433 = frontier_phi_78_pred_1;
                            _3432 = frontier_phi_78_pred_2;
                            _3430 = frontier_phi_78_pred_3;
                            _3429 = frontier_phi_78_pred_4;
                            _3428 = frontier_phi_78_pred_5;
                            _3088 = _3431 + _3101;
                            _3089 = _3432 + _3102;
                            _3090 = _3433 + _3103;
                            _3085 = _3428 + _3098;
                            _3086 = _3429 + _3099;
                            _3087 = _3430 + _3100;
                            if (_3105 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3105;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3090;
                        frontier_phi_72_pred_1 = _3089;
                        frontier_phi_72_pred_2 = _3088;
                        frontier_phi_72_pred_3 = _3087;
                        frontier_phi_72_pred_4 = _3086;
                        frontier_phi_72_pred_5 = _3085;
                    }
                    _2647 = frontier_phi_72_pred;
                    _2645 = frontier_phi_72_pred_1;
                    _2643 = frontier_phi_72_pred_2;
                    _2641 = frontier_phi_72_pred_3;
                    _2639 = frontier_phi_72_pred_4;
                    _2637 = frontier_phi_72_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2637;
                        _2818 = _2639;
                        _2819 = _2641;
                        _2820 = _2643;
                        _2821 = _2645;
                        _2822 = _2647;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2647;
                frontier_phi_52_53_ladder_1 = _2639;
                frontier_phi_52_53_ladder_2 = _2645;
                frontier_phi_52_53_ladder_3 = _2643;
                frontier_phi_52_53_ladder_4 = _2641;
                frontier_phi_52_53_ladder_5 = _2637;
            }
            else
            {
                frontier_phi_52_53_ladder = _2469;
                frontier_phi_52_53_ladder_1 = _2461;
                frontier_phi_52_53_ladder_2 = _2467;
                frontier_phi_52_53_ladder_3 = _2465;
                frontier_phi_52_53_ladder_4 = _2463;
                frontier_phi_52_53_ladder_5 = _2459;
            }
            _2636 = frontier_phi_52_53_ladder_5;
            _2638 = frontier_phi_52_53_ladder_1;
            _2640 = frontier_phi_52_53_ladder_4;
            _2642 = frontier_phi_52_53_ladder_3;
            _2644 = frontier_phi_52_53_ladder_2;
            _2646 = frontier_phi_52_53_ladder;
        }
        float _2651 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2243 = (_2651 * _2642) + _1938;
        _2245 = (_2651 * _2644) + _1939;
        _2247 = (_2651 * _2646) + _1940;
        _2249 = ((_2636 * 0.039999999105930328369140625) * _2651) + _2104;
        _2251 = ((_2638 * 0.039999999105930328369140625) * _2651) + _2105;
        _2253 = ((_2640 * 0.039999999105930328369140625) * _2651) + _2106;
    }
    else
    {
        _2243 = _1938;
        _2245 = _1939;
        _2247 = _1940;
        _2249 = _2104;
        _2251 = _2105;
        _2253 = _2106;
    }
    float _2273 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2274 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2275 = cbSceneParam._m0[86u].x * ((_617 / cbSceneParam._m0[86u].x) + ((_704 * cbMtdParam._m0[13u].y) * dot(vec3(_574, _575, _576), vec3(_209, _210, _211))));
    float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
    float _2277 = isnan(_2274) ? _618 : (isnan(_618) ? _2274 : min(_618, _2274));
    vec4 _2279 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2276, _2277), 0.0);
    float _2281 = _2279.x;
    bool _2302 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2281)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2281))) > _598;
    float _2303 = _2302 ? _2276 : _617;
    float _2304 = _2302 ? _2277 : _618;
    vec4 _2306 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2303, _2304));
    vec4 _2311 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2303, _2304));
    float _2313 = _2311.x;
    float _2333 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2313)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2313))) - _598;
    bool _2343 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2347 = (isnan(_2333) ? 0.0 : (isnan(0.0) ? _2333 : max(0.0, _2333))) * (-1.44269502162933349609375);
    float _4449 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4460 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4471 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _2374 = 0.959999978542327880859375 - (exp2(log2(1.0 - _696) * 5.0) * 0.959999978542327880859375);
    float _2377 = ((_2306.x * _2374) * exp2(_2347 * (_2343 ? 0.0 : (cbMtdParam._m0[16u].z + cbMtdParam._m0[15u].w)))) * cbSceneParam._m0[72u].w;
    float _2380 = ((_2306.y * _2374) * exp2(_2347 * (_2343 ? 0.0 : (cbMtdParam._m0[16u].w + cbMtdParam._m0[16u].x)))) * cbSceneParam._m0[72u].w;
    float _2383 = ((_2306.z * _2374) * exp2(_2347 * (_2343 ? 0.0 : (cbMtdParam._m0[17u].x + cbMtdParam._m0[16u].y)))) * cbSceneParam._m0[72u].w;
    float _2391 = (_2377 + (((((_1734 * _1782.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1527) * _1798)) + _2249) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2243 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _681))) - _2377) * cbMtdParam._m0[15u].x);
    float _2393 = (_2380 + (((((_1734 * _1782.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1527) * _1798)) + _2251) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2245 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _681))) - _2380) * cbMtdParam._m0[15u].x);
    float _2395 = (_2383 + (((((_1734 * _1782.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1527) * _1798)) + _2253) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2247 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _681))) - _2383) * cbMtdParam._m0[15u].x);
    float _2400 = cbInstanceData._m0[_656 + 6u].w * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)));
    float _2405 = _617 / cbSceneParam._m0[86u].x;
    float _2406 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2420 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2422 = _2420.x;
    float _2423 = _2420.y;
    float _2424 = _2420.z;
    float _2425 = _2420.w;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2484 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2485 = _2484 / _598;
        float _2496 = _2485 * _279;
        float _2497 = _280 * _2485;
        float _2498 = (-0.0) - _2497;
        float _2499 = _2485 * _281;
        float _2501 = (cbSceneParam._m0[77u].w * _2498) / _2484;
        float _2502 = _2501 + cbSceneParam._m0[79u].w;
        float _2503 = cbSceneParam._m0[79u].w - _2497;
        float _2509 = sqrt(((_2496 * _2496) + (_2497 * _2497)) + (_2499 * _2499));
        float _2512 = (1.0 - (cbSceneParam._m0[77u].w / _2484)) * _2509;
        float _2517 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2518 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2774;
        if (abs((_2498 - _2501) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2774 = ((((_2502 > 0.0) ? exp2(_2517 * _2502) : (2.0 - exp2(_2518 * _2502))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2512;
        }
        else
        {
            float _2697 = 1.0 / cbSceneParam._m0[80u].x;
            float _2698 = isnan(_2503) ? _2502 : (isnan(_2502) ? _2503 : max(_2502, _2503));
            float _2699 = isnan(_2503) ? _2502 : (isnan(_2502) ? _2503 : min(_2502, _2503));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            _2774 = ((abs(_2509 / _2498) * cbSceneParam._m0[80u].y) * ((((_2708 - _2709) * 2.0) - ((exp2(_2517 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0)))) - exp2(_2517 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))))) * _2697)) - ((exp2(_2518 * _2708) - exp2(_2518 * _2709)) * _2697))) + (_2512 * cbSceneParam._m0[80u].z);
        }
        vec4 _2776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, 1.0), 0.0);
        float _2785 = exp2((_2774 * (-1.44269502162933349609375)) * (1.0 - _2776.w));
        float _2786 = log2(_2785);
        float _2802 = log2(_2425);
        _2520 = (exp2(_2802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].x)) * _2776.x) / cbSceneParam._m0[78u].x)) + _2422;
        _2522 = (exp2(_2802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].y)) * _2776.y) / cbSceneParam._m0[78u].y)) + _2423;
        _2524 = (exp2(_2802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].z)) * _2776.z) / cbSceneParam._m0[78u].z)) + _2424;
        _2526 = _2785 * _2425;
    }
    else
    {
        _2520 = _2422;
        _2522 = _2423;
        _2524 = _2424;
        _2526 = _2425;
    }
    bool _2812;
    float _2581;
    vec4 _2584;
    float _2586;
    vec4 _2588;
    float _2596;
    float _2597;
    float _2598;
    float _2599;
    bool _2609;
    for (;;)
    {
        bool _2538 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2539 = log2(_2526);
        float _2546 = exp2(_2539 * cbSceneParam._m0[78u].x) * _2391;
        float _2547 = exp2(_2539 * cbSceneParam._m0[78u].y) * _2393;
        float _2548 = exp2(_2539 * cbSceneParam._m0[78u].z) * _2395;
        vec4 _2556 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_617, _618));
        float _2558 = _2556.x;
        float _2579 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2558)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2558))) - _598) * cbMtdParam._m0[14u].z;
        float _4522 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        _2581 = _2400 * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)));
        float _2582 = _605 + (-0.5);
        _2584 = cbMtdParam._m0[1u];
        _2586 = _2584.y * _2582;
        _2588 = cbMatDynParam._m0[0u];
        float _2595 = (roundEven(_2588.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2596 = _2595 * (_2538 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2520)));
        _2597 = _2595 * (_2538 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2522)));
        _2598 = _2595 * (_2538 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2524)));
        _2599 = _2582 * 0.999000012874603271484375;
        _2609 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2609)
        {
            if ((cbInstanceData._m0[_656 + 7u].x + _2599) < 0.5)
            {
                _2812 = true;
                break;
            }
        }
        uint _2732 = _657 + uint(_2588.w);
        if ((cbInstanceData._m0[_2732].w < 1.0) && ((cbInstanceData._m0[_2732].w + _2599) < 0.5))
        {
            _2812 = true;
            break;
        }
        if ((_2586 + _500) < _2584.x)
        {
            _2812 = true;
            break;
        }
        _2812 = false;
        break;
    }
    float _3076;
    if (_2812)
    {
        discard_state = true;
        _3076 = 0.0;
    }
    else
    {
        _3076 = _2581;
    }
    SV_Target.x = _2596;
    SV_Target.y = _2597;
    SV_Target.z = _2598;
    SV_Target.w = _3076;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2581;
    discard_exit();
}


