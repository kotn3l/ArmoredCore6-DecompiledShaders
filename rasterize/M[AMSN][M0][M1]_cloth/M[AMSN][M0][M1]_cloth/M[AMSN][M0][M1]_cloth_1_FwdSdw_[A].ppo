#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _857;
float _3510;
float _3511;
float _3512;
float _3513;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _257.z;
    float _265 = (_257.x * 2.0) + (-1.0);
    float _267 = (_257.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3522 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    float _277 = fma(_274, _215, fma(_267, _207 * TANGENT.x, (_193 * _186) * _265));
    float _280 = fma(_274, _216, fma(_267, _207 * TANGENT.y, (_193 * _187) * _265));
    float _283 = fma(_274, _217, fma(_267, _207 * TANGENT.z, (_193 * _188) * _265));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3533 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _291 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3555 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3566 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _536 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _542 = (cbMatDynParam._m0[5u].x * _536) + cbMatDynParam._m0[5u].y;
        float _3577 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
        float _543 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _547 = (cbMatDynParam._m0[5u].z * _536) + cbMatDynParam._m0[5u].w;
        float _3588 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) - _543)) + _543) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _414 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _417 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3599 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _456 = _453.x * TEXCOORD.z;
    float _457 = dot(vec3(_288, _289, _290), vec3(_369, _370, _371));
    float _460 = _457 * 2.0;
    float _464 = (_460 * _288) - _369;
    float _465 = (_460 * _289) - _370;
    float _466 = (_460 * _290) - _371;
    float _470 = abs(dot(vec3(_369, _370, _371), vec3(_288, _289, _290)));
    float _3632 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _472 = sqrt(_291);
    float _485 = exp2((_472 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_472 * 3.0));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_525, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _517));
        float _585 = fma(_525, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _517));
        float _589 = fma(_525, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _517));
        float _614 = _517 + _288;
        float _615 = _521 + _289;
        float _616 = _525 + _290;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_288, _289, _290), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3680 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_288, _289, _290), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3713 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_288, _289, _290), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3746 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_525, cbModelParam._m0[30u].z, fma(_521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _517));
        float _904 = fma(_525, cbModelParam._m0[31u].z, fma(_521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _517));
        float _908 = fma(_525, cbModelParam._m0[32u].z, fma(_521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _517));
        float _931 = _517 + _288;
        float _932 = _521 + _289;
        float _933 = _525 + _290;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_288, _289, _290), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3809 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_288, _289, _290), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3842 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_288, _289, _290), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3875 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = _857;
        _1179 = _857;
        _1180 = _857;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _464 * 0.5;
    float _1238 = _465 * 0.5;
    float _1239 = _466 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_856, _860, _863, _866));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_858, _861, _864, _867));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _862, _865, _868));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1305 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1306 = isnan(_1305) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1305 : min(cbModelParam._m0[25u].z, _1305));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1355 = fma(_525, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517)) + cbModelParam._m0[13u].w;
        float _1359 = fma(_525, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517)) + cbModelParam._m0[14u].w;
        float _1363 = fma(_525, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517)) + cbModelParam._m0[15u].w;
        float _1366 = fma(_466, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464));
        float _1369 = fma(_466, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464));
        float _1372 = fma(_466, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464));
        float _1400;
        if (_1366 > 0.0)
        {
            _1400 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1400 = frontier_phi_19_17_ladder;
        }
        float _1574;
        if (_1369 > 0.0)
        {
            _1574 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1574 = frontier_phi_28_24_ladder;
        }
        float _1870;
        if (_1372 > 0.0)
        {
            _1870 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1870 = frontier_phi_40_35_ladder;
        }
        float _1872 = isnan(_1574) ? _1400 : (isnan(_1400) ? _1574 : min(_1400, _1574));
        float _1873 = isnan(_1870) ? _1872 : (isnan(_1872) ? _1870 : min(_1872, _1870));
        float _1877 = (_1873 * _1366) + _1355;
        float _1878 = (_1873 * _1369) + _1359;
        float _1879 = (_1873 * _1372) + _1363;
        float _1880 = _1873 * 9.9999997473787516355514526367188e-05;
        float _1882 = (-1.0) - _1880;
        float _1884 = _1880 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1879 > _1884) || ((_1879 < _1882) || ((_1878 > _1884) || ((_1878 < _1882) || ((_1877 < _1882) || (_1877 > _1884))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1879, cbModelParam._m0[9u].z, fma(_1878, cbModelParam._m0[9u].y, _1877 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1879, cbModelParam._m0[10u].z, fma(_1878, cbModelParam._m0[10u].y, _1877 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1879, cbModelParam._m0[11u].z, fma(_1878, cbModelParam._m0[11u].y, _1877 * cbModelParam._m0[11u].x))), _1306);
            frontier_phi_18_40_ladder = _2024.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2024.x * cbModelParam._m0[1u].y;
        }
        _1388 = frontier_phi_18_40_ladder_2;
        _1390 = frontier_phi_18_40_ladder_1;
        _1392 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_464, _465, _466), _1306);
        _1388 = _1376.x * cbModelParam._m0[1u].y;
        _1390 = _1376.y * cbModelParam._m0[1u].y;
        _1392 = _1376.z * cbModelParam._m0[1u].y;
    }
    float _1396 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1396 : min(cbModelParam._m0[25u].w, _1396));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_525, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_525, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_525, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_466, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464));
        float _1468 = fma(_466, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464));
        float _1471 = fma(_466, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464));
        float _1579;
        if (_1465 > 0.0)
        {
            _1579 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1579 = frontier_phi_30_26_ladder;
        }
        float _1897;
        if (_1468 > 0.0)
        {
            _1897 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1897 = frontier_phi_42_37_ladder;
        }
        float _2224;
        if (_1471 > 0.0)
        {
            _2224 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2224 = frontier_phi_52_49_ladder;
        }
        float _2226 = isnan(_1897) ? _1579 : (isnan(_1579) ? _1897 : min(_1579, _1897));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1465) + _1454;
        float _2232 = (_2227 * _1468) + _1458;
        float _2233 = (_2227 * _1471) + _1462;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2234;
        float _2237 = _2234 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2233 > _2237) || ((_2233 < _2235) || ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 < _2235) || (_2231 > _2237))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2233, cbModelParam._m0[17u].z, fma(_2232, cbModelParam._m0[17u].y, _2231 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2233, cbModelParam._m0[18u].z, fma(_2232, cbModelParam._m0[18u].y, _2231 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2233, cbModelParam._m0[19u].z, fma(_2232, cbModelParam._m0[19u].y, _2231 * cbModelParam._m0[19u].x))), _1397);
            frontier_phi_27_52_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_27_52_ladder_2;
        _1492 = frontier_phi_27_52_ladder_1;
        _1494 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_464, _465, _466), _1397);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1506 = ((((1.0 - _485) * ((_472 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_485 * _472)) * _456;
    float _1507 = _1506 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1508 = _1506 * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1509 = _1506 * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1512 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1507 * cbSceneParam._m0[91u].x));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1565 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1566 = _1553 / _1565;
    float _1567 = _1557 / _1565;
    float _1568 = _1561 / _1565;
    float _1715;
    float _1716;
    float _1717;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1595 = ((uint(_1568 > cbSceneParam._m0[59u].y) + uint(_1568 > cbSceneParam._m0[59u].x)) + uint(_1568 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1596 = _1595 + 43u;
        uint _1604 = _1595 + 44u;
        uint _1612 = _1595 + 45u;
        uint _1620 = _1595 + 46u;
        float _1631 = fma(_1565, cbSceneParam._m0[_1596].w, fma(_1561, cbSceneParam._m0[_1596].z, fma(_1557, cbSceneParam._m0[_1596].y, _1553 * cbSceneParam._m0[_1596].x)));
        float _1635 = fma(_1565, cbSceneParam._m0[_1604].w, fma(_1561, cbSceneParam._m0[_1604].z, fma(_1557, cbSceneParam._m0[_1604].y, _1553 * cbSceneParam._m0[_1604].x)));
        float _1643 = fma(_1565, cbSceneParam._m0[_1620].w, fma(_1561, cbSceneParam._m0[_1620].z, fma(_1557, cbSceneParam._m0[_1620].y, _1553 * cbSceneParam._m0[_1620].x)));
        float _1648 = cbSceneParam._m0[33u].z * _1643;
        float _1650 = cbSceneParam._m0[33u].w * _1643;
        float _1653 = fma(_1565, cbSceneParam._m0[_1612].w, fma(_1561, cbSceneParam._m0[_1612].z, fma(_1557, cbSceneParam._m0[_1612].y, _1553 * cbSceneParam._m0[_1612].x))) / _1643;
        float _1701 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
        float _4001 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1708 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 + _1631) / _1643, (_1650 + _1635) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 + _1631) / _1643, (_1635 - _1648) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1648) / _1643, (_1635 - _1650) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1650) / _1643, (_1648 + _1635) / _1643), _1653), 0.0)).x), vec4(0.25)));
        _1715 = 1.0 - (_1708 * cbSceneParam._m0[34u].x);
        _1716 = 1.0 - (_1708 * cbSceneParam._m0[34u].y);
        _1717 = 1.0 - (_1708 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1715 = 1.0;
        _1716 = 1.0;
        _1717 = 1.0;
    }
    float _1781;
    float _1783;
    float _1785;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1769 = fma(_1565, cbSceneParam._m0[63u].w, fma(_1561, cbSceneParam._m0[63u].z, fma(_1557, cbSceneParam._m0[63u].y, _1553 * cbSceneParam._m0[63u].x)));
        float _1770 = fma(_1565, cbSceneParam._m0[60u].w, fma(_1561, cbSceneParam._m0[60u].z, fma(_1557, cbSceneParam._m0[60u].y, _1553 * cbSceneParam._m0[60u].x))) / _1769;
        float _1771 = fma(_1565, cbSceneParam._m0[61u].w, fma(_1561, cbSceneParam._m0[61u].z, fma(_1557, cbSceneParam._m0[61u].y, _1553 * cbSceneParam._m0[61u].x))) / _1769;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1770 >= cbSceneParam._m0[64u].x) && (_1771 >= cbSceneParam._m0[64u].y)) && (_1770 <= cbSceneParam._m0[64u].z)) && (_1771 <= cbSceneParam._m0[64u].w))
        {
            float _1910 = fma(_1565, cbSceneParam._m0[62u].w, fma(_1561, cbSceneParam._m0[62u].z, fma(_1557, cbSceneParam._m0[62u].y, _1553 * cbSceneParam._m0[62u].x))) / _1769;
            float _1914 = isnan(cbSceneParam._m0[41u].w) ? _1910 : (isnan(_1910) ? cbSceneParam._m0[41u].w : max(_1910, cbSceneParam._m0[41u].w));
            float _1957 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
            float _4017 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
            float _1964 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1770, cbSceneParam._m0[33u].w + _1771), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1770, _1771 - cbSceneParam._m0[33u].z), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].z, _1771 - cbSceneParam._m0[33u].w), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1771), _1914), 0.0)).x), vec4(0.25)));
            float _1968 = 1.0 - (_1964 * cbSceneParam._m0[34u].x);
            float _1969 = 1.0 - (_1964 * cbSceneParam._m0[34u].y);
            float _1970 = 1.0 - (_1964 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1969) ? _1716 : (isnan(_1716) ? _1969 : min(_1716, _1969));
            frontier_phi_39_38_ladder_1 = isnan(_1968) ? _1715 : (isnan(_1715) ? _1968 : min(_1715, _1968));
            frontier_phi_39_38_ladder_2 = isnan(_1970) ? _1717 : (isnan(_1717) ? _1970 : min(_1717, _1970));
        }
        else
        {
            frontier_phi_39_38_ladder = _1716;
            frontier_phi_39_38_ladder_1 = _1715;
            frontier_phi_39_38_ladder_2 = _1717;
        }
        _1781 = frontier_phi_39_38_ladder_1;
        _1783 = frontier_phi_39_38_ladder;
        _1785 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1781 = _1715;
        _1783 = _1716;
        _1785 = _1717;
    }
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _456 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1829 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1833 = _1792 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_288, _289, _290));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_288, _289, _290));
    float _4053 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _4064 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1809].x * _1815) * _1854) + (((cbLight._m0[_1819].x * _1781) * _1829) * _1852);
    float _1862 = ((_1815 * cbLight._m0[_1809].y) * _1854) + (((cbLight._m0[_1819].y * _1783) * _1829) * _1852);
    float _1863 = ((_1815 * cbLight._m0[_1809].z) * _1854) + (((cbLight._m0[_1819].z * _1785) * _1829) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1869)
    {
        _1971 = _1861;
        _1973 = _1862;
        _1975 = _1863;
    }
    else
    {
        uint _1979 = _1792 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4075 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1998 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1861;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1862;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1863;
    }
    bool _1978 = _1867.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1978)
    {
        _2033 = _1971;
        _2035 = _1973;
        _2037 = _1975;
    }
    else
    {
        uint _2195 = _1792 + 7u;
        float _2211 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4091 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2214 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2033 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _1971;
        _2035 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _1973;
        _2037 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _1975;
    }
    uint _2040 = _1792 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _291) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1792].x + _369;
    float _2056 = cbLight._m0[_1792].y + _370;
    float _2057 = cbLight._m0[_1792].z + _371;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1792].xyz));
    float _4107 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _2069 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2070 = dot(vec3(_288, _289, _290), vec3(_2062, _2063, _2064));
    float _4129 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_2062, _2063, _2064));
    float _4140 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2093 = (exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2094 = 1.0 - _2054;
    float _2105 = (0.5 / (((_2069 * ((_2068 * _2094) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2094) + _2054) * _2068))) * _2068;
    float _4151 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2121 = _1792 + 9u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _291) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1833].x + _369;
    float _2135 = cbLight._m0[_1833].y + _370;
    float _2136 = cbLight._m0[_1833].z + _371;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1833].xyz));
    float _4162 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2148 = dot(vec3(_288, _289, _290), vec3(_2141, _2142, _2143));
    float _4173 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2141, _2142, _2143));
    float _4184 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2133 * _2133;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2170 = 1.0 - _2133;
    float _2180 = (0.5 / (((_2069 * ((_2147 * _2170) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2170) + _2133) * _2147))) * _2147;
    float _4195 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    float _2192 = (((_2169 * cbLight._m0[_2121].x) * _2182) * _1815) + ((((cbLight._m0[_2040].x * _1781) * _2093) * _2107) * _1829);
    float _2193 = (((_2169 * cbLight._m0[_2121].y) * _2182) * _1815) + ((((cbLight._m0[_2040].y * _1783) * _2093) * _2107) * _1829);
    float _2194 = (((_2169 * cbLight._m0[_2121].z) * _2182) * _1815) + ((((cbLight._m0[_2040].z * _1785) * _2093) * _2107) * _1829);
    float _2250;
    float _2252;
    float _2254;
    if (_1869)
    {
        _2250 = _2192;
        _2252 = _2193;
        _2254 = _2194;
    }
    else
    {
        uint _2256 = _1792 + 2u;
        uint _2260 = _1792 + 10u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _291) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _369;
        float _2277 = cbLight._m0[_2256].y + _370;
        float _2278 = cbLight._m0[_2256].z + _371;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2256].xyz));
        float _4206 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2290 = dot(vec3(_288, _289, _290), vec3(_2283, _2284, _2285));
        float _4217 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4228 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2312 = 1.0 - _2275;
        float _2322 = (0.5 / (((_2069 * ((_2289 * _2312) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2312) + _2275) * _2289))) * _2289;
        float _4239 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2250 = (((_2311 * cbLight._m0[_2260].x) * _2324) * _2325) + _2192;
        _2252 = (((_2311 * cbLight._m0[_2260].y) * _2324) * _2325) + _2193;
        _2254 = (((_2311 * cbLight._m0[_2260].z) * _2324) * _2325) + _2194;
    }
    float _2356;
    float _2358;
    float _2360;
    if (_1978)
    {
        _2356 = _2250;
        _2358 = _2252;
        _2360 = _2254;
    }
    else
    {
        uint _2367 = _1792 + 3u;
        uint _2371 = _1792 + 11u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _291) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _369;
        float _2388 = cbLight._m0[_2367].y + _370;
        float _2389 = cbLight._m0[_2367].z + _371;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2367].xyz));
        float _4255 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2401 = dot(vec3(_288, _289, _290), vec3(_2394, _2395, _2396));
        float _4266 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4277 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2423 = 1.0 - _2386;
        float _2433 = (0.5 / (((_2069 * ((_2400 * _2423) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2423) + _2386) * _2400))) * _2400;
        float _4288 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2356 = (((_2422 * cbLight._m0[_2371].x) * _2435) * _2436) + _2250;
        _2358 = (((_2422 * cbLight._m0[_2371].y) * _2435) * _2436) + _2252;
        _2360 = (((_2422 * cbLight._m0[_2371].z) * _2435) * _2436) + _2254;
    }
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_1790.y == 0u)
    {
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2458)));
        float _2479 = (log2(_1568 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            uint _2726 = 0u;
            uint _2735;
            bool _2736;
            for (;;)
            {
                _2735 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                _2736 = _2735 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2736)
                {
                    frontier_phi_73_pred = _2725;
                    frontier_phi_73_pred_1 = _2724;
                    frontier_phi_73_pred_2 = _2723;
                    frontier_phi_73_pred_3 = _2722;
                    frontier_phi_73_pred_4 = _2721;
                    frontier_phi_73_pred_5 = _2720;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2735;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2726 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _1566;
                        float _2932 = _2891.y - _1567;
                        float _2933 = _2891.z - _1568;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_411, _414, _417), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4314 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _1566;
                        float _2967 = (-0.0) - _1567;
                        float _2968 = (-0.0) - _1568;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2982 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2983 = 1.0 - _472;
                        float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                        float _2991 = _2990 * _2990;
                        float _2992 = _2991 * _2991;
                        float _2993 = _2973 + _2938;
                        float _2994 = _2974 + _2939;
                        float _2995 = _2975 + _2940;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3003 = dot(vec3(_411, _414, _417), vec3(_2973, _2974, _2975));
                        float _4330 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3007 = dot(vec3(_411, _414, _417), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                        float _4341 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                        float _3015 = _2951 * _2991;
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _2941) + _3016;
                        float _4352 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3021 = 1.0 - _2991;
                        float _3031 = (0.5 / (((_3020 * ((_3006 * _3021) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2991) * _3006))) * _3020;
                        float _4363 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3042 = (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3014 * _3014) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2795 = (_2962 * _2910.x) + _2868;
                        _2796 = (_2962 * _2910.y) + _2869;
                        _2797 = (_2962 * _2910.z) + _2870;
                        _2792 = (_3042 * _2927.x) + _2865;
                        _2793 = (_3042 * _2927.y) + _2866;
                        _2794 = (_3042 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_73_pred = _2797;
                    frontier_phi_73_pred_1 = _2796;
                    frontier_phi_73_pred_2 = _2795;
                    frontier_phi_73_pred_3 = _2794;
                    frontier_phi_73_pred_4 = _2793;
                    frontier_phi_73_pred_5 = _2792;
                }
                _2579 = frontier_phi_73_pred;
                _2577 = frontier_phi_73_pred_1;
                _2575 = frontier_phi_73_pred_2;
                _2573 = frontier_phi_73_pred_3;
                _2571 = frontier_phi_73_pred_4;
                _2569 = frontier_phi_73_pred_5;
                uint _2727 = _2726 + 1u;
                if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2720 = _2569;
                    _2721 = _2571;
                    _2722 = _2573;
                    _2723 = _2575;
                    _2724 = _2577;
                    _2725 = _2579;
                    _2726 = _2727;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((4294967295u << _2585) & _2489) == 0u)
        {
            _2688 = _2568;
            _2690 = _2570;
            _2692 = _2572;
            _2694 = _2574;
            _2696 = _2576;
            _2698 = _2578;
        }
        else
        {
            float _2713 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
            float _2714 = _2713 * _1566;
            float _2715 = _2713 * _1567;
            float _2716 = _2713 * _1568;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2848 = _2568;
                float _2849 = _2570;
                float _2850 = _2572;
                float _2851 = _2574;
                float _2852 = _2576;
                float _2853 = _2578;
                uint _2854 = _2585;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2864)
                    {
                        frontier_phi_84_pred = _2852;
                        frontier_phi_84_pred_1 = _2851;
                        frontier_phi_84_pred_2 = _2850;
                        frontier_phi_84_pred_3 = _2849;
                        frontier_phi_84_pred_4 = _2848;
                        frontier_phi_84_pred_5 = _2853;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3069 = _2848;
                        float _3070 = _2849;
                        float _3071 = _2850;
                        float _3072 = _2851;
                        float _3073 = _2852;
                        float _3074 = _2853;
                        uint _3075 = _2863;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3145;
                        vec4 _3161;
                        float _3208;
                        bool _3209;
                        for (;;)
                        {
                            uint _3086 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3132 = (_3086 * 40u) + 16u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3148 = (_3086 * 40u) + 20u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3086 * 40u) + 24u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3183 = (_3086 * 40u) + 28u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3208 = fma(_1568, _3196.z, fma(_1567, _3196.y, _3196.x * _1566)) + _3196.w;
                            _3209 = !((fma(_1568, _3177.z, fma(_1567, _3177.y, _3177.x * _1566)) + _3177.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3209)
                            {
                                float _3236 = _3101.x - _1566;
                                float _3237 = _3101.y - _1567;
                                float _3238 = _3101.z - _1568;
                                float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                                float _3242 = inversesqrt(_3239);
                                float _3243 = _3242 * _3236;
                                float _3244 = _3242 * _3237;
                                float _3245 = _3242 * _3238;
                                float _3249 = 1.0 - (_3239 / (_3102 * _3102));
                                float _4374 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3254 = sqrt(_3239) * _3117.w;
                                float _3256 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                                float _3257 = _3256 * _3256;
                                float _3260 = ((1.0 - _3257) * dot(vec3(_3243, _3244, _3245), vec3(_411, _414, _417))) + _3257;
                                float _3263 = _3254 * _3254;
                                float _3267 = (fma(_1568, _3145.z, fma(_1567, _3145.y, _3145.x * _1566)) + _3145.w) / _3208;
                                float _3268 = (fma(_1568, _3161.z, fma(_1567, _3161.y, _3161.x * _1566)) + _3161.w) / _3208;
                                float _3272 = 1.0 - dot(vec2(_3267, _3268), vec2(_3267, _3268));
                                float _4390 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3274 = _3273 * (((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3250) / ((_3263 * 0.699999988079071044921875) + 1.0));
                                float _3286 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                                float _3287 = 1.0 - _472;
                                float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                                float _3295 = _3294 * _3294;
                                float _3296 = _3295 * _3295;
                                float _3297 = _3243 - _2714;
                                float _3298 = _3244 - _2715;
                                float _3299 = _3245 - _2716;
                                float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                                float _3307 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2714, (-0.0) - _2715, (-0.0) - _2716));
                                float _4401 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3310 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3311 = dot(vec3(_411, _414, _417), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                                float _4412 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3314 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                                float _3319 = _3256 * _3295;
                                float _3320 = _3319 * _3319;
                                float _3326 = ((1.0 - _3320) * dot(vec3(_411, _414, _417), vec3(_3243, _3244, _3245))) + _3320;
                                float _4423 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3328 = 1.0 - _3295;
                                float _3338 = (0.5 / (((_3327 * ((_3310 * _3328) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3295) * _3310))) * _3327;
                                float _4434 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3348 = (_3273 * _3250) * (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3318 * _3318) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3274 * _3117.y;
                                frontier_phi_90_pred_1 = _3274 * _3117.x;
                                frontier_phi_90_pred_2 = _3348 * _3129.z;
                                frontier_phi_90_pred_3 = _3348 * _3129.y;
                                frontier_phi_90_pred_4 = _3348 * _3129.x;
                                frontier_phi_90_pred_5 = _3274 * _3117.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3356 = frontier_phi_90_pred;
                            _3355 = frontier_phi_90_pred_1;
                            _3354 = frontier_phi_90_pred_2;
                            _3353 = frontier_phi_90_pred_3;
                            _3352 = frontier_phi_90_pred_4;
                            _3357 = frontier_phi_90_pred_5;
                            _3059 = _3355 + _3072;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3060;
                        frontier_phi_84_pred_1 = _3059;
                        frontier_phi_84_pred_2 = _3058;
                        frontier_phi_84_pred_3 = _3057;
                        frontier_phi_84_pred_4 = _3056;
                        frontier_phi_84_pred_5 = _3061;
                    }
                    _2697 = frontier_phi_84_pred;
                    _2695 = frontier_phi_84_pred_1;
                    _2693 = frontier_phi_84_pred_2;
                    _2691 = frontier_phi_84_pred_3;
                    _2689 = frontier_phi_84_pred_4;
                    _2699 = frontier_phi_84_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2689;
                        _2849 = _2691;
                        _2850 = _2693;
                        _2851 = _2695;
                        _2852 = _2697;
                        _2853 = _2699;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2699;
                frontier_phi_65_66_ladder_1 = _2695;
                frontier_phi_65_66_ladder_2 = _2697;
                frontier_phi_65_66_ladder_3 = _2691;
                frontier_phi_65_66_ladder_4 = _2689;
                frontier_phi_65_66_ladder_5 = _2693;
            }
            else
            {
                frontier_phi_65_66_ladder = _2578;
                frontier_phi_65_66_ladder_1 = _2574;
                frontier_phi_65_66_ladder_2 = _2576;
                frontier_phi_65_66_ladder_3 = _2570;
                frontier_phi_65_66_ladder_4 = _2568;
                frontier_phi_65_66_ladder_5 = _2572;
            }
            _2688 = frontier_phi_65_66_ladder_4;
            _2690 = frontier_phi_65_66_ladder_3;
            _2692 = frontier_phi_65_66_ladder_5;
            _2694 = frontier_phi_65_66_ladder_1;
            _2696 = frontier_phi_65_66_ladder_2;
            _2698 = frontier_phi_65_66_ladder;
        }
        float _2703 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
        _2501 = (_2703 * _2694) + _2033;
        _2503 = (_2703 * _2696) + _2035;
        _2505 = (_2703 * _2698) + _2037;
        _2507 = ((_2688 * 0.039999999105930328369140625) * _2703) + _2356;
        _2509 = ((_2690 * 0.039999999105930328369140625) * _2703) + _2358;
        _2511 = ((_2692 * 0.039999999105930328369140625) * _2703) + _2360;
    }
    else
    {
        _2501 = _2033;
        _2503 = _2035;
        _2505 = _2037;
        _2507 = _2356;
        _2509 = _2358;
        _2511 = _2360;
    }
    float _4450 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4461 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4472 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _2528 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2501 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _456))) + ((_2507 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2529 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2503 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _456))) + ((_2509 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2530 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2505 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _456))) + ((_2511 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    uint _2531 = _430 + 6u;
    float _2539 = _390 / cbSceneParam._m0[86u].x;
    float _2540 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2594 = _2593 / _310;
        float _2605 = _2594 * _362;
        float _2606 = _363 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2608 = _2594 * _364;
        float _2610 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2611 = _2610 + cbSceneParam._m0[79u].w;
        float _2612 = cbSceneParam._m0[79u].w - _2606;
        float _2618 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2608 * _2608));
        float _2621 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2618;
        float _2626 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2628 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2805;
        if (abs((_2607 - _2610) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2805 = ((((_2611 > 0.0) ? exp2(_2626 * _2611) : (2.0 - exp2(_2628 * _2611))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2621;
        }
        else
        {
            float _2749 = 1.0 / cbSceneParam._m0[80u].x;
            float _2750 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : max(_2611, _2612));
            float _2751 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : min(_2611, _2612));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            _2805 = ((abs(_2618 / _2607) * cbSceneParam._m0[80u].y) * ((((_2760 - _2761) * 2.0) - ((exp2(_2626 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0)))) - exp2(_2626 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))))) * _2749)) - ((exp2(_2628 * _2760) - exp2(_2628 * _2761)) * _2749))) + (_2621 * cbSceneParam._m0[80u].z);
        }
        vec4 _2807 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2816 = exp2((_2805 * (-1.44269502162933349609375)) * (1.0 - _2807.w));
        float _2817 = log2(_2816);
        float _2833 = log2(_2559);
        _2630 = (exp2(_2833 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].x)) * _2807.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2632 = (exp2(_2833 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].y)) * _2807.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2634 = (exp2(_2833 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].z)) * _2807.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2636 = _2816 * _2559;
    }
    else
    {
        _2630 = _2556;
        _2632 = _2557;
        _2634 = _2558;
        _2636 = _2559;
    }
    bool _2843;
    vec4 _2646;
    vec4 _2668;
    float _2670;
    float _2674;
    float _2675;
    float _2676;
    float _2677;
    bool _2687;
    for (;;)
    {
        _2646 = cbMatDynParam._m0[0u];
        float _2648 = roundEven(_2646.y);
        bool _2649 = _2648 == 3.0;
        float _2650 = log2(_2636);
        float _2657 = exp2(_2650 * cbSceneParam._m0[78u].x) * _2528;
        float _2658 = exp2(_2650 * cbSceneParam._m0[78u].y) * _2529;
        float _2659 = exp2(_2650 * cbSceneParam._m0[78u].z) * _2530;
        float _2666 = _378 + (-0.5);
        _2668 = cbMtdParam._m0[1u];
        _2670 = _2668.y * _2666;
        float _2673 = (_2648 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2674 = _2673 * (_2649 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2630)));
        _2675 = _2673 * (_2649 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2632)));
        _2676 = _2673 * (_2649 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2634)));
        _2677 = _2666 * 0.999000012874603271484375;
        _2687 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2687)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2677) < 0.5)
            {
                _2843 = true;
                break;
            }
        }
        uint _2784 = _432 + uint(_2646.w);
        if ((cbInstanceData._m0[_2784].w < 1.0) && ((cbInstanceData._m0[_2784].w + _2677) < 0.5))
        {
            _2843 = true;
            break;
        }
        if ((_2670 + 1.0) < _2668.x)
        {
            _2843 = true;
            break;
        }
        _2843 = false;
        break;
    }
    float _3047;
    if (_2843)
    {
        discard_state = true;
        _3047 = 0.0;
    }
    else
    {
        _3047 = cbInstanceData._m0[_2531].w;
    }
    SV_Target.x = _2674;
    SV_Target.y = _2675;
    SV_Target.z = _2676;
    SV_Target.w = _3047;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
    discard_exit();
}


