#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _853;
float _3223;
float _3224;
float _3225;
float _3226;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3235 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))));
    float _273 = fma(_270, _211, fma(_263, _203 * TANGENT.x, (_189 * _182) * _261));
    float _276 = fma(_270, _212, fma(_263, _203 * TANGENT.y, (_189 * _183) * _261));
    float _279 = fma(_270, _213, fma(_263, _203 * TANGENT.z, (_189 * _184) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3246 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _287 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _3257 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3268 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3279 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    vec4 _372 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _374 = _372.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _532 = sqrt(((_358 * _358) + (_359 * _359)) + (_360 * _360));
        float _538 = (cbMatDynParam._m0[5u].x * _532) + cbMatDynParam._m0[5u].y;
        float _3290 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        float _539 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _543 = (cbMatDynParam._m0[5u].z * _532) + cbMatDynParam._m0[5u].w;
        float _3301 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) - _539)) + _539) < ((_374 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _410 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _413 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _428 = _426 + 9u;
    uint _429 = _428 + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_429].z;
    float _3312 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _452 = _449.x * TEXCOORD.z;
    float _453 = dot(vec3(_284, _285, _286), vec3(_365, _366, _367));
    float _456 = _453 * 2.0;
    float _460 = (_456 * _284) - _365;
    float _461 = (_456 * _285) - _366;
    float _462 = (_456 * _286) - _367;
    float _466 = abs(dot(vec3(_365, _366, _367), vec3(_284, _285, _286)));
    float _3345 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _468 = sqrt(_287);
    float _481 = exp2((_468 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_468 * 3.0));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _581 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _585 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _610 = _513 + _284;
        float _611 = _517 + _285;
        float _612 = _521 + _286;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_284, _285, _286), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3393 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_284, _285, _286), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3426 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_284, _285, _286), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3459 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _896 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _900 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _904 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _927 = _513 + _284;
        float _928 = _517 + _285;
        float _929 = _521 + _286;
        float _939 = fma(_929, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[35u].z) + ((((((_904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_962.x + (-0.5));
        float _997 = _995 * (_962.y + (-0.5));
        float _998 = _995 * (_962.z + (-0.5));
        float _1005 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_969.x + (-0.5));
        float _1007 = _1005 * (_969.y + (-0.5));
        float _1008 = _1005 * (_969.z + (-0.5));
        float _1015 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_976.x + (-0.5));
        float _1017 = _1015 * (_976.y + (-0.5));
        float _1018 = _1015 * (_976.z + (-0.5));
        float _1025 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_983.x + (-0.5));
        float _1027 = _1025 * (_983.y + (-0.5));
        float _1028 = _1025 * (_983.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_284, _285, _286), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3522 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1059 + 1.0))) + _1064) * _1029;
        float _1074 = _997 * 0.5;
        float _1075 = _1007 * 0.5;
        float _1076 = _1017 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_284, _285, _286), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3555 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1101 + 1.0))) + _1106) * _1030;
        float _1116 = _998 * 0.5;
        float _1117 = _1008 * 0.5;
        float _1118 = _1018 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_284, _285, _286), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3588 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1143 + 1.0))) + _1148) * _1031;
        _1165 = _998;
        _1166 = _997;
        _1167 = _996;
        _1168 = _1008;
        _1169 = _1007;
        _1170 = _1006;
        _1171 = _1018;
        _1172 = _1017;
        _1173 = _1016;
        _1174 = _1031;
        _1175 = _1030;
        _1176 = _1029;
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = _853;
        _1174 = _853;
        _1175 = _853;
        _1176 = _853;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1190, cbSceneParam._m0[89u].y, _1189 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1190, cbSceneParam._m0[90u].y, _1189 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1190, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1189));
    float _1233 = _460 * 0.5;
    float _1234 = _461 * 0.5;
    float _1235 = _462 * 0.5;
    float _1236 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1239 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1242 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1276;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1249 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_852, _856, _859, _862));
        float _1253 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_854, _857, _860, _863));
        float _1257 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_855, _858, _861, _864));
        float _1264 = dot(vec4(cbModelParam._m0[39u]), vec4(_1233, _1234, _1235, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1287;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1278 = dot(vec4(cbModelParam._m0[40u]), vec4(_1233, _1234, _1235, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1291 = (_1287 * cbModelParam._m0[1u].x) + (_1276 * (1.0 - cbModelParam._m0[1u].x));
    float _1301 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1302 = isnan(_1301) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1301 : min(cbModelParam._m0[25u].z, _1301));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_462, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460));
        float _1365 = fma(_462, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460));
        float _1368 = fma(_462, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1396 = frontier_phi_19_17_ladder;
        }
        float _1602;
        if (_1365 > 0.0)
        {
            _1602 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1602 = frontier_phi_28_24_ladder;
        }
        float _1845;
        if (_1368 > 0.0)
        {
            _1845 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1845 = frontier_phi_40_35_ladder;
        }
        float _1847 = isnan(_1602) ? _1396 : (isnan(_1396) ? _1602 : min(_1396, _1602));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1362) + _1351;
        float _1853 = (_1848 * _1365) + _1355;
        float _1854 = (_1848 * _1368) + _1359;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1855;
        float _1859 = _1855 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 > _1859) || ((_1853 < _1857) || ((_1852 < _1857) || (_1852 > _1859))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1854, cbModelParam._m0[9u].z, fma(_1853, cbModelParam._m0[9u].y, _1852 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1854, cbModelParam._m0[10u].z, fma(_1853, cbModelParam._m0[10u].y, _1852 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1854, cbModelParam._m0[11u].z, fma(_1853, cbModelParam._m0[11u].y, _1852 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_18_40_ladder = _1978.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1978.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1978.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_18_40_ladder_2;
        _1386 = frontier_phi_18_40_ladder_1;
        _1388 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_460, _461, _462), _1302);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_462, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460));
        float _1464 = fma(_462, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460));
        float _1467 = fma(_462, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460));
        float _1607;
        if (_1461 > 0.0)
        {
            _1607 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1607 = frontier_phi_30_26_ladder;
        }
        float _1872;
        if (_1464 > 0.0)
        {
            _1872 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1872 = frontier_phi_42_37_ladder;
        }
        float _2077;
        if (_1467 > 0.0)
        {
            _2077 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2077 = frontier_phi_51_48_ladder;
        }
        float _2079 = isnan(_1872) ? _1607 : (isnan(_1607) ? _1872 : min(_1607, _1872));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1461) + _1450;
        float _2085 = (_2080 * _1464) + _1454;
        float _2086 = (_2080 * _1467) + _1458;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2088 = (-1.0) - _2087;
        float _2090 = _2087 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2086 > _2090) || ((_2086 < _2088) || ((_2085 > _2090) || ((_2085 < _2088) || ((_2084 < _2088) || (_2084 > _2090))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2086, cbModelParam._m0[17u].z, fma(_2085, cbModelParam._m0[17u].y, _2084 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2086, cbModelParam._m0[18u].z, fma(_2085, cbModelParam._m0[18u].y, _2084 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2086, cbModelParam._m0[19u].z, fma(_2085, cbModelParam._m0[19u].y, _2084 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_27_51_ladder = _2284.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2284.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2284.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_27_51_ladder_2;
        _1488 = frontier_phi_27_51_ladder_1;
        _1490 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_460, _461, _462), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1502 = ((((1.0 - _481) * ((_468 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_481 * _468)) * _452;
    float _1503 = _1502 * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1504 = _1502 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1505 = _1502 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1508 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    uvec4 _1524 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1526 = _1524.x * 14u;
    uint _1527 = _1526 + 13u;
    float _1534 = _452 + (-1.0);
    float _1539 = (cbLight._m0[_1527].x * _1534) + 1.0;
    float _1540 = (cbLight._m0[_1527].y * _1534) + 1.0;
    float _1541 = (cbLight._m0[_1527].z * _1534) + 1.0;
    float _1542 = (cbLight._m0[_1527].w * _1534) + 1.0;
    uint _1543 = _1526 + 5u;
    float _1549 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1553 = _1526 + 4u;
    float _1560 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1564 = _1526 | 1u;
    float _1575 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_284, _285, _286));
    float _1578 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_284, _285, _286));
    float _3724 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _3735 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1583 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1585 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1592 = ((cbLight._m0[_1543].x * _1549) * _1585) + ((cbLight._m0[_1553].x * _1560) * _1583);
    float _1593 = ((_1549 * cbLight._m0[_1543].y) * _1585) + ((_1560 * cbLight._m0[_1553].y) * _1583);
    float _1594 = ((_1549 * cbLight._m0[_1543].z) * _1585) + ((_1560 * cbLight._m0[_1553].z) * _1583);
    uvec4 _1599 = floatBitsToUint(cbLight._m0[_1526 + 12u]);
    bool _1601 = _1599.x == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1601)
    {
        _1612 = _1592;
        _1614 = _1593;
        _1616 = _1594;
    }
    else
    {
        uint _1620 = _1526 + 6u;
        float _1636 = (dot(vec3(cbLight._m0[_1526 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1637 = _1636 * _1636;
        float _3746 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1639 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1612 = (((cbLight._m0[_1620].x * 0.3183098733425140380859375) * _1638) * _1639) + _1592;
        _1614 = (((cbLight._m0[_1620].y * 0.3183098733425140380859375) * _1638) * _1639) + _1593;
        _1616 = (((cbLight._m0[_1620].z * 0.3183098733425140380859375) * _1638) * _1639) + _1594;
    }
    bool _1619 = _1599.y == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1619)
    {
        _1657 = _1612;
        _1659 = _1614;
        _1661 = _1616;
    }
    else
    {
        uint _1816 = _1526 + 7u;
        float _1832 = (dot(vec3(cbLight._m0[_1526 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3762 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1835 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1657 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1612;
        _1659 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1614;
        _1661 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1616;
    }
    uint _1664 = _1526 + 8u;
    float _1677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1526].w)) * _287) * 0.949999988079071044921875);
    float _1678 = _1677 * _1677;
    float _1679 = cbLight._m0[_1526].x + _365;
    float _1680 = cbLight._m0[_1526].y + _366;
    float _1681 = cbLight._m0[_1526].z + _367;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1686 = _1685 * _1679;
    float _1687 = _1685 * _1680;
    float _1688 = _1685 * _1681;
    float _1689 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1526].xyz));
    float _3778 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _1693 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1694 = dot(vec3(_284, _285, _286), vec3(_1686, _1687, _1688));
    float _3800 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1698 = dot(vec3(cbLight._m0[_1526].xyz), vec3(_1686, _1687, _1688));
    float _3811 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1702 = _1678 * _1678;
    float _1706 = ((_1697 * _1697) * (_1702 + (-1.0))) + 1.0;
    float _1717 = (exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1718 = 1.0 - _1678;
    float _1729 = (0.5 / (((_1693 * ((_1692 * _1718) + _1678)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1718) + _1678) * _1692))) * _1692;
    float _3822 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1731 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1702 / ((_1706 * _1706) * 3.141590118408203125));
    uint _1742 = _1526 + 9u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _287) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1564].x + _365;
    float _1756 = cbLight._m0[_1564].y + _366;
    float _1757 = cbLight._m0[_1564].z + _367;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1564].xyz));
    float _3833 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1769 = dot(vec3(_284, _285, _286), vec3(_1762, _1763, _1764));
    float _3844 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1762, _1763, _1764));
    float _3855 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1754 * _1754;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1790 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1791 = 1.0 - _1754;
    float _1801 = (0.5 / (((_1693 * ((_1768 * _1791) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1791) + _1754) * _1768))) * _1768;
    float _3866 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    float _1813 = (((_1790 * cbLight._m0[_1742].x) * _1803) * _1549) + (((_1717 * cbLight._m0[_1664].x) * _1731) * _1560);
    float _1814 = (((_1790 * cbLight._m0[_1742].y) * _1803) * _1549) + (((_1717 * cbLight._m0[_1664].y) * _1731) * _1560);
    float _1815 = (((_1790 * cbLight._m0[_1742].z) * _1803) * _1549) + (((_1717 * cbLight._m0[_1664].z) * _1731) * _1560);
    float _1877;
    float _1879;
    float _1881;
    if (_1601)
    {
        _1877 = _1813;
        _1879 = _1814;
        _1881 = _1815;
    }
    else
    {
        uint _1883 = _1526 + 2u;
        uint _1887 = _1526 + 10u;
        float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _287) * 0.949999988079071044921875);
        float _1902 = _1901 * _1901;
        float _1903 = cbLight._m0[_1883].x + _365;
        float _1904 = cbLight._m0[_1883].y + _366;
        float _1905 = cbLight._m0[_1883].z + _367;
        float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
        float _1910 = _1909 * _1903;
        float _1911 = _1909 * _1904;
        float _1912 = _1909 * _1905;
        float _1913 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1883].xyz));
        float _3877 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1916 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1917 = dot(vec3(_284, _285, _286), vec3(_1910, _1911, _1912));
        float _3888 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1921 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_1910, _1911, _1912));
        float _3899 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = _1902 * _1902;
        float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
        float _1938 = (exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1939 = 1.0 - _1902;
        float _1949 = (0.5 / (((_1693 * ((_1916 * _1939) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1939) + _1902) * _1916))) * _1916;
        float _3910 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1951 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
        float _1952 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1877 = (((_1938 * cbLight._m0[_1887].x) * _1951) * _1952) + _1813;
        _1879 = (((_1938 * cbLight._m0[_1887].y) * _1951) * _1952) + _1814;
        _1881 = (((_1938 * cbLight._m0[_1887].z) * _1951) * _1952) + _1815;
    }
    float _1987;
    float _1989;
    float _1991;
    if (_1619)
    {
        _1987 = _1877;
        _1989 = _1879;
        _1991 = _1881;
    }
    else
    {
        uint _1998 = _1526 + 3u;
        uint _2002 = _1526 + 11u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _287) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _365;
        float _2019 = cbLight._m0[_1998].y + _366;
        float _2020 = cbLight._m0[_1998].z + _367;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1998].xyz));
        float _3926 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2032 = dot(vec3(_284, _285, _286), vec3(_2025, _2026, _2027));
        float _3937 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _3948 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2054 = 1.0 - _2017;
        float _2064 = (0.5 / (((_1693 * ((_2031 * _2054) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _2054) + _2017) * _2031))) * _2031;
        float _3959 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2066 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2067 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1987 = (((_2053 * cbLight._m0[_2002].x) * _2066) * _2067) + _1877;
        _1989 = (((_2053 * cbLight._m0[_2002].y) * _2066) * _2067) + _1879;
        _1991 = (((_2053 * cbLight._m0[_2002].z) * _2066) * _2067) + _1881;
    }
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    if (_1524.y == 0u)
    {
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2142;
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2142;
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2142;
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.x;
        uint _2169 = uint((float(_2157.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2158))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2158)));
        float _2179 = (log2(_2145 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2180 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        uint _2183 = uint(isnan(14.0) ? _2180 : (isnan(_2180) ? 14.0 : min(_2180, 14.0)));
        uvec4 _2188 = texelFetch(g_lightClusterGridBuffer, int(((_2183 << 2u) + (_2169 << 6u)) >> 2u));
        uint _2189 = _2188.x;
        uint _2190 = _2157.z;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        if (((((1u << ((_2190 >> 4u) & 15u)) + 4294967295u) & _2189) == 0u) || ((_2190 & 240u) == 0u))
        {
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
        }
        else
        {
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            uint _2447 = 0u;
            uint _2456;
            bool _2457;
            for (;;)
            {
                _2456 = texelFetch(g_lightClassification, int((((_2183 << 5u) + (_2169 << 9u)) + (_2447 << 2u)) >> 2u)).x;
                _2457 = _2456 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2457)
                {
                    frontier_phi_68_pred = _2443;
                    frontier_phi_68_pred_1 = _2446;
                    frontier_phi_68_pred_2 = _2445;
                    frontier_phi_68_pred_3 = _2444;
                    frontier_phi_68_pred_4 = _2442;
                    frontier_phi_68_pred_5 = _2441;
                }
                else
                {
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    uint _2592;
                    _2586 = _2441;
                    _2587 = _2442;
                    _2588 = _2443;
                    _2589 = _2444;
                    _2590 = _2445;
                    _2591 = _2446;
                    _2592 = _2456;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    for (;;)
                    {
                        uint _2596 = uint(findLSB(_2592)) + (_2447 << 5u);
                        uint _2593 = (_2592 + 4294967295u) & _2592;
                        uint _2598 = _2596 * 48u;
                        vec4 _2612 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2618 = (_2596 * 48u) + 4u;
                        vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2637 = (_2596 * 48u) + 8u;
                        vec3 _2648 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x));
                        float _2652 = _2612.x - _2143;
                        float _2653 = _2612.y - _2144;
                        float _2654 = _2612.z - _2145;
                        float _2655 = dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654));
                        float _2658 = inversesqrt(_2655);
                        float _2659 = _2658 * _2652;
                        float _2660 = _2658 * _2653;
                        float _2661 = _2658 * _2654;
                        float _2662 = dot(vec3(_407, _410, _413), vec3(_2659, _2660, _2661));
                        float _2667 = 1.0 - (_2655 * _2612.w);
                        float _3985 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2668 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2669 = sqrt(_2655) * _2631.w;
                        float _2672 = 1.39999997615814208984375 / (_2669 + 1.39999997615814208984375);
                        float _2673 = _2672 * _2672;
                        float _2676 = ((1.0 - _2673) * _2662) + _2673;
                        float _2679 = _2669 * _2669;
                        float _2683 = ((isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0))) * _2668) / ((_2679 * 0.699999988079071044921875) + 1.0);
                        float _2687 = (-0.0) - _2143;
                        float _2688 = (-0.0) - _2144;
                        float _2689 = (-0.0) - _2145;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2704 = exp2(log2(1.0 / ((_2679 * 3.5) + 5.0)) * 0.25);
                        float _2705 = 1.0 - _468;
                        float _2712 = sqrt(1.0 - ((1.0 - (_2705 * _2705)) * (1.0 - (_2704 * _2704))));
                        float _2713 = _2712 * _2712;
                        float _2714 = _2713 * _2713;
                        float _2715 = _2694 + _2659;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
                        float _2725 = dot(vec3(_407, _410, _413), vec3(_2694, _2695, _2696));
                        float _4001 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2728 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2729 = dot(vec3(_407, _410, _413), vec3(_2721 * _2715, _2721 * _2716, _2721 * _2717));
                        float _4012 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2732 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2736 = ((_2732 * _2732) * (_2714 + (-1.0))) + 1.0;
                        float _2737 = _2672 * _2713;
                        float _2738 = _2737 * _2737;
                        float _2741 = ((1.0 - _2738) * _2662) + _2738;
                        float _4023 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2743 = 1.0 - _2713;
                        float _2753 = (0.5 / (((_2742 * ((_2728 * _2743) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2743) + _2713) * _2728))) * _2742;
                        float _4034 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2764 = (((_2714 * 3.1415927410125732421875) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) / ((_2736 * _2736) * ((_2679 * 2.1991131305694580078125) + 3.141590118408203125))) * _2668;
                        _2516 = (_2683 * _2631.x) + _2589;
                        _2517 = (_2683 * _2631.y) + _2590;
                        _2518 = (_2683 * _2631.z) + _2591;
                        _2513 = (_2764 * _2648.x) + _2586;
                        _2514 = (_2764 * _2648.y) + _2587;
                        _2515 = (_2764 * _2648.z) + _2588;
                        if (_2593 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2586 = _2513;
                            _2587 = _2514;
                            _2588 = _2515;
                            _2589 = _2516;
                            _2590 = _2517;
                            _2591 = _2518;
                            _2592 = _2593;
                        }
                    }
                    frontier_phi_68_pred = _2515;
                    frontier_phi_68_pred_1 = _2518;
                    frontier_phi_68_pred_2 = _2517;
                    frontier_phi_68_pred_3 = _2516;
                    frontier_phi_68_pred_4 = _2514;
                    frontier_phi_68_pred_5 = _2513;
                }
                _2294 = frontier_phi_68_pred;
                _2300 = frontier_phi_68_pred_1;
                _2298 = frontier_phi_68_pred_2;
                _2296 = frontier_phi_68_pred_3;
                _2292 = frontier_phi_68_pred_4;
                _2290 = frontier_phi_68_pred_5;
                uint _2448 = _2447 + 1u;
                if (_2448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2441 = _2290;
                    _2442 = _2292;
                    _2443 = _2294;
                    _2444 = _2296;
                    _2445 = _2298;
                    _2446 = _2300;
                    _2447 = _2448;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
        }
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.z;
        uint _2306 = (_2304 >> 8u) & 15u;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((4294967295u << _2306) & _2189) == 0u)
        {
            _2409 = _2289;
            _2411 = _2291;
            _2413 = _2293;
            _2415 = _2295;
            _2417 = _2297;
            _2419 = _2299;
        }
        else
        {
            float _2434 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
            float _2435 = _2434 * _2143;
            float _2436 = _2434 * _2144;
            float _2437 = _2434 * _2145;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2306 < ((_2304 >> 12u) & 15u))
            {
                float _2410;
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2569 = _2289;
                float _2570 = _2291;
                float _2571 = _2293;
                float _2572 = _2295;
                float _2573 = _2297;
                float _2574 = _2299;
                uint _2575 = _2306;
                uint _2584;
                bool _2585;
                for (;;)
                {
                    _2584 = texelFetch(g_lightClassification, int((((_2183 << 5u) + (_2169 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                    _2585 = _2584 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2585)
                    {
                        frontier_phi_79_pred = _2574;
                        frontier_phi_79_pred_1 = _2573;
                        frontier_phi_79_pred_2 = _2572;
                        frontier_phi_79_pred_3 = _2571;
                        frontier_phi_79_pred_4 = _2570;
                        frontier_phi_79_pred_5 = _2569;
                    }
                    else
                    {
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _2791 = _2569;
                        float _2792 = _2570;
                        float _2793 = _2571;
                        float _2794 = _2572;
                        float _2795 = _2573;
                        float _2796 = _2574;
                        uint _2797 = _2584;
                        uint _2798;
                        vec4 _2823;
                        float _2824;
                        vec4 _2839;
                        vec3 _2851;
                        vec4 _2867;
                        vec4 _2883;
                        float _2930;
                        bool _2931;
                        for (;;)
                        {
                            uint _2808 = ((_2575 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2797));
                            _2798 = (_2797 + 4294967295u) & _2797;
                            uint _2810 = _2808 * 40u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            _2824 = _2823.w;
                            uint _2826 = (_2808 * 40u) + 4u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2841 = (_2808 * 40u) + 8u;
                            _2851 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x));
                            uint _2854 = (_2808 * 40u) + 16u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2870 = (_2808 * 40u) + 20u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2886 = (_2808 * 40u) + 24u;
                            vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2905 = (_2808 * 40u) + 28u;
                            vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2930 = fma(_2145, _2918.z, fma(_2144, _2918.y, _2918.x * _2143)) + _2918.w;
                            _2931 = !((fma(_2145, _2899.z, fma(_2144, _2899.y, _2899.x * _2143)) + _2899.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2931)
                            {
                                float _2958 = _2823.x - _2143;
                                float _2959 = _2823.y - _2144;
                                float _2960 = _2823.z - _2145;
                                float _2961 = dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960));
                                float _2964 = inversesqrt(_2961);
                                float _2965 = _2964 * _2958;
                                float _2966 = _2964 * _2959;
                                float _2967 = _2964 * _2960;
                                float _2971 = 1.0 - (_2961 / (_2824 * _2824));
                                float _4045 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2972 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _2976 = sqrt(_2961) * _2839.w;
                                float _2978 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                                float _2979 = _2978 * _2978;
                                float _2982 = ((1.0 - _2979) * dot(vec3(_2965, _2966, _2967), vec3(_407, _410, _413))) + _2979;
                                float _2985 = _2976 * _2976;
                                float _2989 = (fma(_2145, _2867.z, fma(_2144, _2867.y, _2867.x * _2143)) + _2867.w) / _2930;
                                float _2990 = (fma(_2145, _2883.z, fma(_2144, _2883.y, _2883.x * _2143)) + _2883.w) / _2930;
                                float _2994 = 1.0 - dot(vec2(_2989, _2990), vec2(_2989, _2990));
                                float _4061 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _2996 = _2995 * (((isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))) * _2972) / ((_2985 * 0.699999988079071044921875) + 1.0));
                                float _3008 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                                float _3009 = 1.0 - _468;
                                float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                                float _3017 = _3016 * _3016;
                                float _3018 = _3017 * _3017;
                                float _3019 = _2965 - _2435;
                                float _3020 = _2966 - _2436;
                                float _3021 = _2967 - _2437;
                                float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                                float _3029 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2435, (-0.0) - _2436, (-0.0) - _2437));
                                float _4072 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3032 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3033 = dot(vec3(_407, _410, _413), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                                float _4083 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3036 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                                float _3041 = _2978 * _3017;
                                float _3042 = _3041 * _3041;
                                float _3048 = ((1.0 - _3042) * dot(vec3(_407, _410, _413), vec3(_2965, _2966, _2967))) + _3042;
                                float _4094 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3050 = 1.0 - _3017;
                                float _3060 = (0.5 / (((_3049 * ((_3032 * _3050) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3017) * _3032))) * _3049;
                                float _4105 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3070 = (_2995 * _2972) * (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) / ((_3040 * _3040) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _2996 * _2839.z;
                                frontier_phi_85_pred_1 = _2996 * _2839.y;
                                frontier_phi_85_pred_2 = _2996 * _2839.x;
                                frontier_phi_85_pred_3 = _3070 * _2851.z;
                                frontier_phi_85_pred_4 = _3070 * _2851.y;
                                frontier_phi_85_pred_5 = _3070 * _2851.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3079 = frontier_phi_85_pred;
                            _3078 = frontier_phi_85_pred_1;
                            _3077 = frontier_phi_85_pred_2;
                            _3076 = frontier_phi_85_pred_3;
                            _3075 = frontier_phi_85_pred_4;
                            _3074 = frontier_phi_85_pred_5;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            if (_2798 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2798;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2783;
                        frontier_phi_79_pred_1 = _2782;
                        frontier_phi_79_pred_2 = _2781;
                        frontier_phi_79_pred_3 = _2780;
                        frontier_phi_79_pred_4 = _2779;
                        frontier_phi_79_pred_5 = _2778;
                    }
                    _2420 = frontier_phi_79_pred;
                    _2418 = frontier_phi_79_pred_1;
                    _2416 = frontier_phi_79_pred_2;
                    _2414 = frontier_phi_79_pred_3;
                    _2412 = frontier_phi_79_pred_4;
                    _2410 = frontier_phi_79_pred_5;
                    uint _2576 = _2575 + 1u;
                    if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2569 = _2410;
                        _2570 = _2412;
                        _2571 = _2414;
                        _2572 = _2416;
                        _2573 = _2418;
                        _2574 = _2420;
                        _2575 = _2576;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2416;
                frontier_phi_60_61_ladder_1 = _2420;
                frontier_phi_60_61_ladder_2 = _2418;
                frontier_phi_60_61_ladder_3 = _2414;
                frontier_phi_60_61_ladder_4 = _2412;
                frontier_phi_60_61_ladder_5 = _2410;
            }
            else
            {
                frontier_phi_60_61_ladder = _2295;
                frontier_phi_60_61_ladder_1 = _2299;
                frontier_phi_60_61_ladder_2 = _2297;
                frontier_phi_60_61_ladder_3 = _2293;
                frontier_phi_60_61_ladder_4 = _2291;
                frontier_phi_60_61_ladder_5 = _2289;
            }
            _2409 = frontier_phi_60_61_ladder_5;
            _2411 = frontier_phi_60_61_ladder_4;
            _2413 = frontier_phi_60_61_ladder_3;
            _2415 = frontier_phi_60_61_ladder;
            _2417 = frontier_phi_60_61_ladder_2;
            _2419 = frontier_phi_60_61_ladder_1;
        }
        float _2424 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _2201 = (_2424 * _2415) + _1657;
        _2203 = (_2424 * _2417) + _1659;
        _2205 = (_2424 * _2419) + _1661;
        _2207 = ((_2409 * 0.039999999105930328369140625) * _2424) + _1987;
        _2209 = ((_2411 * 0.039999999105930328369140625) * _2424) + _1989;
        _2211 = ((_2413 * 0.039999999105930328369140625) * _2424) + _1991;
    }
    else
    {
        _2201 = _1657;
        _2203 = _1659;
        _2205 = _1661;
        _2207 = _1987;
        _2209 = _1989;
        _2211 = _1991;
    }
    float _4121 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4132 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4143 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _2228 = ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2201 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _452))) + ((_2207 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1291)) * cbPerFrame._m0[3u].x);
    float _2229 = ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2203 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _452))) + ((_2209 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1291)) * cbPerFrame._m0[3u].x);
    float _2230 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2205 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _452))) + ((_2211 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1291)) * cbPerFrame._m0[3u].x);
    uint _2231 = _426 + 6u;
    float _2239 = _386 / cbSceneParam._m0[86u].x;
    float _2240 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2256 = _2254.x;
    float _2257 = _2254.y;
    float _2258 = _2254.z;
    float _2259 = _2254.w;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2314 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2315 = _2314 / _306;
        float _2326 = _2315 * _358;
        float _2327 = _359 * _2315;
        float _2328 = (-0.0) - _2327;
        float _2329 = _2315 * _360;
        float _2331 = (cbSceneParam._m0[77u].w * _2328) / _2314;
        float _2332 = _2331 + cbSceneParam._m0[79u].w;
        float _2333 = cbSceneParam._m0[79u].w - _2327;
        float _2339 = sqrt(((_2326 * _2326) + (_2327 * _2327)) + (_2329 * _2329));
        float _2342 = (1.0 - (cbSceneParam._m0[77u].w / _2314)) * _2339;
        float _2347 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2349 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2526;
        if (abs((_2328 - _2331) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2526 = ((((_2332 > 0.0) ? exp2(_2347 * _2332) : (2.0 - exp2(_2349 * _2332))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2342;
        }
        else
        {
            float _2470 = 1.0 / cbSceneParam._m0[80u].x;
            float _2471 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : max(_2332, _2333));
            float _2472 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : min(_2332, _2333));
            float _2481 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : min(_2471, 0.0));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            _2526 = ((abs(_2339 / _2328) * cbSceneParam._m0[80u].y) * ((((_2481 - _2482) * 2.0) - ((exp2(_2347 * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)))) - exp2(_2347 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0))))) * _2470)) - ((exp2(_2349 * _2481) - exp2(_2349 * _2482)) * _2470))) + (_2342 * cbSceneParam._m0[80u].z);
        }
        vec4 _2528 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, 1.0), 0.0);
        float _2537 = exp2((_2526 * (-1.44269502162933349609375)) * (1.0 - _2528.w));
        float _2538 = log2(_2537);
        float _2554 = log2(_2259);
        _2351 = (exp2(_2554 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].x)) * _2528.x) / cbSceneParam._m0[78u].x)) + _2256;
        _2353 = (exp2(_2554 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].y)) * _2528.y) / cbSceneParam._m0[78u].y)) + _2257;
        _2355 = (exp2(_2554 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].z)) * _2528.z) / cbSceneParam._m0[78u].z)) + _2258;
        _2357 = _2537 * _2259;
    }
    else
    {
        _2351 = _2256;
        _2353 = _2257;
        _2355 = _2258;
        _2357 = _2259;
    }
    bool _2564;
    vec4 _2367;
    vec4 _2389;
    float _2391;
    float _2395;
    float _2396;
    float _2397;
    float _2398;
    bool _2408;
    for (;;)
    {
        _2367 = cbMatDynParam._m0[0u];
        float _2369 = roundEven(_2367.y);
        bool _2370 = _2369 == 3.0;
        float _2371 = log2(_2357);
        float _2378 = exp2(_2371 * cbSceneParam._m0[78u].x) * _2228;
        float _2379 = exp2(_2371 * cbSceneParam._m0[78u].y) * _2229;
        float _2380 = exp2(_2371 * cbSceneParam._m0[78u].z) * _2230;
        float _2387 = _374 + (-0.5);
        _2389 = cbMtdParam._m0[1u];
        _2391 = _2389.y * _2387;
        float _2394 = (_2369 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2395 = _2394 * (_2370 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2351)));
        _2396 = _2394 * (_2370 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2353)));
        _2397 = _2394 * (_2370 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2355)));
        _2398 = _2387 * 0.999000012874603271484375;
        _2408 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2408)
        {
            if ((cbInstanceData._m0[_426 + 7u].x + _2398) < 0.5)
            {
                _2564 = true;
                break;
            }
        }
        uint _2505 = _428 + uint(_2367.w);
        if ((cbInstanceData._m0[_2505].w < 1.0) && ((cbInstanceData._m0[_2505].w + _2398) < 0.5))
        {
            _2564 = true;
            break;
        }
        if ((_2391 + 1.0) < _2389.x)
        {
            _2564 = true;
            break;
        }
        _2564 = false;
        break;
    }
    float _2769;
    if (_2564)
    {
        discard_state = true;
        _2769 = 0.0;
    }
    else
    {
        _2769 = cbInstanceData._m0[_2231].w;
    }
    SV_Target.x = _2395;
    SV_Target.y = _2396;
    SV_Target.z = _2397;
    SV_Target.w = _2769;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2231].w;
    discard_exit();
}


