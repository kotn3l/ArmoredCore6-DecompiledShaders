#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Blackhole_002_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Blackhole_002_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _772;
float _1847;
float _1848;
float _1849;
float _1850;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    float _172;
    float _173;
    float _174;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
    }
    else
    {
        _172 = _165;
        _173 = _166;
        _174 = _167;
    }
    float _184 = TEXCOORD.x + (-0.5);
    float _186 = TEXCOORD.y + (-0.5);
    float _191 = 1.0 - sqrt((_186 * _186) + (_184 * _184));
    float _197 = exp2(log2(cbMtdParam._m0[13u].z * _191) * cbMtdParam._m0[13u].w);
    float _201 = exp2(log2(_197 * cbMtdParam._m0[12u].z) * cbMtdParam._m0[12u].w);
    float _1859 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _202 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    float _217 = exp2(log2(cbMtdParam._m0[14u].w * _197) * cbMtdParam._m0[14u].z);
    float _1870 = isnan(0.0) ? _217 : (isnan(_217) ? 0.0 : max(_217, 0.0));
    float _218 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    float _1881 = isnan(0.0) ? _218 : (isnan(_218) ? 0.0 : max(_218, 0.0));
    float _225 = exp2(log2(cbMtdParam._m0[14u].y * _191) * cbMtdParam._m0[14u].x);
    float _1892 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _227 = (isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0))) - (isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0)));
    float _228 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _229 = _228 * cbMtdParam._m0[10u].x;
    float _230 = _228 * cbMtdParam._m0[10u].y;
    float _231 = _228 * cbMtdParam._m0[10u].z;
    float _241 = exp2(log2(cbMtdParam._m0[13u].x * _197) * cbMtdParam._m0[13u].y);
    float _1923 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _242 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    float _251 = exp2(log2(cbMtdParam._m0[15u].y * _191) * cbMtdParam._m0[15u].x);
    float _1934 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _252 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    float _268 = cbMtdParam._m0[15u].z * cbPerFrame._m0[22u].x;
    float _273 = _268 * cbMtdParam._m0[11u].w;
    float _274 = sin(_273);
    float _275 = cos(_273);
    vec4 _296 = texture(sampler2D(M_Blackhole_002_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * (fma(_186, (-0.0) - _274, _275 * _184) + 0.5)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_186, _275, _274 * _184) + 0.5)) + cbTextureTilingScale._m0[1u].w));
    float _311 = exp2(log2(cbMtdParam._m0[12u].y * _197) * cbMtdParam._m0[12u].x);
    float _1945 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    float _313 = ((_296.x + (-0.5)) * cbMtdParam._m0[15u].w) * _312;
    float _314 = ((_296.y + (-0.5)) * cbMtdParam._m0[15u].w) * _312;
    float _317 = cbSceneParam._m0[86u].x * (_313 + ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x));
    float _318 = (_314 + ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y)) * cbSceneParam._m0[86u].y;
    float _326 = isnan(cbInstanceData._m0[8u].x) ? _317 : (isnan(_317) ? cbInstanceData._m0[8u].x : max(_317, cbInstanceData._m0[8u].x));
    float _327 = isnan(cbInstanceData._m0[8u].y) ? _318 : (isnan(_318) ? cbInstanceData._m0[8u].y : max(_318, cbInstanceData._m0[8u].y));
    vec4 _331 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _326 : (isnan(_326) ? cbInstanceData._m0[8u].z : min(_326, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _327 : (isnan(_327) ? cbInstanceData._m0[8u].w : min(_327, cbInstanceData._m0[8u].w))));
    float _340 = cbSceneParam._m0[72u].w * _331.x;
    float _341 = cbSceneParam._m0[72u].w * _331.y;
    float _342 = cbSceneParam._m0[72u].w * _331.z;
    float _359 = cbMtdParam._m0[11u].z * _268;
    float _360 = sin(_359);
    float _361 = cos(_359);
    float _362 = _184 + (cbMtdParam._m0[16u].w * _268);
    float _363 = _186 + (cbMtdParam._m0[17u].x * _268);
    float _369 = _313 + 0.5;
    float _371 = _314 + 0.5;
    vec4 _384 = texture(sampler2D(M_Blackhole_002_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_369 + fma(_363, (-0.0) - _360, _362 * _361))) + cbTextureTilingScale._m0[0u].z, ((_371 + fma(_363, _361, _362 * _360)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _386 = _384.x;
    float _387 = _384.y;
    float _388 = _384.z;
    float _394 = cbMtdParam._m0[16u].x * _268;
    float _395 = sin(_394);
    float _396 = cos(_394);
    float _397 = _184 + (cbMtdParam._m0[16u].y * _268);
    float _398 = _186 + (cbMtdParam._m0[16u].z * _268);
    vec4 _410 = texture(sampler2D(M_Blackhole_002_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_369 + fma(_398, (-0.0) - _395, _397 * _396))) + cbTextureTilingScale._m0[0u].z, ((_371 + fma(_398, _396, _397 * _395)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _432 = exp2(log2(cbMtdParam._m0[11u].x * _197) * cbMtdParam._m0[11u].y);
    float _1976 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    float _440 = ((((((_410.x - _386) * _252) + _386) * cbMtdParam._m0[9u].x) - _340) * _433) + _340;
    float _441 = ((((((_410.y - _387) * _252) + _387) * cbMtdParam._m0[9u].y) - _341) * _433) + _341;
    float _442 = ((((((_410.z - _388) * _252) + _388) * cbMtdParam._m0[9u].z) - _342) * _433) + _342;
    float _452 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _453 = _452 * _172;
    float _454 = _452 * _173;
    float _455 = _452 * _174;
    float _1987 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _456 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    vec4 _536 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _538 = _536.w;
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_543 * cbSceneParam._m0[86u].x, _544 * cbSceneParam._m0[86u].y));
    float _555 = _552.x * TEXCOORD.z;
    float _556 = dot(vec3(_453, _454, _455), vec3(_529, _530, _531));
    float _559 = _556 * 2.0;
    float _564 = (_559 * _453) - _529;
    float _565 = (_559 * _454) - _530;
    float _566 = (_559 * _455) - _531;
    float _570 = abs(dot(vec3(_529, _530, _531), vec3(_453, _454, _455)));
    float _1998 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _771;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _637 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _641 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _664 = _598 + _453;
        float _665 = _602 + _454;
        float _666 = _606 + _455;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _633;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _637;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _641;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        _771 = _734 * (_700.z + (-0.5));
        _773 = _734 * (_700.y + (-0.5));
        _774 = _734 * (_700.x + (-0.5));
        _775 = _744 * (_707.z + (-0.5));
        _776 = _744 * (_707.y + (-0.5));
        _777 = _744 * (_707.x + (-0.5));
        _778 = _754 * (_714.z + (-0.5));
        _779 = _754 * (_714.y + (-0.5));
        _780 = _754 * (_714.x + (-0.5));
        _781 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        _782 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        _783 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    }
    else
    {
        _771 = _772;
        _773 = _772;
        _774 = _772;
        _775 = _772;
        _776 = _772;
        _777 = _772;
        _778 = _772;
        _779 = _772;
        _780 = _772;
        _781 = _772;
        _782 = _772;
        _783 = _772;
    }
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _809 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _813 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _817 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _840 = _598 + _453;
        float _841 = _602 + _454;
        float _842 = _606 + _455;
        float _852 = fma(_842, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840)) - _809;
        float _853 = fma(_842, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840)) - _813;
        float _854 = fma(_842, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840)) - _817;
        float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
        float _871 = ((_858 * _852) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_809 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_858 * _853) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_813 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_858 * _854) / cbModelParam._m0[35u].z) + ((((((_817 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _908 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _918 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _928 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _938 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_896.x + (-0.5));
        float _940 = _938 * (_896.y + (-0.5));
        float _941 = _938 * (_896.z + (-0.5));
        _945 = _908 * (_875.z + (-0.5));
        _946 = _908 * (_875.y + (-0.5));
        _947 = _908 * (_875.x + (-0.5));
        _948 = _918 * (_882.z + (-0.5));
        _949 = _918 * (_882.y + (-0.5));
        _950 = _918 * (_882.x + (-0.5));
        _951 = _928 * (_889.z + (-0.5));
        _952 = _928 * (_889.y + (-0.5));
        _953 = _928 * (_889.x + (-0.5));
        _954 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        _955 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        _956 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    }
    else
    {
        _945 = _772;
        _946 = _772;
        _947 = _772;
        _948 = _772;
        _949 = _772;
        _950 = _772;
        _951 = _772;
        _952 = _772;
        _953 = _772;
        _954 = _772;
        _955 = _772;
        _956 = _772;
    }
    float _971 = _564 * 0.5;
    float _972 = _565 * 0.5;
    float _973 = _566 * 0.5;
    float _974 = dot(vec4(_971, _972, _973, 1.0), vec4(_947, _950, _953, _956));
    float _977 = dot(vec4(_971, _972, _973, 1.0), vec4(_946, _949, _952, _955));
    float _980 = dot(vec4(_971, _972, _973, 1.0), vec4(_945, _948, _951, _954));
    float _1015;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _987 = dot(vec4(_971, _972, _973, 1.0), vec4(_771, _775, _778, _781));
        float _991 = dot(vec4(_971, _972, _973, 1.0), vec4(_773, _776, _779, _782));
        float _995 = dot(vec4(_971, _972, _973, 1.0), vec4(_774, _777, _780, _783));
        float _1002 = dot(vec4(cbModelParam._m0[39u]), vec4(_971, _972, _973, 1.0));
        _1015 = dot(vec3(isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)), isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)), isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1002) ? 0.0 : (isnan(0.0) ? _1002 : max(0.0, _1002))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1015 = 1.0;
    }
    float _1026;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1017 = dot(vec4(cbModelParam._m0[40u]), vec4(_971, _972, _973, 1.0));
        _1026 = dot(vec3(isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)), isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)), isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1017) ? 0.0 : (isnan(0.0) ? _1017 : max(0.0, _1017))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1026 = 1.0;
    }
    float _1030 = (_1026 * cbModelParam._m0[1u].x) + (_1015 * (1.0 - cbModelParam._m0[1u].x));
    float _1036 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1117;
    float _1119;
    float _1121;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1084 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1088 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1092 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1095 = fma(_566, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _564));
        float _1098 = fma(_566, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _564));
        float _1101 = fma(_566, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _564));
        float _1127;
        if (_1095 > 0.0)
        {
            _1127 = abs((1.0 - _1084) / _1095);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1095 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1084 + 1.0) / _1095);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1127 = frontier_phi_16_14_ladder;
        }
        float _1428;
        if (_1098 > 0.0)
        {
            _1428 = abs((1.0 - _1088) / _1098);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1098 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1088 + 1.0) / _1098);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1428 = frontier_phi_25_21_ladder;
        }
        float _1611;
        if (_1101 > 0.0)
        {
            _1611 = abs((1.0 - _1092) / _1101);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1101 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1092 + 1.0) / _1101);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _1611 = frontier_phi_39_32_ladder;
        }
        float _1613 = isnan(_1428) ? _1127 : (isnan(_1127) ? _1428 : min(_1127, _1428));
        float _1614 = isnan(_1611) ? _1613 : (isnan(_1613) ? _1611 : min(_1613, _1611));
        float _1618 = (_1614 * _1095) + _1084;
        float _1619 = (_1614 * _1098) + _1088;
        float _1620 = (_1614 * _1101) + _1092;
        float _1621 = _1614 * 9.9999997473787516355514526367188e-05;
        float _1622 = (-1.0) - _1621;
        float _1624 = _1621 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_1620 > _1624) || ((_1620 < _1622) || ((_1619 > _1624) || ((_1619 < _1622) || ((_1618 < _1622) || (_1618 > _1624))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1620, cbModelParam._m0[9u].z, fma(_1619, cbModelParam._m0[9u].y, _1618 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1620, cbModelParam._m0[10u].z, fma(_1619, cbModelParam._m0[10u].y, _1618 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1620, cbModelParam._m0[11u].z, fma(_1619, cbModelParam._m0[11u].y, _1618 * cbModelParam._m0[11u].x))), _1036);
            frontier_phi_15_39_ladder = _1702.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _1702.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _1702.x * cbModelParam._m0[1u].y;
        }
        _1117 = frontier_phi_15_39_ladder_2;
        _1119 = frontier_phi_15_39_ladder_1;
        _1121 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _1105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_564, _565, _566), _1036);
        _1117 = _1105.x * cbModelParam._m0[1u].y;
        _1119 = _1105.y * cbModelParam._m0[1u].y;
        _1121 = _1105.z * cbModelParam._m0[1u].y;
    }
    float _1124 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1215;
    float _1217;
    float _1219;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1179 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1183 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1187 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1190 = fma(_566, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _564));
        float _1193 = fma(_566, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _564));
        float _1196 = fma(_566, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _564));
        float _1433;
        if (_1190 > 0.0)
        {
            _1433 = abs((1.0 - _1179) / _1190);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1190 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1179 + 1.0) / _1190);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1433 = frontier_phi_27_23_ladder;
        }
        float _1637;
        if (_1193 > 0.0)
        {
            _1637 = abs((1.0 - _1183) / _1193);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_1193 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_1183 + 1.0) / _1193);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _1637 = frontier_phi_41_34_ladder;
        }
        float _1722;
        if (_1196 > 0.0)
        {
            _1722 = abs((1.0 - _1187) / _1196);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1196 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1187 + 1.0) / _1196);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1722 = frontier_phi_52_48_ladder;
        }
        float _1724 = isnan(_1637) ? _1433 : (isnan(_1433) ? _1637 : min(_1433, _1637));
        float _1725 = isnan(_1722) ? _1724 : (isnan(_1724) ? _1722 : min(_1724, _1722));
        float _1729 = (_1725 * _1190) + _1179;
        float _1730 = (_1725 * _1193) + _1183;
        float _1731 = (_1725 * _1196) + _1187;
        float _1732 = _1725 * 9.9999997473787516355514526367188e-05;
        float _1733 = (-1.0) - _1732;
        float _1735 = _1732 + 1.0;
        float frontier_phi_24_52_ladder;
        float frontier_phi_24_52_ladder_1;
        float frontier_phi_24_52_ladder_2;
        if ((_1731 > _1735) || ((_1731 < _1733) || ((_1730 > _1735) || ((_1730 < _1733) || ((_1729 < _1733) || (_1729 > _1735))))))
        {
            frontier_phi_24_52_ladder = 0.0;
            frontier_phi_24_52_ladder_1 = 0.0;
            frontier_phi_24_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1731, cbModelParam._m0[17u].z, fma(_1730, cbModelParam._m0[17u].y, _1729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1731, cbModelParam._m0[18u].z, fma(_1730, cbModelParam._m0[18u].y, _1729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1731, cbModelParam._m0[19u].z, fma(_1730, cbModelParam._m0[19u].y, _1729 * cbModelParam._m0[19u].x))), _1124);
            frontier_phi_24_52_ladder = _1764.z * cbModelParam._m0[1u].z;
            frontier_phi_24_52_ladder_1 = _1764.y * cbModelParam._m0[1u].z;
            frontier_phi_24_52_ladder_2 = _1764.x * cbModelParam._m0[1u].z;
        }
        _1215 = frontier_phi_24_52_ladder_2;
        _1217 = frontier_phi_24_52_ladder_1;
        _1219 = frontier_phi_24_52_ladder;
    }
    else
    {
        vec4 _1199 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_564, _565, _566), _1124);
        _1215 = _1199.x * cbModelParam._m0[1u].z;
        _1217 = _1199.y * cbModelParam._m0[1u].z;
        _1219 = _1199.z * cbModelParam._m0[1u].z;
    }
    float _1231 = _555 * 0.01200000010430812835693359375;
    float _1233 = _1231 * ((cbModelParam._m0[1u].w * (_1215 - _1117)) + _1117);
    float _1234 = _1231 * ((cbModelParam._m0[1u].w * (_1217 - _1119)) + _1119);
    float _1235 = _1231 * ((cbModelParam._m0[1u].w * (_1219 - _1121)) + _1121);
    float _1256 = fma(_1235, cbSceneParam._m0[89u].z, fma(_1234, cbSceneParam._m0[89u].y, _1233 * cbSceneParam._m0[89u].x));
    float _1259 = fma(_1235, cbSceneParam._m0[90u].z, fma(_1234, cbSceneParam._m0[90u].y, _1233 * cbSceneParam._m0[90u].x));
    float _1262 = fma(_1235, cbSceneParam._m0[91u].z, fma(_1234, cbSceneParam._m0[91u].y, _1233 * cbSceneParam._m0[91u].x));
    uint _1269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1276 = floatBitsToUint(cbInstanceData._m0[_1269 + 5u]).x * 14u;
    float _1284 = (cbLight._m0[_1276 + 13u].x * (_555 + (-1.0))) + 1.0;
    uint _1285 = _1276 + 8u;
    float _1296 = cbLight._m0[_1276].x + _529;
    float _1297 = cbLight._m0[_1276].y + _530;
    float _1298 = cbLight._m0[_1276].z + _531;
    float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
    float _1306 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1276].xyz));
    float _2124 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1309 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    float _2135 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1311 = dot(vec3(cbLight._m0[_1276].xyz), vec3(_1296 * _1302, _1297 * _1302, _1298 * _1302));
    float _2146 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1321 = (exp2(log2(1.0 - (isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1327 = (0.5 / ((_1309 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0))))) * _1309;
    float _2157 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _1329 = (isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0))) * 0.31831014156341552734375;
    float _1331 = isnan(1.0) ? _1284 : (isnan(_1284) ? 1.0 : min(_1284, 1.0));
    uint _1348 = _1269 + 9u;
    uint _1349 = _1348 + uint(cbMatDynParam._m0[0u].w);
    float _1355 = cbInstanceData._m0[_1349].x * (isnan(4.0) ? _229 : (isnan(_229) ? 4.0 : min(_229, 4.0)));
    float _1356 = cbInstanceData._m0[_1349].y * (isnan(4.0) ? _230 : (isnan(_230) ? 4.0 : min(_230, 4.0)));
    float _1357 = cbInstanceData._m0[_1349].z * (isnan(4.0) ? _231 : (isnan(_231) ? 4.0 : min(_231, 4.0)));
    float _2173 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _1366 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _1373 = ((cbPerFrame._m0[3u].x * ((((_1321 * cbLight._m0[_1285].x) * _1329) * _1331) + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _1030))) + (_1366 * (_440 - (_440 * _242)))) + _1355;
    float _1374 = ((cbPerFrame._m0[3u].x * ((((_1321 * cbLight._m0[_1285].y) * _1329) * _1331) + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _1030))) + (_1366 * (_441 - (_441 * _242)))) + _1356;
    float _1375 = ((cbPerFrame._m0[3u].x * ((((_1321 * cbLight._m0[_1285].z) * _1329) * _1331) + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _1030))) + (_1366 * (_442 - (_442 * _242)))) + _1357;
    float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
    float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    float _1384 = cbMtdParam._m0[2u].x * _1355;
    float _1385 = cbMtdParam._m0[2u].y * _1356;
    float _1386 = cbMtdParam._m0[2u].z * _1357;
    float _2199 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1388 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    float _1394 = cbInstanceData._m0[_1269 + 6u].w * (isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0)));
    float _1399 = _543 / cbSceneParam._m0[86u].x;
    float _1400 = _544 / cbSceneParam._m0[86u].y;
    vec4 _1414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1399, _1400, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1416 = _1414.x;
    float _1417 = _1414.y;
    float _1418 = _1414.z;
    float _1419 = _1414.w;
    float _1480;
    float _1482;
    float _1484;
    float _1486;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _1442 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _1443 = _1442 / _472;
        float _1454 = _1443 * _522;
        float _1455 = _523 * _1443;
        float _1456 = (-0.0) - _1455;
        float _1457 = _1443 * _524;
        float _1459 = (cbSceneParam._m0[77u].w * _1456) / _1442;
        float _1460 = _1459 + cbSceneParam._m0[79u].w;
        float _1461 = cbSceneParam._m0[79u].w - _1455;
        float _1467 = sqrt(((_1454 * _1454) + (_1455 * _1455)) + (_1457 * _1457));
        float _1470 = (1.0 - (cbSceneParam._m0[77u].w / _1442)) * _1467;
        float _1476 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1478 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1642;
        if (abs((_1456 - _1459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1642 = ((((_1460 > 0.0) ? exp2(_1476 * _1460) : (2.0 - exp2(_1478 * _1460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1470;
        }
        else
        {
            float _1568 = 1.0 / cbSceneParam._m0[80u].x;
            float _1569 = isnan(_1461) ? _1460 : (isnan(_1460) ? _1461 : max(_1460, _1461));
            float _1570 = isnan(_1461) ? _1460 : (isnan(_1460) ? _1461 : min(_1460, _1461));
            float _1579 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : min(_1569, 0.0));
            float _1580 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : min(_1570, 0.0));
            _1642 = ((abs(_1467 / _1456) * cbSceneParam._m0[80u].y) * ((((_1579 - _1580) * 2.0) - ((exp2(_1476 * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)))) - exp2(_1476 * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))))) * _1568)) - ((exp2(_1478 * _1579) - exp2(_1478 * _1580)) * _1568))) + (_1470 * cbSceneParam._m0[80u].z);
        }
        vec4 _1644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1399, _1400, 1.0), 0.0);
        float _1653 = exp2((_1642 * (-1.44269502162933349609375)) * (1.0 - _1644.w));
        float _1654 = log2(_1653);
        float _1670 = log2(_1419);
        _1480 = (exp2(_1670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1654 * cbSceneParam._m0[78u].x)) * _1644.x) / cbSceneParam._m0[78u].x)) + _1416;
        _1482 = (exp2(_1670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1654 * cbSceneParam._m0[78u].y)) * _1644.y) / cbSceneParam._m0[78u].y)) + _1417;
        _1484 = (exp2(_1670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1654 * cbSceneParam._m0[78u].z)) * _1644.z) / cbSceneParam._m0[78u].z)) + _1418;
        _1486 = _1653 * _1419;
    }
    else
    {
        _1480 = _1416;
        _1482 = _1417;
        _1484 = _1418;
        _1486 = _1419;
    }
    bool _1680;
    vec4 _1495;
    vec4 _1518;
    float _1520;
    float _1524;
    float _1525;
    float _1526;
    float _1529;
    float _1532;
    float _1535;
    float _1536;
    bool _1547;
    for (;;)
    {
        _1495 = cbMatDynParam._m0[0u];
        float _1497 = roundEven(_1495.y);
        bool _1498 = _1497 == 3.0;
        float _1500 = log2(_1486);
        float _1504 = exp2(_1500 * cbSceneParam._m0[78u].x);
        float _1505 = exp2(_1500 * cbSceneParam._m0[78u].y);
        float _1506 = exp2(_1500 * cbSceneParam._m0[78u].z);
        float _1507 = _1504 * _1376;
        float _1508 = _1505 * _1377;
        float _1509 = _1506 * _1378;
        float _1516 = _538 + (-0.5);
        _1518 = cbMtdParam._m0[1u];
        _1520 = _1518.y * _1516;
        float _1523 = (_1497 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1524 = _1523 * (_1498 ? _1507 : (_1507 + (cbSceneParam._m0[72u].w * _1480)));
        _1525 = _1523 * (_1498 ? _1508 : (_1508 + (cbSceneParam._m0[72u].w * _1482)));
        _1526 = _1523 * (_1498 ? _1509 : (_1509 + (cbSceneParam._m0[72u].w * _1484)));
        _1529 = ((_1384 * _1388) * _1504) * _1523;
        _1532 = ((_1385 * _1388) * _1505) * _1523;
        _1535 = ((_1386 * _1388) * _1506) * _1523;
        _1536 = _1516 * 0.999000012874603271484375;
        _1547 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1547)
        {
            if ((cbInstanceData._m0[_1269 + 7u].x + _1536) < 0.5)
            {
                _1680 = true;
                break;
            }
        }
        uint _1603 = _1348 + uint(_1495.w);
        if ((cbInstanceData._m0[_1603].w < 1.0) && ((cbInstanceData._m0[_1603].w + _1536) < 0.5))
        {
            _1680 = true;
            break;
        }
        if ((_1520 + 1.0) < _1518.x)
        {
            _1680 = true;
            break;
        }
        _1680 = false;
        break;
    }
    float _1713;
    if (_1680)
    {
        discard_state = true;
        _1713 = 0.0;
    }
    else
    {
        _1713 = _1394;
    }
    SV_Target.x = _1524;
    SV_Target.y = _1525;
    SV_Target.z = _1526;
    SV_Target.w = _1713;
    SV_Target_1.x = _1529;
    SV_Target_1.y = _1532;
    SV_Target_1.z = _1535;
    SV_Target_1.w = _1394;
    discard_exit();
}


