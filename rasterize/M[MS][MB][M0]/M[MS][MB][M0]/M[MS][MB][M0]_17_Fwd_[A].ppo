#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3466;
float _3467;
float _3468;
float _3469;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3478 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))));
    vec4 _337 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _339 = _337.x;
    float _340 = 1.0 - _339;
    float _349 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _352 = ((isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : min(_349, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _361 = (_352 - ((((((_339 - _340) * cbMtdParam._m0[24u].z) + _340) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _352))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3499 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _369 = (_362 * (cbMtdParam._m0[17u].x - _282)) + _282;
    float _370 = (_362 * (cbMtdParam._m0[17u].y - _283)) + _283;
    float _371 = (_362 * (cbMtdParam._m0[17u].z - _284)) + _284;
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _386 = _384.x;
    float _387 = 1.0 - _386;
    float _416 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_386 - _387) * cbMtdParam._m0[24u].w) + _387) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3510 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _425 = ((((cbMtdParam._m0[10u].x - _369) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _417) + _369;
    float _426 = ((((cbMtdParam._m0[10u].y - _370) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _417) + _370;
    float _427 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _371)) * _417) + _371;
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _448 = (_441.x * 2.0) + (-1.0);
    float _449 = (_441.y * 2.0) + (-1.0);
    float _450 = dot(vec2(_448, _449), vec2(_448, _449));
    float _3521 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _458 = (_362 * (_441.z - _306)) + _306;
    float _461 = ((cbMtdParam._m0[23u].y - _458) * _417) + _458;
    vec4 _483 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _489 = (_483.x * 2.0) + (-1.0);
    float _490 = (_483.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3532 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _508 = (((_448 - _311) + (cbMtdParam._m0[21u].x * _311)) * _362) + _311;
    float _509 = (((_449 - _313) + (cbMtdParam._m0[21u].x * _313)) * _362) + _313;
    float _510 = (_362 * (sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) - _320)) + _320;
    float _521 = (((_489 - _508) + (_508 * cbMtdParam._m0[22u].z)) * _417) + _508;
    float _522 = (((_490 - _509) + (_509 * cbMtdParam._m0[22u].z)) * _417) + _509;
    float _523 = ((sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) - _510) * _417) + _510;
    float _525 = cbMtdParam._m0[22u].x + _302.w;
    float _528 = fma(_523, _224 * NORMAL.x, fma(_522, _231 * TANGENT.x, (_217 * _209) * _521));
    float _531 = fma(_523, _224 * NORMAL.y, fma(_522, _231 * TANGENT.y, (_217 * _210) * _521));
    float _534 = fma(_523, _224 * NORMAL.z, fma(_522, _231 * TANGENT.z, (_217 * _211) * _521));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3543 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _542 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3565 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3576 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3587 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    vec4 _624 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _626 = _624.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _783 = sqrt(((_610 * _610) + (_611 * _611)) + (_612 * _612));
        float _789 = (cbMatDynParam._m0[5u].x * _783) + cbMatDynParam._m0[5u].y;
        float _3598 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _794 = (cbMatDynParam._m0[5u].z * _783) + cbMatDynParam._m0[5u].w;
        float _3609 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) - _790)) + _790) < ((_626 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _638 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _639 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _659 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _662 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _665 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _678 = _237 + 9u;
    uint _679 = _678 + uint(cbMatDynParam._m0[0u].w);
    float _685 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_679].x;
    float _686 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_679].y;
    float _687 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_679].z;
    float _3620 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _638, cbSceneParam._m0[86u].y * _639));
    float _703 = ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * TEXCOORD_5.w) * _699.x;
    float _704 = dot(vec3(_539, _540, _541), vec3(_617, _618, _619));
    float _707 = _704 * 2.0;
    float _711 = (_707 * _539) - _617;
    float _712 = (_707 * _540) - _618;
    float _713 = (_707 * _541) - _619;
    float _717 = abs(dot(vec3(_617, _618, _619), vec3(_539, _540, _541)));
    float _3653 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _719 = sqrt(_542);
    float _732 = exp2((_719 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_719 * 3.0));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_772, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764));
        float _830 = fma(_772, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764));
        float _834 = fma(_772, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764));
        float _859 = _764 + _539;
        float _860 = _768 + _540;
        float _861 = _772 + _541;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_539, _540, _541), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3701 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_539, _540, _541), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3734 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_539, _540, _541), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3767 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1144 = fma(_772, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764));
        float _1148 = fma(_772, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764));
        float _1152 = fma(_772, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764));
        float _1175 = _764 + _539;
        float _1176 = _768 + _540;
        float _1177 = _772 + _541;
        float _1187 = fma(_1177, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175)) - _1144;
        float _1188 = fma(_1177, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175)) - _1148;
        float _1189 = fma(_1177, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175)) - _1152;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1144 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1148 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[35u].z) + ((((((_1152 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1243 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1210.x + (-0.5));
        float _1245 = _1243 * (_1210.y + (-0.5));
        float _1246 = _1243 * (_1210.z + (-0.5));
        float _1253 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1217.x + (-0.5));
        float _1255 = _1253 * (_1217.y + (-0.5));
        float _1256 = _1253 * (_1217.z + (-0.5));
        float _1263 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1224.x + (-0.5));
        float _1265 = _1263 * (_1224.y + (-0.5));
        float _1266 = _1263 * (_1224.z + (-0.5));
        float _1273 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1231.x + (-0.5));
        float _1275 = _1273 * (_1231.y + (-0.5));
        float _1276 = _1273 * (_1231.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_539, _540, _541), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3830 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1307 + 1.0))) + _1312) * _1277;
        float _1322 = _1245 * 0.5;
        float _1323 = _1255 * 0.5;
        float _1324 = _1265 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_539, _540, _541), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3863 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1349 + 1.0))) + _1354) * _1278;
        float _1364 = _1246 * 0.5;
        float _1365 = _1256 * 0.5;
        float _1366 = _1266 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_539, _540, _541), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3896 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1391 + 1.0))) + _1396) * _1279;
        _1413 = _1246;
        _1414 = _1245;
        _1415 = _1244;
        _1416 = _1256;
        _1417 = _1255;
        _1418 = _1254;
        _1419 = _1266;
        _1420 = _1265;
        _1421 = _1264;
        _1422 = _1279;
        _1423 = _1278;
        _1424 = _1277;
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1114)) + _1114;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1115)) + _1115;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1116)) + _1116;
    float _1460 = fma(_1439, cbSceneParam._m0[89u].z, fma(_1438, cbSceneParam._m0[89u].y, _1437 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1439, cbSceneParam._m0[90u].z, fma(_1438, cbSceneParam._m0[90u].y, _1437 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1439, cbSceneParam._m0[91u].z, fma(_1438, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1437));
    float _1481 = _711 * 0.5;
    float _1482 = _712 * 0.5;
    float _1483 = _713 * 0.5;
    float _1484 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1487 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1490 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1524;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1497 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1501 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1505 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1512 = dot(vec4(cbModelParam._m0[39u]), vec4(_1481, _1482, _1483, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1535;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1526 = dot(vec4(cbModelParam._m0[40u]), vec4(_1481, _1482, _1483, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1539 = (_1535 * cbModelParam._m0[1u].x) + (_1524 * (1.0 - cbModelParam._m0[1u].x));
    float _1549 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1549 : min(cbModelParam._m0[25u].z, _1549));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1598 = fma(_772, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764)) + cbModelParam._m0[13u].w;
        float _1602 = fma(_772, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764)) + cbModelParam._m0[14u].w;
        float _1606 = fma(_772, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764)) + cbModelParam._m0[15u].w;
        float _1609 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1612 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1615 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1643;
        if (_1609 > 0.0)
        {
            _1643 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1643 = frontier_phi_17_15_ladder;
        }
        float _1846;
        if (_1612 > 0.0)
        {
            _1846 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1846 = frontier_phi_26_22_ladder;
        }
        float _2089;
        if (_1615 > 0.0)
        {
            _2089 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2089 = frontier_phi_38_33_ladder;
        }
        float _2091 = isnan(_1846) ? _1643 : (isnan(_1643) ? _1846 : min(_1643, _1846));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1609) + _1598;
        float _2097 = (_2092 * _1612) + _1602;
        float _2098 = (_2092 * _1615) + _1606;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1550);
            frontier_phi_16_38_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1631 = frontier_phi_16_38_ladder_2;
        _1633 = frontier_phi_16_38_ladder_1;
        _1635 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1550);
        _1631 = _1619.x * cbModelParam._m0[1u].y;
        _1633 = _1619.y * cbModelParam._m0[1u].y;
        _1635 = _1619.z * cbModelParam._m0[1u].y;
    }
    float _1639 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1639 : min(cbModelParam._m0[25u].w, _1639));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1694 = fma(_772, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764)) + cbModelParam._m0[21u].w;
        float _1698 = fma(_772, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764)) + cbModelParam._m0[22u].w;
        float _1702 = fma(_772, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764)) + cbModelParam._m0[23u].w;
        float _1705 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1708 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1711 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1851;
        if (_1705 > 0.0)
        {
            _1851 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1851 = frontier_phi_28_24_ladder;
        }
        float _2116;
        if (_1708 > 0.0)
        {
            _2116 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2116 = frontier_phi_40_35_ladder;
        }
        float _2321;
        if (_1711 > 0.0)
        {
            _2321 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2321 = frontier_phi_49_46_ladder;
        }
        float _2323 = isnan(_2116) ? _1851 : (isnan(_1851) ? _2116 : min(_1851, _2116));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1705) + _1694;
        float _2329 = (_2324 * _1708) + _1698;
        float _2330 = (_2324 * _1711) + _1702;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1640);
            frontier_phi_25_49_ladder = _2529.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2529.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2529.x * cbModelParam._m0[1u].z;
        }
        _1730 = frontier_phi_25_49_ladder_2;
        _1732 = frontier_phi_25_49_ladder_1;
        _1734 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1640);
        _1730 = _1714.x * cbModelParam._m0[1u].z;
        _1732 = _1714.y * cbModelParam._m0[1u].z;
        _1734 = _1714.z * cbModelParam._m0[1u].z;
    }
    float _1746 = ((((1.0 - _732) * ((_719 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_732 * _719)) * _703;
    float _1747 = _1746 * ((cbModelParam._m0[1u].w * (_1730 - _1631)) + _1631);
    float _1748 = _1746 * ((cbModelParam._m0[1u].w * (_1732 - _1633)) + _1633);
    float _1749 = _1746 * ((cbModelParam._m0[1u].w * (_1734 - _1635)) + _1635);
    float _1752 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, _1747 * cbSceneParam._m0[91u].x));
    uvec4 _1768 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1770 = _1768.x * 14u;
    uint _1771 = _1770 + 13u;
    float _1778 = _703 + (-1.0);
    float _1783 = (cbLight._m0[_1771].x * _1778) + 1.0;
    float _1784 = (cbLight._m0[_1771].y * _1778) + 1.0;
    float _1785 = (cbLight._m0[_1771].z * _1778) + 1.0;
    float _1786 = (cbLight._m0[_1771].w * _1778) + 1.0;
    uint _1787 = _1770 + 5u;
    float _1793 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1797 = _1770 + 4u;
    float _1804 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1808 = _1770 | 1u;
    float _1819 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_539, _540, _541));
    float _1822 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_539, _540, _541));
    float _4032 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _4043 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1827 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1829 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1836 = ((cbLight._m0[_1787].x * _1793) * _1829) + ((cbLight._m0[_1797].x * _1804) * _1827);
    float _1837 = ((_1793 * cbLight._m0[_1787].y) * _1829) + ((_1804 * cbLight._m0[_1797].y) * _1827);
    float _1838 = ((_1793 * cbLight._m0[_1787].z) * _1829) + ((_1804 * cbLight._m0[_1797].z) * _1827);
    uvec4 _1843 = floatBitsToUint(cbLight._m0[_1770 + 12u]);
    bool _1845 = _1843.x == 0u;
    float _1856;
    float _1858;
    float _1860;
    if (_1845)
    {
        _1856 = _1836;
        _1858 = _1837;
        _1860 = _1838;
    }
    else
    {
        uint _1864 = _1770 + 6u;
        float _1880 = (dot(vec3(cbLight._m0[_1770 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _4054 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1883 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1856 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1836;
        _1858 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1837;
        _1860 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1838;
    }
    bool _1863 = _1843.y == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1863)
    {
        _1901 = _1856;
        _1903 = _1858;
        _1905 = _1860;
    }
    else
    {
        uint _2060 = _1770 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1770 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4070 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2079 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1901 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1856;
        _1903 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1858;
        _1905 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1860;
    }
    uint _1908 = _1770 + 8u;
    float _1921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _542) * 0.949999988079071044921875);
    float _1922 = _1921 * _1921;
    float _1923 = cbLight._m0[_1770].x + _617;
    float _1924 = cbLight._m0[_1770].y + _618;
    float _1925 = cbLight._m0[_1770].z + _619;
    float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
    float _1930 = _1929 * _1923;
    float _1931 = _1929 * _1924;
    float _1932 = _1929 * _1925;
    float _1933 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1770].xyz));
    float _4086 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _1937 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1938 = dot(vec3(_539, _540, _541), vec3(_1930, _1931, _1932));
    float _4108 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1930, _1931, _1932));
    float _4119 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1922 * _1922;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1961 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1962 = 1.0 - _1922;
    float _1973 = (0.5 / (((_1937 * ((_1936 * _1962) + _1922)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _1962) + _1922) * _1936))) * _1936;
    float _4130 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1975 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    uint _1986 = _1770 + 9u;
    float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _542) * 0.949999988079071044921875);
    float _1998 = _1997 * _1997;
    float _1999 = cbLight._m0[_1808].x + _617;
    float _2000 = cbLight._m0[_1808].y + _618;
    float _2001 = cbLight._m0[_1808].z + _619;
    float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
    float _2006 = _2005 * _1999;
    float _2007 = _2005 * _2000;
    float _2008 = _2005 * _2001;
    float _2009 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1808].xyz));
    float _4141 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2013 = dot(vec3(_539, _540, _541), vec3(_2006, _2007, _2008));
    float _4152 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_2006, _2007, _2008));
    float _4163 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1998 * _1998;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1998;
    float _2045 = (0.5 / (((_1937 * ((_2012 * _2035) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2035) + _1998) * _2012))) * _2012;
    float _4174 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    float _2057 = (((_2034 * cbLight._m0[_1986].x) * _2047) * _1793) + (((_1961 * cbLight._m0[_1908].x) * _1975) * _1804);
    float _2058 = (((_2034 * cbLight._m0[_1986].y) * _2047) * _1793) + (((_1961 * cbLight._m0[_1908].y) * _1975) * _1804);
    float _2059 = (((_2034 * cbLight._m0[_1986].z) * _2047) * _1793) + (((_1961 * cbLight._m0[_1908].z) * _1975) * _1804);
    float _2121;
    float _2123;
    float _2125;
    if (_1845)
    {
        _2121 = _2057;
        _2123 = _2058;
        _2125 = _2059;
    }
    else
    {
        uint _2127 = _1770 + 2u;
        uint _2131 = _1770 + 10u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _542) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _617;
        float _2148 = cbLight._m0[_2127].y + _618;
        float _2149 = cbLight._m0[_2127].z + _619;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2127].xyz));
        float _4185 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2161 = dot(vec3(_539, _540, _541), vec3(_2154, _2155, _2156));
        float _4196 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4207 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2183 = 1.0 - _2146;
        float _2193 = (0.5 / (((_1937 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2183) + _2146) * _2160))) * _2160;
        float _4218 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2121 = (((_2182 * cbLight._m0[_2131].x) * _2195) * _2196) + _2057;
        _2123 = (((_2182 * cbLight._m0[_2131].y) * _2195) * _2196) + _2058;
        _2125 = (((_2182 * cbLight._m0[_2131].z) * _2195) * _2196) + _2059;
    }
    float _2231;
    float _2233;
    float _2235;
    if (_1863)
    {
        _2231 = _2121;
        _2233 = _2123;
        _2235 = _2125;
    }
    else
    {
        uint _2242 = _1770 + 3u;
        uint _2246 = _1770 + 11u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _542) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _617;
        float _2263 = cbLight._m0[_2242].y + _618;
        float _2264 = cbLight._m0[_2242].z + _619;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2242].xyz));
        float _4234 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2276 = dot(vec3(_539, _540, _541), vec3(_2269, _2270, _2271));
        float _4245 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4256 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2298 = 1.0 - _2261;
        float _2308 = (0.5 / (((_1937 * ((_2275 * _2298) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2298) + _2261) * _2275))) * _2275;
        float _4267 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2231 = (((_2297 * cbLight._m0[_2246].x) * _2310) * _2311) + _2121;
        _2233 = (((_2297 * cbLight._m0[_2246].y) * _2310) * _2311) + _2123;
        _2235 = (((_2297 * cbLight._m0[_2246].z) * _2310) * _2311) + _2125;
    }
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_1768.y == 0u)
    {
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2386;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2386;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2386;
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.x;
        uint _2413 = uint((float(_2401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _639) / _2402))) + floor(float(uint(cbSceneParam._m0[85u].x * _638) / _2402)));
        float _2423 = (log2(_2389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2424 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        uint _2427 = uint(isnan(14.0) ? _2424 : (isnan(_2424) ? 14.0 : min(_2424, 14.0)));
        uvec4 _2432 = texelFetch(g_lightClusterGridBuffer, int(((_2427 << 2u) + (_2413 << 6u)) >> 2u));
        uint _2433 = _2432.x;
        uint _2434 = _2401.z;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((((1u << ((_2434 >> 4u) & 15u)) + 4294967295u) & _2433) == 0u) || ((_2434 & 240u) == 0u))
        {
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
        }
        else
        {
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            uint _2693 = 0u;
            uint _2702;
            bool _2703;
            for (;;)
            {
                _2702 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                _2703 = _2702 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2703)
                {
                    frontier_phi_66_pred = _2687;
                    frontier_phi_66_pred_1 = _2692;
                    frontier_phi_66_pred_2 = _2691;
                    frontier_phi_66_pred_3 = _2690;
                    frontier_phi_66_pred_4 = _2689;
                    frontier_phi_66_pred_5 = _2688;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2702;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2693 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _2387;
                        float _2899 = _2858.y - _2388;
                        float _2900 = _2858.z - _2389;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_659, _662, _665), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4293 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _2387;
                        float _2934 = (-0.0) - _2388;
                        float _2935 = (-0.0) - _2389;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2950 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _719;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_659, _662, _665), vec3(_2940, _2941, _2942));
                        float _4309 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2975 = dot(vec3(_659, _662, _665), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4320 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2918 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2908) + _2984;
                        float _4331 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4342 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_2982 * _2982) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2762 = (_2929 * _2877.x) + _2835;
                        _2763 = (_2929 * _2877.y) + _2836;
                        _2764 = (_2929 * _2877.z) + _2837;
                        _2759 = (_3010 * _2894.x) + _2832;
                        _2760 = (_3010 * _2894.y) + _2833;
                        _2761 = (_3010 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_66_pred = _2759;
                    frontier_phi_66_pred_1 = _2764;
                    frontier_phi_66_pred_2 = _2763;
                    frontier_phi_66_pred_3 = _2762;
                    frontier_phi_66_pred_4 = _2761;
                    frontier_phi_66_pred_5 = _2760;
                }
                _2535 = frontier_phi_66_pred;
                _2545 = frontier_phi_66_pred_1;
                _2543 = frontier_phi_66_pred_2;
                _2541 = frontier_phi_66_pred_3;
                _2539 = frontier_phi_66_pred_4;
                _2537 = frontier_phi_66_pred_5;
                uint _2694 = _2693 + 1u;
                if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2687 = _2535;
                    _2688 = _2537;
                    _2689 = _2539;
                    _2690 = _2541;
                    _2691 = _2543;
                    _2692 = _2545;
                    _2693 = _2694;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
        }
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.z;
        uint _2551 = (_2549 >> 8u) & 15u;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((4294967295u << _2551) & _2433) == 0u)
        {
            _2655 = _2534;
            _2657 = _2536;
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
        }
        else
        {
            float _2680 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
            float _2681 = _2680 * _2387;
            float _2682 = _2680 * _2388;
            float _2683 = _2680 * _2389;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2551 < ((_2549 >> 12u) & 15u))
            {
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2815 = _2534;
                float _2816 = _2536;
                float _2817 = _2538;
                float _2818 = _2540;
                float _2819 = _2542;
                float _2820 = _2544;
                uint _2821 = _2551;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2831)
                    {
                        frontier_phi_77_pred = _2820;
                        frontier_phi_77_pred_1 = _2819;
                        frontier_phi_77_pred_2 = _2818;
                        frontier_phi_77_pred_3 = _2817;
                        frontier_phi_77_pred_4 = _2816;
                        frontier_phi_77_pred_5 = _2815;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        float _3042 = _2820;
                        uint _3043 = _2830;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3113;
                        vec4 _3129;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3054 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3100 = (_3054 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3054 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3054 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3054 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2389, _3163.z, fma(_2388, _3163.y, _3163.x * _2387)) + _3163.w;
                            _3176 = !((fma(_2389, _3144.z, fma(_2388, _3144.y, _3144.x * _2387)) + _3144.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3069.x - _2387;
                                float _3204 = _3069.y - _2388;
                                float _3205 = _3069.z - _2389;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3070 * _3070));
                                float _4353 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3221 = sqrt(_3206) * _3085.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_659, _662, _665))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2389, _3113.z, fma(_2388, _3113.y, _3113.x * _2387)) + _3113.w) / _3175;
                                float _3235 = (fma(_2389, _3129.z, fma(_2388, _3129.y, _3129.x * _2387)) + _3129.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4369 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _719;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2681;
                                float _3265 = _3211 - _2682;
                                float _3266 = _3212 - _2683;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_659, _662, _665), vec3((-0.0) - _2681, (-0.0) - _2682, (-0.0) - _2683));
                                float _4380 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3278 = dot(vec3(_659, _662, _665), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4391 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_659, _662, _665), vec3(_3210, _3211, _3212))) + _3287;
                                float _4402 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4413 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3241 * _3085.y;
                                frontier_phi_83_pred_1 = _3241 * _3085.x;
                                frontier_phi_83_pred_2 = _3315 * _3097.z;
                                frontier_phi_83_pred_3 = _3315 * _3097.y;
                                frontier_phi_83_pred_4 = _3315 * _3097.x;
                                frontier_phi_83_pred_5 = _3241 * _3085.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3323 = frontier_phi_83_pred;
                            _3322 = frontier_phi_83_pred_1;
                            _3321 = frontier_phi_83_pred_2;
                            _3320 = frontier_phi_83_pred_3;
                            _3319 = frontier_phi_83_pred_4;
                            _3324 = frontier_phi_83_pred_5;
                            _3027 = _3322 + _3040;
                            _3028 = _3323 + _3041;
                            _3029 = _3324 + _3042;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            _3026 = _3321 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3029;
                        frontier_phi_77_pred_1 = _3028;
                        frontier_phi_77_pred_2 = _3027;
                        frontier_phi_77_pred_3 = _3026;
                        frontier_phi_77_pred_4 = _3025;
                        frontier_phi_77_pred_5 = _3024;
                    }
                    _2666 = frontier_phi_77_pred;
                    _2664 = frontier_phi_77_pred_1;
                    _2662 = frontier_phi_77_pred_2;
                    _2660 = frontier_phi_77_pred_3;
                    _2658 = frontier_phi_77_pred_4;
                    _2656 = frontier_phi_77_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2656;
                        _2816 = _2658;
                        _2817 = _2660;
                        _2818 = _2662;
                        _2819 = _2664;
                        _2820 = _2666;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2660;
                frontier_phi_58_59_ladder_1 = _2666;
                frontier_phi_58_59_ladder_2 = _2664;
                frontier_phi_58_59_ladder_3 = _2662;
                frontier_phi_58_59_ladder_4 = _2658;
                frontier_phi_58_59_ladder_5 = _2656;
            }
            else
            {
                frontier_phi_58_59_ladder = _2538;
                frontier_phi_58_59_ladder_1 = _2544;
                frontier_phi_58_59_ladder_2 = _2542;
                frontier_phi_58_59_ladder_3 = _2540;
                frontier_phi_58_59_ladder_4 = _2536;
                frontier_phi_58_59_ladder_5 = _2534;
            }
            _2655 = frontier_phi_58_59_ladder_5;
            _2657 = frontier_phi_58_59_ladder_4;
            _2659 = frontier_phi_58_59_ladder;
            _2661 = frontier_phi_58_59_ladder_3;
            _2663 = frontier_phi_58_59_ladder_2;
            _2665 = frontier_phi_58_59_ladder_1;
        }
        float _2670 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
        _2446 = (_2670 * _2661) + _1901;
        _2448 = (_2670 * _2663) + _1903;
        _2450 = (_2670 * _2665) + _1905;
        _2452 = ((_2655 * 0.039999999105930328369140625) * _2670) + _2231;
        _2454 = ((_2657 * 0.039999999105930328369140625) * _2670) + _2233;
        _2456 = ((_2659 * 0.039999999105930328369140625) * _2670) + _2235;
    }
    else
    {
        _2446 = _1901;
        _2448 = _1903;
        _2450 = _1905;
        _2452 = _2231;
        _2454 = _2233;
        _2456 = _2235;
    }
    float _4429 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4440 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4451 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _2473 = ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2446 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _703))) + ((_2452 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2448 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _703))) + ((_2454 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2475 = ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2450 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _703))) + ((_2456 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    uint _2476 = _237 + 6u;
    float _2484 = _638 / cbSceneParam._m0[86u].x;
    float _2485 = _639 / cbSceneParam._m0[86u].y;
    vec4 _2499 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2484, _2485, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2501 = _2499.x;
    float _2502 = _2499.y;
    float _2503 = _2499.z;
    float _2504 = _2499.w;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2559 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2560 = _2559 / _560;
        float _2571 = _2560 * _610;
        float _2572 = _611 * _2560;
        float _2573 = (-0.0) - _2572;
        float _2575 = _2560 * _612;
        float _2577 = (cbSceneParam._m0[77u].w * _2573) / _2559;
        float _2578 = _2577 + cbSceneParam._m0[79u].w;
        float _2579 = cbSceneParam._m0[79u].w - _2572;
        float _2585 = sqrt(((_2571 * _2571) + (_2572 * _2572)) + (_2575 * _2575));
        float _2588 = (1.0 - (cbSceneParam._m0[77u].w / _2559)) * _2585;
        float _2593 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2595 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2772;
        if (abs((_2573 - _2577) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2772 = ((((_2578 > 0.0) ? exp2(_2593 * _2578) : (2.0 - exp2(_2595 * _2578))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2588;
        }
        else
        {
            float _2716 = 1.0 / cbSceneParam._m0[80u].x;
            float _2717 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : max(_2578, _2579));
            float _2718 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : min(_2578, _2579));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            _2772 = ((abs(_2585 / _2573) * cbSceneParam._m0[80u].y) * ((((_2727 - _2728) * 2.0) - ((exp2(_2593 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0)))) - exp2(_2593 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))))) * _2716)) - ((exp2(_2595 * _2727) - exp2(_2595 * _2728)) * _2716))) + (_2588 * cbSceneParam._m0[80u].z);
        }
        vec4 _2774 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2484, _2485, 1.0), 0.0);
        float _2783 = exp2((_2772 * (-1.44269502162933349609375)) * (1.0 - _2774.w));
        float _2784 = log2(_2783);
        float _2800 = log2(_2504);
        _2597 = (exp2(_2800 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].x)) * _2774.x) / cbSceneParam._m0[78u].x)) + _2501;
        _2599 = (exp2(_2800 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].y)) * _2774.y) / cbSceneParam._m0[78u].y)) + _2502;
        _2601 = (exp2(_2800 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].z)) * _2774.z) / cbSceneParam._m0[78u].z)) + _2503;
        _2603 = _2783 * _2504;
    }
    else
    {
        _2597 = _2501;
        _2599 = _2502;
        _2601 = _2503;
        _2603 = _2504;
    }
    bool _2810;
    vec4 _2613;
    vec4 _2635;
    float _2637;
    float _2641;
    float _2642;
    float _2643;
    float _2644;
    bool _2654;
    for (;;)
    {
        _2613 = cbMatDynParam._m0[0u];
        float _2615 = roundEven(_2613.y);
        bool _2616 = _2615 == 3.0;
        float _2617 = log2(_2603);
        float _2624 = exp2(_2617 * cbSceneParam._m0[78u].x) * _2473;
        float _2625 = exp2(_2617 * cbSceneParam._m0[78u].y) * _2474;
        float _2626 = exp2(_2617 * cbSceneParam._m0[78u].z) * _2475;
        float _2633 = _626 + (-0.5);
        _2635 = cbMtdParam._m0[1u];
        _2637 = _2635.y * _2633;
        float _2640 = (_2615 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2641 = _2640 * (_2616 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2597)));
        _2642 = _2640 * (_2616 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2599)));
        _2643 = _2640 * (_2616 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2601)));
        _2644 = _2633 * 0.999000012874603271484375;
        _2654 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2654)
        {
            if ((cbInstanceData._m0[_237 + 7u].x + _2644) < 0.5)
            {
                _2810 = true;
                break;
            }
        }
        uint _2751 = _678 + uint(_2613.w);
        if ((cbInstanceData._m0[_2751].w < 1.0) && ((cbInstanceData._m0[_2751].w + _2644) < 0.5))
        {
            _2810 = true;
            break;
        }
        if ((_2637 + 1.0) < _2635.x)
        {
            _2810 = true;
            break;
        }
        _2810 = false;
        break;
    }
    float _3015;
    if (_2810)
    {
        discard_state = true;
        _3015 = 0.0;
    }
    else
    {
        _3015 = cbInstanceData._m0[_2476].w;
    }
    SV_Target.x = _2641;
    SV_Target.y = _2642;
    SV_Target.z = _2643;
    SV_Target.w = _3015;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2476].w;
    discard_exit();
}


