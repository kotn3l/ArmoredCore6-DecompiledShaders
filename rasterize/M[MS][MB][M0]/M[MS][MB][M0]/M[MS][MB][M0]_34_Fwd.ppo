#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1150;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _339 = (_330.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_338, _339), vec2(_338, _339));
    float _3458 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))));
    float _351 = _338 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_304.x * 2.0) + (-1.0)));
    float _352 = _339 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_304.y * 2.0) + (-1.0)));
    float _355 = fma(_346, _227, fma(_352, _234, _351 * _220));
    float _358 = fma(_346, _228, fma(_352, _235, _351 * _221));
    float _361 = fma(_346, _229, fma(_352, _236, _351 * _222));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _403 = _401.x;
    float _404 = 1.0 - _403;
    float _411 = ((_403 - _404) * cbMtdParam._m0[24u].z) + _404;
    float _413 = (cbMtdParam._m0[19u].x + dot(vec4(_365 * _355, _365 * _358, _365 * _361, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_411 * cbMtdParam._m0[21u].z);
    float _3469 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _416 = (-0.0) - cbMtdParam._m0[24u].y;
    float _418 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
    float _426 = _414 - ((_414 * TEXCOORD_8.x) * _419);
    float _427 = _414 - ((_414 * TEXCOORD_8.y) * _419);
    float _428 = _414 - ((_414 * TEXCOORD_8.z) * _419);
    float _435 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _439 = ((isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : min(_435, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _447 = (_439 - (((_411 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _439))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3500 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _452 = ((_426 * (cbMtdParam._m0[17u].x - _284)) * _448) + _284;
    float _453 = ((_427 * (cbMtdParam._m0[17u].y - _285)) * _448) + _285;
    float _454 = ((_428 * (cbMtdParam._m0[17u].z - _286)) * _448) + _286;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _468 = _466.x;
    float _469 = 1.0 - _468;
    float _498 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_468 - _469) * cbMtdParam._m0[24u].w) + _469) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3511 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _507 = ((((cbMtdParam._m0[10u].x - _452) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _499) + _452;
    float _508 = ((((cbMtdParam._m0[10u].y - _453) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _499) + _453;
    float _509 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _454)) * _499) + _454;
    float _514 = (((_304.z - _334) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _334;
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _535 = (_528.x * 2.0) + (-1.0);
    float _536 = (_528.y * 2.0) + (-1.0);
    float _537 = dot(vec2(_535, _536), vec2(_535, _536));
    float _3522 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _546 = (((_528.z - _514) * _426) * _448) + _514;
    float _549 = ((cbMtdParam._m0[23u].y - _546) * _499) + _546;
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _574 = (_568.x * 2.0) + (-1.0);
    float _575 = (_568.y * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3533 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _596 = (((cbMtdParam._m0[21u].x * _351) + ((_535 - _351) * _426)) * _448) + _351;
    float _597 = (((cbMtdParam._m0[21u].x * _352) + ((_536 - _352) * _427)) * _448) + _352;
    float _598 = (((sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) - _346) * _428) * _448) + _346;
    float _609 = (((_574 - _596) + (_596 * cbMtdParam._m0[22u].z)) * _499) + _596;
    float _610 = (((_575 - _597) + (_597 * cbMtdParam._m0[22u].z)) * _499) + _597;
    float _611 = ((sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) - _598) * _499) + _598;
    float _613 = cbMtdParam._m0[22u].x + _330.w;
    float _616 = fma(_611, _227, fma(_610, _234, _609 * _220));
    float _619 = fma(_611, _228, fma(_610, _235, _609 * _221));
    float _622 = fma(_611, _229, fma(_610, _236, _609 * _222));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3544 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _630 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3566 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3577 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3588 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _698 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _688);
    float _699 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _688);
    float _700 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _688);
    float _704 = inversesqrt(dot(vec3(_698, _699, _700), vec3(_698, _699, _700)));
    float _705 = _698 * _704;
    float _706 = _699 * _704;
    float _707 = _700 * _704;
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _738 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _741 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _755 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3599 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _779 = ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * TEXCOORD_5.w) * _775.x;
    float _780 = dot(vec3(_627, _628, _629), vec3(_705, _706, _707));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _627) - _705;
    float _788 = (_783 * _628) - _706;
    float _789 = (_783 * _629) - _707;
    float _793 = abs(dot(vec3(_705, _706, _707), vec3(_627, _628, _629)));
    float _3632 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_630);
    float _808 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1149;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _874 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _878 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _882 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _907 = _840 + _627;
        float _908 = _844 + _628;
        float _909 = _848 + _629;
        float _919 = fma(_909, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907)) - _874;
        float _920 = fma(_909, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907)) - _878;
        float _921 = fma(_909, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907)) - _882;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_874 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_878 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[34u].z) + ((((((_882 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _977 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_943.x + (-0.5));
        float _979 = _977 * (_943.y + (-0.5));
        float _980 = _977 * (_943.z + (-0.5));
        float _987 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_950.x + (-0.5));
        float _989 = _987 * (_950.y + (-0.5));
        float _990 = _987 * (_950.z + (-0.5));
        float _997 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_957.x + (-0.5));
        float _999 = _997 * (_957.y + (-0.5));
        float _1000 = _997 * (_957.z + (-0.5));
        float _1007 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_964.x + (-0.5));
        float _1009 = _1007 * (_964.y + (-0.5));
        float _1010 = _1007 * (_964.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1031 = (dot(vec3(_627, _628, _629), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1041 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3680 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1043 + 1.0))) + _1048) * _1011;
        float _1058 = _979 * 0.5;
        float _1059 = _989 * 0.5;
        float _1060 = _999 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_627, _628, _629), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3713 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1085 + 1.0))) + _1090) * _1012;
        float _1100 = _980 * 0.5;
        float _1101 = _990 * 0.5;
        float _1102 = _1000 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_627, _628, _629), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3746 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1127 + 1.0))) + _1132) * _1013;
        _1149 = _980;
        _1151 = _979;
        _1152 = _978;
        _1153 = _990;
        _1154 = _989;
        _1155 = _988;
        _1156 = _1000;
        _1157 = _999;
        _1158 = _998;
        _1159 = _1013;
        _1160 = _1012;
        _1161 = _1011;
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _1150;
        _1151 = _1150;
        _1152 = _1150;
        _1153 = _1150;
        _1154 = _1150;
        _1155 = _1150;
        _1156 = _1150;
        _1157 = _1150;
        _1158 = _1150;
        _1159 = _1150;
        _1160 = _1150;
        _1161 = _1150;
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1193 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1197 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1220 = _840 + _627;
        float _1221 = _844 + _628;
        float _1222 = _848 + _629;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_627, _628, _629), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3809 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_627, _628, _629), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3842 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_627, _628, _629), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3875 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1150;
        _1459 = _1150;
        _1460 = _1150;
        _1461 = _1150;
        _1462 = _1150;
        _1463 = _1150;
        _1464 = _1150;
        _1465 = _1150;
        _1466 = _1150;
        _1467 = _1150;
        _1468 = _1150;
        _1469 = _1150;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1162)) + _1162;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _787 * 0.5;
    float _1527 = _788 * 0.5;
    float _1528 = _789 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1149, _1153, _1156, _1159));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1657 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1660 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1688 = frontier_phi_14_12_ladder;
        }
        float _1891;
        if (_1657 > 0.0)
        {
            _1891 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1891 = frontier_phi_23_19_ladder;
        }
        float _2134;
        if (_1660 > 0.0)
        {
            _2134 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2134 = frontier_phi_35_30_ladder;
        }
        float _2136 = isnan(_1891) ? _1688 : (isnan(_1688) ? _1891 : min(_1688, _1891));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1654) + _1643;
        float _2142 = (_2137 * _1657) + _1647;
        float _2143 = (_2137 * _1660) + _1651;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2144;
        float _2148 = _2144 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 > _2148) || ((_2142 < _2146) || ((_2141 < _2146) || (_2141 > _2148))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_13_35_ladder = _2267.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2267.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2267.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_13_35_ladder_2;
        _1678 = frontier_phi_13_35_ladder_1;
        _1680 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1595);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1753 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1756 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1896;
        if (_1750 > 0.0)
        {
            _1896 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1896 = frontier_phi_25_21_ladder;
        }
        float _2161;
        if (_1753 > 0.0)
        {
            _2161 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2161 = frontier_phi_37_32_ladder;
        }
        float _2366;
        if (_1756 > 0.0)
        {
            _2366 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2366 = frontier_phi_46_43_ladder;
        }
        float _2368 = isnan(_2161) ? _1896 : (isnan(_1896) ? _2161 : min(_1896, _2161));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1750) + _1739;
        float _2374 = (_2369 * _1753) + _1743;
        float _2375 = (_2369 * _1756) + _1747;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2376;
        float _2379 = _2376 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2375 > _2379) || ((_2375 < _2377) || ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 < _2377) || (_2373 > _2379))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2375, cbModelParam._m0[17u].z, fma(_2374, cbModelParam._m0[17u].y, _2373 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2375, cbModelParam._m0[18u].z, fma(_2374, cbModelParam._m0[18u].y, _2373 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2375, cbModelParam._m0[19u].z, fma(_2374, cbModelParam._m0[19u].y, _2373 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_22_46_ladder = _2574.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2574.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2574.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_22_46_ladder_2;
        _1777 = frontier_phi_22_46_ladder_1;
        _1779 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1685);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1791 = ((((1.0 - _808) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_808 * _795)) * _779;
    float _1792 = _1791 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1793 = _1791 * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1794 = _1791 * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1823 = _779 + (-1.0);
    float _1828 = (cbLight._m0[_1816].x * _1823) + 1.0;
    float _1829 = (cbLight._m0[_1816].y * _1823) + 1.0;
    float _1830 = (cbLight._m0[_1816].z * _1823) + 1.0;
    float _1831 = (cbLight._m0[_1816].w * _1823) + 1.0;
    uint _1832 = _1815 + 5u;
    float _1838 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1842 = _1815 + 4u;
    float _1849 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1853 = _1815 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_627, _628, _629));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_627, _628, _629));
    float _4011 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4022 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1832].x * _1838) * _1874) + ((cbLight._m0[_1842].x * _1849) * _1872);
    float _1882 = ((_1838 * cbLight._m0[_1832].y) * _1874) + ((_1849 * cbLight._m0[_1842].y) * _1872);
    float _1883 = ((_1838 * cbLight._m0[_1832].z) * _1874) + ((_1849 * cbLight._m0[_1842].z) * _1872);
    uvec4 _1888 = floatBitsToUint(cbLight._m0[_1815 + 12u]);
    bool _1890 = _1888.x == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1890)
    {
        _1901 = _1881;
        _1903 = _1882;
        _1905 = _1883;
    }
    else
    {
        uint _1909 = _1815 + 6u;
        float _1925 = (dot(vec3(cbLight._m0[_1815 + 2u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _4033 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1928 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1901 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1881;
        _1903 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1882;
        _1905 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1883;
    }
    bool _1908 = _1888.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1908)
    {
        _1946 = _1901;
        _1948 = _1903;
        _1950 = _1905;
    }
    else
    {
        uint _2105 = _1815 + 7u;
        float _2121 = (dot(vec3(cbLight._m0[_1815 + 3u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4049 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2124 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1946 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _1901;
        _1948 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _1903;
        _1950 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _1905;
    }
    uint _1953 = _1815 + 8u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _630) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1815].x + _705;
    float _1969 = cbLight._m0[_1815].y + _706;
    float _1970 = cbLight._m0[_1815].z + _707;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1815].xyz));
    float _4065 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _1982 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1983 = dot(vec3(_627, _628, _629), vec3(_1975, _1976, _1977));
    float _4087 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_1975, _1976, _1977));
    float _4098 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1967 * _1967;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = 1.0 - _1967;
    float _2018 = (0.5 / (((_1982 * ((_1981 * _2007) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2007) + _1967) * _1981))) * _1981;
    float _4109 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    uint _2031 = _1815 + 9u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _630) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1853].x + _705;
    float _2045 = cbLight._m0[_1853].y + _706;
    float _2046 = cbLight._m0[_1853].z + _707;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1853].xyz));
    float _4120 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2058 = dot(vec3(_627, _628, _629), vec3(_2051, _2052, _2053));
    float _4131 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2051, _2052, _2053));
    float _4142 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2043 * _2043;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2043;
    float _2090 = (0.5 / (((_1982 * ((_2057 * _2080) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2080) + _2043) * _2057))) * _2057;
    float _4153 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    float _2102 = (((_2079 * cbLight._m0[_2031].x) * _2092) * _1838) + (((_2006 * cbLight._m0[_1953].x) * _2020) * _1849);
    float _2103 = (((_2079 * cbLight._m0[_2031].y) * _2092) * _1838) + (((_2006 * cbLight._m0[_1953].y) * _2020) * _1849);
    float _2104 = (((_2079 * cbLight._m0[_2031].z) * _2092) * _1838) + (((_2006 * cbLight._m0[_1953].z) * _2020) * _1849);
    float _2166;
    float _2168;
    float _2170;
    if (_1890)
    {
        _2166 = _2102;
        _2168 = _2103;
        _2170 = _2104;
    }
    else
    {
        uint _2172 = _1815 + 2u;
        uint _2176 = _1815 + 10u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _630) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _705;
        float _2193 = cbLight._m0[_2172].y + _706;
        float _2194 = cbLight._m0[_2172].z + _707;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2172].xyz));
        float _4164 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2206 = dot(vec3(_627, _628, _629), vec3(_2199, _2200, _2201));
        float _4175 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4186 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2228 = 1.0 - _2191;
        float _2238 = (0.5 / (((_1982 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2228) + _2191) * _2205))) * _2205;
        float _4197 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2166 = (((_2227 * cbLight._m0[_2176].x) * _2240) * _2241) + _2102;
        _2168 = (((_2227 * cbLight._m0[_2176].y) * _2240) * _2241) + _2103;
        _2170 = (((_2227 * cbLight._m0[_2176].z) * _2240) * _2241) + _2104;
    }
    float _2276;
    float _2278;
    float _2280;
    if (_1908)
    {
        _2276 = _2166;
        _2278 = _2168;
        _2280 = _2170;
    }
    else
    {
        uint _2287 = _1815 + 3u;
        uint _2291 = _1815 + 11u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _630) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _705;
        float _2308 = cbLight._m0[_2287].y + _706;
        float _2309 = cbLight._m0[_2287].z + _707;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2287].xyz));
        float _4213 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2321 = dot(vec3(_627, _628, _629), vec3(_2314, _2315, _2316));
        float _4224 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4235 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2343 = 1.0 - _2306;
        float _2353 = (0.5 / (((_1982 * ((_2320 * _2343) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2343) + _2306) * _2320))) * _2320;
        float _4246 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2276 = (((_2342 * cbLight._m0[_2291].x) * _2355) * _2356) + _2166;
        _2278 = (((_2342 * cbLight._m0[_2291].y) * _2355) * _2356) + _2168;
        _2280 = (((_2342 * cbLight._m0[_2291].z) * _2355) * _2356) + _2170;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1813.y == 0u)
    {
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2431;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2431;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2431;
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.x;
        uint _2458 = uint((float(_2446.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2447))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2447)));
        float _2468 = (log2(_2434 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2469 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        uint _2472 = uint(isnan(14.0) ? _2469 : (isnan(_2469) ? 14.0 : min(_2469, 14.0)));
        uvec4 _2477 = texelFetch(g_lightClusterGridBuffer, int(((_2472 << 2u) + (_2458 << 6u)) >> 2u));
        uint _2478 = _2477.x;
        uint _2479 = _2446.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2479 >> 4u) & 15u)) + 4294967295u) & _2478) == 0u) || ((_2479 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2739)
                {
                    frontier_phi_61_pred = _2723;
                    frontier_phi_61_pred_1 = _2728;
                    frontier_phi_61_pred_2 = _2727;
                    frontier_phi_61_pred_3 = _2726;
                    frontier_phi_61_pred_4 = _2725;
                    frontier_phi_61_pred_5 = _2724;
                }
                else
                {
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    uint _2853;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2738;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    for (;;)
                    {
                        uint _2857 = uint(findLSB(_2853)) + (_2729 << 5u);
                        uint _2854 = (_2853 + 4294967295u) & _2853;
                        uint _2859 = _2857 * 48u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 3u)).x));
                        uint _2879 = (_2857 * 48u) + 4u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2898 = (_2857 * 48u) + 8u;
                        vec3 _2909 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x));
                        float _2913 = _2873.x - _2432;
                        float _2914 = _2873.y - _2433;
                        float _2915 = _2873.z - _2434;
                        float _2916 = dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915));
                        float _2919 = inversesqrt(_2916);
                        float _2920 = _2919 * _2913;
                        float _2921 = _2919 * _2914;
                        float _2922 = _2919 * _2915;
                        float _2923 = dot(vec3(_735, _738, _741), vec3(_2920, _2921, _2922));
                        float _2928 = 1.0 - (_2916 * _2873.w);
                        float _4272 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2930 = sqrt(_2916) * _2892.w;
                        float _2933 = 1.39999997615814208984375 / (_2930 + 1.39999997615814208984375);
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2923) + _2934;
                        float _2940 = _2930 * _2930;
                        float _2944 = ((isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * _2929) / ((_2940 * 0.699999988079071044921875) + 1.0);
                        float _2948 = (-0.0) - _2432;
                        float _2949 = (-0.0) - _2433;
                        float _2950 = (-0.0) - _2434;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2965 = exp2(log2(1.0 / ((_2940 * 3.5) + 5.0)) * 0.25);
                        float _2966 = 1.0 - _795;
                        float _2973 = sqrt(1.0 - ((1.0 - (_2966 * _2966)) * (1.0 - (_2965 * _2965))));
                        float _2974 = _2973 * _2973;
                        float _2975 = _2974 * _2974;
                        float _2976 = _2955 + _2920;
                        float _2977 = _2956 + _2921;
                        float _2978 = _2957 + _2922;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2986 = dot(vec3(_735, _738, _741), vec3(_2955, _2956, _2957));
                        float _4288 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2990 = dot(vec3(_735, _738, _741), vec3(_2982 * _2976, _2982 * _2977, _2982 * _2978));
                        float _4299 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2997 = ((_2993 * _2993) * (_2975 + (-1.0))) + 1.0;
                        float _2998 = _2933 * _2974;
                        float _2999 = _2998 * _2998;
                        float _3002 = ((1.0 - _2999) * _2923) + _2999;
                        float _4310 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3004 = 1.0 - _2974;
                        float _3014 = (0.5 / (((_3003 * ((_2989 * _3004) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_3003 * _3004) + _2974) * _2989))) * _3003;
                        float _4321 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3025 = (((_2975 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_2997 * _2997) * ((_2940 * 2.1991131305694580078125) + 3.141590118408203125))) * _2929;
                        _2782 = (_2944 * _2892.x) + _2850;
                        _2783 = (_2944 * _2892.y) + _2851;
                        _2784 = (_2944 * _2892.z) + _2852;
                        _2779 = (_3025 * _2909.x) + _2847;
                        _2780 = (_3025 * _2909.y) + _2848;
                        _2781 = (_3025 * _2909.z) + _2849;
                        if (_2854 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2854;
                        }
                    }
                    frontier_phi_61_pred = _2779;
                    frontier_phi_61_pred_1 = _2784;
                    frontier_phi_61_pred_2 = _2783;
                    frontier_phi_61_pred_3 = _2782;
                    frontier_phi_61_pred_4 = _2781;
                    frontier_phi_61_pred_5 = _2780;
                }
                _2580 = frontier_phi_61_pred;
                _2590 = frontier_phi_61_pred_1;
                _2588 = frontier_phi_61_pred_2;
                _2586 = frontier_phi_61_pred_3;
                _2584 = frontier_phi_61_pred_4;
                _2582 = frontier_phi_61_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2580;
                    _2724 = _2582;
                    _2725 = _2584;
                    _2726 = _2586;
                    _2727 = _2588;
                    _2728 = _2590;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2596) & _2478) == 0u)
        {
            _2691 = _2579;
            _2693 = _2581;
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
            float _2717 = _2716 * _2432;
            float _2718 = _2716 * _2433;
            float _2719 = _2716 * _2434;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2830 = _2579;
                float _2831 = _2581;
                float _2832 = _2583;
                float _2833 = _2585;
                float _2834 = _2587;
                float _2835 = _2589;
                uint _2836 = _2596;
                uint _2845;
                bool _2846;
                for (;;)
                {
                    _2845 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                    _2846 = _2845 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2846)
                    {
                        frontier_phi_67_pred = _2833;
                        frontier_phi_67_pred_1 = _2834;
                        frontier_phi_67_pred_2 = _2835;
                        frontier_phi_67_pred_3 = _2832;
                        frontier_phi_67_pred_4 = _2831;
                        frontier_phi_67_pred_5 = _2830;
                    }
                    else
                    {
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        uint _3049 = _2845;
                        uint _3050;
                        vec4 _3075;
                        float _3076;
                        vec4 _3091;
                        vec3 _3103;
                        vec4 _3119;
                        vec4 _3134;
                        float _3180;
                        bool _3181;
                        for (;;)
                        {
                            uint _3060 = ((_2836 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3049));
                            _3050 = (_3049 + 4294967295u) & _3049;
                            uint _3062 = _3060 * 40u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3076 = _3075.w;
                            uint _3078 = (_3060 * 40u) + 4u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3060 * 40u) + 8u;
                            _3103 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x));
                            uint _3106 = (_3060 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3060 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3060 * 40u) + 24u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3155 = (_3060 * 40u) + 28u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3180 = fma(_2434, _3168.z, fma(_2433, _3168.y, _3168.x * _2432)) + _3168.w;
                            _3181 = !((fma(_2434, _3149.z, fma(_2433, _3149.y, _3149.x * _2432)) + _3149.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3181)
                            {
                                float _3208 = _3075.x - _2432;
                                float _3209 = _3075.y - _2433;
                                float _3210 = _3075.z - _2434;
                                float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                                float _3214 = inversesqrt(_3211);
                                float _3215 = _3214 * _3208;
                                float _3216 = _3214 * _3209;
                                float _3217 = _3214 * _3210;
                                float _3221 = 1.0 - (_3211 / (_3076 * _3076));
                                float _4332 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3226 = sqrt(_3211) * _3091.w;
                                float _3228 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                                float _3229 = _3228 * _3228;
                                float _3232 = ((1.0 - _3229) * dot(vec3(_3215, _3216, _3217), vec3(_735, _738, _741))) + _3229;
                                float _3235 = _3226 * _3226;
                                float _3239 = (fma(_2434, _3119.z, fma(_2433, _3119.y, _3119.x * _2432)) + _3119.w) / _3180;
                                float _3240 = (fma(_2434, _3134.z, fma(_2433, _3134.y, _3134.x * _2432)) + _3134.w) / _3180;
                                float _3244 = 1.0 - dot(vec2(_3239, _3240), vec2(_3239, _3240));
                                float _4348 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3246 = _3245 * (((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3222) / ((_3235 * 0.699999988079071044921875) + 1.0));
                                float _3258 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                                float _3259 = 1.0 - _795;
                                float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                                float _3267 = _3266 * _3266;
                                float _3268 = _3267 * _3267;
                                float _3269 = _3215 - _2717;
                                float _3270 = _3216 - _2718;
                                float _3271 = _3217 - _2719;
                                float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                                float _3279 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4359 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3283 = dot(vec3(_735, _738, _741), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                                float _4370 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                                float _3291 = _3228 * _3267;
                                float _3292 = _3291 * _3291;
                                float _3298 = ((1.0 - _3292) * dot(vec3(_735, _738, _741), vec3(_3215, _3216, _3217))) + _3292;
                                float _4381 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3300 = 1.0 - _3267;
                                float _3310 = (0.5 / (((_3299 * ((_3282 * _3300) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3267) * _3282))) * _3299;
                                float _4392 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3320 = (_3245 * _3222) * (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3290 * _3290) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3320 * _3103.x;
                                frontier_phi_73_pred_1 = _3320 * _3103.y;
                                frontier_phi_73_pred_2 = _3246 * _3091.z;
                                frontier_phi_73_pred_3 = _3246 * _3091.y;
                                frontier_phi_73_pred_4 = _3246 * _3091.x;
                                frontier_phi_73_pred_5 = _3320 * _3103.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3324 = frontier_phi_73_pred;
                            _3325 = frontier_phi_73_pred_1;
                            _3329 = frontier_phi_73_pred_2;
                            _3328 = frontier_phi_73_pred_3;
                            _3327 = frontier_phi_73_pred_4;
                            _3326 = frontier_phi_73_pred_5;
                            _3033 = _3327 + _3046;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3030 = _3324 + _3043;
                            _3031 = _3325 + _3044;
                            _3032 = _3326 + _3045;
                            if (_3050 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3050;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3033;
                        frontier_phi_67_pred_1 = _3034;
                        frontier_phi_67_pred_2 = _3035;
                        frontier_phi_67_pred_3 = _3032;
                        frontier_phi_67_pred_4 = _3031;
                        frontier_phi_67_pred_5 = _3030;
                    }
                    _2698 = frontier_phi_67_pred;
                    _2700 = frontier_phi_67_pred_1;
                    _2702 = frontier_phi_67_pred_2;
                    _2696 = frontier_phi_67_pred_3;
                    _2694 = frontier_phi_67_pred_4;
                    _2692 = frontier_phi_67_pred_5;
                    uint _2837 = _2836 + 1u;
                    if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2830 = _2692;
                        _2831 = _2694;
                        _2832 = _2696;
                        _2833 = _2698;
                        _2834 = _2700;
                        _2835 = _2702;
                        _2836 = _2837;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2700;
                frontier_phi_55_56_ladder_1 = _2702;
                frontier_phi_55_56_ladder_2 = _2698;
                frontier_phi_55_56_ladder_3 = _2696;
                frontier_phi_55_56_ladder_4 = _2694;
                frontier_phi_55_56_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_55_56_ladder = _2587;
                frontier_phi_55_56_ladder_1 = _2589;
                frontier_phi_55_56_ladder_2 = _2585;
                frontier_phi_55_56_ladder_3 = _2583;
                frontier_phi_55_56_ladder_4 = _2581;
                frontier_phi_55_56_ladder_5 = _2579;
            }
            _2691 = frontier_phi_55_56_ladder_5;
            _2693 = frontier_phi_55_56_ladder_4;
            _2695 = frontier_phi_55_56_ladder_3;
            _2697 = frontier_phi_55_56_ladder_2;
            _2699 = frontier_phi_55_56_ladder;
            _2701 = frontier_phi_55_56_ladder_1;
        }
        float _2706 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2491 = (_2706 * _2697) + _1946;
        _2493 = (_2706 * _2699) + _1948;
        _2495 = (_2706 * _2701) + _1950;
        _2497 = ((_2691 * 0.039999999105930328369140625) * _2706) + _2276;
        _2499 = ((_2693 * 0.039999999105930328369140625) * _2706) + _2278;
        _2501 = ((_2695 * 0.039999999105930328369140625) * _2706) + _2280;
    }
    else
    {
        _2491 = _1946;
        _2493 = _1948;
        _2495 = _1950;
        _2497 = _2276;
        _2499 = _2278;
        _2501 = _2280;
    }
    float _4408 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4419 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4430 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    uint _2521 = _239 + 6u;
    float _2529 = _713 / cbSceneParam._m0[86u].x;
    float _2530 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2544 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2546 = _2544.x;
    float _2547 = _2544.y;
    float _2548 = _2544.z;
    float _2549 = _2544.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2605 = _2604 / _648;
        float _2616 = _2605 * _698;
        float _2617 = _699 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2619 = _2605 * _700;
        float _2621 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2617;
        float _2629 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2792;
        if (abs((_2618 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2792 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2754 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2792 = ((abs(_2629 / _2618) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2639 * _2763) - exp2(_2639 * _2764)) * _2752))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2794 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, 1.0), 0.0);
        float _2803 = exp2((_2792 * (-1.44269502162933349609375)) * (1.0 - _2794.w));
        float _2804 = log2(_2803);
        float _2820 = log2(_2549);
        _2641 = (exp2(_2820 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].x)) * _2794.x) / cbSceneParam._m0[78u].x)) + _2546;
        _2643 = (exp2(_2820 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].y)) * _2794.y) / cbSceneParam._m0[78u].y)) + _2547;
        _2645 = (exp2(_2820 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].z)) * _2794.z) / cbSceneParam._m0[78u].z)) + _2548;
        _2647 = _2803 * _2549;
    }
    else
    {
        _2641 = _2546;
        _2643 = _2547;
        _2645 = _2548;
        _2647 = _2549;
    }
    float _2659 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2660 = _2659 == 3.0;
    float _2661 = log2(_2647);
    float _2668 = exp2(_2661 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2491 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _779))) + ((_2497 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2669 = exp2(_2661 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2493 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _779))) + ((_2499 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2670 = exp2(_2661 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2495 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _779))) + ((_2501 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2679 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2679 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.y = _2679 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.z = _2679 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.w = cbInstanceData._m0[_2521].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2521].w;
}


