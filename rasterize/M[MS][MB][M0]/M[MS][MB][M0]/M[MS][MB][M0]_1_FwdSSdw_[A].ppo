#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _860;
float _3252;
float _3253;
float _3254;
float _3255;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _256 = _252.z;
    float _261 = (_252.x * 2.0) + (-1.0);
    float _263 = (_252.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3264 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))));
    float _275 = cbMtdParam._m0[22u].x + _252.w;
    float _278 = fma(_270, _201 * NORMAL.x, fma(_263, _208 * TANGENT.x, (_194 * _186) * _261));
    float _281 = fma(_270, _201 * NORMAL.y, fma(_263, _208 * TANGENT.y, (_194 * _187) * _261));
    float _284 = fma(_270, _201 * NORMAL.z, fma(_263, _208 * TANGENT.z, (_194 * _188) * _261));
    float _288 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    float _289 = _288 * _278;
    float _290 = _288 * _281;
    float _291 = _288 * _284;
    float _3275 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _292 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3297 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3308 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3319 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _312 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _539 = sqrt(((_364 * _364) + (_365 * _365)) + (_366 * _366));
        float _545 = (cbMatDynParam._m0[5u].x * _539) + cbMatDynParam._m0[5u].y;
        float _3330 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
        float _546 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _550 = (cbMatDynParam._m0[5u].z * _539) + cbMatDynParam._m0[5u].w;
        float _3341 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) - _546)) + _546) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _392 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _393 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_291, cbSceneParam._m0[5u].z, fma(_290, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _289));
    float _416 = fma(_291, cbSceneParam._m0[6u].z, fma(_290, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _289));
    float _419 = fma(_291, cbSceneParam._m0[7u].z, fma(_290, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _289));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3352 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    vec4 _455 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _392, cbSceneParam._m0[86u].y * _393));
    float _459 = ((isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * TEXCOORD_5.w) * _455.x;
    float _460 = dot(vec3(_289, _290, _291), vec3(_371, _372, _373));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _289) - _371;
    float _468 = (_463 * _290) - _372;
    float _469 = (_463 * _291) - _373;
    float _473 = abs(dot(vec3(_371, _372, _373), vec3(_289, _290, _291)));
    float _3385 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _475 = sqrt(_292);
    float _488 = exp2((_475 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_475 * 3.0));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _859;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = fma(_528, cbModelParam._m0[26u].z, fma(_524, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _520));
        float _588 = fma(_528, cbModelParam._m0[27u].z, fma(_524, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _520));
        float _592 = fma(_528, cbModelParam._m0[28u].z, fma(_524, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _520));
        float _617 = _520 + _289;
        float _618 = _524 + _290;
        float _619 = _528 + _291;
        float _629 = fma(_619, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _617)) - _584;
        float _630 = fma(_619, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _617)) - _588;
        float _631 = fma(_619, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _617)) - _592;
        float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
        float _648 = ((_635 * _629) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_584 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_635 * _630) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_588 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_635 * _631) / cbModelParam._m0[34u].z) + ((((((_592 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        float _687 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_653.x + (-0.5));
        float _689 = _687 * (_653.y + (-0.5));
        float _690 = _687 * (_653.z + (-0.5));
        float _697 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_660.x + (-0.5));
        float _699 = _697 * (_660.y + (-0.5));
        float _700 = _697 * (_660.z + (-0.5));
        float _707 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_667.x + (-0.5));
        float _709 = _707 * (_667.y + (-0.5));
        float _710 = _707 * (_667.z + (-0.5));
        float _717 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_674.x + (-0.5));
        float _719 = _717 * (_674.y + (-0.5));
        float _720 = _717 * (_674.z + (-0.5));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = _688 * 0.5;
        float _725 = _698 * 0.5;
        float _726 = _708 * 0.5;
        float _727 = dot(vec3(_724, _725, _726), vec3(_724, _725, _726));
        float _732 = (_727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_727);
        float _741 = (dot(vec3(_289, _290, _291), vec3(_732 * _724, _732 * _725, _732 * _726)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _751 = sqrt(((_725 * _725) + (_724 * _724)) + (_726 * _726)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3433 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_753 + 1.0))) + _758) * _721;
        float _768 = _689 * 0.5;
        float _769 = _699 * 0.5;
        float _770 = _709 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_289, _290, _291), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3466 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_795 + 1.0))) + _800) * _722;
        float _810 = _690 * 0.5;
        float _811 = _700 * 0.5;
        float _812 = _710 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_289, _290, _291), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3499 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_837 + 1.0))) + _842) * _723;
        _859 = _690;
        _861 = _689;
        _862 = _688;
        _863 = _700;
        _864 = _699;
        _865 = _698;
        _866 = _710;
        _867 = _709;
        _868 = _708;
        _869 = _723;
        _870 = _722;
        _871 = _721;
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
    }
    else
    {
        _859 = _860;
        _861 = _860;
        _862 = _860;
        _863 = _860;
        _864 = _860;
        _865 = _860;
        _866 = _860;
        _867 = _860;
        _868 = _860;
        _869 = _860;
        _870 = _860;
        _871 = _860;
        _872 = 0.0;
        _873 = 0.0;
        _874 = 0.0;
    }
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _902 = fma(_528, cbModelParam._m0[30u].z, fma(_524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _520));
        float _906 = fma(_528, cbModelParam._m0[31u].z, fma(_524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _520));
        float _910 = fma(_528, cbModelParam._m0[32u].z, fma(_524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _520));
        float _933 = _520 + _289;
        float _934 = _524 + _290;
        float _935 = _528 + _291;
        float _945 = fma(_935, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933)) - _902;
        float _946 = fma(_935, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933)) - _906;
        float _947 = fma(_935, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933)) - _910;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_902 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_906 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[35u].z) + ((((((_910 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1001 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_968.x + (-0.5));
        float _1003 = _1001 * (_968.y + (-0.5));
        float _1004 = _1001 * (_968.z + (-0.5));
        float _1011 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_975.x + (-0.5));
        float _1013 = _1011 * (_975.y + (-0.5));
        float _1014 = _1011 * (_975.z + (-0.5));
        float _1021 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_982.x + (-0.5));
        float _1023 = _1021 * (_982.y + (-0.5));
        float _1024 = _1021 * (_982.z + (-0.5));
        float _1031 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_989.x + (-0.5));
        float _1033 = _1031 * (_989.y + (-0.5));
        float _1034 = _1031 * (_989.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_289, _290, _291), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3562 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1065 + 1.0))) + _1070) * _1035;
        float _1080 = _1003 * 0.5;
        float _1081 = _1013 * 0.5;
        float _1082 = _1023 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_289, _290, _291), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3595 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1107 + 1.0))) + _1112) * _1036;
        float _1122 = _1004 * 0.5;
        float _1123 = _1014 * 0.5;
        float _1124 = _1024 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_289, _290, _291), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3628 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1149 + 1.0))) + _1154) * _1037;
        _1171 = _1004;
        _1172 = _1003;
        _1173 = _1002;
        _1174 = _1014;
        _1175 = _1013;
        _1176 = _1012;
        _1177 = _1024;
        _1178 = _1023;
        _1179 = _1022;
        _1180 = _1037;
        _1181 = _1036;
        _1182 = _1035;
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _860;
        _1172 = _860;
        _1173 = _860;
        _1174 = _860;
        _1175 = _860;
        _1176 = _860;
        _1177 = _860;
        _1178 = _860;
        _1179 = _860;
        _1180 = _860;
        _1181 = _860;
        _1182 = _860;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _872)) + _872;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _873)) + _873;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _874)) + _874;
    float _1218 = fma(_1197, cbSceneParam._m0[89u].z, fma(_1196, cbSceneParam._m0[89u].y, _1195 * cbSceneParam._m0[89u].x));
    float _1221 = fma(_1197, cbSceneParam._m0[90u].z, fma(_1196, cbSceneParam._m0[90u].y, _1195 * cbSceneParam._m0[90u].x));
    float _1224 = fma(_1197, cbSceneParam._m0[91u].z, fma(_1196, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1195));
    float _1239 = _467 * 0.5;
    float _1240 = _468 * 0.5;
    float _1241 = _469 * 0.5;
    float _1242 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1245 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1248 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1282;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1255 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_859, _863, _866, _869));
        float _1259 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_861, _864, _867, _870));
        float _1263 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_862, _865, _868, _871));
        float _1270 = dot(vec4(cbModelParam._m0[39u]), vec4(_1239, _1240, _1241, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1293;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1284 = dot(vec4(cbModelParam._m0[40u]), vec4(_1239, _1240, _1241, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1297 = (_1293 * cbModelParam._m0[1u].x) + (_1282 * (1.0 - cbModelParam._m0[1u].x));
    float _1307 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _292);
    float _1308 = isnan(_1307) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1307 : min(cbModelParam._m0[25u].z, _1307));
    float _1390;
    float _1392;
    float _1394;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1357 = fma(_528, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520)) + cbModelParam._m0[13u].w;
        float _1361 = fma(_528, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520)) + cbModelParam._m0[14u].w;
        float _1365 = fma(_528, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520)) + cbModelParam._m0[15u].w;
        float _1368 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1371 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1374 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1402;
        if (_1368 > 0.0)
        {
            _1402 = abs((1.0 - _1357) / _1368);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1357 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1402 = frontier_phi_17_15_ladder;
        }
        float _1628;
        if (_1371 > 0.0)
        {
            _1628 = abs((1.0 - _1361) / _1371);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1361 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1628 = frontier_phi_26_22_ladder;
        }
        float _1874;
        if (_1374 > 0.0)
        {
            _1874 = abs((1.0 - _1365) / _1374);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1365 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1874 = frontier_phi_38_33_ladder;
        }
        float _1876 = isnan(_1628) ? _1402 : (isnan(_1402) ? _1628 : min(_1402, _1628));
        float _1877 = isnan(_1874) ? _1876 : (isnan(_1876) ? _1874 : min(_1876, _1874));
        float _1881 = (_1877 * _1368) + _1357;
        float _1882 = (_1877 * _1371) + _1361;
        float _1883 = (_1877 * _1374) + _1365;
        float _1884 = _1877 * 9.9999997473787516355514526367188e-05;
        float _1886 = (-1.0) - _1884;
        float _1888 = _1884 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1883 > _1888) || ((_1883 < _1886) || ((_1882 > _1888) || ((_1882 < _1886) || ((_1881 < _1886) || (_1881 > _1888))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1883, cbModelParam._m0[9u].z, fma(_1882, cbModelParam._m0[9u].y, _1881 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1883, cbModelParam._m0[10u].z, fma(_1882, cbModelParam._m0[10u].y, _1881 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1883, cbModelParam._m0[11u].z, fma(_1882, cbModelParam._m0[11u].y, _1881 * cbModelParam._m0[11u].x))), _1308);
            frontier_phi_16_38_ladder = _2007.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2007.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2007.x * cbModelParam._m0[1u].y;
        }
        _1390 = frontier_phi_16_38_ladder_2;
        _1392 = frontier_phi_16_38_ladder_1;
        _1394 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1308);
        _1390 = _1378.x * cbModelParam._m0[1u].y;
        _1392 = _1378.y * cbModelParam._m0[1u].y;
        _1394 = _1378.z * cbModelParam._m0[1u].y;
    }
    float _1398 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _292);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1398 : min(cbModelParam._m0[25u].w, _1398));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_528, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_528, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_528, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1469 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1472 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1633;
        if (_1466 > 0.0)
        {
            _1633 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_28_24_ladder;
        }
        float _1901;
        if (_1469 > 0.0)
        {
            _1901 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1901 = frontier_phi_40_35_ladder;
        }
        float _2106;
        if (_1472 > 0.0)
        {
            _2106 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2106 = frontier_phi_49_46_ladder;
        }
        float _2108 = isnan(_1901) ? _1633 : (isnan(_1633) ? _1901 : min(_1633, _1901));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1466) + _1455;
        float _2114 = (_2109 * _1469) + _1459;
        float _2115 = (_2109 * _1472) + _1463;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2116;
        float _2119 = _2116 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2115 > _2119) || ((_2115 < _2117) || ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 < _2117) || (_2113 > _2119))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2115, cbModelParam._m0[17u].z, fma(_2114, cbModelParam._m0[17u].y, _2113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2115, cbModelParam._m0[18u].z, fma(_2114, cbModelParam._m0[18u].y, _2113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2115, cbModelParam._m0[19u].z, fma(_2114, cbModelParam._m0[19u].y, _2113 * cbModelParam._m0[19u].x))), _1399);
            frontier_phi_25_49_ladder = _2314.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2314.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2314.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_25_49_ladder_2;
        _1493 = frontier_phi_25_49_ladder_1;
        _1495 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1399);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1507 = ((((1.0 - _488) * ((_475 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_488 * _475)) * _459;
    float _1508 = _1507 * ((cbModelParam._m0[1u].w * (_1491 - _1390)) + _1390);
    float _1509 = _1507 * ((cbModelParam._m0[1u].w * (_1493 - _1392)) + _1392);
    float _1510 = _1507 * ((cbModelParam._m0[1u].w * (_1495 - _1394)) + _1394);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    vec4 _1527 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_392, _393));
    float _1529 = _1527.w;
    float _1541 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1529);
    float _1542 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1529);
    float _1543 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1529);
    uvec4 _1547 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1549 = _1547.x * 14u;
    uint _1550 = _1549 + 13u;
    float _1557 = _459 + (-1.0);
    float _1562 = (cbLight._m0[_1550].x * _1557) + 1.0;
    float _1563 = (cbLight._m0[_1550].y * _1557) + 1.0;
    float _1564 = (cbLight._m0[_1550].z * _1557) + 1.0;
    float _1565 = (cbLight._m0[_1550].w * _1557) + 1.0;
    uint _1566 = _1549 + 5u;
    float _1572 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
    uint _1576 = _1549 + 4u;
    float _1586 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
    uint _1590 = _1549 | 1u;
    float _1601 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_289, _290, _291));
    float _1604 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_289, _290, _291));
    float _3764 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _3775 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1609 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.3183098733425140380859375;
    float _1611 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1618 = ((cbLight._m0[_1566].x * _1572) * _1611) + (((cbLight._m0[_1576].x * _1541) * _1586) * _1609);
    float _1619 = ((_1572 * cbLight._m0[_1566].y) * _1611) + (((cbLight._m0[_1576].y * _1542) * _1586) * _1609);
    float _1620 = ((_1572 * cbLight._m0[_1566].z) * _1611) + (((cbLight._m0[_1576].z * _1543) * _1586) * _1609);
    uvec4 _1625 = floatBitsToUint(cbLight._m0[_1549 + 12u]);
    bool _1627 = _1625.x == 0u;
    float _1638;
    float _1640;
    float _1642;
    if (_1627)
    {
        _1638 = _1618;
        _1640 = _1619;
        _1642 = _1620;
    }
    else
    {
        uint _1646 = _1549 + 6u;
        float _1662 = (dot(vec3(cbLight._m0[_1549 + 2u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1663 = _1662 * _1662;
        float _3786 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1665 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _1638 = (((cbLight._m0[_1646].x * 0.3183098733425140380859375) * _1664) * _1665) + _1618;
        _1640 = (((cbLight._m0[_1646].y * 0.3183098733425140380859375) * _1664) * _1665) + _1619;
        _1642 = (((cbLight._m0[_1646].z * 0.3183098733425140380859375) * _1664) * _1665) + _1620;
    }
    bool _1645 = _1625.y == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1645)
    {
        _1683 = _1638;
        _1685 = _1640;
        _1687 = _1642;
    }
    else
    {
        uint _1845 = _1549 + 7u;
        float _1861 = (dot(vec3(cbLight._m0[_1549 + 3u].xyz), vec3(_289, _290, _291)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _3802 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1864 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1683 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1638;
        _1685 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1640;
        _1687 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1642;
    }
    uint _1690 = _1549 + 8u;
    float _1703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1549].w)) * _292) * 0.949999988079071044921875);
    float _1704 = _1703 * _1703;
    float _1705 = cbLight._m0[_1549].x + _371;
    float _1706 = cbLight._m0[_1549].y + _372;
    float _1707 = cbLight._m0[_1549].z + _373;
    float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
    float _1712 = _1711 * _1705;
    float _1713 = _1711 * _1706;
    float _1714 = _1711 * _1707;
    float _1715 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1549].xyz));
    float _3818 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1718 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1719 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1720 = dot(vec3(_289, _290, _291), vec3(_1712, _1713, _1714));
    float _3840 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1724 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_1712, _1713, _1714));
    float _3851 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1728 = _1704 * _1704;
    float _1732 = ((_1723 * _1723) * (_1728 + (-1.0))) + 1.0;
    float _1743 = (exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1744 = 1.0 - _1704;
    float _1755 = (0.5 / (((_1719 * ((_1718 * _1744) + _1704)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1744) + _1704) * _1718))) * _1718;
    float _3862 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1757 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1728 / ((_1732 * _1732) * 3.141590118408203125));
    uint _1771 = _1549 + 9u;
    float _1782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _292) * 0.949999988079071044921875);
    float _1783 = _1782 * _1782;
    float _1784 = cbLight._m0[_1590].x + _371;
    float _1785 = cbLight._m0[_1590].y + _372;
    float _1786 = cbLight._m0[_1590].z + _373;
    float _1790 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
    float _1791 = _1790 * _1784;
    float _1792 = _1790 * _1785;
    float _1793 = _1790 * _1786;
    float _1794 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1590].xyz));
    float _3873 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1798 = dot(vec3(_289, _290, _291), vec3(_1791, _1792, _1793));
    float _3884 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1791, _1792, _1793));
    float _3895 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1783 * _1783;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1819 = (exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1820 = 1.0 - _1783;
    float _1830 = (0.5 / (((_1719 * ((_1797 * _1820) + _1783)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1820) + _1783) * _1797))) * _1797;
    float _3906 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1832 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    float _1842 = (((_1819 * cbLight._m0[_1771].x) * _1832) * _1572) + ((((cbLight._m0[_1690].x * _1541) * _1743) * _1757) * _1586);
    float _1843 = (((_1819 * cbLight._m0[_1771].y) * _1832) * _1572) + ((((cbLight._m0[_1690].y * _1542) * _1743) * _1757) * _1586);
    float _1844 = (((_1819 * cbLight._m0[_1771].z) * _1832) * _1572) + ((((cbLight._m0[_1690].z * _1543) * _1743) * _1757) * _1586);
    float _1906;
    float _1908;
    float _1910;
    if (_1627)
    {
        _1906 = _1842;
        _1908 = _1843;
        _1910 = _1844;
    }
    else
    {
        uint _1912 = _1549 + 2u;
        uint _1916 = _1549 + 10u;
        float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _292) * 0.949999988079071044921875);
        float _1931 = _1930 * _1930;
        float _1932 = cbLight._m0[_1912].x + _371;
        float _1933 = cbLight._m0[_1912].y + _372;
        float _1934 = cbLight._m0[_1912].z + _373;
        float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
        float _1939 = _1938 * _1932;
        float _1940 = _1938 * _1933;
        float _1941 = _1938 * _1934;
        float _1942 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_1912].xyz));
        float _3917 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1945 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1946 = dot(vec3(_289, _290, _291), vec3(_1939, _1940, _1941));
        float _3928 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1949 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1950 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_1939, _1940, _1941));
        float _3939 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1954 = _1931 * _1931;
        float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
        float _1967 = (exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1968 = 1.0 - _1931;
        float _1978 = (0.5 / (((_1719 * ((_1945 * _1968) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1968) + _1931) * _1945))) * _1945;
        float _3950 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1980 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
        float _1981 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _1906 = (((_1967 * cbLight._m0[_1916].x) * _1980) * _1981) + _1842;
        _1908 = (((_1967 * cbLight._m0[_1916].y) * _1980) * _1981) + _1843;
        _1910 = (((_1967 * cbLight._m0[_1916].z) * _1980) * _1981) + _1844;
    }
    float _2016;
    float _2018;
    float _2020;
    if (_1645)
    {
        _2016 = _1906;
        _2018 = _1908;
        _2020 = _1910;
    }
    else
    {
        uint _2027 = _1549 + 3u;
        uint _2031 = _1549 + 11u;
        float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _292) * 0.949999988079071044921875);
        float _2046 = _2045 * _2045;
        float _2047 = cbLight._m0[_2027].x + _371;
        float _2048 = cbLight._m0[_2027].y + _372;
        float _2049 = cbLight._m0[_2027].z + _373;
        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
        float _2054 = _2053 * _2047;
        float _2055 = _2053 * _2048;
        float _2056 = _2053 * _2049;
        float _2057 = dot(vec3(_289, _290, _291), vec3(cbLight._m0[_2027].xyz));
        float _3966 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2061 = dot(vec3(_289, _290, _291), vec3(_2054, _2055, _2056));
        float _3977 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2065 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2054, _2055, _2056));
        float _3988 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2069 = _2046 * _2046;
        float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
        float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2083 = 1.0 - _2046;
        float _2093 = (0.5 / (((_1719 * ((_2060 * _2083) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _2083) + _2046) * _2060))) * _2060;
        float _3999 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _2016 = (((_2082 * cbLight._m0[_2031].x) * _2095) * _2096) + _1906;
        _2018 = (((_2082 * cbLight._m0[_2031].y) * _2095) * _2096) + _1908;
        _2020 = (((_2082 * cbLight._m0[_2031].z) * _2095) * _2096) + _1910;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1547.y == 0u)
    {
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2171;
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2171;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2171;
        uvec4 _2186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2187 = _2186.x;
        uint _2198 = uint((float(_2186.y) * floor(float(uint(cbSceneParam._m0[85u].y * _393) / _2187))) + floor(float(uint(cbSceneParam._m0[85u].x * _392) / _2187)));
        float _2208 = (log2(_2174 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2209 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        uint _2212 = uint(isnan(14.0) ? _2209 : (isnan(_2209) ? 14.0 : min(_2209, 14.0)));
        uvec4 _2217 = texelFetch(g_lightClusterGridBuffer, int(((_2212 << 2u) + (_2198 << 6u)) >> 2u));
        uint _2218 = _2217.x;
        uint _2219 = _2186.z;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        if (((((1u << ((_2219 >> 4u) & 15u)) + 4294967295u) & _2218) == 0u) || ((_2219 & 240u) == 0u))
        {
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
        }
        else
        {
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2212 << 5u) + (_2198 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2488)
                {
                    frontier_phi_66_pred = _2472;
                    frontier_phi_66_pred_1 = _2477;
                    frontier_phi_66_pred_2 = _2476;
                    frontier_phi_66_pred_3 = _2475;
                    frontier_phi_66_pred_4 = _2474;
                    frontier_phi_66_pred_5 = _2473;
                }
                else
                {
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    uint _2623;
                    _2617 = _2472;
                    _2618 = _2473;
                    _2619 = _2474;
                    _2620 = _2475;
                    _2621 = _2476;
                    _2622 = _2477;
                    _2623 = _2487;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2627 = uint(findLSB(_2623)) + (_2478 << 5u);
                        uint _2624 = (_2623 + 4294967295u) & _2623;
                        uint _2629 = _2627 * 48u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 3u)).x));
                        uint _2649 = (_2627 * 48u) + 4u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2668 = (_2627 * 48u) + 8u;
                        vec3 _2679 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x));
                        float _2683 = _2643.x - _2172;
                        float _2684 = _2643.y - _2173;
                        float _2685 = _2643.z - _2174;
                        float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                        float _2689 = inversesqrt(_2686);
                        float _2690 = _2689 * _2683;
                        float _2691 = _2689 * _2684;
                        float _2692 = _2689 * _2685;
                        float _2693 = dot(vec3(_413, _416, _419), vec3(_2690, _2691, _2692));
                        float _2698 = 1.0 - (_2686 * _2643.w);
                        float _4025 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2699 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2700 = sqrt(_2686) * _2662.w;
                        float _2703 = 1.39999997615814208984375 / (_2700 + 1.39999997615814208984375);
                        float _2704 = _2703 * _2703;
                        float _2707 = ((1.0 - _2704) * _2693) + _2704;
                        float _2710 = _2700 * _2700;
                        float _2714 = ((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2699) / ((_2710 * 0.699999988079071044921875) + 1.0);
                        float _2718 = (-0.0) - _2172;
                        float _2719 = (-0.0) - _2173;
                        float _2720 = (-0.0) - _2174;
                        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2735 = exp2(log2(1.0 / ((_2710 * 3.5) + 5.0)) * 0.25);
                        float _2736 = 1.0 - _475;
                        float _2743 = sqrt(1.0 - ((1.0 - (_2736 * _2736)) * (1.0 - (_2735 * _2735))));
                        float _2744 = _2743 * _2743;
                        float _2745 = _2744 * _2744;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2748 = _2727 + _2692;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2756 = dot(vec3(_413, _416, _419), vec3(_2725, _2726, _2727));
                        float _4041 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2759 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2760 = dot(vec3(_413, _416, _419), vec3(_2752 * _2746, _2752 * _2747, _2752 * _2748));
                        float _4052 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2767 = ((_2763 * _2763) * (_2745 + (-1.0))) + 1.0;
                        float _2768 = _2703 * _2744;
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2693) + _2769;
                        float _4063 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2774 = 1.0 - _2744;
                        float _2784 = (0.5 / (((_2773 * ((_2759 * _2774) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2773 * _2774) + _2744) * _2759))) * _2773;
                        float _4074 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2795 = (((_2745 * 3.1415927410125732421875) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) / ((_2767 * _2767) * ((_2710 * 2.1991131305694580078125) + 3.141590118408203125))) * _2699;
                        _2547 = (_2714 * _2662.x) + _2620;
                        _2548 = (_2714 * _2662.y) + _2621;
                        _2549 = (_2714 * _2662.z) + _2622;
                        _2544 = (_2795 * _2679.x) + _2617;
                        _2545 = (_2795 * _2679.y) + _2618;
                        _2546 = (_2795 * _2679.z) + _2619;
                        if (_2624 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2617 = _2544;
                            _2618 = _2545;
                            _2619 = _2546;
                            _2620 = _2547;
                            _2621 = _2548;
                            _2622 = _2549;
                            _2623 = _2624;
                        }
                    }
                    frontier_phi_66_pred = _2544;
                    frontier_phi_66_pred_1 = _2549;
                    frontier_phi_66_pred_2 = _2548;
                    frontier_phi_66_pred_3 = _2547;
                    frontier_phi_66_pred_4 = _2546;
                    frontier_phi_66_pred_5 = _2545;
                }
                _2320 = frontier_phi_66_pred;
                _2330 = frontier_phi_66_pred_1;
                _2328 = frontier_phi_66_pred_2;
                _2326 = frontier_phi_66_pred_3;
                _2324 = frontier_phi_66_pred_4;
                _2322 = frontier_phi_66_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2320;
                    _2473 = _2322;
                    _2474 = _2324;
                    _2475 = _2326;
                    _2476 = _2328;
                    _2477 = _2330;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
        }
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.z;
        uint _2336 = (_2334 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2336) & _2218) == 0u)
        {
            _2440 = _2319;
            _2442 = _2321;
            _2444 = _2323;
            _2446 = _2325;
            _2448 = _2327;
            _2450 = _2329;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
            float _2466 = _2465 * _2172;
            float _2467 = _2465 * _2173;
            float _2468 = _2465 * _2174;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2336 < ((_2334 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2600 = _2319;
                float _2601 = _2321;
                float _2602 = _2323;
                float _2603 = _2325;
                float _2604 = _2327;
                float _2605 = _2329;
                uint _2606 = _2336;
                uint _2615;
                bool _2616;
                for (;;)
                {
                    _2615 = texelFetch(g_lightClassification, int((((_2212 << 5u) + (_2198 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                    _2616 = _2615 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2616)
                    {
                        frontier_phi_77_pred = _2605;
                        frontier_phi_77_pred_1 = _2604;
                        frontier_phi_77_pred_2 = _2603;
                        frontier_phi_77_pred_3 = _2602;
                        frontier_phi_77_pred_4 = _2601;
                        frontier_phi_77_pred_5 = _2600;
                    }
                    else
                    {
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _2822 = _2600;
                        float _2823 = _2601;
                        float _2824 = _2602;
                        float _2825 = _2603;
                        float _2826 = _2604;
                        float _2827 = _2605;
                        uint _2828 = _2615;
                        uint _2829;
                        vec4 _2854;
                        float _2855;
                        vec4 _2870;
                        vec3 _2882;
                        vec4 _2898;
                        vec4 _2914;
                        float _2961;
                        bool _2962;
                        for (;;)
                        {
                            uint _2839 = ((_2606 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2828));
                            _2829 = (_2828 + 4294967295u) & _2828;
                            uint _2841 = _2839 * 40u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2855 = _2854.w;
                            uint _2857 = (_2839 * 40u) + 4u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2872 = (_2839 * 40u) + 8u;
                            _2882 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x));
                            uint _2885 = (_2839 * 40u) + 16u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2839 * 40u) + 20u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2917 = (_2839 * 40u) + 24u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2936 = (_2839 * 40u) + 28u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2961 = fma(_2174, _2949.z, fma(_2173, _2949.y, _2949.x * _2172)) + _2949.w;
                            _2962 = !((fma(_2174, _2930.z, fma(_2173, _2930.y, _2930.x * _2172)) + _2930.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2962)
                            {
                                float _2989 = _2854.x - _2172;
                                float _2990 = _2854.y - _2173;
                                float _2991 = _2854.z - _2174;
                                float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                                float _2995 = inversesqrt(_2992);
                                float _2996 = _2995 * _2989;
                                float _2997 = _2995 * _2990;
                                float _2998 = _2995 * _2991;
                                float _3002 = 1.0 - (_2992 / (_2855 * _2855));
                                float _4085 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3007 = sqrt(_2992) * _2870.w;
                                float _3009 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                                float _3010 = _3009 * _3009;
                                float _3013 = ((1.0 - _3010) * dot(vec3(_2996, _2997, _2998), vec3(_413, _416, _419))) + _3010;
                                float _3016 = _3007 * _3007;
                                float _3020 = (fma(_2174, _2898.z, fma(_2173, _2898.y, _2898.x * _2172)) + _2898.w) / _2961;
                                float _3021 = (fma(_2174, _2914.z, fma(_2173, _2914.y, _2914.x * _2172)) + _2914.w) / _2961;
                                float _3025 = 1.0 - dot(vec2(_3020, _3021), vec2(_3020, _3021));
                                float _4101 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3027 = _3026 * (((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3003) / ((_3016 * 0.699999988079071044921875) + 1.0));
                                float _3039 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                                float _3040 = 1.0 - _475;
                                float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                                float _3048 = _3047 * _3047;
                                float _3049 = _3048 * _3048;
                                float _3050 = _2996 - _2466;
                                float _3051 = _2997 - _2467;
                                float _3052 = _2998 - _2468;
                                float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                                float _3060 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4112 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3064 = dot(vec3(_413, _416, _419), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                                float _4123 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                                float _3072 = _3009 * _3048;
                                float _3073 = _3072 * _3072;
                                float _3079 = ((1.0 - _3073) * dot(vec3(_413, _416, _419), vec3(_2996, _2997, _2998))) + _3073;
                                float _4134 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3081 = 1.0 - _3048;
                                float _3091 = (0.5 / (((_3080 * ((_3063 * _3081) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3048) * _3063))) * _3080;
                                float _4145 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3101 = (_3026 * _3003) * (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_3071 * _3071) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3027 * _2870.y;
                                frontier_phi_83_pred_1 = _3027 * _2870.x;
                                frontier_phi_83_pred_2 = _3101 * _2882.z;
                                frontier_phi_83_pred_3 = _3101 * _2882.y;
                                frontier_phi_83_pred_4 = _3101 * _2882.x;
                                frontier_phi_83_pred_5 = _3027 * _2870.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3109 = frontier_phi_83_pred;
                            _3108 = frontier_phi_83_pred_1;
                            _3107 = frontier_phi_83_pred_2;
                            _3106 = frontier_phi_83_pred_3;
                            _3105 = frontier_phi_83_pred_4;
                            _3110 = frontier_phi_83_pred_5;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            if (_2829 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2829;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2814;
                        frontier_phi_77_pred_1 = _2813;
                        frontier_phi_77_pred_2 = _2812;
                        frontier_phi_77_pred_3 = _2811;
                        frontier_phi_77_pred_4 = _2810;
                        frontier_phi_77_pred_5 = _2809;
                    }
                    _2451 = frontier_phi_77_pred;
                    _2449 = frontier_phi_77_pred_1;
                    _2447 = frontier_phi_77_pred_2;
                    _2445 = frontier_phi_77_pred_3;
                    _2443 = frontier_phi_77_pred_4;
                    _2441 = frontier_phi_77_pred_5;
                    uint _2607 = _2606 + 1u;
                    if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2600 = _2441;
                        _2601 = _2443;
                        _2602 = _2445;
                        _2603 = _2447;
                        _2604 = _2449;
                        _2605 = _2451;
                        _2606 = _2607;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2445;
                frontier_phi_58_59_ladder_1 = _2451;
                frontier_phi_58_59_ladder_2 = _2449;
                frontier_phi_58_59_ladder_3 = _2447;
                frontier_phi_58_59_ladder_4 = _2443;
                frontier_phi_58_59_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_58_59_ladder = _2323;
                frontier_phi_58_59_ladder_1 = _2329;
                frontier_phi_58_59_ladder_2 = _2327;
                frontier_phi_58_59_ladder_3 = _2325;
                frontier_phi_58_59_ladder_4 = _2321;
                frontier_phi_58_59_ladder_5 = _2319;
            }
            _2440 = frontier_phi_58_59_ladder_5;
            _2442 = frontier_phi_58_59_ladder_4;
            _2444 = frontier_phi_58_59_ladder;
            _2446 = frontier_phi_58_59_ladder_3;
            _2448 = frontier_phi_58_59_ladder_2;
            _2450 = frontier_phi_58_59_ladder_1;
        }
        float _2455 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _2231 = (_2455 * _2446) + _1683;
        _2233 = (_2455 * _2448) + _1685;
        _2235 = (_2455 * _2450) + _1687;
        _2237 = ((_2440 * 0.039999999105930328369140625) * _2455) + _2016;
        _2239 = ((_2442 * 0.039999999105930328369140625) * _2455) + _2018;
        _2241 = ((_2444 * 0.039999999105930328369140625) * _2455) + _2020;
    }
    else
    {
        _2231 = _1683;
        _2233 = _1685;
        _2235 = _1687;
        _2237 = _2016;
        _2239 = _2018;
        _2241 = _2020;
    }
    float _4161 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4172 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4183 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2258 = ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2231 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _459))) + ((_2237 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2259 = ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2233 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _459))) + ((_2239 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    float _2260 = ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2235 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _459))) + ((_2241 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1297)) * cbPerFrame._m0[3u].x);
    uint _2261 = _432 + 6u;
    float _2269 = _392 / cbSceneParam._m0[86u].x;
    float _2270 = _393 / cbSceneParam._m0[86u].y;
    vec4 _2284 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, (log2((isnan(cbSceneParam._m0[77u].w) ? _312 : (isnan(_312) ? cbSceneParam._m0[77u].w : min(_312, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2286 = _2284.x;
    float _2287 = _2284.y;
    float _2288 = _2284.z;
    float _2289 = _2284.w;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    if (_312 > cbSceneParam._m0[78u].w)
    {
        float _2344 = isnan(_312) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _312 : min(cbSceneParam._m0[80u].w, _312));
        float _2345 = _2344 / _312;
        float _2356 = _2345 * _364;
        float _2357 = _365 * _2345;
        float _2358 = (-0.0) - _2357;
        float _2360 = _2345 * _366;
        float _2362 = (cbSceneParam._m0[77u].w * _2358) / _2344;
        float _2363 = _2362 + cbSceneParam._m0[79u].w;
        float _2364 = cbSceneParam._m0[79u].w - _2357;
        float _2370 = sqrt(((_2356 * _2356) + (_2357 * _2357)) + (_2360 * _2360));
        float _2373 = (1.0 - (cbSceneParam._m0[77u].w / _2344)) * _2370;
        float _2378 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2380 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2358 - _2362) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2363 > 0.0) ? exp2(_2378 * _2363) : (2.0 - exp2(_2380 * _2363))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2373;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : max(_2363, _2364));
            float _2503 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : min(_2363, _2364));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2557 = ((abs(_2370 / _2358) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2378 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2378 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2380 * _2512) - exp2(_2380 * _2513)) * _2501))) + (_2373 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2269, _2270, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2289);
        _2382 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2286;
        _2384 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2287;
        _2386 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2288;
        _2388 = _2568 * _2289;
    }
    else
    {
        _2382 = _2286;
        _2384 = _2287;
        _2386 = _2288;
        _2388 = _2289;
    }
    bool _2595;
    vec4 _2398;
    vec4 _2420;
    float _2422;
    float _2426;
    float _2427;
    float _2428;
    float _2429;
    bool _2439;
    for (;;)
    {
        _2398 = cbMatDynParam._m0[0u];
        float _2400 = roundEven(_2398.y);
        bool _2401 = _2400 == 3.0;
        float _2402 = log2(_2388);
        float _2409 = exp2(_2402 * cbSceneParam._m0[78u].x) * _2258;
        float _2410 = exp2(_2402 * cbSceneParam._m0[78u].y) * _2259;
        float _2411 = exp2(_2402 * cbSceneParam._m0[78u].z) * _2260;
        float _2418 = _380 + (-0.5);
        _2420 = cbMtdParam._m0[1u];
        _2422 = _2420.y * _2418;
        float _2425 = (_2400 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2426 = _2425 * (_2401 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2382)));
        _2427 = _2425 * (_2401 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2384)));
        _2428 = _2425 * (_2401 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2386)));
        _2429 = _2418 * 0.999000012874603271484375;
        _2439 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2439)
        {
            if ((cbInstanceData._m0[_432 + 7u].x + _2429) < 0.5)
            {
                _2595 = true;
                break;
            }
        }
        uint _2536 = _434 + uint(_2398.w);
        if ((cbInstanceData._m0[_2536].w < 1.0) && ((cbInstanceData._m0[_2536].w + _2429) < 0.5))
        {
            _2595 = true;
            break;
        }
        if ((_2422 + 1.0) < _2420.x)
        {
            _2595 = true;
            break;
        }
        _2595 = false;
        break;
    }
    float _2800;
    if (_2595)
    {
        discard_state = true;
        _2800 = 0.0;
    }
    else
    {
        _2800 = cbInstanceData._m0[_2261].w;
    }
    SV_Target.x = _2426;
    SV_Target.y = _2427;
    SV_Target.z = _2428;
    SV_Target.w = _2800;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2261].w;
    discard_exit();
}


