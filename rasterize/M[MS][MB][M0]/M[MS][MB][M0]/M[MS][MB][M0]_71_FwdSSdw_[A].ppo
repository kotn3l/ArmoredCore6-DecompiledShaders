#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1232;
float _3618;
float _3619;
float _3620;
float _3621;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3630 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3641 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3652 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3663 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _429 = (_422 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _430 = (_422 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _431 = (_422 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _435 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _429;
    float _438 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _430;
    float _441 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _431;
    float _448 = ((_429 - _435) * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) + _435;
    float _449 = ((_430 - _438) * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) + _438;
    float _450 = ((_431 - _441) * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) + _441;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _422) + _509;
    float _521 = ((((_488.x - _507) * _422) + _507) * 2.0) + (-1.0);
    float _522 = ((((_488.y - _508) * _422) + _508) * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3674 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))));
    float _533 = _521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_463.x * 2.0) + (-1.0)));
    float _534 = _522 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_463.y * 2.0) + (-1.0)));
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _590 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3685 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _599 = ((((cbMtdParam._m0[10u].x - _448) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _591) + _448;
    float _600 = ((((cbMtdParam._m0[10u].y - _449) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _591) + _449;
    float _601 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _450)) * _591) + _450;
    float _606 = (((_463.z - _518) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _518;
    float _610 = ((cbMtdParam._m0[23u].y - _606) * _591) + _606;
    vec4 _629 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _635 = (_629.x * 2.0) + (-1.0);
    float _636 = (_629.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3696 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _653 = (_591 * (((cbMtdParam._m0[22u].z * _533) - _533) + _635)) + _533;
    float _654 = (_591 * (((cbMtdParam._m0[22u].z * _534) - _534) + _636)) + _534;
    float _655 = (_591 * (sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) - _528)) + _528;
    float _657 = cbMtdParam._m0[22u].x + _547.w;
    float _660 = fma(_655, _241 * NORMAL.x, fma(_654, _248 * TANGENT.x, (_234 * _226) * _653));
    float _663 = fma(_655, _241 * NORMAL.y, fma(_654, _248 * TANGENT.y, (_234 * _227) * _653));
    float _666 = fma(_655, _241 * NORMAL.z, fma(_654, _248 * TANGENT.z, (_234 * _228) * _653));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3707 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _674 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3729 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3740 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3751 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    vec4 _757 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _759 = _757.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _913 = sqrt(((_743 * _743) + (_744 * _744)) + (_745 * _745));
        float _919 = (cbMatDynParam._m0[5u].x * _913) + cbMatDynParam._m0[5u].y;
        float _3762 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _924 = (cbMatDynParam._m0[5u].z * _913) + cbMatDynParam._m0[5u].w;
        float _3773 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) - _920)) + _920) < ((_759 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _770 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _771 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _789 = fma(_673, cbSceneParam._m0[5u].z, fma(_672, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _671));
    float _792 = fma(_673, cbSceneParam._m0[6u].z, fma(_672, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _671));
    float _795 = fma(_673, cbSceneParam._m0[7u].z, fma(_672, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _671));
    uint _808 = _273 + 9u;
    uint _809 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_809].z;
    float _3784 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _770, cbSceneParam._m0[86u].y * _771));
    float _833 = ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * TEXCOORD_5.w) * _829.x;
    float _834 = dot(vec3(_671, _672, _673), vec3(_750, _751, _752));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _671) - _750;
    float _842 = (_837 * _672) - _751;
    float _843 = (_837 * _673) - _752;
    float _847 = abs(dot(vec3(_750, _751, _752), vec3(_671, _672, _673)));
    float _3817 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_674);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _956 = fma(_902, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894));
        float _960 = fma(_902, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894));
        float _964 = fma(_902, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894));
        float _989 = _894 + _671;
        float _990 = _898 + _672;
        float _991 = _902 + _673;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _956;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _960;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _964;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_956 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_960 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_964 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_671, _672, _673), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3865 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_671, _672, _673), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3898 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_671, _672, _673), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3931 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_902, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894));
        float _1278 = fma(_902, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894));
        float _1282 = fma(_902, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894));
        float _1305 = _894 + _671;
        float _1306 = _898 + _672;
        float _1307 = _902 + _673;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_671, _672, _673), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3994 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_671, _672, _673), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4027 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_671, _672, _673), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4060 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1232;
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = _1232;
        _1552 = _1232;
        _1553 = _1232;
        _1554 = _1232;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1244)) + _1244;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1245)) + _1245;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1246)) + _1246;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _841 * 0.5;
    float _1612 = _842 * 0.5;
    float _1613 = _843 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1729 = fma(_902, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894)) + cbModelParam._m0[13u].w;
        float _1733 = fma(_902, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894)) + cbModelParam._m0[14u].w;
        float _1737 = fma(_902, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894)) + cbModelParam._m0[15u].w;
        float _1740 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1743 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1746 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1774;
        if (_1740 > 0.0)
        {
            _1774 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1774 = frontier_phi_17_15_ladder;
        }
        float _1997;
        if (_1743 > 0.0)
        {
            _1997 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1997 = frontier_phi_26_22_ladder;
        }
        float _2243;
        if (_1746 > 0.0)
        {
            _2243 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2243 = frontier_phi_38_33_ladder;
        }
        float _2245 = isnan(_1997) ? _1774 : (isnan(_1774) ? _1997 : min(_1774, _1997));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1740) + _1729;
        float _2251 = (_2246 * _1743) + _1733;
        float _2252 = (_2246 * _1746) + _1737;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_16_38_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1762 = frontier_phi_16_38_ladder_2;
        _1764 = frontier_phi_16_38_ladder_1;
        _1766 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1680);
        _1762 = _1750.x * cbModelParam._m0[1u].y;
        _1764 = _1750.y * cbModelParam._m0[1u].y;
        _1766 = _1750.z * cbModelParam._m0[1u].y;
    }
    float _1770 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1770 : min(cbModelParam._m0[25u].w, _1770));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_902, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_902, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_902, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1840 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1843 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _2002;
        if (_1837 > 0.0)
        {
            _2002 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2002 = frontier_phi_28_24_ladder;
        }
        float _2270;
        if (_1840 > 0.0)
        {
            _2270 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2270 = frontier_phi_40_35_ladder;
        }
        float _2475;
        if (_1843 > 0.0)
        {
            _2475 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2475 = frontier_phi_49_46_ladder;
        }
        float _2477 = isnan(_2270) ? _2002 : (isnan(_2002) ? _2270 : min(_2002, _2270));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1837) + _1826;
        float _2483 = (_2478 * _1840) + _1830;
        float _2484 = (_2478 * _1843) + _1834;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1771);
            frontier_phi_25_49_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_25_49_ladder_2;
        _1864 = frontier_phi_25_49_ladder_1;
        _1866 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1771);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1878 = ((((1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_862 * _849)) * _833;
    float _1879 = _1878 * ((cbModelParam._m0[1u].w * (_1862 - _1762)) + _1762);
    float _1880 = _1878 * ((cbModelParam._m0[1u].w * (_1864 - _1764)) + _1764);
    float _1881 = _1878 * ((cbModelParam._m0[1u].w * (_1866 - _1766)) + _1766);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    vec4 _1898 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_770, _771));
    float _1900 = _1898.w;
    float _1912 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1900);
    float _1913 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1900);
    float _1914 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1900);
    uvec4 _1918 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1920 = _1918.x * 14u;
    uint _1921 = _1920 + 13u;
    float _1928 = _833 + (-1.0);
    float _1933 = (cbLight._m0[_1921].x * _1928) + 1.0;
    float _1934 = (cbLight._m0[_1921].y * _1928) + 1.0;
    float _1935 = (cbLight._m0[_1921].z * _1928) + 1.0;
    float _1936 = (cbLight._m0[_1921].w * _1928) + 1.0;
    uint _1937 = _1920 + 5u;
    float _1943 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    uint _1947 = _1920 + 4u;
    float _1956 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1960 = _1920 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_671, _672, _673));
    float _1974 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_671, _672, _673));
    float _4196 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _4207 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1979 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _1981 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _1988 = ((cbLight._m0[_1937].x * _1943) * _1981) + (((cbLight._m0[_1947].x * _1912) * _1956) * _1979);
    float _1989 = ((_1943 * cbLight._m0[_1937].y) * _1981) + (((cbLight._m0[_1947].y * _1913) * _1956) * _1979);
    float _1990 = ((_1943 * cbLight._m0[_1937].z) * _1981) + (((cbLight._m0[_1947].z * _1914) * _1956) * _1979);
    uvec4 _1994 = floatBitsToUint(cbLight._m0[_1920 + 12u]);
    bool _1996 = _1994.x == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1996)
    {
        _2007 = _1988;
        _2009 = _1989;
        _2011 = _1990;
    }
    else
    {
        uint _2015 = _1920 + 6u;
        float _2031 = (dot(vec3(cbLight._m0[_1920 + 2u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4218 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2034 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2007 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1988;
        _2009 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1989;
        _2011 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1990;
    }
    bool _2014 = _1994.y == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2014)
    {
        _2052 = _2007;
        _2054 = _2009;
        _2056 = _2011;
    }
    else
    {
        uint _2214 = _1920 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1920 + 3u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4234 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2233 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2052 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2007;
        _2054 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2009;
        _2056 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2011;
    }
    uint _2059 = _1920 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _674) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1920].x + _750;
    float _2075 = cbLight._m0[_1920].y + _751;
    float _2076 = cbLight._m0[_1920].z + _752;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1920].xyz));
    float _4250 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2088 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2089 = dot(vec3(_671, _672, _673), vec3(_2081, _2082, _2083));
    float _4272 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2081, _2082, _2083));
    float _4283 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2073;
    float _2124 = (0.5 / (((_2088 * ((_2087 * _2113) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2113) + _2073) * _2087))) * _2087;
    float _4294 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2140 = _1920 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _674) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1960].x + _750;
    float _2154 = cbLight._m0[_1960].y + _751;
    float _2155 = cbLight._m0[_1960].z + _752;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1960].xyz));
    float _4305 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2167 = dot(vec3(_671, _672, _673), vec3(_2160, _2161, _2162));
    float _4316 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2160, _2161, _2162));
    float _4327 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2152;
    float _2199 = (0.5 / (((_2088 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2189) + _2152) * _2166))) * _2166;
    float _4338 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2211 = (((_2188 * cbLight._m0[_2140].x) * _2201) * _1943) + ((((cbLight._m0[_2059].x * _1912) * _2112) * _2126) * _1956);
    float _2212 = (((_2188 * cbLight._m0[_2140].y) * _2201) * _1943) + ((((cbLight._m0[_2059].y * _1913) * _2112) * _2126) * _1956);
    float _2213 = (((_2188 * cbLight._m0[_2140].z) * _2201) * _1943) + ((((cbLight._m0[_2059].z * _1914) * _2112) * _2126) * _1956);
    float _2275;
    float _2277;
    float _2279;
    if (_1996)
    {
        _2275 = _2211;
        _2277 = _2212;
        _2279 = _2213;
    }
    else
    {
        uint _2281 = _1920 + 2u;
        uint _2285 = _1920 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _674) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _750;
        float _2302 = cbLight._m0[_2281].y + _751;
        float _2303 = cbLight._m0[_2281].z + _752;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2281].xyz));
        float _4349 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2315 = dot(vec3(_671, _672, _673), vec3(_2308, _2309, _2310));
        float _4360 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4371 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2336 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2337 = 1.0 - _2300;
        float _2347 = (0.5 / (((_2088 * ((_2314 * _2337) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2337) + _2300) * _2314))) * _2314;
        float _4382 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2275 = (((_2336 * cbLight._m0[_2285].x) * _2349) * _2350) + _2211;
        _2277 = (((_2336 * cbLight._m0[_2285].y) * _2349) * _2350) + _2212;
        _2279 = (((_2336 * cbLight._m0[_2285].z) * _2349) * _2350) + _2213;
    }
    float _2385;
    float _2387;
    float _2389;
    if (_2014)
    {
        _2385 = _2275;
        _2387 = _2277;
        _2389 = _2279;
    }
    else
    {
        uint _2396 = _1920 + 3u;
        uint _2400 = _1920 + 11u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _674) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _750;
        float _2417 = cbLight._m0[_2396].y + _751;
        float _2418 = cbLight._m0[_2396].z + _752;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2396].xyz));
        float _4398 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2430 = dot(vec3(_671, _672, _673), vec3(_2423, _2424, _2425));
        float _4409 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4420 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2452 = 1.0 - _2415;
        float _2462 = (0.5 / (((_2088 * ((_2429 * _2452) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2452) + _2415) * _2429))) * _2429;
        float _4431 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2385 = (((_2451 * cbLight._m0[_2400].x) * _2464) * _2465) + _2275;
        _2387 = (((_2451 * cbLight._m0[_2400].y) * _2464) * _2465) + _2277;
        _2389 = (((_2451 * cbLight._m0[_2400].z) * _2464) * _2465) + _2279;
    }
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_1918.y == 0u)
    {
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2540;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2540;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2540;
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _771) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _770) / _2556)));
        float _2577 = (log2(_2543 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            uint _2847 = 0u;
            uint _2856;
            bool _2857;
            for (;;)
            {
                _2856 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                _2857 = _2856 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2857)
                {
                    frontier_phi_66_pred = _2841;
                    frontier_phi_66_pred_1 = _2846;
                    frontier_phi_66_pred_2 = _2845;
                    frontier_phi_66_pred_3 = _2844;
                    frontier_phi_66_pred_4 = _2843;
                    frontier_phi_66_pred_5 = _2842;
                }
                else
                {
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    uint _2992;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2856;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    for (;;)
                    {
                        uint _2996 = uint(findLSB(_2992)) + (_2847 << 5u);
                        uint _2993 = (_2992 + 4294967295u) & _2992;
                        uint _2998 = _2996 * 48u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3018 = (_2996 * 48u) + 4u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3037 = (_2996 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3012.x - _2541;
                        float _3053 = _3012.y - _2542;
                        float _3054 = _3012.z - _2543;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3062 = dot(vec3(_789, _792, _795), vec3(_3059, _3060, _3061));
                        float _3067 = 1.0 - (_3055 * _3012.w);
                        float _4457 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3069 = sqrt(_3055) * _3031.w;
                        float _3072 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _3062) + _3073;
                        float _3079 = _3069 * _3069;
                        float _3083 = ((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3068) / ((_3079 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _2541;
                        float _3088 = (-0.0) - _2542;
                        float _3089 = (-0.0) - _2543;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3104 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                        float _3105 = 1.0 - _849;
                        float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                        float _3113 = _3112 * _3112;
                        float _3114 = _3113 * _3113;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3125 = dot(vec3(_789, _792, _795), vec3(_3094, _3095, _3096));
                        float _4473 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3129 = dot(vec3(_789, _792, _795), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                        float _4484 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                        float _3137 = _3072 * _3113;
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3062) + _3138;
                        float _4495 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3143 = 1.0 - _3113;
                        float _3153 = (0.5 / (((_3142 * ((_3128 * _3143) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3113) * _3128))) * _3142;
                        float _4506 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3164 = (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3136 * _3136) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125))) * _3068;
                        _2916 = (_3083 * _3031.x) + _2989;
                        _2917 = (_3083 * _3031.y) + _2990;
                        _2918 = (_3083 * _3031.z) + _2991;
                        _2913 = (_3164 * _3048.x) + _2986;
                        _2914 = (_3164 * _3048.y) + _2987;
                        _2915 = (_3164 * _3048.z) + _2988;
                        if (_2993 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2993;
                        }
                    }
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2918;
                    frontier_phi_66_pred_2 = _2917;
                    frontier_phi_66_pred_3 = _2916;
                    frontier_phi_66_pred_4 = _2915;
                    frontier_phi_66_pred_5 = _2914;
                }
                _2689 = frontier_phi_66_pred;
                _2699 = frontier_phi_66_pred_1;
                _2697 = frontier_phi_66_pred_2;
                _2695 = frontier_phi_66_pred_3;
                _2693 = frontier_phi_66_pred_4;
                _2691 = frontier_phi_66_pred_5;
                uint _2848 = _2847 + 1u;
                if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2841 = _2689;
                    _2842 = _2691;
                    _2843 = _2693;
                    _2844 = _2695;
                    _2845 = _2697;
                    _2846 = _2699;
                    _2847 = _2848;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((4294967295u << _2705) & _2587) == 0u)
        {
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
        }
        else
        {
            float _2834 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
            float _2835 = _2834 * _2541;
            float _2836 = _2834 * _2542;
            float _2837 = _2834 * _2543;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2969 = _2688;
                float _2970 = _2690;
                float _2971 = _2692;
                float _2972 = _2694;
                float _2973 = _2696;
                float _2974 = _2698;
                uint _2975 = _2705;
                uint _2984;
                bool _2985;
                for (;;)
                {
                    _2984 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                    _2985 = _2984 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2985)
                    {
                        frontier_phi_77_pred = _2974;
                        frontier_phi_77_pred_1 = _2973;
                        frontier_phi_77_pred_2 = _2972;
                        frontier_phi_77_pred_3 = _2971;
                        frontier_phi_77_pred_4 = _2970;
                        frontier_phi_77_pred_5 = _2969;
                    }
                    else
                    {
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        uint _3197 = _2984;
                        uint _3198;
                        vec4 _3223;
                        float _3224;
                        vec4 _3239;
                        vec3 _3251;
                        vec4 _3266;
                        vec4 _3281;
                        float _3327;
                        bool _3328;
                        for (;;)
                        {
                            uint _3208 = ((_2975 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3197));
                            _3198 = (_3197 + 4294967295u) & _3197;
                            uint _3210 = _3208 * 40u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3224 = _3223.w;
                            uint _3226 = (_3208 * 40u) + 4u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3241 = (_3208 * 40u) + 8u;
                            _3251 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x));
                            uint _3253 = (_3208 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3208 * 40u) + 20u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3208 * 40u) + 24u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3302 = (_3208 * 40u) + 28u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            _3327 = fma(_2543, _3315.z, fma(_2542, _3315.y, _3315.x * _2541)) + _3315.w;
                            _3328 = !((fma(_2543, _3296.z, fma(_2542, _3296.y, _3296.x * _2541)) + _3296.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3328)
                            {
                                float _3355 = _3223.x - _2541;
                                float _3356 = _3223.y - _2542;
                                float _3357 = _3223.z - _2543;
                                float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                                float _3361 = inversesqrt(_3358);
                                float _3362 = _3361 * _3355;
                                float _3363 = _3361 * _3356;
                                float _3364 = _3361 * _3357;
                                float _3368 = 1.0 - (_3358 / (_3224 * _3224));
                                float _4517 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3373 = sqrt(_3358) * _3239.w;
                                float _3375 = 1.39999997615814208984375 / (_3373 + 1.39999997615814208984375);
                                float _3376 = _3375 * _3375;
                                float _3379 = ((1.0 - _3376) * dot(vec3(_3362, _3363, _3364), vec3(_789, _792, _795))) + _3376;
                                float _3382 = _3373 * _3373;
                                float _3386 = (fma(_2543, _3266.z, fma(_2542, _3266.y, _3266.x * _2541)) + _3266.w) / _3327;
                                float _3387 = (fma(_2543, _3281.z, fma(_2542, _3281.y, _3281.x * _2541)) + _3281.w) / _3327;
                                float _3391 = 1.0 - dot(vec2(_3386, _3387), vec2(_3386, _3387));
                                float _4533 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3393 = _3392 * (((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3369) / ((_3382 * 0.699999988079071044921875) + 1.0));
                                float _3405 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                                float _3406 = 1.0 - _849;
                                float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                                float _3414 = _3413 * _3413;
                                float _3415 = _3414 * _3414;
                                float _3416 = _3362 - _2835;
                                float _3417 = _3363 - _2836;
                                float _3418 = _3364 - _2837;
                                float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                                float _3426 = dot(vec3(_789, _792, _795), vec3((-0.0) - _2835, (-0.0) - _2836, (-0.0) - _2837));
                                float _4544 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3430 = dot(vec3(_789, _792, _795), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                                float _4555 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                                float _3438 = _3375 * _3414;
                                float _3439 = _3438 * _3438;
                                float _3445 = ((1.0 - _3439) * dot(vec3(_789, _792, _795), vec3(_3362, _3363, _3364))) + _3439;
                                float _4566 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3447 = 1.0 - _3414;
                                float _3457 = (0.5 / (((_3446 * ((_3429 * _3447) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3414) * _3429))) * _3446;
                                float _4577 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3467 = (_3392 * _3369) * (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3437 * _3437) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3393 * _3239.y;
                                frontier_phi_83_pred_1 = _3393 * _3239.x;
                                frontier_phi_83_pred_2 = _3467 * _3251.z;
                                frontier_phi_83_pred_3 = _3467 * _3251.y;
                                frontier_phi_83_pred_4 = _3467 * _3251.x;
                                frontier_phi_83_pred_5 = _3393 * _3239.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3475 = frontier_phi_83_pred;
                            _3474 = frontier_phi_83_pred_1;
                            _3473 = frontier_phi_83_pred_2;
                            _3472 = frontier_phi_83_pred_3;
                            _3471 = frontier_phi_83_pred_4;
                            _3476 = frontier_phi_83_pred_5;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            _3178 = _3471 + _3191;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            if (_3198 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3198;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3183;
                        frontier_phi_77_pred_1 = _3182;
                        frontier_phi_77_pred_2 = _3181;
                        frontier_phi_77_pred_3 = _3180;
                        frontier_phi_77_pred_4 = _3179;
                        frontier_phi_77_pred_5 = _3178;
                    }
                    _2820 = frontier_phi_77_pred;
                    _2818 = frontier_phi_77_pred_1;
                    _2816 = frontier_phi_77_pred_2;
                    _2814 = frontier_phi_77_pred_3;
                    _2812 = frontier_phi_77_pred_4;
                    _2810 = frontier_phi_77_pred_5;
                    uint _2976 = _2975 + 1u;
                    if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2969 = _2810;
                        _2970 = _2812;
                        _2971 = _2814;
                        _2972 = _2816;
                        _2973 = _2818;
                        _2974 = _2820;
                        _2975 = _2976;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2814;
                frontier_phi_58_59_ladder_1 = _2820;
                frontier_phi_58_59_ladder_2 = _2818;
                frontier_phi_58_59_ladder_3 = _2816;
                frontier_phi_58_59_ladder_4 = _2812;
                frontier_phi_58_59_ladder_5 = _2810;
            }
            else
            {
                frontier_phi_58_59_ladder = _2692;
                frontier_phi_58_59_ladder_1 = _2698;
                frontier_phi_58_59_ladder_2 = _2696;
                frontier_phi_58_59_ladder_3 = _2694;
                frontier_phi_58_59_ladder_4 = _2690;
                frontier_phi_58_59_ladder_5 = _2688;
            }
            _2809 = frontier_phi_58_59_ladder_5;
            _2811 = frontier_phi_58_59_ladder_4;
            _2813 = frontier_phi_58_59_ladder;
            _2815 = frontier_phi_58_59_ladder_3;
            _2817 = frontier_phi_58_59_ladder_2;
            _2819 = frontier_phi_58_59_ladder_1;
        }
        float _2824 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2600 = (_2824 * _2815) + _2052;
        _2602 = (_2824 * _2817) + _2054;
        _2604 = (_2824 * _2819) + _2056;
        _2606 = ((_2809 * 0.039999999105930328369140625) * _2824) + _2385;
        _2608 = ((_2811 * 0.039999999105930328369140625) * _2824) + _2387;
        _2610 = ((_2813 * 0.039999999105930328369140625) * _2824) + _2389;
    }
    else
    {
        _2600 = _2052;
        _2602 = _2054;
        _2604 = _2056;
        _2606 = _2385;
        _2608 = _2387;
        _2610 = _2389;
    }
    float _4593 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4604 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4615 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2627 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2600 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _833))) + ((_2606 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    float _2628 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2602 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _833))) + ((_2608 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    float _2629 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2604 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _833))) + ((_2610 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1669)) * cbPerFrame._m0[3u].x);
    uint _2630 = _273 + 6u;
    float _2638 = _770 / cbSceneParam._m0[86u].x;
    float _2639 = _771 / cbSceneParam._m0[86u].y;
    vec4 _2653 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2655 = _2653.x;
    float _2656 = _2653.y;
    float _2657 = _2653.z;
    float _2658 = _2653.w;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2714 = _2713 / _692;
        float _2725 = _2714 * _743;
        float _2726 = _744 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2729 = _2714 * _745;
        float _2731 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2726;
        float _2739 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2749 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2926;
        if (abs((_2727 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2926 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2749 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2870 = 1.0 / cbSceneParam._m0[80u].x;
            float _2871 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2872 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2881 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : min(_2871, 0.0));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            _2926 = ((abs(_2739 / _2727) * cbSceneParam._m0[80u].y) * ((((_2881 - _2882) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))))) * _2870)) - ((exp2(_2749 * _2881) - exp2(_2749 * _2882)) * _2870))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2928 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, 1.0), 0.0);
        float _2937 = exp2((_2926 * (-1.44269502162933349609375)) * (1.0 - _2928.w));
        float _2938 = log2(_2937);
        float _2954 = log2(_2658);
        _2751 = (exp2(_2954 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].x)) * _2928.x) / cbSceneParam._m0[78u].x)) + _2655;
        _2753 = (exp2(_2954 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].y)) * _2928.y) / cbSceneParam._m0[78u].y)) + _2656;
        _2755 = (exp2(_2954 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2938 * cbSceneParam._m0[78u].z)) * _2928.z) / cbSceneParam._m0[78u].z)) + _2657;
        _2757 = _2937 * _2658;
    }
    else
    {
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
        _2757 = _2658;
    }
    bool _2964;
    vec4 _2767;
    vec4 _2789;
    float _2791;
    float _2795;
    float _2796;
    float _2797;
    float _2798;
    bool _2808;
    for (;;)
    {
        _2767 = cbMatDynParam._m0[0u];
        float _2769 = roundEven(_2767.y);
        bool _2770 = _2769 == 3.0;
        float _2771 = log2(_2757);
        float _2778 = exp2(_2771 * cbSceneParam._m0[78u].x) * _2627;
        float _2779 = exp2(_2771 * cbSceneParam._m0[78u].y) * _2628;
        float _2780 = exp2(_2771 * cbSceneParam._m0[78u].z) * _2629;
        float _2787 = _759 + (-0.5);
        _2789 = cbMtdParam._m0[1u];
        _2791 = _2789.y * _2787;
        float _2794 = (_2769 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2795 = _2794 * (_2770 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2751)));
        _2796 = _2794 * (_2770 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
        _2797 = _2794 * (_2770 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
        _2798 = _2787 * 0.999000012874603271484375;
        _2808 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2808)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _2798) < 0.5)
            {
                _2964 = true;
                break;
            }
        }
        uint _2905 = _808 + uint(_2767.w);
        if ((cbInstanceData._m0[_2905].w < 1.0) && ((cbInstanceData._m0[_2905].w + _2798) < 0.5))
        {
            _2964 = true;
            break;
        }
        if ((_2791 + 1.0) < _2789.x)
        {
            _2964 = true;
            break;
        }
        _2964 = false;
        break;
    }
    float _3169;
    if (_2964)
    {
        discard_state = true;
        _3169 = 0.0;
    }
    else
    {
        _3169 = cbInstanceData._m0[_2630].w;
    }
    SV_Target.x = _2795;
    SV_Target.y = _2796;
    SV_Target.z = _2797;
    SV_Target.w = _3169;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2630].w;
    discard_exit();
}


