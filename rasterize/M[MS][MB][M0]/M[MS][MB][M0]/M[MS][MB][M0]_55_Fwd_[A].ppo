#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1141;
float _3501;
float _3502;
float _3503;
float _3504;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3513 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3524 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3535 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) + _329;
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _276) + cbTextureTilingScale._m0[14u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = _403.z;
    float _411 = (_403.x * 2.0) + (-1.0);
    float _412 = (_403.y * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3546 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    float _423 = _411 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_377.x * 2.0) + (-1.0)));
    float _424 = _412 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_377.y * 2.0) + (-1.0)));
    float _427 = fma(_418, _223, fma(_424, _230, _423 * _216));
    float _430 = fma(_418, _224, fma(_424, _231, _423 * _217));
    float _433 = fma(_418, _225, fma(_424, _232, _423 * _218));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _483 = ((_475 - _476) * cbMtdParam._m0[24u].z) + _476;
    float _485 = (cbMtdParam._m0[19u].x + dot(vec4(_437 * _427, _437 * _430, _437 * _433, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_483 * cbMtdParam._m0[21u].z);
    float _3557 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _501 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_483 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3568 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _502 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _506 = ((_486 * ((_357.x * cbMtdParam._m0[18u].x) - _336)) * _502) + _336;
    float _507 = ((_486 * ((_357.y * cbMtdParam._m0[18u].y) - _337)) * _502) + _337;
    float _508 = ((_486 * ((_357.z * cbMtdParam._m0[18u].z) - _338)) * _502) + _338;
    float _513 = (((_377.z - _407) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _407;
    vec4 _526 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _533 = (_526.x * 2.0) + (-1.0);
    float _534 = (_526.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3579 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _544 = (((_526.z - _513) * _486) * _502) + _513;
    float _559 = (((cbMtdParam._m0[21u].x * _423) + ((_533 - _423) * _486)) * _502) + _423;
    float _560 = (((cbMtdParam._m0[21u].x * _424) + ((_534 - _424) * _486)) * _502) + _424;
    float _561 = (((sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) - _418) * _486) * _502) + _418;
    float _563 = cbMtdParam._m0[22u].x + _403.w;
    float _566 = fma(_561, _223, fma(_560, _230, _559 * _216));
    float _569 = fma(_561, _224, fma(_560, _231, _559 * _217));
    float _572 = fma(_561, _225, fma(_560, _232, _559 * _218));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3590 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _580 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3612 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3623 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3634 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    vec4 _663 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _665 = _663.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _822 = sqrt(((_649 * _649) + (_650 * _650)) + (_651 * _651));
        float _828 = (cbMatDynParam._m0[5u].x * _822) + cbMatDynParam._m0[5u].y;
        float _3645 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _833 = (cbMatDynParam._m0[5u].z * _822) + cbMatDynParam._m0[5u].w;
        float _3656 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) - _829)) + _829) < ((_665 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _701 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _704 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _717 = _256 + 9u;
    uint _718 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3667 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _742 = ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_577, _578, _579), vec3(_656, _657, _658));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _577) - _656;
    float _751 = (_746 * _578) - _657;
    float _752 = (_746 * _579) - _658;
    float _756 = abs(dot(vec3(_656, _657, _658), vec3(_577, _578, _579)));
    float _3700 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_580);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1140;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _869 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _873 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _898 = _803 + _577;
        float _899 = _807 + _578;
        float _900 = _811 + _579;
        float _910 = fma(_900, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898)) - _865;
        float _911 = fma(_900, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898)) - _869;
        float _912 = fma(_900, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898)) - _873;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _929 = ((_916 * _910) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_916 * _911) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_916 * _912) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _968 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_934.x + (-0.5));
        float _970 = _968 * (_934.y + (-0.5));
        float _971 = _968 * (_934.z + (-0.5));
        float _978 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_941.x + (-0.5));
        float _980 = _978 * (_941.y + (-0.5));
        float _981 = _978 * (_941.z + (-0.5));
        float _988 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_948.x + (-0.5));
        float _990 = _988 * (_948.y + (-0.5));
        float _991 = _988 * (_948.z + (-0.5));
        float _998 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_955.x + (-0.5));
        float _1000 = _998 * (_955.y + (-0.5));
        float _1001 = _998 * (_955.z + (-0.5));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = _969 * 0.5;
        float _1006 = _979 * 0.5;
        float _1007 = _989 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1022 = (dot(vec3(_577, _578, _579), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1032 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3748 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1034 + 1.0))) + _1039) * _1002;
        float _1049 = _970 * 0.5;
        float _1050 = _980 * 0.5;
        float _1051 = _990 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_577, _578, _579), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3781 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1076 + 1.0))) + _1081) * _1003;
        float _1091 = _971 * 0.5;
        float _1092 = _981 * 0.5;
        float _1093 = _991 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_577, _578, _579), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3814 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1118 + 1.0))) + _1123) * _1004;
        _1140 = _971;
        _1142 = _970;
        _1143 = _969;
        _1144 = _981;
        _1145 = _980;
        _1146 = _979;
        _1147 = _991;
        _1148 = _990;
        _1149 = _989;
        _1150 = _1004;
        _1151 = _1003;
        _1152 = _1002;
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
    }
    else
    {
        _1140 = _1141;
        _1142 = _1141;
        _1143 = _1141;
        _1144 = _1141;
        _1145 = _1141;
        _1146 = _1141;
        _1147 = _1141;
        _1148 = _1141;
        _1149 = _1141;
        _1150 = _1141;
        _1151 = _1141;
        _1152 = _1141;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1183 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1187 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1191 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1214 = _803 + _577;
        float _1215 = _807 + _578;
        float _1216 = _811 + _579;
        float _1226 = fma(_1216, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214)) - _1183;
        float _1227 = fma(_1216, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214)) - _1187;
        float _1228 = fma(_1216, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214)) - _1191;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1183 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1187 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[35u].z) + ((((((_1191 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1282 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1249.x + (-0.5));
        float _1284 = _1282 * (_1249.y + (-0.5));
        float _1285 = _1282 * (_1249.z + (-0.5));
        float _1292 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1256.x + (-0.5));
        float _1294 = _1292 * (_1256.y + (-0.5));
        float _1295 = _1292 * (_1256.z + (-0.5));
        float _1302 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1263.x + (-0.5));
        float _1304 = _1302 * (_1263.y + (-0.5));
        float _1305 = _1302 * (_1263.z + (-0.5));
        float _1312 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1270.x + (-0.5));
        float _1314 = _1312 * (_1270.y + (-0.5));
        float _1315 = _1312 * (_1270.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_577, _578, _579), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3877 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1346 + 1.0))) + _1351) * _1316;
        float _1361 = _1284 * 0.5;
        float _1362 = _1294 * 0.5;
        float _1363 = _1304 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_577, _578, _579), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3910 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1388 + 1.0))) + _1393) * _1317;
        float _1403 = _1285 * 0.5;
        float _1404 = _1295 * 0.5;
        float _1405 = _1305 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_577, _578, _579), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3943 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1430 + 1.0))) + _1435) * _1318;
        _1452 = _1285;
        _1453 = _1284;
        _1454 = _1283;
        _1455 = _1295;
        _1456 = _1294;
        _1457 = _1293;
        _1458 = _1305;
        _1459 = _1304;
        _1460 = _1303;
        _1461 = _1318;
        _1462 = _1317;
        _1463 = _1316;
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1141;
        _1453 = _1141;
        _1454 = _1141;
        _1455 = _1141;
        _1456 = _1141;
        _1457 = _1141;
        _1458 = _1141;
        _1459 = _1141;
        _1460 = _1141;
        _1461 = _1141;
        _1462 = _1141;
        _1463 = _1141;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1499 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1476));
    float _1520 = _750 * 0.5;
    float _1521 = _751 * 0.5;
    float _1522 = _752 * 0.5;
    float _1523 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1526 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1529 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1563;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1536 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1140, _1144, _1147, _1150));
        float _1540 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1544 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1551 = dot(vec4(cbModelParam._m0[39u]), vec4(_1520, _1521, _1522, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1574;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1565 = dot(vec4(cbModelParam._m0[40u]), vec4(_1520, _1521, _1522, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1578 = (_1574 * cbModelParam._m0[1u].x) + (_1563 * (1.0 - cbModelParam._m0[1u].x));
    float _1588 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1588 : min(cbModelParam._m0[25u].z, _1588));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1650 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1653 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1681 = frontier_phi_17_15_ladder;
        }
        float _1883;
        if (_1650 > 0.0)
        {
            _1883 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1883 = frontier_phi_26_22_ladder;
        }
        float _2126;
        if (_1653 > 0.0)
        {
            _2126 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2126 = frontier_phi_38_33_ladder;
        }
        float _2128 = isnan(_1883) ? _1681 : (isnan(_1681) ? _1883 : min(_1681, _1883));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1647) + _1636;
        float _2134 = (_2129 * _1650) + _1640;
        float _2135 = (_2129 * _1653) + _1644;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2136;
        float _2140 = _2136 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 > _2140) || ((_2134 < _2138) || ((_2133 < _2138) || (_2133 > _2140))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2135, cbModelParam._m0[9u].z, fma(_2134, cbModelParam._m0[9u].y, _2133 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2135, cbModelParam._m0[10u].z, fma(_2134, cbModelParam._m0[10u].y, _2133 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2135, cbModelParam._m0[11u].z, fma(_2134, cbModelParam._m0[11u].y, _2133 * cbModelParam._m0[11u].x))), _1589);
            frontier_phi_16_38_ladder = _2259.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2259.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2259.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_16_38_ladder_2;
        _1671 = frontier_phi_16_38_ladder_1;
        _1673 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1589);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1731 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1735 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1739 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1742 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1745 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1748 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1888;
        if (_1742 > 0.0)
        {
            _1888 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1888 = frontier_phi_28_24_ladder;
        }
        float _2153;
        if (_1745 > 0.0)
        {
            _2153 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2153 = frontier_phi_40_35_ladder;
        }
        float _2358;
        if (_1748 > 0.0)
        {
            _2358 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2358 = frontier_phi_49_46_ladder;
        }
        float _2360 = isnan(_2153) ? _1888 : (isnan(_1888) ? _2153 : min(_1888, _2153));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1742) + _1731;
        float _2366 = (_2361 * _1745) + _1735;
        float _2367 = (_2361 * _1748) + _1739;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2368;
        float _2371 = _2368 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2367 > _2371) || ((_2367 < _2369) || ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 < _2369) || (_2365 > _2371))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2367, cbModelParam._m0[17u].z, fma(_2366, cbModelParam._m0[17u].y, _2365 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2367, cbModelParam._m0[18u].z, fma(_2366, cbModelParam._m0[18u].y, _2365 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2367, cbModelParam._m0[19u].z, fma(_2366, cbModelParam._m0[19u].y, _2365 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_25_49_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1767 = frontier_phi_25_49_ladder_2;
        _1769 = frontier_phi_25_49_ladder_1;
        _1771 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1678);
        _1767 = _1751.x * cbModelParam._m0[1u].z;
        _1769 = _1751.y * cbModelParam._m0[1u].z;
        _1771 = _1751.z * cbModelParam._m0[1u].z;
    }
    float _1783 = ((((1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_771 * _758)) * _742;
    float _1784 = _1783 * ((cbModelParam._m0[1u].w * (_1767 - _1669)) + _1669);
    float _1785 = _1783 * ((cbModelParam._m0[1u].w * (_1769 - _1671)) + _1671);
    float _1786 = _1783 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1789 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, _1784 * cbSceneParam._m0[91u].x));
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1815 = _742 + (-1.0);
    float _1820 = (cbLight._m0[_1808].x * _1815) + 1.0;
    float _1821 = (cbLight._m0[_1808].y * _1815) + 1.0;
    float _1822 = (cbLight._m0[_1808].z * _1815) + 1.0;
    float _1823 = (cbLight._m0[_1808].w * _1815) + 1.0;
    uint _1824 = _1807 + 5u;
    float _1830 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1834 = _1807 + 4u;
    float _1841 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1845 = _1807 | 1u;
    float _1856 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_577, _578, _579));
    float _1859 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_577, _578, _579));
    float _4079 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _4090 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1864 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1866 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1873 = ((cbLight._m0[_1824].x * _1830) * _1866) + ((cbLight._m0[_1834].x * _1841) * _1864);
    float _1874 = ((_1830 * cbLight._m0[_1824].y) * _1866) + ((_1841 * cbLight._m0[_1834].y) * _1864);
    float _1875 = ((_1830 * cbLight._m0[_1824].z) * _1866) + ((_1841 * cbLight._m0[_1834].z) * _1864);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1807 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1882)
    {
        _1893 = _1873;
        _1895 = _1874;
        _1897 = _1875;
    }
    else
    {
        uint _1901 = _1807 + 6u;
        float _1917 = (dot(vec3(cbLight._m0[_1807 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _4101 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1920 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1893 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1873;
        _1895 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1874;
        _1897 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1875;
    }
    bool _1900 = _1880.y == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1900)
    {
        _1938 = _1893;
        _1940 = _1895;
        _1942 = _1897;
    }
    else
    {
        uint _2097 = _1807 + 7u;
        float _2113 = (dot(vec3(cbLight._m0[_1807 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4117 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2116 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1938 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _1893;
        _1940 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _1895;
        _1942 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _1897;
    }
    uint _1945 = _1807 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _580) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1807].x + _656;
    float _1961 = cbLight._m0[_1807].y + _657;
    float _1962 = cbLight._m0[_1807].z + _658;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1807].xyz));
    float _4133 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _1974 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _1975 = dot(vec3(_577, _578, _579), vec3(_1967, _1968, _1969));
    float _4155 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1967, _1968, _1969));
    float _4166 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1999 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1974 * ((_1973 * _1999) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _1999) + _1959) * _1973))) * _1973;
    float _4177 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2023 = _1807 + 9u;
    float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _580) * 0.949999988079071044921875);
    float _2035 = _2034 * _2034;
    float _2036 = cbLight._m0[_1845].x + _656;
    float _2037 = cbLight._m0[_1845].y + _657;
    float _2038 = cbLight._m0[_1845].z + _658;
    float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
    float _2043 = _2042 * _2036;
    float _2044 = _2042 * _2037;
    float _2045 = _2042 * _2038;
    float _2046 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1845].xyz));
    float _4188 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2050 = dot(vec3(_577, _578, _579), vec3(_2043, _2044, _2045));
    float _4199 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2043, _2044, _2045));
    float _4210 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2035 * _2035;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2072 = 1.0 - _2035;
    float _2082 = (0.5 / (((_1974 * ((_2049 * _2072) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2072) + _2035) * _2049))) * _2049;
    float _4221 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    float _2094 = (((_2071 * cbLight._m0[_2023].x) * _2084) * _1830) + (((_1998 * cbLight._m0[_1945].x) * _2012) * _1841);
    float _2095 = (((_2071 * cbLight._m0[_2023].y) * _2084) * _1830) + (((_1998 * cbLight._m0[_1945].y) * _2012) * _1841);
    float _2096 = (((_2071 * cbLight._m0[_2023].z) * _2084) * _1830) + (((_1998 * cbLight._m0[_1945].z) * _2012) * _1841);
    float _2158;
    float _2160;
    float _2162;
    if (_1882)
    {
        _2158 = _2094;
        _2160 = _2095;
        _2162 = _2096;
    }
    else
    {
        uint _2164 = _1807 + 2u;
        uint _2168 = _1807 + 10u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _580) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _656;
        float _2185 = cbLight._m0[_2164].y + _657;
        float _2186 = cbLight._m0[_2164].z + _658;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2164].xyz));
        float _4232 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2198 = dot(vec3(_577, _578, _579), vec3(_2191, _2192, _2193));
        float _4243 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4254 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2220 = 1.0 - _2183;
        float _2230 = (0.5 / (((_1974 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2220) + _2183) * _2197))) * _2197;
        float _4265 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2158 = (((_2219 * cbLight._m0[_2168].x) * _2232) * _2233) + _2094;
        _2160 = (((_2219 * cbLight._m0[_2168].y) * _2232) * _2233) + _2095;
        _2162 = (((_2219 * cbLight._m0[_2168].z) * _2232) * _2233) + _2096;
    }
    float _2268;
    float _2270;
    float _2272;
    if (_1900)
    {
        _2268 = _2158;
        _2270 = _2160;
        _2272 = _2162;
    }
    else
    {
        uint _2279 = _1807 + 3u;
        uint _2283 = _1807 + 11u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _580) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _656;
        float _2300 = cbLight._m0[_2279].y + _657;
        float _2301 = cbLight._m0[_2279].z + _658;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2279].xyz));
        float _4281 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2313 = dot(vec3(_577, _578, _579), vec3(_2306, _2307, _2308));
        float _4292 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4303 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2335 = 1.0 - _2298;
        float _2345 = (0.5 / (((_1974 * ((_2312 * _2335) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2335) + _2298) * _2312))) * _2312;
        float _4314 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2268 = (((_2334 * cbLight._m0[_2283].x) * _2347) * _2348) + _2158;
        _2270 = (((_2334 * cbLight._m0[_2283].y) * _2347) * _2348) + _2160;
        _2272 = (((_2334 * cbLight._m0[_2283].z) * _2347) * _2348) + _2162;
    }
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_1805.y == 0u)
    {
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2423;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2423;
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2423;
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.x;
        uint _2450 = uint((float(_2438.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2439))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2439)));
        float _2460 = (log2(_2426 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2461 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        uint _2464 = uint(isnan(14.0) ? _2461 : (isnan(_2461) ? 14.0 : min(_2461, 14.0)));
        uvec4 _2469 = texelFetch(g_lightClusterGridBuffer, int(((_2464 << 2u) + (_2450 << 6u)) >> 2u));
        uint _2470 = _2469.x;
        uint _2471 = _2438.z;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((((1u << ((_2471 >> 4u) & 15u)) + 4294967295u) & _2470) == 0u) || ((_2471 & 240u) == 0u))
        {
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
        }
        else
        {
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            uint _2730 = 0u;
            uint _2739;
            bool _2740;
            for (;;)
            {
                _2739 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                _2740 = _2739 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2740)
                {
                    frontier_phi_66_pred = _2724;
                    frontier_phi_66_pred_1 = _2729;
                    frontier_phi_66_pred_2 = _2728;
                    frontier_phi_66_pred_3 = _2727;
                    frontier_phi_66_pred_4 = _2726;
                    frontier_phi_66_pred_5 = _2725;
                }
                else
                {
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    uint _2875;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2739;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    for (;;)
                    {
                        uint _2879 = uint(findLSB(_2875)) + (_2730 << 5u);
                        uint _2876 = (_2875 + 4294967295u) & _2875;
                        uint _2881 = _2879 * 48u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2901 = (_2879 * 48u) + 4u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2920 = (_2879 * 48u) + 8u;
                        vec3 _2931 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x));
                        float _2935 = _2895.x - _2424;
                        float _2936 = _2895.y - _2425;
                        float _2937 = _2895.z - _2426;
                        float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                        float _2941 = inversesqrt(_2938);
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2945 = dot(vec3(_698, _701, _704), vec3(_2942, _2943, _2944));
                        float _2950 = 1.0 - (_2938 * _2895.w);
                        float _4340 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _2952 = sqrt(_2938) * _2914.w;
                        float _2955 = 1.39999997615814208984375 / (_2952 + 1.39999997615814208984375);
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2945) + _2956;
                        float _2962 = _2952 * _2952;
                        float _2966 = ((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2951) / ((_2962 * 0.699999988079071044921875) + 1.0);
                        float _2970 = (-0.0) - _2424;
                        float _2971 = (-0.0) - _2425;
                        float _2972 = (-0.0) - _2426;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2987 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                        float _2988 = 1.0 - _758;
                        float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                        float _2996 = _2995 * _2995;
                        float _2997 = _2996 * _2996;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3008 = dot(vec3(_698, _701, _704), vec3(_2977, _2978, _2979));
                        float _4356 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3012 = dot(vec3(_698, _701, _704), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                        float _4367 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                        float _3020 = _2955 * _2996;
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _2945) + _3021;
                        float _4378 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3026 = 1.0 - _2996;
                        float _3036 = (0.5 / (((_3025 * ((_3011 * _3026) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2996) * _3011))) * _3025;
                        float _4389 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3047 = (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3019 * _3019) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125))) * _2951;
                        _2799 = (_2966 * _2914.x) + _2872;
                        _2800 = (_2966 * _2914.y) + _2873;
                        _2801 = (_2966 * _2914.z) + _2874;
                        _2796 = (_3047 * _2931.x) + _2869;
                        _2797 = (_3047 * _2931.y) + _2870;
                        _2798 = (_3047 * _2931.z) + _2871;
                        if (_2876 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2876;
                        }
                    }
                    frontier_phi_66_pred = _2796;
                    frontier_phi_66_pred_1 = _2801;
                    frontier_phi_66_pred_2 = _2800;
                    frontier_phi_66_pred_3 = _2799;
                    frontier_phi_66_pred_4 = _2798;
                    frontier_phi_66_pred_5 = _2797;
                }
                _2572 = frontier_phi_66_pred;
                _2582 = frontier_phi_66_pred_1;
                _2580 = frontier_phi_66_pred_2;
                _2578 = frontier_phi_66_pred_3;
                _2576 = frontier_phi_66_pred_4;
                _2574 = frontier_phi_66_pred_5;
                uint _2731 = _2730 + 1u;
                if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2724 = _2572;
                    _2725 = _2574;
                    _2726 = _2576;
                    _2727 = _2578;
                    _2728 = _2580;
                    _2729 = _2582;
                    _2730 = _2731;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
        }
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.z;
        uint _2588 = (_2586 >> 8u) & 15u;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((4294967295u << _2588) & _2470) == 0u)
        {
            _2692 = _2571;
            _2694 = _2573;
            _2696 = _2575;
            _2698 = _2577;
            _2700 = _2579;
            _2702 = _2581;
        }
        else
        {
            float _2717 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
            float _2718 = _2717 * _2424;
            float _2719 = _2717 * _2425;
            float _2720 = _2717 * _2426;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2588 < ((_2586 >> 12u) & 15u))
            {
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2852 = _2571;
                float _2853 = _2573;
                float _2854 = _2575;
                float _2855 = _2577;
                float _2856 = _2579;
                float _2857 = _2581;
                uint _2858 = _2588;
                uint _2867;
                bool _2868;
                for (;;)
                {
                    _2867 = texelFetch(g_lightClassification, int((((_2464 << 5u) + (_2450 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                    _2868 = _2867 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2868)
                    {
                        frontier_phi_77_pred = _2857;
                        frontier_phi_77_pred_1 = _2856;
                        frontier_phi_77_pred_2 = _2855;
                        frontier_phi_77_pred_3 = _2854;
                        frontier_phi_77_pred_4 = _2853;
                        frontier_phi_77_pred_5 = _2852;
                    }
                    else
                    {
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        uint _3080 = _2867;
                        uint _3081;
                        vec4 _3106;
                        float _3107;
                        vec4 _3122;
                        vec3 _3134;
                        vec4 _3149;
                        vec4 _3164;
                        float _3210;
                        bool _3211;
                        for (;;)
                        {
                            uint _3091 = ((_2858 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3080));
                            _3081 = (_3080 + 4294967295u) & _3080;
                            uint _3093 = _3091 * 40u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            _3107 = _3106.w;
                            uint _3109 = (_3091 * 40u) + 4u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3124 = (_3091 * 40u) + 8u;
                            _3134 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x));
                            uint _3136 = (_3091 * 40u) + 16u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3091 * 40u) + 20u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3091 * 40u) + 24u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3185 = (_3091 * 40u) + 28u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3210 = fma(_2426, _3198.z, fma(_2425, _3198.y, _3198.x * _2424)) + _3198.w;
                            _3211 = !((fma(_2426, _3179.z, fma(_2425, _3179.y, _3179.x * _2424)) + _3179.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3211)
                            {
                                float _3238 = _3106.x - _2424;
                                float _3239 = _3106.y - _2425;
                                float _3240 = _3106.z - _2426;
                                float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                                float _3244 = inversesqrt(_3241);
                                float _3245 = _3244 * _3238;
                                float _3246 = _3244 * _3239;
                                float _3247 = _3244 * _3240;
                                float _3251 = 1.0 - (_3241 / (_3107 * _3107));
                                float _4400 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3256 = sqrt(_3241) * _3122.w;
                                float _3258 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                                float _3259 = _3258 * _3258;
                                float _3262 = ((1.0 - _3259) * dot(vec3(_3245, _3246, _3247), vec3(_698, _701, _704))) + _3259;
                                float _3265 = _3256 * _3256;
                                float _3269 = (fma(_2426, _3149.z, fma(_2425, _3149.y, _3149.x * _2424)) + _3149.w) / _3210;
                                float _3270 = (fma(_2426, _3164.z, fma(_2425, _3164.y, _3164.x * _2424)) + _3164.w) / _3210;
                                float _3274 = 1.0 - dot(vec2(_3269, _3270), vec2(_3269, _3270));
                                float _4416 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3276 = _3275 * (((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3252) / ((_3265 * 0.699999988079071044921875) + 1.0));
                                float _3288 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                                float _3289 = 1.0 - _758;
                                float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                                float _3297 = _3296 * _3296;
                                float _3298 = _3297 * _3297;
                                float _3299 = _3245 - _2718;
                                float _3300 = _3246 - _2719;
                                float _3301 = _3247 - _2720;
                                float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                                float _3309 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2718, (-0.0) - _2719, (-0.0) - _2720));
                                float _4427 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3313 = dot(vec3(_698, _701, _704), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                                float _4438 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                                float _3321 = _3258 * _3297;
                                float _3322 = _3321 * _3321;
                                float _3328 = ((1.0 - _3322) * dot(vec3(_698, _701, _704), vec3(_3245, _3246, _3247))) + _3322;
                                float _4449 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3330 = 1.0 - _3297;
                                float _3340 = (0.5 / (((_3329 * ((_3312 * _3330) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3297) * _3312))) * _3329;
                                float _4460 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3350 = (_3275 * _3252) * (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3320 * _3320) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3276 * _3122.y;
                                frontier_phi_83_pred_1 = _3276 * _3122.x;
                                frontier_phi_83_pred_2 = _3350 * _3134.z;
                                frontier_phi_83_pred_3 = _3350 * _3134.y;
                                frontier_phi_83_pred_4 = _3350 * _3134.x;
                                frontier_phi_83_pred_5 = _3276 * _3122.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3358 = frontier_phi_83_pred;
                            _3357 = frontier_phi_83_pred_1;
                            _3356 = frontier_phi_83_pred_2;
                            _3355 = frontier_phi_83_pred_3;
                            _3354 = frontier_phi_83_pred_4;
                            _3359 = frontier_phi_83_pred_5;
                            _3064 = _3357 + _3077;
                            _3065 = _3358 + _3078;
                            _3066 = _3359 + _3079;
                            _3061 = _3354 + _3074;
                            _3062 = _3355 + _3075;
                            _3063 = _3356 + _3076;
                            if (_3081 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3081;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3066;
                        frontier_phi_77_pred_1 = _3065;
                        frontier_phi_77_pred_2 = _3064;
                        frontier_phi_77_pred_3 = _3063;
                        frontier_phi_77_pred_4 = _3062;
                        frontier_phi_77_pred_5 = _3061;
                    }
                    _2703 = frontier_phi_77_pred;
                    _2701 = frontier_phi_77_pred_1;
                    _2699 = frontier_phi_77_pred_2;
                    _2697 = frontier_phi_77_pred_3;
                    _2695 = frontier_phi_77_pred_4;
                    _2693 = frontier_phi_77_pred_5;
                    uint _2859 = _2858 + 1u;
                    if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2852 = _2693;
                        _2853 = _2695;
                        _2854 = _2697;
                        _2855 = _2699;
                        _2856 = _2701;
                        _2857 = _2703;
                        _2858 = _2859;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2697;
                frontier_phi_58_59_ladder_1 = _2703;
                frontier_phi_58_59_ladder_2 = _2701;
                frontier_phi_58_59_ladder_3 = _2699;
                frontier_phi_58_59_ladder_4 = _2695;
                frontier_phi_58_59_ladder_5 = _2693;
            }
            else
            {
                frontier_phi_58_59_ladder = _2575;
                frontier_phi_58_59_ladder_1 = _2581;
                frontier_phi_58_59_ladder_2 = _2579;
                frontier_phi_58_59_ladder_3 = _2577;
                frontier_phi_58_59_ladder_4 = _2573;
                frontier_phi_58_59_ladder_5 = _2571;
            }
            _2692 = frontier_phi_58_59_ladder_5;
            _2694 = frontier_phi_58_59_ladder_4;
            _2696 = frontier_phi_58_59_ladder;
            _2698 = frontier_phi_58_59_ladder_3;
            _2700 = frontier_phi_58_59_ladder_2;
            _2702 = frontier_phi_58_59_ladder_1;
        }
        float _2707 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2483 = (_2707 * _2698) + _1938;
        _2485 = (_2707 * _2700) + _1940;
        _2487 = (_2707 * _2702) + _1942;
        _2489 = ((_2692 * 0.039999999105930328369140625) * _2707) + _2268;
        _2491 = ((_2694 * 0.039999999105930328369140625) * _2707) + _2270;
        _2493 = ((_2696 * 0.039999999105930328369140625) * _2707) + _2272;
    }
    else
    {
        _2483 = _1938;
        _2485 = _1940;
        _2487 = _1942;
        _2489 = _2268;
        _2491 = _2270;
        _2493 = _2272;
    }
    float _4476 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4487 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4498 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2510 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2483 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _742))) + ((_2489 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    float _2511 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2485 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _742))) + ((_2491 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    float _2512 = ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2487 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _742))) + ((_2493 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    uint _2513 = _256 + 6u;
    float _2521 = _677 / cbSceneParam._m0[86u].x;
    float _2522 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2536 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2538 = _2536.x;
    float _2539 = _2536.y;
    float _2540 = _2536.z;
    float _2541 = _2536.w;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2596 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2597 = _2596 / _598;
        float _2608 = _2597 * _649;
        float _2609 = _650 * _2597;
        float _2610 = (-0.0) - _2609;
        float _2612 = _2597 * _651;
        float _2614 = (cbSceneParam._m0[77u].w * _2610) / _2596;
        float _2615 = _2614 + cbSceneParam._m0[79u].w;
        float _2616 = cbSceneParam._m0[79u].w - _2609;
        float _2622 = sqrt(((_2608 * _2608) + (_2609 * _2609)) + (_2612 * _2612));
        float _2625 = (1.0 - (cbSceneParam._m0[77u].w / _2596)) * _2622;
        float _2630 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2632 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2809;
        if (abs((_2610 - _2614) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2809 = ((((_2615 > 0.0) ? exp2(_2630 * _2615) : (2.0 - exp2(_2632 * _2615))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2625;
        }
        else
        {
            float _2753 = 1.0 / cbSceneParam._m0[80u].x;
            float _2754 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : max(_2615, _2616));
            float _2755 = isnan(_2616) ? _2615 : (isnan(_2615) ? _2616 : min(_2615, _2616));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            _2809 = ((abs(_2622 / _2610) * cbSceneParam._m0[80u].y) * ((((_2764 - _2765) * 2.0) - ((exp2(_2630 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0)))) - exp2(_2630 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))))) * _2753)) - ((exp2(_2632 * _2764) - exp2(_2632 * _2765)) * _2753))) + (_2625 * cbSceneParam._m0[80u].z);
        }
        vec4 _2811 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, 1.0), 0.0);
        float _2820 = exp2((_2809 * (-1.44269502162933349609375)) * (1.0 - _2811.w));
        float _2821 = log2(_2820);
        float _2837 = log2(_2541);
        _2634 = (exp2(_2837 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2821 * cbSceneParam._m0[78u].x)) * _2811.x) / cbSceneParam._m0[78u].x)) + _2538;
        _2636 = (exp2(_2837 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2821 * cbSceneParam._m0[78u].y)) * _2811.y) / cbSceneParam._m0[78u].y)) + _2539;
        _2638 = (exp2(_2837 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2821 * cbSceneParam._m0[78u].z)) * _2811.z) / cbSceneParam._m0[78u].z)) + _2540;
        _2640 = _2820 * _2541;
    }
    else
    {
        _2634 = _2538;
        _2636 = _2539;
        _2638 = _2540;
        _2640 = _2541;
    }
    bool _2847;
    vec4 _2650;
    vec4 _2672;
    float _2674;
    float _2678;
    float _2679;
    float _2680;
    float _2681;
    bool _2691;
    for (;;)
    {
        _2650 = cbMatDynParam._m0[0u];
        float _2652 = roundEven(_2650.y);
        bool _2653 = _2652 == 3.0;
        float _2654 = log2(_2640);
        float _2661 = exp2(_2654 * cbSceneParam._m0[78u].x) * _2510;
        float _2662 = exp2(_2654 * cbSceneParam._m0[78u].y) * _2511;
        float _2663 = exp2(_2654 * cbSceneParam._m0[78u].z) * _2512;
        float _2670 = _665 + (-0.5);
        _2672 = cbMtdParam._m0[1u];
        _2674 = _2672.y * _2670;
        float _2677 = (_2652 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2678 = _2677 * (_2653 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2634)));
        _2679 = _2677 * (_2653 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2636)));
        _2680 = _2677 * (_2653 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2638)));
        _2681 = _2670 * 0.999000012874603271484375;
        _2691 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2691)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2681) < 0.5)
            {
                _2847 = true;
                break;
            }
        }
        uint _2788 = _717 + uint(_2650.w);
        if ((cbInstanceData._m0[_2788].w < 1.0) && ((cbInstanceData._m0[_2788].w + _2681) < 0.5))
        {
            _2847 = true;
            break;
        }
        if ((_2674 + 1.0) < _2672.x)
        {
            _2847 = true;
            break;
        }
        _2847 = false;
        break;
    }
    float _3052;
    if (_2847)
    {
        discard_state = true;
        _3052 = 0.0;
    }
    else
    {
        _3052 = cbInstanceData._m0[_2513].w;
    }
    SV_Target.x = _2678;
    SV_Target.y = _2679;
    SV_Target.z = _2680;
    SV_Target.w = _3052;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2513].w;
    discard_exit();
}


