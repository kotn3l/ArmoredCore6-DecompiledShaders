#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1025;
float _3672;
float _3673;
float _3674;
float _3675;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3684 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_298.x * 2.0) + (-1.0)));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_298.y * 2.0) + (-1.0)));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _365 = _363.x;
    float _366 = 1.0 - _365;
    float _382 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_365 - _366) * cbMtdParam._m0[24u].z) + _366) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3695 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _390 = (_383 * (cbMtdParam._m0[17u].x - _278)) + _278;
    float _391 = (_383 * (cbMtdParam._m0[17u].y - _279)) + _279;
    float _392 = (_383 * (cbMtdParam._m0[17u].z - _280)) + _280;
    float _397 = (((_298.z - _328) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _328;
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _417 = (_410.x * 2.0) + (-1.0);
    float _418 = (_410.y * 2.0) + (-1.0);
    float _419 = dot(vec2(_417, _418), vec2(_417, _418));
    float _3706 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _427 = (_383 * (_410.z - _397)) + _397;
    float _439 = (((_417 - _345) + (cbMtdParam._m0[21u].x * _345)) * _383) + _345;
    float _440 = (((_418 - _346) + (cbMtdParam._m0[21u].x * _346)) * _383) + _346;
    float _441 = (_383 * (sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) - _340)) + _340;
    float _446 = cbMtdParam._m0[22u].x + _324.w;
    float _449 = fma(_441, _219 * NORMAL.x, fma(_440, _226 * TANGENT.x, (_212 * _204) * _439));
    float _452 = fma(_441, _219 * NORMAL.y, fma(_440, _226 * TANGENT.y, (_212 * _205) * _439));
    float _455 = fma(_441, _219 * NORMAL.z, fma(_440, _226 * TANGENT.z, (_212 * _206) * _439));
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    float _460 = _459 * _449;
    float _461 = _459 * _452;
    float _462 = _459 * _455;
    float _3717 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _463 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3739 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3750 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3761 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _522);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _522);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _522);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _546 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _548 = _546.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _705 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _711 = (cbMatDynParam._m0[5u].x * _705) + cbMatDynParam._m0[5u].y;
        float _3772 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _716 = (cbMatDynParam._m0[5u].z * _705) + cbMatDynParam._m0[5u].w;
        float _3783 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) - _712)) + _712) < ((_548 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _581 = fma(_462, cbSceneParam._m0[5u].z, fma(_461, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _460));
    float _584 = fma(_462, cbSceneParam._m0[6u].z, fma(_461, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _460));
    float _587 = fma(_462, cbSceneParam._m0[7u].z, fma(_461, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _460));
    uint _600 = _232 + 9u;
    uint _601 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3794 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    vec4 _621 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _625 = ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * TEXCOORD_5.w) * _621.x;
    float _626 = dot(vec3(_460, _461, _462), vec3(_539, _540, _541));
    float _629 = _626 * 2.0;
    float _633 = (_629 * _460) - _539;
    float _634 = (_629 * _461) - _540;
    float _635 = (_629 * _462) - _541;
    float _639 = abs(dot(vec3(_539, _540, _541), vec3(_460, _461, _462)));
    float _3827 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _641 = sqrt(_463);
    float _654 = exp2((_641 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_641 * 3.0));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1024;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _749 = fma(_694, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686));
        float _753 = fma(_694, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686));
        float _757 = fma(_694, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686));
        float _782 = _686 + _460;
        float _783 = _690 + _461;
        float _784 = _694 + _462;
        float _794 = fma(_784, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782)) - _749;
        float _795 = fma(_784, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782)) - _753;
        float _796 = fma(_784, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782)) - _757;
        float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
        float _813 = ((_800 * _794) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_749 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_800 * _795) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_753 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_800 * _796) / cbModelParam._m0[34u].z) + ((((((_757 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        float _852 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_818.x + (-0.5));
        float _854 = _852 * (_818.y + (-0.5));
        float _855 = _852 * (_818.z + (-0.5));
        float _862 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_825.x + (-0.5));
        float _864 = _862 * (_825.y + (-0.5));
        float _865 = _862 * (_825.z + (-0.5));
        float _872 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_832.x + (-0.5));
        float _874 = _872 * (_832.y + (-0.5));
        float _875 = _872 * (_832.z + (-0.5));
        float _882 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_839.x + (-0.5));
        float _884 = _882 * (_839.y + (-0.5));
        float _885 = _882 * (_839.z + (-0.5));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = _853 * 0.5;
        float _890 = _863 * 0.5;
        float _891 = _873 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _906 = (dot(vec3(_460, _461, _462), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _916 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3875 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_918 + 1.0))) + _923) * _886;
        float _933 = _854 * 0.5;
        float _934 = _864 * 0.5;
        float _935 = _874 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_460, _461, _462), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3908 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_960 + 1.0))) + _965) * _887;
        float _975 = _855 * 0.5;
        float _976 = _865 * 0.5;
        float _977 = _875 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_460, _461, _462), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3941 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1002 + 1.0))) + _1007) * _888;
        _1024 = _855;
        _1026 = _854;
        _1027 = _853;
        _1028 = _865;
        _1029 = _864;
        _1030 = _863;
        _1031 = _875;
        _1032 = _874;
        _1033 = _873;
        _1034 = _888;
        _1035 = _887;
        _1036 = _886;
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
    }
    else
    {
        _1024 = _1025;
        _1026 = _1025;
        _1027 = _1025;
        _1028 = _1025;
        _1029 = _1025;
        _1030 = _1025;
        _1031 = _1025;
        _1032 = _1025;
        _1033 = _1025;
        _1034 = _1025;
        _1035 = _1025;
        _1036 = _1025;
        _1037 = 0.0;
        _1038 = 0.0;
        _1039 = 0.0;
    }
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1067 = fma(_694, cbModelParam._m0[30u].z, fma(_690, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _686));
        float _1071 = fma(_694, cbModelParam._m0[31u].z, fma(_690, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _686));
        float _1075 = fma(_694, cbModelParam._m0[32u].z, fma(_690, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _686));
        float _1098 = _686 + _460;
        float _1099 = _690 + _461;
        float _1100 = _694 + _462;
        float _1110 = fma(_1100, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098)) - _1067;
        float _1111 = fma(_1100, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098)) - _1071;
        float _1112 = fma(_1100, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098)) - _1075;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1067 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1071 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[35u].z) + ((((((_1075 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1166 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1133.x + (-0.5));
        float _1168 = _1166 * (_1133.y + (-0.5));
        float _1169 = _1166 * (_1133.z + (-0.5));
        float _1176 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1140.x + (-0.5));
        float _1178 = _1176 * (_1140.y + (-0.5));
        float _1179 = _1176 * (_1140.z + (-0.5));
        float _1186 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1147.x + (-0.5));
        float _1188 = _1186 * (_1147.y + (-0.5));
        float _1189 = _1186 * (_1147.z + (-0.5));
        float _1196 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1154.x + (-0.5));
        float _1198 = _1196 * (_1154.y + (-0.5));
        float _1199 = _1196 * (_1154.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_460, _461, _462), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4004 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1230 + 1.0))) + _1235) * _1200;
        float _1245 = _1168 * 0.5;
        float _1246 = _1178 * 0.5;
        float _1247 = _1188 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_460, _461, _462), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4037 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1272 + 1.0))) + _1277) * _1201;
        float _1287 = _1169 * 0.5;
        float _1288 = _1179 * 0.5;
        float _1289 = _1189 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_460, _461, _462), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4070 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1314 + 1.0))) + _1319) * _1202;
        _1336 = _1169;
        _1337 = _1168;
        _1338 = _1167;
        _1339 = _1179;
        _1340 = _1178;
        _1341 = _1177;
        _1342 = _1189;
        _1343 = _1188;
        _1344 = _1187;
        _1345 = _1202;
        _1346 = _1201;
        _1347 = _1200;
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1025;
        _1337 = _1025;
        _1338 = _1025;
        _1339 = _1025;
        _1340 = _1025;
        _1341 = _1025;
        _1342 = _1025;
        _1343 = _1025;
        _1344 = _1025;
        _1345 = _1025;
        _1346 = _1025;
        _1347 = _1025;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1037)) + _1037;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1038)) + _1038;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1039)) + _1039;
    float _1383 = fma(_1362, cbSceneParam._m0[89u].z, fma(_1361, cbSceneParam._m0[89u].y, _1360 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1362, cbSceneParam._m0[90u].z, fma(_1361, cbSceneParam._m0[90u].y, _1360 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1362, cbSceneParam._m0[91u].z, fma(_1361, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1360));
    float _1404 = _633 * 0.5;
    float _1405 = _634 * 0.5;
    float _1406 = _635 * 0.5;
    float _1407 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1410 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1413 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1447;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1420 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1024, _1028, _1031, _1034));
        float _1424 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1428 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1435 = dot(vec4(cbModelParam._m0[39u]), vec4(_1404, _1405, _1406, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1458;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1449 = dot(vec4(cbModelParam._m0[40u]), vec4(_1404, _1405, _1406, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1462 = (_1458 * cbModelParam._m0[1u].x) + (_1447 * (1.0 - cbModelParam._m0[1u].x));
    float _1472 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _463);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1472 : min(cbModelParam._m0[25u].z, _1472));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_694, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_694, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_694, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_635, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _633));
        float _1535 = fma(_635, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _633));
        float _1538 = fma(_635, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _633));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1566 = frontier_phi_17_15_ladder;
        }
        float _1738;
        if (_1535 > 0.0)
        {
            _1738 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1738 = frontier_phi_26_22_ladder;
        }
        float _2034;
        if (_1538 > 0.0)
        {
            _2034 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2034 = frontier_phi_38_33_ladder;
        }
        float _2036 = isnan(_1738) ? _1566 : (isnan(_1566) ? _1738 : min(_1566, _1738));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1532) + _1521;
        float _2042 = (_2037 * _1535) + _1525;
        float _2043 = (_2037 * _1538) + _1529;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1473);
            frontier_phi_16_38_ladder = _2188.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2188.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2188.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_16_38_ladder_2;
        _1556 = frontier_phi_16_38_ladder_1;
        _1558 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_633, _634, _635), _1473);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _463);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1618 = fma(_694, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686)) + cbModelParam._m0[21u].w;
        float _1622 = fma(_694, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686)) + cbModelParam._m0[22u].w;
        float _1626 = fma(_694, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686)) + cbModelParam._m0[23u].w;
        float _1629 = fma(_635, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _633));
        float _1632 = fma(_635, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _633));
        float _1635 = fma(_635, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _633));
        float _1743;
        if (_1629 > 0.0)
        {
            _1743 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1743 = frontier_phi_28_24_ladder;
        }
        float _2061;
        if (_1632 > 0.0)
        {
            _2061 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2061 = frontier_phi_40_35_ladder;
        }
        float _2388;
        if (_1635 > 0.0)
        {
            _2388 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2388 = frontier_phi_50_47_ladder;
        }
        float _2390 = isnan(_2061) ? _1743 : (isnan(_1743) ? _2061 : min(_1743, _2061));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1629) + _1618;
        float _2396 = (_2391 * _1632) + _1622;
        float _2397 = (_2391 * _1635) + _1626;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2398;
        float _2401 = _2398 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2397 > _2401) || ((_2397 < _2399) || ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 < _2399) || (_2395 > _2401))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2397, cbModelParam._m0[17u].z, fma(_2396, cbModelParam._m0[17u].y, _2395 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2397, cbModelParam._m0[18u].z, fma(_2396, cbModelParam._m0[18u].y, _2395 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2397, cbModelParam._m0[19u].z, fma(_2396, cbModelParam._m0[19u].y, _2395 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_25_50_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1654 = frontier_phi_25_50_ladder_2;
        _1656 = frontier_phi_25_50_ladder_1;
        _1658 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_633, _634, _635), _1563);
        _1654 = _1638.x * cbModelParam._m0[1u].z;
        _1656 = _1638.y * cbModelParam._m0[1u].z;
        _1658 = _1638.z * cbModelParam._m0[1u].z;
    }
    float _1670 = ((((1.0 - _654) * ((_641 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_654 * _641)) * _625;
    float _1671 = _1670 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1672 = _1670 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1673 = _1670 * ((cbModelParam._m0[1u].w * (_1658 - _1558)) + _1558);
    float _1676 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, _1671 * cbSceneParam._m0[91u].x));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1729 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1730 = _1717 / _1729;
    float _1731 = _1721 / _1729;
    float _1732 = _1725 / _1729;
    float _1879;
    float _1880;
    float _1881;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1759 = ((uint(_1732 > cbSceneParam._m0[59u].y) + uint(_1732 > cbSceneParam._m0[59u].x)) + uint(_1732 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1760 = _1759 + 43u;
        uint _1768 = _1759 + 44u;
        uint _1776 = _1759 + 45u;
        uint _1784 = _1759 + 46u;
        float _1795 = fma(_1729, cbSceneParam._m0[_1760].w, fma(_1725, cbSceneParam._m0[_1760].z, fma(_1721, cbSceneParam._m0[_1760].y, _1717 * cbSceneParam._m0[_1760].x)));
        float _1799 = fma(_1729, cbSceneParam._m0[_1768].w, fma(_1725, cbSceneParam._m0[_1768].z, fma(_1721, cbSceneParam._m0[_1768].y, _1717 * cbSceneParam._m0[_1768].x)));
        float _1807 = fma(_1729, cbSceneParam._m0[_1784].w, fma(_1725, cbSceneParam._m0[_1784].z, fma(_1721, cbSceneParam._m0[_1784].y, _1717 * cbSceneParam._m0[_1784].x)));
        float _1812 = cbSceneParam._m0[33u].z * _1807;
        float _1814 = cbSceneParam._m0[33u].w * _1807;
        float _1817 = fma(_1729, cbSceneParam._m0[_1776].w, fma(_1725, cbSceneParam._m0[_1776].z, fma(_1721, cbSceneParam._m0[_1776].y, _1717 * cbSceneParam._m0[_1776].x))) / _1807;
        float _1865 = (cbSceneParam._m0[33u].x - sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732))) * cbSceneParam._m0[33u].y;
        float _4196 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1872 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1812 + _1795) / _1807, (_1814 + _1799) / _1807), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 + _1795) / _1807, (_1799 - _1812) / _1807), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 - _1812) / _1807, (_1799 - _1814) / _1807), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 - _1814) / _1807, (_1812 + _1799) / _1807), _1817), 0.0)).x), vec4(0.25)));
        _1879 = 1.0 - (_1872 * cbSceneParam._m0[34u].x);
        _1880 = 1.0 - (_1872 * cbSceneParam._m0[34u].y);
        _1881 = 1.0 - (_1872 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1879 = 1.0;
        _1880 = 1.0;
        _1881 = 1.0;
    }
    float _1945;
    float _1947;
    float _1949;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1933 = fma(_1729, cbSceneParam._m0[63u].w, fma(_1725, cbSceneParam._m0[63u].z, fma(_1721, cbSceneParam._m0[63u].y, _1717 * cbSceneParam._m0[63u].x)));
        float _1934 = fma(_1729, cbSceneParam._m0[60u].w, fma(_1725, cbSceneParam._m0[60u].z, fma(_1721, cbSceneParam._m0[60u].y, _1717 * cbSceneParam._m0[60u].x))) / _1933;
        float _1935 = fma(_1729, cbSceneParam._m0[61u].w, fma(_1725, cbSceneParam._m0[61u].z, fma(_1721, cbSceneParam._m0[61u].y, _1717 * cbSceneParam._m0[61u].x))) / _1933;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1934 >= cbSceneParam._m0[64u].x) && (_1935 >= cbSceneParam._m0[64u].y)) && (_1934 <= cbSceneParam._m0[64u].z)) && (_1935 <= cbSceneParam._m0[64u].w))
        {
            float _2074 = fma(_1729, cbSceneParam._m0[62u].w, fma(_1725, cbSceneParam._m0[62u].z, fma(_1721, cbSceneParam._m0[62u].y, _1717 * cbSceneParam._m0[62u].x))) / _1933;
            float _2078 = isnan(cbSceneParam._m0[41u].w) ? _2074 : (isnan(_2074) ? cbSceneParam._m0[41u].w : max(_2074, cbSceneParam._m0[41u].w));
            float _2121 = (cbSceneParam._m0[33u].x - sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732))) * cbSceneParam._m0[33u].y;
            float _4212 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
            float _2128 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1934, cbSceneParam._m0[33u].w + _1935), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1934, _1935 - cbSceneParam._m0[33u].z), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1934 - cbSceneParam._m0[33u].z, _1935 - cbSceneParam._m0[33u].w), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1934 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1935), _2078), 0.0)).x), vec4(0.25)));
            float _2132 = 1.0 - (_2128 * cbSceneParam._m0[34u].x);
            float _2133 = 1.0 - (_2128 * cbSceneParam._m0[34u].y);
            float _2134 = 1.0 - (_2128 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2134) ? _1881 : (isnan(_1881) ? _2134 : min(_1881, _2134));
            frontier_phi_37_36_ladder_1 = isnan(_2133) ? _1880 : (isnan(_1880) ? _2133 : min(_1880, _2133));
            frontier_phi_37_36_ladder_2 = isnan(_2132) ? _1879 : (isnan(_1879) ? _2132 : min(_1879, _2132));
        }
        else
        {
            frontier_phi_37_36_ladder = _1881;
            frontier_phi_37_36_ladder_1 = _1880;
            frontier_phi_37_36_ladder_2 = _1879;
        }
        _1945 = frontier_phi_37_36_ladder_2;
        _1947 = frontier_phi_37_36_ladder_1;
        _1949 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1945 = _1879;
        _1947 = _1880;
        _1949 = _1881;
    }
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1964 = _625 + (-1.0);
    float _1969 = (cbLight._m0[_1957].x * _1964) + 1.0;
    float _1970 = (cbLight._m0[_1957].y * _1964) + 1.0;
    float _1971 = (cbLight._m0[_1957].z * _1964) + 1.0;
    float _1972 = (cbLight._m0[_1957].w * _1964) + 1.0;
    uint _1973 = _1956 + 5u;
    float _1979 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1983 = _1956 + 4u;
    float _1993 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1997 = _1956 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_460, _461, _462));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_460, _461, _462));
    float _4248 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _4259 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1973].x * _1979) * _2018) + (((cbLight._m0[_1983].x * _1945) * _1993) * _2016);
    float _2026 = ((_1979 * cbLight._m0[_1973].y) * _2018) + (((cbLight._m0[_1983].y * _1947) * _1993) * _2016);
    float _2027 = ((_1979 * cbLight._m0[_1973].z) * _2018) + (((cbLight._m0[_1983].z * _1949) * _1993) * _2016);
    uvec4 _2031 = floatBitsToUint(cbLight._m0[_1956 + 12u]);
    bool _2033 = _2031.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2033)
    {
        _2135 = _2025;
        _2137 = _2026;
        _2139 = _2027;
    }
    else
    {
        uint _2143 = _1956 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_1956 + 2u].xyz), vec3(_460, _461, _462)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4270 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2162 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2025;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2026;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2027;
    }
    bool _2142 = _2031.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2142)
    {
        _2197 = _2135;
        _2199 = _2137;
        _2201 = _2139;
    }
    else
    {
        uint _2359 = _1956 + 7u;
        float _2375 = (dot(vec3(cbLight._m0[_1956 + 3u].xyz), vec3(_460, _461, _462)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4286 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2378 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2197 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2135;
        _2199 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2137;
        _2201 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2139;
    }
    uint _2204 = _1956 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _463) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_1956].x + _539;
    float _2220 = cbLight._m0[_1956].y + _540;
    float _2221 = cbLight._m0[_1956].z + _541;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_1956].xyz));
    float _4302 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _4313 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _2233 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2234 = dot(vec3(_460, _461, _462), vec3(_2226, _2227, _2228));
    float _4324 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2226, _2227, _2228));
    float _4335 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2233 * ((_2232 * _2258) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2258) + _2218) * _2232))) * _2232;
    float _4346 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2285 = _1956 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _463) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_1997].x + _539;
    float _2299 = cbLight._m0[_1997].y + _540;
    float _2300 = cbLight._m0[_1997].z + _541;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_1997].xyz));
    float _4357 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2312 = dot(vec3(_460, _461, _462), vec3(_2305, _2306, _2307));
    float _4368 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2305, _2306, _2307));
    float _4379 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2334 = 1.0 - _2297;
    float _2344 = (0.5 / (((_2233 * ((_2311 * _2334) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2334) + _2297) * _2311))) * _2311;
    float _4390 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2356 = (((_2333 * cbLight._m0[_2285].x) * _2346) * _1979) + ((((cbLight._m0[_2204].x * _1945) * _2257) * _2271) * _1993);
    float _2357 = (((_2333 * cbLight._m0[_2285].y) * _2346) * _1979) + ((((cbLight._m0[_2204].y * _1947) * _2257) * _2271) * _1993);
    float _2358 = (((_2333 * cbLight._m0[_2285].z) * _2346) * _1979) + ((((cbLight._m0[_2204].z * _1949) * _2257) * _2271) * _1993);
    float _2414;
    float _2416;
    float _2418;
    if (_2033)
    {
        _2414 = _2356;
        _2416 = _2357;
        _2418 = _2358;
    }
    else
    {
        uint _2420 = _1956 + 2u;
        uint _2424 = _1956 + 10u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _463) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _539;
        float _2441 = cbLight._m0[_2420].y + _540;
        float _2442 = cbLight._m0[_2420].z + _541;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2420].xyz));
        float _4401 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2454 = dot(vec3(_460, _461, _462), vec3(_2447, _2448, _2449));
        float _4412 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4423 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2476 = 1.0 - _2439;
        float _2486 = (0.5 / (((_2233 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2476) + _2439) * _2453))) * _2453;
        float _4434 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2414 = (((_2475 * cbLight._m0[_2424].x) * _2488) * _2489) + _2356;
        _2416 = (((_2475 * cbLight._m0[_2424].y) * _2488) * _2489) + _2357;
        _2418 = (((_2475 * cbLight._m0[_2424].z) * _2488) * _2489) + _2358;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2142)
    {
        _2520 = _2414;
        _2522 = _2416;
        _2524 = _2418;
    }
    else
    {
        uint _2531 = _1956 + 3u;
        uint _2535 = _1956 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _463) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _539;
        float _2552 = cbLight._m0[_2531].y + _540;
        float _2553 = cbLight._m0[_2531].z + _541;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2531].xyz));
        float _4450 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2565 = dot(vec3(_460, _461, _462), vec3(_2558, _2559, _2560));
        float _4461 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4472 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2587 = 1.0 - _2550;
        float _2597 = (0.5 / (((_2233 * ((_2564 * _2587) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2587) + _2550) * _2564))) * _2564;
        float _4483 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2520 = (((_2586 * cbLight._m0[_2535].x) * _2599) * _2600) + _2414;
        _2522 = (((_2586 * cbLight._m0[_2535].y) * _2599) * _2600) + _2416;
        _2524 = (((_2586 * cbLight._m0[_2535].z) * _2599) * _2600) + _2418;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1954.y == 0u)
    {
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.x;
        uint _2633 = uint((float(_2621.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2622))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2622)));
        float _2643 = (log2(_1732 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2644 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        uint _2647 = uint(isnan(14.0) ? _2644 : (isnan(_2644) ? 14.0 : min(_2644, 14.0)));
        uvec4 _2652 = texelFetch(g_lightClusterGridBuffer, int(((_2647 << 2u) + (_2633 << 6u)) >> 2u));
        uint _2653 = _2652.x;
        uint _2654 = _2621.z;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((((1u << ((_2654 >> 4u) & 15u)) + 4294967295u) & _2653) == 0u) || ((_2654 & 240u) == 0u))
        {
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
        }
        else
        {
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            uint _2892 = 0u;
            uint _2901;
            bool _2902;
            for (;;)
            {
                _2901 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                _2902 = _2901 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2902)
                {
                    frontier_phi_71_pred = _2891;
                    frontier_phi_71_pred_1 = _2890;
                    frontier_phi_71_pred_2 = _2889;
                    frontier_phi_71_pred_3 = _2888;
                    frontier_phi_71_pred_4 = _2887;
                    frontier_phi_71_pred_5 = _2886;
                }
                else
                {
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    uint _3037;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2901;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    for (;;)
                    {
                        uint _3041 = uint(findLSB(_3037)) + (_2892 << 5u);
                        uint _3038 = (_3037 + 4294967295u) & _3037;
                        uint _3043 = _3041 * 48u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3063 = (_3041 * 48u) + 4u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3082 = (_3041 * 48u) + 8u;
                        vec3 _3093 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x));
                        float _3097 = _3057.x - _1730;
                        float _3098 = _3057.y - _1731;
                        float _3099 = _3057.z - _1732;
                        float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                        float _3103 = inversesqrt(_3100);
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3107 = dot(vec3(_581, _584, _587), vec3(_3104, _3105, _3106));
                        float _3112 = 1.0 - (_3100 * _3057.w);
                        float _4509 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3114 = sqrt(_3100) * _3076.w;
                        float _3117 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3107) + _3118;
                        float _3124 = _3114 * _3114;
                        float _3128 = ((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3113) / ((_3124 * 0.699999988079071044921875) + 1.0);
                        float _3132 = (-0.0) - _1730;
                        float _3133 = (-0.0) - _1731;
                        float _3134 = (-0.0) - _1732;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3148 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                        float _3149 = 1.0 - _641;
                        float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                        float _3157 = _3156 * _3156;
                        float _3158 = _3157 * _3157;
                        float _3159 = _3139 + _3104;
                        float _3160 = _3140 + _3105;
                        float _3161 = _3141 + _3106;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3169 = dot(vec3(_581, _584, _587), vec3(_3139, _3140, _3141));
                        float _4525 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3173 = dot(vec3(_581, _584, _587), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                        float _4536 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                        float _3181 = _3117 * _3157;
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3107) + _3182;
                        float _4547 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3187 = 1.0 - _3157;
                        float _3197 = (0.5 / (((_3186 * ((_3172 * _3187) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3157) * _3172))) * _3186;
                        float _4558 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3208 = (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) / ((_3180 * _3180) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125))) * _3113;
                        _2961 = (_3128 * _3076.x) + _3034;
                        _2962 = (_3128 * _3076.y) + _3035;
                        _2963 = (_3128 * _3076.z) + _3036;
                        _2958 = (_3208 * _3093.x) + _3031;
                        _2959 = (_3208 * _3093.y) + _3032;
                        _2960 = (_3208 * _3093.z) + _3033;
                        if (_3038 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _3038;
                        }
                    }
                    frontier_phi_71_pred = _2963;
                    frontier_phi_71_pred_1 = _2962;
                    frontier_phi_71_pred_2 = _2961;
                    frontier_phi_71_pred_3 = _2960;
                    frontier_phi_71_pred_4 = _2959;
                    frontier_phi_71_pred_5 = _2958;
                }
                _2744 = frontier_phi_71_pred;
                _2742 = frontier_phi_71_pred_1;
                _2740 = frontier_phi_71_pred_2;
                _2738 = frontier_phi_71_pred_3;
                _2736 = frontier_phi_71_pred_4;
                _2734 = frontier_phi_71_pred_5;
                uint _2893 = _2892 + 1u;
                if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2886 = _2734;
                    _2887 = _2736;
                    _2888 = _2738;
                    _2889 = _2740;
                    _2890 = _2742;
                    _2891 = _2744;
                    _2892 = _2893;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
        }
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.z;
        uint _2750 = (_2748 >> 8u) & 15u;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((4294967295u << _2750) & _2653) == 0u)
        {
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
        }
        else
        {
            float _2879 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
            float _2880 = _2879 * _1730;
            float _2881 = _2879 * _1731;
            float _2882 = _2879 * _1732;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2750 < ((_2748 >> 12u) & 15u))
            {
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _3014 = _2733;
                float _3015 = _2735;
                float _3016 = _2737;
                float _3017 = _2739;
                float _3018 = _2741;
                float _3019 = _2743;
                uint _3020 = _2750;
                uint _3029;
                bool _3030;
                for (;;)
                {
                    _3029 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_3020 << 2u)) >> 2u)).x;
                    _3030 = _3029 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3030)
                    {
                        frontier_phi_82_pred = _3019;
                        frontier_phi_82_pred_1 = _3018;
                        frontier_phi_82_pred_2 = _3017;
                        frontier_phi_82_pred_3 = _3016;
                        frontier_phi_82_pred_4 = _3015;
                        frontier_phi_82_pred_5 = _3014;
                    }
                    else
                    {
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3235 = _3014;
                        float _3236 = _3015;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        float _3240 = _3019;
                        uint _3241 = _3029;
                        uint _3242;
                        vec4 _3267;
                        float _3268;
                        vec4 _3283;
                        vec3 _3295;
                        vec4 _3311;
                        vec4 _3326;
                        float _3372;
                        bool _3373;
                        for (;;)
                        {
                            uint _3252 = ((_3020 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3241));
                            _3242 = (_3241 + 4294967295u) & _3241;
                            uint _3254 = _3252 * 40u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3268 = _3267.w;
                            uint _3270 = (_3252 * 40u) + 4u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3252 * 40u) + 8u;
                            _3295 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x));
                            uint _3298 = (_3252 * 40u) + 16u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3252 * 40u) + 20u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3252 * 40u) + 24u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3347 = (_3252 * 40u) + 28u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3372 = fma(_1732, _3360.z, fma(_1731, _3360.y, _3360.x * _1730)) + _3360.w;
                            _3373 = !((fma(_1732, _3341.z, fma(_1731, _3341.y, _3341.x * _1730)) + _3341.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3373)
                            {
                                float _3400 = _3267.x - _1730;
                                float _3401 = _3267.y - _1731;
                                float _3402 = _3267.z - _1732;
                                float _3403 = dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402));
                                float _3406 = inversesqrt(_3403);
                                float _3407 = _3406 * _3400;
                                float _3408 = _3406 * _3401;
                                float _3409 = _3406 * _3402;
                                float _3413 = 1.0 - (_3403 / (_3268 * _3268));
                                float _4569 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3418 = sqrt(_3403) * _3283.w;
                                float _3420 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                                float _3421 = _3420 * _3420;
                                float _3424 = ((1.0 - _3421) * dot(vec3(_3407, _3408, _3409), vec3(_581, _584, _587))) + _3421;
                                float _3427 = _3418 * _3418;
                                float _3431 = (fma(_1732, _3311.z, fma(_1731, _3311.y, _3311.x * _1730)) + _3311.w) / _3372;
                                float _3432 = (fma(_1732, _3326.z, fma(_1731, _3326.y, _3326.x * _1730)) + _3326.w) / _3372;
                                float _3436 = 1.0 - dot(vec2(_3431, _3432), vec2(_3431, _3432));
                                float _4585 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3438 = _3437 * (((isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))) * _3414) / ((_3427 * 0.699999988079071044921875) + 1.0));
                                float _3450 = exp2(log2(1.0 / ((_3427 * 3.5) + 5.0)) * 0.25);
                                float _3451 = 1.0 - _641;
                                float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                                float _3459 = _3458 * _3458;
                                float _3460 = _3459 * _3459;
                                float _3461 = _3407 - _2880;
                                float _3462 = _3408 - _2881;
                                float _3463 = _3409 - _2882;
                                float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                                float _3471 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2880, (-0.0) - _2881, (-0.0) - _2882));
                                float _4596 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3475 = dot(vec3(_581, _584, _587), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                                float _4607 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                                float _3483 = _3420 * _3459;
                                float _3484 = _3483 * _3483;
                                float _3490 = ((1.0 - _3484) * dot(vec3(_581, _584, _587), vec3(_3407, _3408, _3409))) + _3484;
                                float _4618 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3492 = 1.0 - _3459;
                                float _3502 = (0.5 / (((_3491 * ((_3474 * _3492) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3459) * _3474))) * _3491;
                                float _4629 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3512 = (_3437 * _3414) * (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3482 * _3482) * ((_3427 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3438 * _3283.z;
                                frontier_phi_88_pred_1 = _3438 * _3283.y;
                                frontier_phi_88_pred_2 = _3438 * _3283.x;
                                frontier_phi_88_pred_3 = _3512 * _3295.z;
                                frontier_phi_88_pred_4 = _3512 * _3295.y;
                                frontier_phi_88_pred_5 = _3512 * _3295.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_88_pred;
                            _3520 = frontier_phi_88_pred_1;
                            _3519 = frontier_phi_88_pred_2;
                            _3518 = frontier_phi_88_pred_3;
                            _3517 = frontier_phi_88_pred_4;
                            _3516 = frontier_phi_88_pred_5;
                            _3225 = _3519 + _3238;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            if (_3242 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3242;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3227;
                        frontier_phi_82_pred_1 = _3226;
                        frontier_phi_82_pred_2 = _3225;
                        frontier_phi_82_pred_3 = _3224;
                        frontier_phi_82_pred_4 = _3223;
                        frontier_phi_82_pred_5 = _3222;
                    }
                    _2865 = frontier_phi_82_pred;
                    _2863 = frontier_phi_82_pred_1;
                    _2861 = frontier_phi_82_pred_2;
                    _2859 = frontier_phi_82_pred_3;
                    _2857 = frontier_phi_82_pred_4;
                    _2855 = frontier_phi_82_pred_5;
                    uint _3021 = _3020 + 1u;
                    if (_3021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3014 = _2855;
                        _3015 = _2857;
                        _3016 = _2859;
                        _3017 = _2861;
                        _3018 = _2863;
                        _3019 = _2865;
                        _3020 = _3021;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2861;
                frontier_phi_63_64_ladder_1 = _2865;
                frontier_phi_63_64_ladder_2 = _2863;
                frontier_phi_63_64_ladder_3 = _2859;
                frontier_phi_63_64_ladder_4 = _2857;
                frontier_phi_63_64_ladder_5 = _2855;
            }
            else
            {
                frontier_phi_63_64_ladder = _2739;
                frontier_phi_63_64_ladder_1 = _2743;
                frontier_phi_63_64_ladder_2 = _2741;
                frontier_phi_63_64_ladder_3 = _2737;
                frontier_phi_63_64_ladder_4 = _2735;
                frontier_phi_63_64_ladder_5 = _2733;
            }
            _2854 = frontier_phi_63_64_ladder_5;
            _2856 = frontier_phi_63_64_ladder_4;
            _2858 = frontier_phi_63_64_ladder_3;
            _2860 = frontier_phi_63_64_ladder;
            _2862 = frontier_phi_63_64_ladder_2;
            _2864 = frontier_phi_63_64_ladder_1;
        }
        float _2869 = isnan(1.0) ? _625 : (isnan(_625) ? 1.0 : min(_625, 1.0));
        _2666 = (_2869 * _2860) + _2197;
        _2668 = (_2869 * _2862) + _2199;
        _2670 = (_2869 * _2864) + _2201;
        _2672 = ((_2854 * 0.039999999105930328369140625) * _2869) + _2520;
        _2674 = ((_2856 * 0.039999999105930328369140625) * _2869) + _2522;
        _2676 = ((_2858 * 0.039999999105930328369140625) * _2869) + _2524;
    }
    else
    {
        _2666 = _2197;
        _2668 = _2199;
        _2670 = _2201;
        _2672 = _2520;
        _2674 = _2522;
        _2676 = _2524;
    }
    float _4645 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4656 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4667 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2693 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2666 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _625))) + ((_2672 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1462)) * cbPerFrame._m0[3u].x);
    float _2694 = ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2668 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _625))) + ((_2674 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1462)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2670 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _625))) + ((_2676 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1462)) * cbPerFrame._m0[3u].x);
    uint _2696 = _232 + 6u;
    float _2704 = _560 / cbSceneParam._m0[86u].x;
    float _2705 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2719 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2721 = _2719.x;
    float _2722 = _2719.y;
    float _2723 = _2719.z;
    float _2724 = _2719.w;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2758 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2759 = _2758 / _481;
        float _2770 = _2759 * _532;
        float _2771 = _533 * _2759;
        float _2772 = (-0.0) - _2771;
        float _2774 = _2759 * _534;
        float _2776 = (cbSceneParam._m0[77u].w * _2772) / _2758;
        float _2777 = _2776 + cbSceneParam._m0[79u].w;
        float _2778 = cbSceneParam._m0[79u].w - _2771;
        float _2784 = sqrt(((_2770 * _2770) + (_2771 * _2771)) + (_2774 * _2774));
        float _2787 = (1.0 - (cbSceneParam._m0[77u].w / _2758)) * _2784;
        float _2792 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2794 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2971;
        if (abs((_2772 - _2776) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2971 = ((((_2777 > 0.0) ? exp2(_2792 * _2777) : (2.0 - exp2(_2794 * _2777))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2787;
        }
        else
        {
            float _2915 = 1.0 / cbSceneParam._m0[80u].x;
            float _2916 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : max(_2777, _2778));
            float _2917 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : min(_2777, _2778));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            _2971 = ((abs(_2784 / _2772) * cbSceneParam._m0[80u].y) * ((((_2926 - _2927) * 2.0) - ((exp2(_2792 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0)))) - exp2(_2792 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))))) * _2915)) - ((exp2(_2794 * _2926) - exp2(_2794 * _2927)) * _2915))) + (_2787 * cbSceneParam._m0[80u].z);
        }
        vec4 _2973 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, 1.0), 0.0);
        float _2982 = exp2((_2971 * (-1.44269502162933349609375)) * (1.0 - _2973.w));
        float _2983 = log2(_2982);
        float _2999 = log2(_2724);
        _2796 = (exp2(_2999 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].x)) * _2973.x) / cbSceneParam._m0[78u].x)) + _2721;
        _2798 = (exp2(_2999 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].y)) * _2973.y) / cbSceneParam._m0[78u].y)) + _2722;
        _2800 = (exp2(_2999 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].z)) * _2973.z) / cbSceneParam._m0[78u].z)) + _2723;
        _2802 = _2982 * _2724;
    }
    else
    {
        _2796 = _2721;
        _2798 = _2722;
        _2800 = _2723;
        _2802 = _2724;
    }
    bool _3009;
    vec4 _2812;
    vec4 _2834;
    float _2836;
    float _2840;
    float _2841;
    float _2842;
    float _2843;
    bool _2853;
    for (;;)
    {
        _2812 = cbMatDynParam._m0[0u];
        float _2814 = roundEven(_2812.y);
        bool _2815 = _2814 == 3.0;
        float _2816 = log2(_2802);
        float _2823 = exp2(_2816 * cbSceneParam._m0[78u].x) * _2693;
        float _2824 = exp2(_2816 * cbSceneParam._m0[78u].y) * _2694;
        float _2825 = exp2(_2816 * cbSceneParam._m0[78u].z) * _2695;
        float _2832 = _548 + (-0.5);
        _2834 = cbMtdParam._m0[1u];
        _2836 = _2834.y * _2832;
        float _2839 = (_2814 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2840 = _2839 * (_2815 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2796)));
        _2841 = _2839 * (_2815 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2798)));
        _2842 = _2839 * (_2815 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2800)));
        _2843 = _2832 * 0.999000012874603271484375;
        _2853 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2853)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2843) < 0.5)
            {
                _3009 = true;
                break;
            }
        }
        uint _2950 = _600 + uint(_2812.w);
        if ((cbInstanceData._m0[_2950].w < 1.0) && ((cbInstanceData._m0[_2950].w + _2843) < 0.5))
        {
            _3009 = true;
            break;
        }
        if ((_2836 + 1.0) < _2834.x)
        {
            _3009 = true;
            break;
        }
        _3009 = false;
        break;
    }
    float _3213;
    if (_3009)
    {
        discard_state = true;
        _3213 = 0.0;
    }
    else
    {
        _3213 = cbInstanceData._m0[_2696].w;
    }
    SV_Target.x = _2840;
    SV_Target.y = _2841;
    SV_Target.z = _2842;
    SV_Target.w = _3213;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2696].w;
    discard_exit();
}


