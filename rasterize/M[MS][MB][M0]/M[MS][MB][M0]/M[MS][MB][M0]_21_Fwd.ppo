#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _958;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    uint _216 = uint(roundEven(NORMAL.w)) * 13u;
    uint _222 = _216 + 1u;
    uint _226 = _216 + 2u;
    float _235 = sqrt(((cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x) + (cbInstanceData._m0[_216].x * cbInstanceData._m0[_216].x)) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x));
    float _236 = _235 * TEXCOORD.z;
    float _237 = _235 * TEXCOORD.w;
    vec4 _256 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _262 = _256.x * cbMtdParam._m0[9u].x;
    float _263 = _256.y * cbMtdParam._m0[9u].y;
    float _264 = _256.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _286 = _282.z;
    float _291 = (_282.x * 2.0) + (-1.0);
    float _293 = (_282.y * 2.0) + (-1.0);
    float _294 = dot(vec2(_291, _293), vec2(_291, _293));
    float _3268 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _300 = sqrt(1.0 - (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))));
    float _303 = fma(_300, _204, fma(_293, _211, _291 * _197));
    float _306 = fma(_300, _205, fma(_293, _212, _291 * _198));
    float _309 = fma(_300, _206, fma(_293, _213, _291 * _199));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _236) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _237) + cbTextureTilingScale._m0[11u].w));
    float _351 = _349.x;
    float _352 = 1.0 - _351;
    float _361 = (cbMtdParam._m0[19u].x + dot(vec4(_313 * _303, _313 * _306, _313 * _309, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_351 - _352) * cbMtdParam._m0[24u].z) + _352) * cbMtdParam._m0[21u].z);
    float _3279 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _369 = (_362 * (cbMtdParam._m0[17u].x - _262)) + _262;
    float _370 = (_362 * (cbMtdParam._m0[17u].y - _263)) + _263;
    float _371 = (_362 * (cbMtdParam._m0[17u].z - _264)) + _264;
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _236) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _237) + cbTextureTilingScale._m0[15u].w));
    float _391 = (_384.x * 2.0) + (-1.0);
    float _392 = (_384.y * 2.0) + (-1.0);
    float _393 = dot(vec2(_391, _392), vec2(_391, _392));
    float _3290 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _401 = ((_384.z - _286) * _362) + _286;
    float _411 = ((sqrt(1.0 - (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) - _300) * _362) + _300;
    float _414 = (((_391 - _291) * _362) + _291) + (cbMtdParam._m0[21u].x * _291);
    float _415 = (((_392 - _293) * _362) + _293) + (cbMtdParam._m0[21u].x * _293);
    float _420 = cbMtdParam._m0[22u].x + _282.w;
    float _423 = fma(_411, _204, fma(_415, _211, _414 * _197));
    float _426 = fma(_411, _205, fma(_415, _212, _414 * _198));
    float _429 = fma(_411, _206, fma(_415, _213, _414 * _199));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    float _434 = _433 * _423;
    float _435 = _433 * _426;
    float _436 = _433 * _429;
    float _3301 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _437 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3323 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3334 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3345 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _455 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _506 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _496);
    float _507 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _496);
    float _508 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _496);
    float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
    float _513 = _506 * _512;
    float _514 = _507 * _512;
    float _515 = _508 * _512;
    float _521 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _522 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _543 = fma(_436, cbSceneParam._m0[5u].z, fma(_435, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _434));
    float _546 = fma(_436, cbSceneParam._m0[6u].z, fma(_435, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _434));
    float _549 = fma(_436, cbSceneParam._m0[7u].z, fma(_435, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _434));
    uint _563 = (_216 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _569 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_563].x;
    float _570 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_563].y;
    float _571 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_563].z;
    float _3356 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    vec4 _583 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _521, cbSceneParam._m0[86u].y * _522));
    float _587 = ((isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * TEXCOORD_5.w) * _583.x;
    float _588 = dot(vec3(_434, _435, _436), vec3(_513, _514, _515));
    float _591 = _588 * 2.0;
    float _595 = (_591 * _434) - _513;
    float _596 = (_591 * _435) - _514;
    float _597 = (_591 * _436) - _515;
    float _601 = abs(dot(vec3(_513, _514, _515), vec3(_434, _435, _436)));
    float _3389 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _603 = sqrt(_437);
    float _616 = exp2((_603 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_603 * 3.0));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_656, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648));
        float _686 = fma(_656, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648));
        float _690 = fma(_656, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648));
        float _715 = _648 + _434;
        float _716 = _652 + _435;
        float _717 = _656 + _436;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_434, _435, _436), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3437 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_434, _435, _436), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3470 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_434, _435, _436), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3503 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_656, cbModelParam._m0[30u].z, fma(_652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _648));
        float _1001 = fma(_656, cbModelParam._m0[31u].z, fma(_652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _648));
        float _1005 = fma(_656, cbModelParam._m0[32u].z, fma(_652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _648));
        float _1028 = _648 + _434;
        float _1029 = _652 + _435;
        float _1030 = _656 + _436;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_434, _435, _436), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3566 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_434, _435, _436), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3599 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_434, _435, _436), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3632 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _958;
        _1267 = _958;
        _1268 = _958;
        _1269 = _958;
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _970)) + _970;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _971)) + _971;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _972)) + _972;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _595 * 0.5;
    float _1335 = _596 * 0.5;
    float _1336 = _597 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_957, _961, _964, _967));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_959, _962, _965, _968));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_960, _963, _966, _969));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _437);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_656, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_656, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_656, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_597, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _595));
        float _1465 = fma(_597, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _595));
        float _1468 = fma(_597, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _595));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1496 = frontier_phi_14_12_ladder;
        }
        float _1699;
        if (_1465 > 0.0)
        {
            _1699 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1699 = frontier_phi_23_19_ladder;
        }
        float _1942;
        if (_1468 > 0.0)
        {
            _1942 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1942 = frontier_phi_35_30_ladder;
        }
        float _1944 = isnan(_1699) ? _1496 : (isnan(_1496) ? _1699 : min(_1496, _1699));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1462) + _1451;
        float _1950 = (_1945 * _1465) + _1455;
        float _1951 = (_1945 * _1468) + _1459;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1954 = (-1.0) - _1952;
        float _1956 = _1952 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1951 > _1956) || ((_1951 < _1954) || ((_1950 > _1956) || ((_1950 < _1954) || ((_1949 < _1954) || (_1949 > _1956))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2075 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1951, cbModelParam._m0[9u].z, fma(_1950, cbModelParam._m0[9u].y, _1949 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1951, cbModelParam._m0[10u].z, fma(_1950, cbModelParam._m0[10u].y, _1949 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1951, cbModelParam._m0[11u].z, fma(_1950, cbModelParam._m0[11u].y, _1949 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_13_35_ladder = _2075.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2075.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2075.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_13_35_ladder_2;
        _1486 = frontier_phi_13_35_ladder_1;
        _1488 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_595, _596, _597), _1403);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _437);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1547 = fma(_656, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648)) + cbModelParam._m0[21u].w;
        float _1551 = fma(_656, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648)) + cbModelParam._m0[22u].w;
        float _1555 = fma(_656, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648)) + cbModelParam._m0[23u].w;
        float _1558 = fma(_597, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _595));
        float _1561 = fma(_597, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _595));
        float _1564 = fma(_597, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _595));
        float _1704;
        if (_1558 > 0.0)
        {
            _1704 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1704 = frontier_phi_25_21_ladder;
        }
        float _1969;
        if (_1561 > 0.0)
        {
            _1969 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1969 = frontier_phi_37_32_ladder;
        }
        float _2174;
        if (_1564 > 0.0)
        {
            _2174 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2174 = frontier_phi_46_43_ladder;
        }
        float _2176 = isnan(_1969) ? _1704 : (isnan(_1704) ? _1969 : min(_1704, _1969));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1558) + _1547;
        float _2182 = (_2177 * _1561) + _1551;
        float _2183 = (_2177 * _1564) + _1555;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2184;
        float _2187 = _2184 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2183 > _2187) || ((_2183 < _2185) || ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 < _2185) || (_2181 > _2187))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2183, cbModelParam._m0[17u].z, fma(_2182, cbModelParam._m0[17u].y, _2181 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2183, cbModelParam._m0[18u].z, fma(_2182, cbModelParam._m0[18u].y, _2181 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2183, cbModelParam._m0[19u].z, fma(_2182, cbModelParam._m0[19u].y, _2181 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_22_46_ladder = _2382.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2382.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2382.x * cbModelParam._m0[1u].z;
        }
        _1583 = frontier_phi_22_46_ladder_2;
        _1585 = frontier_phi_22_46_ladder_1;
        _1587 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_595, _596, _597), _1493);
        _1583 = _1567.x * cbModelParam._m0[1u].z;
        _1585 = _1567.y * cbModelParam._m0[1u].z;
        _1587 = _1567.z * cbModelParam._m0[1u].z;
    }
    float _1599 = ((((1.0 - _616) * ((_603 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_616 * _603)) * _587;
    float _1600 = _1599 * ((cbModelParam._m0[1u].w * (_1583 - _1484)) + _1484);
    float _1601 = _1599 * ((cbModelParam._m0[1u].w * (_1585 - _1486)) + _1486);
    float _1602 = _1599 * ((cbModelParam._m0[1u].w * (_1587 - _1488)) + _1488);
    float _1605 = fma(_1602, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1602, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1602, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, _1600 * cbSceneParam._m0[91u].x));
    uvec4 _1621 = floatBitsToUint(cbInstanceData._m0[_216 + 5u]);
    uint _1623 = _1621.x * 14u;
    uint _1624 = _1623 + 13u;
    float _1631 = _587 + (-1.0);
    float _1636 = (cbLight._m0[_1624].x * _1631) + 1.0;
    float _1637 = (cbLight._m0[_1624].y * _1631) + 1.0;
    float _1638 = (cbLight._m0[_1624].z * _1631) + 1.0;
    float _1639 = (cbLight._m0[_1624].w * _1631) + 1.0;
    uint _1640 = _1623 + 5u;
    float _1646 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
    uint _1650 = _1623 + 4u;
    float _1657 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1661 = _1623 | 1u;
    float _1672 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_434, _435, _436));
    float _1675 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_434, _435, _436));
    float _3768 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _3779 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1680 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1682 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1689 = ((cbLight._m0[_1640].x * _1646) * _1682) + ((cbLight._m0[_1650].x * _1657) * _1680);
    float _1690 = ((_1646 * cbLight._m0[_1640].y) * _1682) + ((_1657 * cbLight._m0[_1650].y) * _1680);
    float _1691 = ((_1646 * cbLight._m0[_1640].z) * _1682) + ((_1657 * cbLight._m0[_1650].z) * _1680);
    uvec4 _1696 = floatBitsToUint(cbLight._m0[_1623 + 12u]);
    bool _1698 = _1696.x == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1698)
    {
        _1709 = _1689;
        _1711 = _1690;
        _1713 = _1691;
    }
    else
    {
        uint _1717 = _1623 + 6u;
        float _1733 = (dot(vec3(cbLight._m0[_1623 + 2u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _1734 = _1733 * _1733;
        float _3790 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1736 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1709 = (((cbLight._m0[_1717].x * 0.3183098733425140380859375) * _1735) * _1736) + _1689;
        _1711 = (((cbLight._m0[_1717].y * 0.3183098733425140380859375) * _1735) * _1736) + _1690;
        _1713 = (((cbLight._m0[_1717].z * 0.3183098733425140380859375) * _1735) * _1736) + _1691;
    }
    bool _1716 = _1696.y == 0u;
    float _1754;
    float _1756;
    float _1758;
    if (_1716)
    {
        _1754 = _1709;
        _1756 = _1711;
        _1758 = _1713;
    }
    else
    {
        uint _1913 = _1623 + 7u;
        float _1929 = (dot(vec3(cbLight._m0[_1623 + 3u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _1930 = _1929 * _1929;
        float _3806 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1931 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1932 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _1754 = (((cbLight._m0[_1913].x * 0.3183098733425140380859375) * _1931) * _1932) + _1709;
        _1756 = (((cbLight._m0[_1913].y * 0.3183098733425140380859375) * _1931) * _1932) + _1711;
        _1758 = (((cbLight._m0[_1913].z * 0.3183098733425140380859375) * _1931) * _1932) + _1713;
    }
    uint _1761 = _1623 + 8u;
    float _1774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _437) * 0.949999988079071044921875);
    float _1775 = _1774 * _1774;
    float _1776 = cbLight._m0[_1623].x + _513;
    float _1777 = cbLight._m0[_1623].y + _514;
    float _1778 = cbLight._m0[_1623].z + _515;
    float _1782 = inversesqrt(dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778)));
    float _1783 = _1782 * _1776;
    float _1784 = _1782 * _1777;
    float _1785 = _1782 * _1778;
    float _1786 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1623].xyz));
    float _3822 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _1790 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1791 = dot(vec3(_434, _435, _436), vec3(_1783, _1784, _1785));
    float _3844 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1783, _1784, _1785));
    float _3855 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1775 * _1775;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1814 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1815 = 1.0 - _1775;
    float _1826 = (0.5 / (((_1790 * ((_1789 * _1815) + _1775)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _1815) + _1775) * _1789))) * _1789;
    float _3866 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1828 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    uint _1839 = _1623 + 9u;
    float _1850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1661].w)) * _437) * 0.949999988079071044921875);
    float _1851 = _1850 * _1850;
    float _1852 = cbLight._m0[_1661].x + _513;
    float _1853 = cbLight._m0[_1661].y + _514;
    float _1854 = cbLight._m0[_1661].z + _515;
    float _1858 = inversesqrt(dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854)));
    float _1859 = _1858 * _1852;
    float _1860 = _1858 * _1853;
    float _1861 = _1858 * _1854;
    float _1862 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1661].xyz));
    float _3877 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1866 = dot(vec3(_434, _435, _436), vec3(_1859, _1860, _1861));
    float _3888 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1870 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1859, _1860, _1861));
    float _3899 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1874 = _1851 * _1851;
    float _1878 = ((_1869 * _1869) * (_1874 + (-1.0))) + 1.0;
    float _1887 = (exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1888 = 1.0 - _1851;
    float _1898 = (0.5 / (((_1790 * ((_1865 * _1888) + _1851)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _1888) + _1851) * _1865))) * _1865;
    float _3910 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1900 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1874 / ((_1878 * _1878) * 3.141590118408203125));
    float _1910 = (((_1887 * cbLight._m0[_1839].x) * _1900) * _1646) + (((_1814 * cbLight._m0[_1761].x) * _1828) * _1657);
    float _1911 = (((_1887 * cbLight._m0[_1839].y) * _1900) * _1646) + (((_1814 * cbLight._m0[_1761].y) * _1828) * _1657);
    float _1912 = (((_1887 * cbLight._m0[_1839].z) * _1900) * _1646) + (((_1814 * cbLight._m0[_1761].z) * _1828) * _1657);
    float _1974;
    float _1976;
    float _1978;
    if (_1698)
    {
        _1974 = _1910;
        _1976 = _1911;
        _1978 = _1912;
    }
    else
    {
        uint _1980 = _1623 + 2u;
        uint _1984 = _1623 + 10u;
        float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _437) * 0.949999988079071044921875);
        float _1999 = _1998 * _1998;
        float _2000 = cbLight._m0[_1980].x + _513;
        float _2001 = cbLight._m0[_1980].y + _514;
        float _2002 = cbLight._m0[_1980].z + _515;
        float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
        float _2007 = _2006 * _2000;
        float _2008 = _2006 * _2001;
        float _2009 = _2006 * _2002;
        float _2010 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1980].xyz));
        float _3921 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2013 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _2014 = dot(vec3(_434, _435, _436), vec3(_2007, _2008, _2009));
        float _3932 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2018 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2007, _2008, _2009));
        float _3943 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2022 = _1999 * _1999;
        float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
        float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2036 = 1.0 - _1999;
        float _2046 = (0.5 / (((_1790 * ((_2013 * _2036) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _2036) + _1999) * _2013))) * _2013;
        float _3954 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2048 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
        float _2049 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1974 = (((_2035 * cbLight._m0[_1984].x) * _2048) * _2049) + _1910;
        _1976 = (((_2035 * cbLight._m0[_1984].y) * _2048) * _2049) + _1911;
        _1978 = (((_2035 * cbLight._m0[_1984].z) * _2048) * _2049) + _1912;
    }
    float _2084;
    float _2086;
    float _2088;
    if (_1716)
    {
        _2084 = _1974;
        _2086 = _1976;
        _2088 = _1978;
    }
    else
    {
        uint _2095 = _1623 + 3u;
        uint _2099 = _1623 + 11u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _437) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _513;
        float _2116 = cbLight._m0[_2095].y + _514;
        float _2117 = cbLight._m0[_2095].z + _515;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2095].xyz));
        float _3970 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2129 = dot(vec3(_434, _435, _436), vec3(_2122, _2123, _2124));
        float _3981 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _3992 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1790 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1790 * _2151) + _2114) * _2128))) * _2128;
        float _4003 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
        _2084 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _1974;
        _2086 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _1976;
        _2088 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _1978;
    }
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1621.y == 0u)
    {
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2239;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2239;
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2239;
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _522) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _521) / _2255)));
        float _2276 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
        }
        else
        {
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            uint _2538 = 0u;
            uint _2547;
            bool _2548;
            for (;;)
            {
                _2547 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2538 << 2u)) >> 2u)).x;
                _2548 = _2547 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2548)
                {
                    frontier_phi_61_pred = _2532;
                    frontier_phi_61_pred_1 = _2537;
                    frontier_phi_61_pred_2 = _2536;
                    frontier_phi_61_pred_3 = _2535;
                    frontier_phi_61_pred_4 = _2534;
                    frontier_phi_61_pred_5 = _2533;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2547;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2538 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _2240;
                        float _2723 = _2682.y - _2241;
                        float _2724 = _2682.z - _2242;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2732 = dot(vec3(_543, _546, _549), vec3(_2729, _2730, _2731));
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _4029 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2732) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _2240;
                        float _2758 = (-0.0) - _2241;
                        float _2759 = (-0.0) - _2242;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2774 = exp2(log2(1.0 / ((_2749 * 3.5) + 5.0)) * 0.25);
                        float _2775 = 1.0 - _603;
                        float _2782 = sqrt(1.0 - ((1.0 - (_2775 * _2775)) * (1.0 - (_2774 * _2774))));
                        float _2783 = _2782 * _2782;
                        float _2784 = _2783 * _2783;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(_543, _546, _549), vec3(_2764, _2765, _2766));
                        float _4045 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2799 = dot(vec3(_543, _546, _549), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _4056 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2806 = ((_2802 * _2802) * (_2784 + (-1.0))) + 1.0;
                        float _2807 = _2742 * _2783;
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2732) + _2808;
                        float _4067 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2813 = 1.0 - _2783;
                        float _2823 = (0.5 / (((_2812 * ((_2798 * _2813) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2813) + _2783) * _2798))) * _2812;
                        float _4078 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2834 = (((_2784 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_2806 * _2806) * ((_2749 * 2.1991131305694580078125) + 3.141590118408203125))) * _2738;
                        _2591 = (_2753 * _2701.x) + _2659;
                        _2592 = (_2753 * _2701.y) + _2660;
                        _2593 = (_2753 * _2701.z) + _2661;
                        _2588 = (_2834 * _2718.x) + _2656;
                        _2589 = (_2834 * _2718.y) + _2657;
                        _2590 = (_2834 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_61_pred = _2588;
                    frontier_phi_61_pred_1 = _2593;
                    frontier_phi_61_pred_2 = _2592;
                    frontier_phi_61_pred_3 = _2591;
                    frontier_phi_61_pred_4 = _2590;
                    frontier_phi_61_pred_5 = _2589;
                }
                _2388 = frontier_phi_61_pred;
                _2398 = frontier_phi_61_pred_1;
                _2396 = frontier_phi_61_pred_2;
                _2394 = frontier_phi_61_pred_3;
                _2392 = frontier_phi_61_pred_4;
                _2390 = frontier_phi_61_pred_5;
                uint _2539 = _2538 + 1u;
                if (_2539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2532 = _2388;
                    _2533 = _2390;
                    _2534 = _2392;
                    _2535 = _2394;
                    _2536 = _2396;
                    _2537 = _2398;
                    _2538 = _2539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
        }
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.z;
        uint _2404 = (_2402 >> 8u) & 15u;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((4294967295u << _2404) & _2286) == 0u)
        {
            _2500 = _2387;
            _2502 = _2389;
            _2504 = _2391;
            _2506 = _2393;
            _2508 = _2395;
            _2510 = _2397;
        }
        else
        {
            float _2525 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _2526 = _2525 * _2240;
            float _2527 = _2525 * _2241;
            float _2528 = _2525 * _2242;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2404 < ((_2402 >> 12u) & 15u))
            {
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2639 = _2387;
                float _2640 = _2389;
                float _2641 = _2391;
                float _2642 = _2393;
                float _2643 = _2395;
                float _2644 = _2397;
                uint _2645 = _2404;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2655)
                    {
                        frontier_phi_67_pred = _2642;
                        frontier_phi_67_pred_1 = _2643;
                        frontier_phi_67_pred_2 = _2644;
                        frontier_phi_67_pred_3 = _2641;
                        frontier_phi_67_pred_4 = _2640;
                        frontier_phi_67_pred_5 = _2639;
                    }
                    else
                    {
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        uint _2858 = _2654;
                        uint _2859;
                        vec4 _2884;
                        float _2885;
                        vec4 _2900;
                        vec3 _2912;
                        vec4 _2928;
                        vec4 _2944;
                        float _2990;
                        bool _2991;
                        for (;;)
                        {
                            uint _2869 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2858));
                            _2859 = (_2858 + 4294967295u) & _2858;
                            uint _2871 = _2869 * 40u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            _2885 = _2884.w;
                            uint _2887 = (_2869 * 40u) + 4u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2902 = (_2869 * 40u) + 8u;
                            _2912 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x));
                            uint _2915 = (_2869 * 40u) + 16u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2931 = (_2869 * 40u) + 20u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2946 = (_2869 * 40u) + 24u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2965 = (_2869 * 40u) + 28u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2990 = fma(_2242, _2978.z, fma(_2241, _2978.y, _2978.x * _2240)) + _2978.w;
                            _2991 = !((fma(_2242, _2959.z, fma(_2241, _2959.y, _2959.x * _2240)) + _2959.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2991)
                            {
                                float _3018 = _2884.x - _2240;
                                float _3019 = _2884.y - _2241;
                                float _3020 = _2884.z - _2242;
                                float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                                float _3024 = inversesqrt(_3021);
                                float _3025 = _3024 * _3018;
                                float _3026 = _3024 * _3019;
                                float _3027 = _3024 * _3020;
                                float _3031 = 1.0 - (_3021 / (_2885 * _2885));
                                float _4089 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3036 = sqrt(_3021) * _2900.w;
                                float _3038 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                                float _3039 = _3038 * _3038;
                                float _3042 = ((1.0 - _3039) * dot(vec3(_3025, _3026, _3027), vec3(_543, _546, _549))) + _3039;
                                float _3045 = _3036 * _3036;
                                float _3049 = (fma(_2242, _2928.z, fma(_2241, _2928.y, _2928.x * _2240)) + _2928.w) / _2990;
                                float _3050 = (fma(_2242, _2944.z, fma(_2241, _2944.y, _2944.x * _2240)) + _2944.w) / _2990;
                                float _3054 = 1.0 - dot(vec2(_3049, _3050), vec2(_3049, _3050));
                                float _4105 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3056 = _3055 * (((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3032) / ((_3045 * 0.699999988079071044921875) + 1.0));
                                float _3068 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                                float _3069 = 1.0 - _603;
                                float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                                float _3077 = _3076 * _3076;
                                float _3078 = _3077 * _3077;
                                float _3079 = _3025 - _2526;
                                float _3080 = _3026 - _2527;
                                float _3081 = _3027 - _2528;
                                float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                                float _3089 = dot(vec3(_543, _546, _549), vec3((-0.0) - _2526, (-0.0) - _2527, (-0.0) - _2528));
                                float _4116 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3093 = dot(vec3(_543, _546, _549), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                                float _4127 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                                float _3101 = _3038 * _3077;
                                float _3102 = _3101 * _3101;
                                float _3108 = ((1.0 - _3102) * dot(vec3(_543, _546, _549), vec3(_3025, _3026, _3027))) + _3102;
                                float _4138 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3110 = 1.0 - _3077;
                                float _3120 = (0.5 / (((_3109 * ((_3092 * _3110) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3077) * _3092))) * _3109;
                                float _4149 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3130 = (_3055 * _3032) * (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) / ((_3100 * _3100) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3130 * _2912.x;
                                frontier_phi_73_pred_1 = _3130 * _2912.y;
                                frontier_phi_73_pred_2 = _3056 * _2900.z;
                                frontier_phi_73_pred_3 = _3056 * _2900.y;
                                frontier_phi_73_pred_4 = _3056 * _2900.x;
                                frontier_phi_73_pred_5 = _3130 * _2912.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3134 = frontier_phi_73_pred;
                            _3135 = frontier_phi_73_pred_1;
                            _3139 = frontier_phi_73_pred_2;
                            _3138 = frontier_phi_73_pred_3;
                            _3137 = frontier_phi_73_pred_4;
                            _3136 = frontier_phi_73_pred_5;
                            _2842 = _3137 + _2855;
                            _2843 = _3138 + _2856;
                            _2844 = _3139 + _2857;
                            _2839 = _3134 + _2852;
                            _2840 = _3135 + _2853;
                            _2841 = _3136 + _2854;
                            if (_2859 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2859;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2842;
                        frontier_phi_67_pred_1 = _2843;
                        frontier_phi_67_pred_2 = _2844;
                        frontier_phi_67_pred_3 = _2841;
                        frontier_phi_67_pred_4 = _2840;
                        frontier_phi_67_pred_5 = _2839;
                    }
                    _2507 = frontier_phi_67_pred;
                    _2509 = frontier_phi_67_pred_1;
                    _2511 = frontier_phi_67_pred_2;
                    _2505 = frontier_phi_67_pred_3;
                    _2503 = frontier_phi_67_pred_4;
                    _2501 = frontier_phi_67_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2501;
                        _2640 = _2503;
                        _2641 = _2505;
                        _2642 = _2507;
                        _2643 = _2509;
                        _2644 = _2511;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2509;
                frontier_phi_55_56_ladder_1 = _2511;
                frontier_phi_55_56_ladder_2 = _2507;
                frontier_phi_55_56_ladder_3 = _2505;
                frontier_phi_55_56_ladder_4 = _2503;
                frontier_phi_55_56_ladder_5 = _2501;
            }
            else
            {
                frontier_phi_55_56_ladder = _2395;
                frontier_phi_55_56_ladder_1 = _2397;
                frontier_phi_55_56_ladder_2 = _2393;
                frontier_phi_55_56_ladder_3 = _2391;
                frontier_phi_55_56_ladder_4 = _2389;
                frontier_phi_55_56_ladder_5 = _2387;
            }
            _2500 = frontier_phi_55_56_ladder_5;
            _2502 = frontier_phi_55_56_ladder_4;
            _2504 = frontier_phi_55_56_ladder_3;
            _2506 = frontier_phi_55_56_ladder_2;
            _2508 = frontier_phi_55_56_ladder;
            _2510 = frontier_phi_55_56_ladder_1;
        }
        float _2515 = isnan(1.0) ? _587 : (isnan(_587) ? 1.0 : min(_587, 1.0));
        _2299 = (_2515 * _2506) + _1754;
        _2301 = (_2515 * _2508) + _1756;
        _2303 = (_2515 * _2510) + _1758;
        _2305 = ((_2500 * 0.039999999105930328369140625) * _2515) + _2084;
        _2307 = ((_2502 * 0.039999999105930328369140625) * _2515) + _2086;
        _2309 = ((_2504 * 0.039999999105930328369140625) * _2515) + _2088;
    }
    else
    {
        _2299 = _1754;
        _2301 = _1756;
        _2303 = _1758;
        _2305 = _2084;
        _2307 = _2086;
        _2309 = _2088;
    }
    float _4165 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4176 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4187 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    uint _2329 = _216 + 6u;
    float _2337 = _521 / cbSceneParam._m0[86u].x;
    float _2338 = _522 / cbSceneParam._m0[86u].y;
    vec4 _2352 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, (log2((isnan(cbSceneParam._m0[77u].w) ? _455 : (isnan(_455) ? cbSceneParam._m0[77u].w : min(_455, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2354 = _2352.x;
    float _2355 = _2352.y;
    float _2356 = _2352.z;
    float _2357 = _2352.w;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_455 > cbSceneParam._m0[78u].w)
    {
        float _2412 = isnan(_455) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _455 : min(cbSceneParam._m0[80u].w, _455));
        float _2413 = _2412 / _455;
        float _2424 = _2413 * _506;
        float _2425 = _507 * _2413;
        float _2426 = (-0.0) - _2425;
        float _2428 = _2413 * _508;
        float _2430 = (cbSceneParam._m0[77u].w * _2426) / _2412;
        float _2431 = _2430 + cbSceneParam._m0[79u].w;
        float _2432 = cbSceneParam._m0[79u].w - _2425;
        float _2438 = sqrt(((_2424 * _2424) + (_2425 * _2425)) + (_2428 * _2428));
        float _2441 = (1.0 - (cbSceneParam._m0[77u].w / _2412)) * _2438;
        float _2446 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2448 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2601;
        if (abs((_2426 - _2430) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2601 = ((((_2431 > 0.0) ? exp2(_2446 * _2431) : (2.0 - exp2(_2448 * _2431))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2441;
        }
        else
        {
            float _2561 = 1.0 / cbSceneParam._m0[80u].x;
            float _2562 = isnan(_2432) ? _2431 : (isnan(_2431) ? _2432 : max(_2431, _2432));
            float _2563 = isnan(_2432) ? _2431 : (isnan(_2431) ? _2432 : min(_2431, _2432));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            _2601 = ((abs(_2438 / _2426) * cbSceneParam._m0[80u].y) * ((((_2572 - _2573) * 2.0) - ((exp2(_2446 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)))) - exp2(_2446 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))))) * _2561)) - ((exp2(_2448 * _2572) - exp2(_2448 * _2573)) * _2561))) + (_2441 * cbSceneParam._m0[80u].z);
        }
        vec4 _2603 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2337, _2338, 1.0), 0.0);
        float _2612 = exp2((_2601 * (-1.44269502162933349609375)) * (1.0 - _2603.w));
        float _2613 = log2(_2612);
        float _2629 = log2(_2357);
        _2450 = (exp2(_2629 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].x)) * _2603.x) / cbSceneParam._m0[78u].x)) + _2354;
        _2452 = (exp2(_2629 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].y)) * _2603.y) / cbSceneParam._m0[78u].y)) + _2355;
        _2454 = (exp2(_2629 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].z)) * _2603.z) / cbSceneParam._m0[78u].z)) + _2356;
        _2456 = _2612 * _2357;
    }
    else
    {
        _2450 = _2354;
        _2452 = _2355;
        _2454 = _2356;
        _2456 = _2357;
    }
    float _2468 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2469 = _2468 == 3.0;
    float _2470 = log2(_2456);
    float _2477 = exp2(_2470 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2299 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _587))) + ((_2305 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1392)) * cbPerFrame._m0[3u].x));
    float _2478 = exp2(_2470 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2301 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _587))) + ((_2307 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1392)) * cbPerFrame._m0[3u].x));
    float _2479 = exp2(_2470 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2303 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _587))) + ((_2309 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1392)) * cbPerFrame._m0[3u].x));
    float _2488 = (_2468 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2488 * (_2469 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2450)));
    SV_Target.y = _2488 * (_2469 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2452)));
    SV_Target.z = _2488 * (_2469 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.w = cbInstanceData._m0[_2329].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2329].w;
}


