#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1179;
float _3563;
float _3564;
float _3565;
float _3566;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3575 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _374) + _449;
    float _461 = ((((_428.x - _447) * _374) + _447) * 2.0) + (-1.0);
    float _462 = ((((_428.y - _448) * _374) + _448) * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3586 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))));
    float _471 = _461 + ((((_401.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _472 = _462 + ((((_401.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _475 = fma(_468, _226, fma(_472, _233, _471 * _219));
    float _478 = fma(_468, _227, fma(_472, _234, _471 * _220));
    float _481 = fma(_468, _228, fma(_472, _235, _471 * _221));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _538 = (cbMtdParam._m0[19u].x + dot(vec4(_485 * _475, _485 * _478, _485 * _481, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_531 - _532) * cbMtdParam._m0[24u].z) + _532) * cbMtdParam._m0[21u].z);
    float _3597 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _546 = (_539 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _547 = (_539 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _548 = (_539 * (cbMtdParam._m0[17u].z - _383)) + _383;
    float _553 = (((_401.z - _458) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _458;
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _573 = (_566.x * 2.0) + (-1.0);
    float _574 = (_566.y * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3608 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _583 = ((_566.z - _553) * _539) + _553;
    float _593 = ((sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) - _468) * _539) + _468;
    float _596 = (((_573 - _471) * _539) + _471) + (cbMtdParam._m0[21u].x * _471);
    float _597 = (((_574 - _472) * _539) + _472) + (cbMtdParam._m0[21u].x * _472);
    float _602 = cbMtdParam._m0[22u].x + _501.w;
    float _605 = fma(_593, _226, fma(_597, _233, _596 * _219));
    float _608 = fma(_593, _227, fma(_597, _234, _596 * _220));
    float _611 = fma(_593, _228, fma(_597, _235, _596 * _221));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    float _616 = _615 * _605;
    float _617 = _615 * _608;
    float _618 = _615 * _611;
    float _3619 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _619 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3641 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3652 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3663 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _637 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _689 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _679);
    float _690 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _679);
    float _691 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _679);
    float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
    float _696 = _689 * _695;
    float _697 = _690 * _695;
    float _698 = _691 * _695;
    vec4 _703 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _705 = _703.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _859 = sqrt(((_689 * _689) + (_690 * _690)) + (_691 * _691));
        float _865 = (cbMatDynParam._m0[5u].x * _859) + cbMatDynParam._m0[5u].y;
        float _3674 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _870 = (cbMatDynParam._m0[5u].z * _859) + cbMatDynParam._m0[5u].w;
        float _3685 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) - _866)) + _866) < ((_705 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_618, cbSceneParam._m0[5u].z, fma(_617, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _616));
    float _738 = fma(_618, cbSceneParam._m0[6u].z, fma(_617, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _616));
    float _741 = fma(_618, cbSceneParam._m0[7u].z, fma(_617, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _616));
    uint _754 = _238 + 9u;
    uint _755 = _754 + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3696 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _779 = ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * TEXCOORD_5.w) * _775.x;
    float _780 = dot(vec3(_616, _617, _618), vec3(_696, _697, _698));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _616) - _696;
    float _788 = (_783 * _617) - _697;
    float _789 = (_783 * _618) - _698;
    float _793 = abs(dot(vec3(_696, _697, _698), vec3(_616, _617, _618)));
    float _3729 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_619);
    float _808 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1178;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _903 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _907 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _911 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _936 = _840 + _616;
        float _937 = _844 + _617;
        float _938 = _848 + _618;
        float _948 = fma(_938, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936)) - _903;
        float _949 = fma(_938, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936)) - _907;
        float _950 = fma(_938, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936)) - _911;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_903 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_907 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[34u].z) + ((((((_911 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1006 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_972.x + (-0.5));
        float _1008 = _1006 * (_972.y + (-0.5));
        float _1009 = _1006 * (_972.z + (-0.5));
        float _1016 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_979.x + (-0.5));
        float _1018 = _1016 * (_979.y + (-0.5));
        float _1019 = _1016 * (_979.z + (-0.5));
        float _1026 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_986.x + (-0.5));
        float _1028 = _1026 * (_986.y + (-0.5));
        float _1029 = _1026 * (_986.z + (-0.5));
        float _1036 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_993.x + (-0.5));
        float _1038 = _1036 * (_993.y + (-0.5));
        float _1039 = _1036 * (_993.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1060 = (dot(vec3(_616, _617, _618), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1070 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3777 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1072 + 1.0))) + _1077) * _1040;
        float _1087 = _1008 * 0.5;
        float _1088 = _1018 * 0.5;
        float _1089 = _1028 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_616, _617, _618), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3810 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1114 + 1.0))) + _1119) * _1041;
        float _1129 = _1009 * 0.5;
        float _1130 = _1019 * 0.5;
        float _1131 = _1029 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_616, _617, _618), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3843 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1156 + 1.0))) + _1161) * _1042;
        _1178 = _1009;
        _1180 = _1008;
        _1181 = _1007;
        _1182 = _1019;
        _1183 = _1018;
        _1184 = _1017;
        _1185 = _1029;
        _1186 = _1028;
        _1187 = _1027;
        _1188 = _1042;
        _1189 = _1041;
        _1190 = _1040;
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _1179;
        _1180 = _1179;
        _1181 = _1179;
        _1182 = _1179;
        _1183 = _1179;
        _1184 = _1179;
        _1185 = _1179;
        _1186 = _1179;
        _1187 = _1179;
        _1188 = _1179;
        _1189 = _1179;
        _1190 = _1179;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1221 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1225 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1229 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1252 = _840 + _616;
        float _1253 = _844 + _617;
        float _1254 = _848 + _618;
        float _1264 = fma(_1254, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1221 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1225 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[35u].z) + ((((((_1229 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1320 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1287.x + (-0.5));
        float _1322 = _1320 * (_1287.y + (-0.5));
        float _1323 = _1320 * (_1287.z + (-0.5));
        float _1330 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1294.x + (-0.5));
        float _1332 = _1330 * (_1294.y + (-0.5));
        float _1333 = _1330 * (_1294.z + (-0.5));
        float _1340 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1301.x + (-0.5));
        float _1342 = _1340 * (_1301.y + (-0.5));
        float _1343 = _1340 * (_1301.z + (-0.5));
        float _1350 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1308.x + (-0.5));
        float _1352 = _1350 * (_1308.y + (-0.5));
        float _1353 = _1350 * (_1308.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_616, _617, _618), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3906 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1384 + 1.0))) + _1389) * _1354;
        float _1399 = _1322 * 0.5;
        float _1400 = _1332 * 0.5;
        float _1401 = _1342 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_616, _617, _618), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3939 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1426 + 1.0))) + _1431) * _1355;
        float _1441 = _1323 * 0.5;
        float _1442 = _1333 * 0.5;
        float _1443 = _1343 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_616, _617, _618), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3972 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1468 + 1.0))) + _1473) * _1356;
        _1490 = _1323;
        _1491 = _1322;
        _1492 = _1321;
        _1493 = _1333;
        _1494 = _1332;
        _1495 = _1331;
        _1496 = _1343;
        _1497 = _1342;
        _1498 = _1341;
        _1499 = _1356;
        _1500 = _1355;
        _1501 = _1354;
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1179;
        _1491 = _1179;
        _1492 = _1179;
        _1493 = _1179;
        _1494 = _1179;
        _1495 = _1179;
        _1496 = _1179;
        _1497 = _1179;
        _1498 = _1179;
        _1499 = _1179;
        _1500 = _1179;
        _1501 = _1179;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1191)) + _1191;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1192)) + _1192;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1193)) + _1193;
    float _1537 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1514));
    float _1558 = _787 * 0.5;
    float _1559 = _788 * 0.5;
    float _1560 = _789 * 0.5;
    float _1561 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1564 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1567 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1601;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1574 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1178, _1182, _1185, _1188));
        float _1578 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1582 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1589 = dot(vec4(cbModelParam._m0[39u]), vec4(_1558, _1559, _1560, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1612;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1603 = dot(vec4(cbModelParam._m0[40u]), vec4(_1558, _1559, _1560, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1616 = (_1612 * cbModelParam._m0[1u].x) + (_1601 * (1.0 - cbModelParam._m0[1u].x));
    float _1626 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1626 : min(cbModelParam._m0[25u].z, _1626));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1675 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1679 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1683 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1686 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1689 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1692 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1720;
        if (_1686 > 0.0)
        {
            _1720 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1720 = frontier_phi_17_15_ladder;
        }
        float _1942;
        if (_1689 > 0.0)
        {
            _1942 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1942 = frontier_phi_26_22_ladder;
        }
        float _2188;
        if (_1692 > 0.0)
        {
            _2188 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2188 = frontier_phi_38_33_ladder;
        }
        float _2190 = isnan(_1942) ? _1720 : (isnan(_1720) ? _1942 : min(_1720, _1942));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1686) + _1675;
        float _2196 = (_2191 * _1689) + _1679;
        float _2197 = (_2191 * _1692) + _1683;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1627);
            frontier_phi_16_38_ladder = _2321.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2321.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2321.x * cbModelParam._m0[1u].y;
        }
        _1708 = frontier_phi_16_38_ladder_2;
        _1710 = frontier_phi_16_38_ladder_1;
        _1712 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1627);
        _1708 = _1696.x * cbModelParam._m0[1u].y;
        _1710 = _1696.y * cbModelParam._m0[1u].y;
        _1712 = _1696.z * cbModelParam._m0[1u].y;
    }
    float _1716 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1716 : min(cbModelParam._m0[25u].w, _1716));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1771 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1775 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1779 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1782 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1785 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1788 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1947;
        if (_1782 > 0.0)
        {
            _1947 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1947 = frontier_phi_28_24_ladder;
        }
        float _2215;
        if (_1785 > 0.0)
        {
            _2215 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2215 = frontier_phi_40_35_ladder;
        }
        float _2420;
        if (_1788 > 0.0)
        {
            _2420 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2420 = frontier_phi_49_46_ladder;
        }
        float _2422 = isnan(_2215) ? _1947 : (isnan(_1947) ? _2215 : min(_1947, _2215));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1782) + _1771;
        float _2428 = (_2423 * _1785) + _1775;
        float _2429 = (_2423 * _1788) + _1779;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2430;
        float _2433 = _2430 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2429 > _2433) || ((_2429 < _2431) || ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 < _2431) || (_2427 > _2433))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2429, cbModelParam._m0[17u].z, fma(_2428, cbModelParam._m0[17u].y, _2427 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2429, cbModelParam._m0[18u].z, fma(_2428, cbModelParam._m0[18u].y, _2427 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2429, cbModelParam._m0[19u].z, fma(_2428, cbModelParam._m0[19u].y, _2427 * cbModelParam._m0[19u].x))), _1717);
            frontier_phi_25_49_ladder = _2628.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2628.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2628.x * cbModelParam._m0[1u].z;
        }
        _1807 = frontier_phi_25_49_ladder_2;
        _1809 = frontier_phi_25_49_ladder_1;
        _1811 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1717);
        _1807 = _1791.x * cbModelParam._m0[1u].z;
        _1809 = _1791.y * cbModelParam._m0[1u].z;
        _1811 = _1791.z * cbModelParam._m0[1u].z;
    }
    float _1823 = ((((1.0 - _808) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_808 * _795)) * _779;
    float _1824 = _1823 * ((cbModelParam._m0[1u].w * (_1807 - _1708)) + _1708);
    float _1825 = _1823 * ((cbModelParam._m0[1u].w * (_1809 - _1710)) + _1710);
    float _1826 = _1823 * ((cbModelParam._m0[1u].w * (_1811 - _1712)) + _1712);
    float _1829 = fma(_1826, cbSceneParam._m0[89u].z, fma(_1825, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1826, cbSceneParam._m0[90u].z, fma(_1825, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1826, cbSceneParam._m0[91u].z, fma(_1825, cbSceneParam._m0[91u].y, _1824 * cbSceneParam._m0[91u].x));
    vec4 _1843 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_716, _717));
    float _1845 = _1843.w;
    float _1857 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1845);
    float _1858 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1845);
    float _1859 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1845);
    uvec4 _1863 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1865 = _1863.x * 14u;
    uint _1866 = _1865 + 13u;
    float _1873 = _779 + (-1.0);
    float _1878 = (cbLight._m0[_1866].x * _1873) + 1.0;
    float _1879 = (cbLight._m0[_1866].y * _1873) + 1.0;
    float _1880 = (cbLight._m0[_1866].z * _1873) + 1.0;
    float _1881 = (cbLight._m0[_1866].w * _1873) + 1.0;
    uint _1882 = _1865 + 5u;
    float _1888 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1892 = _1865 + 4u;
    float _1901 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1905 = _1865 | 1u;
    float _1916 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_616, _617, _618));
    float _1919 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_616, _617, _618));
    float _4108 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _4119 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1924 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1926 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1933 = ((cbLight._m0[_1882].x * _1888) * _1926) + (((cbLight._m0[_1892].x * _1857) * _1901) * _1924);
    float _1934 = ((_1888 * cbLight._m0[_1882].y) * _1926) + (((cbLight._m0[_1892].y * _1858) * _1901) * _1924);
    float _1935 = ((_1888 * cbLight._m0[_1882].z) * _1926) + (((cbLight._m0[_1892].z * _1859) * _1901) * _1924);
    uvec4 _1939 = floatBitsToUint(cbLight._m0[_1865 + 12u]);
    bool _1941 = _1939.x == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1941)
    {
        _1952 = _1933;
        _1954 = _1934;
        _1956 = _1935;
    }
    else
    {
        uint _1960 = _1865 + 6u;
        float _1976 = (dot(vec3(cbLight._m0[_1865 + 2u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _1977 = _1976 * _1976;
        float _4130 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1979 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _1952 = (((cbLight._m0[_1960].x * 0.3183098733425140380859375) * _1978) * _1979) + _1933;
        _1954 = (((cbLight._m0[_1960].y * 0.3183098733425140380859375) * _1978) * _1979) + _1934;
        _1956 = (((cbLight._m0[_1960].z * 0.3183098733425140380859375) * _1978) * _1979) + _1935;
    }
    bool _1959 = _1939.y == 0u;
    float _1997;
    float _1999;
    float _2001;
    if (_1959)
    {
        _1997 = _1952;
        _1999 = _1954;
        _2001 = _1956;
    }
    else
    {
        uint _2159 = _1865 + 7u;
        float _2175 = (dot(vec3(cbLight._m0[_1865 + 3u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4146 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2178 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _1997 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _1952;
        _1999 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _1954;
        _2001 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _1956;
    }
    uint _2004 = _1865 + 8u;
    float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _619) * 0.949999988079071044921875);
    float _2018 = _2017 * _2017;
    float _2019 = cbLight._m0[_1865].x + _696;
    float _2020 = cbLight._m0[_1865].y + _697;
    float _2021 = cbLight._m0[_1865].z + _698;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2026 = _2025 * _2019;
    float _2027 = _2025 * _2020;
    float _2028 = _2025 * _2021;
    float _2029 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_1865].xyz));
    float _4162 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2033 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2034 = dot(vec3(_616, _617, _618), vec3(_2026, _2027, _2028));
    float _4184 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2026, _2027, _2028));
    float _4195 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2018 * _2018;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2057 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2058 = 1.0 - _2018;
    float _2069 = (0.5 / (((_2033 * ((_2032 * _2058) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_2033 * _2058) + _2018) * _2032))) * _2032;
    float _4206 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    uint _2085 = _1865 + 9u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _619) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1905].x + _696;
    float _2099 = cbLight._m0[_1905].y + _697;
    float _2100 = cbLight._m0[_1905].z + _698;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_1905].xyz));
    float _4217 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2112 = dot(vec3(_616, _617, _618), vec3(_2105, _2106, _2107));
    float _4228 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2116 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2105, _2106, _2107));
    float _4239 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2120 = _2097 * _2097;
    float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
    float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2134 = 1.0 - _2097;
    float _2144 = (0.5 / (((_2033 * ((_2111 * _2134) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2033 * _2134) + _2097) * _2111))) * _2111;
    float _4250 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
    float _2156 = (((_2133 * cbLight._m0[_2085].x) * _2146) * _1888) + ((((cbLight._m0[_2004].x * _1857) * _2057) * _2071) * _1901);
    float _2157 = (((_2133 * cbLight._m0[_2085].y) * _2146) * _1888) + ((((cbLight._m0[_2004].y * _1858) * _2057) * _2071) * _1901);
    float _2158 = (((_2133 * cbLight._m0[_2085].z) * _2146) * _1888) + ((((cbLight._m0[_2004].z * _1859) * _2057) * _2071) * _1901);
    float _2220;
    float _2222;
    float _2224;
    if (_1941)
    {
        _2220 = _2156;
        _2222 = _2157;
        _2224 = _2158;
    }
    else
    {
        uint _2226 = _1865 + 2u;
        uint _2230 = _1865 + 10u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _619) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _696;
        float _2247 = cbLight._m0[_2226].y + _697;
        float _2248 = cbLight._m0[_2226].z + _698;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2226].xyz));
        float _4261 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2260 = dot(vec3(_616, _617, _618), vec3(_2253, _2254, _2255));
        float _4272 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4283 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2282 = 1.0 - _2245;
        float _2292 = (0.5 / (((_2033 * ((_2259 * _2282) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2033 * _2282) + _2245) * _2259))) * _2259;
        float _4294 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2220 = (((_2281 * cbLight._m0[_2230].x) * _2294) * _2295) + _2156;
        _2222 = (((_2281 * cbLight._m0[_2230].y) * _2294) * _2295) + _2157;
        _2224 = (((_2281 * cbLight._m0[_2230].z) * _2294) * _2295) + _2158;
    }
    float _2330;
    float _2332;
    float _2334;
    if (_1959)
    {
        _2330 = _2220;
        _2332 = _2222;
        _2334 = _2224;
    }
    else
    {
        uint _2341 = _1865 + 3u;
        uint _2345 = _1865 + 11u;
        float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _619) * 0.949999988079071044921875);
        float _2360 = _2359 * _2359;
        float _2361 = cbLight._m0[_2341].x + _696;
        float _2362 = cbLight._m0[_2341].y + _697;
        float _2363 = cbLight._m0[_2341].z + _698;
        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
        float _2368 = _2367 * _2361;
        float _2369 = _2367 * _2362;
        float _2370 = _2367 * _2363;
        float _2371 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2341].xyz));
        float _4310 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2375 = dot(vec3(_616, _617, _618), vec3(_2368, _2369, _2370));
        float _4321 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2379 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2368, _2369, _2370));
        float _4332 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2383 = _2360 * _2360;
        float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
        float _2396 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2397 = 1.0 - _2360;
        float _2407 = (0.5 / (((_2033 * ((_2374 * _2397) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2033 * _2397) + _2360) * _2374))) * _2374;
        float _4343 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2330 = (((_2396 * cbLight._m0[_2345].x) * _2409) * _2410) + _2220;
        _2332 = (((_2396 * cbLight._m0[_2345].y) * _2409) * _2410) + _2222;
        _2334 = (((_2396 * cbLight._m0[_2345].z) * _2409) * _2410) + _2224;
    }
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_1863.y == 0u)
    {
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2485;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2485;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2485;
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.x;
        uint _2512 = uint((float(_2500.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2501))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2501)));
        float _2522 = (log2(_2488 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2523 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        uint _2526 = uint(isnan(14.0) ? _2523 : (isnan(_2523) ? 14.0 : min(_2523, 14.0)));
        uvec4 _2531 = texelFetch(g_lightClusterGridBuffer, int(((_2526 << 2u) + (_2512 << 6u)) >> 2u));
        uint _2532 = _2531.x;
        uint _2533 = _2500.z;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((((1u << ((_2533 >> 4u) & 15u)) + 4294967295u) & _2532) == 0u) || ((_2533 & 240u) == 0u))
        {
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
        }
        else
        {
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            uint _2792 = 0u;
            uint _2801;
            bool _2802;
            for (;;)
            {
                _2801 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                _2802 = _2801 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2802)
                {
                    frontier_phi_66_pred = _2786;
                    frontier_phi_66_pred_1 = _2791;
                    frontier_phi_66_pred_2 = _2790;
                    frontier_phi_66_pred_3 = _2789;
                    frontier_phi_66_pred_4 = _2788;
                    frontier_phi_66_pred_5 = _2787;
                }
                else
                {
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    uint _2937;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2801;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2941 = uint(findLSB(_2937)) + (_2792 << 5u);
                        uint _2938 = (_2937 + 4294967295u) & _2937;
                        uint _2943 = _2941 * 48u;
                        vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2963 = (_2941 * 48u) + 4u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 3u)).x));
                        uint _2982 = (_2941 * 48u) + 8u;
                        vec3 _2993 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x));
                        float _2997 = _2957.x - _2486;
                        float _2998 = _2957.y - _2487;
                        float _2999 = _2957.z - _2488;
                        float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                        float _3003 = inversesqrt(_3000);
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3007 = dot(vec3(_735, _738, _741), vec3(_3004, _3005, _3006));
                        float _3012 = 1.0 - (_3000 * _2957.w);
                        float _4369 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3014 = sqrt(_3000) * _2976.w;
                        float _3017 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _3007) + _3018;
                        float _3024 = _3014 * _3014;
                        float _3028 = ((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3013) / ((_3024 * 0.699999988079071044921875) + 1.0);
                        float _3032 = (-0.0) - _2486;
                        float _3033 = (-0.0) - _2487;
                        float _3034 = (-0.0) - _2488;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3049 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                        float _3050 = 1.0 - _795;
                        float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                        float _3058 = _3057 * _3057;
                        float _3059 = _3058 * _3058;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3070 = dot(vec3(_735, _738, _741), vec3(_3039, _3040, _3041));
                        float _4385 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3074 = dot(vec3(_735, _738, _741), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                        float _4396 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                        float _3082 = _3017 * _3058;
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3007) + _3083;
                        float _4407 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3088 = 1.0 - _3058;
                        float _3098 = (0.5 / (((_3087 * ((_3073 * _3088) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3058) * _3073))) * _3087;
                        float _4418 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3109 = (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3081 * _3081) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125))) * _3013;
                        _2861 = (_3028 * _2976.x) + _2934;
                        _2862 = (_3028 * _2976.y) + _2935;
                        _2863 = (_3028 * _2976.z) + _2936;
                        _2858 = (_3109 * _2993.x) + _2931;
                        _2859 = (_3109 * _2993.y) + _2932;
                        _2860 = (_3109 * _2993.z) + _2933;
                        if (_2938 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2938;
                        }
                    }
                    frontier_phi_66_pred = _2858;
                    frontier_phi_66_pred_1 = _2863;
                    frontier_phi_66_pred_2 = _2862;
                    frontier_phi_66_pred_3 = _2861;
                    frontier_phi_66_pred_4 = _2860;
                    frontier_phi_66_pred_5 = _2859;
                }
                _2634 = frontier_phi_66_pred;
                _2644 = frontier_phi_66_pred_1;
                _2642 = frontier_phi_66_pred_2;
                _2640 = frontier_phi_66_pred_3;
                _2638 = frontier_phi_66_pred_4;
                _2636 = frontier_phi_66_pred_5;
                uint _2793 = _2792 + 1u;
                if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2786 = _2634;
                    _2787 = _2636;
                    _2788 = _2638;
                    _2789 = _2640;
                    _2790 = _2642;
                    _2791 = _2644;
                    _2792 = _2793;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
        }
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.z;
        uint _2650 = (_2648 >> 8u) & 15u;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((4294967295u << _2650) & _2532) == 0u)
        {
            _2754 = _2633;
            _2756 = _2635;
            _2758 = _2637;
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
        }
        else
        {
            float _2779 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
            float _2780 = _2779 * _2486;
            float _2781 = _2779 * _2487;
            float _2782 = _2779 * _2488;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2650 < ((_2648 >> 12u) & 15u))
            {
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2914 = _2633;
                float _2915 = _2635;
                float _2916 = _2637;
                float _2917 = _2639;
                float _2918 = _2641;
                float _2919 = _2643;
                uint _2920 = _2650;
                uint _2929;
                bool _2930;
                for (;;)
                {
                    _2929 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                    _2930 = _2929 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2930)
                    {
                        frontier_phi_77_pred = _2919;
                        frontier_phi_77_pred_1 = _2918;
                        frontier_phi_77_pred_2 = _2917;
                        frontier_phi_77_pred_3 = _2916;
                        frontier_phi_77_pred_4 = _2915;
                        frontier_phi_77_pred_5 = _2914;
                    }
                    else
                    {
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        uint _3142 = _2929;
                        uint _3143;
                        vec4 _3168;
                        float _3169;
                        vec4 _3184;
                        vec3 _3196;
                        vec4 _3211;
                        vec4 _3226;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3153 = ((_2920 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3142));
                            _3143 = (_3142 + 4294967295u) & _3142;
                            uint _3155 = _3153 * 40u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3169 = _3168.w;
                            uint _3171 = (_3153 * 40u) + 4u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3186 = (_3153 * 40u) + 8u;
                            _3196 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x));
                            uint _3198 = (_3153 * 40u) + 16u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3153 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3153 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3153 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_2488, _3260.z, fma(_2487, _3260.y, _3260.x * _2486)) + _3260.w;
                            _3273 = !((fma(_2488, _3241.z, fma(_2487, _3241.y, _3241.x * _2486)) + _3241.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3168.x - _2486;
                                float _3301 = _3168.y - _2487;
                                float _3302 = _3168.z - _2488;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3169 * _3169));
                                float _4429 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3318 = sqrt(_3303) * _3184.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_735, _738, _741))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_2488, _3211.z, fma(_2487, _3211.y, _3211.x * _2486)) + _3211.w) / _3272;
                                float _3332 = (fma(_2488, _3226.z, fma(_2487, _3226.y, _3226.x * _2486)) + _3226.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4445 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _795;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2780;
                                float _3362 = _3308 - _2781;
                                float _3363 = _3309 - _2782;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2780, (-0.0) - _2781, (-0.0) - _2782));
                                float _4456 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3375 = dot(vec3(_735, _738, _741), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4467 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_735, _738, _741), vec3(_3307, _3308, _3309))) + _3384;
                                float _4478 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4489 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3338 * _3184.y;
                                frontier_phi_83_pred_1 = _3338 * _3184.x;
                                frontier_phi_83_pred_2 = _3412 * _3196.z;
                                frontier_phi_83_pred_3 = _3412 * _3196.y;
                                frontier_phi_83_pred_4 = _3412 * _3196.x;
                                frontier_phi_83_pred_5 = _3338 * _3184.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_83_pred;
                            _3419 = frontier_phi_83_pred_1;
                            _3418 = frontier_phi_83_pred_2;
                            _3417 = frontier_phi_83_pred_3;
                            _3416 = frontier_phi_83_pred_4;
                            _3421 = frontier_phi_83_pred_5;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            _3123 = _3416 + _3136;
                            _3124 = _3417 + _3137;
                            _3125 = _3418 + _3138;
                            if (_3143 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3143;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3128;
                        frontier_phi_77_pred_1 = _3127;
                        frontier_phi_77_pred_2 = _3126;
                        frontier_phi_77_pred_3 = _3125;
                        frontier_phi_77_pred_4 = _3124;
                        frontier_phi_77_pred_5 = _3123;
                    }
                    _2765 = frontier_phi_77_pred;
                    _2763 = frontier_phi_77_pred_1;
                    _2761 = frontier_phi_77_pred_2;
                    _2759 = frontier_phi_77_pred_3;
                    _2757 = frontier_phi_77_pred_4;
                    _2755 = frontier_phi_77_pred_5;
                    uint _2921 = _2920 + 1u;
                    if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2914 = _2755;
                        _2915 = _2757;
                        _2916 = _2759;
                        _2917 = _2761;
                        _2918 = _2763;
                        _2919 = _2765;
                        _2920 = _2921;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2759;
                frontier_phi_58_59_ladder_1 = _2765;
                frontier_phi_58_59_ladder_2 = _2763;
                frontier_phi_58_59_ladder_3 = _2761;
                frontier_phi_58_59_ladder_4 = _2757;
                frontier_phi_58_59_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_58_59_ladder = _2637;
                frontier_phi_58_59_ladder_1 = _2643;
                frontier_phi_58_59_ladder_2 = _2641;
                frontier_phi_58_59_ladder_3 = _2639;
                frontier_phi_58_59_ladder_4 = _2635;
                frontier_phi_58_59_ladder_5 = _2633;
            }
            _2754 = frontier_phi_58_59_ladder_5;
            _2756 = frontier_phi_58_59_ladder_4;
            _2758 = frontier_phi_58_59_ladder;
            _2760 = frontier_phi_58_59_ladder_3;
            _2762 = frontier_phi_58_59_ladder_2;
            _2764 = frontier_phi_58_59_ladder_1;
        }
        float _2769 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2545 = (_2769 * _2760) + _1997;
        _2547 = (_2769 * _2762) + _1999;
        _2549 = (_2769 * _2764) + _2001;
        _2551 = ((_2754 * 0.039999999105930328369140625) * _2769) + _2330;
        _2553 = ((_2756 * 0.039999999105930328369140625) * _2769) + _2332;
        _2555 = ((_2758 * 0.039999999105930328369140625) * _2769) + _2334;
    }
    else
    {
        _2545 = _1997;
        _2547 = _1999;
        _2549 = _2001;
        _2551 = _2330;
        _2553 = _2332;
        _2555 = _2334;
    }
    float _4505 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4516 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4527 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _2572 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2545 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _779))) + ((_2551 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1616)) * cbPerFrame._m0[3u].x);
    float _2573 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2547 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _779))) + ((_2553 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1616)) * cbPerFrame._m0[3u].x);
    float _2574 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2549 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _779))) + ((_2555 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1616)) * cbPerFrame._m0[3u].x);
    uint _2575 = _238 + 6u;
    float _2583 = _716 / cbSceneParam._m0[86u].x;
    float _2584 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2598 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, (log2((isnan(cbSceneParam._m0[77u].w) ? _637 : (isnan(_637) ? cbSceneParam._m0[77u].w : min(_637, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2600 = _2598.x;
    float _2601 = _2598.y;
    float _2602 = _2598.z;
    float _2603 = _2598.w;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_637 > cbSceneParam._m0[78u].w)
    {
        float _2658 = isnan(_637) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _637 : min(cbSceneParam._m0[80u].w, _637));
        float _2659 = _2658 / _637;
        float _2670 = _2659 * _689;
        float _2671 = _690 * _2659;
        float _2672 = (-0.0) - _2671;
        float _2674 = _2659 * _691;
        float _2676 = (cbSceneParam._m0[77u].w * _2672) / _2658;
        float _2677 = _2676 + cbSceneParam._m0[79u].w;
        float _2678 = cbSceneParam._m0[79u].w - _2671;
        float _2684 = sqrt(((_2670 * _2670) + (_2671 * _2671)) + (_2674 * _2674));
        float _2687 = (1.0 - (cbSceneParam._m0[77u].w / _2658)) * _2684;
        float _2692 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2694 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2672 - _2676) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2677 > 0.0) ? exp2(_2692 * _2677) : (2.0 - exp2(_2694 * _2677))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2687;
        }
        else
        {
            float _2815 = 1.0 / cbSceneParam._m0[80u].x;
            float _2816 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : max(_2677, _2678));
            float _2817 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : min(_2677, _2678));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            _2871 = ((abs(_2684 / _2672) * cbSceneParam._m0[80u].y) * ((((_2826 - _2827) * 2.0) - ((exp2(_2692 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)))) - exp2(_2692 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))))) * _2815)) - ((exp2(_2694 * _2826) - exp2(_2694 * _2827)) * _2815))) + (_2687 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2603);
        _2696 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2600;
        _2698 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2601;
        _2700 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2602;
        _2702 = _2882 * _2603;
    }
    else
    {
        _2696 = _2600;
        _2698 = _2601;
        _2700 = _2602;
        _2702 = _2603;
    }
    bool _2909;
    vec4 _2712;
    vec4 _2734;
    float _2736;
    float _2740;
    float _2741;
    float _2742;
    float _2743;
    bool _2753;
    for (;;)
    {
        _2712 = cbMatDynParam._m0[0u];
        float _2714 = roundEven(_2712.y);
        bool _2715 = _2714 == 3.0;
        float _2716 = log2(_2702);
        float _2723 = exp2(_2716 * cbSceneParam._m0[78u].x) * _2572;
        float _2724 = exp2(_2716 * cbSceneParam._m0[78u].y) * _2573;
        float _2725 = exp2(_2716 * cbSceneParam._m0[78u].z) * _2574;
        float _2732 = _705 + (-0.5);
        _2734 = cbMtdParam._m0[1u];
        _2736 = _2734.y * _2732;
        float _2739 = (_2714 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2740 = _2739 * (_2715 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2696)));
        _2741 = _2739 * (_2715 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2698)));
        _2742 = _2739 * (_2715 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2700)));
        _2743 = _2732 * 0.999000012874603271484375;
        _2753 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2753)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2743) < 0.5)
            {
                _2909 = true;
                break;
            }
        }
        uint _2850 = _754 + uint(_2712.w);
        if ((cbInstanceData._m0[_2850].w < 1.0) && ((cbInstanceData._m0[_2850].w + _2743) < 0.5))
        {
            _2909 = true;
            break;
        }
        if ((_2736 + 1.0) < _2734.x)
        {
            _2909 = true;
            break;
        }
        _2909 = false;
        break;
    }
    float _3114;
    if (_2909)
    {
        discard_state = true;
        _3114 = 0.0;
    }
    else
    {
        _3114 = cbInstanceData._m0[_2575].w;
    }
    SV_Target.x = _2740;
    SV_Target.y = _2741;
    SV_Target.z = _2742;
    SV_Target.w = _3114;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2575].w;
    discard_exit();
}


