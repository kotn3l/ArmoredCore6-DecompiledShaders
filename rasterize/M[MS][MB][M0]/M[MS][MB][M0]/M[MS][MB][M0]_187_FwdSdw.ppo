#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1300;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _371 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _371) * cbMtdParam._m0[24u].x) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3888 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _396 = (_389 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _397 = (_389 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _398 = (_389 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].x) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3899 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _517 = ((_489.x - _508) * _389) + _508;
    float _518 = ((_489.y - _509) * _389) + _509;
    float _519 = ((_489.z - _510) * _389) + _510;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _544 = ((_531.z - _519) * _462) + _519;
    float _547 = ((((_531.x - _517) * _462) + _517) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _518) * _462) + _518) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _3910 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _595 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _598 = ((isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : min(_595, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _607 = (_598 - ((((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _598))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3931 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _615 = (_608 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _616 = (_608 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _617 = (_608 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _629 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _659 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3942 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _668 = ((((cbMtdParam._m0[10u].x - _615) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _660) + _615;
    float _669 = ((((cbMtdParam._m0[10u].y - _616) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _660) + _616;
    float _670 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _617)) * _660) + _617;
    vec4 _684 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3953 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = (_608 * (_684.z - _544)) + _544;
    float _704 = ((cbMtdParam._m0[23u].y - _701) * _660) + _701;
    vec4 _723 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _729 = (_723.x * 2.0) + (-1.0);
    float _730 = (_723.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3964 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _748 = (((_691 - _547) + (cbMtdParam._m0[21u].x * _547)) * _608) + _547;
    float _749 = (((_692 - _549) + (cbMtdParam._m0[21u].x * _549)) * _608) + _549;
    float _750 = (_608 * (sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) - _555)) + _555;
    float _761 = (((_729 - _748) + (_748 * cbMtdParam._m0[22u].z)) * _660) + _748;
    float _762 = (((_730 - _749) + (_749 * cbMtdParam._m0[22u].z)) * _660) + _749;
    float _763 = ((sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _750) * _660) + _750;
    float _765 = cbMtdParam._m0[22u].x + _568.w;
    float _768 = fma(_763, _240 * NORMAL.x, fma(_762, _247 * TANGENT.x, (_233 * _225) * _761));
    float _771 = fma(_763, _240 * NORMAL.y, fma(_762, _247 * TANGENT.y, (_233 * _226) * _761));
    float _774 = fma(_763, _240 * NORMAL.z, fma(_762, _247 * TANGENT.z, (_233 * _227) * _761));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _3975 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _782 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3997 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4008 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4019 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _888 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _891 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _905 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_905].z;
    float _4030 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _929 = ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * TEXCOORD_5.w) * _925.x;
    float _930 = dot(vec3(_779, _780, _781), vec3(_858, _859, _860));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _779) - _858;
    float _938 = (_933 * _780) - _859;
    float _939 = (_933 * _781) - _860;
    float _943 = abs(dot(vec3(_858, _859, _860), vec3(_779, _780, _781)));
    float _4063 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_782);
    float _958 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_998, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990));
        float _1028 = fma(_998, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990));
        float _1032 = fma(_998, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990));
        float _1057 = _990 + _779;
        float _1058 = _994 + _780;
        float _1059 = _998 + _781;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1024;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1028;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1032;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_779, _780, _781), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4111 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_779, _780, _781), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4144 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_779, _780, _781), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4177 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_998, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990));
        float _1342 = fma(_998, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990));
        float _1346 = fma(_998, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990));
        float _1369 = _990 + _779;
        float _1370 = _994 + _780;
        float _1371 = _998 + _781;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_779, _780, _781), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4240 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_779, _780, _781), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4273 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_779, _780, _781), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4306 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1300;
        _1608 = _1300;
        _1609 = _1300;
        _1610 = _1300;
        _1611 = _1300;
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1312)) + _1312;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1313)) + _1313;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1314)) + _1314;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _937 * 0.5;
    float _1676 = _938 * 0.5;
    float _1677 = _939 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_998, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_998, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_998, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1806 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1809 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1837 = frontier_phi_14_12_ladder;
        }
        float _2007;
        if (_1806 > 0.0)
        {
            _2007 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2007 = frontier_phi_23_19_ladder;
        }
        float _2302;
        if (_1809 > 0.0)
        {
            _2302 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2302 = frontier_phi_35_30_ladder;
        }
        float _2304 = isnan(_2007) ? _1837 : (isnan(_1837) ? _2007 : min(_1837, _2007));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1803) + _1792;
        float _2310 = (_2305 * _1806) + _1796;
        float _2311 = (_2305 * _1809) + _1800;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_13_35_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_13_35_ladder_2;
        _1827 = frontier_phi_13_35_ladder_1;
        _1829 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1744);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_998, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_998, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_998, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1902 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1905 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2012;
        if (_1899 > 0.0)
        {
            _2012 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2012 = frontier_phi_25_21_ladder;
        }
        float _2329;
        if (_1902 > 0.0)
        {
            _2329 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2329 = frontier_phi_37_32_ladder;
        }
        float _2656;
        if (_1905 > 0.0)
        {
            _2656 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2656 = frontier_phi_47_44_ladder;
        }
        float _2658 = isnan(_2329) ? _2012 : (isnan(_2012) ? _2329 : min(_2012, _2329));
        float _2659 = isnan(_2656) ? _2658 : (isnan(_2658) ? _2656 : min(_2658, _2656));
        float _2663 = (_2659 * _1899) + _1888;
        float _2664 = (_2659 * _1902) + _1892;
        float _2665 = (_2659 * _1905) + _1896;
        float _2666 = _2659 * 9.9999997473787516355514526367188e-05;
        float _2667 = (-1.0) - _2666;
        float _2669 = _2666 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2665 > _2669) || ((_2665 < _2667) || ((_2664 > _2669) || ((_2664 < _2667) || ((_2663 < _2667) || (_2663 > _2669))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2665, cbModelParam._m0[17u].z, fma(_2664, cbModelParam._m0[17u].y, _2663 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2665, cbModelParam._m0[18u].z, fma(_2664, cbModelParam._m0[18u].y, _2663 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2665, cbModelParam._m0[19u].z, fma(_2664, cbModelParam._m0[19u].y, _2663 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_22_47_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_22_47_ladder_2;
        _1926 = frontier_phi_22_47_ladder_1;
        _1928 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1834);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1940 = ((((1.0 - _958) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_958 * _945)) * _929;
    float _1941 = _1940 * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1942 = _1940 * ((cbModelParam._m0[1u].w * (_1926 - _1827)) + _1827);
    float _1943 = _1940 * ((cbModelParam._m0[1u].w * (_1928 - _1829)) + _1829);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1999 = _1986 / _1998;
    float _2000 = _1990 / _1998;
    float _2001 = _1994 / _1998;
    float _2148;
    float _2149;
    float _2150;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2028 = ((uint(_2001 > cbSceneParam._m0[59u].y) + uint(_2001 > cbSceneParam._m0[59u].x)) + uint(_2001 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2029 = _2028 + 43u;
        uint _2037 = _2028 + 44u;
        uint _2045 = _2028 + 45u;
        uint _2053 = _2028 + 46u;
        float _2064 = fma(_1998, cbSceneParam._m0[_2029].w, fma(_1994, cbSceneParam._m0[_2029].z, fma(_1990, cbSceneParam._m0[_2029].y, _1986 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1998, cbSceneParam._m0[_2037].w, fma(_1994, cbSceneParam._m0[_2037].z, fma(_1990, cbSceneParam._m0[_2037].y, _1986 * cbSceneParam._m0[_2037].x)));
        float _2076 = fma(_1998, cbSceneParam._m0[_2053].w, fma(_1994, cbSceneParam._m0[_2053].z, fma(_1990, cbSceneParam._m0[_2053].y, _1986 * cbSceneParam._m0[_2053].x)));
        float _2081 = cbSceneParam._m0[33u].z * _2076;
        float _2083 = cbSceneParam._m0[33u].w * _2076;
        float _2086 = fma(_1998, cbSceneParam._m0[_2045].w, fma(_1994, cbSceneParam._m0[_2045].z, fma(_1990, cbSceneParam._m0[_2045].y, _1986 * cbSceneParam._m0[_2045].x))) / _2076;
        float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
        float _4432 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2141 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2064) / _2076, (_2083 + _2068) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2064) / _2076, (_2068 - _2081) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2081) / _2076, (_2068 - _2083) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2083) / _2076, (_2081 + _2068) / _2076), _2086), 0.0)).x), vec4(0.25)));
        _2148 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
        _2149 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
        _2150 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2148 = 1.0;
        _2149 = 1.0;
        _2150 = 1.0;
    }
    float _2214;
    float _2216;
    float _2218;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2202 = fma(_1998, cbSceneParam._m0[63u].w, fma(_1994, cbSceneParam._m0[63u].z, fma(_1990, cbSceneParam._m0[63u].y, _1986 * cbSceneParam._m0[63u].x)));
        float _2203 = fma(_1998, cbSceneParam._m0[60u].w, fma(_1994, cbSceneParam._m0[60u].z, fma(_1990, cbSceneParam._m0[60u].y, _1986 * cbSceneParam._m0[60u].x))) / _2202;
        float _2204 = fma(_1998, cbSceneParam._m0[61u].w, fma(_1994, cbSceneParam._m0[61u].z, fma(_1990, cbSceneParam._m0[61u].y, _1986 * cbSceneParam._m0[61u].x))) / _2202;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2203 >= cbSceneParam._m0[64u].x) && (_2204 >= cbSceneParam._m0[64u].y)) && (_2203 <= cbSceneParam._m0[64u].z)) && (_2204 <= cbSceneParam._m0[64u].w))
        {
            float _2342 = fma(_1998, cbSceneParam._m0[62u].w, fma(_1994, cbSceneParam._m0[62u].z, fma(_1990, cbSceneParam._m0[62u].y, _1986 * cbSceneParam._m0[62u].x))) / _2202;
            float _2346 = isnan(cbSceneParam._m0[41u].w) ? _2342 : (isnan(_2342) ? cbSceneParam._m0[41u].w : max(_2342, cbSceneParam._m0[41u].w));
            float _2389 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
            float _4448 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
            float _2396 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2203, cbSceneParam._m0[33u].w + _2204), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2203, _2204 - cbSceneParam._m0[33u].z), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].z, _2204 - cbSceneParam._m0[33u].w), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2204), _2346), 0.0)).x), vec4(0.25)));
            float _2400 = 1.0 - (_2396 * cbSceneParam._m0[34u].x);
            float _2401 = 1.0 - (_2396 * cbSceneParam._m0[34u].y);
            float _2402 = 1.0 - (_2396 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
            frontier_phi_34_33_ladder_1 = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
            frontier_phi_34_33_ladder_2 = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
        }
        else
        {
            frontier_phi_34_33_ladder = _2150;
            frontier_phi_34_33_ladder_1 = _2149;
            frontier_phi_34_33_ladder_2 = _2148;
        }
        _2214 = frontier_phi_34_33_ladder_2;
        _2216 = frontier_phi_34_33_ladder_1;
        _2218 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2214 = _2148;
        _2216 = _2149;
        _2218 = _2150;
    }
    uvec4 _2223 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2225 = _2223.x * 14u;
    uint _2226 = _2225 + 13u;
    float _2233 = _929 + (-1.0);
    float _2238 = (cbLight._m0[_2226].x * _2233) + 1.0;
    float _2239 = (cbLight._m0[_2226].y * _2233) + 1.0;
    float _2240 = (cbLight._m0[_2226].z * _2233) + 1.0;
    float _2241 = (cbLight._m0[_2226].w * _2233) + 1.0;
    uint _2242 = _2225 + 5u;
    float _2248 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2252 = _2225 + 4u;
    float _2261 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2265 = _2225 | 1u;
    float _2276 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_779, _780, _781));
    float _2279 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_779, _780, _781));
    float _4484 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _4495 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2284 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2286 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2293 = ((cbLight._m0[_2242].x * _2248) * _2286) + (((cbLight._m0[_2252].x * _2214) * _2261) * _2284);
    float _2294 = ((_2248 * cbLight._m0[_2242].y) * _2286) + (((cbLight._m0[_2252].y * _2216) * _2261) * _2284);
    float _2295 = ((_2248 * cbLight._m0[_2242].z) * _2286) + (((cbLight._m0[_2252].z * _2218) * _2261) * _2284);
    uvec4 _2299 = floatBitsToUint(cbLight._m0[_2225 + 12u]);
    bool _2301 = _2299.x == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2301)
    {
        _2403 = _2293;
        _2405 = _2294;
        _2407 = _2295;
    }
    else
    {
        uint _2411 = _2225 + 6u;
        float _2427 = (dot(vec3(cbLight._m0[_2225 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4506 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2430 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2403 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2293;
        _2405 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2294;
        _2407 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2295;
    }
    bool _2410 = _2299.y == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2410)
    {
        _2465 = _2403;
        _2467 = _2405;
        _2469 = _2407;
    }
    else
    {
        uint _2627 = _2225 + 7u;
        float _2643 = (dot(vec3(cbLight._m0[_2225 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2644 = _2643 * _2643;
        float _4522 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2645 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2646 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2465 = (((cbLight._m0[_2627].x * 0.3183098733425140380859375) * _2645) * _2646) + _2403;
        _2467 = (((cbLight._m0[_2627].y * 0.3183098733425140380859375) * _2645) * _2646) + _2405;
        _2469 = (((cbLight._m0[_2627].z * 0.3183098733425140380859375) * _2645) * _2646) + _2407;
    }
    uint _2472 = _2225 + 8u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _782) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2225].x + _858;
    float _2488 = cbLight._m0[_2225].y + _859;
    float _2489 = cbLight._m0[_2225].z + _860;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2225].xyz));
    float _4538 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _4549 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2501 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2502 = dot(vec3(_779, _780, _781), vec3(_2494, _2495, _2496));
    float _4560 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2494, _2495, _2496));
    float _4571 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2486 * _2486;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2525 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2526 = 1.0 - _2486;
    float _2537 = (0.5 / (((_2501 * ((_2500 * _2526) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2526) + _2486) * _2500))) * _2500;
    float _4582 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2539 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    uint _2553 = _2225 + 9u;
    float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _782) * 0.949999988079071044921875);
    float _2565 = _2564 * _2564;
    float _2566 = cbLight._m0[_2265].x + _858;
    float _2567 = cbLight._m0[_2265].y + _859;
    float _2568 = cbLight._m0[_2265].z + _860;
    float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
    float _2573 = _2572 * _2566;
    float _2574 = _2572 * _2567;
    float _2575 = _2572 * _2568;
    float _2576 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2265].xyz));
    float _4593 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2580 = dot(vec3(_779, _780, _781), vec3(_2573, _2574, _2575));
    float _4604 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2573, _2574, _2575));
    float _4615 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2565 * _2565;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2601 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2602 = 1.0 - _2565;
    float _2612 = (0.5 / (((_2501 * ((_2579 * _2602) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2602) + _2565) * _2579))) * _2579;
    float _4626 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2614 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    float _2624 = (((_2601 * cbLight._m0[_2553].x) * _2614) * _2248) + ((((cbLight._m0[_2472].x * _2214) * _2525) * _2539) * _2261);
    float _2625 = (((_2601 * cbLight._m0[_2553].y) * _2614) * _2248) + ((((cbLight._m0[_2472].y * _2216) * _2525) * _2539) * _2261);
    float _2626 = (((_2601 * cbLight._m0[_2553].z) * _2614) * _2248) + ((((cbLight._m0[_2472].z * _2218) * _2525) * _2539) * _2261);
    float _2682;
    float _2684;
    float _2686;
    if (_2301)
    {
        _2682 = _2624;
        _2684 = _2625;
        _2686 = _2626;
    }
    else
    {
        uint _2688 = _2225 + 2u;
        uint _2692 = _2225 + 10u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _782) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _858;
        float _2709 = cbLight._m0[_2688].y + _859;
        float _2710 = cbLight._m0[_2688].z + _860;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2688].xyz));
        float _4637 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2722 = dot(vec3(_779, _780, _781), vec3(_2715, _2716, _2717));
        float _4648 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4659 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2743 = (exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2744 = 1.0 - _2707;
        float _2754 = (0.5 / (((_2501 * ((_2721 * _2744) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2744) + _2707) * _2721))) * _2721;
        float _4670 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2682 = (((_2743 * cbLight._m0[_2692].x) * _2756) * _2757) + _2624;
        _2684 = (((_2743 * cbLight._m0[_2692].y) * _2756) * _2757) + _2625;
        _2686 = (((_2743 * cbLight._m0[_2692].z) * _2756) * _2757) + _2626;
    }
    float _2788;
    float _2790;
    float _2792;
    if (_2410)
    {
        _2788 = _2682;
        _2790 = _2684;
        _2792 = _2686;
    }
    else
    {
        uint _2799 = _2225 + 3u;
        uint _2803 = _2225 + 11u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _782) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _858;
        float _2820 = cbLight._m0[_2799].y + _859;
        float _2821 = cbLight._m0[_2799].z + _860;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2799].xyz));
        float _4686 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2833 = dot(vec3(_779, _780, _781), vec3(_2826, _2827, _2828));
        float _4697 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4708 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2854 = (exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2855 = 1.0 - _2818;
        float _2865 = (0.5 / (((_2501 * ((_2832 * _2855) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2501 * _2855) + _2818) * _2832))) * _2832;
        float _4719 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2788 = (((_2854 * cbLight._m0[_2803].x) * _2867) * _2868) + _2682;
        _2790 = (((_2854 * cbLight._m0[_2803].y) * _2867) * _2868) + _2684;
        _2792 = (((_2854 * cbLight._m0[_2803].z) * _2867) * _2868) + _2686;
    }
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_2223.y == 0u)
    {
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.x;
        uint _2901 = uint((float(_2889.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2890))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2890)));
        float _2911 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2912 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        uint _2915 = uint(isnan(14.0) ? _2912 : (isnan(_2912) ? 14.0 : min(_2912, 14.0)));
        uvec4 _2920 = texelFetch(g_lightClusterGridBuffer, int(((_2915 << 2u) + (_2901 << 6u)) >> 2u));
        uint _2921 = _2920.x;
        uint _2922 = _2889.z;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((((1u << ((_2922 >> 4u) & 15u)) + 4294967295u) & _2921) == 0u) || ((_2922 & 240u) == 0u))
        {
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
        }
        else
        {
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            uint _3152 = 0u;
            uint _3161;
            bool _3162;
            for (;;)
            {
                _3161 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                _3162 = _3161 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3162)
                {
                    frontier_phi_66_pred = _3151;
                    frontier_phi_66_pred_1 = _3150;
                    frontier_phi_66_pred_2 = _3149;
                    frontier_phi_66_pred_3 = _3148;
                    frontier_phi_66_pred_4 = _3147;
                    frontier_phi_66_pred_5 = _3146;
                }
                else
                {
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    uint _3276;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3161;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    for (;;)
                    {
                        uint _3280 = uint(findLSB(_3276)) + (_3152 << 5u);
                        uint _3277 = (_3276 + 4294967295u) & _3276;
                        uint _3282 = _3280 * 48u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3302 = (_3280 * 48u) + 4u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3321 = (_3280 * 48u) + 8u;
                        vec3 _3332 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x));
                        float _3336 = _3296.x - _1999;
                        float _3337 = _3296.y - _2000;
                        float _3338 = _3296.z - _2001;
                        float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                        float _3342 = inversesqrt(_3339);
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3346 = dot(vec3(_885, _888, _891), vec3(_3343, _3344, _3345));
                        float _3351 = 1.0 - (_3339 * _3296.w);
                        float _4745 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3353 = sqrt(_3339) * _3315.w;
                        float _3356 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3346) + _3357;
                        float _3363 = _3353 * _3353;
                        float _3367 = ((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3352) / ((_3363 * 0.699999988079071044921875) + 1.0);
                        float _3371 = (-0.0) - _1999;
                        float _3372 = (-0.0) - _2000;
                        float _3373 = (-0.0) - _2001;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3387 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                        float _3388 = 1.0 - _945;
                        float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                        float _3396 = _3395 * _3395;
                        float _3397 = _3396 * _3396;
                        float _3398 = _3378 + _3343;
                        float _3399 = _3379 + _3344;
                        float _3400 = _3380 + _3345;
                        float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                        float _3408 = dot(vec3(_885, _888, _891), vec3(_3378, _3379, _3380));
                        float _4761 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3412 = dot(vec3(_885, _888, _891), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                        float _4772 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3415 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                        float _3420 = _3356 * _3396;
                        float _3421 = _3420 * _3420;
                        float _3424 = ((1.0 - _3421) * _3346) + _3421;
                        float _4783 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3426 = 1.0 - _3396;
                        float _3436 = (0.5 / (((_3425 * ((_3411 * _3426) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3396) * _3411))) * _3425;
                        float _4794 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3447 = (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3419 * _3419) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125))) * _3352;
                        _3205 = (_3367 * _3315.x) + _3273;
                        _3206 = (_3367 * _3315.y) + _3274;
                        _3207 = (_3367 * _3315.z) + _3275;
                        _3202 = (_3447 * _3332.x) + _3270;
                        _3203 = (_3447 * _3332.y) + _3271;
                        _3204 = (_3447 * _3332.z) + _3272;
                        if (_3277 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3277;
                        }
                    }
                    frontier_phi_66_pred = _3207;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                _3012 = frontier_phi_66_pred;
                _3010 = frontier_phi_66_pred_1;
                _3008 = frontier_phi_66_pred_2;
                _3006 = frontier_phi_66_pred_3;
                _3004 = frontier_phi_66_pred_4;
                _3002 = frontier_phi_66_pred_5;
                uint _3153 = _3152 + 1u;
                if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3146 = _3002;
                    _3147 = _3004;
                    _3148 = _3006;
                    _3149 = _3008;
                    _3150 = _3010;
                    _3151 = _3012;
                    _3152 = _3153;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
        }
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.z;
        uint _3018 = (_3016 >> 8u) & 15u;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        if (((4294967295u << _3018) & _2921) == 0u)
        {
            _3114 = _3001;
            _3116 = _3003;
            _3118 = _3005;
            _3120 = _3007;
            _3122 = _3009;
            _3124 = _3011;
        }
        else
        {
            float _3139 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float _3140 = _3139 * _1999;
            float _3141 = _3139 * _2000;
            float _3142 = _3139 * _2001;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3018 < ((_3016 >> 12u) & 15u))
            {
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3253 = _3001;
                float _3254 = _3003;
                float _3255 = _3005;
                float _3256 = _3007;
                float _3257 = _3009;
                float _3258 = _3011;
                uint _3259 = _3018;
                uint _3268;
                bool _3269;
                for (;;)
                {
                    _3268 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                    _3269 = _3268 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3269)
                    {
                        frontier_phi_72_pred = _3258;
                        frontier_phi_72_pred_1 = _3257;
                        frontier_phi_72_pred_2 = _3256;
                        frontier_phi_72_pred_3 = _3255;
                        frontier_phi_72_pred_4 = _3254;
                        frontier_phi_72_pred_5 = _3253;
                    }
                    else
                    {
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3465 = _3253;
                        float _3466 = _3254;
                        float _3467 = _3255;
                        float _3468 = _3256;
                        float _3469 = _3257;
                        float _3470 = _3258;
                        uint _3471 = _3268;
                        uint _3472;
                        vec4 _3497;
                        float _3498;
                        vec4 _3513;
                        vec3 _3525;
                        vec4 _3540;
                        vec4 _3555;
                        float _3601;
                        bool _3602;
                        for (;;)
                        {
                            uint _3482 = ((_3259 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 4u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3482 * 40u) + 8u;
                            _3525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x));
                            uint _3527 = (_3482 * 40u) + 16u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3482 * 40u) + 20u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3482 * 40u) + 24u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3576 = (_3482 * 40u) + 28u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3601 = fma(_2001, _3589.z, fma(_2000, _3589.y, _3589.x * _1999)) + _3589.w;
                            _3602 = !((fma(_2001, _3570.z, fma(_2000, _3570.y, _3570.x * _1999)) + _3570.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3602)
                            {
                                float _3629 = _3497.x - _1999;
                                float _3630 = _3497.y - _2000;
                                float _3631 = _3497.z - _2001;
                                float _3632 = dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631));
                                float _3635 = inversesqrt(_3632);
                                float _3636 = _3635 * _3629;
                                float _3637 = _3635 * _3630;
                                float _3638 = _3635 * _3631;
                                float _3642 = 1.0 - (_3632 / (_3498 * _3498));
                                float _4805 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3647 = sqrt(_3632) * _3513.w;
                                float _3649 = 1.39999997615814208984375 / (_3647 + 1.39999997615814208984375);
                                float _3650 = _3649 * _3649;
                                float _3653 = ((1.0 - _3650) * dot(vec3(_3636, _3637, _3638), vec3(_885, _888, _891))) + _3650;
                                float _3656 = _3647 * _3647;
                                float _3660 = (fma(_2001, _3540.z, fma(_2000, _3540.y, _3540.x * _1999)) + _3540.w) / _3601;
                                float _3661 = (fma(_2001, _3555.z, fma(_2000, _3555.y, _3555.x * _1999)) + _3555.w) / _3601;
                                float _3665 = 1.0 - dot(vec2(_3660, _3661), vec2(_3660, _3661));
                                float _4821 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3667 = _3666 * (((isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0))) * _3643) / ((_3656 * 0.699999988079071044921875) + 1.0));
                                float _3679 = exp2(log2(1.0 / ((_3656 * 3.5) + 5.0)) * 0.25);
                                float _3680 = 1.0 - _945;
                                float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                                float _3688 = _3687 * _3687;
                                float _3689 = _3688 * _3688;
                                float _3690 = _3636 - _3140;
                                float _3691 = _3637 - _3141;
                                float _3692 = _3638 - _3142;
                                float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                                float _3700 = dot(vec3(_885, _888, _891), vec3((-0.0) - _3140, (-0.0) - _3141, (-0.0) - _3142));
                                float _4832 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3704 = dot(vec3(_885, _888, _891), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                                float _4843 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                                float _3712 = _3649 * _3688;
                                float _3713 = _3712 * _3712;
                                float _3719 = ((1.0 - _3713) * dot(vec3(_885, _888, _891), vec3(_3636, _3637, _3638))) + _3713;
                                float _4854 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3721 = 1.0 - _3688;
                                float _3731 = (0.5 / (((_3720 * ((_3703 * _3721) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3688) * _3703))) * _3720;
                                float _4865 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3741 = (_3666 * _3643) * (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3711 * _3711) * ((_3656 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3667 * _3513.y;
                                frontier_phi_78_pred_1 = _3667 * _3513.x;
                                frontier_phi_78_pred_2 = _3741 * _3525.z;
                                frontier_phi_78_pred_3 = _3741 * _3525.y;
                                frontier_phi_78_pred_4 = _3741 * _3525.x;
                                frontier_phi_78_pred_5 = _3667 * _3513.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3749 = frontier_phi_78_pred;
                            _3748 = frontier_phi_78_pred_1;
                            _3747 = frontier_phi_78_pred_2;
                            _3746 = frontier_phi_78_pred_3;
                            _3745 = frontier_phi_78_pred_4;
                            _3750 = frontier_phi_78_pred_5;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3457;
                        frontier_phi_72_pred_1 = _3456;
                        frontier_phi_72_pred_2 = _3455;
                        frontier_phi_72_pred_3 = _3454;
                        frontier_phi_72_pred_4 = _3453;
                        frontier_phi_72_pred_5 = _3452;
                    }
                    _3125 = frontier_phi_72_pred;
                    _3123 = frontier_phi_72_pred_1;
                    _3121 = frontier_phi_72_pred_2;
                    _3119 = frontier_phi_72_pred_3;
                    _3117 = frontier_phi_72_pred_4;
                    _3115 = frontier_phi_72_pred_5;
                    uint _3260 = _3259 + 1u;
                    if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3253 = _3115;
                        _3254 = _3117;
                        _3255 = _3119;
                        _3256 = _3121;
                        _3257 = _3123;
                        _3258 = _3125;
                        _3259 = _3260;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3125;
                frontier_phi_60_61_ladder_1 = _3123;
                frontier_phi_60_61_ladder_2 = _3119;
                frontier_phi_60_61_ladder_3 = _3117;
                frontier_phi_60_61_ladder_4 = _3115;
                frontier_phi_60_61_ladder_5 = _3121;
            }
            else
            {
                frontier_phi_60_61_ladder = _3011;
                frontier_phi_60_61_ladder_1 = _3009;
                frontier_phi_60_61_ladder_2 = _3005;
                frontier_phi_60_61_ladder_3 = _3003;
                frontier_phi_60_61_ladder_4 = _3001;
                frontier_phi_60_61_ladder_5 = _3007;
            }
            _3114 = frontier_phi_60_61_ladder_4;
            _3116 = frontier_phi_60_61_ladder_3;
            _3118 = frontier_phi_60_61_ladder_2;
            _3120 = frontier_phi_60_61_ladder_5;
            _3122 = frontier_phi_60_61_ladder_1;
            _3124 = frontier_phi_60_61_ladder;
        }
        float _3129 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2934 = (_3129 * _3120) + _2465;
        _2936 = (_3129 * _3122) + _2467;
        _2938 = (_3129 * _3124) + _2469;
        _2940 = ((_3114 * 0.039999999105930328369140625) * _3129) + _2788;
        _2942 = ((_3116 * 0.039999999105930328369140625) * _3129) + _2790;
        _2944 = ((_3118 * 0.039999999105930328369140625) * _3129) + _2792;
    }
    else
    {
        _2934 = _2465;
        _2936 = _2467;
        _2938 = _2469;
        _2940 = _2788;
        _2942 = _2790;
        _2944 = _2792;
    }
    float _4881 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4892 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4903 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    uint _2964 = _253 + 6u;
    float _2972 = _866 / cbSceneParam._m0[86u].x;
    float _2973 = _867 / cbSceneParam._m0[86u].y;
    vec4 _2987 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2989 = _2987.x;
    float _2990 = _2987.y;
    float _2991 = _2987.z;
    float _2992 = _2987.w;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _3026 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _3027 = _3026 / _800;
        float _3038 = _3027 * _851;
        float _3039 = _852 * _3027;
        float _3040 = (-0.0) - _3039;
        float _3042 = _3027 * _853;
        float _3044 = (cbSceneParam._m0[77u].w * _3040) / _3026;
        float _3045 = _3044 + cbSceneParam._m0[79u].w;
        float _3046 = cbSceneParam._m0[79u].w - _3039;
        float _3052 = sqrt(((_3038 * _3038) + (_3039 * _3039)) + (_3042 * _3042));
        float _3055 = (1.0 - (cbSceneParam._m0[77u].w / _3026)) * _3052;
        float _3060 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3062 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3215;
        if (abs((_3040 - _3044) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3215 = ((((_3045 > 0.0) ? exp2(_3060 * _3045) : (2.0 - exp2(_3062 * _3045))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3055;
        }
        else
        {
            float _3175 = 1.0 / cbSceneParam._m0[80u].x;
            float _3176 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : max(_3045, _3046));
            float _3177 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : min(_3045, _3046));
            float _3186 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : min(_3176, 0.0));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            _3215 = ((abs(_3052 / _3040) * cbSceneParam._m0[80u].y) * ((((_3186 - _3187) * 2.0) - ((exp2(_3060 * (isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0)))) - exp2(_3060 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))))) * _3175)) - ((exp2(_3062 * _3186) - exp2(_3062 * _3187)) * _3175))) + (_3055 * cbSceneParam._m0[80u].z);
        }
        vec4 _3217 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, 1.0), 0.0);
        float _3226 = exp2((_3215 * (-1.44269502162933349609375)) * (1.0 - _3217.w));
        float _3227 = log2(_3226);
        float _3243 = log2(_2992);
        _3064 = (exp2(_3243 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].x)) * _3217.x) / cbSceneParam._m0[78u].x)) + _2989;
        _3066 = (exp2(_3243 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].y)) * _3217.y) / cbSceneParam._m0[78u].y)) + _2990;
        _3068 = (exp2(_3243 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].z)) * _3217.z) / cbSceneParam._m0[78u].z)) + _2991;
        _3070 = _3226 * _2992;
    }
    else
    {
        _3064 = _2989;
        _3066 = _2990;
        _3068 = _2991;
        _3070 = _2992;
    }
    float _3082 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3083 = _3082 == 3.0;
    float _3084 = log2(_3070);
    float _3091 = exp2(_3084 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2934 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _929))) + ((_2940 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1733)) * cbPerFrame._m0[3u].x));
    float _3092 = exp2(_3084 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2936 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _929))) + ((_2942 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1733)) * cbPerFrame._m0[3u].x));
    float _3093 = exp2(_3084 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2938 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _929))) + ((_2944 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1733)) * cbPerFrame._m0[3u].x));
    float _3102 = (_3082 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3102 * (_3083 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3064)));
    SV_Target.y = _3102 * (_3083 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3066)));
    SV_Target.z = _3102 * (_3083 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3068)));
    SV_Target.w = cbInstanceData._m0[_2964].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2964].w;
}


