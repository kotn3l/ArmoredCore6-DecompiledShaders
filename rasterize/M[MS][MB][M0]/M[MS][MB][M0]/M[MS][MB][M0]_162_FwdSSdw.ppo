#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1363;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3690 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3701 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3712 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3723 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) + _445;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _296) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _297) + cbTextureTilingScale._m0[14u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _426) + _541;
    float _553 = ((((_520.x - _539) * _426) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _426) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3734 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))));
    float _563 = _553 + ((((_493.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _564 = _554 + ((((_493.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _567 = fma(_560, _246, fma(_564, _253, _563 * _239));
    float _570 = fma(_560, _247, fma(_564, _254, _563 * _240));
    float _573 = fma(_560, _248, fma(_564, _255, _563 * _241));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _621 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _628 = ((_623 - _624) * cbMtdParam._m0[24u].z) + _624;
    float _630 = (cbMtdParam._m0[19u].x + dot(vec4(_577 * _567, _577 * _570, _577 * _573, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_628 * cbMtdParam._m0[21u].z);
    float _3745 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _633 = (-0.0) - cbMtdParam._m0[24u].y;
    float _635 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
    float _643 = _631 - ((_631 * TEXCOORD_8.x) * _636);
    float _644 = _631 - ((_631 * TEXCOORD_8.y) * _636);
    float _645 = _631 - ((_631 * TEXCOORD_8.z) * _636);
    float _652 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _656 = ((isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : min(_652, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _664 = (_656 - (((_628 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _656))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3776 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _669 = ((_643 * ((_473.x * cbMtdParam._m0[18u].x) - _452)) * _665) + _452;
    float _670 = ((_644 * ((_473.y * cbMtdParam._m0[18u].y) - _453)) * _665) + _453;
    float _671 = ((_645 * ((_473.z * cbMtdParam._m0[18u].z) - _454)) * _665) + _454;
    vec4 _683 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _685 = _683.x;
    float _686 = 1.0 - _685;
    float _711 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_685 - _686) * cbMtdParam._m0[24u].w) + _686) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3787 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _720 = ((((cbMtdParam._m0[10u].x - _669) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _712) + _669;
    float _721 = ((((cbMtdParam._m0[10u].y - _670) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _712) + _670;
    float _722 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _671)) * _712) + _671;
    float _727 = (((_493.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    vec4 _741 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _748 = (_741.x * 2.0) + (-1.0);
    float _749 = (_741.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3798 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _759 = (((_741.z - _727) * _643) * _665) + _727;
    float _762 = ((cbMtdParam._m0[23u].y - _759) * _712) + _759;
    vec4 _781 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _787 = (_781.x * 2.0) + (-1.0);
    float _788 = (_781.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _3809 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _809 = (((cbMtdParam._m0[21u].x * _563) + ((_748 - _563) * _643)) * _665) + _563;
    float _810 = (((cbMtdParam._m0[21u].x * _564) + ((_749 - _564) * _644)) * _665) + _564;
    float _811 = (((sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _560) * _645) * _665) + _560;
    float _822 = (((_787 - _809) + (_809 * cbMtdParam._m0[22u].z)) * _712) + _809;
    float _823 = (((_788 - _810) + (_810 * cbMtdParam._m0[22u].z)) * _712) + _810;
    float _824 = ((sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _811) * _712) + _811;
    float _828 = cbMtdParam._m0[22u].x + _593.w;
    float _831 = fma(_824, _246, fma(_823, _253, _822 * _239));
    float _834 = fma(_824, _247, fma(_823, _254, _822 * _240));
    float _837 = fma(_824, _248, fma(_823, _255, _822 * _241));
    float _841 = inversesqrt(dot(vec3(_831, _834, _837), vec3(_831, _834, _837)));
    float _842 = _841 * _831;
    float _843 = _841 * _834;
    float _844 = _841 * _837;
    float _3820 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _845 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _3842 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3853 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _3864 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _904);
    float _915 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _904);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _904);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    float _929 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _930 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _948 = fma(_844, cbSceneParam._m0[5u].z, fma(_843, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _842));
    float _951 = fma(_844, cbSceneParam._m0[6u].z, fma(_843, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _842));
    float _954 = fma(_844, cbSceneParam._m0[7u].z, fma(_843, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _842));
    uint _968 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_968].z;
    float _3875 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    vec4 _988 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _929, cbSceneParam._m0[86u].y * _930));
    float _992 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _988.x;
    float _993 = dot(vec3(_842, _843, _844), vec3(_921, _922, _923));
    float _996 = _993 * 2.0;
    float _1000 = (_996 * _842) - _921;
    float _1001 = (_996 * _843) - _922;
    float _1002 = (_996 * _844) - _923;
    float _1006 = abs(dot(vec3(_921, _922, _923), vec3(_842, _843, _844)));
    float _3908 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(_845);
    float _1021 = exp2((_1008 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1008 * 3.0));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1091 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1095 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1120 = _1053 + _842;
        float _1121 = _1057 + _843;
        float _1122 = _1061 + _844;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_842, _843, _844), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3956 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_842, _843, _844), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3989 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_842, _843, _844), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4022 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1402 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1406 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1410 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1433 = _1053 + _842;
        float _1434 = _1057 + _843;
        float _1435 = _1061 + _844;
        float _1445 = fma(_1435, cbModelParam._m0[30u].z, fma(_1434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1433)) - _1402;
        float _1446 = fma(_1435, cbModelParam._m0[31u].z, fma(_1434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1433)) - _1406;
        float _1447 = fma(_1435, cbModelParam._m0[32u].z, fma(_1434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1433)) - _1410;
        float _1451 = inversesqrt(dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447)));
        float _1464 = ((_1451 * _1445) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1402 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1451 * _1446) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1406 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1451 * _1447) / cbModelParam._m0[35u].z) + ((((((_1410 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        float _1501 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1468.x + (-0.5));
        float _1503 = _1501 * (_1468.y + (-0.5));
        float _1504 = _1501 * (_1468.z + (-0.5));
        float _1511 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1475.x + (-0.5));
        float _1513 = _1511 * (_1475.y + (-0.5));
        float _1514 = _1511 * (_1475.z + (-0.5));
        float _1521 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1482.x + (-0.5));
        float _1523 = _1521 * (_1482.y + (-0.5));
        float _1524 = _1521 * (_1482.z + (-0.5));
        float _1531 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1489.x + (-0.5));
        float _1533 = _1531 * (_1489.y + (-0.5));
        float _1534 = _1531 * (_1489.z + (-0.5));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = _1502 * 0.5;
        float _1539 = _1512 * 0.5;
        float _1540 = _1522 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_842, _843, _844), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4085 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1565 + 1.0))) + _1570) * _1535;
        float _1580 = _1503 * 0.5;
        float _1581 = _1513 * 0.5;
        float _1582 = _1523 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_842, _843, _844), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4118 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1607 + 1.0))) + _1612) * _1536;
        float _1622 = _1504 * 0.5;
        float _1623 = _1514 * 0.5;
        float _1624 = _1524 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_842, _843, _844), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4151 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1649 + 1.0))) + _1654) * _1537;
        _1671 = _1504;
        _1672 = _1503;
        _1673 = _1502;
        _1674 = _1514;
        _1675 = _1513;
        _1676 = _1512;
        _1677 = _1524;
        _1678 = _1523;
        _1679 = _1522;
        _1680 = _1537;
        _1681 = _1536;
        _1682 = _1535;
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
    }
    else
    {
        _1671 = _1363;
        _1672 = _1363;
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = 0.0;
        _1684 = 0.0;
        _1685 = 0.0;
    }
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1375)) + _1375;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1376)) + _1376;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1377)) + _1377;
    float _1718 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1695));
    float _1739 = _1000 * 0.5;
    float _1740 = _1001 * 0.5;
    float _1741 = _1002 * 0.5;
    float _1742 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1745 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1748 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1782;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1755 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1759 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1763 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1770 = dot(vec4(cbModelParam._m0[39u]), vec4(_1739, _1740, _1741, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1793;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1784 = dot(vec4(cbModelParam._m0[40u]), vec4(_1739, _1740, _1741, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1797 = (_1793 * cbModelParam._m0[1u].x) + (_1782 * (1.0 - cbModelParam._m0[1u].x));
    float _1807 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _845);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1807 : min(cbModelParam._m0[25u].z, _1807));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1869 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1872 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1900 = frontier_phi_14_12_ladder;
        }
        float _2121;
        if (_1869 > 0.0)
        {
            _2121 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2121 = frontier_phi_23_19_ladder;
        }
        float _2367;
        if (_1872 > 0.0)
        {
            _2367 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2367 = frontier_phi_35_30_ladder;
        }
        float _2369 = isnan(_2121) ? _1900 : (isnan(_1900) ? _2121 : min(_1900, _2121));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1866) + _1855;
        float _2375 = (_2370 * _1869) + _1859;
        float _2376 = (_2370 * _1872) + _1863;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1808);
            frontier_phi_13_35_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_13_35_ladder_2;
        _1890 = frontier_phi_13_35_ladder_1;
        _1892 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1808);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _845);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1950 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1954 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1958 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1961 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _1964 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _1967 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2126;
        if (_1961 > 0.0)
        {
            _2126 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2126 = frontier_phi_25_21_ladder;
        }
        float _2394;
        if (_1964 > 0.0)
        {
            _2394 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2394 = frontier_phi_37_32_ladder;
        }
        float _2599;
        if (_1967 > 0.0)
        {
            _2599 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2599 = frontier_phi_46_43_ladder;
        }
        float _2601 = isnan(_2394) ? _2126 : (isnan(_2126) ? _2394 : min(_2126, _2394));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1961) + _1950;
        float _2607 = (_2602 * _1964) + _1954;
        float _2608 = (_2602 * _1967) + _1958;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_22_46_ladder = _2807.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2807.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2807.x * cbModelParam._m0[1u].z;
        }
        _1986 = frontier_phi_22_46_ladder_2;
        _1988 = frontier_phi_22_46_ladder_1;
        _1990 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1897);
        _1986 = _1970.x * cbModelParam._m0[1u].z;
        _1988 = _1970.y * cbModelParam._m0[1u].z;
        _1990 = _1970.z * cbModelParam._m0[1u].z;
    }
    float _2002 = ((((1.0 - _1021) * ((_1008 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1021 * _1008)) * _992;
    float _2003 = _2002 * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2004 = _2002 * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2005 = _2002 * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2003 * cbSceneParam._m0[91u].x));
    vec4 _2022 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_929, _930));
    float _2024 = _2022.w;
    float _2036 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2024);
    float _2037 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2024);
    float _2038 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2024);
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _992 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2080 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2084 = _2044 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_842, _843, _844));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_842, _843, _844));
    float _4287 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4298 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2061].x * _2067) * _2105) + (((cbLight._m0[_2071].x * _2036) * _2080) * _2103);
    float _2113 = ((_2067 * cbLight._m0[_2061].y) * _2105) + (((cbLight._m0[_2071].y * _2037) * _2080) * _2103);
    float _2114 = ((_2067 * cbLight._m0[_2061].z) * _2105) + (((cbLight._m0[_2071].z * _2038) * _2080) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2120)
    {
        _2131 = _2112;
        _2133 = _2113;
        _2135 = _2114;
    }
    else
    {
        uint _2139 = _2044 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4309 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2158 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2112;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2113;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2114;
    }
    bool _2138 = _2118.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2138)
    {
        _2176 = _2131;
        _2178 = _2133;
        _2180 = _2135;
    }
    else
    {
        uint _2338 = _2044 + 7u;
        float _2354 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_842, _843, _844)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4325 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2357 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2176 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2131;
        _2178 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2133;
        _2180 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2135;
    }
    uint _2183 = _2044 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _845) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2044].x + _921;
    float _2199 = cbLight._m0[_2044].y + _922;
    float _2200 = cbLight._m0[_2044].z + _923;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2044].xyz));
    float _4341 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2212 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2213 = dot(vec3(_842, _843, _844), vec3(_2205, _2206, _2207));
    float _4363 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2205, _2206, _2207));
    float _4374 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2237 = 1.0 - _2197;
    float _2248 = (0.5 / (((_2212 * ((_2211 * _2237) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2237) + _2197) * _2211))) * _2211;
    float _4385 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2264 = _2044 + 9u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _845) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2084].x + _921;
    float _2278 = cbLight._m0[_2084].y + _922;
    float _2279 = cbLight._m0[_2084].z + _923;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2084].xyz));
    float _4396 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2291 = dot(vec3(_842, _843, _844), vec3(_2284, _2285, _2286));
    float _4407 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2284, _2285, _2286));
    float _4418 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2276 * _2276;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2313 = 1.0 - _2276;
    float _2323 = (0.5 / (((_2212 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2313) + _2276) * _2290))) * _2290;
    float _4429 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    float _2335 = (((_2312 * cbLight._m0[_2264].x) * _2325) * _2067) + ((((cbLight._m0[_2183].x * _2036) * _2236) * _2250) * _2080);
    float _2336 = (((_2312 * cbLight._m0[_2264].y) * _2325) * _2067) + ((((cbLight._m0[_2183].y * _2037) * _2236) * _2250) * _2080);
    float _2337 = (((_2312 * cbLight._m0[_2264].z) * _2325) * _2067) + ((((cbLight._m0[_2183].z * _2038) * _2236) * _2250) * _2080);
    float _2399;
    float _2401;
    float _2403;
    if (_2120)
    {
        _2399 = _2335;
        _2401 = _2336;
        _2403 = _2337;
    }
    else
    {
        uint _2405 = _2044 + 2u;
        uint _2409 = _2044 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _845) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _921;
        float _2426 = cbLight._m0[_2405].y + _922;
        float _2427 = cbLight._m0[_2405].z + _923;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2405].xyz));
        float _4440 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2439 = dot(vec3(_842, _843, _844), vec3(_2432, _2433, _2434));
        float _4451 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4462 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2461 = 1.0 - _2424;
        float _2471 = (0.5 / (((_2212 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2461) + _2424) * _2438))) * _2438;
        float _4473 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2473 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2474 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2399 = (((_2460 * cbLight._m0[_2409].x) * _2473) * _2474) + _2335;
        _2401 = (((_2460 * cbLight._m0[_2409].y) * _2473) * _2474) + _2336;
        _2403 = (((_2460 * cbLight._m0[_2409].z) * _2473) * _2474) + _2337;
    }
    float _2509;
    float _2511;
    float _2513;
    if (_2138)
    {
        _2509 = _2399;
        _2511 = _2401;
        _2513 = _2403;
    }
    else
    {
        uint _2520 = _2044 + 3u;
        uint _2524 = _2044 + 11u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _845) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _921;
        float _2541 = cbLight._m0[_2520].y + _922;
        float _2542 = cbLight._m0[_2520].z + _923;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_842, _843, _844), vec3(cbLight._m0[_2520].xyz));
        float _4489 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2554 = dot(vec3(_842, _843, _844), vec3(_2547, _2548, _2549));
        float _4500 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4511 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2212 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2576) + _2539) * _2553))) * _2553;
        float _4522 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2509 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2399;
        _2511 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2401;
        _2513 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2403;
    }
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_2042.y == 0u)
    {
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2664;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2664;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2664;
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _930) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _929) / _2680)));
        float _2701 = (log2(_2667 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2972)
                {
                    frontier_phi_61_pred = _2956;
                    frontier_phi_61_pred_1 = _2961;
                    frontier_phi_61_pred_2 = _2960;
                    frontier_phi_61_pred_3 = _2959;
                    frontier_phi_61_pred_4 = _2958;
                    frontier_phi_61_pred_5 = _2957;
                }
                else
                {
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    uint _3086;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2971;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    for (;;)
                    {
                        uint _3090 = uint(findLSB(_3086)) + (_2962 << 5u);
                        uint _3087 = (_3086 + 4294967295u) & _3086;
                        uint _3092 = _3090 * 48u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3112 = (_3090 * 48u) + 4u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3131 = (_3090 * 48u) + 8u;
                        vec3 _3142 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x));
                        float _3146 = _3106.x - _2665;
                        float _3147 = _3106.y - _2666;
                        float _3148 = _3106.z - _2667;
                        float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                        float _3152 = inversesqrt(_3149);
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3156 = dot(vec3(_948, _951, _954), vec3(_3153, _3154, _3155));
                        float _3161 = 1.0 - (_3149 * _3106.w);
                        float _4548 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3163 = sqrt(_3149) * _3125.w;
                        float _3166 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3156) + _3167;
                        float _3173 = _3163 * _3163;
                        float _3177 = ((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3162) / ((_3173 * 0.699999988079071044921875) + 1.0);
                        float _3181 = (-0.0) - _2665;
                        float _3182 = (-0.0) - _2666;
                        float _3183 = (-0.0) - _2667;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3198 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                        float _3199 = 1.0 - _1008;
                        float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                        float _3207 = _3206 * _3206;
                        float _3208 = _3207 * _3207;
                        float _3209 = _3188 + _3153;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3219 = dot(vec3(_948, _951, _954), vec3(_3188, _3189, _3190));
                        float _4564 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3223 = dot(vec3(_948, _951, _954), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                        float _4575 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                        float _3231 = _3166 * _3207;
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3156) + _3232;
                        float _4586 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3237 = 1.0 - _3207;
                        float _3247 = (0.5 / (((_3236 * ((_3222 * _3237) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3207) * _3222))) * _3236;
                        float _4597 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3258 = (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3230 * _3230) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125))) * _3162;
                        _3015 = (_3177 * _3125.x) + _3083;
                        _3016 = (_3177 * _3125.y) + _3084;
                        _3017 = (_3177 * _3125.z) + _3085;
                        _3012 = (_3258 * _3142.x) + _3080;
                        _3013 = (_3258 * _3142.y) + _3081;
                        _3014 = (_3258 * _3142.z) + _3082;
                        if (_3087 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3087;
                        }
                    }
                    frontier_phi_61_pred = _3012;
                    frontier_phi_61_pred_1 = _3017;
                    frontier_phi_61_pred_2 = _3016;
                    frontier_phi_61_pred_3 = _3015;
                    frontier_phi_61_pred_4 = _3014;
                    frontier_phi_61_pred_5 = _3013;
                }
                _2813 = frontier_phi_61_pred;
                _2823 = frontier_phi_61_pred_1;
                _2821 = frontier_phi_61_pred_2;
                _2819 = frontier_phi_61_pred_3;
                _2817 = frontier_phi_61_pred_4;
                _2815 = frontier_phi_61_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2813;
                    _2957 = _2815;
                    _2958 = _2817;
                    _2959 = _2819;
                    _2960 = _2821;
                    _2961 = _2823;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2829) & _2711) == 0u)
        {
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
            _2930 = _2818;
            _2932 = _2820;
            _2934 = _2822;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
            float _2950 = _2949 * _2665;
            float _2951 = _2949 * _2666;
            float _2952 = _2949 * _2667;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3063 = _2812;
                float _3064 = _2814;
                float _3065 = _2816;
                float _3066 = _2818;
                float _3067 = _2820;
                float _3068 = _2822;
                uint _3069 = _2829;
                uint _3078;
                bool _3079;
                for (;;)
                {
                    _3078 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                    _3079 = _3078 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3079)
                    {
                        frontier_phi_67_pred = _3066;
                        frontier_phi_67_pred_1 = _3067;
                        frontier_phi_67_pred_2 = _3068;
                        frontier_phi_67_pred_3 = _3065;
                        frontier_phi_67_pred_4 = _3064;
                        frontier_phi_67_pred_5 = _3063;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        float _3281 = _3068;
                        uint _3282 = _3078;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3351;
                        vec4 _3366;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3293 = ((_3069 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3338 = (_3293 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3293 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3293 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3293 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_2667, _3400.z, fma(_2666, _3400.y, _3400.x * _2665)) + _3400.w;
                            _3413 = !((fma(_2667, _3381.z, fma(_2666, _3381.y, _3381.x * _2665)) + _3381.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3308.x - _2665;
                                float _3441 = _3308.y - _2666;
                                float _3442 = _3308.z - _2667;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3309 * _3309));
                                float _4608 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3458 = sqrt(_3443) * _3324.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_948, _951, _954))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_2667, _3351.z, fma(_2666, _3351.y, _3351.x * _2665)) + _3351.w) / _3412;
                                float _3472 = (fma(_2667, _3366.z, fma(_2666, _3366.y, _3366.x * _2665)) + _3366.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4624 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _1008;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2950;
                                float _3502 = _3448 - _2951;
                                float _3503 = _3449 - _2952;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_948, _951, _954), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4635 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3515 = dot(vec3(_948, _951, _954), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4646 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_948, _951, _954), vec3(_3447, _3448, _3449))) + _3524;
                                float _4657 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4668 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3552 * _3336.x;
                                frontier_phi_73_pred_1 = _3552 * _3336.y;
                                frontier_phi_73_pred_2 = _3478 * _3324.z;
                                frontier_phi_73_pred_3 = _3478 * _3324.y;
                                frontier_phi_73_pred_4 = _3478 * _3324.x;
                                frontier_phi_73_pred_5 = _3552 * _3336.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3556 = frontier_phi_73_pred;
                            _3557 = frontier_phi_73_pred_1;
                            _3561 = frontier_phi_73_pred_2;
                            _3560 = frontier_phi_73_pred_3;
                            _3559 = frontier_phi_73_pred_4;
                            _3558 = frontier_phi_73_pred_5;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3266;
                        frontier_phi_67_pred_1 = _3267;
                        frontier_phi_67_pred_2 = _3268;
                        frontier_phi_67_pred_3 = _3265;
                        frontier_phi_67_pred_4 = _3264;
                        frontier_phi_67_pred_5 = _3263;
                    }
                    _2931 = frontier_phi_67_pred;
                    _2933 = frontier_phi_67_pred_1;
                    _2935 = frontier_phi_67_pred_2;
                    _2929 = frontier_phi_67_pred_3;
                    _2927 = frontier_phi_67_pred_4;
                    _2925 = frontier_phi_67_pred_5;
                    uint _3070 = _3069 + 1u;
                    if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3063 = _2925;
                        _3064 = _2927;
                        _3065 = _2929;
                        _3066 = _2931;
                        _3067 = _2933;
                        _3068 = _2935;
                        _3069 = _3070;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2933;
                frontier_phi_55_56_ladder_1 = _2935;
                frontier_phi_55_56_ladder_2 = _2931;
                frontier_phi_55_56_ladder_3 = _2929;
                frontier_phi_55_56_ladder_4 = _2927;
                frontier_phi_55_56_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_55_56_ladder = _2820;
                frontier_phi_55_56_ladder_1 = _2822;
                frontier_phi_55_56_ladder_2 = _2818;
                frontier_phi_55_56_ladder_3 = _2816;
                frontier_phi_55_56_ladder_4 = _2814;
                frontier_phi_55_56_ladder_5 = _2812;
            }
            _2924 = frontier_phi_55_56_ladder_5;
            _2926 = frontier_phi_55_56_ladder_4;
            _2928 = frontier_phi_55_56_ladder_3;
            _2930 = frontier_phi_55_56_ladder_2;
            _2932 = frontier_phi_55_56_ladder;
            _2934 = frontier_phi_55_56_ladder_1;
        }
        float _2939 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
        _2724 = (_2939 * _2930) + _2176;
        _2726 = (_2939 * _2932) + _2178;
        _2728 = (_2939 * _2934) + _2180;
        _2730 = ((_2924 * 0.039999999105930328369140625) * _2939) + _2509;
        _2732 = ((_2926 * 0.039999999105930328369140625) * _2939) + _2511;
        _2734 = ((_2928 * 0.039999999105930328369140625) * _2939) + _2513;
    }
    else
    {
        _2724 = _2176;
        _2726 = _2178;
        _2728 = _2180;
        _2730 = _2509;
        _2732 = _2511;
        _2734 = _2513;
    }
    float _4684 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4695 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4706 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    uint _2754 = _277 + 6u;
    float _2762 = _929 / cbSceneParam._m0[86u].x;
    float _2763 = _930 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _2838 = _2837 / _863;
        float _2849 = _2838 * _914;
        float _2850 = _915 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2852 = _2838 * _916;
        float _2854 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2855 = _2854 + cbSceneParam._m0[79u].w;
        float _2856 = cbSceneParam._m0[79u].w - _2850;
        float _2862 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2852 * _2852));
        float _2865 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2862;
        float _2870 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2872 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3025;
        if (abs((_2851 - _2854) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3025 = ((((_2855 > 0.0) ? exp2(_2870 * _2855) : (2.0 - exp2(_2872 * _2855))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2865;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : max(_2855, _2856));
            float _2987 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : min(_2855, _2856));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3025 = ((abs(_2862 / _2851) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2870 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2870 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2872 * _2996) - exp2(_2872 * _2997)) * _2985))) + (_2865 * cbSceneParam._m0[80u].z);
        }
        vec4 _3027 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3036 = exp2((_3025 * (-1.44269502162933349609375)) * (1.0 - _3027.w));
        float _3037 = log2(_3036);
        float _3053 = log2(_2782);
        _2874 = (exp2(_3053 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].x)) * _3027.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2876 = (exp2(_3053 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].y)) * _3027.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2878 = (exp2(_3053 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].z)) * _3027.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2880 = _3036 * _2782;
    }
    else
    {
        _2874 = _2779;
        _2876 = _2780;
        _2878 = _2781;
        _2880 = _2782;
    }
    float _2892 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2893 = _2892 == 3.0;
    float _2894 = log2(_2880);
    float _2901 = exp2(_2894 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2724 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _992))) + ((_2730 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1797)) * cbPerFrame._m0[3u].x));
    float _2902 = exp2(_2894 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2726 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _992))) + ((_2732 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1797)) * cbPerFrame._m0[3u].x));
    float _2903 = exp2(_2894 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2728 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _992))) + ((_2734 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1797)) * cbPerFrame._m0[3u].x));
    float _2912 = (_2892 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2912 * (_2893 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.y = _2912 * (_2893 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.z = _2912 * (_2893 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.w = cbInstanceData._m0[_2754].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2754].w;
}


