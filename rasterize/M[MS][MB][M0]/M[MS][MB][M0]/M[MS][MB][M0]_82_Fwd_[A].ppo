#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1118;
float _3479;
float _3480;
float _3481;
float _3482;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3491 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _425 = ((_395.z - _416) * _368) + _416;
    float _428 = ((((_395.x - _414) * _368) + _414) * 2.0) + (-1.0);
    float _430 = ((((_395.y - _415) * _368) + _415) * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3502 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _469 = _467.x;
    float _470 = 1.0 - _469;
    float _483 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_469 - _470) * cbMtdParam._m0[24u].z) + _470) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3513 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _491 = (_484 * (cbMtdParam._m0[17u].x - _375)) + _375;
    float _492 = (_484 * (cbMtdParam._m0[17u].y - _376)) + _376;
    float _493 = (_484 * (cbMtdParam._m0[17u].z - _377)) + _377;
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _513 = (_506.x * 2.0) + (-1.0);
    float _514 = (_506.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3524 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _523 = (_484 * (_506.z - _425)) + _425;
    float _535 = (((_513 - _428) + (cbMtdParam._m0[21u].x * _428)) * _484) + _428;
    float _536 = (((_514 - _430) + (cbMtdParam._m0[21u].x * _430)) * _484) + _430;
    float _537 = (_484 * (sqrt(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) - _436)) + _436;
    float _542 = cbMtdParam._m0[22u].x + _449.w;
    float _545 = fma(_537, _219 * NORMAL.x, fma(_536, _226 * TANGENT.x, (_212 * _204) * _535));
    float _548 = fma(_537, _219 * NORMAL.y, fma(_536, _226 * TANGENT.y, (_212 * _205) * _535));
    float _551 = fma(_537, _219 * NORMAL.z, fma(_536, _226 * TANGENT.z, (_212 * _206) * _535));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3535 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _559 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3557 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3568 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3579 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    vec4 _643 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _645 = _643.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _799 = sqrt(((_629 * _629) + (_630 * _630)) + (_631 * _631));
        float _805 = (cbMatDynParam._m0[5u].x * _799) + cbMatDynParam._m0[5u].y;
        float _3590 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _810 = (cbMatDynParam._m0[5u].z * _799) + cbMatDynParam._m0[5u].w;
        float _3601 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) - _806)) + _806) < ((_645 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _656 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _657 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _675 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _678 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _681 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _694 = _232 + 9u;
    uint _695 = _694 + uint(cbMatDynParam._m0[0u].w);
    float _701 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_695].x;
    float _702 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_695].y;
    float _703 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_695].z;
    float _3612 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    vec4 _715 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _656, cbSceneParam._m0[86u].y * _657));
    float _719 = ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * TEXCOORD_5.w) * _715.x;
    float _720 = dot(vec3(_556, _557, _558), vec3(_636, _637, _638));
    float _723 = _720 * 2.0;
    float _727 = (_723 * _556) - _636;
    float _728 = (_723 * _557) - _637;
    float _729 = (_723 * _558) - _638;
    float _733 = abs(dot(vec3(_636, _637, _638), vec3(_556, _557, _558)));
    float _3645 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _735 = sqrt(_559);
    float _748 = exp2((_735 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_735 * 3.0));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_788, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780));
        float _846 = fma(_788, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780));
        float _850 = fma(_788, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780));
        float _875 = _780 + _556;
        float _876 = _784 + _557;
        float _877 = _788 + _558;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_556, _557, _558), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3693 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_556, _557, _558), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3726 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_556, _557, _558), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3759 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_788, cbModelParam._m0[30u].z, fma(_784, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _780));
        float _1164 = fma(_788, cbModelParam._m0[31u].z, fma(_784, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _780));
        float _1168 = fma(_788, cbModelParam._m0[32u].z, fma(_784, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _780));
        float _1191 = _780 + _556;
        float _1192 = _784 + _557;
        float _1193 = _788 + _558;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_556, _557, _558), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3822 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_556, _557, _558), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3855 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_556, _557, _558), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3888 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1118;
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = _1118;
        _1439 = _1118;
        _1440 = _1118;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1130)) + _1130;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1131)) + _1131;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1132)) + _1132;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _727 * 0.5;
    float _1498 = _728 * 0.5;
    float _1499 = _729 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_788, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_788, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_788, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_729, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727));
        float _1628 = fma(_729, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727));
        float _1631 = fma(_729, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1659 = frontier_phi_17_15_ladder;
        }
        float _1860;
        if (_1628 > 0.0)
        {
            _1860 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1860 = frontier_phi_26_22_ladder;
        }
        float _2103;
        if (_1631 > 0.0)
        {
            _2103 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2103 = frontier_phi_38_33_ladder;
        }
        float _2105 = isnan(_1860) ? _1659 : (isnan(_1659) ? _1860 : min(_1659, _1860));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1625) + _1614;
        float _2111 = (_2106 * _1628) + _1618;
        float _2112 = (_2106 * _1631) + _1622;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_16_38_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_16_38_ladder_2;
        _1649 = frontier_phi_16_38_ladder_1;
        _1651 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_727, _728, _729), _1566);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_788, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_788, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_788, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_729, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727));
        float _1724 = fma(_729, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727));
        float _1727 = fma(_729, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727));
        float _1865;
        if (_1721 > 0.0)
        {
            _1865 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1865 = frontier_phi_28_24_ladder;
        }
        float _2130;
        if (_1724 > 0.0)
        {
            _2130 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2130 = frontier_phi_40_35_ladder;
        }
        float _2335;
        if (_1727 > 0.0)
        {
            _2335 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2335 = frontier_phi_49_46_ladder;
        }
        float _2337 = isnan(_2130) ? _1865 : (isnan(_1865) ? _2130 : min(_1865, _2130));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1721) + _1710;
        float _2343 = (_2338 * _1724) + _1714;
        float _2344 = (_2338 * _1727) + _1718;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_25_49_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_25_49_ladder_2;
        _1748 = frontier_phi_25_49_ladder_1;
        _1750 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_727, _728, _729), _1656);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1762 = ((((1.0 - _748) * ((_735 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_748 * _735)) * _719;
    float _1763 = _1762 * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1764 = _1762 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1765 = _1762 * ((cbModelParam._m0[1u].w * (_1750 - _1651)) + _1651);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _719 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1819 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1823 = _1786 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_556, _557, _558));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_556, _557, _558));
    float _4024 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _4035 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1803].x * _1809) * _1844) + ((cbLight._m0[_1813].x * _1819) * _1842);
    float _1852 = ((_1809 * cbLight._m0[_1803].y) * _1844) + ((_1819 * cbLight._m0[_1813].y) * _1842);
    float _1853 = ((_1809 * cbLight._m0[_1803].z) * _1844) + ((_1819 * cbLight._m0[_1813].z) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1851;
        _1872 = _1852;
        _1874 = _1853;
    }
    else
    {
        uint _1878 = _1786 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _4046 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1897 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1853;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2074 = _1786 + 7u;
        float _2090 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4062 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2093 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1915 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1870;
        _1917 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1872;
        _1919 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1874;
    }
    uint _1922 = _1786 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _559) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1786].x + _636;
    float _1938 = cbLight._m0[_1786].y + _637;
    float _1939 = cbLight._m0[_1786].z + _638;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1786].xyz));
    float _4078 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _1951 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1952 = dot(vec3(_556, _557, _558), vec3(_1944, _1945, _1946));
    float _4100 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1944, _1945, _1946));
    float _4111 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1976 = 1.0 - _1936;
    float _1987 = (0.5 / (((_1951 * ((_1950 * _1976) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1976) + _1936) * _1950))) * _1950;
    float _4122 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2000 = _1786 + 9u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _559) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1823].x + _636;
    float _2014 = cbLight._m0[_1823].y + _637;
    float _2015 = cbLight._m0[_1823].z + _638;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1823].xyz));
    float _4133 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2027 = dot(vec3(_556, _557, _558), vec3(_2020, _2021, _2022));
    float _4144 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2020, _2021, _2022));
    float _4155 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2012 * _2012;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = 1.0 - _2012;
    float _2059 = (0.5 / (((_1951 * ((_2026 * _2049) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2049) + _2012) * _2026))) * _2026;
    float _4166 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    float _2071 = (((_2048 * cbLight._m0[_2000].x) * _2061) * _1809) + (((_1975 * cbLight._m0[_1922].x) * _1989) * _1819);
    float _2072 = (((_2048 * cbLight._m0[_2000].y) * _2061) * _1809) + (((_1975 * cbLight._m0[_1922].y) * _1989) * _1819);
    float _2073 = (((_2048 * cbLight._m0[_2000].z) * _2061) * _1809) + (((_1975 * cbLight._m0[_1922].z) * _1989) * _1819);
    float _2135;
    float _2137;
    float _2139;
    if (_1859)
    {
        _2135 = _2071;
        _2137 = _2072;
        _2139 = _2073;
    }
    else
    {
        uint _2141 = _1786 + 2u;
        uint _2145 = _1786 + 10u;
        float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _559) * 0.949999988079071044921875);
        float _2160 = _2159 * _2159;
        float _2161 = cbLight._m0[_2141].x + _636;
        float _2162 = cbLight._m0[_2141].y + _637;
        float _2163 = cbLight._m0[_2141].z + _638;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2168 = _2167 * _2161;
        float _2169 = _2167 * _2162;
        float _2170 = _2167 * _2163;
        float _2171 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2141].xyz));
        float _4177 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2175 = dot(vec3(_556, _557, _558), vec3(_2168, _2169, _2170));
        float _4188 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2179 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2168, _2169, _2170));
        float _4199 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2183 = _2160 * _2160;
        float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
        float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2197 = 1.0 - _2160;
        float _2207 = (0.5 / (((_1951 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2197) + _2160) * _2174))) * _2174;
        float _4210 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2209 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
        float _2210 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2135 = (((_2196 * cbLight._m0[_2145].x) * _2209) * _2210) + _2071;
        _2137 = (((_2196 * cbLight._m0[_2145].y) * _2209) * _2210) + _2072;
        _2139 = (((_2196 * cbLight._m0[_2145].z) * _2209) * _2210) + _2073;
    }
    float _2245;
    float _2247;
    float _2249;
    if (_1877)
    {
        _2245 = _2135;
        _2247 = _2137;
        _2249 = _2139;
    }
    else
    {
        uint _2256 = _1786 + 3u;
        uint _2260 = _1786 + 11u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _559) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _636;
        float _2277 = cbLight._m0[_2256].y + _637;
        float _2278 = cbLight._m0[_2256].z + _638;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2256].xyz));
        float _4226 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2290 = dot(vec3(_556, _557, _558), vec3(_2283, _2284, _2285));
        float _4237 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4248 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2312 = 1.0 - _2275;
        float _2322 = (0.5 / (((_1951 * ((_2289 * _2312) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2312) + _2275) * _2289))) * _2289;
        float _4259 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2245 = (((_2311 * cbLight._m0[_2260].x) * _2324) * _2325) + _2135;
        _2247 = (((_2311 * cbLight._m0[_2260].y) * _2324) * _2325) + _2137;
        _2249 = (((_2311 * cbLight._m0[_2260].z) * _2324) * _2325) + _2139;
    }
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    if (_1784.y == 0u)
    {
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2400;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2400;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2400;
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.x;
        uint _2427 = uint((float(_2415.y) * floor(float(uint(cbSceneParam._m0[85u].y * _657) / _2416))) + floor(float(uint(cbSceneParam._m0[85u].x * _656) / _2416)));
        float _2437 = (log2(_2403 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2438 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        uint _2441 = uint(isnan(14.0) ? _2438 : (isnan(_2438) ? 14.0 : min(_2438, 14.0)));
        uvec4 _2446 = texelFetch(g_lightClusterGridBuffer, int(((_2441 << 2u) + (_2427 << 6u)) >> 2u));
        uint _2447 = _2446.x;
        uint _2448 = _2415.z;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((((1u << ((_2448 >> 4u) & 15u)) + 4294967295u) & _2447) == 0u) || ((_2448 & 240u) == 0u))
        {
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
        }
        else
        {
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            uint _2707 = 0u;
            uint _2716;
            bool _2717;
            for (;;)
            {
                _2716 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                _2717 = _2716 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2717)
                {
                    frontier_phi_66_pred = _2701;
                    frontier_phi_66_pred_1 = _2706;
                    frontier_phi_66_pred_2 = _2705;
                    frontier_phi_66_pred_3 = _2704;
                    frontier_phi_66_pred_4 = _2703;
                    frontier_phi_66_pred_5 = _2702;
                }
                else
                {
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    uint _2852;
                    _2846 = _2701;
                    _2847 = _2702;
                    _2848 = _2703;
                    _2849 = _2704;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2716;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    for (;;)
                    {
                        uint _2856 = uint(findLSB(_2852)) + (_2707 << 5u);
                        uint _2853 = (_2852 + 4294967295u) & _2852;
                        uint _2858 = _2856 * 48u;
                        vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2878 = (_2856 * 48u) + 4u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2897 = (_2856 * 48u) + 8u;
                        vec3 _2908 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x));
                        float _2912 = _2872.x - _2401;
                        float _2913 = _2872.y - _2402;
                        float _2914 = _2872.z - _2403;
                        float _2915 = dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914));
                        float _2918 = inversesqrt(_2915);
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2922 = dot(vec3(_675, _678, _681), vec3(_2919, _2920, _2921));
                        float _2927 = 1.0 - (_2915 * _2872.w);
                        float _4285 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2929 = sqrt(_2915) * _2891.w;
                        float _2932 = 1.39999997615814208984375 / (_2929 + 1.39999997615814208984375);
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2922) + _2933;
                        float _2939 = _2929 * _2929;
                        float _2943 = ((isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))) * _2928) / ((_2939 * 0.699999988079071044921875) + 1.0);
                        float _2947 = (-0.0) - _2401;
                        float _2948 = (-0.0) - _2402;
                        float _2949 = (-0.0) - _2403;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2964 = exp2(log2(1.0 / ((_2939 * 3.5) + 5.0)) * 0.25);
                        float _2965 = 1.0 - _735;
                        float _2972 = sqrt(1.0 - ((1.0 - (_2965 * _2965)) * (1.0 - (_2964 * _2964))));
                        float _2973 = _2972 * _2972;
                        float _2974 = _2973 * _2973;
                        float _2975 = _2954 + _2919;
                        float _2976 = _2955 + _2920;
                        float _2977 = _2956 + _2921;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2985 = dot(vec3(_675, _678, _681), vec3(_2954, _2955, _2956));
                        float _4301 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _2989 = dot(vec3(_675, _678, _681), vec3(_2981 * _2975, _2981 * _2976, _2981 * _2977));
                        float _4312 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _2996 = ((_2992 * _2992) * (_2974 + (-1.0))) + 1.0;
                        float _2997 = _2932 * _2973;
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2922) + _2998;
                        float _4323 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3003 = 1.0 - _2973;
                        float _3013 = (0.5 / (((_3002 * ((_2988 * _3003) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3003) + _2973) * _2988))) * _3002;
                        float _4334 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3024 = (((_2974 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_2996 * _2996) * ((_2939 * 2.1991131305694580078125) + 3.141590118408203125))) * _2928;
                        _2776 = (_2943 * _2891.x) + _2849;
                        _2777 = (_2943 * _2891.y) + _2850;
                        _2778 = (_2943 * _2891.z) + _2851;
                        _2773 = (_3024 * _2908.x) + _2846;
                        _2774 = (_3024 * _2908.y) + _2847;
                        _2775 = (_3024 * _2908.z) + _2848;
                        if (_2853 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2775;
                            _2849 = _2776;
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2853;
                        }
                    }
                    frontier_phi_66_pred = _2773;
                    frontier_phi_66_pred_1 = _2778;
                    frontier_phi_66_pred_2 = _2777;
                    frontier_phi_66_pred_3 = _2776;
                    frontier_phi_66_pred_4 = _2775;
                    frontier_phi_66_pred_5 = _2774;
                }
                _2549 = frontier_phi_66_pred;
                _2559 = frontier_phi_66_pred_1;
                _2557 = frontier_phi_66_pred_2;
                _2555 = frontier_phi_66_pred_3;
                _2553 = frontier_phi_66_pred_4;
                _2551 = frontier_phi_66_pred_5;
                uint _2708 = _2707 + 1u;
                if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2701 = _2549;
                    _2702 = _2551;
                    _2703 = _2553;
                    _2704 = _2555;
                    _2705 = _2557;
                    _2706 = _2559;
                    _2707 = _2708;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
        }
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.z;
        uint _2565 = (_2563 >> 8u) & 15u;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((4294967295u << _2565) & _2447) == 0u)
        {
            _2669 = _2548;
            _2671 = _2550;
            _2673 = _2552;
            _2675 = _2554;
            _2677 = _2556;
            _2679 = _2558;
        }
        else
        {
            float _2694 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
            float _2695 = _2694 * _2401;
            float _2696 = _2694 * _2402;
            float _2697 = _2694 * _2403;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2565 < ((_2563 >> 12u) & 15u))
            {
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2829 = _2548;
                float _2830 = _2550;
                float _2831 = _2552;
                float _2832 = _2554;
                float _2833 = _2556;
                float _2834 = _2558;
                uint _2835 = _2565;
                uint _2844;
                bool _2845;
                for (;;)
                {
                    _2844 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                    _2845 = _2844 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2845)
                    {
                        frontier_phi_77_pred = _2834;
                        frontier_phi_77_pred_1 = _2833;
                        frontier_phi_77_pred_2 = _2832;
                        frontier_phi_77_pred_3 = _2831;
                        frontier_phi_77_pred_4 = _2830;
                        frontier_phi_77_pred_5 = _2829;
                    }
                    else
                    {
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3051 = _2829;
                        float _3052 = _2830;
                        float _3053 = _2831;
                        float _3054 = _2832;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        uint _3057 = _2844;
                        uint _3058;
                        vec4 _3083;
                        float _3084;
                        vec4 _3099;
                        vec3 _3111;
                        vec4 _3126;
                        vec4 _3142;
                        float _3188;
                        bool _3189;
                        for (;;)
                        {
                            uint _3068 = ((_2835 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3057));
                            _3058 = (_3057 + 4294967295u) & _3057;
                            uint _3070 = _3068 * 40u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3084 = _3083.w;
                            uint _3086 = (_3068 * 40u) + 4u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3068 * 40u) + 8u;
                            _3111 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x));
                            uint _3113 = (_3068 * 40u) + 16u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3129 = (_3068 * 40u) + 20u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3144 = (_3068 * 40u) + 24u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3163 = (_3068 * 40u) + 28u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3188 = fma(_2403, _3176.z, fma(_2402, _3176.y, _3176.x * _2401)) + _3176.w;
                            _3189 = !((fma(_2403, _3157.z, fma(_2402, _3157.y, _3157.x * _2401)) + _3157.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3189)
                            {
                                float _3216 = _3083.x - _2401;
                                float _3217 = _3083.y - _2402;
                                float _3218 = _3083.z - _2403;
                                float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                                float _3222 = inversesqrt(_3219);
                                float _3223 = _3222 * _3216;
                                float _3224 = _3222 * _3217;
                                float _3225 = _3222 * _3218;
                                float _3229 = 1.0 - (_3219 / (_3084 * _3084));
                                float _4345 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3234 = sqrt(_3219) * _3099.w;
                                float _3236 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                                float _3237 = _3236 * _3236;
                                float _3240 = ((1.0 - _3237) * dot(vec3(_3223, _3224, _3225), vec3(_675, _678, _681))) + _3237;
                                float _3243 = _3234 * _3234;
                                float _3247 = (fma(_2403, _3126.z, fma(_2402, _3126.y, _3126.x * _2401)) + _3126.w) / _3188;
                                float _3248 = (fma(_2403, _3142.z, fma(_2402, _3142.y, _3142.x * _2401)) + _3142.w) / _3188;
                                float _3252 = 1.0 - dot(vec2(_3247, _3248), vec2(_3247, _3248));
                                float _4361 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3254 = _3253 * (((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3230) / ((_3243 * 0.699999988079071044921875) + 1.0));
                                float _3266 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                                float _3267 = 1.0 - _735;
                                float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                                float _3275 = _3274 * _3274;
                                float _3276 = _3275 * _3275;
                                float _3277 = _3223 - _2695;
                                float _3278 = _3224 - _2696;
                                float _3279 = _3225 - _2697;
                                float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                                float _3287 = dot(vec3(_675, _678, _681), vec3((-0.0) - _2695, (-0.0) - _2696, (-0.0) - _2697));
                                float _4372 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3291 = dot(vec3(_675, _678, _681), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                                float _4383 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                                float _3299 = _3236 * _3275;
                                float _3300 = _3299 * _3299;
                                float _3306 = ((1.0 - _3300) * dot(vec3(_675, _678, _681), vec3(_3223, _3224, _3225))) + _3300;
                                float _4394 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3308 = 1.0 - _3275;
                                float _3318 = (0.5 / (((_3307 * ((_3290 * _3308) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3275) * _3290))) * _3307;
                                float _4405 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3328 = (_3253 * _3230) * (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) / ((_3298 * _3298) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3254 * _3099.y;
                                frontier_phi_83_pred_1 = _3254 * _3099.x;
                                frontier_phi_83_pred_2 = _3328 * _3111.z;
                                frontier_phi_83_pred_3 = _3328 * _3111.y;
                                frontier_phi_83_pred_4 = _3328 * _3111.x;
                                frontier_phi_83_pred_5 = _3254 * _3099.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3336 = frontier_phi_83_pred;
                            _3335 = frontier_phi_83_pred_1;
                            _3334 = frontier_phi_83_pred_2;
                            _3333 = frontier_phi_83_pred_3;
                            _3332 = frontier_phi_83_pred_4;
                            _3337 = frontier_phi_83_pred_5;
                            _3041 = _3335 + _3054;
                            _3042 = _3336 + _3055;
                            _3043 = _3337 + _3056;
                            _3038 = _3332 + _3051;
                            _3039 = _3333 + _3052;
                            _3040 = _3334 + _3053;
                            if (_3058 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3058;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3043;
                        frontier_phi_77_pred_1 = _3042;
                        frontier_phi_77_pred_2 = _3041;
                        frontier_phi_77_pred_3 = _3040;
                        frontier_phi_77_pred_4 = _3039;
                        frontier_phi_77_pred_5 = _3038;
                    }
                    _2680 = frontier_phi_77_pred;
                    _2678 = frontier_phi_77_pred_1;
                    _2676 = frontier_phi_77_pred_2;
                    _2674 = frontier_phi_77_pred_3;
                    _2672 = frontier_phi_77_pred_4;
                    _2670 = frontier_phi_77_pred_5;
                    uint _2836 = _2835 + 1u;
                    if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2829 = _2670;
                        _2830 = _2672;
                        _2831 = _2674;
                        _2832 = _2676;
                        _2833 = _2678;
                        _2834 = _2680;
                        _2835 = _2836;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2674;
                frontier_phi_58_59_ladder_1 = _2680;
                frontier_phi_58_59_ladder_2 = _2678;
                frontier_phi_58_59_ladder_3 = _2676;
                frontier_phi_58_59_ladder_4 = _2672;
                frontier_phi_58_59_ladder_5 = _2670;
            }
            else
            {
                frontier_phi_58_59_ladder = _2552;
                frontier_phi_58_59_ladder_1 = _2558;
                frontier_phi_58_59_ladder_2 = _2556;
                frontier_phi_58_59_ladder_3 = _2554;
                frontier_phi_58_59_ladder_4 = _2550;
                frontier_phi_58_59_ladder_5 = _2548;
            }
            _2669 = frontier_phi_58_59_ladder_5;
            _2671 = frontier_phi_58_59_ladder_4;
            _2673 = frontier_phi_58_59_ladder;
            _2675 = frontier_phi_58_59_ladder_3;
            _2677 = frontier_phi_58_59_ladder_2;
            _2679 = frontier_phi_58_59_ladder_1;
        }
        float _2684 = isnan(1.0) ? _719 : (isnan(_719) ? 1.0 : min(_719, 1.0));
        _2460 = (_2684 * _2675) + _1915;
        _2462 = (_2684 * _2677) + _1917;
        _2464 = (_2684 * _2679) + _1919;
        _2466 = ((_2669 * 0.039999999105930328369140625) * _2684) + _2245;
        _2468 = ((_2671 * 0.039999999105930328369140625) * _2684) + _2247;
        _2470 = ((_2673 * 0.039999999105930328369140625) * _2684) + _2249;
    }
    else
    {
        _2460 = _1915;
        _2462 = _1917;
        _2464 = _1919;
        _2466 = _2245;
        _2468 = _2247;
        _2470 = _2249;
    }
    float _4421 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4432 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4443 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _2487 = ((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2460 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _719))) + ((_2466 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2488 = ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2462 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _719))) + ((_2468 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2489 = ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2464 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _719))) + ((_2470 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    uint _2490 = _232 + 6u;
    float _2498 = _656 / cbSceneParam._m0[86u].x;
    float _2499 = _657 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2574 = _2573 / _577;
        float _2585 = _2574 * _629;
        float _2586 = _630 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2589 = _2574 * _631;
        float _2591 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2592 = _2591 + cbSceneParam._m0[79u].w;
        float _2593 = cbSceneParam._m0[79u].w - _2586;
        float _2599 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2589 * _2589));
        float _2602 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2599;
        float _2607 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2609 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2786;
        if (abs((_2587 - _2591) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2786 = ((((_2592 > 0.0) ? exp2(_2607 * _2592) : (2.0 - exp2(_2609 * _2592))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2602;
        }
        else
        {
            float _2730 = 1.0 / cbSceneParam._m0[80u].x;
            float _2731 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : max(_2592, _2593));
            float _2732 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : min(_2592, _2593));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            _2786 = ((abs(_2599 / _2587) * cbSceneParam._m0[80u].y) * ((((_2741 - _2742) * 2.0) - ((exp2(_2607 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0)))) - exp2(_2607 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))))) * _2730)) - ((exp2(_2609 * _2741) - exp2(_2609 * _2742)) * _2730))) + (_2602 * cbSceneParam._m0[80u].z);
        }
        vec4 _2788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2797 = exp2((_2786 * (-1.44269502162933349609375)) * (1.0 - _2788.w));
        float _2798 = log2(_2797);
        float _2814 = log2(_2518);
        _2611 = (exp2(_2814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].x)) * _2788.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2613 = (exp2(_2814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].y)) * _2788.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2615 = (exp2(_2814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].z)) * _2788.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2617 = _2797 * _2518;
    }
    else
    {
        _2611 = _2515;
        _2613 = _2516;
        _2615 = _2517;
        _2617 = _2518;
    }
    bool _2824;
    vec4 _2627;
    vec4 _2649;
    float _2651;
    float _2655;
    float _2656;
    float _2657;
    float _2658;
    bool _2668;
    for (;;)
    {
        _2627 = cbMatDynParam._m0[0u];
        float _2629 = roundEven(_2627.y);
        bool _2630 = _2629 == 3.0;
        float _2631 = log2(_2617);
        float _2638 = exp2(_2631 * cbSceneParam._m0[78u].x) * _2487;
        float _2639 = exp2(_2631 * cbSceneParam._m0[78u].y) * _2488;
        float _2640 = exp2(_2631 * cbSceneParam._m0[78u].z) * _2489;
        float _2647 = _645 + (-0.5);
        _2649 = cbMtdParam._m0[1u];
        _2651 = _2649.y * _2647;
        float _2654 = (_2629 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2655 = _2654 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2611)));
        _2656 = _2654 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2613)));
        _2657 = _2654 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2615)));
        _2658 = _2647 * 0.999000012874603271484375;
        _2668 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2668)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2658) < 0.5)
            {
                _2824 = true;
                break;
            }
        }
        uint _2765 = _694 + uint(_2627.w);
        if ((cbInstanceData._m0[_2765].w < 1.0) && ((cbInstanceData._m0[_2765].w + _2658) < 0.5))
        {
            _2824 = true;
            break;
        }
        if ((_2651 + 1.0) < _2649.x)
        {
            _2824 = true;
            break;
        }
        _2824 = false;
        break;
    }
    float _3029;
    if (_2824)
    {
        discard_state = true;
        _3029 = 0.0;
    }
    else
    {
        _3029 = cbInstanceData._m0[_2490].w;
    }
    SV_Target.x = _2655;
    SV_Target.y = _2656;
    SV_Target.z = _2657;
    SV_Target.w = _3029;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2490].w;
    discard_exit();
}


