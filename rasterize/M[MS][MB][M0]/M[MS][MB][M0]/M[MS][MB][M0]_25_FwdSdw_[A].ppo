#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1135;
float _3781;
float _3782;
float _3783;
float _3784;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _308 = _304.z;
    float _313 = (_304.x * 2.0) + (-1.0);
    float _315 = (_304.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3793 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    float _325 = fma(_322, _227, fma(_315, _234, _313 * _220));
    float _328 = fma(_322, _228, fma(_315, _235, _313 * _221));
    float _331 = fma(_322, _229, fma(_315, _236, _313 * _222));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _371 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _373 = _371.x;
    float _374 = 1.0 - _373;
    float _383 = (cbMtdParam._m0[19u].x + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_373 - _374) * cbMtdParam._m0[24u].z) + _374) * cbMtdParam._m0[21u].z);
    float _3804 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _386 = (-0.0) - cbMtdParam._m0[24u].y;
    float _388 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _396 = _384 - ((_384 * TEXCOORD_8.x) * _389);
    float _397 = _384 - ((_384 * TEXCOORD_8.y) * _389);
    float _398 = _384 - ((_384 * TEXCOORD_8.z) * _389);
    float _405 = (_396 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _406 = (_397 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _407 = (_398 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _421 = _419.x;
    float _422 = 1.0 - _421;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_421 - _422) * cbMtdParam._m0[24u].w) + _422) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3825 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _405) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _453) + _405;
    float _462 = ((((cbMtdParam._m0[10u].y - _406) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _453) + _406;
    float _463 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _407)) * _453) + _407;
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _484 = (_477.x * 2.0) + (-1.0);
    float _485 = (_477.y * 2.0) + (-1.0);
    float _486 = dot(vec2(_484, _485), vec2(_484, _485));
    float _3836 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _494 = ((_477.z - _308) * _396) + _308;
    float _497 = ((cbMtdParam._m0[23u].y - _494) * _453) + _494;
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _522 = (_516.x * 2.0) + (-1.0);
    float _523 = (_516.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3847 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _539 = ((sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) - _322) * _398) + _322;
    float _542 = (((_484 - _313) * _396) + _313) + (cbMtdParam._m0[21u].x * _313);
    float _543 = (((_485 - _315) * _397) + _315) + (cbMtdParam._m0[21u].x * _315);
    float _554 = (((_522 - _542) + (_542 * cbMtdParam._m0[22u].z)) * _453) + _542;
    float _555 = (((_523 - _543) + (_543 * cbMtdParam._m0[22u].z)) * _453) + _543;
    float _556 = (_453 * (sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _539)) + _539;
    float _558 = cbMtdParam._m0[22u].x + _304.w;
    float _561 = fma(_556, _227, fma(_555, _234, _554 * _220));
    float _564 = fma(_556, _228, fma(_555, _235, _554 * _221));
    float _567 = fma(_556, _229, fma(_555, _236, _554 * _222));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3858 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _575 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3880 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3891 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3902 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    vec4 _657 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _659 = _657.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _816 = sqrt(((_643 * _643) + (_644 * _644)) + (_645 * _645));
        float _822 = (cbMatDynParam._m0[5u].x * _816) + cbMatDynParam._m0[5u].y;
        float _3913 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _827 = (cbMatDynParam._m0[5u].z * _816) + cbMatDynParam._m0[5u].w;
        float _3924 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) - _823)) + _823) < ((_659 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _671 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _672 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _695 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _698 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _711 = _239 + 9u;
    uint _712 = _711 + uint(cbMatDynParam._m0[0u].w);
    float _718 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_712].x;
    float _719 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_712].y;
    float _720 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_712].z;
    float _3935 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    vec4 _732 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _671, cbSceneParam._m0[86u].y * _672));
    float _736 = ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * TEXCOORD_5.w) * _732.x;
    float _737 = dot(vec3(_572, _573, _574), vec3(_650, _651, _652));
    float _740 = _737 * 2.0;
    float _744 = (_740 * _572) - _650;
    float _745 = (_740 * _573) - _651;
    float _746 = (_740 * _574) - _652;
    float _750 = abs(dot(vec3(_650, _651, _652), vec3(_572, _573, _574)));
    float _3968 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _752 = sqrt(_575);
    float _765 = exp2((_752 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_752 * 3.0));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1134;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _859 = fma(_805, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797));
        float _863 = fma(_805, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797));
        float _867 = fma(_805, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797));
        float _892 = _797 + _572;
        float _893 = _801 + _573;
        float _894 = _805 + _574;
        float _904 = fma(_894, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892)) - _859;
        float _905 = fma(_894, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892)) - _863;
        float _906 = fma(_894, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892)) - _867;
        float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
        float _923 = ((_910 * _904) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_859 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_910 * _905) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_863 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_910 * _906) / cbModelParam._m0[34u].z) + ((((((_867 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        float _962 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_928.x + (-0.5));
        float _964 = _962 * (_928.y + (-0.5));
        float _965 = _962 * (_928.z + (-0.5));
        float _972 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_935.x + (-0.5));
        float _974 = _972 * (_935.y + (-0.5));
        float _975 = _972 * (_935.z + (-0.5));
        float _982 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_942.x + (-0.5));
        float _984 = _982 * (_942.y + (-0.5));
        float _985 = _982 * (_942.z + (-0.5));
        float _992 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_949.x + (-0.5));
        float _994 = _992 * (_949.y + (-0.5));
        float _995 = _992 * (_949.z + (-0.5));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = _963 * 0.5;
        float _1000 = _973 * 0.5;
        float _1001 = _983 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1016 = (dot(vec3(_572, _573, _574), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1026 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _4016 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1028 + 1.0))) + _1033) * _996;
        float _1043 = _964 * 0.5;
        float _1044 = _974 * 0.5;
        float _1045 = _984 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_572, _573, _574), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _4049 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1070 + 1.0))) + _1075) * _997;
        float _1085 = _965 * 0.5;
        float _1086 = _975 * 0.5;
        float _1087 = _985 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_572, _573, _574), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _4082 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1112 + 1.0))) + _1117) * _998;
        _1134 = _965;
        _1136 = _964;
        _1137 = _963;
        _1138 = _975;
        _1139 = _974;
        _1140 = _973;
        _1141 = _985;
        _1142 = _984;
        _1143 = _983;
        _1144 = _998;
        _1145 = _997;
        _1146 = _996;
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
    }
    else
    {
        _1134 = _1135;
        _1136 = _1135;
        _1137 = _1135;
        _1138 = _1135;
        _1139 = _1135;
        _1140 = _1135;
        _1141 = _1135;
        _1142 = _1135;
        _1143 = _1135;
        _1144 = _1135;
        _1145 = _1135;
        _1146 = _1135;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_805, cbModelParam._m0[30u].z, fma(_801, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797));
        float _1181 = fma(_805, cbModelParam._m0[31u].z, fma(_801, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797));
        float _1185 = fma(_805, cbModelParam._m0[32u].z, fma(_801, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797));
        float _1208 = _797 + _572;
        float _1209 = _801 + _573;
        float _1210 = _805 + _574;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_572, _573, _574), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4145 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_572, _573, _574), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4178 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_572, _573, _574), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4211 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1135;
        _1447 = _1135;
        _1448 = _1135;
        _1449 = _1135;
        _1450 = _1135;
        _1451 = _1135;
        _1452 = _1135;
        _1453 = _1135;
        _1454 = _1135;
        _1455 = _1135;
        _1456 = _1135;
        _1457 = _1135;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1147)) + _1147;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1148)) + _1148;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1149)) + _1149;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _744 * 0.5;
    float _1515 = _745 * 0.5;
    float _1516 = _746 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1134, _1138, _1141, _1144));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1631 = fma(_805, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797)) + cbModelParam._m0[13u].w;
        float _1635 = fma(_805, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797)) + cbModelParam._m0[14u].w;
        float _1639 = fma(_805, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797)) + cbModelParam._m0[15u].w;
        float _1642 = fma(_746, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744));
        float _1645 = fma(_746, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744));
        float _1648 = fma(_746, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744));
        float _1676;
        if (_1642 > 0.0)
        {
            _1676 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1676 = frontier_phi_17_15_ladder;
        }
        float _1847;
        if (_1645 > 0.0)
        {
            _1847 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1847 = frontier_phi_26_22_ladder;
        }
        float _2143;
        if (_1648 > 0.0)
        {
            _2143 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2143 = frontier_phi_38_33_ladder;
        }
        float _2145 = isnan(_1847) ? _1676 : (isnan(_1676) ? _1847 : min(_1676, _1847));
        float _2146 = isnan(_2143) ? _2145 : (isnan(_2145) ? _2143 : min(_2145, _2143));
        float _2150 = (_2146 * _1642) + _1631;
        float _2151 = (_2146 * _1645) + _1635;
        float _2152 = (_2146 * _1648) + _1639;
        float _2153 = _2146 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2153;
        float _2157 = _2153 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 > _2157) || ((_2151 < _2155) || ((_2150 < _2155) || (_2150 > _2157))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2152, cbModelParam._m0[9u].z, fma(_2151, cbModelParam._m0[9u].y, _2150 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2152, cbModelParam._m0[10u].z, fma(_2151, cbModelParam._m0[10u].y, _2150 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2152, cbModelParam._m0[11u].z, fma(_2151, cbModelParam._m0[11u].y, _2150 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_16_38_ladder = _2297.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2297.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2297.x * cbModelParam._m0[1u].y;
        }
        _1664 = frontier_phi_16_38_ladder_2;
        _1666 = frontier_phi_16_38_ladder_1;
        _1668 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_744, _745, _746), _1583);
        _1664 = _1652.x * cbModelParam._m0[1u].y;
        _1666 = _1652.y * cbModelParam._m0[1u].y;
        _1668 = _1652.z * cbModelParam._m0[1u].y;
    }
    float _1672 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1672 : min(cbModelParam._m0[25u].w, _1672));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_805, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_805, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_805, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_746, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744));
        float _1741 = fma(_746, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744));
        float _1744 = fma(_746, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744));
        float _1852;
        if (_1738 > 0.0)
        {
            _1852 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1852 = frontier_phi_28_24_ladder;
        }
        float _2170;
        if (_1741 > 0.0)
        {
            _2170 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2170 = frontier_phi_40_35_ladder;
        }
        float _2497;
        if (_1744 > 0.0)
        {
            _2497 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2497 = frontier_phi_50_47_ladder;
        }
        float _2499 = isnan(_2170) ? _1852 : (isnan(_1852) ? _2170 : min(_1852, _2170));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1738) + _1727;
        float _2505 = (_2500 * _1741) + _1731;
        float _2506 = (_2500 * _1744) + _1735;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1673);
            frontier_phi_25_50_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_25_50_ladder_2;
        _1765 = frontier_phi_25_50_ladder_1;
        _1767 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_744, _745, _746), _1673);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1779 = ((((1.0 - _765) * ((_752 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_765 * _752)) * _736;
    float _1780 = _1779 * ((cbModelParam._m0[1u].w * (_1763 - _1664)) + _1664);
    float _1781 = _1779 * ((cbModelParam._m0[1u].w * (_1765 - _1666)) + _1666);
    float _1782 = _1779 * ((cbModelParam._m0[1u].w * (_1767 - _1668)) + _1668);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1839 = _1826 / _1838;
    float _1840 = _1830 / _1838;
    float _1841 = _1834 / _1838;
    float _1988;
    float _1989;
    float _1990;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1868 = ((uint(_1841 > cbSceneParam._m0[59u].y) + uint(_1841 > cbSceneParam._m0[59u].x)) + uint(_1841 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1869 = _1868 + 43u;
        uint _1877 = _1868 + 44u;
        uint _1885 = _1868 + 45u;
        uint _1893 = _1868 + 46u;
        float _1904 = fma(_1838, cbSceneParam._m0[_1869].w, fma(_1834, cbSceneParam._m0[_1869].z, fma(_1830, cbSceneParam._m0[_1869].y, _1826 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1838, cbSceneParam._m0[_1877].w, fma(_1834, cbSceneParam._m0[_1877].z, fma(_1830, cbSceneParam._m0[_1877].y, _1826 * cbSceneParam._m0[_1877].x)));
        float _1916 = fma(_1838, cbSceneParam._m0[_1893].w, fma(_1834, cbSceneParam._m0[_1893].z, fma(_1830, cbSceneParam._m0[_1893].y, _1826 * cbSceneParam._m0[_1893].x)));
        float _1921 = cbSceneParam._m0[33u].z * _1916;
        float _1923 = cbSceneParam._m0[33u].w * _1916;
        float _1926 = fma(_1838, cbSceneParam._m0[_1885].w, fma(_1834, cbSceneParam._m0[_1885].z, fma(_1830, cbSceneParam._m0[_1885].y, _1826 * cbSceneParam._m0[_1885].x))) / _1916;
        float _1974 = (cbSceneParam._m0[33u].x - sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841))) * cbSceneParam._m0[33u].y;
        float _4337 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1981 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 + _1904) / _1916, (_1923 + _1908) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 + _1904) / _1916, (_1908 - _1921) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 - _1921) / _1916, (_1908 - _1923) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 - _1923) / _1916, (_1921 + _1908) / _1916), _1926), 0.0)).x), vec4(0.25)));
        _1988 = 1.0 - (_1981 * cbSceneParam._m0[34u].x);
        _1989 = 1.0 - (_1981 * cbSceneParam._m0[34u].y);
        _1990 = 1.0 - (_1981 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1988 = 1.0;
        _1989 = 1.0;
        _1990 = 1.0;
    }
    float _2054;
    float _2056;
    float _2058;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2042 = fma(_1838, cbSceneParam._m0[63u].w, fma(_1834, cbSceneParam._m0[63u].z, fma(_1830, cbSceneParam._m0[63u].y, _1826 * cbSceneParam._m0[63u].x)));
        float _2043 = fma(_1838, cbSceneParam._m0[60u].w, fma(_1834, cbSceneParam._m0[60u].z, fma(_1830, cbSceneParam._m0[60u].y, _1826 * cbSceneParam._m0[60u].x))) / _2042;
        float _2044 = fma(_1838, cbSceneParam._m0[61u].w, fma(_1834, cbSceneParam._m0[61u].z, fma(_1830, cbSceneParam._m0[61u].y, _1826 * cbSceneParam._m0[61u].x))) / _2042;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2043 >= cbSceneParam._m0[64u].x) && (_2044 >= cbSceneParam._m0[64u].y)) && (_2043 <= cbSceneParam._m0[64u].z)) && (_2044 <= cbSceneParam._m0[64u].w))
        {
            float _2183 = fma(_1838, cbSceneParam._m0[62u].w, fma(_1834, cbSceneParam._m0[62u].z, fma(_1830, cbSceneParam._m0[62u].y, _1826 * cbSceneParam._m0[62u].x))) / _2042;
            float _2187 = isnan(cbSceneParam._m0[41u].w) ? _2183 : (isnan(_2183) ? cbSceneParam._m0[41u].w : max(_2183, cbSceneParam._m0[41u].w));
            float _2230 = (cbSceneParam._m0[33u].x - sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841))) * cbSceneParam._m0[33u].y;
            float _4353 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
            float _2237 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2043, cbSceneParam._m0[33u].w + _2044), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2043, _2044 - cbSceneParam._m0[33u].z), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2043 - cbSceneParam._m0[33u].z, _2044 - cbSceneParam._m0[33u].w), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2043 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2044), _2187), 0.0)).x), vec4(0.25)));
            float _2241 = 1.0 - (_2237 * cbSceneParam._m0[34u].x);
            float _2242 = 1.0 - (_2237 * cbSceneParam._m0[34u].y);
            float _2243 = 1.0 - (_2237 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2243) ? _1990 : (isnan(_1990) ? _2243 : min(_1990, _2243));
            frontier_phi_37_36_ladder_1 = isnan(_2242) ? _1989 : (isnan(_1989) ? _2242 : min(_1989, _2242));
            frontier_phi_37_36_ladder_2 = isnan(_2241) ? _1988 : (isnan(_1988) ? _2241 : min(_1988, _2241));
        }
        else
        {
            frontier_phi_37_36_ladder = _1990;
            frontier_phi_37_36_ladder_1 = _1989;
            frontier_phi_37_36_ladder_2 = _1988;
        }
        _2054 = frontier_phi_37_36_ladder_2;
        _2056 = frontier_phi_37_36_ladder_1;
        _2058 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2054 = _1988;
        _2056 = _1989;
        _2058 = _1990;
    }
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2073 = _736 + (-1.0);
    float _2078 = (cbLight._m0[_2066].x * _2073) + 1.0;
    float _2079 = (cbLight._m0[_2066].y * _2073) + 1.0;
    float _2080 = (cbLight._m0[_2066].z * _2073) + 1.0;
    float _2081 = (cbLight._m0[_2066].w * _2073) + 1.0;
    uint _2082 = _2065 + 5u;
    float _2088 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2092 = _2065 + 4u;
    float _2102 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2106 = _2065 | 1u;
    float _2117 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_572, _573, _574));
    float _2120 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_572, _573, _574));
    float _4389 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _4400 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2127 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2134 = ((cbLight._m0[_2082].x * _2088) * _2127) + (((cbLight._m0[_2092].x * _2054) * _2102) * _2125);
    float _2135 = ((_2088 * cbLight._m0[_2082].y) * _2127) + (((cbLight._m0[_2092].y * _2056) * _2102) * _2125);
    float _2136 = ((_2088 * cbLight._m0[_2082].z) * _2127) + (((cbLight._m0[_2092].z * _2058) * _2102) * _2125);
    uvec4 _2140 = floatBitsToUint(cbLight._m0[_2065 + 12u]);
    bool _2142 = _2140.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2142)
    {
        _2244 = _2134;
        _2246 = _2135;
        _2248 = _2136;
    }
    else
    {
        uint _2252 = _2065 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2065 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4411 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2271 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2134;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2135;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2136;
    }
    bool _2251 = _2140.y == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2251)
    {
        _2306 = _2244;
        _2308 = _2246;
        _2310 = _2248;
    }
    else
    {
        uint _2468 = _2065 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2065 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4427 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2487 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2306 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2244;
        _2308 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2246;
        _2310 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2248;
    }
    uint _2313 = _2065 + 8u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _575) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2065].x + _650;
    float _2329 = cbLight._m0[_2065].y + _651;
    float _2330 = cbLight._m0[_2065].z + _652;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2065].xyz));
    float _4443 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _2342 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2343 = dot(vec3(_572, _573, _574), vec3(_2335, _2336, _2337));
    float _4465 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2335, _2336, _2337));
    float _4476 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2327 * _2327;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2342 * ((_2341 * _2367) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2367) + _2327) * _2341))) * _2341;
    float _4487 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    uint _2394 = _2065 + 9u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _575) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2106].x + _650;
    float _2408 = cbLight._m0[_2106].y + _651;
    float _2409 = cbLight._m0[_2106].z + _652;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2106].xyz));
    float _4498 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2421 = dot(vec3(_572, _573, _574), vec3(_2414, _2415, _2416));
    float _4509 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2414, _2415, _2416));
    float _4520 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2406 * _2406;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2443 = 1.0 - _2406;
    float _2453 = (0.5 / (((_2342 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2443) + _2406) * _2420))) * _2420;
    float _4531 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    float _2465 = (((_2442 * cbLight._m0[_2394].x) * _2455) * _2088) + ((((cbLight._m0[_2313].x * _2054) * _2366) * _2380) * _2102);
    float _2466 = (((_2442 * cbLight._m0[_2394].y) * _2455) * _2088) + ((((cbLight._m0[_2313].y * _2056) * _2366) * _2380) * _2102);
    float _2467 = (((_2442 * cbLight._m0[_2394].z) * _2455) * _2088) + ((((cbLight._m0[_2313].z * _2058) * _2366) * _2380) * _2102);
    float _2523;
    float _2525;
    float _2527;
    if (_2142)
    {
        _2523 = _2465;
        _2525 = _2466;
        _2527 = _2467;
    }
    else
    {
        uint _2529 = _2065 + 2u;
        uint _2533 = _2065 + 10u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _575) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _650;
        float _2550 = cbLight._m0[_2529].y + _651;
        float _2551 = cbLight._m0[_2529].z + _652;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2529].xyz));
        float _4542 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2563 = dot(vec3(_572, _573, _574), vec3(_2556, _2557, _2558));
        float _4553 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4564 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2584 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2585 = 1.0 - _2548;
        float _2595 = (0.5 / (((_2342 * ((_2562 * _2585) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2585) + _2548) * _2562))) * _2562;
        float _4575 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2523 = (((_2584 * cbLight._m0[_2533].x) * _2597) * _2598) + _2465;
        _2525 = (((_2584 * cbLight._m0[_2533].y) * _2597) * _2598) + _2466;
        _2527 = (((_2584 * cbLight._m0[_2533].z) * _2597) * _2598) + _2467;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2251)
    {
        _2629 = _2523;
        _2631 = _2525;
        _2633 = _2527;
    }
    else
    {
        uint _2640 = _2065 + 3u;
        uint _2644 = _2065 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _575) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _650;
        float _2661 = cbLight._m0[_2640].y + _651;
        float _2662 = cbLight._m0[_2640].z + _652;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2640].xyz));
        float _4591 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2674 = dot(vec3(_572, _573, _574), vec3(_2667, _2668, _2669));
        float _4602 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4613 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2342 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2696) + _2659) * _2673))) * _2673;
        float _4624 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2523;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2525;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2527;
    }
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2063.y == 0u)
    {
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _672) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _671) / _2731)));
        float _2752 = (log2(_1841 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3010)
                {
                    frontier_phi_71_pred = _2999;
                    frontier_phi_71_pred_1 = _2998;
                    frontier_phi_71_pred_2 = _2997;
                    frontier_phi_71_pred_3 = _2996;
                    frontier_phi_71_pred_4 = _2995;
                    frontier_phi_71_pred_5 = _2994;
                }
                else
                {
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    uint _3145;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3009;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3149 = uint(findLSB(_3145)) + (_3000 << 5u);
                        uint _3146 = (_3145 + 4294967295u) & _3145;
                        uint _3151 = _3149 * 48u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3171 = (_3149 * 48u) + 4u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3190 = (_3149 * 48u) + 8u;
                        vec3 _3201 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x));
                        float _3205 = _3165.x - _1839;
                        float _3206 = _3165.y - _1840;
                        float _3207 = _3165.z - _1841;
                        float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                        float _3211 = inversesqrt(_3208);
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3215 = dot(vec3(_692, _695, _698), vec3(_3212, _3213, _3214));
                        float _3220 = 1.0 - (_3208 * _3165.w);
                        float _4650 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3222 = sqrt(_3208) * _3184.w;
                        float _3225 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3215) + _3226;
                        float _3232 = _3222 * _3222;
                        float _3236 = ((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3221) / ((_3232 * 0.699999988079071044921875) + 1.0);
                        float _3240 = (-0.0) - _1839;
                        float _3241 = (-0.0) - _1840;
                        float _3242 = (-0.0) - _1841;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3256 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                        float _3257 = 1.0 - _752;
                        float _3264 = sqrt(1.0 - ((1.0 - (_3257 * _3257)) * (1.0 - (_3256 * _3256))));
                        float _3265 = _3264 * _3264;
                        float _3266 = _3265 * _3265;
                        float _3267 = _3247 + _3212;
                        float _3268 = _3248 + _3213;
                        float _3269 = _3249 + _3214;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3277 = dot(vec3(_692, _695, _698), vec3(_3247, _3248, _3249));
                        float _4666 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3280 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3281 = dot(vec3(_692, _695, _698), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                        float _4677 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                        float _3289 = _3225 * _3265;
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3215) + _3290;
                        float _4688 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3295 = 1.0 - _3265;
                        float _3305 = (0.5 / (((_3294 * ((_3280 * _3295) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3265) * _3280))) * _3294;
                        float _4699 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3316 = (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3288 * _3288) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125))) * _3221;
                        _3069 = (_3236 * _3184.x) + _3142;
                        _3070 = (_3236 * _3184.y) + _3143;
                        _3071 = (_3236 * _3184.z) + _3144;
                        _3066 = (_3316 * _3201.x) + _3139;
                        _3067 = (_3316 * _3201.y) + _3140;
                        _3068 = (_3316 * _3201.z) + _3141;
                        if (_3146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3146;
                        }
                    }
                    frontier_phi_71_pred = _3071;
                    frontier_phi_71_pred_1 = _3070;
                    frontier_phi_71_pred_2 = _3069;
                    frontier_phi_71_pred_3 = _3068;
                    frontier_phi_71_pred_4 = _3067;
                    frontier_phi_71_pred_5 = _3066;
                }
                _2853 = frontier_phi_71_pred;
                _2851 = frontier_phi_71_pred_1;
                _2849 = frontier_phi_71_pred_2;
                _2847 = frontier_phi_71_pred_3;
                _2845 = frontier_phi_71_pred_4;
                _2843 = frontier_phi_71_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2843;
                    _2995 = _2845;
                    _2996 = _2847;
                    _2997 = _2849;
                    _2998 = _2851;
                    _2999 = _2853;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2859) & _2762) == 0u)
        {
            _2962 = _2842;
            _2964 = _2844;
            _2966 = _2846;
            _2968 = _2848;
            _2970 = _2850;
            _2972 = _2852;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
            float _2988 = _2987 * _1839;
            float _2989 = _2987 * _1840;
            float _2990 = _2987 * _1841;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3122 = _2842;
                float _3123 = _2844;
                float _3124 = _2846;
                float _3125 = _2848;
                float _3126 = _2850;
                float _3127 = _2852;
                uint _3128 = _2859;
                uint _3137;
                bool _3138;
                for (;;)
                {
                    _3137 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                    _3138 = _3137 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3138)
                    {
                        frontier_phi_82_pred = _3127;
                        frontier_phi_82_pred_1 = _3126;
                        frontier_phi_82_pred_2 = _3125;
                        frontier_phi_82_pred_3 = _3124;
                        frontier_phi_82_pred_4 = _3123;
                        frontier_phi_82_pred_5 = _3122;
                    }
                    else
                    {
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        float _3347 = _3126;
                        float _3348 = _3127;
                        uint _3349 = _3137;
                        uint _3350;
                        vec4 _3375;
                        float _3376;
                        vec4 _3391;
                        vec3 _3403;
                        vec4 _3419;
                        vec4 _3435;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3360 = ((_3128 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3349));
                            _3350 = (_3349 + 4294967295u) & _3349;
                            uint _3362 = _3360 * 40u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3376 = _3375.w;
                            uint _3378 = (_3360 * 40u) + 4u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3360 * 40u) + 8u;
                            _3403 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x));
                            uint _3406 = (_3360 * 40u) + 16u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3422 = (_3360 * 40u) + 20u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3360 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3360 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_1841, _3469.z, fma(_1840, _3469.y, _3469.x * _1839)) + _3469.w;
                            _3482 = !((fma(_1841, _3450.z, fma(_1840, _3450.y, _3450.x * _1839)) + _3450.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3375.x - _1839;
                                float _3510 = _3375.y - _1840;
                                float _3511 = _3375.z - _1841;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3376 * _3376));
                                float _4710 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3527 = sqrt(_3512) * _3391.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_692, _695, _698))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_1841, _3419.z, fma(_1840, _3419.y, _3419.x * _1839)) + _3419.w) / _3481;
                                float _3541 = (fma(_1841, _3435.z, fma(_1840, _3435.y, _3435.x * _1839)) + _3435.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4726 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _752;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _2988;
                                float _3571 = _3517 - _2989;
                                float _3572 = _3518 - _2990;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4737 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3584 = dot(vec3(_692, _695, _698), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4748 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_692, _695, _698), vec3(_3516, _3517, _3518))) + _3593;
                                float _4759 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4770 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3547 * _3391.z;
                                frontier_phi_88_pred_1 = _3547 * _3391.y;
                                frontier_phi_88_pred_2 = _3547 * _3391.x;
                                frontier_phi_88_pred_3 = _3621 * _3403.z;
                                frontier_phi_88_pred_4 = _3621 * _3403.y;
                                frontier_phi_88_pred_5 = _3621 * _3403.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_88_pred;
                            _3629 = frontier_phi_88_pred_1;
                            _3628 = frontier_phi_88_pred_2;
                            _3627 = frontier_phi_88_pred_3;
                            _3626 = frontier_phi_88_pred_4;
                            _3625 = frontier_phi_88_pred_5;
                            _3333 = _3628 + _3346;
                            _3334 = _3629 + _3347;
                            _3335 = _3630 + _3348;
                            _3330 = _3625 + _3343;
                            _3331 = _3626 + _3344;
                            _3332 = _3627 + _3345;
                            if (_3350 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3350;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3335;
                        frontier_phi_82_pred_1 = _3334;
                        frontier_phi_82_pred_2 = _3333;
                        frontier_phi_82_pred_3 = _3332;
                        frontier_phi_82_pred_4 = _3331;
                        frontier_phi_82_pred_5 = _3330;
                    }
                    _2973 = frontier_phi_82_pred;
                    _2971 = frontier_phi_82_pred_1;
                    _2969 = frontier_phi_82_pred_2;
                    _2967 = frontier_phi_82_pred_3;
                    _2965 = frontier_phi_82_pred_4;
                    _2963 = frontier_phi_82_pred_5;
                    uint _3129 = _3128 + 1u;
                    if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3122 = _2963;
                        _3123 = _2965;
                        _3124 = _2967;
                        _3125 = _2969;
                        _3126 = _2971;
                        _3127 = _2973;
                        _3128 = _3129;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2969;
                frontier_phi_63_64_ladder_1 = _2973;
                frontier_phi_63_64_ladder_2 = _2971;
                frontier_phi_63_64_ladder_3 = _2967;
                frontier_phi_63_64_ladder_4 = _2965;
                frontier_phi_63_64_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_63_64_ladder = _2848;
                frontier_phi_63_64_ladder_1 = _2852;
                frontier_phi_63_64_ladder_2 = _2850;
                frontier_phi_63_64_ladder_3 = _2846;
                frontier_phi_63_64_ladder_4 = _2844;
                frontier_phi_63_64_ladder_5 = _2842;
            }
            _2962 = frontier_phi_63_64_ladder_5;
            _2964 = frontier_phi_63_64_ladder_4;
            _2966 = frontier_phi_63_64_ladder_3;
            _2968 = frontier_phi_63_64_ladder;
            _2970 = frontier_phi_63_64_ladder_2;
            _2972 = frontier_phi_63_64_ladder_1;
        }
        float _2977 = isnan(1.0) ? _736 : (isnan(_736) ? 1.0 : min(_736, 1.0));
        _2775 = (_2977 * _2968) + _2306;
        _2777 = (_2977 * _2970) + _2308;
        _2779 = (_2977 * _2972) + _2310;
        _2781 = ((_2962 * 0.039999999105930328369140625) * _2977) + _2629;
        _2783 = ((_2964 * 0.039999999105930328369140625) * _2977) + _2631;
        _2785 = ((_2966 * 0.039999999105930328369140625) * _2977) + _2633;
    }
    else
    {
        _2775 = _2306;
        _2777 = _2308;
        _2779 = _2310;
        _2781 = _2629;
        _2783 = _2631;
        _2785 = _2633;
    }
    float _4786 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4797 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4808 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _2802 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2775 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _736))) + ((_2781 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2803 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2777 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _736))) + ((_2783 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2804 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2779 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _736))) + ((_2785 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    uint _2805 = _239 + 6u;
    float _2813 = _671 / cbSceneParam._m0[86u].x;
    float _2814 = _672 / cbSceneParam._m0[86u].y;
    vec4 _2828 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2830 = _2828.x;
    float _2831 = _2828.y;
    float _2832 = _2828.z;
    float _2833 = _2828.w;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2868 = _2867 / _593;
        float _2879 = _2868 * _643;
        float _2880 = _644 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2882 = _2868 * _645;
        float _2884 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2885 = _2884 + cbSceneParam._m0[79u].w;
        float _2886 = cbSceneParam._m0[79u].w - _2880;
        float _2892 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2882 * _2882));
        float _2895 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2892;
        float _2900 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2902 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2881 - _2884) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2885 > 0.0) ? exp2(_2900 * _2885) : (2.0 - exp2(_2902 * _2885))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2895;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : max(_2885, _2886));
            float _3025 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : min(_2885, _2886));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3079 = ((abs(_2892 / _2881) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2900 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2900 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2902 * _3034) - exp2(_2902 * _3035)) * _3023))) + (_2895 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2833);
        _2904 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2830;
        _2906 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2831;
        _2908 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2832;
        _2910 = _3090 * _2833;
    }
    else
    {
        _2904 = _2830;
        _2906 = _2831;
        _2908 = _2832;
        _2910 = _2833;
    }
    bool _3117;
    vec4 _2920;
    vec4 _2942;
    float _2944;
    float _2948;
    float _2949;
    float _2950;
    float _2951;
    bool _2961;
    for (;;)
    {
        _2920 = cbMatDynParam._m0[0u];
        float _2922 = roundEven(_2920.y);
        bool _2923 = _2922 == 3.0;
        float _2924 = log2(_2910);
        float _2931 = exp2(_2924 * cbSceneParam._m0[78u].x) * _2802;
        float _2932 = exp2(_2924 * cbSceneParam._m0[78u].y) * _2803;
        float _2933 = exp2(_2924 * cbSceneParam._m0[78u].z) * _2804;
        float _2940 = _659 + (-0.5);
        _2942 = cbMtdParam._m0[1u];
        _2944 = _2942.y * _2940;
        float _2947 = (_2922 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2948 = _2947 * (_2923 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2904)));
        _2949 = _2947 * (_2923 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2906)));
        _2950 = _2947 * (_2923 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2908)));
        _2951 = _2940 * 0.999000012874603271484375;
        _2961 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2961)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2951) < 0.5)
            {
                _3117 = true;
                break;
            }
        }
        uint _3058 = _711 + uint(_2920.w);
        if ((cbInstanceData._m0[_3058].w < 1.0) && ((cbInstanceData._m0[_3058].w + _2951) < 0.5))
        {
            _3117 = true;
            break;
        }
        if ((_2944 + 1.0) < _2942.x)
        {
            _3117 = true;
            break;
        }
        _3117 = false;
        break;
    }
    float _3321;
    if (_3117)
    {
        discard_state = true;
        _3321 = 0.0;
    }
    else
    {
        _3321 = cbInstanceData._m0[_2805].w;
    }
    SV_Target.x = _2948;
    SV_Target.y = _2949;
    SV_Target.z = _2950;
    SV_Target.w = _3321;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2805].w;
    discard_exit();
}


