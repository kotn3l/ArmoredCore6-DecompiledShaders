#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1241;
float _3626;
float _3627;
float _3628;
float _3629;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _367 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _367) * cbMtdParam._m0[24u].x) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3638 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _392 = (_385 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _393 = (_385 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _394 = (_385 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].x) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3649 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _499 = _497.x;
    float _500 = _497.y;
    float _501 = _497.z;
    float _508 = ((_480.x - _499) * _385) + _499;
    float _509 = ((_480.y - _500) * _385) + _500;
    float _510 = ((_480.z - _501) * _385) + _501;
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _535 = ((_522.z - _510) * _458) + _510;
    float _538 = ((((_522.x - _508) * _458) + _508) * 2.0) + (-1.0);
    float _540 = ((((_522.y - _509) * _458) + _509) * 2.0) + (-1.0);
    float _541 = dot(vec2(_538, _540), vec2(_538, _540));
    float _3660 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _546 = sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _575 = _573.x;
    float _576 = 1.0 - _575;
    float _604 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_575 - _576) * cbMtdParam._m0[24u].w) + _576) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3671 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _613 = ((((cbMtdParam._m0[10u].x - _465) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _605) + _465;
    float _614 = ((((cbMtdParam._m0[10u].y - _466) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _605) + _466;
    float _615 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _467)) * _605) + _467;
    float _619 = ((cbMtdParam._m0[23u].y - _535) * _605) + _535;
    vec4 _638 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _644 = (_638.x * 2.0) + (-1.0);
    float _645 = (_638.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3682 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _662 = (_605 * (((cbMtdParam._m0[22u].z * _538) - _538) + _644)) + _538;
    float _663 = (_605 * (((cbMtdParam._m0[22u].z * _540) - _540) + _645)) + _540;
    float _664 = (_605 * (sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) - _546)) + _546;
    float _666 = cbMtdParam._m0[22u].x + _559.w;
    float _669 = fma(_664, _236 * NORMAL.x, fma(_663, _243 * TANGENT.x, (_229 * _221) * _662));
    float _672 = fma(_664, _236 * NORMAL.y, fma(_663, _243 * TANGENT.y, (_229 * _222) * _662));
    float _675 = fma(_664, _236 * NORMAL.z, fma(_663, _243 * TANGENT.z, (_229 * _223) * _662));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _3693 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _683 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3715 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3726 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3737 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _752 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _742);
    float _753 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _742);
    float _754 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _742);
    float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
    float _759 = _752 * _758;
    float _760 = _753 * _758;
    float _761 = _754 * _758;
    vec4 _766 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _768 = _766.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _922 = sqrt(((_752 * _752) + (_753 * _753)) + (_754 * _754));
        float _928 = (cbMatDynParam._m0[5u].x * _922) + cbMatDynParam._m0[5u].y;
        float _3748 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _933 = (cbMatDynParam._m0[5u].z * _922) + cbMatDynParam._m0[5u].w;
        float _3759 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) - _929)) + _929) < ((_768 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _798 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _801 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _804 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    uint _817 = _249 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_818].z;
    float _3770 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    vec4 _838 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _842 = ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * TEXCOORD_5.w) * _838.x;
    float _843 = dot(vec3(_680, _681, _682), vec3(_759, _760, _761));
    float _846 = _843 * 2.0;
    float _850 = (_846 * _680) - _759;
    float _851 = (_846 * _681) - _760;
    float _852 = (_846 * _682) - _761;
    float _856 = abs(dot(vec3(_759, _760, _761), vec3(_680, _681, _682)));
    float _3803 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _858 = sqrt(_683);
    float _871 = exp2((_858 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_858 * 3.0));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _969 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _973 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _998 = _903 + _680;
        float _999 = _907 + _681;
        float _1000 = _911 + _682;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_680, _681, _682), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3851 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_680, _681, _682), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3884 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_680, _681, _682), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3917 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1286 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1290 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1313 = _903 + _680;
        float _1314 = _907 + _681;
        float _1315 = _911 + _682;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_680, _681, _682), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3980 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_680, _681, _682), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4013 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_680, _681, _682), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4046 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1241;
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = _1241;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1253)) + _1253;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1254)) + _1254;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1255)) + _1255;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _850 * 0.5;
    float _1620 = _851 * 0.5;
    float _1621 = _852 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_852, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850));
        float _1751 = fma(_852, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850));
        float _1754 = fma(_852, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1782 = frontier_phi_17_15_ladder;
        }
        float _2005;
        if (_1751 > 0.0)
        {
            _2005 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2005 = frontier_phi_26_22_ladder;
        }
        float _2251;
        if (_1754 > 0.0)
        {
            _2251 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2251 = frontier_phi_38_33_ladder;
        }
        float _2253 = isnan(_2005) ? _1782 : (isnan(_1782) ? _2005 : min(_1782, _2005));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1748) + _1737;
        float _2259 = (_2254 * _1751) + _1741;
        float _2260 = (_2254 * _1754) + _1745;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_16_38_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_16_38_ladder_2;
        _1772 = frontier_phi_16_38_ladder_1;
        _1774 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_850, _851, _852), _1688);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_852, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850));
        float _1848 = fma(_852, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850));
        float _1851 = fma(_852, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850));
        float _2010;
        if (_1845 > 0.0)
        {
            _2010 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2010 = frontier_phi_28_24_ladder;
        }
        float _2278;
        if (_1848 > 0.0)
        {
            _2278 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2278 = frontier_phi_40_35_ladder;
        }
        float _2483;
        if (_1851 > 0.0)
        {
            _2483 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2483 = frontier_phi_49_46_ladder;
        }
        float _2485 = isnan(_2278) ? _2010 : (isnan(_2010) ? _2278 : min(_2010, _2278));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1845) + _1834;
        float _2491 = (_2486 * _1848) + _1838;
        float _2492 = (_2486 * _1851) + _1842;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2493;
        float _2496 = _2493 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2492 > _2496) || ((_2492 < _2494) || ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 < _2494) || (_2490 > _2496))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2492, cbModelParam._m0[17u].z, fma(_2491, cbModelParam._m0[17u].y, _2490 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2492, cbModelParam._m0[18u].z, fma(_2491, cbModelParam._m0[18u].y, _2490 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2492, cbModelParam._m0[19u].z, fma(_2491, cbModelParam._m0[19u].y, _2490 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_25_49_ladder = _2691.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2691.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2691.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_25_49_ladder_2;
        _1872 = frontier_phi_25_49_ladder_1;
        _1874 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_850, _851, _852), _1779);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _871) * ((_858 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_871 * _858)) * _842;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    vec4 _1906 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_779, _780));
    float _1908 = _1906.w;
    float _1920 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1908);
    float _1921 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1908);
    float _1922 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1908);
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1936 = _842 + (-1.0);
    float _1941 = (cbLight._m0[_1929].x * _1936) + 1.0;
    float _1942 = (cbLight._m0[_1929].y * _1936) + 1.0;
    float _1943 = (cbLight._m0[_1929].z * _1936) + 1.0;
    float _1944 = (cbLight._m0[_1929].w * _1936) + 1.0;
    uint _1945 = _1928 + 5u;
    float _1951 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1955 = _1928 + 4u;
    float _1964 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1968 = _1928 | 1u;
    float _1979 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_680, _681, _682));
    float _1982 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_680, _681, _682));
    float _4182 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _4193 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1989 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _1996 = ((cbLight._m0[_1945].x * _1951) * _1989) + (((cbLight._m0[_1955].x * _1920) * _1964) * _1987);
    float _1997 = ((_1951 * cbLight._m0[_1945].y) * _1989) + (((cbLight._m0[_1955].y * _1921) * _1964) * _1987);
    float _1998 = ((_1951 * cbLight._m0[_1945].z) * _1989) + (((cbLight._m0[_1955].z * _1922) * _1964) * _1987);
    uvec4 _2002 = floatBitsToUint(cbLight._m0[_1928 + 12u]);
    bool _2004 = _2002.x == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_2004)
    {
        _2015 = _1996;
        _2017 = _1997;
        _2019 = _1998;
    }
    else
    {
        uint _2023 = _1928 + 6u;
        float _2039 = (dot(vec3(cbLight._m0[_1928 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4204 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2042 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2015 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1996;
        _2017 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1997;
        _2019 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1998;
    }
    bool _2022 = _2002.y == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2022)
    {
        _2060 = _2015;
        _2062 = _2017;
        _2064 = _2019;
    }
    else
    {
        uint _2222 = _1928 + 7u;
        float _2238 = (dot(vec3(cbLight._m0[_1928 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4220 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2241 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2060 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2015;
        _2062 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2017;
        _2064 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2019;
    }
    uint _2067 = _1928 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _683) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1928].x + _759;
    float _2083 = cbLight._m0[_1928].y + _760;
    float _2084 = cbLight._m0[_1928].z + _761;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_1928].xyz));
    float _4236 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _2096 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2097 = dot(vec3(_680, _681, _682), vec3(_2089, _2090, _2091));
    float _4258 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2089, _2090, _2091));
    float _4269 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2121 = 1.0 - _2081;
    float _2132 = (0.5 / (((_2096 * ((_2095 * _2121) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2121) + _2081) * _2095))) * _2095;
    float _4280 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2148 = _1928 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _683) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_1968].x + _759;
    float _2162 = cbLight._m0[_1968].y + _760;
    float _2163 = cbLight._m0[_1968].z + _761;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_1968].xyz));
    float _4291 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2175 = dot(vec3(_680, _681, _682), vec3(_2168, _2169, _2170));
    float _4302 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2168, _2169, _2170));
    float _4313 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2197 = 1.0 - _2160;
    float _2207 = (0.5 / (((_2096 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2197) + _2160) * _2174))) * _2174;
    float _4324 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2219 = (((_2196 * cbLight._m0[_2148].x) * _2209) * _1951) + ((((cbLight._m0[_2067].x * _1920) * _2120) * _2134) * _1964);
    float _2220 = (((_2196 * cbLight._m0[_2148].y) * _2209) * _1951) + ((((cbLight._m0[_2067].y * _1921) * _2120) * _2134) * _1964);
    float _2221 = (((_2196 * cbLight._m0[_2148].z) * _2209) * _1951) + ((((cbLight._m0[_2067].z * _1922) * _2120) * _2134) * _1964);
    float _2283;
    float _2285;
    float _2287;
    if (_2004)
    {
        _2283 = _2219;
        _2285 = _2220;
        _2287 = _2221;
    }
    else
    {
        uint _2289 = _1928 + 2u;
        uint _2293 = _1928 + 10u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _683) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _759;
        float _2310 = cbLight._m0[_2289].y + _760;
        float _2311 = cbLight._m0[_2289].z + _761;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2289].xyz));
        float _4335 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2323 = dot(vec3(_680, _681, _682), vec3(_2316, _2317, _2318));
        float _4346 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4357 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_2096 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2345) + _2308) * _2322))) * _2322;
        float _4368 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2283 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2219;
        _2285 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2220;
        _2287 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2221;
    }
    float _2393;
    float _2395;
    float _2397;
    if (_2022)
    {
        _2393 = _2283;
        _2395 = _2285;
        _2397 = _2287;
    }
    else
    {
        uint _2404 = _1928 + 3u;
        uint _2408 = _1928 + 11u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _683) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _759;
        float _2425 = cbLight._m0[_2404].y + _760;
        float _2426 = cbLight._m0[_2404].z + _761;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2404].xyz));
        float _4384 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2438 = dot(vec3(_680, _681, _682), vec3(_2431, _2432, _2433));
        float _4395 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4406 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2459 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2460 = 1.0 - _2423;
        float _2470 = (0.5 / (((_2096 * ((_2437 * _2460) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2460) + _2423) * _2437))) * _2437;
        float _4417 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2393 = (((_2459 * cbLight._m0[_2408].x) * _2472) * _2473) + _2283;
        _2395 = (((_2459 * cbLight._m0[_2408].y) * _2472) * _2473) + _2285;
        _2397 = (((_2459 * cbLight._m0[_2408].z) * _2472) * _2473) + _2287;
    }
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_1926.y == 0u)
    {
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2548;
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2548;
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2548;
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.x;
        uint _2575 = uint((float(_2563.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2564))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2564)));
        float _2585 = (log2(_2551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2586 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        uint _2589 = uint(isnan(14.0) ? _2586 : (isnan(_2586) ? 14.0 : min(_2586, 14.0)));
        uvec4 _2594 = texelFetch(g_lightClusterGridBuffer, int(((_2589 << 2u) + (_2575 << 6u)) >> 2u));
        uint _2595 = _2594.x;
        uint _2596 = _2563.z;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        if (((((1u << ((_2596 >> 4u) & 15u)) + 4294967295u) & _2595) == 0u) || ((_2596 & 240u) == 0u))
        {
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
        }
        else
        {
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2865)
                {
                    frontier_phi_66_pred = _2849;
                    frontier_phi_66_pred_1 = _2854;
                    frontier_phi_66_pred_2 = _2853;
                    frontier_phi_66_pred_3 = _2852;
                    frontier_phi_66_pred_4 = _2851;
                    frontier_phi_66_pred_5 = _2850;
                }
                else
                {
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2864;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2855 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3026 = (_3004 * 48u) + 4u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3045 = (_3004 * 48u) + 8u;
                        vec3 _3056 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x));
                        float _3060 = _3020.x - _2549;
                        float _3061 = _3020.y - _2550;
                        float _3062 = _3020.z - _2551;
                        float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                        float _3066 = inversesqrt(_3063);
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3070 = dot(vec3(_798, _801, _804), vec3(_3067, _3068, _3069));
                        float _3075 = 1.0 - (_3063 * _3020.w);
                        float _4443 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3077 = sqrt(_3063) * _3039.w;
                        float _3080 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3070) + _3081;
                        float _3087 = _3077 * _3077;
                        float _3091 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3076) / ((_3087 * 0.699999988079071044921875) + 1.0);
                        float _3095 = (-0.0) - _2549;
                        float _3096 = (-0.0) - _2550;
                        float _3097 = (-0.0) - _2551;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3112 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _858;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3102 + _3067;
                        float _3124 = _3103 + _3068;
                        float _3125 = _3104 + _3069;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_798, _801, _804), vec3(_3102, _3103, _3104));
                        float _4459 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3137 = dot(vec3(_798, _801, _804), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4470 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3080 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3070) + _3146;
                        float _4481 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4492 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3144 * _3144) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125))) * _3076;
                        _2924 = (_3091 * _3039.x) + _2997;
                        _2925 = (_3091 * _3039.y) + _2998;
                        _2926 = (_3091 * _3039.z) + _2999;
                        _2921 = (_3172 * _3056.x) + _2994;
                        _2922 = (_3172 * _3056.y) + _2995;
                        _2923 = (_3172 * _3056.z) + _2996;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_66_pred = _2921;
                    frontier_phi_66_pred_1 = _2926;
                    frontier_phi_66_pred_2 = _2925;
                    frontier_phi_66_pred_3 = _2924;
                    frontier_phi_66_pred_4 = _2923;
                    frontier_phi_66_pred_5 = _2922;
                }
                _2697 = frontier_phi_66_pred;
                _2707 = frontier_phi_66_pred_1;
                _2705 = frontier_phi_66_pred_2;
                _2703 = frontier_phi_66_pred_3;
                _2701 = frontier_phi_66_pred_4;
                _2699 = frontier_phi_66_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2697;
                    _2850 = _2699;
                    _2851 = _2701;
                    _2852 = _2703;
                    _2853 = _2705;
                    _2854 = _2707;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
        }
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.z;
        uint _2713 = (_2711 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2713) & _2595) == 0u)
        {
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
            float _2843 = _2842 * _2549;
            float _2844 = _2842 * _2550;
            float _2845 = _2842 * _2551;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2713 < ((_2711 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2977 = _2696;
                float _2978 = _2698;
                float _2979 = _2700;
                float _2980 = _2702;
                float _2981 = _2704;
                float _2982 = _2706;
                uint _2983 = _2713;
                uint _2992;
                bool _2993;
                for (;;)
                {
                    _2992 = texelFetch(g_lightClassification, int((((_2589 << 5u) + (_2575 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                    _2993 = _2992 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2993)
                    {
                        frontier_phi_77_pred = _2982;
                        frontier_phi_77_pred_1 = _2981;
                        frontier_phi_77_pred_2 = _2980;
                        frontier_phi_77_pred_3 = _2979;
                        frontier_phi_77_pred_4 = _2978;
                        frontier_phi_77_pred_5 = _2977;
                    }
                    else
                    {
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        uint _3205 = _2992;
                        uint _3206;
                        vec4 _3231;
                        float _3232;
                        vec4 _3247;
                        vec3 _3259;
                        vec4 _3274;
                        vec4 _3289;
                        float _3335;
                        bool _3336;
                        for (;;)
                        {
                            uint _3216 = ((_2983 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3205));
                            _3206 = (_3205 + 4294967295u) & _3205;
                            uint _3218 = _3216 * 40u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3232 = _3231.w;
                            uint _3234 = (_3216 * 40u) + 4u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3216 * 40u) + 8u;
                            _3259 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x));
                            uint _3261 = (_3216 * 40u) + 16u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3216 * 40u) + 20u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3216 * 40u) + 24u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3310 = (_3216 * 40u) + 28u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3335 = fma(_2551, _3323.z, fma(_2550, _3323.y, _3323.x * _2549)) + _3323.w;
                            _3336 = !((fma(_2551, _3304.z, fma(_2550, _3304.y, _3304.x * _2549)) + _3304.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3336)
                            {
                                float _3363 = _3231.x - _2549;
                                float _3364 = _3231.y - _2550;
                                float _3365 = _3231.z - _2551;
                                float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                                float _3369 = inversesqrt(_3366);
                                float _3370 = _3369 * _3363;
                                float _3371 = _3369 * _3364;
                                float _3372 = _3369 * _3365;
                                float _3376 = 1.0 - (_3366 / (_3232 * _3232));
                                float _4503 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3381 = sqrt(_3366) * _3247.w;
                                float _3383 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                                float _3384 = _3383 * _3383;
                                float _3387 = ((1.0 - _3384) * dot(vec3(_3370, _3371, _3372), vec3(_798, _801, _804))) + _3384;
                                float _3390 = _3381 * _3381;
                                float _3394 = (fma(_2551, _3274.z, fma(_2550, _3274.y, _3274.x * _2549)) + _3274.w) / _3335;
                                float _3395 = (fma(_2551, _3289.z, fma(_2550, _3289.y, _3289.x * _2549)) + _3289.w) / _3335;
                                float _3399 = 1.0 - dot(vec2(_3394, _3395), vec2(_3394, _3395));
                                float _4519 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3401 = _3400 * (((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3377) / ((_3390 * 0.699999988079071044921875) + 1.0));
                                float _3413 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                                float _3414 = 1.0 - _858;
                                float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                                float _3422 = _3421 * _3421;
                                float _3423 = _3422 * _3422;
                                float _3424 = _3370 - _2843;
                                float _3425 = _3371 - _2844;
                                float _3426 = _3372 - _2845;
                                float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                                float _3434 = dot(vec3(_798, _801, _804), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4530 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3438 = dot(vec3(_798, _801, _804), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                                float _4541 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                                float _3446 = _3383 * _3422;
                                float _3447 = _3446 * _3446;
                                float _3453 = ((1.0 - _3447) * dot(vec3(_798, _801, _804), vec3(_3370, _3371, _3372))) + _3447;
                                float _4552 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3455 = 1.0 - _3422;
                                float _3465 = (0.5 / (((_3454 * ((_3437 * _3455) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3422) * _3437))) * _3454;
                                float _4563 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3475 = (_3400 * _3377) * (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3445 * _3445) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3401 * _3247.y;
                                frontier_phi_83_pred_1 = _3401 * _3247.x;
                                frontier_phi_83_pred_2 = _3475 * _3259.z;
                                frontier_phi_83_pred_3 = _3475 * _3259.y;
                                frontier_phi_83_pred_4 = _3475 * _3259.x;
                                frontier_phi_83_pred_5 = _3401 * _3247.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3483 = frontier_phi_83_pred;
                            _3482 = frontier_phi_83_pred_1;
                            _3481 = frontier_phi_83_pred_2;
                            _3480 = frontier_phi_83_pred_3;
                            _3479 = frontier_phi_83_pred_4;
                            _3484 = frontier_phi_83_pred_5;
                            _3189 = _3482 + _3202;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3186 = _3479 + _3199;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            if (_3206 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3206;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3191;
                        frontier_phi_77_pred_1 = _3190;
                        frontier_phi_77_pred_2 = _3189;
                        frontier_phi_77_pred_3 = _3188;
                        frontier_phi_77_pred_4 = _3187;
                        frontier_phi_77_pred_5 = _3186;
                    }
                    _2828 = frontier_phi_77_pred;
                    _2826 = frontier_phi_77_pred_1;
                    _2824 = frontier_phi_77_pred_2;
                    _2822 = frontier_phi_77_pred_3;
                    _2820 = frontier_phi_77_pred_4;
                    _2818 = frontier_phi_77_pred_5;
                    uint _2984 = _2983 + 1u;
                    if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2977 = _2818;
                        _2978 = _2820;
                        _2979 = _2822;
                        _2980 = _2824;
                        _2981 = _2826;
                        _2982 = _2828;
                        _2983 = _2984;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2822;
                frontier_phi_58_59_ladder_1 = _2828;
                frontier_phi_58_59_ladder_2 = _2826;
                frontier_phi_58_59_ladder_3 = _2824;
                frontier_phi_58_59_ladder_4 = _2820;
                frontier_phi_58_59_ladder_5 = _2818;
            }
            else
            {
                frontier_phi_58_59_ladder = _2700;
                frontier_phi_58_59_ladder_1 = _2706;
                frontier_phi_58_59_ladder_2 = _2704;
                frontier_phi_58_59_ladder_3 = _2702;
                frontier_phi_58_59_ladder_4 = _2698;
                frontier_phi_58_59_ladder_5 = _2696;
            }
            _2817 = frontier_phi_58_59_ladder_5;
            _2819 = frontier_phi_58_59_ladder_4;
            _2821 = frontier_phi_58_59_ladder;
            _2823 = frontier_phi_58_59_ladder_3;
            _2825 = frontier_phi_58_59_ladder_2;
            _2827 = frontier_phi_58_59_ladder_1;
        }
        float _2832 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
        _2608 = (_2832 * _2823) + _2060;
        _2610 = (_2832 * _2825) + _2062;
        _2612 = (_2832 * _2827) + _2064;
        _2614 = ((_2817 * 0.039999999105930328369140625) * _2832) + _2393;
        _2616 = ((_2819 * 0.039999999105930328369140625) * _2832) + _2395;
        _2618 = ((_2821 * 0.039999999105930328369140625) * _2832) + _2397;
    }
    else
    {
        _2608 = _2060;
        _2610 = _2062;
        _2612 = _2064;
        _2614 = _2393;
        _2616 = _2395;
        _2618 = _2397;
    }
    float _4579 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4590 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4601 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2635 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2608 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _842))) + ((_2614 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2636 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2610 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _842))) + ((_2616 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2637 = ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2612 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _842))) + ((_2618 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    uint _2638 = _249 + 6u;
    float _2646 = _779 / cbSceneParam._m0[86u].x;
    float _2647 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2661 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2663 = _2661.x;
    float _2664 = _2661.y;
    float _2665 = _2661.z;
    float _2666 = _2661.w;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2721 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2722 = _2721 / _701;
        float _2733 = _2722 * _752;
        float _2734 = _753 * _2722;
        float _2735 = (-0.0) - _2734;
        float _2737 = _2722 * _754;
        float _2739 = (cbSceneParam._m0[77u].w * _2735) / _2721;
        float _2740 = _2739 + cbSceneParam._m0[79u].w;
        float _2741 = cbSceneParam._m0[79u].w - _2734;
        float _2747 = sqrt(((_2733 * _2733) + (_2734 * _2734)) + (_2737 * _2737));
        float _2750 = (1.0 - (cbSceneParam._m0[77u].w / _2721)) * _2747;
        float _2755 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2757 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2934;
        if (abs((_2735 - _2739) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2934 = ((((_2740 > 0.0) ? exp2(_2755 * _2740) : (2.0 - exp2(_2757 * _2740))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2750;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : max(_2740, _2741));
            float _2880 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : min(_2740, _2741));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2934 = ((abs(_2747 / _2735) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2755 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2755 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2757 * _2889) - exp2(_2757 * _2890)) * _2878))) + (_2750 * cbSceneParam._m0[80u].z);
        }
        vec4 _2936 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2646, _2647, 1.0), 0.0);
        float _2945 = exp2((_2934 * (-1.44269502162933349609375)) * (1.0 - _2936.w));
        float _2946 = log2(_2945);
        float _2962 = log2(_2666);
        _2759 = (exp2(_2962 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].x)) * _2936.x) / cbSceneParam._m0[78u].x)) + _2663;
        _2761 = (exp2(_2962 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].y)) * _2936.y) / cbSceneParam._m0[78u].y)) + _2664;
        _2763 = (exp2(_2962 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].z)) * _2936.z) / cbSceneParam._m0[78u].z)) + _2665;
        _2765 = _2945 * _2666;
    }
    else
    {
        _2759 = _2663;
        _2761 = _2664;
        _2763 = _2665;
        _2765 = _2666;
    }
    bool _2972;
    vec4 _2775;
    vec4 _2797;
    float _2799;
    float _2803;
    float _2804;
    float _2805;
    float _2806;
    bool _2816;
    for (;;)
    {
        _2775 = cbMatDynParam._m0[0u];
        float _2777 = roundEven(_2775.y);
        bool _2778 = _2777 == 3.0;
        float _2779 = log2(_2765);
        float _2786 = exp2(_2779 * cbSceneParam._m0[78u].x) * _2635;
        float _2787 = exp2(_2779 * cbSceneParam._m0[78u].y) * _2636;
        float _2788 = exp2(_2779 * cbSceneParam._m0[78u].z) * _2637;
        float _2795 = _768 + (-0.5);
        _2797 = cbMtdParam._m0[1u];
        _2799 = _2797.y * _2795;
        float _2802 = (_2777 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2803 = _2802 * (_2778 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2759)));
        _2804 = _2802 * (_2778 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2761)));
        _2805 = _2802 * (_2778 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2763)));
        _2806 = _2795 * 0.999000012874603271484375;
        _2816 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2816)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2806) < 0.5)
            {
                _2972 = true;
                break;
            }
        }
        uint _2913 = _817 + uint(_2775.w);
        if ((cbInstanceData._m0[_2913].w < 1.0) && ((cbInstanceData._m0[_2913].w + _2806) < 0.5))
        {
            _2972 = true;
            break;
        }
        if ((_2799 + 1.0) < _2797.x)
        {
            _2972 = true;
            break;
        }
        _2972 = false;
        break;
    }
    float _3177;
    if (_2972)
    {
        discard_state = true;
        _3177 = 0.0;
    }
    else
    {
        _3177 = cbInstanceData._m0[_2638].w;
    }
    SV_Target.x = _2803;
    SV_Target.y = _2804;
    SV_Target.z = _2805;
    SV_Target.w = _3177;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2638].w;
    discard_exit();
}


