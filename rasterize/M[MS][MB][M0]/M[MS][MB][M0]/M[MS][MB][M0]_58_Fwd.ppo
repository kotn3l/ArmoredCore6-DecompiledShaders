#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1173;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _357 = _353.z;
    float _361 = (_353.x * 2.0) + (-1.0);
    float _362 = (_353.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3479 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))));
    float _374 = _361 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_327.x * 2.0) + (-1.0)));
    float _375 = _362 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_327.y * 2.0) + (-1.0)));
    float _378 = fma(_369, _229, fma(_375, _236, _374 * _222));
    float _381 = fma(_369, _230, fma(_375, _237, _374 * _223));
    float _384 = fma(_369, _231, fma(_375, _238, _374 * _224));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _426 = _424.x;
    float _427 = 1.0 - _426;
    float _434 = ((_426 - _427) * cbMtdParam._m0[24u].z) + _427;
    float _436 = (cbMtdParam._m0[19u].x + dot(vec4(_388 * _378, _388 * _381, _388 * _384, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_434 * cbMtdParam._m0[21u].z);
    float _3490 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _439 = (-0.0) - cbMtdParam._m0[24u].y;
    float _441 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0));
    float _449 = _437 - ((_437 * TEXCOORD_8.x) * _442);
    float _450 = _437 - ((_437 * TEXCOORD_8.y) * _442);
    float _451 = _437 - ((_437 * TEXCOORD_8.z) * _442);
    float _458 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _462 = ((isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : min(_458, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _470 = (_462 - (((_434 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _462))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3521 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _475 = ((_449 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) * _471) + _286;
    float _476 = ((_450 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) * _471) + _287;
    float _477 = ((_451 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) * _471) + _288;
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _491 = _489.x;
    float _492 = 1.0 - _491;
    float _521 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_491 - _492) * cbMtdParam._m0[24u].w) + _492) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3532 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _530 = ((((cbMtdParam._m0[10u].x - _475) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _522) + _475;
    float _531 = ((((cbMtdParam._m0[10u].y - _476) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _522) + _476;
    float _532 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _477)) * _522) + _477;
    float _537 = (((_327.z - _357) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _357;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _558 = (_551.x * 2.0) + (-1.0);
    float _559 = (_551.y * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3543 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _569 = (((_551.z - _537) * _449) * _471) + _537;
    float _572 = ((cbMtdParam._m0[23u].y - _569) * _522) + _569;
    vec4 _591 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _597 = (_591.x * 2.0) + (-1.0);
    float _598 = (_591.y * 2.0) + (-1.0);
    float _599 = dot(vec2(_597, _598), vec2(_597, _598));
    float _3554 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _619 = (((cbMtdParam._m0[21u].x * _374) + ((_558 - _374) * _449)) * _471) + _374;
    float _620 = (((cbMtdParam._m0[21u].x * _375) + ((_559 - _375) * _450)) * _471) + _375;
    float _621 = (((sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) - _369) * _451) * _471) + _369;
    float _632 = (((_597 - _619) + (_619 * cbMtdParam._m0[22u].z)) * _522) + _619;
    float _633 = (((_598 - _620) + (_620 * cbMtdParam._m0[22u].z)) * _522) + _620;
    float _634 = ((sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _621) * _522) + _621;
    float _636 = cbMtdParam._m0[22u].x + _353.w;
    float _639 = fma(_634, _229, fma(_633, _236, _632 * _222));
    float _642 = fma(_634, _230, fma(_633, _237, _632 * _223));
    float _645 = fma(_634, _231, fma(_633, _238, _632 * _224));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    float _650 = _649 * _639;
    float _651 = _649 * _642;
    float _652 = _649 * _645;
    float _3565 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _653 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3587 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3598 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3609 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_652, cbSceneParam._m0[5u].z, fma(_651, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _650));
    float _761 = fma(_652, cbSceneParam._m0[6u].z, fma(_651, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _650));
    float _764 = fma(_652, cbSceneParam._m0[7u].z, fma(_651, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _650));
    uint _778 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3620 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _802 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * TEXCOORD_5.w) * _798.x;
    float _803 = dot(vec3(_650, _651, _652), vec3(_728, _729, _730));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _650) - _728;
    float _811 = (_806 * _651) - _729;
    float _812 = (_806 * _652) - _730;
    float _816 = abs(dot(vec3(_728, _729, _730), vec3(_650, _651, _652)));
    float _3653 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_653);
    float _831 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _901 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _905 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _930 = _863 + _650;
        float _931 = _867 + _651;
        float _932 = _871 + _652;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _897;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _901;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _905;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_650, _651, _652), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3701 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_650, _651, _652), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3734 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_650, _651, _652), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3767 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1216 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1220 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1243 = _863 + _650;
        float _1244 = _867 + _651;
        float _1245 = _871 + _652;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_650, _651, _652), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3830 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_650, _651, _652), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3863 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_650, _651, _652), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3896 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1173;
        _1482 = _1173;
        _1483 = _1173;
        _1484 = _1173;
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _810 * 0.5;
    float _1550 = _811 * 0.5;
    float _1551 = _812 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _653);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1679 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1682 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1912;
        if (_1679 > 0.0)
        {
            _1912 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1912 = frontier_phi_23_19_ladder;
        }
        float _2155;
        if (_1682 > 0.0)
        {
            _2155 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2155 = frontier_phi_35_30_ladder;
        }
        float _2157 = isnan(_1912) ? _1710 : (isnan(_1710) ? _1912 : min(_1710, _1912));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1676) + _1665;
        float _2163 = (_2158 * _1679) + _1669;
        float _2164 = (_2158 * _1682) + _1673;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2165;
        float _2169 = _2165 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 > _2169) || ((_2163 < _2167) || ((_2162 < _2167) || (_2162 > _2169))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2164, cbModelParam._m0[9u].z, fma(_2163, cbModelParam._m0[9u].y, _2162 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2164, cbModelParam._m0[10u].z, fma(_2163, cbModelParam._m0[10u].y, _2162 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2164, cbModelParam._m0[11u].z, fma(_2163, cbModelParam._m0[11u].y, _2162 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_13_35_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _653);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1774 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1777 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1917;
        if (_1771 > 0.0)
        {
            _1917 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1917 = frontier_phi_25_21_ladder;
        }
        float _2182;
        if (_1774 > 0.0)
        {
            _2182 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2182 = frontier_phi_37_32_ladder;
        }
        float _2387;
        if (_1777 > 0.0)
        {
            _2387 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2387 = frontier_phi_46_43_ladder;
        }
        float _2389 = isnan(_2182) ? _1917 : (isnan(_1917) ? _2182 : min(_1917, _2182));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1771) + _1760;
        float _2395 = (_2390 * _1774) + _1764;
        float _2396 = (_2390 * _1777) + _1768;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_46_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_22_46_ladder_2;
        _1798 = frontier_phi_22_46_ladder_1;
        _1800 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1707);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _831) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_831 * _818)) * _802;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1698)) + _1698);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    uvec4 _1834 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1836 = _1834.x * 14u;
    uint _1837 = _1836 + 13u;
    float _1844 = _802 + (-1.0);
    float _1849 = (cbLight._m0[_1837].x * _1844) + 1.0;
    float _1850 = (cbLight._m0[_1837].y * _1844) + 1.0;
    float _1851 = (cbLight._m0[_1837].z * _1844) + 1.0;
    float _1852 = (cbLight._m0[_1837].w * _1844) + 1.0;
    uint _1853 = _1836 + 5u;
    float _1859 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1863 = _1836 + 4u;
    float _1870 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1874 = _1836 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_650, _651, _652));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_650, _651, _652));
    float _4032 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4043 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1853].x * _1859) * _1895) + ((cbLight._m0[_1863].x * _1870) * _1893);
    float _1903 = ((_1859 * cbLight._m0[_1853].y) * _1895) + ((_1870 * cbLight._m0[_1863].y) * _1893);
    float _1904 = ((_1859 * cbLight._m0[_1853].z) * _1895) + ((_1870 * cbLight._m0[_1863].z) * _1893);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1836 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1911)
    {
        _1922 = _1902;
        _1924 = _1903;
        _1926 = _1904;
    }
    else
    {
        uint _1930 = _1836 + 6u;
        float _1946 = (dot(vec3(cbLight._m0[_1836 + 2u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _4054 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1949 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1922 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1902;
        _1924 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1903;
        _1926 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1904;
    }
    bool _1929 = _1909.y == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1929)
    {
        _1967 = _1922;
        _1969 = _1924;
        _1971 = _1926;
    }
    else
    {
        uint _2126 = _1836 + 7u;
        float _2142 = (dot(vec3(cbLight._m0[_1836 + 3u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4070 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2145 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1967 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _1922;
        _1969 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _1924;
        _1971 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _1926;
    }
    uint _1974 = _1836 + 8u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _653) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1836].x + _728;
    float _1990 = cbLight._m0[_1836].y + _729;
    float _1991 = cbLight._m0[_1836].z + _730;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1836].xyz));
    float _4086 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2003 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2004 = dot(vec3(_650, _651, _652), vec3(_1996, _1997, _1998));
    float _4108 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1996, _1997, _1998));
    float _4119 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2012 = _1988 * _1988;
    float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
    float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2028 = 1.0 - _1988;
    float _2039 = (0.5 / (((_2003 * ((_2002 * _2028) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2028) + _1988) * _2002))) * _2002;
    float _4130 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2041 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
    uint _2052 = _1836 + 9u;
    float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _653) * 0.949999988079071044921875);
    float _2064 = _2063 * _2063;
    float _2065 = cbLight._m0[_1874].x + _728;
    float _2066 = cbLight._m0[_1874].y + _729;
    float _2067 = cbLight._m0[_1874].z + _730;
    float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
    float _2072 = _2071 * _2065;
    float _2073 = _2071 * _2066;
    float _2074 = _2071 * _2067;
    float _2075 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1874].xyz));
    float _4141 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2079 = dot(vec3(_650, _651, _652), vec3(_2072, _2073, _2074));
    float _4152 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2072, _2073, _2074));
    float _4163 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2064 * _2064;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2100 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2101 = 1.0 - _2064;
    float _2111 = (0.5 / (((_2003 * ((_2078 * _2101) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2101) + _2064) * _2078))) * _2078;
    float _4174 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    float _2123 = (((_2100 * cbLight._m0[_2052].x) * _2113) * _1859) + (((_2027 * cbLight._m0[_1974].x) * _2041) * _1870);
    float _2124 = (((_2100 * cbLight._m0[_2052].y) * _2113) * _1859) + (((_2027 * cbLight._m0[_1974].y) * _2041) * _1870);
    float _2125 = (((_2100 * cbLight._m0[_2052].z) * _2113) * _1859) + (((_2027 * cbLight._m0[_1974].z) * _2041) * _1870);
    float _2187;
    float _2189;
    float _2191;
    if (_1911)
    {
        _2187 = _2123;
        _2189 = _2124;
        _2191 = _2125;
    }
    else
    {
        uint _2193 = _1836 + 2u;
        uint _2197 = _1836 + 10u;
        float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _653) * 0.949999988079071044921875);
        float _2212 = _2211 * _2211;
        float _2213 = cbLight._m0[_2193].x + _728;
        float _2214 = cbLight._m0[_2193].y + _729;
        float _2215 = cbLight._m0[_2193].z + _730;
        float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
        float _2220 = _2219 * _2213;
        float _2221 = _2219 * _2214;
        float _2222 = _2219 * _2215;
        float _2223 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2193].xyz));
        float _4185 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2227 = dot(vec3(_650, _651, _652), vec3(_2220, _2221, _2222));
        float _4196 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2231 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2220, _2221, _2222));
        float _4207 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2235 = _2212 * _2212;
        float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
        float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2249 = 1.0 - _2212;
        float _2259 = (0.5 / (((_2003 * ((_2226 * _2249) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2249) + _2212) * _2226))) * _2226;
        float _4218 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2187 = (((_2248 * cbLight._m0[_2197].x) * _2261) * _2262) + _2123;
        _2189 = (((_2248 * cbLight._m0[_2197].y) * _2261) * _2262) + _2124;
        _2191 = (((_2248 * cbLight._m0[_2197].z) * _2261) * _2262) + _2125;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1929)
    {
        _2297 = _2187;
        _2299 = _2189;
        _2301 = _2191;
    }
    else
    {
        uint _2308 = _1836 + 3u;
        uint _2312 = _1836 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _653) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _728;
        float _2329 = cbLight._m0[_2308].y + _729;
        float _2330 = cbLight._m0[_2308].z + _730;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2308].xyz));
        float _4234 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2342 = dot(vec3(_650, _651, _652), vec3(_2335, _2336, _2337));
        float _4245 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4256 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2364 = 1.0 - _2327;
        float _2374 = (0.5 / (((_2003 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2364) + _2327) * _2341))) * _2341;
        float _4267 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2297 = (((_2363 * cbLight._m0[_2312].x) * _2376) * _2377) + _2187;
        _2299 = (((_2363 * cbLight._m0[_2312].y) * _2376) * _2377) + _2189;
        _2301 = (((_2363 * cbLight._m0[_2312].z) * _2376) * _2377) + _2191;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1834.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            uint _2750 = 0u;
            uint _2759;
            bool _2760;
            for (;;)
            {
                _2759 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2750 << 2u)) >> 2u)).x;
                _2760 = _2759 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2760)
                {
                    frontier_phi_61_pred = _2744;
                    frontier_phi_61_pred_1 = _2749;
                    frontier_phi_61_pred_2 = _2748;
                    frontier_phi_61_pred_3 = _2747;
                    frontier_phi_61_pred_4 = _2746;
                    frontier_phi_61_pred_5 = _2745;
                }
                else
                {
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    uint _2874;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2759;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    for (;;)
                    {
                        uint _2878 = uint(findLSB(_2874)) + (_2750 << 5u);
                        uint _2875 = (_2874 + 4294967295u) & _2874;
                        uint _2880 = _2878 * 48u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2900 = (_2878 * 48u) + 4u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2919 = (_2878 * 48u) + 8u;
                        vec3 _2930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x));
                        float _2934 = _2894.x - _2453;
                        float _2935 = _2894.y - _2454;
                        float _2936 = _2894.z - _2455;
                        float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                        float _2940 = inversesqrt(_2937);
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2944 = dot(vec3(_758, _761, _764), vec3(_2941, _2942, _2943));
                        float _2949 = 1.0 - (_2937 * _2894.w);
                        float _4293 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2951 = sqrt(_2937) * _2913.w;
                        float _2954 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2944) + _2955;
                        float _2961 = _2951 * _2951;
                        float _2965 = ((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2950) / ((_2961 * 0.699999988079071044921875) + 1.0);
                        float _2969 = (-0.0) - _2453;
                        float _2970 = (-0.0) - _2454;
                        float _2971 = (-0.0) - _2455;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2986 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                        float _2987 = 1.0 - _818;
                        float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                        float _2995 = _2994 * _2994;
                        float _2996 = _2995 * _2995;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3007 = dot(vec3(_758, _761, _764), vec3(_2976, _2977, _2978));
                        float _4309 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3011 = dot(vec3(_758, _761, _764), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                        float _4320 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                        float _3019 = _2954 * _2995;
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _2944) + _3020;
                        float _4331 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3024 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3025 = 1.0 - _2995;
                        float _3035 = (0.5 / (((_3024 * ((_3010 * _3025) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2995) * _3010))) * _3024;
                        float _4342 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3046 = (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3018 * _3018) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125))) * _2950;
                        _2803 = (_2965 * _2913.x) + _2871;
                        _2804 = (_2965 * _2913.y) + _2872;
                        _2805 = (_2965 * _2913.z) + _2873;
                        _2800 = (_3046 * _2930.x) + _2868;
                        _2801 = (_3046 * _2930.y) + _2869;
                        _2802 = (_3046 * _2930.z) + _2870;
                        if (_2875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2875;
                        }
                    }
                    frontier_phi_61_pred = _2800;
                    frontier_phi_61_pred_1 = _2805;
                    frontier_phi_61_pred_2 = _2804;
                    frontier_phi_61_pred_3 = _2803;
                    frontier_phi_61_pred_4 = _2802;
                    frontier_phi_61_pred_5 = _2801;
                }
                _2601 = frontier_phi_61_pred;
                _2611 = frontier_phi_61_pred_1;
                _2609 = frontier_phi_61_pred_2;
                _2607 = frontier_phi_61_pred_3;
                _2605 = frontier_phi_61_pred_4;
                _2603 = frontier_phi_61_pred_5;
                uint _2751 = _2750 + 1u;
                if (_2751 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2744 = _2601;
                    _2745 = _2603;
                    _2746 = _2605;
                    _2747 = _2607;
                    _2748 = _2609;
                    _2749 = _2611;
                    _2750 = _2751;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((4294967295u << _2617) & _2499) == 0u)
        {
            _2712 = _2600;
            _2714 = _2602;
            _2716 = _2604;
            _2718 = _2606;
            _2720 = _2608;
            _2722 = _2610;
        }
        else
        {
            float _2737 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2738 = _2737 * _2453;
            float _2739 = _2737 * _2454;
            float _2740 = _2737 * _2455;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2851 = _2600;
                float _2852 = _2602;
                float _2853 = _2604;
                float _2854 = _2606;
                float _2855 = _2608;
                float _2856 = _2610;
                uint _2857 = _2617;
                uint _2866;
                bool _2867;
                for (;;)
                {
                    _2866 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                    _2867 = _2866 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2867)
                    {
                        frontier_phi_67_pred = _2854;
                        frontier_phi_67_pred_1 = _2855;
                        frontier_phi_67_pred_2 = _2856;
                        frontier_phi_67_pred_3 = _2853;
                        frontier_phi_67_pred_4 = _2852;
                        frontier_phi_67_pred_5 = _2851;
                    }
                    else
                    {
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        uint _3070 = _2866;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        vec3 _3124;
                        vec4 _3140;
                        vec4 _3155;
                        float _3201;
                        bool _3202;
                        for (;;)
                        {
                            uint _3081 = ((_2857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3081 * 40u) + 8u;
                            _3124 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x));
                            uint _3127 = (_3081 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3142 = (_3081 * 40u) + 20u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3081 * 40u) + 24u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3176 = (_3081 * 40u) + 28u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3201 = fma(_2455, _3189.z, fma(_2454, _3189.y, _3189.x * _2453)) + _3189.w;
                            _3202 = !((fma(_2455, _3170.z, fma(_2454, _3170.y, _3170.x * _2453)) + _3170.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3202)
                            {
                                float _3229 = _3096.x - _2453;
                                float _3230 = _3096.y - _2454;
                                float _3231 = _3096.z - _2455;
                                float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                                float _3235 = inversesqrt(_3232);
                                float _3236 = _3235 * _3229;
                                float _3237 = _3235 * _3230;
                                float _3238 = _3235 * _3231;
                                float _3242 = 1.0 - (_3232 / (_3097 * _3097));
                                float _4353 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3247 = sqrt(_3232) * _3112.w;
                                float _3249 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                                float _3250 = _3249 * _3249;
                                float _3253 = ((1.0 - _3250) * dot(vec3(_3236, _3237, _3238), vec3(_758, _761, _764))) + _3250;
                                float _3256 = _3247 * _3247;
                                float _3260 = (fma(_2455, _3140.z, fma(_2454, _3140.y, _3140.x * _2453)) + _3140.w) / _3201;
                                float _3261 = (fma(_2455, _3155.z, fma(_2454, _3155.y, _3155.x * _2453)) + _3155.w) / _3201;
                                float _3265 = 1.0 - dot(vec2(_3260, _3261), vec2(_3260, _3261));
                                float _4369 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3267 = _3266 * (((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3243) / ((_3256 * 0.699999988079071044921875) + 1.0));
                                float _3279 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _818;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3236 - _2738;
                                float _3291 = _3237 - _2739;
                                float _3292 = _3238 - _2740;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2738, (-0.0) - _2739, (-0.0) - _2740));
                                float _4380 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3304 = dot(vec3(_758, _761, _764), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4391 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3249 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_758, _761, _764), vec3(_3236, _3237, _3238))) + _3313;
                                float _4402 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4413 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3266 * _3243) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3311 * _3311) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3341 * _3124.x;
                                frontier_phi_73_pred_1 = _3341 * _3124.y;
                                frontier_phi_73_pred_2 = _3267 * _3112.z;
                                frontier_phi_73_pred_3 = _3267 * _3112.y;
                                frontier_phi_73_pred_4 = _3267 * _3112.x;
                                frontier_phi_73_pred_5 = _3341 * _3124.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3345 = frontier_phi_73_pred;
                            _3346 = frontier_phi_73_pred_1;
                            _3350 = frontier_phi_73_pred_2;
                            _3349 = frontier_phi_73_pred_3;
                            _3348 = frontier_phi_73_pred_4;
                            _3347 = frontier_phi_73_pred_5;
                            _3054 = _3348 + _3067;
                            _3055 = _3349 + _3068;
                            _3056 = _3350 + _3069;
                            _3051 = _3345 + _3064;
                            _3052 = _3346 + _3065;
                            _3053 = _3347 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3054;
                        frontier_phi_67_pred_1 = _3055;
                        frontier_phi_67_pred_2 = _3056;
                        frontier_phi_67_pred_3 = _3053;
                        frontier_phi_67_pred_4 = _3052;
                        frontier_phi_67_pred_5 = _3051;
                    }
                    _2719 = frontier_phi_67_pred;
                    _2721 = frontier_phi_67_pred_1;
                    _2723 = frontier_phi_67_pred_2;
                    _2717 = frontier_phi_67_pred_3;
                    _2715 = frontier_phi_67_pred_4;
                    _2713 = frontier_phi_67_pred_5;
                    uint _2858 = _2857 + 1u;
                    if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2851 = _2713;
                        _2852 = _2715;
                        _2853 = _2717;
                        _2854 = _2719;
                        _2855 = _2721;
                        _2856 = _2723;
                        _2857 = _2858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2721;
                frontier_phi_55_56_ladder_1 = _2723;
                frontier_phi_55_56_ladder_2 = _2719;
                frontier_phi_55_56_ladder_3 = _2717;
                frontier_phi_55_56_ladder_4 = _2715;
                frontier_phi_55_56_ladder_5 = _2713;
            }
            else
            {
                frontier_phi_55_56_ladder = _2608;
                frontier_phi_55_56_ladder_1 = _2610;
                frontier_phi_55_56_ladder_2 = _2606;
                frontier_phi_55_56_ladder_3 = _2604;
                frontier_phi_55_56_ladder_4 = _2602;
                frontier_phi_55_56_ladder_5 = _2600;
            }
            _2712 = frontier_phi_55_56_ladder_5;
            _2714 = frontier_phi_55_56_ladder_4;
            _2716 = frontier_phi_55_56_ladder_3;
            _2718 = frontier_phi_55_56_ladder_2;
            _2720 = frontier_phi_55_56_ladder;
            _2722 = frontier_phi_55_56_ladder_1;
        }
        float _2727 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2512 = (_2727 * _2718) + _1967;
        _2514 = (_2727 * _2720) + _1969;
        _2516 = (_2727 * _2722) + _1971;
        _2518 = ((_2712 * 0.039999999105930328369140625) * _2727) + _2297;
        _2520 = ((_2714 * 0.039999999105930328369140625) * _2727) + _2299;
        _2522 = ((_2716 * 0.039999999105930328369140625) * _2727) + _2301;
    }
    else
    {
        _2512 = _1967;
        _2514 = _1969;
        _2516 = _1971;
        _2518 = _2297;
        _2520 = _2299;
        _2522 = _2301;
    }
    float _4429 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4440 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4451 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    uint _2542 = _241 + 6u;
    float _2550 = _736 / cbSceneParam._m0[86u].x;
    float _2551 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2626 = _2625 / _671;
        float _2637 = _2626 * _721;
        float _2638 = _722 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2640 = _2626 * _723;
        float _2642 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2643 = _2642 + cbSceneParam._m0[79u].w;
        float _2644 = cbSceneParam._m0[79u].w - _2638;
        float _2650 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2640 * _2640));
        float _2653 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2650;
        float _2658 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2660 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2813;
        if (abs((_2639 - _2642) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2813 = ((((_2643 > 0.0) ? exp2(_2658 * _2643) : (2.0 - exp2(_2660 * _2643))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2653;
        }
        else
        {
            float _2773 = 1.0 / cbSceneParam._m0[80u].x;
            float _2774 = isnan(_2644) ? _2643 : (isnan(_2643) ? _2644 : max(_2643, _2644));
            float _2775 = isnan(_2644) ? _2643 : (isnan(_2643) ? _2644 : min(_2643, _2644));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            _2813 = ((abs(_2650 / _2639) * cbSceneParam._m0[80u].y) * ((((_2784 - _2785) * 2.0) - ((exp2(_2658 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0)))) - exp2(_2658 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))))) * _2773)) - ((exp2(_2660 * _2784) - exp2(_2660 * _2785)) * _2773))) + (_2653 * cbSceneParam._m0[80u].z);
        }
        vec4 _2815 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2824 = exp2((_2813 * (-1.44269502162933349609375)) * (1.0 - _2815.w));
        float _2825 = log2(_2824);
        float _2841 = log2(_2570);
        _2662 = (exp2(_2841 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].x)) * _2815.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2664 = (exp2(_2841 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].y)) * _2815.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2666 = (exp2(_2841 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].z)) * _2815.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2668 = _2824 * _2570;
    }
    else
    {
        _2662 = _2567;
        _2664 = _2568;
        _2666 = _2569;
        _2668 = _2570;
    }
    float _2680 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2681 = _2680 == 3.0;
    float _2682 = log2(_2668);
    float _2689 = exp2(_2682 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2512 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _802))) + ((_2518 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2690 = exp2(_2682 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2514 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _802))) + ((_2520 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2691 = exp2(_2682 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2516 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _802))) + ((_2522 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2700 = (_2680 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2700 * (_2681 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.y = _2700 * (_2681 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.z = _2700 * (_2681 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.w = cbInstanceData._m0[_2542].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
}


