#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1116;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3445 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _435 = _431.z;
    float _444 = ((_414.z - _435) * _366) + _435;
    float _447 = ((((_414.x - _433) * _366) + _433) * 2.0) + (-1.0);
    float _449 = ((((_414.y - _434) * _366) + _434) * 2.0) + (-1.0);
    float _450 = dot(vec2(_447, _449), vec2(_447, _449));
    float _3456 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))));
    float _458 = fma(_455, _218, fma(_449, _225, _447 * _211));
    float _461 = fma(_455, _219, fma(_449, _226, _447 * _212));
    float _464 = fma(_455, _220, fma(_449, _227, _447 * _213));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _514 = _512.x;
    float _515 = 1.0 - _514;
    float _521 = (cbMtdParam._m0[19u].x + dot(vec4(_468 * _458, _468 * _461, _468 * _464, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_514 - _515) * cbMtdParam._m0[24u].z) + _515) * cbMtdParam._m0[21u].z);
    float _3467 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _529 = (_522 * ((_394.x * cbMtdParam._m0[18u].x) - _373)) + _373;
    float _530 = (_522 * ((_394.y * cbMtdParam._m0[18u].y) - _374)) + _374;
    float _531 = (_522 * ((_394.z * cbMtdParam._m0[18u].z) - _375)) + _375;
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _551 = (_544.x * 2.0) + (-1.0);
    float _552 = (_544.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3478 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _561 = ((_544.z - _444) * _522) + _444;
    float _571 = ((sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) - _455) * _522) + _455;
    float _574 = (((_551 - _447) * _522) + _447) + (cbMtdParam._m0[21u].x * _447);
    float _575 = (((_552 - _449) * _522) + _449) + (cbMtdParam._m0[21u].x * _449);
    float _580 = cbMtdParam._m0[22u].x + _484.w;
    float _583 = fma(_571, _218, fma(_575, _225, _574 * _211));
    float _586 = fma(_571, _219, fma(_575, _226, _574 * _212));
    float _589 = fma(_571, _220, fma(_575, _227, _574 * _213));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    float _594 = _593 * _583;
    float _595 = _593 * _586;
    float _596 = _593 * _589;
    float _3489 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _597 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3511 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3522 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3533 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _615 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _667 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _657);
    float _668 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _657);
    float _669 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _657);
    float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
    float _674 = _667 * _673;
    float _675 = _668 * _673;
    float _676 = _669 * _673;
    float _682 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _683 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _701 = fma(_596, cbSceneParam._m0[5u].z, fma(_595, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _594));
    float _704 = fma(_596, cbSceneParam._m0[6u].z, fma(_595, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _594));
    float _707 = fma(_596, cbSceneParam._m0[7u].z, fma(_595, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _594));
    uint _721 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3544 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    vec4 _741 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _682, cbSceneParam._m0[86u].y * _683));
    float _745 = ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * TEXCOORD_5.w) * _741.x;
    float _746 = dot(vec3(_594, _595, _596), vec3(_674, _675, _676));
    float _749 = _746 * 2.0;
    float _753 = (_749 * _594) - _674;
    float _754 = (_749 * _595) - _675;
    float _755 = (_749 * _596) - _676;
    float _759 = abs(dot(vec3(_674, _675, _676), vec3(_594, _595, _596)));
    float _3577 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _761 = sqrt(_597);
    float _774 = exp2((_761 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_761 * 3.0));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1115;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _840 = fma(_814, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806));
        float _844 = fma(_814, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806));
        float _848 = fma(_814, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806));
        float _873 = _806 + _594;
        float _874 = _810 + _595;
        float _875 = _814 + _596;
        float _885 = fma(_875, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873)) - _840;
        float _886 = fma(_875, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873)) - _844;
        float _887 = fma(_875, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873)) - _848;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_840 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_844 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[34u].z) + ((((((_848 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _943 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_909.x + (-0.5));
        float _945 = _943 * (_909.y + (-0.5));
        float _946 = _943 * (_909.z + (-0.5));
        float _953 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_916.x + (-0.5));
        float _955 = _953 * (_916.y + (-0.5));
        float _956 = _953 * (_916.z + (-0.5));
        float _963 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_923.x + (-0.5));
        float _965 = _963 * (_923.y + (-0.5));
        float _966 = _963 * (_923.z + (-0.5));
        float _973 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_930.x + (-0.5));
        float _975 = _973 * (_930.y + (-0.5));
        float _976 = _973 * (_930.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _997 = (dot(vec3(_594, _595, _596), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1007 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3625 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1009 + 1.0))) + _1014) * _977;
        float _1024 = _945 * 0.5;
        float _1025 = _955 * 0.5;
        float _1026 = _965 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_594, _595, _596), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3658 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1051 + 1.0))) + _1056) * _978;
        float _1066 = _946 * 0.5;
        float _1067 = _956 * 0.5;
        float _1068 = _966 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_594, _595, _596), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3691 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1093 + 1.0))) + _1098) * _979;
        _1115 = _946;
        _1117 = _945;
        _1118 = _944;
        _1119 = _956;
        _1120 = _955;
        _1121 = _954;
        _1122 = _966;
        _1123 = _965;
        _1124 = _964;
        _1125 = _979;
        _1126 = _978;
        _1127 = _977;
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _1116;
        _1117 = _1116;
        _1118 = _1116;
        _1119 = _1116;
        _1120 = _1116;
        _1121 = _1116;
        _1122 = _1116;
        _1123 = _1116;
        _1124 = _1116;
        _1125 = _1116;
        _1126 = _1116;
        _1127 = _1116;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_814, cbModelParam._m0[30u].z, fma(_810, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _806));
        float _1159 = fma(_814, cbModelParam._m0[31u].z, fma(_810, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _806));
        float _1163 = fma(_814, cbModelParam._m0[32u].z, fma(_810, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _806));
        float _1186 = _806 + _594;
        float _1187 = _810 + _595;
        float _1188 = _814 + _596;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_594, _595, _596), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3754 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_594, _595, _596), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3787 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_594, _595, _596), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3820 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1116;
        _1425 = _1116;
        _1426 = _1116;
        _1427 = _1116;
        _1428 = _1116;
        _1429 = _1116;
        _1430 = _1116;
        _1431 = _1116;
        _1432 = _1116;
        _1433 = _1116;
        _1434 = _1116;
        _1435 = _1116;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1130)) + _1130;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _753 * 0.5;
    float _1493 = _754 * 0.5;
    float _1494 = _755 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1115, _1119, _1122, _1125));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_814, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_814, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_814, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_755, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753));
        float _1622 = fma(_755, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753));
        float _1625 = fma(_755, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1874;
        if (_1622 > 0.0)
        {
            _1874 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1874 = frontier_phi_23_19_ladder;
        }
        float _2120;
        if (_1625 > 0.0)
        {
            _2120 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2120 = frontier_phi_35_30_ladder;
        }
        float _2122 = isnan(_1874) ? _1653 : (isnan(_1653) ? _1874 : min(_1653, _1874));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1619) + _1608;
        float _2128 = (_2123 * _1622) + _1612;
        float _2129 = (_2123 * _1625) + _1616;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_13_35_ladder = _2253.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2253.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2253.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_753, _754, _755), _1561);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_814, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_814, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_814, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_755, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753));
        float _1717 = fma(_755, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753));
        float _1720 = fma(_755, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753));
        float _1879;
        if (_1714 > 0.0)
        {
            _1879 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1879 = frontier_phi_25_21_ladder;
        }
        float _2147;
        if (_1717 > 0.0)
        {
            _2147 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2147 = frontier_phi_37_32_ladder;
        }
        float _2352;
        if (_1720 > 0.0)
        {
            _2352 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2352 = frontier_phi_46_43_ladder;
        }
        float _2354 = isnan(_2147) ? _1879 : (isnan(_1879) ? _2147 : min(_1879, _2147));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1714) + _1703;
        float _2360 = (_2355 * _1717) + _1707;
        float _2361 = (_2355 * _1720) + _1711;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2362;
        float _2365 = _2362 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2361 > _2365) || ((_2361 < _2363) || ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 < _2363) || (_2359 > _2365))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2361, cbModelParam._m0[17u].z, fma(_2360, cbModelParam._m0[17u].y, _2359 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2361, cbModelParam._m0[18u].z, fma(_2360, cbModelParam._m0[18u].y, _2359 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2361, cbModelParam._m0[19u].z, fma(_2360, cbModelParam._m0[19u].y, _2359 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_46_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_22_46_ladder_2;
        _1741 = frontier_phi_22_46_ladder_1;
        _1743 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_753, _754, _755), _1650);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1755 = ((((1.0 - _774) * ((_761 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_774 * _761)) * _745;
    float _1756 = _1755 * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1757 = _1755 * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1758 = _1755 * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1761 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    vec4 _1775 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_682, _683));
    float _1777 = _1775.w;
    float _1789 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1777);
    float _1790 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1777);
    float _1791 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1777);
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _745 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1833 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1837 = _1797 | 1u;
    float _1848 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_594, _595, _596));
    float _1851 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_594, _595, _596));
    float _3956 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _3967 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1856 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1858 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1865 = ((cbLight._m0[_1814].x * _1820) * _1858) + (((cbLight._m0[_1824].x * _1789) * _1833) * _1856);
    float _1866 = ((_1820 * cbLight._m0[_1814].y) * _1858) + (((cbLight._m0[_1824].y * _1790) * _1833) * _1856);
    float _1867 = ((_1820 * cbLight._m0[_1814].z) * _1858) + (((cbLight._m0[_1824].z * _1791) * _1833) * _1856);
    uvec4 _1871 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1873 = _1871.x == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1873)
    {
        _1884 = _1865;
        _1886 = _1866;
        _1888 = _1867;
    }
    else
    {
        uint _1892 = _1797 + 6u;
        float _1908 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3978 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1911 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1884 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1865;
        _1886 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1866;
        _1888 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1867;
    }
    bool _1891 = _1871.y == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1891)
    {
        _1929 = _1884;
        _1931 = _1886;
        _1933 = _1888;
    }
    else
    {
        uint _2091 = _1797 + 7u;
        float _2107 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _3994 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2110 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1929 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _1884;
        _1931 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _1886;
        _1933 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _1888;
    }
    uint _1936 = _1797 + 8u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _597) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1797].x + _674;
    float _1952 = cbLight._m0[_1797].y + _675;
    float _1953 = cbLight._m0[_1797].z + _676;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_1797].xyz));
    float _4010 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _1965 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1966 = dot(vec3(_594, _595, _596), vec3(_1958, _1959, _1960));
    float _4032 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1958, _1959, _1960));
    float _4043 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1950 * _1950;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1989 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = 1.0 - _1950;
    float _2001 = (0.5 / (((_1965 * ((_1964 * _1990) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _1990) + _1950) * _1964))) * _1964;
    float _4054 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    uint _2017 = _1797 + 9u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _597) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1837].x + _674;
    float _2031 = cbLight._m0[_1837].y + _675;
    float _2032 = cbLight._m0[_1837].z + _676;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_1837].xyz));
    float _4065 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2044 = dot(vec3(_594, _595, _596), vec3(_2037, _2038, _2039));
    float _4076 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2037, _2038, _2039));
    float _4087 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2029 * _2029;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2065 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2066 = 1.0 - _2029;
    float _2076 = (0.5 / (((_1965 * ((_2043 * _2066) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2066) + _2029) * _2043))) * _2043;
    float _4098 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2078 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    float _2088 = (((_2065 * cbLight._m0[_2017].x) * _2078) * _1820) + ((((cbLight._m0[_1936].x * _1789) * _1989) * _2003) * _1833);
    float _2089 = (((_2065 * cbLight._m0[_2017].y) * _2078) * _1820) + ((((cbLight._m0[_1936].y * _1790) * _1989) * _2003) * _1833);
    float _2090 = (((_2065 * cbLight._m0[_2017].z) * _2078) * _1820) + ((((cbLight._m0[_1936].z * _1791) * _1989) * _2003) * _1833);
    float _2152;
    float _2154;
    float _2156;
    if (_1873)
    {
        _2152 = _2088;
        _2154 = _2089;
        _2156 = _2090;
    }
    else
    {
        uint _2158 = _1797 + 2u;
        uint _2162 = _1797 + 10u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _597) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _674;
        float _2179 = cbLight._m0[_2158].y + _675;
        float _2180 = cbLight._m0[_2158].z + _676;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2158].xyz));
        float _4109 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2192 = dot(vec3(_594, _595, _596), vec3(_2185, _2186, _2187));
        float _4120 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4131 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2213 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2214 = 1.0 - _2177;
        float _2224 = (0.5 / (((_1965 * ((_2191 * _2214) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2214) + _2177) * _2191))) * _2191;
        float _4142 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2152 = (((_2213 * cbLight._m0[_2162].x) * _2226) * _2227) + _2088;
        _2154 = (((_2213 * cbLight._m0[_2162].y) * _2226) * _2227) + _2089;
        _2156 = (((_2213 * cbLight._m0[_2162].z) * _2226) * _2227) + _2090;
    }
    float _2262;
    float _2264;
    float _2266;
    if (_1891)
    {
        _2262 = _2152;
        _2264 = _2154;
        _2266 = _2156;
    }
    else
    {
        uint _2273 = _1797 + 3u;
        uint _2277 = _1797 + 11u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _597) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _674;
        float _2294 = cbLight._m0[_2273].y + _675;
        float _2295 = cbLight._m0[_2273].z + _676;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2273].xyz));
        float _4158 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2307 = dot(vec3(_594, _595, _596), vec3(_2300, _2301, _2302));
        float _4169 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4180 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2329 = 1.0 - _2292;
        float _2339 = (0.5 / (((_1965 * ((_2306 * _2329) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2329) + _2292) * _2306))) * _2306;
        float _4191 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2262 = (((_2328 * cbLight._m0[_2277].x) * _2341) * _2342) + _2152;
        _2264 = (((_2328 * cbLight._m0[_2277].y) * _2341) * _2342) + _2154;
        _2266 = (((_2328 * cbLight._m0[_2277].z) * _2341) * _2342) + _2156;
    }
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_1795.y == 0u)
    {
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2417;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2417;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2417;
        uvec4 _2432 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2433 = _2432.x;
        uint _2444 = uint((float(_2432.y) * floor(float(uint(cbSceneParam._m0[85u].y * _683) / _2433))) + floor(float(uint(cbSceneParam._m0[85u].x * _682) / _2433)));
        float _2454 = (log2(_2420 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2455 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        uint _2458 = uint(isnan(14.0) ? _2455 : (isnan(_2455) ? 14.0 : min(_2455, 14.0)));
        uvec4 _2463 = texelFetch(g_lightClusterGridBuffer, int(((_2458 << 2u) + (_2444 << 6u)) >> 2u));
        uint _2464 = _2463.x;
        uint _2465 = _2432.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2465 >> 4u) & 15u)) + 4294967295u) & _2464) == 0u) || ((_2465 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            uint _2716 = 0u;
            uint _2725;
            bool _2726;
            for (;;)
            {
                _2725 = texelFetch(g_lightClassification, int((((_2458 << 5u) + (_2444 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                _2726 = _2725 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2726)
                {
                    frontier_phi_61_pred = _2710;
                    frontier_phi_61_pred_1 = _2715;
                    frontier_phi_61_pred_2 = _2714;
                    frontier_phi_61_pred_3 = _2713;
                    frontier_phi_61_pred_4 = _2712;
                    frontier_phi_61_pred_5 = _2711;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2725;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2716 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _2418;
                        float _2901 = _2860.y - _2419;
                        float _2902 = _2860.z - _2420;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_701, _704, _707), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4217 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _2418;
                        float _2936 = (-0.0) - _2419;
                        float _2937 = (-0.0) - _2420;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2952 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _761;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_701, _704, _707), vec3(_2942, _2943, _2944));
                        float _4233 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2977 = dot(vec3(_701, _704, _707), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4244 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2920 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2910) + _2986;
                        float _4255 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4266 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_2984 * _2984) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2769 = (_2931 * _2879.x) + _2837;
                        _2770 = (_2931 * _2879.y) + _2838;
                        _2771 = (_2931 * _2879.z) + _2839;
                        _2766 = (_3012 * _2896.x) + _2834;
                        _2767 = (_3012 * _2896.y) + _2835;
                        _2768 = (_3012 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_61_pred = _2766;
                    frontier_phi_61_pred_1 = _2771;
                    frontier_phi_61_pred_2 = _2770;
                    frontier_phi_61_pred_3 = _2769;
                    frontier_phi_61_pred_4 = _2768;
                    frontier_phi_61_pred_5 = _2767;
                }
                _2566 = frontier_phi_61_pred;
                _2576 = frontier_phi_61_pred_1;
                _2574 = frontier_phi_61_pred_2;
                _2572 = frontier_phi_61_pred_3;
                _2570 = frontier_phi_61_pred_4;
                _2568 = frontier_phi_61_pred_5;
                uint _2717 = _2716 + 1u;
                if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2710 = _2566;
                    _2711 = _2568;
                    _2712 = _2570;
                    _2713 = _2572;
                    _2714 = _2574;
                    _2715 = _2576;
                    _2716 = _2717;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        if (((4294967295u << _2582) & _2464) == 0u)
        {
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
            _2688 = _2575;
        }
        else
        {
            float _2703 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
            float _2704 = _2703 * _2418;
            float _2705 = _2703 * _2419;
            float _2706 = _2703 * _2420;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2817 = _2565;
                float _2818 = _2567;
                float _2819 = _2569;
                float _2820 = _2571;
                float _2821 = _2573;
                float _2822 = _2575;
                uint _2823 = _2582;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2458 << 5u) + (_2444 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2833)
                    {
                        frontier_phi_67_pred = _2820;
                        frontier_phi_67_pred_1 = _2821;
                        frontier_phi_67_pred_2 = _2822;
                        frontier_phi_67_pred_3 = _2819;
                        frontier_phi_67_pred_4 = _2818;
                        frontier_phi_67_pred_5 = _2817;
                    }
                    else
                    {
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        uint _3036 = _2832;
                        uint _3037;
                        vec4 _3062;
                        float _3063;
                        vec4 _3078;
                        vec3 _3090;
                        vec4 _3105;
                        vec4 _3121;
                        float _3167;
                        bool _3168;
                        for (;;)
                        {
                            uint _3047 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3036));
                            _3037 = (_3036 + 4294967295u) & _3036;
                            uint _3049 = _3047 * 40u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3063 = _3062.w;
                            uint _3065 = (_3047 * 40u) + 4u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3080 = (_3047 * 40u) + 8u;
                            _3090 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x));
                            uint _3092 = (_3047 * 40u) + 16u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3108 = (_3047 * 40u) + 20u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3047 * 40u) + 24u;
                            vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3142 = (_3047 * 40u) + 28u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3167 = fma(_2420, _3155.z, fma(_2419, _3155.y, _3155.x * _2418)) + _3155.w;
                            _3168 = !((fma(_2420, _3136.z, fma(_2419, _3136.y, _3136.x * _2418)) + _3136.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3168)
                            {
                                float _3195 = _3062.x - _2418;
                                float _3196 = _3062.y - _2419;
                                float _3197 = _3062.z - _2420;
                                float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                                float _3201 = inversesqrt(_3198);
                                float _3202 = _3201 * _3195;
                                float _3203 = _3201 * _3196;
                                float _3204 = _3201 * _3197;
                                float _3208 = 1.0 - (_3198 / (_3063 * _3063));
                                float _4277 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3213 = sqrt(_3198) * _3078.w;
                                float _3215 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                                float _3216 = _3215 * _3215;
                                float _3219 = ((1.0 - _3216) * dot(vec3(_3202, _3203, _3204), vec3(_701, _704, _707))) + _3216;
                                float _3222 = _3213 * _3213;
                                float _3226 = (fma(_2420, _3105.z, fma(_2419, _3105.y, _3105.x * _2418)) + _3105.w) / _3167;
                                float _3227 = (fma(_2420, _3121.z, fma(_2419, _3121.y, _3121.x * _2418)) + _3121.w) / _3167;
                                float _3231 = 1.0 - dot(vec2(_3226, _3227), vec2(_3226, _3227));
                                float _4293 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3233 = _3232 * (((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3209) / ((_3222 * 0.699999988079071044921875) + 1.0));
                                float _3245 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                                float _3246 = 1.0 - _761;
                                float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                                float _3254 = _3253 * _3253;
                                float _3255 = _3254 * _3254;
                                float _3256 = _3202 - _2704;
                                float _3257 = _3203 - _2705;
                                float _3258 = _3204 - _2706;
                                float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                                float _3266 = dot(vec3(_701, _704, _707), vec3((-0.0) - _2704, (-0.0) - _2705, (-0.0) - _2706));
                                float _4304 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3269 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3270 = dot(vec3(_701, _704, _707), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                                float _4315 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                                float _3278 = _3215 * _3254;
                                float _3279 = _3278 * _3278;
                                float _3285 = ((1.0 - _3279) * dot(vec3(_701, _704, _707), vec3(_3202, _3203, _3204))) + _3279;
                                float _4326 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3287 = 1.0 - _3254;
                                float _3297 = (0.5 / (((_3286 * ((_3269 * _3287) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3254) * _3269))) * _3286;
                                float _4337 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3307 = (_3232 * _3209) * (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) / ((_3277 * _3277) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3307 * _3090.x;
                                frontier_phi_73_pred_1 = _3307 * _3090.y;
                                frontier_phi_73_pred_2 = _3233 * _3078.z;
                                frontier_phi_73_pred_3 = _3233 * _3078.y;
                                frontier_phi_73_pred_4 = _3233 * _3078.x;
                                frontier_phi_73_pred_5 = _3307 * _3090.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3311 = frontier_phi_73_pred;
                            _3312 = frontier_phi_73_pred_1;
                            _3316 = frontier_phi_73_pred_2;
                            _3315 = frontier_phi_73_pred_3;
                            _3314 = frontier_phi_73_pred_4;
                            _3313 = frontier_phi_73_pred_5;
                            _3020 = _3314 + _3033;
                            _3021 = _3315 + _3034;
                            _3022 = _3316 + _3035;
                            _3017 = _3311 + _3030;
                            _3018 = _3312 + _3031;
                            _3019 = _3313 + _3032;
                            if (_3037 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3037;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3020;
                        frontier_phi_67_pred_1 = _3021;
                        frontier_phi_67_pred_2 = _3022;
                        frontier_phi_67_pred_3 = _3019;
                        frontier_phi_67_pred_4 = _3018;
                        frontier_phi_67_pred_5 = _3017;
                    }
                    _2685 = frontier_phi_67_pred;
                    _2687 = frontier_phi_67_pred_1;
                    _2689 = frontier_phi_67_pred_2;
                    _2683 = frontier_phi_67_pred_3;
                    _2681 = frontier_phi_67_pred_4;
                    _2679 = frontier_phi_67_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2679;
                        _2818 = _2681;
                        _2819 = _2683;
                        _2820 = _2685;
                        _2821 = _2687;
                        _2822 = _2689;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2687;
                frontier_phi_55_56_ladder_1 = _2689;
                frontier_phi_55_56_ladder_2 = _2685;
                frontier_phi_55_56_ladder_3 = _2683;
                frontier_phi_55_56_ladder_4 = _2681;
                frontier_phi_55_56_ladder_5 = _2679;
            }
            else
            {
                frontier_phi_55_56_ladder = _2573;
                frontier_phi_55_56_ladder_1 = _2575;
                frontier_phi_55_56_ladder_2 = _2571;
                frontier_phi_55_56_ladder_3 = _2569;
                frontier_phi_55_56_ladder_4 = _2567;
                frontier_phi_55_56_ladder_5 = _2565;
            }
            _2678 = frontier_phi_55_56_ladder_5;
            _2680 = frontier_phi_55_56_ladder_4;
            _2682 = frontier_phi_55_56_ladder_3;
            _2684 = frontier_phi_55_56_ladder_2;
            _2686 = frontier_phi_55_56_ladder;
            _2688 = frontier_phi_55_56_ladder_1;
        }
        float _2693 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
        _2477 = (_2693 * _2684) + _1929;
        _2479 = (_2693 * _2686) + _1931;
        _2481 = (_2693 * _2688) + _1933;
        _2483 = ((_2678 * 0.039999999105930328369140625) * _2693) + _2262;
        _2485 = ((_2680 * 0.039999999105930328369140625) * _2693) + _2264;
        _2487 = ((_2682 * 0.039999999105930328369140625) * _2693) + _2266;
    }
    else
    {
        _2477 = _1929;
        _2479 = _1931;
        _2481 = _1933;
        _2483 = _2262;
        _2485 = _2264;
        _2487 = _2266;
    }
    float _4353 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4364 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4375 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    uint _2507 = _230 + 6u;
    float _2515 = _682 / cbSceneParam._m0[86u].x;
    float _2516 = _683 / cbSceneParam._m0[86u].y;
    vec4 _2530 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, (log2((isnan(cbSceneParam._m0[77u].w) ? _615 : (isnan(_615) ? cbSceneParam._m0[77u].w : min(_615, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2532 = _2530.x;
    float _2533 = _2530.y;
    float _2534 = _2530.z;
    float _2535 = _2530.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_615 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_615) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _615 : min(cbSceneParam._m0[80u].w, _615));
        float _2591 = _2590 / _615;
        float _2602 = _2591 * _667;
        float _2603 = _668 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2606 = _2591 * _669;
        float _2608 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2603;
        float _2616 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2604 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2739 = 1.0 / cbSceneParam._m0[80u].x;
            float _2740 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2741 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            _2779 = ((abs(_2616 / _2604) * cbSceneParam._m0[80u].y) * ((((_2750 - _2751) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))))) * _2739)) - ((exp2(_2626 * _2750) - exp2(_2626 * _2751)) * _2739))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2535);
        _2628 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2532;
        _2630 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2533;
        _2632 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2534;
        _2634 = _2790 * _2535;
    }
    else
    {
        _2628 = _2532;
        _2630 = _2533;
        _2632 = _2534;
        _2634 = _2535;
    }
    float _2646 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2647 = _2646 == 3.0;
    float _2648 = log2(_2634);
    float _2655 = exp2(_2648 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2477 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _745))) + ((_2483 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1550)) * cbPerFrame._m0[3u].x));
    float _2656 = exp2(_2648 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2479 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _745))) + ((_2485 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1550)) * cbPerFrame._m0[3u].x));
    float _2657 = exp2(_2648 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2481 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _745))) + ((_2487 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1550)) * cbPerFrame._m0[3u].x));
    float _2666 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2666 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.y = _2666 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.z = _2666 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.w = cbInstanceData._m0[_2507].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2507].w;
}


