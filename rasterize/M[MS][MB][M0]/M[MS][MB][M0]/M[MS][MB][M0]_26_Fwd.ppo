#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _332 = _328.z;
    float _336 = (_328.x * 2.0) + (-1.0);
    float _337 = (_328.y * 2.0) + (-1.0);
    float _338 = dot(vec2(_336, _337), vec2(_336, _337));
    float _3436 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    float _349 = _336 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_302.x * 2.0) + (-1.0)));
    float _350 = _337 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_302.y * 2.0) + (-1.0)));
    float _353 = fma(_344, _225, fma(_350, _232, _349 * _218));
    float _356 = fma(_344, _226, fma(_350, _233, _349 * _219));
    float _359 = fma(_344, _227, fma(_350, _234, _349 * _220));
    float _363 = inversesqrt(dot(vec3(_353, _356, _359), vec3(_353, _356, _359)));
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _401 = _399.x;
    float _402 = 1.0 - _401;
    float _411 = (cbMtdParam._m0[19u].x + dot(vec4(_363 * _353, _363 * _356, _363 * _359, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_401 - _402) * cbMtdParam._m0[24u].z) + _402) * cbMtdParam._m0[21u].z);
    float _3447 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _414 = (-0.0) - cbMtdParam._m0[24u].y;
    float _416 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0));
    float _424 = _412 - ((_412 * TEXCOORD_8.x) * _417);
    float _425 = _412 - ((_412 * TEXCOORD_8.y) * _417);
    float _426 = _412 - ((_412 * TEXCOORD_8.z) * _417);
    float _433 = (_424 * (cbMtdParam._m0[17u].x - _282)) + _282;
    float _434 = (_425 * (cbMtdParam._m0[17u].y - _283)) + _283;
    float _435 = (_426 * (cbMtdParam._m0[17u].z - _284)) + _284;
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _449 = _447.x;
    float _450 = 1.0 - _449;
    float _480 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_449 - _450) * cbMtdParam._m0[24u].w) + _450) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3468 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _489 = ((((cbMtdParam._m0[10u].x - _433) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _481) + _433;
    float _490 = ((((cbMtdParam._m0[10u].y - _434) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _481) + _434;
    float _491 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _435)) * _481) + _435;
    float _496 = (((_302.z - _332) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _332;
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3479 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _527 = ((_510.z - _496) * _424) + _496;
    float _530 = ((cbMtdParam._m0[23u].y - _527) * _481) + _527;
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _555 = (_549.x * 2.0) + (-1.0);
    float _556 = (_549.y * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3490 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _572 = ((sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) - _344) * _426) + _344;
    float _575 = (((_517 - _349) * _424) + _349) + (cbMtdParam._m0[21u].x * _349);
    float _576 = (((_518 - _350) * _425) + _350) + (cbMtdParam._m0[21u].x * _350);
    float _587 = (((_555 - _575) + (_575 * cbMtdParam._m0[22u].z)) * _481) + _575;
    float _588 = (((_556 - _576) + (_576 * cbMtdParam._m0[22u].z)) * _481) + _576;
    float _589 = (_481 * (sqrt(1.0 - (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) - _572)) + _572;
    float _591 = cbMtdParam._m0[22u].x + _328.w;
    float _594 = fma(_589, _225, fma(_588, _232, _587 * _218));
    float _597 = fma(_589, _226, fma(_588, _233, _587 * _219));
    float _600 = fma(_589, _227, fma(_588, _234, _587 * _220));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3501 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _608 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3523 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3534 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3545 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _626 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _676 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _666);
    float _677 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _666);
    float _678 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _666);
    float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
    float _683 = _676 * _682;
    float _684 = _677 * _682;
    float _685 = _678 * _682;
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _716 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _719 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _733 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3556 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _757 = ((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_605, _606, _607), vec3(_683, _684, _685));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _605) - _683;
    float _766 = (_761 * _606) - _684;
    float _767 = (_761 * _607) - _685;
    float _771 = abs(dot(vec3(_683, _684, _685), vec3(_605, _606, _607)));
    float _3589 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_608);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _856 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _860 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _885 = _818 + _605;
        float _886 = _822 + _606;
        float _887 = _826 + _607;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _852;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _856;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _860;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_605, _606, _607), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3637 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_605, _606, _607), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3670 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_605, _606, _607), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3703 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1171 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1175 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1198 = _818 + _605;
        float _1199 = _822 + _606;
        float _1200 = _826 + _607;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_605, _606, _607), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3766 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_605, _606, _607), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3799 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_605, _606, _607), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3832 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1128;
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1140)) + _1140;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _765 * 0.5;
    float _1505 = _766 * 0.5;
    float _1506 = _767 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1635 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1638 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1666 = frontier_phi_14_12_ladder;
        }
        float _1869;
        if (_1635 > 0.0)
        {
            _1869 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1869 = frontier_phi_23_19_ladder;
        }
        float _2112;
        if (_1638 > 0.0)
        {
            _2112 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2112 = frontier_phi_35_30_ladder;
        }
        float _2114 = isnan(_1869) ? _1666 : (isnan(_1666) ? _1869 : min(_1666, _1869));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1632) + _1621;
        float _2120 = (_2115 * _1635) + _1625;
        float _2121 = (_2115 * _1638) + _1629;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_13_35_ladder = _2245.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2245.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2245.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_13_35_ladder_2;
        _1656 = frontier_phi_13_35_ladder_1;
        _1658 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1573);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1717 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1721 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1725 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1728 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1731 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1734 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1874;
        if (_1728 > 0.0)
        {
            _1874 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1874 = frontier_phi_25_21_ladder;
        }
        float _2139;
        if (_1731 > 0.0)
        {
            _2139 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2139 = frontier_phi_37_32_ladder;
        }
        float _2344;
        if (_1734 > 0.0)
        {
            _2344 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2344 = frontier_phi_46_43_ladder;
        }
        float _2346 = isnan(_2139) ? _1874 : (isnan(_1874) ? _2139 : min(_1874, _2139));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1728) + _1717;
        float _2352 = (_2347 * _1731) + _1721;
        float _2353 = (_2347 * _1734) + _1725;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2354;
        float _2357 = _2354 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2353 > _2357) || ((_2353 < _2355) || ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 < _2355) || (_2351 > _2357))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2353, cbModelParam._m0[17u].z, fma(_2352, cbModelParam._m0[17u].y, _2351 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2353, cbModelParam._m0[18u].z, fma(_2352, cbModelParam._m0[18u].y, _2351 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2353, cbModelParam._m0[19u].z, fma(_2352, cbModelParam._m0[19u].y, _2351 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_22_46_ladder = _2552.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2552.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2552.x * cbModelParam._m0[1u].z;
        }
        _1753 = frontier_phi_22_46_ladder_2;
        _1755 = frontier_phi_22_46_ladder_1;
        _1757 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1663);
        _1753 = _1737.x * cbModelParam._m0[1u].z;
        _1755 = _1737.y * cbModelParam._m0[1u].z;
        _1757 = _1737.z * cbModelParam._m0[1u].z;
    }
    float _1769 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1770 = _1769 * ((cbModelParam._m0[1u].w * (_1753 - _1654)) + _1654);
    float _1771 = _1769 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1772 = _1769 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1775 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1770 * cbSceneParam._m0[91u].x));
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _757 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1827 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1831 = _1793 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_605, _606, _607));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_605, _606, _607));
    float _3968 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _3979 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1810].x * _1816) * _1852) + ((cbLight._m0[_1820].x * _1827) * _1850);
    float _1860 = ((_1816 * cbLight._m0[_1810].y) * _1852) + ((_1827 * cbLight._m0[_1820].y) * _1850);
    float _1861 = ((_1816 * cbLight._m0[_1810].z) * _1852) + ((_1827 * cbLight._m0[_1820].z) * _1850);
    uvec4 _1866 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1868 = _1866.x == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1868)
    {
        _1879 = _1859;
        _1881 = _1860;
        _1883 = _1861;
    }
    else
    {
        uint _1887 = _1793 + 6u;
        float _1903 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _1904 = _1903 * _1903;
        float _3990 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1906 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1879 = (((cbLight._m0[_1887].x * 0.3183098733425140380859375) * _1905) * _1906) + _1859;
        _1881 = (((cbLight._m0[_1887].y * 0.3183098733425140380859375) * _1905) * _1906) + _1860;
        _1883 = (((cbLight._m0[_1887].z * 0.3183098733425140380859375) * _1905) * _1906) + _1861;
    }
    bool _1886 = _1866.y == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1886)
    {
        _1924 = _1879;
        _1926 = _1881;
        _1928 = _1883;
    }
    else
    {
        uint _2083 = _1793 + 7u;
        float _2099 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _4006 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2102 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1924 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _1879;
        _1926 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _1881;
        _1928 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _1883;
    }
    uint _1931 = _1793 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _608) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1793].x + _683;
    float _1947 = cbLight._m0[_1793].y + _684;
    float _1948 = cbLight._m0[_1793].z + _685;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1793].xyz));
    float _4022 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _1960 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1961 = dot(vec3(_605, _606, _607), vec3(_1953, _1954, _1955));
    float _4044 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1953, _1954, _1955));
    float _4055 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1960 * ((_1959 * _1985) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1985) + _1945) * _1959))) * _1959;
    float _4066 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2009 = _1793 + 9u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _608) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1831].x + _683;
    float _2023 = cbLight._m0[_1831].y + _684;
    float _2024 = cbLight._m0[_1831].z + _685;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1831].xyz));
    float _4077 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _2036 = dot(vec3(_605, _606, _607), vec3(_2029, _2030, _2031));
    float _4088 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_2029, _2030, _2031));
    float _4099 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2021 * _2021;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2057 = (exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2058 = 1.0 - _2021;
    float _2068 = (0.5 / (((_1960 * ((_2035 * _2058) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2058) + _2021) * _2035))) * _2035;
    float _4110 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    float _2080 = (((_2057 * cbLight._m0[_2009].x) * _2070) * _1816) + (((_1984 * cbLight._m0[_1931].x) * _1998) * _1827);
    float _2081 = (((_2057 * cbLight._m0[_2009].y) * _2070) * _1816) + (((_1984 * cbLight._m0[_1931].y) * _1998) * _1827);
    float _2082 = (((_2057 * cbLight._m0[_2009].z) * _2070) * _1816) + (((_1984 * cbLight._m0[_1931].z) * _1998) * _1827);
    float _2144;
    float _2146;
    float _2148;
    if (_1868)
    {
        _2144 = _2080;
        _2146 = _2081;
        _2148 = _2082;
    }
    else
    {
        uint _2150 = _1793 + 2u;
        uint _2154 = _1793 + 10u;
        float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _608) * 0.949999988079071044921875);
        float _2169 = _2168 * _2168;
        float _2170 = cbLight._m0[_2150].x + _683;
        float _2171 = cbLight._m0[_2150].y + _684;
        float _2172 = cbLight._m0[_2150].z + _685;
        float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
        float _2177 = _2176 * _2170;
        float _2178 = _2176 * _2171;
        float _2179 = _2176 * _2172;
        float _2180 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2150].xyz));
        float _4121 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2184 = dot(vec3(_605, _606, _607), vec3(_2177, _2178, _2179));
        float _4132 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2188 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2177, _2178, _2179));
        float _4143 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2192 = _2169 * _2169;
        float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
        float _2205 = (exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2206 = 1.0 - _2169;
        float _2216 = (0.5 / (((_1960 * ((_2183 * _2206) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2206) + _2169) * _2183))) * _2183;
        float _4154 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
        float _2219 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2144 = (((_2205 * cbLight._m0[_2154].x) * _2218) * _2219) + _2080;
        _2146 = (((_2205 * cbLight._m0[_2154].y) * _2218) * _2219) + _2081;
        _2148 = (((_2205 * cbLight._m0[_2154].z) * _2218) * _2219) + _2082;
    }
    float _2254;
    float _2256;
    float _2258;
    if (_1886)
    {
        _2254 = _2144;
        _2256 = _2146;
        _2258 = _2148;
    }
    else
    {
        uint _2265 = _1793 + 3u;
        uint _2269 = _1793 + 11u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _608) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _683;
        float _2286 = cbLight._m0[_2265].y + _684;
        float _2287 = cbLight._m0[_2265].z + _685;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2265].xyz));
        float _4170 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2299 = dot(vec3(_605, _606, _607), vec3(_2292, _2293, _2294));
        float _4181 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4192 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2321 = 1.0 - _2284;
        float _2331 = (0.5 / (((_1960 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2321) + _2284) * _2298))) * _2298;
        float _4203 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2254 = (((_2320 * cbLight._m0[_2269].x) * _2333) * _2334) + _2144;
        _2256 = (((_2320 * cbLight._m0[_2269].y) * _2333) * _2334) + _2146;
        _2258 = (((_2320 * cbLight._m0[_2269].z) * _2333) * _2334) + _2148;
    }
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_1791.y == 0u)
    {
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2409;
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2409;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2409;
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.x;
        uint _2436 = uint((float(_2424.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2425))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2425)));
        float _2446 = (log2(_2412 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2447 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        uint _2450 = uint(isnan(14.0) ? _2447 : (isnan(_2447) ? 14.0 : min(_2447, 14.0)));
        uvec4 _2455 = texelFetch(g_lightClusterGridBuffer, int(((_2450 << 2u) + (_2436 << 6u)) >> 2u));
        uint _2456 = _2455.x;
        uint _2457 = _2424.z;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((((1u << ((_2457 >> 4u) & 15u)) + 4294967295u) & _2456) == 0u) || ((_2457 & 240u) == 0u))
        {
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
        }
        else
        {
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            uint _2707 = 0u;
            uint _2716;
            bool _2717;
            for (;;)
            {
                _2716 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                _2717 = _2716 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2717)
                {
                    frontier_phi_61_pred = _2701;
                    frontier_phi_61_pred_1 = _2706;
                    frontier_phi_61_pred_2 = _2705;
                    frontier_phi_61_pred_3 = _2704;
                    frontier_phi_61_pred_4 = _2703;
                    frontier_phi_61_pred_5 = _2702;
                }
                else
                {
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    uint _2831;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2716;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    for (;;)
                    {
                        uint _2835 = uint(findLSB(_2831)) + (_2707 << 5u);
                        uint _2832 = (_2831 + 4294967295u) & _2831;
                        uint _2837 = _2835 * 48u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2857 = (_2835 * 48u) + 4u;
                        vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 3u)).x));
                        uint _2876 = (_2835 * 48u) + 8u;
                        vec3 _2887 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x));
                        float _2891 = _2851.x - _2410;
                        float _2892 = _2851.y - _2411;
                        float _2893 = _2851.z - _2412;
                        float _2894 = dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893));
                        float _2897 = inversesqrt(_2894);
                        float _2898 = _2897 * _2891;
                        float _2899 = _2897 * _2892;
                        float _2900 = _2897 * _2893;
                        float _2901 = dot(vec3(_713, _716, _719), vec3(_2898, _2899, _2900));
                        float _2906 = 1.0 - (_2894 * _2851.w);
                        float _4229 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2907 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2908 = sqrt(_2894) * _2870.w;
                        float _2911 = 1.39999997615814208984375 / (_2908 + 1.39999997615814208984375);
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2901) + _2912;
                        float _2918 = _2908 * _2908;
                        float _2922 = ((isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))) * _2907) / ((_2918 * 0.699999988079071044921875) + 1.0);
                        float _2926 = (-0.0) - _2410;
                        float _2927 = (-0.0) - _2411;
                        float _2928 = (-0.0) - _2412;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2933 = _2932 * _2926;
                        float _2934 = _2932 * _2927;
                        float _2935 = _2932 * _2928;
                        float _2943 = exp2(log2(1.0 / ((_2918 * 3.5) + 5.0)) * 0.25);
                        float _2944 = 1.0 - _773;
                        float _2951 = sqrt(1.0 - ((1.0 - (_2944 * _2944)) * (1.0 - (_2943 * _2943))));
                        float _2952 = _2951 * _2951;
                        float _2953 = _2952 * _2952;
                        float _2954 = _2933 + _2898;
                        float _2955 = _2934 + _2899;
                        float _2956 = _2935 + _2900;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2964 = dot(vec3(_713, _716, _719), vec3(_2933, _2934, _2935));
                        float _4245 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2967 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2968 = dot(vec3(_713, _716, _719), vec3(_2960 * _2954, _2960 * _2955, _2960 * _2956));
                        float _4256 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2971 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2975 = ((_2971 * _2971) * (_2953 + (-1.0))) + 1.0;
                        float _2976 = _2911 * _2952;
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2901) + _2977;
                        float _4267 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2982 = 1.0 - _2952;
                        float _2992 = (0.5 / (((_2981 * ((_2967 * _2982) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2981 * _2982) + _2952) * _2967))) * _2981;
                        float _4278 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _3003 = (((_2953 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_2975 * _2975) * ((_2918 * 2.1991131305694580078125) + 3.141590118408203125))) * _2907;
                        _2760 = (_2922 * _2870.x) + _2828;
                        _2761 = (_2922 * _2870.y) + _2829;
                        _2762 = (_2922 * _2870.z) + _2830;
                        _2757 = (_3003 * _2887.x) + _2825;
                        _2758 = (_3003 * _2887.y) + _2826;
                        _2759 = (_3003 * _2887.z) + _2827;
                        if (_2832 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2832;
                        }
                    }
                    frontier_phi_61_pred = _2757;
                    frontier_phi_61_pred_1 = _2762;
                    frontier_phi_61_pred_2 = _2761;
                    frontier_phi_61_pred_3 = _2760;
                    frontier_phi_61_pred_4 = _2759;
                    frontier_phi_61_pred_5 = _2758;
                }
                _2558 = frontier_phi_61_pred;
                _2568 = frontier_phi_61_pred_1;
                _2566 = frontier_phi_61_pred_2;
                _2564 = frontier_phi_61_pred_3;
                _2562 = frontier_phi_61_pred_4;
                _2560 = frontier_phi_61_pred_5;
                uint _2708 = _2707 + 1u;
                if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2701 = _2558;
                    _2702 = _2560;
                    _2703 = _2562;
                    _2704 = _2564;
                    _2705 = _2566;
                    _2706 = _2568;
                    _2707 = _2708;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
        }
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.z;
        uint _2574 = (_2572 >> 8u) & 15u;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((4294967295u << _2574) & _2456) == 0u)
        {
            _2669 = _2557;
            _2671 = _2559;
            _2673 = _2561;
            _2675 = _2563;
            _2677 = _2565;
            _2679 = _2567;
        }
        else
        {
            float _2694 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
            float _2695 = _2694 * _2410;
            float _2696 = _2694 * _2411;
            float _2697 = _2694 * _2412;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2574 < ((_2572 >> 12u) & 15u))
            {
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2808 = _2557;
                float _2809 = _2559;
                float _2810 = _2561;
                float _2811 = _2563;
                float _2812 = _2565;
                float _2813 = _2567;
                uint _2814 = _2574;
                uint _2823;
                bool _2824;
                for (;;)
                {
                    _2823 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                    _2824 = _2823 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2824)
                    {
                        frontier_phi_67_pred = _2811;
                        frontier_phi_67_pred_1 = _2812;
                        frontier_phi_67_pred_2 = _2813;
                        frontier_phi_67_pred_3 = _2810;
                        frontier_phi_67_pred_4 = _2809;
                        frontier_phi_67_pred_5 = _2808;
                    }
                    else
                    {
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        uint _3027 = _2823;
                        uint _3028;
                        vec4 _3053;
                        float _3054;
                        vec4 _3069;
                        vec3 _3081;
                        vec4 _3097;
                        vec4 _3112;
                        float _3158;
                        bool _3159;
                        for (;;)
                        {
                            uint _3038 = ((_2814 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3027));
                            _3028 = (_3027 + 4294967295u) & _3027;
                            uint _3040 = _3038 * 40u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3054 = _3053.w;
                            uint _3056 = (_3038 * 40u) + 4u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3038 * 40u) + 8u;
                            _3081 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x));
                            uint _3084 = (_3038 * 40u) + 16u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3038 * 40u) + 20u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3038 * 40u) + 24u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3133 = (_3038 * 40u) + 28u;
                            vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            _3158 = fma(_2412, _3146.z, fma(_2411, _3146.y, _3146.x * _2410)) + _3146.w;
                            _3159 = !((fma(_2412, _3127.z, fma(_2411, _3127.y, _3127.x * _2410)) + _3127.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3159)
                            {
                                float _3186 = _3053.x - _2410;
                                float _3187 = _3053.y - _2411;
                                float _3188 = _3053.z - _2412;
                                float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                                float _3192 = inversesqrt(_3189);
                                float _3193 = _3192 * _3186;
                                float _3194 = _3192 * _3187;
                                float _3195 = _3192 * _3188;
                                float _3199 = 1.0 - (_3189 / (_3054 * _3054));
                                float _4289 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3204 = sqrt(_3189) * _3069.w;
                                float _3206 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                                float _3207 = _3206 * _3206;
                                float _3210 = ((1.0 - _3207) * dot(vec3(_3193, _3194, _3195), vec3(_713, _716, _719))) + _3207;
                                float _3213 = _3204 * _3204;
                                float _3217 = (fma(_2412, _3097.z, fma(_2411, _3097.y, _3097.x * _2410)) + _3097.w) / _3158;
                                float _3218 = (fma(_2412, _3112.z, fma(_2411, _3112.y, _3112.x * _2410)) + _3112.w) / _3158;
                                float _3222 = 1.0 - dot(vec2(_3217, _3218), vec2(_3217, _3218));
                                float _4305 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3224 = _3223 * (((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3200) / ((_3213 * 0.699999988079071044921875) + 1.0));
                                float _3236 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                                float _3237 = 1.0 - _773;
                                float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                                float _3245 = _3244 * _3244;
                                float _3246 = _3245 * _3245;
                                float _3247 = _3193 - _2695;
                                float _3248 = _3194 - _2696;
                                float _3249 = _3195 - _2697;
                                float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                                float _3257 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2695, (-0.0) - _2696, (-0.0) - _2697));
                                float _4316 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3260 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3261 = dot(vec3(_713, _716, _719), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                                float _4327 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                                float _3269 = _3206 * _3245;
                                float _3270 = _3269 * _3269;
                                float _3276 = ((1.0 - _3270) * dot(vec3(_713, _716, _719), vec3(_3193, _3194, _3195))) + _3270;
                                float _4338 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3278 = 1.0 - _3245;
                                float _3288 = (0.5 / (((_3277 * ((_3260 * _3278) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3277 * _3278) + _3245) * _3260))) * _3277;
                                float _4349 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3298 = (_3223 * _3200) * (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) / ((_3268 * _3268) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3298 * _3081.x;
                                frontier_phi_73_pred_1 = _3298 * _3081.y;
                                frontier_phi_73_pred_2 = _3224 * _3069.z;
                                frontier_phi_73_pred_3 = _3224 * _3069.y;
                                frontier_phi_73_pred_4 = _3224 * _3069.x;
                                frontier_phi_73_pred_5 = _3298 * _3081.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_73_pred;
                            _3303 = frontier_phi_73_pred_1;
                            _3307 = frontier_phi_73_pred_2;
                            _3306 = frontier_phi_73_pred_3;
                            _3305 = frontier_phi_73_pred_4;
                            _3304 = frontier_phi_73_pred_5;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            _3013 = _3307 + _3026;
                            _3008 = _3302 + _3021;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            if (_3028 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3028;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3011;
                        frontier_phi_67_pred_1 = _3012;
                        frontier_phi_67_pred_2 = _3013;
                        frontier_phi_67_pred_3 = _3010;
                        frontier_phi_67_pred_4 = _3009;
                        frontier_phi_67_pred_5 = _3008;
                    }
                    _2676 = frontier_phi_67_pred;
                    _2678 = frontier_phi_67_pred_1;
                    _2680 = frontier_phi_67_pred_2;
                    _2674 = frontier_phi_67_pred_3;
                    _2672 = frontier_phi_67_pred_4;
                    _2670 = frontier_phi_67_pred_5;
                    uint _2815 = _2814 + 1u;
                    if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2808 = _2670;
                        _2809 = _2672;
                        _2810 = _2674;
                        _2811 = _2676;
                        _2812 = _2678;
                        _2813 = _2680;
                        _2814 = _2815;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2678;
                frontier_phi_55_56_ladder_1 = _2680;
                frontier_phi_55_56_ladder_2 = _2676;
                frontier_phi_55_56_ladder_3 = _2674;
                frontier_phi_55_56_ladder_4 = _2672;
                frontier_phi_55_56_ladder_5 = _2670;
            }
            else
            {
                frontier_phi_55_56_ladder = _2565;
                frontier_phi_55_56_ladder_1 = _2567;
                frontier_phi_55_56_ladder_2 = _2563;
                frontier_phi_55_56_ladder_3 = _2561;
                frontier_phi_55_56_ladder_4 = _2559;
                frontier_phi_55_56_ladder_5 = _2557;
            }
            _2669 = frontier_phi_55_56_ladder_5;
            _2671 = frontier_phi_55_56_ladder_4;
            _2673 = frontier_phi_55_56_ladder_3;
            _2675 = frontier_phi_55_56_ladder_2;
            _2677 = frontier_phi_55_56_ladder;
            _2679 = frontier_phi_55_56_ladder_1;
        }
        float _2684 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2469 = (_2684 * _2675) + _1924;
        _2471 = (_2684 * _2677) + _1926;
        _2473 = (_2684 * _2679) + _1928;
        _2475 = ((_2669 * 0.039999999105930328369140625) * _2684) + _2254;
        _2477 = ((_2671 * 0.039999999105930328369140625) * _2684) + _2256;
        _2479 = ((_2673 * 0.039999999105930328369140625) * _2684) + _2258;
    }
    else
    {
        _2469 = _1924;
        _2471 = _1926;
        _2473 = _1928;
        _2475 = _2254;
        _2477 = _2256;
        _2479 = _2258;
    }
    float _4365 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4376 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4387 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    uint _2499 = _237 + 6u;
    float _2507 = _691 / cbSceneParam._m0[86u].x;
    float _2508 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2522 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, (log2((isnan(cbSceneParam._m0[77u].w) ? _626 : (isnan(_626) ? cbSceneParam._m0[77u].w : min(_626, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2524 = _2522.x;
    float _2525 = _2522.y;
    float _2526 = _2522.z;
    float _2527 = _2522.w;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_626 > cbSceneParam._m0[78u].w)
    {
        float _2582 = isnan(_626) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _626 : min(cbSceneParam._m0[80u].w, _626));
        float _2583 = _2582 / _626;
        float _2594 = _2583 * _676;
        float _2595 = _677 * _2583;
        float _2596 = (-0.0) - _2595;
        float _2597 = _2583 * _678;
        float _2599 = (cbSceneParam._m0[77u].w * _2596) / _2582;
        float _2600 = _2599 + cbSceneParam._m0[79u].w;
        float _2601 = cbSceneParam._m0[79u].w - _2595;
        float _2607 = sqrt(((_2594 * _2594) + (_2595 * _2595)) + (_2597 * _2597));
        float _2610 = (1.0 - (cbSceneParam._m0[77u].w / _2582)) * _2607;
        float _2615 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2617 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2770;
        if (abs((_2596 - _2599) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2770 = ((((_2600 > 0.0) ? exp2(_2615 * _2600) : (2.0 - exp2(_2617 * _2600))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2610;
        }
        else
        {
            float _2730 = 1.0 / cbSceneParam._m0[80u].x;
            float _2731 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : max(_2600, _2601));
            float _2732 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : min(_2600, _2601));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            _2770 = ((abs(_2607 / _2596) * cbSceneParam._m0[80u].y) * ((((_2741 - _2742) * 2.0) - ((exp2(_2615 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0)))) - exp2(_2615 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))))) * _2730)) - ((exp2(_2617 * _2741) - exp2(_2617 * _2742)) * _2730))) + (_2610 * cbSceneParam._m0[80u].z);
        }
        vec4 _2772 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, 1.0), 0.0);
        float _2781 = exp2((_2770 * (-1.44269502162933349609375)) * (1.0 - _2772.w));
        float _2782 = log2(_2781);
        float _2798 = log2(_2527);
        _2619 = (exp2(_2798 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2782 * cbSceneParam._m0[78u].x)) * _2772.x) / cbSceneParam._m0[78u].x)) + _2524;
        _2621 = (exp2(_2798 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2782 * cbSceneParam._m0[78u].y)) * _2772.y) / cbSceneParam._m0[78u].y)) + _2525;
        _2623 = (exp2(_2798 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2782 * cbSceneParam._m0[78u].z)) * _2772.z) / cbSceneParam._m0[78u].z)) + _2526;
        _2625 = _2781 * _2527;
    }
    else
    {
        _2619 = _2524;
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
    }
    float _2637 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2638 = _2637 == 3.0;
    float _2639 = log2(_2625);
    float _2646 = exp2(_2639 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2469 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _757))) + ((_2475 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2647 = exp2(_2639 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2471 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _757))) + ((_2477 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2648 = exp2(_2639 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2473 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _757))) + ((_2479 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2657 = (_2637 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2657 * (_2638 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2619)));
    SV_Target.y = _2657 * (_2638 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.z = _2657 * (_2638 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2623)));
    SV_Target.w = cbInstanceData._m0[_2499].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2499].w;
}


