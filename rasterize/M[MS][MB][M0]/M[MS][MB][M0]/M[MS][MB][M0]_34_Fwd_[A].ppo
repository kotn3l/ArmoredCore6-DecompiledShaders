#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1194;
float _3556;
float _3557;
float _3558;
float _3559;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3568 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    float _359 = fma(_350, _231, fma(_356, _238, _355 * _224));
    float _362 = fma(_350, _232, fma(_356, _239, _355 * _225));
    float _365 = fma(_350, _233, fma(_356, _240, _355 * _226));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _407 = _405.x;
    float _408 = 1.0 - _407;
    float _415 = ((_407 - _408) * cbMtdParam._m0[24u].z) + _408;
    float _417 = (cbMtdParam._m0[19u].x + dot(vec4(_369 * _359, _369 * _362, _369 * _365, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_415 * cbMtdParam._m0[21u].z);
    float _3579 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _420 = (-0.0) - cbMtdParam._m0[24u].y;
    float _422 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
    float _430 = _418 - ((_418 * TEXCOORD_8.x) * _423);
    float _431 = _418 - ((_418 * TEXCOORD_8.y) * _423);
    float _432 = _418 - ((_418 * TEXCOORD_8.z) * _423);
    float _439 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _443 = ((isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : min(_439, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _451 = (_443 - (((_415 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _443))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3610 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _456 = ((_430 * (cbMtdParam._m0[17u].x - _288)) * _452) + _288;
    float _457 = ((_431 * (cbMtdParam._m0[17u].y - _289)) * _452) + _289;
    float _458 = ((_432 * (cbMtdParam._m0[17u].z - _290)) * _452) + _290;
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _472 = _470.x;
    float _473 = 1.0 - _472;
    float _502 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_472 - _473) * cbMtdParam._m0[24u].w) + _473) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3621 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _511 = ((((cbMtdParam._m0[10u].x - _456) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _503) + _456;
    float _512 = ((((cbMtdParam._m0[10u].y - _457) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _503) + _457;
    float _513 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _458)) * _503) + _458;
    float _518 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3632 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _550 = (((_532.z - _518) * _430) * _452) + _518;
    float _553 = ((cbMtdParam._m0[23u].y - _550) * _503) + _550;
    vec4 _572 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _578 = (_572.x * 2.0) + (-1.0);
    float _579 = (_572.y * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3643 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _600 = (((cbMtdParam._m0[21u].x * _355) + ((_539 - _355) * _430)) * _452) + _355;
    float _601 = (((cbMtdParam._m0[21u].x * _356) + ((_540 - _356) * _431)) * _452) + _356;
    float _602 = (((sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) - _350) * _432) * _452) + _350;
    float _613 = (((_578 - _600) + (_600 * cbMtdParam._m0[22u].z)) * _503) + _600;
    float _614 = (((_579 - _601) + (_601 * cbMtdParam._m0[22u].z)) * _503) + _601;
    float _615 = ((sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) - _602) * _503) + _602;
    float _617 = cbMtdParam._m0[22u].x + _334.w;
    float _620 = fma(_615, _231, fma(_614, _238, _613 * _224));
    float _623 = fma(_615, _232, fma(_614, _239, _613 * _225));
    float _626 = fma(_615, _233, fma(_614, _240, _613 * _226));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3654 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _634 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3676 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3687 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3698 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    vec4 _716 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _718 = _716.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _875 = sqrt(((_702 * _702) + (_703 * _703)) + (_704 * _704));
        float _881 = (cbMatDynParam._m0[5u].x * _875) + cbMatDynParam._m0[5u].y;
        float _3709 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _886 = (cbMatDynParam._m0[5u].z * _875) + cbMatDynParam._m0[5u].w;
        float _3720 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) - _882)) + _882) < ((_718 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _751 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _754 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _757 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _770 = _243 + 9u;
    uint _771 = _770 + uint(cbMatDynParam._m0[0u].w);
    float _777 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_771].x;
    float _778 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_771].y;
    float _779 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_771].z;
    float _3731 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _795 = ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_631, _632, _633), vec3(_709, _710, _711));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _631) - _709;
    float _804 = (_799 * _632) - _710;
    float _805 = (_799 * _633) - _711;
    float _809 = abs(dot(vec3(_709, _710, _711), vec3(_631, _632, _633)));
    float _3764 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_634);
    float _824 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1193;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _918 = fma(_864, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856));
        float _922 = fma(_864, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856));
        float _926 = fma(_864, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856));
        float _951 = _856 + _631;
        float _952 = _860 + _632;
        float _953 = _864 + _633;
        float _963 = fma(_953, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951)) - _918;
        float _964 = fma(_953, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951)) - _922;
        float _965 = fma(_953, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951)) - _926;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_918 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_922 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[34u].z) + ((((((_926 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1021 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_987.x + (-0.5));
        float _1023 = _1021 * (_987.y + (-0.5));
        float _1024 = _1021 * (_987.z + (-0.5));
        float _1031 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_994.x + (-0.5));
        float _1033 = _1031 * (_994.y + (-0.5));
        float _1034 = _1031 * (_994.z + (-0.5));
        float _1041 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1001.x + (-0.5));
        float _1043 = _1041 * (_1001.y + (-0.5));
        float _1044 = _1041 * (_1001.z + (-0.5));
        float _1051 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1008.x + (-0.5));
        float _1053 = _1051 * (_1008.y + (-0.5));
        float _1054 = _1051 * (_1008.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1075 = (dot(vec3(_631, _632, _633), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1085 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3812 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1087 + 1.0))) + _1092) * _1055;
        float _1102 = _1023 * 0.5;
        float _1103 = _1033 * 0.5;
        float _1104 = _1043 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_631, _632, _633), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3845 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1129 + 1.0))) + _1134) * _1056;
        float _1144 = _1024 * 0.5;
        float _1145 = _1034 * 0.5;
        float _1146 = _1044 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_631, _632, _633), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3878 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1171 + 1.0))) + _1176) * _1057;
        _1193 = _1024;
        _1195 = _1023;
        _1196 = _1022;
        _1197 = _1034;
        _1198 = _1033;
        _1199 = _1032;
        _1200 = _1044;
        _1201 = _1043;
        _1202 = _1042;
        _1203 = _1057;
        _1204 = _1056;
        _1205 = _1055;
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _1194;
        _1195 = _1194;
        _1196 = _1194;
        _1197 = _1194;
        _1198 = _1194;
        _1199 = _1194;
        _1200 = _1194;
        _1201 = _1194;
        _1202 = _1194;
        _1203 = _1194;
        _1204 = _1194;
        _1205 = _1194;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_864, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _856));
        float _1240 = fma(_864, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _856));
        float _1244 = fma(_864, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _856));
        float _1267 = _856 + _631;
        float _1268 = _860 + _632;
        float _1269 = _864 + _633;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_631, _632, _633), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3941 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_631, _632, _633), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3974 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_631, _632, _633), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4007 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1194;
        _1506 = _1194;
        _1507 = _1194;
        _1508 = _1194;
        _1509 = _1194;
        _1510 = _1194;
        _1511 = _1194;
        _1512 = _1194;
        _1513 = _1194;
        _1514 = _1194;
        _1515 = _1194;
        _1516 = _1194;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1206)) + _1206;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1207)) + _1207;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _803 * 0.5;
    float _1574 = _804 * 0.5;
    float _1575 = _805 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1193, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_864, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_864, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_864, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1704 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1707 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1735 = frontier_phi_17_15_ladder;
        }
        float _1938;
        if (_1704 > 0.0)
        {
            _1938 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1938 = frontier_phi_26_22_ladder;
        }
        float _2181;
        if (_1707 > 0.0)
        {
            _2181 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2181 = frontier_phi_38_33_ladder;
        }
        float _2183 = isnan(_1938) ? _1735 : (isnan(_1735) ? _1938 : min(_1735, _1938));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1701) + _1690;
        float _2189 = (_2184 * _1704) + _1694;
        float _2190 = (_2184 * _1707) + _1698;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_16_38_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_16_38_ladder_2;
        _1725 = frontier_phi_16_38_ladder_1;
        _1727 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1642);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_864, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_864, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_864, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1800 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1803 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1943;
        if (_1797 > 0.0)
        {
            _1943 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1943 = frontier_phi_28_24_ladder;
        }
        float _2208;
        if (_1800 > 0.0)
        {
            _2208 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2208 = frontier_phi_40_35_ladder;
        }
        float _2413;
        if (_1803 > 0.0)
        {
            _2413 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2413 = frontier_phi_49_46_ladder;
        }
        float _2415 = isnan(_2208) ? _1943 : (isnan(_1943) ? _2208 : min(_1943, _2208));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1797) + _1786;
        float _2421 = (_2416 * _1800) + _1790;
        float _2422 = (_2416 * _1803) + _1794;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_25_49_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_25_49_ladder_2;
        _1824 = frontier_phi_25_49_ladder_1;
        _1826 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1732);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1838 = ((((1.0 - _824) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_824 * _811)) * _795;
    float _1839 = _1838 * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1840 = _1838 * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1841 = _1838 * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1844 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    uvec4 _1860 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1862 = _1860.x * 14u;
    uint _1863 = _1862 + 13u;
    float _1870 = _795 + (-1.0);
    float _1875 = (cbLight._m0[_1863].x * _1870) + 1.0;
    float _1876 = (cbLight._m0[_1863].y * _1870) + 1.0;
    float _1877 = (cbLight._m0[_1863].z * _1870) + 1.0;
    float _1878 = (cbLight._m0[_1863].w * _1870) + 1.0;
    uint _1879 = _1862 + 5u;
    float _1885 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1889 = _1862 + 4u;
    float _1896 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1900 = _1862 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_631, _632, _633));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_631, _632, _633));
    float _4143 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4154 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1879].x * _1885) * _1921) + ((cbLight._m0[_1889].x * _1896) * _1919);
    float _1929 = ((_1885 * cbLight._m0[_1879].y) * _1921) + ((_1896 * cbLight._m0[_1889].y) * _1919);
    float _1930 = ((_1885 * cbLight._m0[_1879].z) * _1921) + ((_1896 * cbLight._m0[_1889].z) * _1919);
    uvec4 _1935 = floatBitsToUint(cbLight._m0[_1862 + 12u]);
    bool _1937 = _1935.x == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1937)
    {
        _1948 = _1928;
        _1950 = _1929;
        _1952 = _1930;
    }
    else
    {
        uint _1956 = _1862 + 6u;
        float _1972 = (dot(vec3(cbLight._m0[_1862 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _1973 = _1972 * _1972;
        float _4165 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1975 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1948 = (((cbLight._m0[_1956].x * 0.3183098733425140380859375) * _1974) * _1975) + _1928;
        _1950 = (((cbLight._m0[_1956].y * 0.3183098733425140380859375) * _1974) * _1975) + _1929;
        _1952 = (((cbLight._m0[_1956].z * 0.3183098733425140380859375) * _1974) * _1975) + _1930;
    }
    bool _1955 = _1935.y == 0u;
    float _1993;
    float _1995;
    float _1997;
    if (_1955)
    {
        _1993 = _1948;
        _1995 = _1950;
        _1997 = _1952;
    }
    else
    {
        uint _2152 = _1862 + 7u;
        float _2168 = (dot(vec3(cbLight._m0[_1862 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4181 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2171 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _1993 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _1948;
        _1995 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _1950;
        _1997 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _1952;
    }
    uint _2000 = _1862 + 8u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _634) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1862].x + _709;
    float _2016 = cbLight._m0[_1862].y + _710;
    float _2017 = cbLight._m0[_1862].z + _711;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1862].xyz));
    float _4197 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2029 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2030 = dot(vec3(_631, _632, _633), vec3(_2022, _2023, _2024));
    float _4219 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2022, _2023, _2024));
    float _4230 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2038 = _2014 * _2014;
    float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
    float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2054 = 1.0 - _2014;
    float _2065 = (0.5 / (((_2029 * ((_2028 * _2054) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2054) + _2014) * _2028))) * _2028;
    float _4241 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
    uint _2078 = _1862 + 9u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _634) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1900].x + _709;
    float _2092 = cbLight._m0[_1900].y + _710;
    float _2093 = cbLight._m0[_1900].z + _711;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1900].xyz));
    float _4252 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2105 = dot(vec3(_631, _632, _633), vec3(_2098, _2099, _2100));
    float _4263 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2098, _2099, _2100));
    float _4274 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2090 * _2090;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2126 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2127 = 1.0 - _2090;
    float _2137 = (0.5 / (((_2029 * ((_2104 * _2127) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2127) + _2090) * _2104))) * _2104;
    float _4285 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    float _2149 = (((_2126 * cbLight._m0[_2078].x) * _2139) * _1885) + (((_2053 * cbLight._m0[_2000].x) * _2067) * _1896);
    float _2150 = (((_2126 * cbLight._m0[_2078].y) * _2139) * _1885) + (((_2053 * cbLight._m0[_2000].y) * _2067) * _1896);
    float _2151 = (((_2126 * cbLight._m0[_2078].z) * _2139) * _1885) + (((_2053 * cbLight._m0[_2000].z) * _2067) * _1896);
    float _2213;
    float _2215;
    float _2217;
    if (_1937)
    {
        _2213 = _2149;
        _2215 = _2150;
        _2217 = _2151;
    }
    else
    {
        uint _2219 = _1862 + 2u;
        uint _2223 = _1862 + 10u;
        float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _634) * 0.949999988079071044921875);
        float _2238 = _2237 * _2237;
        float _2239 = cbLight._m0[_2219].x + _709;
        float _2240 = cbLight._m0[_2219].y + _710;
        float _2241 = cbLight._m0[_2219].z + _711;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2246 = _2245 * _2239;
        float _2247 = _2245 * _2240;
        float _2248 = _2245 * _2241;
        float _2249 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2219].xyz));
        float _4296 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2253 = dot(vec3(_631, _632, _633), vec3(_2246, _2247, _2248));
        float _4307 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
        float _4318 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2261 = _2238 * _2238;
        float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
        float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2275 = 1.0 - _2238;
        float _2285 = (0.5 / (((_2029 * ((_2252 * _2275) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2275) + _2238) * _2252))) * _2252;
        float _4329 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2213 = (((_2274 * cbLight._m0[_2223].x) * _2287) * _2288) + _2149;
        _2215 = (((_2274 * cbLight._m0[_2223].y) * _2287) * _2288) + _2150;
        _2217 = (((_2274 * cbLight._m0[_2223].z) * _2287) * _2288) + _2151;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1955)
    {
        _2323 = _2213;
        _2325 = _2215;
        _2327 = _2217;
    }
    else
    {
        uint _2334 = _1862 + 3u;
        uint _2338 = _1862 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _634) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _709;
        float _2355 = cbLight._m0[_2334].y + _710;
        float _2356 = cbLight._m0[_2334].z + _711;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2334].xyz));
        float _4345 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2368 = dot(vec3(_631, _632, _633), vec3(_2361, _2362, _2363));
        float _4356 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4367 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2390 = 1.0 - _2353;
        float _2400 = (0.5 / (((_2029 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2390) + _2353) * _2367))) * _2367;
        float _4378 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2323 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2403) + _2213;
        _2325 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2403) + _2215;
        _2327 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2403) + _2217;
    }
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_1860.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            uint _2784 = 0u;
            uint _2793;
            bool _2794;
            for (;;)
            {
                _2793 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                _2794 = _2793 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2794)
                {
                    frontier_phi_66_pred = _2778;
                    frontier_phi_66_pred_1 = _2783;
                    frontier_phi_66_pred_2 = _2782;
                    frontier_phi_66_pred_3 = _2781;
                    frontier_phi_66_pred_4 = _2780;
                    frontier_phi_66_pred_5 = _2779;
                }
                else
                {
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    uint _2929;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2793;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    for (;;)
                    {
                        uint _2933 = uint(findLSB(_2929)) + (_2784 << 5u);
                        uint _2930 = (_2929 + 4294967295u) & _2929;
                        uint _2935 = _2933 * 48u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2955 = (_2933 * 48u) + 4u;
                        vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2974 = (_2933 * 48u) + 8u;
                        vec3 _2985 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x));
                        float _2989 = _2949.x - _2479;
                        float _2990 = _2949.y - _2480;
                        float _2991 = _2949.z - _2481;
                        float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                        float _2995 = inversesqrt(_2992);
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _2999 = dot(vec3(_751, _754, _757), vec3(_2996, _2997, _2998));
                        float _3004 = 1.0 - (_2992 * _2949.w);
                        float _4404 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3006 = sqrt(_2992) * _2968.w;
                        float _3009 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2999) + _3010;
                        float _3016 = _3006 * _3006;
                        float _3020 = ((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3005) / ((_3016 * 0.699999988079071044921875) + 1.0);
                        float _3024 = (-0.0) - _2479;
                        float _3025 = (-0.0) - _2480;
                        float _3026 = (-0.0) - _2481;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3041 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                        float _3042 = 1.0 - _811;
                        float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3031 + _2996;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_751, _754, _757), vec3(_3031, _3032, _3033));
                        float _4420 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3066 = dot(vec3(_751, _754, _757), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4431 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3009 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _2999) + _3075;
                        float _4442 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4453 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) / ((_3073 * _3073) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125))) * _3005;
                        _2853 = (_3020 * _2968.x) + _2926;
                        _2854 = (_3020 * _2968.y) + _2927;
                        _2855 = (_3020 * _2968.z) + _2928;
                        _2850 = (_3101 * _2985.x) + _2923;
                        _2851 = (_3101 * _2985.y) + _2924;
                        _2852 = (_3101 * _2985.z) + _2925;
                        if (_2930 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2930;
                        }
                    }
                    frontier_phi_66_pred = _2850;
                    frontier_phi_66_pred_1 = _2855;
                    frontier_phi_66_pred_2 = _2854;
                    frontier_phi_66_pred_3 = _2853;
                    frontier_phi_66_pred_4 = _2852;
                    frontier_phi_66_pred_5 = _2851;
                }
                _2627 = frontier_phi_66_pred;
                _2637 = frontier_phi_66_pred_1;
                _2635 = frontier_phi_66_pred_2;
                _2633 = frontier_phi_66_pred_3;
                _2631 = frontier_phi_66_pred_4;
                _2629 = frontier_phi_66_pred_5;
                uint _2785 = _2784 + 1u;
                if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2778 = _2627;
                    _2779 = _2629;
                    _2780 = _2631;
                    _2781 = _2633;
                    _2782 = _2635;
                    _2783 = _2637;
                    _2784 = _2785;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((4294967295u << _2643) & _2525) == 0u)
        {
            _2746 = _2626;
            _2748 = _2628;
            _2750 = _2630;
            _2752 = _2632;
            _2754 = _2634;
            _2756 = _2636;
        }
        else
        {
            float _2771 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2772 = _2771 * _2479;
            float _2773 = _2771 * _2480;
            float _2774 = _2771 * _2481;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2906 = _2626;
                float _2907 = _2628;
                float _2908 = _2630;
                float _2909 = _2632;
                float _2910 = _2634;
                float _2911 = _2636;
                uint _2912 = _2643;
                uint _2921;
                bool _2922;
                for (;;)
                {
                    _2921 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                    _2922 = _2921 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2922)
                    {
                        frontier_phi_77_pred = _2911;
                        frontier_phi_77_pred_1 = _2910;
                        frontier_phi_77_pred_2 = _2909;
                        frontier_phi_77_pred_3 = _2908;
                        frontier_phi_77_pred_4 = _2907;
                        frontier_phi_77_pred_5 = _2906;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3128 = _2906;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        float _3131 = _2909;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        uint _3134 = _2921;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3204;
                        vec4 _3219;
                        float _3265;
                        bool _3266;
                        for (;;)
                        {
                            uint _3145 = ((_2912 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3191 = (_3145 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3145 * 40u) + 20u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3145 * 40u) + 24u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3240 = (_3145 * 40u) + 28u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3265 = fma(_2481, _3253.z, fma(_2480, _3253.y, _3253.x * _2479)) + _3253.w;
                            _3266 = !((fma(_2481, _3234.z, fma(_2480, _3234.y, _3234.x * _2479)) + _3234.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3266)
                            {
                                float _3293 = _3160.x - _2479;
                                float _3294 = _3160.y - _2480;
                                float _3295 = _3160.z - _2481;
                                float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                                float _3299 = inversesqrt(_3296);
                                float _3300 = _3299 * _3293;
                                float _3301 = _3299 * _3294;
                                float _3302 = _3299 * _3295;
                                float _3306 = 1.0 - (_3296 / (_3161 * _3161));
                                float _4464 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3311 = sqrt(_3296) * _3176.w;
                                float _3313 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                                float _3314 = _3313 * _3313;
                                float _3317 = ((1.0 - _3314) * dot(vec3(_3300, _3301, _3302), vec3(_751, _754, _757))) + _3314;
                                float _3320 = _3311 * _3311;
                                float _3324 = (fma(_2481, _3204.z, fma(_2480, _3204.y, _3204.x * _2479)) + _3204.w) / _3265;
                                float _3325 = (fma(_2481, _3219.z, fma(_2480, _3219.y, _3219.x * _2479)) + _3219.w) / _3265;
                                float _3329 = 1.0 - dot(vec2(_3324, _3325), vec2(_3324, _3325));
                                float _4480 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3331 = _3330 * (((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3307) / ((_3320 * 0.699999988079071044921875) + 1.0));
                                float _3343 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                                float _3344 = 1.0 - _811;
                                float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                                float _3352 = _3351 * _3351;
                                float _3353 = _3352 * _3352;
                                float _3354 = _3300 - _2772;
                                float _3355 = _3301 - _2773;
                                float _3356 = _3302 - _2774;
                                float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                                float _3364 = dot(vec3(_751, _754, _757), vec3((-0.0) - _2772, (-0.0) - _2773, (-0.0) - _2774));
                                float _4491 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3368 = dot(vec3(_751, _754, _757), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                                float _4502 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                                float _3376 = _3313 * _3352;
                                float _3377 = _3376 * _3376;
                                float _3383 = ((1.0 - _3377) * dot(vec3(_751, _754, _757), vec3(_3300, _3301, _3302))) + _3377;
                                float _4513 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3385 = 1.0 - _3352;
                                float _3395 = (0.5 / (((_3384 * ((_3367 * _3385) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3352) * _3367))) * _3384;
                                float _4524 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3405 = (_3330 * _3307) * (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3375 * _3375) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3331 * _3176.y;
                                frontier_phi_83_pred_1 = _3331 * _3176.x;
                                frontier_phi_83_pred_2 = _3405 * _3188.z;
                                frontier_phi_83_pred_3 = _3405 * _3188.y;
                                frontier_phi_83_pred_4 = _3405 * _3188.x;
                                frontier_phi_83_pred_5 = _3331 * _3176.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3413 = frontier_phi_83_pred;
                            _3412 = frontier_phi_83_pred_1;
                            _3411 = frontier_phi_83_pred_2;
                            _3410 = frontier_phi_83_pred_3;
                            _3409 = frontier_phi_83_pred_4;
                            _3414 = frontier_phi_83_pred_5;
                            _3118 = _3412 + _3131;
                            _3119 = _3413 + _3132;
                            _3120 = _3414 + _3133;
                            _3115 = _3409 + _3128;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3120;
                        frontier_phi_77_pred_1 = _3119;
                        frontier_phi_77_pred_2 = _3118;
                        frontier_phi_77_pred_3 = _3117;
                        frontier_phi_77_pred_4 = _3116;
                        frontier_phi_77_pred_5 = _3115;
                    }
                    _2757 = frontier_phi_77_pred;
                    _2755 = frontier_phi_77_pred_1;
                    _2753 = frontier_phi_77_pred_2;
                    _2751 = frontier_phi_77_pred_3;
                    _2749 = frontier_phi_77_pred_4;
                    _2747 = frontier_phi_77_pred_5;
                    uint _2913 = _2912 + 1u;
                    if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2906 = _2747;
                        _2907 = _2749;
                        _2908 = _2751;
                        _2909 = _2753;
                        _2910 = _2755;
                        _2911 = _2757;
                        _2912 = _2913;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2751;
                frontier_phi_58_59_ladder_1 = _2757;
                frontier_phi_58_59_ladder_2 = _2755;
                frontier_phi_58_59_ladder_3 = _2753;
                frontier_phi_58_59_ladder_4 = _2749;
                frontier_phi_58_59_ladder_5 = _2747;
            }
            else
            {
                frontier_phi_58_59_ladder = _2630;
                frontier_phi_58_59_ladder_1 = _2636;
                frontier_phi_58_59_ladder_2 = _2634;
                frontier_phi_58_59_ladder_3 = _2632;
                frontier_phi_58_59_ladder_4 = _2628;
                frontier_phi_58_59_ladder_5 = _2626;
            }
            _2746 = frontier_phi_58_59_ladder_5;
            _2748 = frontier_phi_58_59_ladder_4;
            _2750 = frontier_phi_58_59_ladder;
            _2752 = frontier_phi_58_59_ladder_3;
            _2754 = frontier_phi_58_59_ladder_2;
            _2756 = frontier_phi_58_59_ladder_1;
        }
        float _2761 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2538 = (_2761 * _2752) + _1993;
        _2540 = (_2761 * _2754) + _1995;
        _2542 = (_2761 * _2756) + _1997;
        _2544 = ((_2746 * 0.039999999105930328369140625) * _2761) + _2323;
        _2546 = ((_2748 * 0.039999999105930328369140625) * _2761) + _2325;
        _2548 = ((_2750 * 0.039999999105930328369140625) * _2761) + _2327;
    }
    else
    {
        _2538 = _1993;
        _2540 = _1995;
        _2542 = _1997;
        _2544 = _2323;
        _2546 = _2325;
        _2548 = _2327;
    }
    float _4540 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4551 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4562 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2565 = ((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2538 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _795))) + ((_2544 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    float _2566 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2540 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _795))) + ((_2546 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    float _2567 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2542 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _795))) + ((_2548 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    uint _2568 = _243 + 6u;
    float _2576 = _730 / cbSceneParam._m0[86u].x;
    float _2577 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2591 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2593 = _2591.x;
    float _2594 = _2591.y;
    float _2595 = _2591.z;
    float _2596 = _2591.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2652 = _2651 / _652;
        float _2663 = _2652 * _702;
        float _2664 = _703 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2666 = _2652 * _704;
        float _2668 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2664;
        float _2676 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2863;
        if (abs((_2665 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2863 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2807 = 1.0 / cbSceneParam._m0[80u].x;
            float _2808 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2809 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            _2863 = ((abs(_2676 / _2665) * cbSceneParam._m0[80u].y) * ((((_2818 - _2819) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))))) * _2807)) - ((exp2(_2686 * _2818) - exp2(_2686 * _2819)) * _2807))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2865 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, 1.0), 0.0);
        float _2874 = exp2((_2863 * (-1.44269502162933349609375)) * (1.0 - _2865.w));
        float _2875 = log2(_2874);
        float _2891 = log2(_2596);
        _2688 = (exp2(_2891 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].x)) * _2865.x) / cbSceneParam._m0[78u].x)) + _2593;
        _2690 = (exp2(_2891 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].y)) * _2865.y) / cbSceneParam._m0[78u].y)) + _2594;
        _2692 = (exp2(_2891 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].z)) * _2865.z) / cbSceneParam._m0[78u].z)) + _2595;
        _2694 = _2874 * _2596;
    }
    else
    {
        _2688 = _2593;
        _2690 = _2594;
        _2692 = _2595;
        _2694 = _2596;
    }
    bool _2901;
    vec4 _2704;
    vec4 _2726;
    float _2728;
    float _2732;
    float _2733;
    float _2734;
    float _2735;
    bool _2745;
    for (;;)
    {
        _2704 = cbMatDynParam._m0[0u];
        float _2706 = roundEven(_2704.y);
        bool _2707 = _2706 == 3.0;
        float _2708 = log2(_2694);
        float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * _2565;
        float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * _2566;
        float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * _2567;
        float _2724 = _718 + (-0.5);
        _2726 = cbMtdParam._m0[1u];
        _2728 = _2726.y * _2724;
        float _2731 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2732 = _2731 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
        _2733 = _2731 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
        _2734 = _2731 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
        _2735 = _2724 * 0.999000012874603271484375;
        _2745 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2745)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2735) < 0.5)
            {
                _2901 = true;
                break;
            }
        }
        uint _2842 = _770 + uint(_2704.w);
        if ((cbInstanceData._m0[_2842].w < 1.0) && ((cbInstanceData._m0[_2842].w + _2735) < 0.5))
        {
            _2901 = true;
            break;
        }
        if ((_2728 + 1.0) < _2726.x)
        {
            _2901 = true;
            break;
        }
        _2901 = false;
        break;
    }
    float _3106;
    if (_2901)
    {
        discard_state = true;
        _3106 = 0.0;
    }
    else
    {
        _3106 = cbInstanceData._m0[_2568].w;
    }
    SV_Target.x = _2732;
    SV_Target.y = _2733;
    SV_Target.z = _2734;
    SV_Target.w = _3106;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2568].w;
    discard_exit();
}


