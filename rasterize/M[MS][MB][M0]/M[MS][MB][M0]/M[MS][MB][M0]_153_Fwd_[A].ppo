#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1218;
float _3576;
float _3577;
float _3578;
float _3579;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3588 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _376) + _472;
    float _484 = ((((_451.x - _470) * _376) + _470) * 2.0) + (-1.0);
    float _485 = ((((_451.y - _471) * _376) + _471) * 2.0) + (-1.0);
    float _486 = dot(vec2(_484, _485), vec2(_484, _485));
    float _3599 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))));
    float _494 = _484 + ((((_424.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _495 = _485 + ((((_424.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _498 = fma(_491, _228, fma(_495, _235, _494 * _221));
    float _501 = fma(_491, _229, fma(_495, _236, _494 * _222));
    float _504 = fma(_491, _230, fma(_495, _237, _494 * _223));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _559 = ((_554 - _555) * cbMtdParam._m0[24u].z) + _555;
    float _561 = (cbMtdParam._m0[19u].x + dot(vec4(_508 * _498, _508 * _501, _508 * _504, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_559 * cbMtdParam._m0[21u].z);
    float _3610 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _577 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_559 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3621 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _582 = ((_562 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) * _578) + _383;
    float _583 = ((_562 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) * _578) + _384;
    float _584 = ((_562 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) * _578) + _385;
    float _589 = (((_424.z - _481) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _481;
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _609 = (_602.x * 2.0) + (-1.0);
    float _610 = (_602.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3632 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _620 = (((_602.z - _589) * _562) * _578) + _589;
    float _635 = (((cbMtdParam._m0[21u].x * _494) + ((_609 - _494) * _562)) * _578) + _494;
    float _636 = (((cbMtdParam._m0[21u].x * _495) + ((_610 - _495) * _562)) * _578) + _495;
    float _637 = (((sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) - _491) * _562) * _578) + _491;
    float _642 = cbMtdParam._m0[22u].x + _524.w;
    float _645 = fma(_637, _228, fma(_636, _235, _635 * _221));
    float _648 = fma(_637, _229, fma(_636, _236, _635 * _222));
    float _651 = fma(_637, _230, fma(_636, _237, _635 * _223));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3643 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _659 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3665 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3676 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3687 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    vec4 _743 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _745 = _743.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _899 = sqrt(((_729 * _729) + (_730 * _730)) + (_731 * _731));
        float _905 = (cbMatDynParam._m0[5u].x * _899) + cbMatDynParam._m0[5u].y;
        float _3698 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _910 = (cbMatDynParam._m0[5u].z * _899) + cbMatDynParam._m0[5u].w;
        float _3709 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) - _906)) + _906) < ((_745 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _756 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _757 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _775 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _778 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _781 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    uint _794 = _240 + 9u;
    uint _795 = _794 + uint(cbMatDynParam._m0[0u].w);
    float _801 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_795].x;
    float _802 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_795].y;
    float _803 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_795].z;
    float _3720 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _756, cbSceneParam._m0[86u].y * _757));
    float _819 = ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * TEXCOORD_5.w) * _815.x;
    float _820 = dot(vec3(_656, _657, _658), vec3(_736, _737, _738));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _656) - _736;
    float _828 = (_823 * _657) - _737;
    float _829 = (_823 * _658) - _738;
    float _833 = abs(dot(vec3(_736, _737, _738), vec3(_656, _657, _658)));
    float _3753 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_659);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_888, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880));
        float _946 = fma(_888, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880));
        float _950 = fma(_888, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880));
        float _975 = _880 + _656;
        float _976 = _884 + _657;
        float _977 = _888 + _658;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_656, _657, _658), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3801 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_656, _657, _658), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3834 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_656, _657, _658), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3867 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_888, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880));
        float _1264 = fma(_888, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880));
        float _1268 = fma(_888, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880));
        float _1291 = _880 + _656;
        float _1292 = _884 + _657;
        float _1293 = _888 + _658;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_656, _657, _658), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3930 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_656, _657, _658), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3963 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_656, _657, _658), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3996 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = _1218;
        _1539 = _1218;
        _1540 = _1218;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1230)) + _1230;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1231)) + _1231;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1232)) + _1232;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _827 * 0.5;
    float _1598 = _828 * 0.5;
    float _1599 = _829 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _659);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_888, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_888, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_888, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1727 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1730 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1758 = frontier_phi_17_15_ladder;
        }
        float _1958;
        if (_1727 > 0.0)
        {
            _1958 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1958 = frontier_phi_26_22_ladder;
        }
        float _2201;
        if (_1730 > 0.0)
        {
            _2201 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2201 = frontier_phi_38_33_ladder;
        }
        float _2203 = isnan(_1958) ? _1758 : (isnan(_1758) ? _1958 : min(_1758, _1958));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1724) + _1713;
        float _2209 = (_2204 * _1727) + _1717;
        float _2210 = (_2204 * _1730) + _1721;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2213 = (-1.0) - _2211;
        float _2215 = _2211 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2210 > _2215) || ((_2210 < _2213) || ((_2209 > _2215) || ((_2209 < _2213) || ((_2208 < _2213) || (_2208 > _2215))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2210, cbModelParam._m0[9u].z, fma(_2209, cbModelParam._m0[9u].y, _2208 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2210, cbModelParam._m0[10u].z, fma(_2209, cbModelParam._m0[10u].y, _2208 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2210, cbModelParam._m0[11u].z, fma(_2209, cbModelParam._m0[11u].y, _2208 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_16_38_ladder = _2334.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2334.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2334.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_16_38_ladder_2;
        _1748 = frontier_phi_16_38_ladder_1;
        _1750 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1666);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _659);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_888, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_888, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_888, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1822 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1825 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1963;
        if (_1819 > 0.0)
        {
            _1963 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1963 = frontier_phi_28_24_ladder;
        }
        float _2228;
        if (_1822 > 0.0)
        {
            _2228 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2228 = frontier_phi_40_35_ladder;
        }
        float _2433;
        if (_1825 > 0.0)
        {
            _2433 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2433 = frontier_phi_49_46_ladder;
        }
        float _2435 = isnan(_2228) ? _1963 : (isnan(_1963) ? _2228 : min(_1963, _2228));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1819) + _1808;
        float _2441 = (_2436 * _1822) + _1812;
        float _2442 = (_2436 * _1825) + _1816;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2443;
        float _2446 = _2443 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2442 > _2446) || ((_2442 < _2444) || ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 < _2444) || (_2440 > _2446))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2442, cbModelParam._m0[17u].z, fma(_2441, cbModelParam._m0[17u].y, _2440 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2442, cbModelParam._m0[18u].z, fma(_2441, cbModelParam._m0[18u].y, _2440 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2442, cbModelParam._m0[19u].z, fma(_2441, cbModelParam._m0[19u].y, _2440 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_25_49_ladder = _2641.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2641.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2641.x * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_25_49_ladder_2;
        _1846 = frontier_phi_25_49_ladder_1;
        _1848 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1755);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1860 = ((((1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_848 * _835)) * _819;
    float _1861 = _1860 * ((cbModelParam._m0[1u].w * (_1844 - _1746)) + _1746);
    float _1862 = _1860 * ((cbModelParam._m0[1u].w * (_1846 - _1748)) + _1748);
    float _1863 = _1860 * ((cbModelParam._m0[1u].w * (_1848 - _1750)) + _1750);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    uvec4 _1882 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1884 = _1882.x * 14u;
    uint _1885 = _1884 + 13u;
    float _1892 = _819 + (-1.0);
    float _1897 = (cbLight._m0[_1885].x * _1892) + 1.0;
    float _1898 = (cbLight._m0[_1885].y * _1892) + 1.0;
    float _1899 = (cbLight._m0[_1885].z * _1892) + 1.0;
    float _1900 = (cbLight._m0[_1885].w * _1892) + 1.0;
    uint _1901 = _1884 + 5u;
    float _1907 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1911 = _1884 + 4u;
    float _1917 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1921 = _1884 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_656, _657, _658));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_656, _657, _658));
    float _4132 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _4143 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1901].x * _1907) * _1942) + ((cbLight._m0[_1911].x * _1917) * _1940);
    float _1950 = ((_1907 * cbLight._m0[_1901].y) * _1942) + ((_1917 * cbLight._m0[_1911].y) * _1940);
    float _1951 = ((_1907 * cbLight._m0[_1901].z) * _1942) + ((_1917 * cbLight._m0[_1911].z) * _1940);
    uvec4 _1955 = floatBitsToUint(cbLight._m0[_1884 + 12u]);
    bool _1957 = _1955.x == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1957)
    {
        _1968 = _1949;
        _1970 = _1950;
        _1972 = _1951;
    }
    else
    {
        uint _1976 = _1884 + 6u;
        float _1992 = (dot(vec3(cbLight._m0[_1884 + 2u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _4154 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1995 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _1968 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1949;
        _1970 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1950;
        _1972 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1951;
    }
    bool _1975 = _1955.y == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1975)
    {
        _2013 = _1968;
        _2015 = _1970;
        _2017 = _1972;
    }
    else
    {
        uint _2172 = _1884 + 7u;
        float _2188 = (dot(vec3(cbLight._m0[_1884 + 3u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2189 = _2188 * _2188;
        float _4170 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2190 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2191 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2013 = (((cbLight._m0[_2172].x * 0.3183098733425140380859375) * _2190) * _2191) + _1968;
        _2015 = (((cbLight._m0[_2172].y * 0.3183098733425140380859375) * _2190) * _2191) + _1970;
        _2017 = (((cbLight._m0[_2172].z * 0.3183098733425140380859375) * _2190) * _2191) + _1972;
    }
    uint _2020 = _1884 + 8u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _659) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1884].x + _736;
    float _2036 = cbLight._m0[_1884].y + _737;
    float _2037 = cbLight._m0[_1884].z + _738;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1884].xyz));
    float _4186 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2049 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2050 = dot(vec3(_656, _657, _658), vec3(_2042, _2043, _2044));
    float _4208 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_2042, _2043, _2044));
    float _4219 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2034 * _2034;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2074 = 1.0 - _2034;
    float _2085 = (0.5 / (((_2049 * ((_2048 * _2074) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2074) + _2034) * _2048))) * _2048;
    float _4230 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    uint _2098 = _1884 + 9u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _659) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1921].x + _736;
    float _2112 = cbLight._m0[_1921].y + _737;
    float _2113 = cbLight._m0[_1921].z + _738;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1921].xyz));
    float _4241 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2125 = dot(vec3(_656, _657, _658), vec3(_2118, _2119, _2120));
    float _4252 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2118, _2119, _2120));
    float _4263 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2110 * _2110;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2110;
    float _2157 = (0.5 / (((_2049 * ((_2124 * _2147) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2147) + _2110) * _2124))) * _2124;
    float _4274 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    float _2169 = (((_2146 * cbLight._m0[_2098].x) * _2159) * _1907) + (((_2073 * cbLight._m0[_2020].x) * _2087) * _1917);
    float _2170 = (((_2146 * cbLight._m0[_2098].y) * _2159) * _1907) + (((_2073 * cbLight._m0[_2020].y) * _2087) * _1917);
    float _2171 = (((_2146 * cbLight._m0[_2098].z) * _2159) * _1907) + (((_2073 * cbLight._m0[_2020].z) * _2087) * _1917);
    float _2233;
    float _2235;
    float _2237;
    if (_1957)
    {
        _2233 = _2169;
        _2235 = _2170;
        _2237 = _2171;
    }
    else
    {
        uint _2239 = _1884 + 2u;
        uint _2243 = _1884 + 10u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _659) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _736;
        float _2260 = cbLight._m0[_2239].y + _737;
        float _2261 = cbLight._m0[_2239].z + _738;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2239].xyz));
        float _4285 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2273 = dot(vec3(_656, _657, _658), vec3(_2266, _2267, _2268));
        float _4296 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4307 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2295 = 1.0 - _2258;
        float _2305 = (0.5 / (((_2049 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2295) + _2258) * _2272))) * _2272;
        float _4318 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2233 = (((_2294 * cbLight._m0[_2243].x) * _2307) * _2308) + _2169;
        _2235 = (((_2294 * cbLight._m0[_2243].y) * _2307) * _2308) + _2170;
        _2237 = (((_2294 * cbLight._m0[_2243].z) * _2307) * _2308) + _2171;
    }
    float _2343;
    float _2345;
    float _2347;
    if (_1975)
    {
        _2343 = _2233;
        _2345 = _2235;
        _2347 = _2237;
    }
    else
    {
        uint _2354 = _1884 + 3u;
        uint _2358 = _1884 + 11u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _659) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _736;
        float _2375 = cbLight._m0[_2354].y + _737;
        float _2376 = cbLight._m0[_2354].z + _738;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2354].xyz));
        float _4334 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2388 = dot(vec3(_656, _657, _658), vec3(_2381, _2382, _2383));
        float _4345 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4356 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2410 = 1.0 - _2373;
        float _2420 = (0.5 / (((_2049 * ((_2387 * _2410) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2410) + _2373) * _2387))) * _2387;
        float _4367 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2343 = (((_2409 * cbLight._m0[_2358].x) * _2422) * _2423) + _2233;
        _2345 = (((_2409 * cbLight._m0[_2358].y) * _2422) * _2423) + _2235;
        _2347 = (((_2409 * cbLight._m0[_2358].z) * _2422) * _2423) + _2237;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1882.y == 0u)
    {
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2498;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2498;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2498;
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _757) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _756) / _2514)));
        float _2535 = (log2(_2501 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
        }
        else
        {
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2815)
                {
                    frontier_phi_66_pred = _2799;
                    frontier_phi_66_pred_1 = _2804;
                    frontier_phi_66_pred_2 = _2803;
                    frontier_phi_66_pred_3 = _2802;
                    frontier_phi_66_pred_4 = _2801;
                    frontier_phi_66_pred_5 = _2800;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2814;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2805 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _2499;
                        float _3011 = _2970.y - _2500;
                        float _3012 = _2970.z - _2501;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_775, _778, _781), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4393 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _2499;
                        float _3046 = (-0.0) - _2500;
                        float _3047 = (-0.0) - _2501;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3062 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3063 = 1.0 - _835;
                        float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                        float _3071 = _3070 * _3070;
                        float _3072 = _3071 * _3071;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3083 = dot(vec3(_775, _778, _781), vec3(_3052, _3053, _3054));
                        float _4409 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3087 = dot(vec3(_775, _778, _781), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                        float _4420 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                        float _3095 = _3030 * _3071;
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3020) + _3096;
                        float _4431 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3101 = 1.0 - _3071;
                        float _3111 = (0.5 / (((_3100 * ((_3086 * _3101) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3071) * _3086))) * _3100;
                        float _4442 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3122 = (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3094 * _3094) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2874 = (_3041 * _2989.x) + _2947;
                        _2875 = (_3041 * _2989.y) + _2948;
                        _2876 = (_3041 * _2989.z) + _2949;
                        _2871 = (_3122 * _3006.x) + _2944;
                        _2872 = (_3122 * _3006.y) + _2945;
                        _2873 = (_3122 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_66_pred = _2871;
                    frontier_phi_66_pred_1 = _2876;
                    frontier_phi_66_pred_2 = _2875;
                    frontier_phi_66_pred_3 = _2874;
                    frontier_phi_66_pred_4 = _2873;
                    frontier_phi_66_pred_5 = _2872;
                }
                _2647 = frontier_phi_66_pred;
                _2657 = frontier_phi_66_pred_1;
                _2655 = frontier_phi_66_pred_2;
                _2653 = frontier_phi_66_pred_3;
                _2651 = frontier_phi_66_pred_4;
                _2649 = frontier_phi_66_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2647;
                    _2800 = _2649;
                    _2801 = _2651;
                    _2802 = _2653;
                    _2803 = _2655;
                    _2804 = _2657;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
        }
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.z;
        uint _2663 = (_2661 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2663) & _2545) == 0u)
        {
            _2767 = _2646;
            _2769 = _2648;
            _2771 = _2650;
            _2773 = _2652;
            _2775 = _2654;
            _2777 = _2656;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
            float _2793 = _2792 * _2499;
            float _2794 = _2792 * _2500;
            float _2795 = _2792 * _2501;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2663 < ((_2661 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2927 = _2646;
                float _2928 = _2648;
                float _2929 = _2650;
                float _2930 = _2652;
                float _2931 = _2654;
                float _2932 = _2656;
                uint _2933 = _2663;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2943)
                    {
                        frontier_phi_77_pred = _2932;
                        frontier_phi_77_pred_1 = _2931;
                        frontier_phi_77_pred_2 = _2930;
                        frontier_phi_77_pred_3 = _2929;
                        frontier_phi_77_pred_4 = _2928;
                        frontier_phi_77_pred_5 = _2927;
                    }
                    else
                    {
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3149 = _2927;
                        float _3150 = _2928;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        uint _3155 = _2942;
                        uint _3156;
                        vec4 _3181;
                        float _3182;
                        vec4 _3197;
                        vec3 _3209;
                        vec4 _3224;
                        vec4 _3239;
                        float _3285;
                        bool _3286;
                        for (;;)
                        {
                            uint _3166 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3155));
                            _3156 = (_3155 + 4294967295u) & _3155;
                            uint _3168 = _3166 * 40u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3182 = _3181.w;
                            uint _3184 = (_3166 * 40u) + 4u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3166 * 40u) + 8u;
                            _3209 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x));
                            uint _3211 = (_3166 * 40u) + 16u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3166 * 40u) + 20u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3241 = (_3166 * 40u) + 24u;
                            vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3260 = (_3166 * 40u) + 28u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3285 = fma(_2501, _3273.z, fma(_2500, _3273.y, _3273.x * _2499)) + _3273.w;
                            _3286 = !((fma(_2501, _3254.z, fma(_2500, _3254.y, _3254.x * _2499)) + _3254.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3286)
                            {
                                float _3313 = _3181.x - _2499;
                                float _3314 = _3181.y - _2500;
                                float _3315 = _3181.z - _2501;
                                float _3316 = dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315));
                                float _3319 = inversesqrt(_3316);
                                float _3320 = _3319 * _3313;
                                float _3321 = _3319 * _3314;
                                float _3322 = _3319 * _3315;
                                float _3326 = 1.0 - (_3316 / (_3182 * _3182));
                                float _4453 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3331 = sqrt(_3316) * _3197.w;
                                float _3333 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                                float _3334 = _3333 * _3333;
                                float _3337 = ((1.0 - _3334) * dot(vec3(_3320, _3321, _3322), vec3(_775, _778, _781))) + _3334;
                                float _3340 = _3331 * _3331;
                                float _3344 = (fma(_2501, _3224.z, fma(_2500, _3224.y, _3224.x * _2499)) + _3224.w) / _3285;
                                float _3345 = (fma(_2501, _3239.z, fma(_2500, _3239.y, _3239.x * _2499)) + _3239.w) / _3285;
                                float _3349 = 1.0 - dot(vec2(_3344, _3345), vec2(_3344, _3345));
                                float _4469 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3351 = _3350 * (((isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))) * _3327) / ((_3340 * 0.699999988079071044921875) + 1.0));
                                float _3363 = exp2(log2(1.0 / ((_3340 * 3.5) + 5.0)) * 0.25);
                                float _3364 = 1.0 - _835;
                                float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                                float _3372 = _3371 * _3371;
                                float _3373 = _3372 * _3372;
                                float _3374 = _3320 - _2793;
                                float _3375 = _3321 - _2794;
                                float _3376 = _3322 - _2795;
                                float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                                float _3384 = dot(vec3(_775, _778, _781), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4480 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3388 = dot(vec3(_775, _778, _781), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                                float _4491 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3391 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                                float _3396 = _3333 * _3372;
                                float _3397 = _3396 * _3396;
                                float _3403 = ((1.0 - _3397) * dot(vec3(_775, _778, _781), vec3(_3320, _3321, _3322))) + _3397;
                                float _4502 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3405 = 1.0 - _3372;
                                float _3415 = (0.5 / (((_3404 * ((_3387 * _3405) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3372) * _3387))) * _3404;
                                float _4513 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3425 = (_3350 * _3327) * (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3395 * _3395) * ((_3340 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3351 * _3197.y;
                                frontier_phi_83_pred_1 = _3351 * _3197.x;
                                frontier_phi_83_pred_2 = _3425 * _3209.z;
                                frontier_phi_83_pred_3 = _3425 * _3209.y;
                                frontier_phi_83_pred_4 = _3425 * _3209.x;
                                frontier_phi_83_pred_5 = _3351 * _3197.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3433 = frontier_phi_83_pred;
                            _3432 = frontier_phi_83_pred_1;
                            _3431 = frontier_phi_83_pred_2;
                            _3430 = frontier_phi_83_pred_3;
                            _3429 = frontier_phi_83_pred_4;
                            _3434 = frontier_phi_83_pred_5;
                            _3139 = _3432 + _3152;
                            _3140 = _3433 + _3153;
                            _3141 = _3434 + _3154;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            if (_3156 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3156;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3141;
                        frontier_phi_77_pred_1 = _3140;
                        frontier_phi_77_pred_2 = _3139;
                        frontier_phi_77_pred_3 = _3138;
                        frontier_phi_77_pred_4 = _3137;
                        frontier_phi_77_pred_5 = _3136;
                    }
                    _2778 = frontier_phi_77_pred;
                    _2776 = frontier_phi_77_pred_1;
                    _2774 = frontier_phi_77_pred_2;
                    _2772 = frontier_phi_77_pred_3;
                    _2770 = frontier_phi_77_pred_4;
                    _2768 = frontier_phi_77_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2768;
                        _2928 = _2770;
                        _2929 = _2772;
                        _2930 = _2774;
                        _2931 = _2776;
                        _2932 = _2778;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2772;
                frontier_phi_58_59_ladder_1 = _2778;
                frontier_phi_58_59_ladder_2 = _2776;
                frontier_phi_58_59_ladder_3 = _2774;
                frontier_phi_58_59_ladder_4 = _2770;
                frontier_phi_58_59_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_58_59_ladder = _2650;
                frontier_phi_58_59_ladder_1 = _2656;
                frontier_phi_58_59_ladder_2 = _2654;
                frontier_phi_58_59_ladder_3 = _2652;
                frontier_phi_58_59_ladder_4 = _2648;
                frontier_phi_58_59_ladder_5 = _2646;
            }
            _2767 = frontier_phi_58_59_ladder_5;
            _2769 = frontier_phi_58_59_ladder_4;
            _2771 = frontier_phi_58_59_ladder;
            _2773 = frontier_phi_58_59_ladder_3;
            _2775 = frontier_phi_58_59_ladder_2;
            _2777 = frontier_phi_58_59_ladder_1;
        }
        float _2782 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2558 = (_2782 * _2773) + _2013;
        _2560 = (_2782 * _2775) + _2015;
        _2562 = (_2782 * _2777) + _2017;
        _2564 = ((_2767 * 0.039999999105930328369140625) * _2782) + _2343;
        _2566 = ((_2769 * 0.039999999105930328369140625) * _2782) + _2345;
        _2568 = ((_2771 * 0.039999999105930328369140625) * _2782) + _2347;
    }
    else
    {
        _2558 = _2013;
        _2560 = _2015;
        _2562 = _2017;
        _2564 = _2343;
        _2566 = _2345;
        _2568 = _2347;
    }
    float _4529 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4540 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4551 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _2585 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2558 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _819))) + ((_2564 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2586 = ((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2560 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _819))) + ((_2566 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2587 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2562 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _819))) + ((_2568 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    uint _2588 = _240 + 6u;
    float _2596 = _756 / cbSceneParam._m0[86u].x;
    float _2597 = _757 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2671 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2672 = _2671 / _677;
        float _2683 = _2672 * _729;
        float _2684 = _730 * _2672;
        float _2685 = (-0.0) - _2684;
        float _2687 = _2672 * _731;
        float _2689 = (cbSceneParam._m0[77u].w * _2685) / _2671;
        float _2690 = _2689 + cbSceneParam._m0[79u].w;
        float _2691 = cbSceneParam._m0[79u].w - _2684;
        float _2697 = sqrt(((_2683 * _2683) + (_2684 * _2684)) + (_2687 * _2687));
        float _2700 = (1.0 - (cbSceneParam._m0[77u].w / _2671)) * _2697;
        float _2705 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2707 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2884;
        if (abs((_2685 - _2689) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2884 = ((((_2690 > 0.0) ? exp2(_2705 * _2690) : (2.0 - exp2(_2707 * _2690))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2700;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : max(_2690, _2691));
            float _2830 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : min(_2690, _2691));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2884 = ((abs(_2697 / _2685) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2705 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2705 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2707 * _2839) - exp2(_2707 * _2840)) * _2828))) + (_2700 * cbSceneParam._m0[80u].z);
        }
        vec4 _2886 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2895 = exp2((_2884 * (-1.44269502162933349609375)) * (1.0 - _2886.w));
        float _2896 = log2(_2895);
        float _2912 = log2(_2616);
        _2709 = (exp2(_2912 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].x)) * _2886.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2711 = (exp2(_2912 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].y)) * _2886.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2713 = (exp2(_2912 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2896 * cbSceneParam._m0[78u].z)) * _2886.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2715 = _2895 * _2616;
    }
    else
    {
        _2709 = _2613;
        _2711 = _2614;
        _2713 = _2615;
        _2715 = _2616;
    }
    bool _2922;
    vec4 _2725;
    vec4 _2747;
    float _2749;
    float _2753;
    float _2754;
    float _2755;
    float _2756;
    bool _2766;
    for (;;)
    {
        _2725 = cbMatDynParam._m0[0u];
        float _2727 = roundEven(_2725.y);
        bool _2728 = _2727 == 3.0;
        float _2729 = log2(_2715);
        float _2736 = exp2(_2729 * cbSceneParam._m0[78u].x) * _2585;
        float _2737 = exp2(_2729 * cbSceneParam._m0[78u].y) * _2586;
        float _2738 = exp2(_2729 * cbSceneParam._m0[78u].z) * _2587;
        float _2745 = _745 + (-0.5);
        _2747 = cbMtdParam._m0[1u];
        _2749 = _2747.y * _2745;
        float _2752 = (_2727 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2753 = _2752 * (_2728 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2709)));
        _2754 = _2752 * (_2728 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2711)));
        _2755 = _2752 * (_2728 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2713)));
        _2756 = _2745 * 0.999000012874603271484375;
        _2766 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2766)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2756) < 0.5)
            {
                _2922 = true;
                break;
            }
        }
        uint _2863 = _794 + uint(_2725.w);
        if ((cbInstanceData._m0[_2863].w < 1.0) && ((cbInstanceData._m0[_2863].w + _2756) < 0.5))
        {
            _2922 = true;
            break;
        }
        if ((_2749 + 1.0) < _2747.x)
        {
            _2922 = true;
            break;
        }
        _2922 = false;
        break;
    }
    float _3127;
    if (_2922)
    {
        discard_state = true;
        _3127 = 0.0;
    }
    else
    {
        _3127 = cbInstanceData._m0[_2588].w;
    }
    SV_Target.x = _2753;
    SV_Target.y = _2754;
    SV_Target.z = _2755;
    SV_Target.w = _3127;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2588].w;
    discard_exit();
}


