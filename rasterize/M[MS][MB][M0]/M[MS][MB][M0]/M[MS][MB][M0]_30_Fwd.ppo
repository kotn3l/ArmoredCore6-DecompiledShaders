#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1018;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _244) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _245) + cbTextureTilingScale._m0[20u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _320 = _316.z;
    float _324 = (_316.x * 2.0) + (-1.0);
    float _325 = (_316.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_324, _325), vec2(_324, _325));
    float _3327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))));
    float _337 = _324 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_290.x * 2.0) + (-1.0)));
    float _338 = _325 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_290.y * 2.0) + (-1.0)));
    float _341 = fma(_332, _212, fma(_338, _219, _337 * _205));
    float _344 = fma(_332, _213, fma(_338, _220, _337 * _206));
    float _347 = fma(_332, _214, fma(_338, _221, _337 * _207));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    vec4 _387 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _389 = _387.x;
    float _390 = 1.0 - _389;
    float _397 = ((_389 - _390) * cbMtdParam._m0[24u].z) + _390;
    float _399 = (cbMtdParam._m0[19u].x + dot(vec4(_351 * _341, _351 * _344, _351 * _347, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_397 * cbMtdParam._m0[21u].z);
    float _3338 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _415 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_397 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3349 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _420 = ((_400 * (cbMtdParam._m0[17u].x - _270)) * _416) + _270;
    float _421 = ((_400 * (cbMtdParam._m0[17u].y - _271)) * _416) + _271;
    float _422 = ((_400 * (cbMtdParam._m0[17u].z - _272)) * _416) + _272;
    float _427 = (((_290.z - _320) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _320;
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _447 = (_440.x * 2.0) + (-1.0);
    float _448 = (_440.y * 2.0) + (-1.0);
    float _449 = dot(vec2(_447, _448), vec2(_447, _448));
    float _3360 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _458 = (((_440.z - _427) * _400) * _416) + _427;
    float _473 = (((cbMtdParam._m0[21u].x * _337) + ((_447 - _337) * _400)) * _416) + _337;
    float _474 = (((cbMtdParam._m0[21u].x * _338) + ((_448 - _338) * _400)) * _416) + _338;
    float _475 = (((sqrt(1.0 - (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) - _332) * _400) * _416) + _332;
    float _480 = cbMtdParam._m0[22u].x + _316.w;
    float _483 = fma(_475, _212, fma(_474, _219, _473 * _205));
    float _486 = fma(_475, _213, fma(_474, _220, _473 * _206));
    float _489 = fma(_475, _214, fma(_474, _221, _473 * _207));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _3371 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _497 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3393 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3404 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3415 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _515 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _566 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _556);
    float _567 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _556);
    float _568 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _556);
    float _572 = inversesqrt(dot(vec3(_566, _567, _568), vec3(_566, _567, _568)));
    float _573 = _566 * _572;
    float _574 = _567 * _572;
    float _575 = _568 * _572;
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_496, cbSceneParam._m0[5u].z, fma(_495, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _494));
    float _606 = fma(_496, cbSceneParam._m0[6u].z, fma(_495, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _494));
    float _609 = fma(_496, cbSceneParam._m0[7u].z, fma(_495, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _494));
    uint _623 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3426 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _647 = ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * TEXCOORD_5.w) * _643.x;
    float _648 = dot(vec3(_494, _495, _496), vec3(_573, _574, _575));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _494) - _573;
    float _656 = (_651 * _495) - _574;
    float _657 = (_651 * _496) - _575;
    float _661 = abs(dot(vec3(_573, _574, _575), vec3(_494, _495, _496)));
    float _3459 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_497);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _746 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _750 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _775 = _708 + _494;
        float _776 = _712 + _495;
        float _777 = _716 + _496;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_494, _495, _496), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3507 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_494, _495, _496), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3540 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_494, _495, _496), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3573 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1061 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1065 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1088 = _708 + _494;
        float _1089 = _712 + _495;
        float _1090 = _716 + _496;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_494, _495, _496), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3636 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_494, _495, _496), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3669 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_494, _495, _496), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3702 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1018;
        _1327 = _1018;
        _1328 = _1018;
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1030)) + _1030;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1031)) + _1031;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1032)) + _1032;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _655 * 0.5;
    float _1395 = _656 * 0.5;
    float _1396 = _657 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _497);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1544;
    float _1546;
    float _1548;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1511 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1515 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1519 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1522 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1525 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1528 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1556;
        if (_1522 > 0.0)
        {
            _1556 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1556 = frontier_phi_14_12_ladder;
        }
        float _1759;
        if (_1525 > 0.0)
        {
            _1759 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1759 = frontier_phi_23_19_ladder;
        }
        float _2002;
        if (_1528 > 0.0)
        {
            _2002 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2002 = frontier_phi_35_30_ladder;
        }
        float _2004 = isnan(_1759) ? _1556 : (isnan(_1556) ? _1759 : min(_1556, _1759));
        float _2005 = isnan(_2002) ? _2004 : (isnan(_2004) ? _2002 : min(_2004, _2002));
        float _2009 = (_2005 * _1522) + _1511;
        float _2010 = (_2005 * _1525) + _1515;
        float _2011 = (_2005 * _1528) + _1519;
        float _2012 = _2005 * 9.9999997473787516355514526367188e-05;
        float _2014 = (-1.0) - _2012;
        float _2016 = _2012 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2011 > _2016) || ((_2011 < _2014) || ((_2010 > _2016) || ((_2010 < _2014) || ((_2009 < _2014) || (_2009 > _2016))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2011, cbModelParam._m0[9u].z, fma(_2010, cbModelParam._m0[9u].y, _2009 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2011, cbModelParam._m0[10u].z, fma(_2010, cbModelParam._m0[10u].y, _2009 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2011, cbModelParam._m0[11u].z, fma(_2010, cbModelParam._m0[11u].y, _2009 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_13_35_ladder = _2135.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2135.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2135.x * cbModelParam._m0[1u].y;
        }
        _1544 = frontier_phi_13_35_ladder_2;
        _1546 = frontier_phi_13_35_ladder_1;
        _1548 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1463);
        _1544 = _1532.x * cbModelParam._m0[1u].y;
        _1546 = _1532.y * cbModelParam._m0[1u].y;
        _1548 = _1532.z * cbModelParam._m0[1u].y;
    }
    float _1552 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _497);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1552 : min(cbModelParam._m0[25u].w, _1552));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1621 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1624 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1764;
        if (_1618 > 0.0)
        {
            _1764 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1764 = frontier_phi_25_21_ladder;
        }
        float _2029;
        if (_1621 > 0.0)
        {
            _2029 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2029 = frontier_phi_37_32_ladder;
        }
        float _2234;
        if (_1624 > 0.0)
        {
            _2234 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2234 = frontier_phi_46_43_ladder;
        }
        float _2236 = isnan(_2029) ? _1764 : (isnan(_1764) ? _2029 : min(_1764, _2029));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1618) + _1607;
        float _2242 = (_2237 * _1621) + _1611;
        float _2243 = (_2237 * _1624) + _1615;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2244;
        float _2247 = _2244 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2243 > _2247) || ((_2243 < _2245) || ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 < _2245) || (_2241 > _2247))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2243, cbModelParam._m0[17u].z, fma(_2242, cbModelParam._m0[17u].y, _2241 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2243, cbModelParam._m0[18u].z, fma(_2242, cbModelParam._m0[18u].y, _2241 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2243, cbModelParam._m0[19u].z, fma(_2242, cbModelParam._m0[19u].y, _2241 * cbModelParam._m0[19u].x))), _1553);
            frontier_phi_22_46_ladder = _2442.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2442.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2442.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_22_46_ladder_2;
        _1645 = frontier_phi_22_46_ladder_1;
        _1647 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1553);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1659 = ((((1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_676 * _663)) * _647;
    float _1660 = _1659 * ((cbModelParam._m0[1u].w * (_1643 - _1544)) + _1544);
    float _1661 = _1659 * ((cbModelParam._m0[1u].w * (_1645 - _1546)) + _1546);
    float _1662 = _1659 * ((cbModelParam._m0[1u].w * (_1647 - _1548)) + _1548);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _647 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1717 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1721 = _1683 | 1u;
    float _1732 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_494, _495, _496));
    float _1735 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_494, _495, _496));
    float _3838 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _3849 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1740 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1742 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1749 = ((cbLight._m0[_1700].x * _1706) * _1742) + ((cbLight._m0[_1710].x * _1717) * _1740);
    float _1750 = ((_1706 * cbLight._m0[_1700].y) * _1742) + ((_1717 * cbLight._m0[_1710].y) * _1740);
    float _1751 = ((_1706 * cbLight._m0[_1700].z) * _1742) + ((_1717 * cbLight._m0[_1710].z) * _1740);
    uvec4 _1756 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1758 = _1756.x == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1758)
    {
        _1769 = _1749;
        _1771 = _1750;
        _1773 = _1751;
    }
    else
    {
        uint _1777 = _1683 + 6u;
        float _1793 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _1794 = _1793 * _1793;
        float _3860 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1796 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1769 = (((cbLight._m0[_1777].x * 0.3183098733425140380859375) * _1795) * _1796) + _1749;
        _1771 = (((cbLight._m0[_1777].y * 0.3183098733425140380859375) * _1795) * _1796) + _1750;
        _1773 = (((cbLight._m0[_1777].z * 0.3183098733425140380859375) * _1795) * _1796) + _1751;
    }
    bool _1776 = _1756.y == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1776)
    {
        _1814 = _1769;
        _1816 = _1771;
        _1818 = _1773;
    }
    else
    {
        uint _1973 = _1683 + 7u;
        float _1989 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _3876 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1992 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1814 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1769;
        _1816 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1771;
        _1818 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1773;
    }
    uint _1821 = _1683 + 8u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _497) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1683].x + _573;
    float _1837 = cbLight._m0[_1683].y + _574;
    float _1838 = cbLight._m0[_1683].z + _575;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1683].xyz));
    float _3892 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _1850 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1851 = dot(vec3(_494, _495, _496), vec3(_1843, _1844, _1845));
    float _3914 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1843, _1844, _1845));
    float _3925 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1835 * _1835;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1874 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1875 = 1.0 - _1835;
    float _1886 = (0.5 / (((_1850 * ((_1849 * _1875) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1875) + _1835) * _1849))) * _1849;
    float _3936 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    uint _1899 = _1683 + 9u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _497) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1721].x + _573;
    float _1913 = cbLight._m0[_1721].y + _574;
    float _1914 = cbLight._m0[_1721].z + _575;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1721].xyz));
    float _3947 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1926 = dot(vec3(_494, _495, _496), vec3(_1919, _1920, _1921));
    float _3958 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1930 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1919, _1920, _1921));
    float _3969 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1934 = _1911 * _1911;
    float _1938 = ((_1929 * _1929) * (_1934 + (-1.0))) + 1.0;
    float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1948 = 1.0 - _1911;
    float _1958 = (0.5 / (((_1850 * ((_1925 * _1948) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1948) + _1911) * _1925))) * _1925;
    float _3980 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1934 / ((_1938 * _1938) * 3.141590118408203125));
    float _1970 = (((_1947 * cbLight._m0[_1899].x) * _1960) * _1706) + (((_1874 * cbLight._m0[_1821].x) * _1888) * _1717);
    float _1971 = (((_1947 * cbLight._m0[_1899].y) * _1960) * _1706) + (((_1874 * cbLight._m0[_1821].y) * _1888) * _1717);
    float _1972 = (((_1947 * cbLight._m0[_1899].z) * _1960) * _1706) + (((_1874 * cbLight._m0[_1821].z) * _1888) * _1717);
    float _2034;
    float _2036;
    float _2038;
    if (_1758)
    {
        _2034 = _1970;
        _2036 = _1971;
        _2038 = _1972;
    }
    else
    {
        uint _2040 = _1683 + 2u;
        uint _2044 = _1683 + 10u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _497) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _573;
        float _2061 = cbLight._m0[_2040].y + _574;
        float _2062 = cbLight._m0[_2040].z + _575;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2040].xyz));
        float _3991 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2074 = dot(vec3(_494, _495, _496), vec3(_2067, _2068, _2069));
        float _4002 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _4013 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2096 = 1.0 - _2059;
        float _2106 = (0.5 / (((_1850 * ((_2073 * _2096) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2096) + _2059) * _2073))) * _2073;
        float _4024 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2034 = (((_2095 * cbLight._m0[_2044].x) * _2108) * _2109) + _1970;
        _2036 = (((_2095 * cbLight._m0[_2044].y) * _2108) * _2109) + _1971;
        _2038 = (((_2095 * cbLight._m0[_2044].z) * _2108) * _2109) + _1972;
    }
    float _2144;
    float _2146;
    float _2148;
    if (_1776)
    {
        _2144 = _2034;
        _2146 = _2036;
        _2148 = _2038;
    }
    else
    {
        uint _2155 = _1683 + 3u;
        uint _2159 = _1683 + 11u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _497) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _573;
        float _2176 = cbLight._m0[_2155].y + _574;
        float _2177 = cbLight._m0[_2155].z + _575;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2155].xyz));
        float _4040 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2189 = dot(vec3(_494, _495, _496), vec3(_2182, _2183, _2184));
        float _4051 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4062 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2211 = 1.0 - _2174;
        float _2221 = (0.5 / (((_1850 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2211) + _2174) * _2188))) * _2188;
        float _4073 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2144 = (((_2210 * cbLight._m0[_2159].x) * _2223) * _2224) + _2034;
        _2146 = (((_2210 * cbLight._m0[_2159].y) * _2223) * _2224) + _2036;
        _2148 = (((_2210 * cbLight._m0[_2159].z) * _2223) * _2224) + _2038;
    }
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_1681.y == 0u)
    {
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2299;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2299;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2299;
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2315)));
        float _2336 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
        }
        else
        {
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2608)
                {
                    frontier_phi_61_pred = _2592;
                    frontier_phi_61_pred_1 = _2597;
                    frontier_phi_61_pred_2 = _2596;
                    frontier_phi_61_pred_3 = _2595;
                    frontier_phi_61_pred_4 = _2594;
                    frontier_phi_61_pred_5 = _2593;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2607;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2598 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2300;
                        float _2783 = _2742.y - _2301;
                        float _2784 = _2742.z - _2302;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_603, _606, _609), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4099 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2300;
                        float _2818 = (-0.0) - _2301;
                        float _2819 = (-0.0) - _2302;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _663;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_603, _606, _609), vec3(_2824, _2825, _2826));
                        float _4115 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2859 = dot(vec3(_603, _606, _609), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4126 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4137 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4148 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2651 = (_2813 * _2761.x) + _2719;
                        _2652 = (_2813 * _2761.y) + _2720;
                        _2653 = (_2813 * _2761.z) + _2721;
                        _2648 = (_2894 * _2778.x) + _2716;
                        _2649 = (_2894 * _2778.y) + _2717;
                        _2650 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_61_pred = _2648;
                    frontier_phi_61_pred_1 = _2653;
                    frontier_phi_61_pred_2 = _2652;
                    frontier_phi_61_pred_3 = _2651;
                    frontier_phi_61_pred_4 = _2650;
                    frontier_phi_61_pred_5 = _2649;
                }
                _2448 = frontier_phi_61_pred;
                _2458 = frontier_phi_61_pred_1;
                _2456 = frontier_phi_61_pred_2;
                _2454 = frontier_phi_61_pred_3;
                _2452 = frontier_phi_61_pred_4;
                _2450 = frontier_phi_61_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2448;
                    _2593 = _2450;
                    _2594 = _2452;
                    _2595 = _2454;
                    _2596 = _2456;
                    _2597 = _2458;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
        }
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.z;
        uint _2464 = (_2462 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2464) & _2346) == 0u)
        {
            _2560 = _2447;
            _2562 = _2449;
            _2564 = _2451;
            _2566 = _2453;
            _2568 = _2455;
            _2570 = _2457;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _2586 = _2585 * _2300;
            float _2587 = _2585 * _2301;
            float _2588 = _2585 * _2302;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2464 < ((_2462 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2699 = _2447;
                float _2700 = _2449;
                float _2701 = _2451;
                float _2702 = _2453;
                float _2703 = _2455;
                float _2704 = _2457;
                uint _2705 = _2464;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2715)
                    {
                        frontier_phi_67_pred = _2702;
                        frontier_phi_67_pred_1 = _2703;
                        frontier_phi_67_pred_2 = _2704;
                        frontier_phi_67_pred_3 = _2701;
                        frontier_phi_67_pred_4 = _2700;
                        frontier_phi_67_pred_5 = _2699;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        uint _2918 = _2714;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3003;
                        float _3049;
                        bool _3050;
                        for (;;)
                        {
                            uint _2929 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2990 = (_2929 * 40u) + 20u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2929 * 40u) + 24u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3024 = (_2929 * 40u) + 28u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            _3049 = fma(_2302, _3037.z, fma(_2301, _3037.y, _3037.x * _2300)) + _3037.w;
                            _3050 = !((fma(_2302, _3018.z, fma(_2301, _3018.y, _3018.x * _2300)) + _3018.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3050)
                            {
                                float _3077 = _2944.x - _2300;
                                float _3078 = _2944.y - _2301;
                                float _3079 = _2944.z - _2302;
                                float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                                float _3083 = inversesqrt(_3080);
                                float _3084 = _3083 * _3077;
                                float _3085 = _3083 * _3078;
                                float _3086 = _3083 * _3079;
                                float _3090 = 1.0 - (_3080 / (_2945 * _2945));
                                float _4159 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3095 = sqrt(_3080) * _2960.w;
                                float _3097 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                                float _3098 = _3097 * _3097;
                                float _3101 = ((1.0 - _3098) * dot(vec3(_3084, _3085, _3086), vec3(_603, _606, _609))) + _3098;
                                float _3104 = _3095 * _3095;
                                float _3108 = (fma(_2302, _2988.z, fma(_2301, _2988.y, _2988.x * _2300)) + _2988.w) / _3049;
                                float _3109 = (fma(_2302, _3003.z, fma(_2301, _3003.y, _3003.x * _2300)) + _3003.w) / _3049;
                                float _3113 = 1.0 - dot(vec2(_3108, _3109), vec2(_3108, _3109));
                                float _4175 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3115 = _3114 * (((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3091) / ((_3104 * 0.699999988079071044921875) + 1.0));
                                float _3127 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                                float _3128 = 1.0 - _663;
                                float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                                float _3136 = _3135 * _3135;
                                float _3137 = _3136 * _3136;
                                float _3138 = _3084 - _2586;
                                float _3139 = _3085 - _2587;
                                float _3140 = _3086 - _2588;
                                float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                                float _3148 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4186 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3151 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3152 = dot(vec3(_603, _606, _609), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                                float _4197 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                                float _3160 = _3097 * _3136;
                                float _3161 = _3160 * _3160;
                                float _3167 = ((1.0 - _3161) * dot(vec3(_603, _606, _609), vec3(_3084, _3085, _3086))) + _3161;
                                float _4208 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3168 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3169 = 1.0 - _3136;
                                float _3179 = (0.5 / (((_3168 * ((_3151 * _3169) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3136) * _3151))) * _3168;
                                float _4219 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3189 = (_3114 * _3091) * (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_3159 * _3159) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3189 * _2972.x;
                                frontier_phi_73_pred_1 = _3189 * _2972.y;
                                frontier_phi_73_pred_2 = _3115 * _2960.z;
                                frontier_phi_73_pred_3 = _3115 * _2960.y;
                                frontier_phi_73_pred_4 = _3115 * _2960.x;
                                frontier_phi_73_pred_5 = _3189 * _2972.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3193 = frontier_phi_73_pred;
                            _3194 = frontier_phi_73_pred_1;
                            _3198 = frontier_phi_73_pred_2;
                            _3197 = frontier_phi_73_pred_3;
                            _3196 = frontier_phi_73_pred_4;
                            _3195 = frontier_phi_73_pred_5;
                            _2902 = _3196 + _2915;
                            _2903 = _3197 + _2916;
                            _2904 = _3198 + _2917;
                            _2899 = _3193 + _2912;
                            _2900 = _3194 + _2913;
                            _2901 = _3195 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2902;
                        frontier_phi_67_pred_1 = _2903;
                        frontier_phi_67_pred_2 = _2904;
                        frontier_phi_67_pred_3 = _2901;
                        frontier_phi_67_pred_4 = _2900;
                        frontier_phi_67_pred_5 = _2899;
                    }
                    _2567 = frontier_phi_67_pred;
                    _2569 = frontier_phi_67_pred_1;
                    _2571 = frontier_phi_67_pred_2;
                    _2565 = frontier_phi_67_pred_3;
                    _2563 = frontier_phi_67_pred_4;
                    _2561 = frontier_phi_67_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2561;
                        _2700 = _2563;
                        _2701 = _2565;
                        _2702 = _2567;
                        _2703 = _2569;
                        _2704 = _2571;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2569;
                frontier_phi_55_56_ladder_1 = _2571;
                frontier_phi_55_56_ladder_2 = _2567;
                frontier_phi_55_56_ladder_3 = _2565;
                frontier_phi_55_56_ladder_4 = _2563;
                frontier_phi_55_56_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_55_56_ladder = _2455;
                frontier_phi_55_56_ladder_1 = _2457;
                frontier_phi_55_56_ladder_2 = _2453;
                frontier_phi_55_56_ladder_3 = _2451;
                frontier_phi_55_56_ladder_4 = _2449;
                frontier_phi_55_56_ladder_5 = _2447;
            }
            _2560 = frontier_phi_55_56_ladder_5;
            _2562 = frontier_phi_55_56_ladder_4;
            _2564 = frontier_phi_55_56_ladder_3;
            _2566 = frontier_phi_55_56_ladder_2;
            _2568 = frontier_phi_55_56_ladder;
            _2570 = frontier_phi_55_56_ladder_1;
        }
        float _2575 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2359 = (_2575 * _2566) + _1814;
        _2361 = (_2575 * _2568) + _1816;
        _2363 = (_2575 * _2570) + _1818;
        _2365 = ((_2560 * 0.039999999105930328369140625) * _2575) + _2144;
        _2367 = ((_2562 * 0.039999999105930328369140625) * _2575) + _2146;
        _2369 = ((_2564 * 0.039999999105930328369140625) * _2575) + _2148;
    }
    else
    {
        _2359 = _1814;
        _2361 = _1816;
        _2363 = _1818;
        _2365 = _2144;
        _2367 = _2146;
        _2369 = _2148;
    }
    float _4235 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4246 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4257 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    uint _2389 = _224 + 6u;
    float _2397 = _581 / cbSceneParam._m0[86u].x;
    float _2398 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2412 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2397, _2398, (log2((isnan(cbSceneParam._m0[77u].w) ? _515 : (isnan(_515) ? cbSceneParam._m0[77u].w : min(_515, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2414 = _2412.x;
    float _2415 = _2412.y;
    float _2416 = _2412.z;
    float _2417 = _2412.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_515 > cbSceneParam._m0[78u].w)
    {
        float _2472 = isnan(_515) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _515 : min(cbSceneParam._m0[80u].w, _515));
        float _2473 = _2472 / _515;
        float _2484 = _2473 * _566;
        float _2485 = _567 * _2473;
        float _2486 = (-0.0) - _2485;
        float _2488 = _2473 * _568;
        float _2490 = (cbSceneParam._m0[77u].w * _2486) / _2472;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2485;
        float _2498 = sqrt(((_2484 * _2484) + (_2485 * _2485)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2472)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2661;
        if (abs((_2486 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2661 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2623 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2661 = ((abs(_2498 / _2486) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2508 * _2632) - exp2(_2508 * _2633)) * _2621))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2397, _2398, 1.0), 0.0);
        float _2672 = exp2((_2661 * (-1.44269502162933349609375)) * (1.0 - _2663.w));
        float _2673 = log2(_2672);
        float _2689 = log2(_2417);
        _2510 = (exp2(_2689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].x)) * _2663.x) / cbSceneParam._m0[78u].x)) + _2414;
        _2512 = (exp2(_2689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].y)) * _2663.y) / cbSceneParam._m0[78u].y)) + _2415;
        _2514 = (exp2(_2689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].z)) * _2663.z) / cbSceneParam._m0[78u].z)) + _2416;
        _2516 = _2672 * _2417;
    }
    else
    {
        _2510 = _2414;
        _2512 = _2415;
        _2514 = _2416;
        _2516 = _2417;
    }
    float _2528 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2529 = _2528 == 3.0;
    float _2530 = log2(_2516);
    float _2537 = exp2(_2530 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2359 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _647))) + ((_2365 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2538 = exp2(_2530 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2361 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _647))) + ((_2367 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2539 = exp2(_2530 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2363 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _647))) + ((_2369 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2548 = (_2528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2548 * (_2529 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.y = _2548 * (_2529 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2512)));
    SV_Target.z = _2548 * (_2529 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2514)));
    SV_Target.w = cbInstanceData._m0[_2389].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2389].w;
}


