#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1275;
float _3658;
float _3659;
float _3660;
float _3661;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3670 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3681 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3692 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = _327.x * cbMtdParam._m0[9u].x;
    float _333 = _327.y * cbMtdParam._m0[9u].y;
    float _334 = _327.z * cbMtdParam._m0[9u].z;
    float _338 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _332;
    float _341 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _333;
    float _344 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _334;
    float _351 = ((_332 - _338) * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) + _338;
    float _352 = ((_333 - _341) * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) + _341;
    float _353 = ((_334 - _344) * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) + _344;
    vec4 _372 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _422 = _418.z;
    float _426 = (_418.x * 2.0) + (-1.0);
    float _427 = (_418.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3703 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    float _438 = _426 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_392.x * 2.0) + (-1.0)));
    float _439 = _427 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_392.y * 2.0) + (-1.0)));
    float _442 = fma(_433, _240, fma(_439, _247, _438 * _233));
    float _445 = fma(_433, _241, fma(_439, _248, _438 * _234));
    float _448 = fma(_433, _242, fma(_439, _249, _438 * _235));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _490 = _488.x;
    float _491 = 1.0 - _490;
    float _498 = ((_490 - _491) * cbMtdParam._m0[24u].z) + _491;
    float _500 = (cbMtdParam._m0[19u].x + dot(vec4(_452 * _442, _452 * _445, _452 * _448, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_498 * cbMtdParam._m0[21u].z);
    float _3714 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _503 = (-0.0) - cbMtdParam._m0[24u].y;
    float _505 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
    float _513 = _501 - ((_501 * TEXCOORD_8.x) * _506);
    float _514 = _501 - ((_501 * TEXCOORD_8.y) * _506);
    float _515 = _501 - ((_501 * TEXCOORD_8.z) * _506);
    float _522 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _526 = ((isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : min(_522, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _534 = (_526 - (((_498 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _526))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3745 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _539 = ((_513 * ((_372.x * cbMtdParam._m0[18u].x) - _351)) * _535) + _351;
    float _540 = ((_514 * ((_372.y * cbMtdParam._m0[18u].y) - _352)) * _535) + _352;
    float _541 = ((_515 * ((_372.z * cbMtdParam._m0[18u].z) - _353)) * _535) + _353;
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _583 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_555 - _556) * cbMtdParam._m0[24u].w) + _556) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3756 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _592 = ((((cbMtdParam._m0[10u].x - _539) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _584) + _539;
    float _593 = ((((cbMtdParam._m0[10u].y - _540) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _584) + _540;
    float _594 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _541)) * _584) + _541;
    float _599 = (((_392.z - _422) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _422;
    vec4 _613 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _620 = (_613.x * 2.0) + (-1.0);
    float _621 = (_613.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_620, _621), vec2(_620, _621));
    float _3767 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _631 = (((_613.z - _599) * _513) * _535) + _599;
    float _634 = ((cbMtdParam._m0[23u].y - _631) * _584) + _631;
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _659 = (_653.x * 2.0) + (-1.0);
    float _660 = (_653.y * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _3778 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _681 = (((cbMtdParam._m0[21u].x * _438) + ((_620 - _438) * _513)) * _535) + _438;
    float _682 = (((cbMtdParam._m0[21u].x * _439) + ((_621 - _439) * _514)) * _535) + _439;
    float _683 = (((sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) - _433) * _515) * _535) + _433;
    float _694 = (((_659 - _681) + (_681 * cbMtdParam._m0[22u].z)) * _584) + _681;
    float _695 = (((_660 - _682) + (_682 * cbMtdParam._m0[22u].z)) * _584) + _682;
    float _696 = ((sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _683) * _584) + _683;
    float _698 = cbMtdParam._m0[22u].x + _418.w;
    float _701 = fma(_696, _240, fma(_695, _247, _694 * _233));
    float _704 = fma(_696, _241, fma(_695, _248, _694 * _234));
    float _707 = fma(_696, _242, fma(_695, _249, _694 * _235));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _3789 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _715 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3811 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3822 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3833 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _773);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _773);
    float _785 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _773);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    vec4 _797 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _799 = _797.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _956 = sqrt(((_783 * _783) + (_784 * _784)) + (_785 * _785));
        float _962 = (cbMatDynParam._m0[5u].x * _956) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _967 = (cbMatDynParam._m0[5u].z * _956) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _963)) + _963) < ((_799 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _811 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _812 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _832 = fma(_714, cbSceneParam._m0[5u].z, fma(_713, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _712));
    float _835 = fma(_714, cbSceneParam._m0[6u].z, fma(_713, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _712));
    float _838 = fma(_714, cbSceneParam._m0[7u].z, fma(_713, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _712));
    uint _851 = _271 + 9u;
    uint _852 = _851 + uint(cbMatDynParam._m0[0u].w);
    float _858 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_852].x;
    float _859 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_852].y;
    float _860 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_852].z;
    float _3866 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    vec4 _872 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _811, cbSceneParam._m0[86u].y * _812));
    float _876 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * TEXCOORD_5.w) * _872.x;
    float _877 = dot(vec3(_712, _713, _714), vec3(_790, _791, _792));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _712) - _790;
    float _885 = (_880 * _713) - _791;
    float _886 = (_880 * _714) - _792;
    float _890 = abs(dot(vec3(_790, _791, _792), vec3(_712, _713, _714)));
    float _3899 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_715);
    float _905 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1274;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _999 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _1003 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _1007 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1032 = _937 + _712;
        float _1033 = _941 + _713;
        float _1034 = _945 + _714;
        float _1044 = fma(_1034, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032)) - _999;
        float _1045 = fma(_1034, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032)) - _1003;
        float _1046 = fma(_1034, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032)) - _1007;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_999 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1003 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[34u].z) + ((((((_1007 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1102 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1068.x + (-0.5));
        float _1104 = _1102 * (_1068.y + (-0.5));
        float _1105 = _1102 * (_1068.z + (-0.5));
        float _1112 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1075.x + (-0.5));
        float _1114 = _1112 * (_1075.y + (-0.5));
        float _1115 = _1112 * (_1075.z + (-0.5));
        float _1122 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1082.x + (-0.5));
        float _1124 = _1122 * (_1082.y + (-0.5));
        float _1125 = _1122 * (_1082.z + (-0.5));
        float _1132 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1089.x + (-0.5));
        float _1134 = _1132 * (_1089.y + (-0.5));
        float _1135 = _1132 * (_1089.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1156 = (dot(vec3(_712, _713, _714), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1166 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3947 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1168 + 1.0))) + _1173) * _1136;
        float _1183 = _1104 * 0.5;
        float _1184 = _1114 * 0.5;
        float _1185 = _1124 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_712, _713, _714), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3980 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1210 + 1.0))) + _1215) * _1137;
        float _1225 = _1105 * 0.5;
        float _1226 = _1115 * 0.5;
        float _1227 = _1125 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_712, _713, _714), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4013 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1252 + 1.0))) + _1257) * _1138;
        _1274 = _1105;
        _1276 = _1104;
        _1277 = _1103;
        _1278 = _1115;
        _1279 = _1114;
        _1280 = _1113;
        _1281 = _1125;
        _1282 = _1124;
        _1283 = _1123;
        _1284 = _1138;
        _1285 = _1137;
        _1286 = _1136;
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _1275;
        _1276 = _1275;
        _1277 = _1275;
        _1278 = _1275;
        _1279 = _1275;
        _1280 = _1275;
        _1281 = _1275;
        _1282 = _1275;
        _1283 = _1275;
        _1284 = _1275;
        _1285 = _1275;
        _1286 = _1275;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1317 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1321 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1325 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1348 = _937 + _712;
        float _1349 = _941 + _713;
        float _1350 = _945 + _714;
        float _1360 = fma(_1350, cbModelParam._m0[30u].z, fma(_1349, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1348)) - _1317;
        float _1361 = fma(_1350, cbModelParam._m0[31u].z, fma(_1349, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1348)) - _1321;
        float _1362 = fma(_1350, cbModelParam._m0[32u].z, fma(_1349, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1348)) - _1325;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1317 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1321 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[35u].z) + ((((((_1325 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1416 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1383.x + (-0.5));
        float _1418 = _1416 * (_1383.y + (-0.5));
        float _1419 = _1416 * (_1383.z + (-0.5));
        float _1426 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1390.x + (-0.5));
        float _1428 = _1426 * (_1390.y + (-0.5));
        float _1429 = _1426 * (_1390.z + (-0.5));
        float _1436 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1397.x + (-0.5));
        float _1438 = _1436 * (_1397.y + (-0.5));
        float _1439 = _1436 * (_1397.z + (-0.5));
        float _1446 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1404.x + (-0.5));
        float _1448 = _1446 * (_1404.y + (-0.5));
        float _1449 = _1446 * (_1404.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_712, _713, _714), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4076 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1480 + 1.0))) + _1485) * _1450;
        float _1495 = _1418 * 0.5;
        float _1496 = _1428 * 0.5;
        float _1497 = _1438 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_712, _713, _714), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4109 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1522 + 1.0))) + _1527) * _1451;
        float _1537 = _1419 * 0.5;
        float _1538 = _1429 * 0.5;
        float _1539 = _1439 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_712, _713, _714), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4142 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1564 + 1.0))) + _1569) * _1452;
        _1586 = _1419;
        _1587 = _1418;
        _1588 = _1417;
        _1589 = _1429;
        _1590 = _1428;
        _1591 = _1427;
        _1592 = _1439;
        _1593 = _1438;
        _1594 = _1437;
        _1595 = _1452;
        _1596 = _1451;
        _1597 = _1450;
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1275;
        _1587 = _1275;
        _1588 = _1275;
        _1589 = _1275;
        _1590 = _1275;
        _1591 = _1275;
        _1592 = _1275;
        _1593 = _1275;
        _1594 = _1275;
        _1595 = _1275;
        _1596 = _1275;
        _1597 = _1275;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1633 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1610));
    float _1654 = _884 * 0.5;
    float _1655 = _885 * 0.5;
    float _1656 = _886 * 0.5;
    float _1657 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1660 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1663 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1697;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1670 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1274, _1278, _1281, _1284));
        float _1674 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1678 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1685 = dot(vec4(cbModelParam._m0[39u]), vec4(_1654, _1655, _1656, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1708;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1699 = dot(vec4(cbModelParam._m0[40u]), vec4(_1654, _1655, _1656, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1712 = (_1708 * cbModelParam._m0[1u].x) + (_1697 * (1.0 - cbModelParam._m0[1u].x));
    float _1722 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _715);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1722 : min(cbModelParam._m0[25u].z, _1722));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1770 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1774 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1778 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1781 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1784 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1787 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1815;
        if (_1781 > 0.0)
        {
            _1815 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1815 = frontier_phi_17_15_ladder;
        }
        float _2038;
        if (_1784 > 0.0)
        {
            _2038 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2038 = frontier_phi_26_22_ladder;
        }
        float _2284;
        if (_1787 > 0.0)
        {
            _2284 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2284 = frontier_phi_38_33_ladder;
        }
        float _2286 = isnan(_2038) ? _1815 : (isnan(_1815) ? _2038 : min(_1815, _2038));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1781) + _1770;
        float _2292 = (_2287 * _1784) + _1774;
        float _2293 = (_2287 * _1787) + _1778;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1723);
            frontier_phi_16_38_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1803 = frontier_phi_16_38_ladder_2;
        _1805 = frontier_phi_16_38_ladder_1;
        _1807 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1723);
        _1803 = _1791.x * cbModelParam._m0[1u].y;
        _1805 = _1791.y * cbModelParam._m0[1u].y;
        _1807 = _1791.z * cbModelParam._m0[1u].y;
    }
    float _1811 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _715);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1811 : min(cbModelParam._m0[25u].w, _1811));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1865 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1869 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1873 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1876 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1879 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1882 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _2043;
        if (_1876 > 0.0)
        {
            _2043 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2043 = frontier_phi_28_24_ladder;
        }
        float _2311;
        if (_1879 > 0.0)
        {
            _2311 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2311 = frontier_phi_40_35_ladder;
        }
        float _2516;
        if (_1882 > 0.0)
        {
            _2516 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2516 = frontier_phi_49_46_ladder;
        }
        float _2518 = isnan(_2311) ? _2043 : (isnan(_2043) ? _2311 : min(_2043, _2311));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _1876) + _1865;
        float _2524 = (_2519 * _1879) + _1869;
        float _2525 = (_2519 * _1882) + _1873;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2526;
        float _2529 = _2526 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2525 > _2529) || ((_2525 < _2527) || ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 < _2527) || (_2523 > _2529))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2525, cbModelParam._m0[17u].z, fma(_2524, cbModelParam._m0[17u].y, _2523 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2525, cbModelParam._m0[18u].z, fma(_2524, cbModelParam._m0[18u].y, _2523 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2525, cbModelParam._m0[19u].z, fma(_2524, cbModelParam._m0[19u].y, _2523 * cbModelParam._m0[19u].x))), _1812);
            frontier_phi_25_49_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1901 = frontier_phi_25_49_ladder_2;
        _1903 = frontier_phi_25_49_ladder_1;
        _1905 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1812);
        _1901 = _1885.x * cbModelParam._m0[1u].z;
        _1903 = _1885.y * cbModelParam._m0[1u].z;
        _1905 = _1885.z * cbModelParam._m0[1u].z;
    }
    float _1917 = ((((1.0 - _905) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_905 * _892)) * _876;
    float _1918 = _1917 * ((cbModelParam._m0[1u].w * (_1901 - _1803)) + _1803);
    float _1919 = _1917 * ((cbModelParam._m0[1u].w * (_1903 - _1805)) + _1805);
    float _1920 = _1917 * ((cbModelParam._m0[1u].w * (_1905 - _1807)) + _1807);
    float _1923 = fma(_1920, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1918 * cbSceneParam._m0[89u].x));
    float _1926 = fma(_1920, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1918 * cbSceneParam._m0[90u].x));
    float _1929 = fma(_1920, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1918 * cbSceneParam._m0[91u].x));
    vec4 _1937 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_811, _812));
    float _1939 = _1937.w;
    float _1951 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1939);
    float _1952 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1939);
    float _1953 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1939);
    uvec4 _1957 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1959 = _1957.x * 14u;
    uint _1960 = _1959 + 13u;
    float _1967 = _876 + (-1.0);
    float _1972 = (cbLight._m0[_1960].x * _1967) + 1.0;
    float _1973 = (cbLight._m0[_1960].y * _1967) + 1.0;
    float _1974 = (cbLight._m0[_1960].z * _1967) + 1.0;
    float _1975 = (cbLight._m0[_1960].w * _1967) + 1.0;
    uint _1976 = _1959 + 5u;
    float _1982 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _1986 = _1959 + 4u;
    float _1996 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _2000 = _1959 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_712, _713, _714));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_712, _713, _714));
    float _4278 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4289 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1976].x * _1982) * _2021) + (((cbLight._m0[_1986].x * _1951) * _1996) * _2019);
    float _2029 = ((_1982 * cbLight._m0[_1976].y) * _2021) + (((cbLight._m0[_1986].y * _1952) * _1996) * _2019);
    float _2030 = ((_1982 * cbLight._m0[_1976].z) * _2021) + (((cbLight._m0[_1986].z * _1953) * _1996) * _2019);
    uvec4 _2035 = floatBitsToUint(cbLight._m0[_1959 + 12u]);
    bool _2037 = _2035.x == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2037)
    {
        _2048 = _2028;
        _2050 = _2029;
        _2052 = _2030;
    }
    else
    {
        uint _2056 = _1959 + 6u;
        float _2072 = (dot(vec3(cbLight._m0[_1959 + 2u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4300 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2075 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2048 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _2028;
        _2050 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _2029;
        _2052 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _2030;
    }
    bool _2055 = _2035.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2055)
    {
        _2093 = _2048;
        _2095 = _2050;
        _2097 = _2052;
    }
    else
    {
        uint _2255 = _1959 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1959 + 3u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4316 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2274 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2093 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2048;
        _2095 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2050;
        _2097 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2052;
    }
    uint _2100 = _1959 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _715) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1959].x + _790;
    float _2116 = cbLight._m0[_1959].y + _791;
    float _2117 = cbLight._m0[_1959].z + _792;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1959].xyz));
    float _4332 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2129 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2130 = dot(vec3(_712, _713, _714), vec3(_2122, _2123, _2124));
    float _4354 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2122, _2123, _2124));
    float _4365 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2154 = 1.0 - _2114;
    float _2165 = (0.5 / (((_2129 * ((_2128 * _2154) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2154) + _2114) * _2128))) * _2128;
    float _4376 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2181 = _1959 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _715) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_2000].x + _790;
    float _2195 = cbLight._m0[_2000].y + _791;
    float _2196 = cbLight._m0[_2000].z + _792;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2000].xyz));
    float _4387 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2208 = dot(vec3(_712, _713, _714), vec3(_2201, _2202, _2203));
    float _4398 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2201, _2202, _2203));
    float _4409 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2193;
    float _2240 = (0.5 / (((_2129 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2230) + _2193) * _2207))) * _2207;
    float _4420 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2252 = (((_2229 * cbLight._m0[_2181].x) * _2242) * _1982) + ((((cbLight._m0[_2100].x * _1951) * _2153) * _2167) * _1996);
    float _2253 = (((_2229 * cbLight._m0[_2181].y) * _2242) * _1982) + ((((cbLight._m0[_2100].y * _1952) * _2153) * _2167) * _1996);
    float _2254 = (((_2229 * cbLight._m0[_2181].z) * _2242) * _1982) + ((((cbLight._m0[_2100].z * _1953) * _2153) * _2167) * _1996);
    float _2316;
    float _2318;
    float _2320;
    if (_2037)
    {
        _2316 = _2252;
        _2318 = _2253;
        _2320 = _2254;
    }
    else
    {
        uint _2322 = _1959 + 2u;
        uint _2326 = _1959 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _715) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _790;
        float _2343 = cbLight._m0[_2322].y + _791;
        float _2344 = cbLight._m0[_2322].z + _792;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2322].xyz));
        float _4431 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2356 = dot(vec3(_712, _713, _714), vec3(_2349, _2350, _2351));
        float _4442 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4453 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2377 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2378 = 1.0 - _2341;
        float _2388 = (0.5 / (((_2129 * ((_2355 * _2378) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2378) + _2341) * _2355))) * _2355;
        float _4464 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2316 = (((_2377 * cbLight._m0[_2326].x) * _2390) * _2391) + _2252;
        _2318 = (((_2377 * cbLight._m0[_2326].y) * _2390) * _2391) + _2253;
        _2320 = (((_2377 * cbLight._m0[_2326].z) * _2390) * _2391) + _2254;
    }
    float _2426;
    float _2428;
    float _2430;
    if (_2055)
    {
        _2426 = _2316;
        _2428 = _2318;
        _2430 = _2320;
    }
    else
    {
        uint _2437 = _1959 + 3u;
        uint _2441 = _1959 + 11u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _715) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _790;
        float _2458 = cbLight._m0[_2437].y + _791;
        float _2459 = cbLight._m0[_2437].z + _792;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2437].xyz));
        float _4480 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2471 = dot(vec3(_712, _713, _714), vec3(_2464, _2465, _2466));
        float _4491 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4502 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2493 = 1.0 - _2456;
        float _2503 = (0.5 / (((_2129 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2493) + _2456) * _2470))) * _2470;
        float _4513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2426 = (((_2492 * cbLight._m0[_2441].x) * _2505) * _2506) + _2316;
        _2428 = (((_2492 * cbLight._m0[_2441].y) * _2505) * _2506) + _2318;
        _2430 = (((_2492 * cbLight._m0[_2441].z) * _2505) * _2506) + _2320;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1957.y == 0u)
    {
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2581;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2581;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2581;
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.x;
        uint _2608 = uint((float(_2596.y) * floor(float(uint(cbSceneParam._m0[85u].y * _812) / _2597))) + floor(float(uint(cbSceneParam._m0[85u].x * _811) / _2597)));
        float _2618 = (log2(_2584 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        uint _2622 = uint(isnan(14.0) ? _2619 : (isnan(_2619) ? 14.0 : min(_2619, 14.0)));
        uvec4 _2627 = texelFetch(g_lightClusterGridBuffer, int(((_2622 << 2u) + (_2608 << 6u)) >> 2u));
        uint _2628 = _2627.x;
        uint _2629 = _2596.z;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((((1u << ((_2629 >> 4u) & 15u)) + 4294967295u) & _2628) == 0u) || ((_2629 & 240u) == 0u))
        {
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
        }
        else
        {
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            uint _2887 = 0u;
            uint _2896;
            bool _2897;
            for (;;)
            {
                _2896 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                _2897 = _2896 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2897)
                {
                    frontier_phi_66_pred = _2881;
                    frontier_phi_66_pred_1 = _2886;
                    frontier_phi_66_pred_2 = _2885;
                    frontier_phi_66_pred_3 = _2884;
                    frontier_phi_66_pred_4 = _2883;
                    frontier_phi_66_pred_5 = _2882;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2896;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2887 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2582;
                        float _3093 = _3052.y - _2583;
                        float _3094 = _3052.z - _2584;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_832, _835, _838), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4539 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2582;
                        float _3128 = (-0.0) - _2583;
                        float _3129 = (-0.0) - _2584;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _892;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_832, _835, _838), vec3(_3134, _3135, _3136));
                        float _4555 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3169 = dot(vec3(_832, _835, _838), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4566 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4577 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4588 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2956 = (_3123 * _3071.x) + _3029;
                        _2957 = (_3123 * _3071.y) + _3030;
                        _2958 = (_3123 * _3071.z) + _3031;
                        _2953 = (_3204 * _3088.x) + _3026;
                        _2954 = (_3204 * _3088.y) + _3027;
                        _2955 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                _2730 = frontier_phi_66_pred;
                _2740 = frontier_phi_66_pred_1;
                _2738 = frontier_phi_66_pred_2;
                _2736 = frontier_phi_66_pred_3;
                _2734 = frontier_phi_66_pred_4;
                _2732 = frontier_phi_66_pred_5;
                uint _2888 = _2887 + 1u;
                if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2881 = _2730;
                    _2882 = _2732;
                    _2883 = _2734;
                    _2884 = _2736;
                    _2885 = _2738;
                    _2886 = _2740;
                    _2887 = _2888;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
        }
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.z;
        uint _2746 = (_2744 >> 8u) & 15u;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((4294967295u << _2746) & _2628) == 0u)
        {
            _2849 = _2729;
            _2851 = _2731;
            _2853 = _2733;
            _2855 = _2735;
            _2857 = _2737;
            _2859 = _2739;
        }
        else
        {
            float _2874 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
            float _2875 = _2874 * _2582;
            float _2876 = _2874 * _2583;
            float _2877 = _2874 * _2584;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2746 < ((_2744 >> 12u) & 15u))
            {
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _3009 = _2729;
                float _3010 = _2731;
                float _3011 = _2733;
                float _3012 = _2735;
                float _3013 = _2737;
                float _3014 = _2739;
                uint _3015 = _2746;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3025)
                    {
                        frontier_phi_77_pred = _3014;
                        frontier_phi_77_pred_1 = _3013;
                        frontier_phi_77_pred_2 = _3012;
                        frontier_phi_77_pred_3 = _3011;
                        frontier_phi_77_pred_4 = _3010;
                        frontier_phi_77_pred_5 = _3009;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        uint _3237 = _3024;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3321;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3248 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3248 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3248 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3248 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_2584, _3355.z, fma(_2583, _3355.y, _3355.x * _2582)) + _3355.w;
                            _3368 = !((fma(_2584, _3336.z, fma(_2583, _3336.y, _3336.x * _2582)) + _3336.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3263.x - _2582;
                                float _3396 = _3263.y - _2583;
                                float _3397 = _3263.z - _2584;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3264 * _3264));
                                float _4599 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3413 = sqrt(_3398) * _3279.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_832, _835, _838))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_2584, _3306.z, fma(_2583, _3306.y, _3306.x * _2582)) + _3306.w) / _3367;
                                float _3427 = (fma(_2584, _3321.z, fma(_2583, _3321.y, _3321.x * _2582)) + _3321.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4615 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _892;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2875;
                                float _3457 = _3403 - _2876;
                                float _3458 = _3404 - _2877;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_832, _835, _838), vec3((-0.0) - _2875, (-0.0) - _2876, (-0.0) - _2877));
                                float _4626 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3470 = dot(vec3(_832, _835, _838), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4637 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_832, _835, _838), vec3(_3402, _3403, _3404))) + _3479;
                                float _4648 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4659 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3433 * _3279.y;
                                frontier_phi_83_pred_1 = _3433 * _3279.x;
                                frontier_phi_83_pred_2 = _3507 * _3291.z;
                                frontier_phi_83_pred_3 = _3507 * _3291.y;
                                frontier_phi_83_pred_4 = _3507 * _3291.x;
                                frontier_phi_83_pred_5 = _3433 * _3279.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_83_pred;
                            _3514 = frontier_phi_83_pred_1;
                            _3513 = frontier_phi_83_pred_2;
                            _3512 = frontier_phi_83_pred_3;
                            _3511 = frontier_phi_83_pred_4;
                            _3516 = frontier_phi_83_pred_5;
                            _3221 = _3514 + _3234;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3223;
                        frontier_phi_77_pred_1 = _3222;
                        frontier_phi_77_pred_2 = _3221;
                        frontier_phi_77_pred_3 = _3220;
                        frontier_phi_77_pred_4 = _3219;
                        frontier_phi_77_pred_5 = _3218;
                    }
                    _2860 = frontier_phi_77_pred;
                    _2858 = frontier_phi_77_pred_1;
                    _2856 = frontier_phi_77_pred_2;
                    _2854 = frontier_phi_77_pred_3;
                    _2852 = frontier_phi_77_pred_4;
                    _2850 = frontier_phi_77_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2850;
                        _3010 = _2852;
                        _3011 = _2854;
                        _3012 = _2856;
                        _3013 = _2858;
                        _3014 = _2860;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2854;
                frontier_phi_58_59_ladder_1 = _2860;
                frontier_phi_58_59_ladder_2 = _2858;
                frontier_phi_58_59_ladder_3 = _2856;
                frontier_phi_58_59_ladder_4 = _2852;
                frontier_phi_58_59_ladder_5 = _2850;
            }
            else
            {
                frontier_phi_58_59_ladder = _2733;
                frontier_phi_58_59_ladder_1 = _2739;
                frontier_phi_58_59_ladder_2 = _2737;
                frontier_phi_58_59_ladder_3 = _2735;
                frontier_phi_58_59_ladder_4 = _2731;
                frontier_phi_58_59_ladder_5 = _2729;
            }
            _2849 = frontier_phi_58_59_ladder_5;
            _2851 = frontier_phi_58_59_ladder_4;
            _2853 = frontier_phi_58_59_ladder;
            _2855 = frontier_phi_58_59_ladder_3;
            _2857 = frontier_phi_58_59_ladder_2;
            _2859 = frontier_phi_58_59_ladder_1;
        }
        float _2864 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2641 = (_2864 * _2855) + _2093;
        _2643 = (_2864 * _2857) + _2095;
        _2645 = (_2864 * _2859) + _2097;
        _2647 = ((_2849 * 0.039999999105930328369140625) * _2864) + _2426;
        _2649 = ((_2851 * 0.039999999105930328369140625) * _2864) + _2428;
        _2651 = ((_2853 * 0.039999999105930328369140625) * _2864) + _2430;
    }
    else
    {
        _2641 = _2093;
        _2643 = _2095;
        _2645 = _2097;
        _2647 = _2426;
        _2649 = _2428;
        _2651 = _2430;
    }
    float _4675 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4686 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4697 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2668 = ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2641 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _876))) + ((_2647 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2643 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _876))) + ((_2649 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    float _2670 = ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2645 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _876))) + ((_2651 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1712)) * cbPerFrame._m0[3u].x);
    uint _2671 = _271 + 6u;
    float _2679 = _811 / cbSceneParam._m0[86u].x;
    float _2680 = _812 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _2754 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _2755 = _2754 / _733;
        float _2766 = _2755 * _783;
        float _2767 = _784 * _2755;
        float _2768 = (-0.0) - _2767;
        float _2769 = _2755 * _785;
        float _2771 = (cbSceneParam._m0[77u].w * _2768) / _2754;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2767;
        float _2779 = sqrt(((_2766 * _2766) + (_2767 * _2767)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2754)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2768 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2910 = 1.0 / cbSceneParam._m0[80u].x;
            float _2911 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2912 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            _2966 = ((abs(_2779 / _2768) * cbSceneParam._m0[80u].y) * ((((_2921 - _2922) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))))) * _2910)) - ((exp2(_2789 * _2921) - exp2(_2789 * _2922)) * _2910))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2699);
        _2791 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2793 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2795 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2797 = _2977 * _2699;
    }
    else
    {
        _2791 = _2696;
        _2793 = _2697;
        _2795 = _2698;
        _2797 = _2699;
    }
    bool _3004;
    vec4 _2807;
    vec4 _2829;
    float _2831;
    float _2835;
    float _2836;
    float _2837;
    float _2838;
    bool _2848;
    for (;;)
    {
        _2807 = cbMatDynParam._m0[0u];
        float _2809 = roundEven(_2807.y);
        bool _2810 = _2809 == 3.0;
        float _2811 = log2(_2797);
        float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * _2668;
        float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * _2669;
        float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * _2670;
        float _2827 = _799 + (-0.5);
        _2829 = cbMtdParam._m0[1u];
        _2831 = _2829.y * _2827;
        float _2834 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2835 = _2834 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
        _2836 = _2834 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
        _2837 = _2834 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
        _2838 = _2827 * 0.999000012874603271484375;
        _2848 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2848)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _2838) < 0.5)
            {
                _3004 = true;
                break;
            }
        }
        uint _2945 = _851 + uint(_2807.w);
        if ((cbInstanceData._m0[_2945].w < 1.0) && ((cbInstanceData._m0[_2945].w + _2838) < 0.5))
        {
            _3004 = true;
            break;
        }
        if ((_2831 + 1.0) < _2829.x)
        {
            _3004 = true;
            break;
        }
        _3004 = false;
        break;
    }
    float _3209;
    if (_3004)
    {
        discard_state = true;
        _3209 = 0.0;
    }
    else
    {
        _3209 = cbInstanceData._m0[_2671].w;
    }
    SV_Target.x = _2835;
    SV_Target.y = _2836;
    SV_Target.z = _2837;
    SV_Target.w = _3209;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2671].w;
    discard_exit();
}


