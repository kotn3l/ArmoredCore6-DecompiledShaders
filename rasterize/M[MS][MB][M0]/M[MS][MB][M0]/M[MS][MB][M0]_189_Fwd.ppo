#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1312;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _367 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _367) * cbMtdParam._m0[24u].x) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3617 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _392 = (_385 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _393 = (_385 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _394 = (_385 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].x) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3628 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _485 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _513 = ((_485.x - _504) * _385) + _504;
    float _514 = ((_485.y - _505) * _385) + _505;
    float _515 = ((_485.z - _506) * _385) + _506;
    vec4 _527 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _540 = ((_527.z - _515) * _458) + _515;
    float _543 = ((((_527.x - _513) * _458) + _513) * 2.0) + (-1.0);
    float _545 = ((((_527.y - _514) * _458) + _514) * 2.0) + (-1.0);
    float _546 = dot(vec2(_543, _545), vec2(_543, _545));
    float _3639 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _599 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _602 = ((isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : min(_599, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _611 = (_602 - ((((((_592 - _593) * cbMtdParam._m0[24u].z) + _593) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _602))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3660 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _619 = (_612 * (cbMtdParam._m0[17u].x - _465)) + _465;
    float _620 = (_612 * (cbMtdParam._m0[17u].y - _466)) + _466;
    float _621 = (_612 * (cbMtdParam._m0[17u].z - _467)) + _467;
    vec4 _633 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _663 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_635 - _636) * cbMtdParam._m0[24u].w) + _636) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3671 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _672 = ((((cbMtdParam._m0[10u].x - _619) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _664) + _619;
    float _673 = ((((cbMtdParam._m0[10u].y - _620) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _664) + _620;
    float _674 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _621)) * _664) + _621;
    float _678 = (cbMtdParam._m0[19u].w * (_565.z - _540)) + _540;
    vec4 _692 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _699 = (_692.x * 2.0) + (-1.0);
    float _700 = (_692.y * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _3682 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _709 = (_612 * (_692.z - _678)) + _678;
    float _712 = ((cbMtdParam._m0[23u].y - _709) * _664) + _709;
    vec4 _731 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _737 = (_731.x * 2.0) + (-1.0);
    float _738 = (_731.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3693 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _747 = (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _543;
    float _748 = (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _545;
    float _760 = (((_699 - _747) + (cbMtdParam._m0[21u].x * _747)) * _612) + _747;
    float _761 = (((_700 - _748) + (cbMtdParam._m0[21u].x * _748)) * _612) + _748;
    float _762 = (_612 * (sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) - _551)) + _551;
    float _773 = (((_737 - _760) + (_760 * cbMtdParam._m0[22u].z)) * _664) + _760;
    float _774 = (((_738 - _761) + (_761 * cbMtdParam._m0[22u].z)) * _664) + _761;
    float _775 = ((sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) - _762) * _664) + _762;
    float _777 = cbMtdParam._m0[22u].x + _565.w;
    float _780 = fma(_775, _236 * NORMAL.x, fma(_774, _243 * TANGENT.x, (_229 * _221) * _773));
    float _783 = fma(_775, _236 * NORMAL.y, fma(_774, _243 * TANGENT.y, (_229 * _222) * _773));
    float _786 = fma(_775, _236 * NORMAL.z, fma(_774, _243 * TANGENT.z, (_229 * _223) * _773));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3704 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _794 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _3726 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3737 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3748 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _897 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _900 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _903 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _917 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_917].z;
    float _3759 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _941 = ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * TEXCOORD_5.w) * _937.x;
    float _942 = dot(vec3(_791, _792, _793), vec3(_870, _871, _872));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _791) - _870;
    float _950 = (_945 * _792) - _871;
    float _951 = (_945 * _793) - _872;
    float _955 = abs(dot(vec3(_870, _871, _872), vec3(_791, _792, _793)));
    float _3792 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_794);
    float _970 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1311;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1036 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1040 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1044 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1069 = _1002 + _791;
        float _1070 = _1006 + _792;
        float _1071 = _1010 + _793;
        float _1081 = fma(_1071, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069)) - _1036;
        float _1082 = fma(_1071, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069)) - _1040;
        float _1083 = fma(_1071, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069)) - _1044;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1036 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1040 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[34u].z) + ((((((_1044 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1139 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1105.x + (-0.5));
        float _1141 = _1139 * (_1105.y + (-0.5));
        float _1142 = _1139 * (_1105.z + (-0.5));
        float _1149 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1112.x + (-0.5));
        float _1151 = _1149 * (_1112.y + (-0.5));
        float _1152 = _1149 * (_1112.z + (-0.5));
        float _1159 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1119.x + (-0.5));
        float _1161 = _1159 * (_1119.y + (-0.5));
        float _1162 = _1159 * (_1119.z + (-0.5));
        float _1169 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1126.x + (-0.5));
        float _1171 = _1169 * (_1126.y + (-0.5));
        float _1172 = _1169 * (_1126.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1193 = (dot(vec3(_791, _792, _793), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1203 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3840 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1205 + 1.0))) + _1210) * _1173;
        float _1220 = _1141 * 0.5;
        float _1221 = _1151 * 0.5;
        float _1222 = _1161 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_791, _792, _793), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3873 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1247 + 1.0))) + _1252) * _1174;
        float _1262 = _1142 * 0.5;
        float _1263 = _1152 * 0.5;
        float _1264 = _1162 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_791, _792, _793), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3906 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1289 + 1.0))) + _1294) * _1175;
        _1311 = _1142;
        _1313 = _1141;
        _1314 = _1140;
        _1315 = _1152;
        _1316 = _1151;
        _1317 = _1150;
        _1318 = _1162;
        _1319 = _1161;
        _1320 = _1160;
        _1321 = _1175;
        _1322 = _1174;
        _1323 = _1173;
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1312;
        _1313 = _1312;
        _1314 = _1312;
        _1315 = _1312;
        _1316 = _1312;
        _1317 = _1312;
        _1318 = _1312;
        _1319 = _1312;
        _1320 = _1312;
        _1321 = _1312;
        _1322 = _1312;
        _1323 = _1312;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1350 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1354 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1358 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1381 = _1002 + _791;
        float _1382 = _1006 + _792;
        float _1383 = _1010 + _793;
        float _1393 = fma(_1383, cbModelParam._m0[30u].z, fma(_1382, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381)) - _1350;
        float _1394 = fma(_1383, cbModelParam._m0[31u].z, fma(_1382, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381)) - _1354;
        float _1395 = fma(_1383, cbModelParam._m0[32u].z, fma(_1382, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381)) - _1358;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1350 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1354 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[35u].z) + ((((((_1358 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1449 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1416.x + (-0.5));
        float _1451 = _1449 * (_1416.y + (-0.5));
        float _1452 = _1449 * (_1416.z + (-0.5));
        float _1459 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1423.x + (-0.5));
        float _1461 = _1459 * (_1423.y + (-0.5));
        float _1462 = _1459 * (_1423.z + (-0.5));
        float _1469 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1430.x + (-0.5));
        float _1471 = _1469 * (_1430.y + (-0.5));
        float _1472 = _1469 * (_1430.z + (-0.5));
        float _1479 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1437.x + (-0.5));
        float _1481 = _1479 * (_1437.y + (-0.5));
        float _1482 = _1479 * (_1437.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_791, _792, _793), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _3969 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1513 + 1.0))) + _1518) * _1483;
        float _1528 = _1451 * 0.5;
        float _1529 = _1461 * 0.5;
        float _1530 = _1471 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_791, _792, _793), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4002 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1555 + 1.0))) + _1560) * _1484;
        float _1570 = _1452 * 0.5;
        float _1571 = _1462 * 0.5;
        float _1572 = _1472 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_791, _792, _793), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4035 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1597 + 1.0))) + _1602) * _1485;
        _1619 = _1452;
        _1620 = _1451;
        _1621 = _1450;
        _1622 = _1462;
        _1623 = _1461;
        _1624 = _1460;
        _1625 = _1472;
        _1626 = _1471;
        _1627 = _1470;
        _1628 = _1485;
        _1629 = _1484;
        _1630 = _1483;
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1312;
        _1620 = _1312;
        _1621 = _1312;
        _1622 = _1312;
        _1623 = _1312;
        _1624 = _1312;
        _1625 = _1312;
        _1626 = _1312;
        _1627 = _1312;
        _1628 = _1312;
        _1629 = _1312;
        _1630 = _1312;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1324)) + _1324;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1325)) + _1325;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1326)) + _1326;
    float _1666 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1643));
    float _1687 = _949 * 0.5;
    float _1688 = _950 * 0.5;
    float _1689 = _951 * 0.5;
    float _1690 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1693 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1696 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1730;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1703 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1311, _1315, _1318, _1321));
        float _1707 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1711 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1718 = dot(vec4(cbModelParam._m0[39u]), vec4(_1687, _1688, _1689, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1741;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1732 = dot(vec4(cbModelParam._m0[40u]), vec4(_1687, _1688, _1689, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1745 = (_1741 * cbModelParam._m0[1u].x) + (_1730 * (1.0 - cbModelParam._m0[1u].x));
    float _1755 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1755 : min(cbModelParam._m0[25u].z, _1755));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1804 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1808 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1812 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1815 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1818 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1821 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1849;
        if (_1815 > 0.0)
        {
            _1849 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1849 = frontier_phi_14_12_ladder;
        }
        float _2050;
        if (_1818 > 0.0)
        {
            _2050 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2050 = frontier_phi_23_19_ladder;
        }
        float _2293;
        if (_1821 > 0.0)
        {
            _2293 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2293 = frontier_phi_35_30_ladder;
        }
        float _2295 = isnan(_2050) ? _1849 : (isnan(_1849) ? _2050 : min(_1849, _2050));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1815) + _1804;
        float _2301 = (_2296 * _1818) + _1808;
        float _2302 = (_2296 * _1821) + _1812;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1756);
            frontier_phi_13_35_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1837 = frontier_phi_13_35_ladder_2;
        _1839 = frontier_phi_13_35_ladder_1;
        _1841 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1756);
        _1837 = _1825.x * cbModelParam._m0[1u].y;
        _1839 = _1825.y * cbModelParam._m0[1u].y;
        _1841 = _1825.z * cbModelParam._m0[1u].y;
    }
    float _1845 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1845 : min(cbModelParam._m0[25u].w, _1845));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1900 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1904 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1908 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1911 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1914 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1917 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2055;
        if (_1911 > 0.0)
        {
            _2055 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2055 = frontier_phi_25_21_ladder;
        }
        float _2320;
        if (_1914 > 0.0)
        {
            _2320 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2320 = frontier_phi_37_32_ladder;
        }
        float _2525;
        if (_1917 > 0.0)
        {
            _2525 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2525 = frontier_phi_46_43_ladder;
        }
        float _2527 = isnan(_2320) ? _2055 : (isnan(_2055) ? _2320 : min(_2055, _2320));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1911) + _1900;
        float _2533 = (_2528 * _1914) + _1904;
        float _2534 = (_2528 * _1917) + _1908;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1846);
            frontier_phi_22_46_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1936 = frontier_phi_22_46_ladder_2;
        _1938 = frontier_phi_22_46_ladder_1;
        _1940 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1846);
        _1936 = _1920.x * cbModelParam._m0[1u].z;
        _1938 = _1920.y * cbModelParam._m0[1u].z;
        _1940 = _1920.z * cbModelParam._m0[1u].z;
    }
    float _1952 = ((((1.0 - _970) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_970 * _957)) * _941;
    float _1953 = _1952 * ((cbModelParam._m0[1u].w * (_1936 - _1837)) + _1837);
    float _1954 = _1952 * ((cbModelParam._m0[1u].w * (_1938 - _1839)) + _1839);
    float _1955 = _1952 * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, _1953 * cbSceneParam._m0[91u].x));
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _941 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2009 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2013 = _1976 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_791, _792, _793));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_791, _792, _793));
    float _4171 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4182 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1993].x * _1999) * _2034) + ((cbLight._m0[_2003].x * _2009) * _2032);
    float _2042 = ((_1999 * cbLight._m0[_1993].y) * _2034) + ((_2009 * cbLight._m0[_2003].y) * _2032);
    float _2043 = ((_1999 * cbLight._m0[_1993].z) * _2034) + ((_2009 * cbLight._m0[_2003].z) * _2032);
    uvec4 _2047 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2049 = _2047.x == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2049)
    {
        _2060 = _2041;
        _2062 = _2042;
        _2064 = _2043;
    }
    else
    {
        uint _2068 = _1976 + 6u;
        float _2084 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _4193 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2087 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2060 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _2041;
        _2062 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _2042;
        _2064 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _2043;
    }
    bool _2067 = _2047.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2067)
    {
        _2105 = _2060;
        _2107 = _2062;
        _2109 = _2064;
    }
    else
    {
        uint _2264 = _1976 + 7u;
        float _2280 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4209 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2283 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2105 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2060;
        _2107 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2062;
        _2109 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2064;
    }
    uint _2112 = _1976 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _794) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1976].x + _870;
    float _2128 = cbLight._m0[_1976].y + _871;
    float _2129 = cbLight._m0[_1976].z + _872;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_1976].xyz));
    float _4225 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2141 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2142 = dot(vec3(_791, _792, _793), vec3(_2134, _2135, _2136));
    float _4247 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2134, _2135, _2136));
    float _4258 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2126;
    float _2177 = (0.5 / (((_2141 * ((_2140 * _2166) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2166) + _2126) * _2140))) * _2140;
    float _4269 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2190 = _1976 + 9u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _794) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_2013].x + _870;
    float _2204 = cbLight._m0[_2013].y + _871;
    float _2205 = cbLight._m0[_2013].z + _872;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2013].xyz));
    float _4280 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2217 = dot(vec3(_791, _792, _793), vec3(_2210, _2211, _2212));
    float _4291 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2210, _2211, _2212));
    float _4302 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2202 * _2202;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2239 = 1.0 - _2202;
    float _2249 = (0.5 / (((_2141 * ((_2216 * _2239) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2239) + _2202) * _2216))) * _2216;
    float _4313 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    float _2261 = (((_2238 * cbLight._m0[_2190].x) * _2251) * _1999) + (((_2165 * cbLight._m0[_2112].x) * _2179) * _2009);
    float _2262 = (((_2238 * cbLight._m0[_2190].y) * _2251) * _1999) + (((_2165 * cbLight._m0[_2112].y) * _2179) * _2009);
    float _2263 = (((_2238 * cbLight._m0[_2190].z) * _2251) * _1999) + (((_2165 * cbLight._m0[_2112].z) * _2179) * _2009);
    float _2325;
    float _2327;
    float _2329;
    if (_2049)
    {
        _2325 = _2261;
        _2327 = _2262;
        _2329 = _2263;
    }
    else
    {
        uint _2331 = _1976 + 2u;
        uint _2335 = _1976 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _794) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _870;
        float _2352 = cbLight._m0[_2331].y + _871;
        float _2353 = cbLight._m0[_2331].z + _872;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2331].xyz));
        float _4324 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2365 = dot(vec3(_791, _792, _793), vec3(_2358, _2359, _2360));
        float _4335 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4346 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2141 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2387) + _2350) * _2364))) * _2364;
        float _4357 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2325 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2261;
        _2327 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2262;
        _2329 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2263;
    }
    float _2435;
    float _2437;
    float _2439;
    if (_2067)
    {
        _2435 = _2325;
        _2437 = _2327;
        _2439 = _2329;
    }
    else
    {
        uint _2446 = _1976 + 3u;
        uint _2450 = _1976 + 11u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _794) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _870;
        float _2467 = cbLight._m0[_2446].y + _871;
        float _2468 = cbLight._m0[_2446].z + _872;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2446].xyz));
        float _4373 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2480 = dot(vec3(_791, _792, _793), vec3(_2473, _2474, _2475));
        float _4384 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4395 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2502 = 1.0 - _2465;
        float _2512 = (0.5 / (((_2141 * ((_2479 * _2502) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2502) + _2465) * _2479))) * _2479;
        float _4406 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2435 = (((_2501 * cbLight._m0[_2450].x) * _2514) * _2515) + _2325;
        _2437 = (((_2501 * cbLight._m0[_2450].y) * _2514) * _2515) + _2327;
        _2439 = (((_2501 * cbLight._m0[_2450].z) * _2514) * _2515) + _2329;
    }
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_1974.y == 0u)
    {
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2590;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2590;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2590;
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.x;
        uint _2617 = uint((float(_2605.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2606))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2606)));
        float _2627 = (log2(_2593 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2628 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        uint _2631 = uint(isnan(14.0) ? _2628 : (isnan(_2628) ? 14.0 : min(_2628, 14.0)));
        uvec4 _2636 = texelFetch(g_lightClusterGridBuffer, int(((_2631 << 2u) + (_2617 << 6u)) >> 2u));
        uint _2637 = _2636.x;
        uint _2638 = _2605.z;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((((1u << ((_2638 >> 4u) & 15u)) + 4294967295u) & _2637) == 0u) || ((_2638 & 240u) == 0u))
        {
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
        }
        else
        {
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2899)
                {
                    frontier_phi_61_pred = _2883;
                    frontier_phi_61_pred_1 = _2888;
                    frontier_phi_61_pred_2 = _2887;
                    frontier_phi_61_pred_3 = _2886;
                    frontier_phi_61_pred_4 = _2885;
                    frontier_phi_61_pred_5 = _2884;
                }
                else
                {
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    uint _3013;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2898;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    for (;;)
                    {
                        uint _3017 = uint(findLSB(_3013)) + (_2889 << 5u);
                        uint _3014 = (_3013 + 4294967295u) & _3013;
                        uint _3019 = _3017 * 48u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3039 = (_3017 * 48u) + 4u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3058 = (_3017 * 48u) + 8u;
                        vec3 _3069 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x));
                        float _3073 = _3033.x - _2591;
                        float _3074 = _3033.y - _2592;
                        float _3075 = _3033.z - _2593;
                        float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                        float _3079 = inversesqrt(_3076);
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3083 = dot(vec3(_897, _900, _903), vec3(_3080, _3081, _3082));
                        float _3088 = 1.0 - (_3076 * _3033.w);
                        float _4432 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3090 = sqrt(_3076) * _3052.w;
                        float _3093 = 1.39999997615814208984375 / (_3090 + 1.39999997615814208984375);
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3083) + _3094;
                        float _3100 = _3090 * _3090;
                        float _3104 = ((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3089) / ((_3100 * 0.699999988079071044921875) + 1.0);
                        float _3108 = (-0.0) - _2591;
                        float _3109 = (-0.0) - _2592;
                        float _3110 = (-0.0) - _2593;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3125 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                        float _3126 = 1.0 - _957;
                        float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                        float _3134 = _3133 * _3133;
                        float _3135 = _3134 * _3134;
                        float _3136 = _3115 + _3080;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3146 = dot(vec3(_897, _900, _903), vec3(_3115, _3116, _3117));
                        float _4448 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3150 = dot(vec3(_897, _900, _903), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                        float _4459 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                        float _3158 = _3093 * _3134;
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3083) + _3159;
                        float _4470 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3164 = 1.0 - _3134;
                        float _3174 = (0.5 / (((_3163 * ((_3149 * _3164) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3163 * _3164) + _3134) * _3149))) * _3163;
                        float _4481 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3185 = (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3157 * _3157) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125))) * _3089;
                        _2942 = (_3104 * _3052.x) + _3010;
                        _2943 = (_3104 * _3052.y) + _3011;
                        _2944 = (_3104 * _3052.z) + _3012;
                        _2939 = (_3185 * _3069.x) + _3007;
                        _2940 = (_3185 * _3069.y) + _3008;
                        _2941 = (_3185 * _3069.z) + _3009;
                        if (_3014 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _3014;
                        }
                    }
                    frontier_phi_61_pred = _2939;
                    frontier_phi_61_pred_1 = _2944;
                    frontier_phi_61_pred_2 = _2943;
                    frontier_phi_61_pred_3 = _2942;
                    frontier_phi_61_pred_4 = _2941;
                    frontier_phi_61_pred_5 = _2940;
                }
                _2739 = frontier_phi_61_pred;
                _2749 = frontier_phi_61_pred_1;
                _2747 = frontier_phi_61_pred_2;
                _2745 = frontier_phi_61_pred_3;
                _2743 = frontier_phi_61_pred_4;
                _2741 = frontier_phi_61_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2739;
                    _2884 = _2741;
                    _2885 = _2743;
                    _2886 = _2745;
                    _2887 = _2747;
                    _2888 = _2749;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
        }
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.z;
        uint _2755 = (_2753 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2755) & _2637) == 0u)
        {
            _2851 = _2738;
            _2853 = _2740;
            _2855 = _2742;
            _2857 = _2744;
            _2859 = _2746;
            _2861 = _2748;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
            float _2877 = _2876 * _2591;
            float _2878 = _2876 * _2592;
            float _2879 = _2876 * _2593;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2755 < ((_2753 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2990 = _2738;
                float _2991 = _2740;
                float _2992 = _2742;
                float _2993 = _2744;
                float _2994 = _2746;
                float _2995 = _2748;
                uint _2996 = _2755;
                uint _3005;
                bool _3006;
                for (;;)
                {
                    _3005 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                    _3006 = _3005 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3006)
                    {
                        frontier_phi_67_pred = _2993;
                        frontier_phi_67_pred_1 = _2994;
                        frontier_phi_67_pred_2 = _2995;
                        frontier_phi_67_pred_3 = _2992;
                        frontier_phi_67_pred_4 = _2991;
                        frontier_phi_67_pred_5 = _2990;
                    }
                    else
                    {
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        uint _3209 = _3005;
                        uint _3210;
                        vec4 _3235;
                        float _3236;
                        vec4 _3251;
                        vec3 _3263;
                        vec4 _3278;
                        vec4 _3293;
                        float _3339;
                        bool _3340;
                        for (;;)
                        {
                            uint _3220 = ((_2996 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3209));
                            _3210 = (_3209 + 4294967295u) & _3209;
                            uint _3222 = _3220 * 40u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3236 = _3235.w;
                            uint _3238 = (_3220 * 40u) + 4u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3220 * 40u) + 8u;
                            _3263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x));
                            uint _3265 = (_3220 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3220 * 40u) + 20u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3220 * 40u) + 24u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3314 = (_3220 * 40u) + 28u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3339 = fma(_2593, _3327.z, fma(_2592, _3327.y, _3327.x * _2591)) + _3327.w;
                            _3340 = !((fma(_2593, _3308.z, fma(_2592, _3308.y, _3308.x * _2591)) + _3308.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3340)
                            {
                                float _3367 = _3235.x - _2591;
                                float _3368 = _3235.y - _2592;
                                float _3369 = _3235.z - _2593;
                                float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                                float _3373 = inversesqrt(_3370);
                                float _3374 = _3373 * _3367;
                                float _3375 = _3373 * _3368;
                                float _3376 = _3373 * _3369;
                                float _3380 = 1.0 - (_3370 / (_3236 * _3236));
                                float _4492 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3385 = sqrt(_3370) * _3251.w;
                                float _3387 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                                float _3388 = _3387 * _3387;
                                float _3391 = ((1.0 - _3388) * dot(vec3(_3374, _3375, _3376), vec3(_897, _900, _903))) + _3388;
                                float _3394 = _3385 * _3385;
                                float _3398 = (fma(_2593, _3278.z, fma(_2592, _3278.y, _3278.x * _2591)) + _3278.w) / _3339;
                                float _3399 = (fma(_2593, _3293.z, fma(_2592, _3293.y, _3293.x * _2591)) + _3293.w) / _3339;
                                float _3403 = 1.0 - dot(vec2(_3398, _3399), vec2(_3398, _3399));
                                float _4508 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3405 = _3404 * (((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3381) / ((_3394 * 0.699999988079071044921875) + 1.0));
                                float _3417 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                                float _3418 = 1.0 - _957;
                                float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                                float _3426 = _3425 * _3425;
                                float _3427 = _3426 * _3426;
                                float _3428 = _3374 - _2877;
                                float _3429 = _3375 - _2878;
                                float _3430 = _3376 - _2879;
                                float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                                float _3438 = dot(vec3(_897, _900, _903), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4519 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3442 = dot(vec3(_897, _900, _903), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                                float _4530 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3445 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                                float _3450 = _3387 * _3426;
                                float _3451 = _3450 * _3450;
                                float _3457 = ((1.0 - _3451) * dot(vec3(_897, _900, _903), vec3(_3374, _3375, _3376))) + _3451;
                                float _4541 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3459 = 1.0 - _3426;
                                float _3469 = (0.5 / (((_3458 * ((_3441 * _3459) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3426) * _3441))) * _3458;
                                float _4552 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3479 = (_3404 * _3381) * (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3449 * _3449) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3479 * _3263.x;
                                frontier_phi_73_pred_1 = _3479 * _3263.y;
                                frontier_phi_73_pred_2 = _3405 * _3251.z;
                                frontier_phi_73_pred_3 = _3405 * _3251.y;
                                frontier_phi_73_pred_4 = _3405 * _3251.x;
                                frontier_phi_73_pred_5 = _3479 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3483 = frontier_phi_73_pred;
                            _3484 = frontier_phi_73_pred_1;
                            _3488 = frontier_phi_73_pred_2;
                            _3487 = frontier_phi_73_pred_3;
                            _3486 = frontier_phi_73_pred_4;
                            _3485 = frontier_phi_73_pred_5;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            _3195 = _3488 + _3208;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3192 = _3485 + _3205;
                            if (_3210 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3210;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3193;
                        frontier_phi_67_pred_1 = _3194;
                        frontier_phi_67_pred_2 = _3195;
                        frontier_phi_67_pred_3 = _3192;
                        frontier_phi_67_pred_4 = _3191;
                        frontier_phi_67_pred_5 = _3190;
                    }
                    _2858 = frontier_phi_67_pred;
                    _2860 = frontier_phi_67_pred_1;
                    _2862 = frontier_phi_67_pred_2;
                    _2856 = frontier_phi_67_pred_3;
                    _2854 = frontier_phi_67_pred_4;
                    _2852 = frontier_phi_67_pred_5;
                    uint _2997 = _2996 + 1u;
                    if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2990 = _2852;
                        _2991 = _2854;
                        _2992 = _2856;
                        _2993 = _2858;
                        _2994 = _2860;
                        _2995 = _2862;
                        _2996 = _2997;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2860;
                frontier_phi_55_56_ladder_1 = _2862;
                frontier_phi_55_56_ladder_2 = _2858;
                frontier_phi_55_56_ladder_3 = _2856;
                frontier_phi_55_56_ladder_4 = _2854;
                frontier_phi_55_56_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_55_56_ladder = _2746;
                frontier_phi_55_56_ladder_1 = _2748;
                frontier_phi_55_56_ladder_2 = _2744;
                frontier_phi_55_56_ladder_3 = _2742;
                frontier_phi_55_56_ladder_4 = _2740;
                frontier_phi_55_56_ladder_5 = _2738;
            }
            _2851 = frontier_phi_55_56_ladder_5;
            _2853 = frontier_phi_55_56_ladder_4;
            _2855 = frontier_phi_55_56_ladder_3;
            _2857 = frontier_phi_55_56_ladder_2;
            _2859 = frontier_phi_55_56_ladder;
            _2861 = frontier_phi_55_56_ladder_1;
        }
        float _2866 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2650 = (_2866 * _2857) + _2105;
        _2652 = (_2866 * _2859) + _2107;
        _2654 = (_2866 * _2861) + _2109;
        _2656 = ((_2851 * 0.039999999105930328369140625) * _2866) + _2435;
        _2658 = ((_2853 * 0.039999999105930328369140625) * _2866) + _2437;
        _2660 = ((_2855 * 0.039999999105930328369140625) * _2866) + _2439;
    }
    else
    {
        _2650 = _2105;
        _2652 = _2107;
        _2654 = _2109;
        _2656 = _2435;
        _2658 = _2437;
        _2660 = _2439;
    }
    float _4568 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4579 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4590 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    uint _2680 = _249 + 6u;
    float _2688 = _878 / cbSceneParam._m0[86u].x;
    float _2689 = _879 / cbSceneParam._m0[86u].y;
    vec4 _2703 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2705 = _2703.x;
    float _2706 = _2703.y;
    float _2707 = _2703.z;
    float _2708 = _2703.w;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2763 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2764 = _2763 / _812;
        float _2775 = _2764 * _863;
        float _2776 = _864 * _2764;
        float _2777 = (-0.0) - _2776;
        float _2779 = _2764 * _865;
        float _2781 = (cbSceneParam._m0[77u].w * _2777) / _2763;
        float _2782 = _2781 + cbSceneParam._m0[79u].w;
        float _2783 = cbSceneParam._m0[79u].w - _2776;
        float _2789 = sqrt(((_2775 * _2775) + (_2776 * _2776)) + (_2779 * _2779));
        float _2792 = (1.0 - (cbSceneParam._m0[77u].w / _2763)) * _2789;
        float _2797 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2799 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2952;
        if (abs((_2777 - _2781) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2952 = ((((_2782 > 0.0) ? exp2(_2797 * _2782) : (2.0 - exp2(_2799 * _2782))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2792;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : max(_2782, _2783));
            float _2914 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : min(_2782, _2783));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2952 = ((abs(_2789 / _2777) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2797 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2797 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2799 * _2923) - exp2(_2799 * _2924)) * _2912))) + (_2792 * cbSceneParam._m0[80u].z);
        }
        vec4 _2954 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, 1.0), 0.0);
        float _2963 = exp2((_2952 * (-1.44269502162933349609375)) * (1.0 - _2954.w));
        float _2964 = log2(_2963);
        float _2980 = log2(_2708);
        _2801 = (exp2(_2980 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].x)) * _2954.x) / cbSceneParam._m0[78u].x)) + _2705;
        _2803 = (exp2(_2980 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].y)) * _2954.y) / cbSceneParam._m0[78u].y)) + _2706;
        _2805 = (exp2(_2980 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2964 * cbSceneParam._m0[78u].z)) * _2954.z) / cbSceneParam._m0[78u].z)) + _2707;
        _2807 = _2963 * _2708;
    }
    else
    {
        _2801 = _2705;
        _2803 = _2706;
        _2805 = _2707;
        _2807 = _2708;
    }
    float _2819 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2820 = _2819 == 3.0;
    float _2821 = log2(_2807);
    float _2828 = exp2(_2821 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2650 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _941))) + ((_2656 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1745)) * cbPerFrame._m0[3u].x));
    float _2829 = exp2(_2821 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2652 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _941))) + ((_2658 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1745)) * cbPerFrame._m0[3u].x));
    float _2830 = exp2(_2821 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2654 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _941))) + ((_2660 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1745)) * cbPerFrame._m0[3u].x));
    float _2839 = (_2819 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2839 * (_2820 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2801)));
    SV_Target.y = _2839 * (_2820 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.z = _2839 * (_2820 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.w = cbInstanceData._m0[_2680].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2680].w;
}


