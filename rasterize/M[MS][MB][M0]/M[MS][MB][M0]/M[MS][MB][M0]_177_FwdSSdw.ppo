#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1251;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _369 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _369) * cbMtdParam._m0[24u].x) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3582 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _394 = (_387 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _395 = (_387 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _396 = (_387 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].x) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3593 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _532 = ((_504.x - _523) * _387) + _523;
    float _533 = ((_504.y - _524) * _387) + _524;
    float _534 = ((_504.z - _525) * _387) + _525;
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _559 = ((_546.z - _534) * _460) + _534;
    float _562 = ((((_546.x - _532) * _460) + _532) * 2.0) + (-1.0);
    float _563 = ((((_546.y - _533) * _460) + _533) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3604 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))));
    vec4 _589 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _601 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_481.x * 2.0) + (-1.0)))) + (((_589.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_481.y * 2.0) + (-1.0)))) + (((_589.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _645 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_616 - _617) * cbMtdParam._m0[24u].w) + _617) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3615 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _654 = ((((cbMtdParam._m0[10u].x - _467) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _646) + _467;
    float _655 = ((((cbMtdParam._m0[10u].y - _468) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _646) + _468;
    float _656 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _469)) * _646) + _469;
    float _661 = (((_481.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _665 = ((_589.z - _661) * cbMtdParam._m0[19u].w) + _661;
    float _669 = ((cbMtdParam._m0[23u].y - _665) * _646) + _665;
    vec4 _688 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _694 = (_688.x * 2.0) + (-1.0);
    float _695 = (_688.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _3626 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _712 = (_646 * (((cbMtdParam._m0[22u].z * _601) - _601) + _694)) + _601;
    float _713 = (_646 * (((cbMtdParam._m0[22u].z * _602) - _602) + _695)) + _602;
    float _714 = (_646 * (sqrt(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) - _569)) + _569;
    float _716 = cbMtdParam._m0[22u].x + _589.w;
    float _719 = fma(_714, _238 * NORMAL.x, fma(_713, _245 * TANGENT.x, (_231 * _223) * _712));
    float _722 = fma(_714, _238 * NORMAL.y, fma(_713, _245 * TANGENT.y, (_231 * _224) * _712));
    float _725 = fma(_714, _238 * NORMAL.z, fma(_713, _245 * TANGENT.z, (_231 * _225) * _712));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    float _730 = _729 * _719;
    float _731 = _729 * _722;
    float _732 = _729 * _725;
    float _3637 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _733 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3659 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _3670 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3681 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _751 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _802 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _792);
    float _803 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _792);
    float _804 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _792);
    float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
    float _809 = _802 * _808;
    float _810 = _803 * _808;
    float _811 = _804 * _808;
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _836 = fma(_732, cbSceneParam._m0[5u].z, fma(_731, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _730));
    float _839 = fma(_732, cbSceneParam._m0[6u].z, fma(_731, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _730));
    float _842 = fma(_732, cbSceneParam._m0[7u].z, fma(_731, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _730));
    uint _856 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_856].z;
    float _3692 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _880 = ((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * TEXCOORD_5.w) * _876.x;
    float _881 = dot(vec3(_730, _731, _732), vec3(_809, _810, _811));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _730) - _809;
    float _889 = (_884 * _731) - _810;
    float _890 = (_884 * _732) - _811;
    float _894 = abs(dot(vec3(_809, _810, _811), vec3(_730, _731, _732)));
    float _3725 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_733);
    float _909 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1250;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _979 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _983 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1008 = _941 + _730;
        float _1009 = _945 + _731;
        float _1010 = _949 + _732;
        float _1020 = fma(_1010, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008)) - _975;
        float _1021 = fma(_1010, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008)) - _979;
        float _1022 = fma(_1010, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008)) - _983;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1078 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1044.x + (-0.5));
        float _1080 = _1078 * (_1044.y + (-0.5));
        float _1081 = _1078 * (_1044.z + (-0.5));
        float _1088 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1051.x + (-0.5));
        float _1090 = _1088 * (_1051.y + (-0.5));
        float _1091 = _1088 * (_1051.z + (-0.5));
        float _1098 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1058.x + (-0.5));
        float _1100 = _1098 * (_1058.y + (-0.5));
        float _1101 = _1098 * (_1058.z + (-0.5));
        float _1108 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1065.x + (-0.5));
        float _1110 = _1108 * (_1065.y + (-0.5));
        float _1111 = _1108 * (_1065.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1132 = (dot(vec3(_730, _731, _732), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1142 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3773 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1144 + 1.0))) + _1149) * _1112;
        float _1159 = _1080 * 0.5;
        float _1160 = _1090 * 0.5;
        float _1161 = _1100 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_730, _731, _732), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3806 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1186 + 1.0))) + _1191) * _1113;
        float _1201 = _1081 * 0.5;
        float _1202 = _1091 * 0.5;
        float _1203 = _1101 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_730, _731, _732), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3839 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1228 + 1.0))) + _1233) * _1114;
        _1250 = _1081;
        _1252 = _1080;
        _1253 = _1079;
        _1254 = _1091;
        _1255 = _1090;
        _1256 = _1089;
        _1257 = _1101;
        _1258 = _1100;
        _1259 = _1099;
        _1260 = _1114;
        _1261 = _1113;
        _1262 = _1112;
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _1251;
        _1252 = _1251;
        _1253 = _1251;
        _1254 = _1251;
        _1255 = _1251;
        _1256 = _1251;
        _1257 = _1251;
        _1258 = _1251;
        _1259 = _1251;
        _1260 = _1251;
        _1261 = _1251;
        _1262 = _1251;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1293 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1297 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1320 = _941 + _730;
        float _1321 = _945 + _731;
        float _1322 = _949 + _732;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_730, _731, _732), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3902 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_730, _731, _732), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3935 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_730, _731, _732), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _3968 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1251;
        _1559 = _1251;
        _1560 = _1251;
        _1561 = _1251;
        _1562 = _1251;
        _1563 = _1251;
        _1564 = _1251;
        _1565 = _1251;
        _1566 = _1251;
        _1567 = _1251;
        _1568 = _1251;
        _1569 = _1251;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1263)) + _1263;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1264)) + _1264;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1265)) + _1265;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _888 * 0.5;
    float _1627 = _889 * 0.5;
    float _1628 = _890 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1250, _1254, _1257, _1260));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1744 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1748 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1752 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1755 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1758 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1761 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1789;
        if (_1755 > 0.0)
        {
            _1789 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1789 = frontier_phi_14_12_ladder;
        }
        float _2012;
        if (_1758 > 0.0)
        {
            _2012 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2012 = frontier_phi_23_19_ladder;
        }
        float _2258;
        if (_1761 > 0.0)
        {
            _2258 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2258 = frontier_phi_35_30_ladder;
        }
        float _2260 = isnan(_2012) ? _1789 : (isnan(_1789) ? _2012 : min(_1789, _2012));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1755) + _1744;
        float _2266 = (_2261 * _1758) + _1748;
        float _2267 = (_2261 * _1761) + _1752;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_13_35_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1777 = frontier_phi_13_35_ladder_2;
        _1779 = frontier_phi_13_35_ladder_1;
        _1781 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1695);
        _1777 = _1765.x * cbModelParam._m0[1u].y;
        _1779 = _1765.y * cbModelParam._m0[1u].y;
        _1781 = _1765.z * cbModelParam._m0[1u].y;
    }
    float _1785 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1785 : min(cbModelParam._m0[25u].w, _1785));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1855 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1858 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _2017;
        if (_1852 > 0.0)
        {
            _2017 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2285;
        if (_1855 > 0.0)
        {
            _2285 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2285 = frontier_phi_37_32_ladder;
        }
        float _2490;
        if (_1858 > 0.0)
        {
            _2490 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2490 = frontier_phi_46_43_ladder;
        }
        float _2492 = isnan(_2285) ? _2017 : (isnan(_2017) ? _2285 : min(_2017, _2285));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1852) + _1841;
        float _2498 = (_2493 * _1855) + _1845;
        float _2499 = (_2493 * _1858) + _1849;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_22_46_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_22_46_ladder_2;
        _1879 = frontier_phi_22_46_ladder_1;
        _1881 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1786);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1893 = ((((1.0 - _909) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_909 * _896)) * _880;
    float _1894 = _1893 * ((cbModelParam._m0[1u].w * (_1877 - _1777)) + _1777);
    float _1895 = _1893 * ((cbModelParam._m0[1u].w * (_1879 - _1779)) + _1779);
    float _1896 = _1893 * ((cbModelParam._m0[1u].w * (_1881 - _1781)) + _1781);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    vec4 _1913 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_817, _818));
    float _1915 = _1913.w;
    float _1927 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1915);
    float _1928 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1915);
    float _1929 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1915);
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _880 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1971 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1975 = _1935 | 1u;
    float _1986 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_730, _731, _732));
    float _1989 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_730, _731, _732));
    float _4104 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _4115 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1994 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1996 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _2003 = ((cbLight._m0[_1952].x * _1958) * _1996) + (((cbLight._m0[_1962].x * _1927) * _1971) * _1994);
    float _2004 = ((_1958 * cbLight._m0[_1952].y) * _1996) + (((cbLight._m0[_1962].y * _1928) * _1971) * _1994);
    float _2005 = ((_1958 * cbLight._m0[_1952].z) * _1996) + (((cbLight._m0[_1962].z * _1929) * _1971) * _1994);
    uvec4 _2009 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2011 = _2009.x == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_2011)
    {
        _2022 = _2003;
        _2024 = _2004;
        _2026 = _2005;
    }
    else
    {
        uint _2030 = _1935 + 6u;
        float _2046 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4126 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2049 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2022 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _2003;
        _2024 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _2004;
        _2026 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _2005;
    }
    bool _2029 = _2009.y == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2029)
    {
        _2067 = _2022;
        _2069 = _2024;
        _2071 = _2026;
    }
    else
    {
        uint _2229 = _1935 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4142 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2248 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2067 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2022;
        _2069 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2024;
        _2071 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2026;
    }
    uint _2074 = _1935 + 8u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _733) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1935].x + _809;
    float _2090 = cbLight._m0[_1935].y + _810;
    float _2091 = cbLight._m0[_1935].z + _811;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_1935].xyz));
    float _4158 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2103 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2104 = dot(vec3(_730, _731, _732), vec3(_2096, _2097, _2098));
    float _4180 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2096, _2097, _2098));
    float _4191 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2088 * _2088;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2128 = 1.0 - _2088;
    float _2139 = (0.5 / (((_2103 * ((_2102 * _2128) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2128) + _2088) * _2102))) * _2102;
    float _4202 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    uint _2155 = _1935 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _733) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1975].x + _809;
    float _2169 = cbLight._m0[_1975].y + _810;
    float _2170 = cbLight._m0[_1975].z + _811;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_1975].xyz));
    float _4213 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2182 = dot(vec3(_730, _731, _732), vec3(_2175, _2176, _2177));
    float _4224 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2175, _2176, _2177));
    float _4235 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2167;
    float _2214 = (0.5 / (((_2103 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2204) + _2167) * _2181))) * _2181;
    float _4246 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2226 = (((_2203 * cbLight._m0[_2155].x) * _2216) * _1958) + ((((cbLight._m0[_2074].x * _1927) * _2127) * _2141) * _1971);
    float _2227 = (((_2203 * cbLight._m0[_2155].y) * _2216) * _1958) + ((((cbLight._m0[_2074].y * _1928) * _2127) * _2141) * _1971);
    float _2228 = (((_2203 * cbLight._m0[_2155].z) * _2216) * _1958) + ((((cbLight._m0[_2074].z * _1929) * _2127) * _2141) * _1971);
    float _2290;
    float _2292;
    float _2294;
    if (_2011)
    {
        _2290 = _2226;
        _2292 = _2227;
        _2294 = _2228;
    }
    else
    {
        uint _2296 = _1935 + 2u;
        uint _2300 = _1935 + 10u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _733) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _809;
        float _2317 = cbLight._m0[_2296].y + _810;
        float _2318 = cbLight._m0[_2296].z + _811;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2296].xyz));
        float _4257 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2330 = dot(vec3(_730, _731, _732), vec3(_2323, _2324, _2325));
        float _4268 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4279 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2352 = 1.0 - _2315;
        float _2362 = (0.5 / (((_2103 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2352) + _2315) * _2329))) * _2329;
        float _4290 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2290 = (((_2351 * cbLight._m0[_2300].x) * _2364) * _2365) + _2226;
        _2292 = (((_2351 * cbLight._m0[_2300].y) * _2364) * _2365) + _2227;
        _2294 = (((_2351 * cbLight._m0[_2300].z) * _2364) * _2365) + _2228;
    }
    float _2400;
    float _2402;
    float _2404;
    if (_2029)
    {
        _2400 = _2290;
        _2402 = _2292;
        _2404 = _2294;
    }
    else
    {
        uint _2411 = _1935 + 3u;
        uint _2415 = _1935 + 11u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _733) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _809;
        float _2432 = cbLight._m0[_2411].y + _810;
        float _2433 = cbLight._m0[_2411].z + _811;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2411].xyz));
        float _4306 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2445 = dot(vec3(_730, _731, _732), vec3(_2438, _2439, _2440));
        float _4317 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4328 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2467 = 1.0 - _2430;
        float _2477 = (0.5 / (((_2103 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2467) + _2430) * _2444))) * _2444;
        float _4339 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2400 = (((_2466 * cbLight._m0[_2415].x) * _2479) * _2480) + _2290;
        _2402 = (((_2466 * cbLight._m0[_2415].y) * _2479) * _2480) + _2292;
        _2404 = (((_2466 * cbLight._m0[_2415].z) * _2479) * _2480) + _2294;
    }
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_1933.y == 0u)
    {
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2555;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2555;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2555;
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.x;
        uint _2582 = uint((float(_2570.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2571))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2571)));
        float _2592 = (log2(_2558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2593 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        uint _2596 = uint(isnan(14.0) ? _2593 : (isnan(_2593) ? 14.0 : min(_2593, 14.0)));
        uvec4 _2601 = texelFetch(g_lightClusterGridBuffer, int(((_2596 << 2u) + (_2582 << 6u)) >> 2u));
        uint _2602 = _2601.x;
        uint _2603 = _2570.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2603 >> 4u) & 15u)) + 4294967295u) & _2602) == 0u) || ((_2603 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2864)
                {
                    frontier_phi_61_pred = _2848;
                    frontier_phi_61_pred_1 = _2853;
                    frontier_phi_61_pred_2 = _2852;
                    frontier_phi_61_pred_3 = _2851;
                    frontier_phi_61_pred_4 = _2850;
                    frontier_phi_61_pred_5 = _2849;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2863;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2854 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _2556;
                        float _3039 = _2998.y - _2557;
                        float _3040 = _2998.z - _2558;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_836, _839, _842), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4365 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _2556;
                        float _3074 = (-0.0) - _2557;
                        float _3075 = (-0.0) - _2558;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3090 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _896;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_836, _839, _842), vec3(_3080, _3081, _3082));
                        float _4381 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3115 = dot(vec3(_836, _839, _842), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4392 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3058 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3048) + _3124;
                        float _4403 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4414 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3122 * _3122) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2907 = (_3069 * _3017.x) + _2975;
                        _2908 = (_3069 * _3017.y) + _2976;
                        _2909 = (_3069 * _3017.z) + _2977;
                        _2904 = (_3150 * _3034.x) + _2972;
                        _2905 = (_3150 * _3034.y) + _2973;
                        _2906 = (_3150 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_61_pred = _2904;
                    frontier_phi_61_pred_1 = _2909;
                    frontier_phi_61_pred_2 = _2908;
                    frontier_phi_61_pred_3 = _2907;
                    frontier_phi_61_pred_4 = _2906;
                    frontier_phi_61_pred_5 = _2905;
                }
                _2704 = frontier_phi_61_pred;
                _2714 = frontier_phi_61_pred_1;
                _2712 = frontier_phi_61_pred_2;
                _2710 = frontier_phi_61_pred_3;
                _2708 = frontier_phi_61_pred_4;
                _2706 = frontier_phi_61_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2704;
                    _2849 = _2706;
                    _2850 = _2708;
                    _2851 = _2710;
                    _2852 = _2712;
                    _2853 = _2714;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2720) & _2602) == 0u)
        {
            _2816 = _2703;
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
            float _2842 = _2841 * _2556;
            float _2843 = _2841 * _2557;
            float _2844 = _2841 * _2558;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2955 = _2703;
                float _2956 = _2705;
                float _2957 = _2707;
                float _2958 = _2709;
                float _2959 = _2711;
                float _2960 = _2713;
                uint _2961 = _2720;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2971)
                    {
                        frontier_phi_67_pred = _2958;
                        frontier_phi_67_pred_1 = _2959;
                        frontier_phi_67_pred_2 = _2960;
                        frontier_phi_67_pred_3 = _2957;
                        frontier_phi_67_pred_4 = _2956;
                        frontier_phi_67_pred_5 = _2955;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        uint _3174 = _2970;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3185 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3185 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3185 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3185 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2558, _3292.z, fma(_2557, _3292.y, _3292.x * _2556)) + _3292.w;
                            _3305 = !((fma(_2558, _3273.z, fma(_2557, _3273.y, _3273.x * _2556)) + _3273.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3200.x - _2556;
                                float _3333 = _3200.y - _2557;
                                float _3334 = _3200.z - _2558;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3201 * _3201));
                                float _4425 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3350 = sqrt(_3335) * _3216.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_836, _839, _842))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2558, _3243.z, fma(_2557, _3243.y, _3243.x * _2556)) + _3243.w) / _3304;
                                float _3364 = (fma(_2558, _3258.z, fma(_2557, _3258.y, _3258.x * _2556)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4441 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _896;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2842;
                                float _3394 = _3340 - _2843;
                                float _3395 = _3341 - _2844;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_836, _839, _842), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4452 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3407 = dot(vec3(_836, _839, _842), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4463 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_836, _839, _842), vec3(_3339, _3340, _3341))) + _3416;
                                float _4474 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4485 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3444 * _3228.x;
                                frontier_phi_73_pred_1 = _3444 * _3228.y;
                                frontier_phi_73_pred_2 = _3370 * _3216.z;
                                frontier_phi_73_pred_3 = _3370 * _3216.y;
                                frontier_phi_73_pred_4 = _3370 * _3216.x;
                                frontier_phi_73_pred_5 = _3444 * _3228.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3448 = frontier_phi_73_pred;
                            _3449 = frontier_phi_73_pred_1;
                            _3453 = frontier_phi_73_pred_2;
                            _3452 = frontier_phi_73_pred_3;
                            _3451 = frontier_phi_73_pred_4;
                            _3450 = frontier_phi_73_pred_5;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    _2823 = frontier_phi_67_pred;
                    _2825 = frontier_phi_67_pred_1;
                    _2827 = frontier_phi_67_pred_2;
                    _2821 = frontier_phi_67_pred_3;
                    _2819 = frontier_phi_67_pred_4;
                    _2817 = frontier_phi_67_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2817;
                        _2956 = _2819;
                        _2957 = _2821;
                        _2958 = _2823;
                        _2959 = _2825;
                        _2960 = _2827;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2825;
                frontier_phi_55_56_ladder_1 = _2827;
                frontier_phi_55_56_ladder_2 = _2823;
                frontier_phi_55_56_ladder_3 = _2821;
                frontier_phi_55_56_ladder_4 = _2819;
                frontier_phi_55_56_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            _2816 = frontier_phi_55_56_ladder_5;
            _2818 = frontier_phi_55_56_ladder_4;
            _2820 = frontier_phi_55_56_ladder_3;
            _2822 = frontier_phi_55_56_ladder_2;
            _2824 = frontier_phi_55_56_ladder;
            _2826 = frontier_phi_55_56_ladder_1;
        }
        float _2831 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2615 = (_2831 * _2822) + _2067;
        _2617 = (_2831 * _2824) + _2069;
        _2619 = (_2831 * _2826) + _2071;
        _2621 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2400;
        _2623 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2402;
        _2625 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2404;
    }
    else
    {
        _2615 = _2067;
        _2617 = _2069;
        _2619 = _2071;
        _2621 = _2400;
        _2623 = _2402;
        _2625 = _2404;
    }
    float _4501 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4512 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4523 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    uint _2645 = _251 + 6u;
    float _2653 = _817 / cbSceneParam._m0[86u].x;
    float _2654 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _751 : (isnan(_751) ? cbSceneParam._m0[77u].w : min(_751, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_751 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_751) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _751 : min(cbSceneParam._m0[80u].w, _751));
        float _2729 = _2728 / _751;
        float _2740 = _2729 * _802;
        float _2741 = _803 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2744 = _2729 * _804;
        float _2746 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2741;
        float _2754 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2742 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2879 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2917 = ((abs(_2754 / _2742) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2764 * _2888) - exp2(_2764 * _2889)) * _2877))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2673);
        _2766 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2768 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2770 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2772 = _2928 * _2673;
    }
    else
    {
        _2766 = _2670;
        _2768 = _2671;
        _2770 = _2672;
        _2772 = _2673;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2615 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _880))) + ((_2621 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1684)) * cbPerFrame._m0[3u].x));
    float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2617 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _880))) + ((_2623 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1684)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2619 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _880))) + ((_2625 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1684)) * cbPerFrame._m0[3u].x));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2645].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2645].w;
}


