#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _999;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _242) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _243) + cbTextureTilingScale._m0[20u].w));
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _318 = _314.z;
    float _322 = (_314.x * 2.0) + (-1.0);
    float _323 = (_314.y * 2.0) + (-1.0);
    float _324 = dot(vec2(_322, _323), vec2(_322, _323));
    float _3308 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _330 = sqrt(1.0 - (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))));
    float _335 = _322 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_288.x * 2.0) + (-1.0)));
    float _336 = _323 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_288.y * 2.0) + (-1.0)));
    float _339 = fma(_330, _210, fma(_336, _217, _335 * _203));
    float _342 = fma(_330, _211, fma(_336, _218, _335 * _204));
    float _345 = fma(_330, _212, fma(_336, _219, _335 * _205));
    float _349 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _387 = _385.x;
    float _388 = 1.0 - _387;
    float _397 = (cbMtdParam._m0[19u].x + dot(vec4(_349 * _339, _349 * _342, _349 * _345, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_387 - _388) * cbMtdParam._m0[24u].z) + _388) * cbMtdParam._m0[21u].z);
    float _3319 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _405 = (_398 * (cbMtdParam._m0[17u].x - _268)) + _268;
    float _406 = (_398 * (cbMtdParam._m0[17u].y - _269)) + _269;
    float _407 = (_398 * (cbMtdParam._m0[17u].z - _270)) + _270;
    float _412 = (((_288.z - _318) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _318;
    vec4 _425 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3330 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _442 = ((_425.z - _412) * _398) + _412;
    float _452 = ((sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) - _330) * _398) + _330;
    float _455 = (((_432 - _335) * _398) + _335) + (cbMtdParam._m0[21u].x * _335);
    float _456 = (((_433 - _336) * _398) + _336) + (cbMtdParam._m0[21u].x * _336);
    float _461 = cbMtdParam._m0[22u].x + _314.w;
    float _464 = fma(_452, _210, fma(_456, _217, _455 * _203));
    float _467 = fma(_452, _211, fma(_456, _218, _455 * _204));
    float _470 = fma(_452, _212, fma(_456, _219, _455 * _205));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3341 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _478 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3363 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3374 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3385 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _496 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _547 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _537);
    float _548 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _537);
    float _549 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _537);
    float _553 = inversesqrt(dot(vec3(_547, _548, _549), vec3(_547, _548, _549)));
    float _554 = _547 * _553;
    float _555 = _548 * _553;
    float _556 = _549 * _553;
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _584 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _587 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _590 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _604 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _610 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_604].x;
    float _611 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_604].y;
    float _612 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_604].z;
    float _3396 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _628 = ((isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * TEXCOORD_5.w) * _624.x;
    float _629 = dot(vec3(_475, _476, _477), vec3(_554, _555, _556));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _475) - _554;
    float _637 = (_632 * _476) - _555;
    float _638 = (_632 * _477) - _556;
    float _642 = abs(dot(vec3(_554, _555, _556), vec3(_475, _476, _477)));
    float _3429 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_478);
    float _657 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _998;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _723 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _727 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _731 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _756 = _689 + _475;
        float _757 = _693 + _476;
        float _758 = _697 + _477;
        float _768 = fma(_758, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) - _723;
        float _769 = fma(_758, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) - _727;
        float _770 = fma(_758, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) - _731;
        float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
        float _787 = ((_774 * _768) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_723 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_774 * _769) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_727 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_774 * _770) / cbModelParam._m0[34u].z) + ((((((_731 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        float _826 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_792.x + (-0.5));
        float _828 = _826 * (_792.y + (-0.5));
        float _829 = _826 * (_792.z + (-0.5));
        float _836 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_799.x + (-0.5));
        float _838 = _836 * (_799.y + (-0.5));
        float _839 = _836 * (_799.z + (-0.5));
        float _846 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_806.x + (-0.5));
        float _848 = _846 * (_806.y + (-0.5));
        float _849 = _846 * (_806.z + (-0.5));
        float _856 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_813.x + (-0.5));
        float _858 = _856 * (_813.y + (-0.5));
        float _859 = _856 * (_813.z + (-0.5));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = _827 * 0.5;
        float _864 = _837 * 0.5;
        float _865 = _847 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _880 = (dot(vec3(_475, _476, _477), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _890 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3477 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_892 + 1.0))) + _897) * _860;
        float _907 = _828 * 0.5;
        float _908 = _838 * 0.5;
        float _909 = _848 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_475, _476, _477), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3510 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_934 + 1.0))) + _939) * _861;
        float _949 = _829 * 0.5;
        float _950 = _839 * 0.5;
        float _951 = _849 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_475, _476, _477), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3543 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_976 + 1.0))) + _981) * _862;
        _998 = _829;
        _1000 = _828;
        _1001 = _827;
        _1002 = _839;
        _1003 = _838;
        _1004 = _837;
        _1005 = _849;
        _1006 = _848;
        _1007 = _847;
        _1008 = _862;
        _1009 = _861;
        _1010 = _860;
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
    }
    else
    {
        _998 = _999;
        _1000 = _999;
        _1001 = _999;
        _1002 = _999;
        _1003 = _999;
        _1004 = _999;
        _1005 = _999;
        _1006 = _999;
        _1007 = _999;
        _1008 = _999;
        _1009 = _999;
        _1010 = _999;
        _1011 = 0.0;
        _1012 = 0.0;
        _1013 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1042 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1046 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1069 = _689 + _475;
        float _1070 = _693 + _476;
        float _1071 = _697 + _477;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_475, _476, _477), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3606 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_475, _476, _477), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3639 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_475, _476, _477), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3672 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _999;
        _1308 = _999;
        _1309 = _999;
        _1310 = _999;
        _1311 = _999;
        _1312 = _999;
        _1313 = _999;
        _1314 = _999;
        _1315 = _999;
        _1316 = _999;
        _1317 = _999;
        _1318 = _999;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1011)) + _1011;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1012)) + _1012;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1013)) + _1013;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _636 * 0.5;
    float _1376 = _637 * 0.5;
    float _1377 = _638 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_998, _1002, _1005, _1008));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1506 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1509 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1537 = frontier_phi_14_12_ladder;
        }
        float _1740;
        if (_1506 > 0.0)
        {
            _1740 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1740 = frontier_phi_23_19_ladder;
        }
        float _1983;
        if (_1509 > 0.0)
        {
            _1983 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1983 = frontier_phi_35_30_ladder;
        }
        float _1985 = isnan(_1740) ? _1537 : (isnan(_1537) ? _1740 : min(_1537, _1740));
        float _1986 = isnan(_1983) ? _1985 : (isnan(_1985) ? _1983 : min(_1985, _1983));
        float _1990 = (_1986 * _1503) + _1492;
        float _1991 = (_1986 * _1506) + _1496;
        float _1992 = (_1986 * _1509) + _1500;
        float _1993 = _1986 * 9.9999997473787516355514526367188e-05;
        float _1995 = (-1.0) - _1993;
        float _1997 = _1993 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1992 > _1997) || ((_1992 < _1995) || ((_1991 > _1997) || ((_1991 < _1995) || ((_1990 < _1995) || (_1990 > _1997))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1992, cbModelParam._m0[9u].z, fma(_1991, cbModelParam._m0[9u].y, _1990 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1992, cbModelParam._m0[10u].z, fma(_1991, cbModelParam._m0[10u].y, _1990 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1992, cbModelParam._m0[11u].z, fma(_1991, cbModelParam._m0[11u].y, _1990 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_13_35_ladder = _2116.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2116.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2116.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_13_35_ladder_2;
        _1527 = frontier_phi_13_35_ladder_1;
        _1529 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1444);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1602 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1605 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1745;
        if (_1599 > 0.0)
        {
            _1745 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1745 = frontier_phi_25_21_ladder;
        }
        float _2010;
        if (_1602 > 0.0)
        {
            _2010 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2010 = frontier_phi_37_32_ladder;
        }
        float _2215;
        if (_1605 > 0.0)
        {
            _2215 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2215 = frontier_phi_46_43_ladder;
        }
        float _2217 = isnan(_2010) ? _1745 : (isnan(_1745) ? _2010 : min(_1745, _2010));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1599) + _1588;
        float _2223 = (_2218 * _1602) + _1592;
        float _2224 = (_2218 * _1605) + _1596;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2224, cbModelParam._m0[17u].z, fma(_2223, cbModelParam._m0[17u].y, _2222 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2224, cbModelParam._m0[18u].z, fma(_2223, cbModelParam._m0[18u].y, _2222 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2224, cbModelParam._m0[19u].z, fma(_2223, cbModelParam._m0[19u].y, _2222 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_22_46_ladder = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_22_46_ladder_2;
        _1626 = frontier_phi_22_46_ladder_1;
        _1628 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1534);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _657) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_657 * _644)) * _628;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1525)) + _1525);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1527)) + _1527);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1529)) + _1529);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    uvec4 _1662 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1664 = _1662.x * 14u;
    uint _1665 = _1664 + 13u;
    float _1672 = _628 + (-1.0);
    float _1677 = (cbLight._m0[_1665].x * _1672) + 1.0;
    float _1678 = (cbLight._m0[_1665].y * _1672) + 1.0;
    float _1679 = (cbLight._m0[_1665].z * _1672) + 1.0;
    float _1680 = (cbLight._m0[_1665].w * _1672) + 1.0;
    uint _1681 = _1664 + 5u;
    float _1687 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1691 = _1664 + 4u;
    float _1698 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1702 = _1664 | 1u;
    float _1713 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_475, _476, _477));
    float _1716 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_475, _476, _477));
    float _3808 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _3819 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1721 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.3183098733425140380859375;
    float _1723 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1730 = ((cbLight._m0[_1681].x * _1687) * _1723) + ((cbLight._m0[_1691].x * _1698) * _1721);
    float _1731 = ((_1687 * cbLight._m0[_1681].y) * _1723) + ((_1698 * cbLight._m0[_1691].y) * _1721);
    float _1732 = ((_1687 * cbLight._m0[_1681].z) * _1723) + ((_1698 * cbLight._m0[_1691].z) * _1721);
    uvec4 _1737 = floatBitsToUint(cbLight._m0[_1664 + 12u]);
    bool _1739 = _1737.x == 0u;
    float _1750;
    float _1752;
    float _1754;
    if (_1739)
    {
        _1750 = _1730;
        _1752 = _1731;
        _1754 = _1732;
    }
    else
    {
        uint _1758 = _1664 + 6u;
        float _1774 = (dot(vec3(cbLight._m0[_1664 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1775 = _1774 * _1774;
        float _3830 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1777 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1750 = (((cbLight._m0[_1758].x * 0.3183098733425140380859375) * _1776) * _1777) + _1730;
        _1752 = (((cbLight._m0[_1758].y * 0.3183098733425140380859375) * _1776) * _1777) + _1731;
        _1754 = (((cbLight._m0[_1758].z * 0.3183098733425140380859375) * _1776) * _1777) + _1732;
    }
    bool _1757 = _1737.y == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1757)
    {
        _1795 = _1750;
        _1797 = _1752;
        _1799 = _1754;
    }
    else
    {
        uint _1954 = _1664 + 7u;
        float _1970 = (dot(vec3(cbLight._m0[_1664 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _3846 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1973 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _1795 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1750;
        _1797 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1752;
        _1799 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1754;
    }
    uint _1802 = _1664 + 8u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _478) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1664].x + _554;
    float _1818 = cbLight._m0[_1664].y + _555;
    float _1819 = cbLight._m0[_1664].z + _556;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1664].xyz));
    float _3862 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1831 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1832 = dot(vec3(_475, _476, _477), vec3(_1824, _1825, _1826));
    float _3884 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1824, _1825, _1826));
    float _3895 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1816 * _1816;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1855 = (exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1856 = 1.0 - _1816;
    float _1867 = (0.5 / (((_1831 * ((_1830 * _1856) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1856) + _1816) * _1830))) * _1830;
    float _3906 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1869 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    uint _1880 = _1664 + 9u;
    float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _478) * 0.949999988079071044921875);
    float _1892 = _1891 * _1891;
    float _1893 = cbLight._m0[_1702].x + _554;
    float _1894 = cbLight._m0[_1702].y + _555;
    float _1895 = cbLight._m0[_1702].z + _556;
    float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
    float _1900 = _1899 * _1893;
    float _1901 = _1899 * _1894;
    float _1902 = _1899 * _1895;
    float _1903 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1702].xyz));
    float _3917 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1907 = dot(vec3(_475, _476, _477), vec3(_1900, _1901, _1902));
    float _3928 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1900, _1901, _1902));
    float _3939 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1892 * _1892;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1929 = 1.0 - _1892;
    float _1939 = (0.5 / (((_1831 * ((_1906 * _1929) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1929) + _1892) * _1906))) * _1906;
    float _3950 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    float _1951 = (((_1928 * cbLight._m0[_1880].x) * _1941) * _1687) + (((_1855 * cbLight._m0[_1802].x) * _1869) * _1698);
    float _1952 = (((_1928 * cbLight._m0[_1880].y) * _1941) * _1687) + (((_1855 * cbLight._m0[_1802].y) * _1869) * _1698);
    float _1953 = (((_1928 * cbLight._m0[_1880].z) * _1941) * _1687) + (((_1855 * cbLight._m0[_1802].z) * _1869) * _1698);
    float _2015;
    float _2017;
    float _2019;
    if (_1739)
    {
        _2015 = _1951;
        _2017 = _1952;
        _2019 = _1953;
    }
    else
    {
        uint _2021 = _1664 + 2u;
        uint _2025 = _1664 + 10u;
        float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _478) * 0.949999988079071044921875);
        float _2040 = _2039 * _2039;
        float _2041 = cbLight._m0[_2021].x + _554;
        float _2042 = cbLight._m0[_2021].y + _555;
        float _2043 = cbLight._m0[_2021].z + _556;
        float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
        float _2048 = _2047 * _2041;
        float _2049 = _2047 * _2042;
        float _2050 = _2047 * _2043;
        float _2051 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2021].xyz));
        float _3961 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2055 = dot(vec3(_475, _476, _477), vec3(_2048, _2049, _2050));
        float _3972 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2059 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2048, _2049, _2050));
        float _3983 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2063 = _2040 * _2040;
        float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
        float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2077 = 1.0 - _2040;
        float _2087 = (0.5 / (((_1831 * ((_2054 * _2077) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2077) + _2040) * _2054))) * _2054;
        float _3994 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
        float _2090 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2015 = (((_2076 * cbLight._m0[_2025].x) * _2089) * _2090) + _1951;
        _2017 = (((_2076 * cbLight._m0[_2025].y) * _2089) * _2090) + _1952;
        _2019 = (((_2076 * cbLight._m0[_2025].z) * _2089) * _2090) + _1953;
    }
    float _2125;
    float _2127;
    float _2129;
    if (_1757)
    {
        _2125 = _2015;
        _2127 = _2017;
        _2129 = _2019;
    }
    else
    {
        uint _2136 = _1664 + 3u;
        uint _2140 = _1664 + 11u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _478) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _554;
        float _2157 = cbLight._m0[_2136].y + _555;
        float _2158 = cbLight._m0[_2136].z + _556;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2136].xyz));
        float _4010 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2170 = dot(vec3(_475, _476, _477), vec3(_2163, _2164, _2165));
        float _4021 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4032 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2191 = (exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2192 = 1.0 - _2155;
        float _2202 = (0.5 / (((_1831 * ((_2169 * _2192) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2192) + _2155) * _2169))) * _2169;
        float _4043 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _2125 = (((_2191 * cbLight._m0[_2140].x) * _2204) * _2205) + _2015;
        _2127 = (((_2191 * cbLight._m0[_2140].y) * _2204) * _2205) + _2017;
        _2129 = (((_2191 * cbLight._m0[_2140].z) * _2204) * _2205) + _2019;
    }
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_1662.y == 0u)
    {
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2280;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2280;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2280;
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.x;
        uint _2307 = uint((float(_2295.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2296))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2296)));
        float _2317 = (log2(_2283 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2318 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        uint _2321 = uint(isnan(14.0) ? _2318 : (isnan(_2318) ? 14.0 : min(_2318, 14.0)));
        uvec4 _2326 = texelFetch(g_lightClusterGridBuffer, int(((_2321 << 2u) + (_2307 << 6u)) >> 2u));
        uint _2327 = _2326.x;
        uint _2328 = _2295.z;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((((1u << ((_2328 >> 4u) & 15u)) + 4294967295u) & _2327) == 0u) || ((_2328 & 240u) == 0u))
        {
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
        }
        else
        {
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            uint _2579 = 0u;
            uint _2588;
            bool _2589;
            for (;;)
            {
                _2588 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2579 << 2u)) >> 2u)).x;
                _2589 = _2588 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2589)
                {
                    frontier_phi_61_pred = _2573;
                    frontier_phi_61_pred_1 = _2578;
                    frontier_phi_61_pred_2 = _2577;
                    frontier_phi_61_pred_3 = _2576;
                    frontier_phi_61_pred_4 = _2575;
                    frontier_phi_61_pred_5 = _2574;
                }
                else
                {
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    uint _2703;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2588;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2707 = uint(findLSB(_2703)) + (_2579 << 5u);
                        uint _2704 = (_2703 + 4294967295u) & _2703;
                        uint _2709 = _2707 * 48u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2729 = (_2707 * 48u) + 4u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2748 = (_2707 * 48u) + 8u;
                        vec3 _2759 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x));
                        float _2763 = _2723.x - _2281;
                        float _2764 = _2723.y - _2282;
                        float _2765 = _2723.z - _2283;
                        float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                        float _2769 = inversesqrt(_2766);
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2773 = dot(vec3(_584, _587, _590), vec3(_2770, _2771, _2772));
                        float _2778 = 1.0 - (_2766 * _2723.w);
                        float _4069 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2780 = sqrt(_2766) * _2742.w;
                        float _2783 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2773) + _2784;
                        float _2790 = _2780 * _2780;
                        float _2794 = ((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2779) / ((_2790 * 0.699999988079071044921875) + 1.0);
                        float _2798 = (-0.0) - _2281;
                        float _2799 = (-0.0) - _2282;
                        float _2800 = (-0.0) - _2283;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2815 = exp2(log2(1.0 / ((_2790 * 3.5) + 5.0)) * 0.25);
                        float _2816 = 1.0 - _644;
                        float _2823 = sqrt(1.0 - ((1.0 - (_2816 * _2816)) * (1.0 - (_2815 * _2815))));
                        float _2824 = _2823 * _2823;
                        float _2825 = _2824 * _2824;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2836 = dot(vec3(_584, _587, _590), vec3(_2805, _2806, _2807));
                        float _4085 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2840 = dot(vec3(_584, _587, _590), vec3(_2832 * _2826, _2832 * _2827, _2832 * _2828));
                        float _4096 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2847 = ((_2843 * _2843) * (_2825 + (-1.0))) + 1.0;
                        float _2848 = _2783 * _2824;
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2773) + _2849;
                        float _4107 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2854 = 1.0 - _2824;
                        float _2864 = (0.5 / (((_2853 * ((_2839 * _2854) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2853 * _2854) + _2824) * _2839))) * _2853;
                        float _4118 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2875 = (((_2825 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_2847 * _2847) * ((_2790 * 2.1991131305694580078125) + 3.141590118408203125))) * _2779;
                        _2632 = (_2794 * _2742.x) + _2700;
                        _2633 = (_2794 * _2742.y) + _2701;
                        _2634 = (_2794 * _2742.z) + _2702;
                        _2629 = (_2875 * _2759.x) + _2697;
                        _2630 = (_2875 * _2759.y) + _2698;
                        _2631 = (_2875 * _2759.z) + _2699;
                        if (_2704 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2704;
                        }
                    }
                    frontier_phi_61_pred = _2629;
                    frontier_phi_61_pred_1 = _2634;
                    frontier_phi_61_pred_2 = _2633;
                    frontier_phi_61_pred_3 = _2632;
                    frontier_phi_61_pred_4 = _2631;
                    frontier_phi_61_pred_5 = _2630;
                }
                _2429 = frontier_phi_61_pred;
                _2439 = frontier_phi_61_pred_1;
                _2437 = frontier_phi_61_pred_2;
                _2435 = frontier_phi_61_pred_3;
                _2433 = frontier_phi_61_pred_4;
                _2431 = frontier_phi_61_pred_5;
                uint _2580 = _2579 + 1u;
                if (_2580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2573 = _2429;
                    _2574 = _2431;
                    _2575 = _2433;
                    _2576 = _2435;
                    _2577 = _2437;
                    _2578 = _2439;
                    _2579 = _2580;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
        }
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.z;
        uint _2445 = (_2443 >> 8u) & 15u;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((4294967295u << _2445) & _2327) == 0u)
        {
            _2541 = _2428;
            _2543 = _2430;
            _2545 = _2432;
            _2547 = _2434;
            _2549 = _2436;
            _2551 = _2438;
        }
        else
        {
            float _2566 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
            float _2567 = _2566 * _2281;
            float _2568 = _2566 * _2282;
            float _2569 = _2566 * _2283;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2445 < ((_2443 >> 12u) & 15u))
            {
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2680 = _2428;
                float _2681 = _2430;
                float _2682 = _2432;
                float _2683 = _2434;
                float _2684 = _2436;
                float _2685 = _2438;
                uint _2686 = _2445;
                uint _2695;
                bool _2696;
                for (;;)
                {
                    _2695 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                    _2696 = _2695 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2696)
                    {
                        frontier_phi_67_pred = _2683;
                        frontier_phi_67_pred_1 = _2684;
                        frontier_phi_67_pred_2 = _2685;
                        frontier_phi_67_pred_3 = _2682;
                        frontier_phi_67_pred_4 = _2681;
                        frontier_phi_67_pred_5 = _2680;
                    }
                    else
                    {
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        uint _2899 = _2695;
                        uint _2900;
                        vec4 _2925;
                        float _2926;
                        vec4 _2941;
                        vec3 _2953;
                        vec4 _2969;
                        vec4 _2984;
                        float _3030;
                        bool _3031;
                        for (;;)
                        {
                            uint _2910 = ((_2686 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2899));
                            _2900 = (_2899 + 4294967295u) & _2899;
                            uint _2912 = _2910 * 40u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2926 = _2925.w;
                            uint _2928 = (_2910 * 40u) + 4u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2910 * 40u) + 8u;
                            _2953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x));
                            uint _2956 = (_2910 * 40u) + 16u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2971 = (_2910 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2986 = (_2910 * 40u) + 24u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3005 = (_2910 * 40u) + 28u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3030 = fma(_2283, _3018.z, fma(_2282, _3018.y, _3018.x * _2281)) + _3018.w;
                            _3031 = !((fma(_2283, _2999.z, fma(_2282, _2999.y, _2999.x * _2281)) + _2999.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3031)
                            {
                                float _3058 = _2925.x - _2281;
                                float _3059 = _2925.y - _2282;
                                float _3060 = _2925.z - _2283;
                                float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                                float _3064 = inversesqrt(_3061);
                                float _3065 = _3064 * _3058;
                                float _3066 = _3064 * _3059;
                                float _3067 = _3064 * _3060;
                                float _3071 = 1.0 - (_3061 / (_2926 * _2926));
                                float _4129 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3076 = sqrt(_3061) * _2941.w;
                                float _3078 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                                float _3079 = _3078 * _3078;
                                float _3082 = ((1.0 - _3079) * dot(vec3(_3065, _3066, _3067), vec3(_584, _587, _590))) + _3079;
                                float _3085 = _3076 * _3076;
                                float _3089 = (fma(_2283, _2969.z, fma(_2282, _2969.y, _2969.x * _2281)) + _2969.w) / _3030;
                                float _3090 = (fma(_2283, _2984.z, fma(_2282, _2984.y, _2984.x * _2281)) + _2984.w) / _3030;
                                float _3094 = 1.0 - dot(vec2(_3089, _3090), vec2(_3089, _3090));
                                float _4145 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3096 = _3095 * (((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3072) / ((_3085 * 0.699999988079071044921875) + 1.0));
                                float _3108 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                                float _3109 = 1.0 - _644;
                                float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                                float _3117 = _3116 * _3116;
                                float _3118 = _3117 * _3117;
                                float _3119 = _3065 - _2567;
                                float _3120 = _3066 - _2568;
                                float _3121 = _3067 - _2569;
                                float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                                float _3129 = dot(vec3(_584, _587, _590), vec3((-0.0) - _2567, (-0.0) - _2568, (-0.0) - _2569));
                                float _4156 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3133 = dot(vec3(_584, _587, _590), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                                float _4167 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                                float _3141 = _3078 * _3117;
                                float _3142 = _3141 * _3141;
                                float _3148 = ((1.0 - _3142) * dot(vec3(_584, _587, _590), vec3(_3065, _3066, _3067))) + _3142;
                                float _4178 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3150 = 1.0 - _3117;
                                float _3160 = (0.5 / (((_3149 * ((_3132 * _3150) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3117) * _3132))) * _3149;
                                float _4189 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3170 = (_3095 * _3072) * (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) / ((_3140 * _3140) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3170 * _2953.x;
                                frontier_phi_73_pred_1 = _3170 * _2953.y;
                                frontier_phi_73_pred_2 = _3096 * _2941.z;
                                frontier_phi_73_pred_3 = _3096 * _2941.y;
                                frontier_phi_73_pred_4 = _3096 * _2941.x;
                                frontier_phi_73_pred_5 = _3170 * _2953.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3174 = frontier_phi_73_pred;
                            _3175 = frontier_phi_73_pred_1;
                            _3179 = frontier_phi_73_pred_2;
                            _3178 = frontier_phi_73_pred_3;
                            _3177 = frontier_phi_73_pred_4;
                            _3176 = frontier_phi_73_pred_5;
                            _2883 = _3177 + _2896;
                            _2884 = _3178 + _2897;
                            _2885 = _3179 + _2898;
                            _2880 = _3174 + _2893;
                            _2881 = _3175 + _2894;
                            _2882 = _3176 + _2895;
                            if (_2900 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2900;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2883;
                        frontier_phi_67_pred_1 = _2884;
                        frontier_phi_67_pred_2 = _2885;
                        frontier_phi_67_pred_3 = _2882;
                        frontier_phi_67_pred_4 = _2881;
                        frontier_phi_67_pred_5 = _2880;
                    }
                    _2548 = frontier_phi_67_pred;
                    _2550 = frontier_phi_67_pred_1;
                    _2552 = frontier_phi_67_pred_2;
                    _2546 = frontier_phi_67_pred_3;
                    _2544 = frontier_phi_67_pred_4;
                    _2542 = frontier_phi_67_pred_5;
                    uint _2687 = _2686 + 1u;
                    if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2680 = _2542;
                        _2681 = _2544;
                        _2682 = _2546;
                        _2683 = _2548;
                        _2684 = _2550;
                        _2685 = _2552;
                        _2686 = _2687;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2550;
                frontier_phi_55_56_ladder_1 = _2552;
                frontier_phi_55_56_ladder_2 = _2548;
                frontier_phi_55_56_ladder_3 = _2546;
                frontier_phi_55_56_ladder_4 = _2544;
                frontier_phi_55_56_ladder_5 = _2542;
            }
            else
            {
                frontier_phi_55_56_ladder = _2436;
                frontier_phi_55_56_ladder_1 = _2438;
                frontier_phi_55_56_ladder_2 = _2434;
                frontier_phi_55_56_ladder_3 = _2432;
                frontier_phi_55_56_ladder_4 = _2430;
                frontier_phi_55_56_ladder_5 = _2428;
            }
            _2541 = frontier_phi_55_56_ladder_5;
            _2543 = frontier_phi_55_56_ladder_4;
            _2545 = frontier_phi_55_56_ladder_3;
            _2547 = frontier_phi_55_56_ladder_2;
            _2549 = frontier_phi_55_56_ladder;
            _2551 = frontier_phi_55_56_ladder_1;
        }
        float _2556 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2340 = (_2556 * _2547) + _1795;
        _2342 = (_2556 * _2549) + _1797;
        _2344 = (_2556 * _2551) + _1799;
        _2346 = ((_2541 * 0.039999999105930328369140625) * _2556) + _2125;
        _2348 = ((_2543 * 0.039999999105930328369140625) * _2556) + _2127;
        _2350 = ((_2545 * 0.039999999105930328369140625) * _2556) + _2129;
    }
    else
    {
        _2340 = _1795;
        _2342 = _1797;
        _2344 = _1799;
        _2346 = _2125;
        _2348 = _2127;
        _2350 = _2129;
    }
    float _4205 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4216 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4227 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    uint _2370 = _222 + 6u;
    float _2378 = _562 / cbSceneParam._m0[86u].x;
    float _2379 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2393 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, (log2((isnan(cbSceneParam._m0[77u].w) ? _496 : (isnan(_496) ? cbSceneParam._m0[77u].w : min(_496, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2395 = _2393.x;
    float _2396 = _2393.y;
    float _2397 = _2393.z;
    float _2398 = _2393.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_496 > cbSceneParam._m0[78u].w)
    {
        float _2453 = isnan(_496) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _496 : min(cbSceneParam._m0[80u].w, _496));
        float _2454 = _2453 / _496;
        float _2465 = _2454 * _547;
        float _2466 = _548 * _2454;
        float _2467 = (-0.0) - _2466;
        float _2469 = _2454 * _549;
        float _2471 = (cbSceneParam._m0[77u].w * _2467) / _2453;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2466;
        float _2479 = sqrt(((_2465 * _2465) + (_2466 * _2466)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2453)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2642;
        if (abs((_2467 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2642 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2602 = 1.0 / cbSceneParam._m0[80u].x;
            float _2603 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2604 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            _2642 = ((abs(_2479 / _2467) * cbSceneParam._m0[80u].y) * ((((_2613 - _2614) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))))) * _2602)) - ((exp2(_2489 * _2613) - exp2(_2489 * _2614)) * _2602))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2644 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, 1.0), 0.0);
        float _2653 = exp2((_2642 * (-1.44269502162933349609375)) * (1.0 - _2644.w));
        float _2654 = log2(_2653);
        float _2670 = log2(_2398);
        _2491 = (exp2(_2670 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].x)) * _2644.x) / cbSceneParam._m0[78u].x)) + _2395;
        _2493 = (exp2(_2670 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].y)) * _2644.y) / cbSceneParam._m0[78u].y)) + _2396;
        _2495 = (exp2(_2670 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2654 * cbSceneParam._m0[78u].z)) * _2644.z) / cbSceneParam._m0[78u].z)) + _2397;
        _2497 = _2653 * _2398;
    }
    else
    {
        _2491 = _2395;
        _2493 = _2396;
        _2495 = _2397;
        _2497 = _2398;
    }
    float _2509 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2510 = _2509 == 3.0;
    float _2511 = log2(_2497);
    float _2518 = exp2(_2511 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2340 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _628))) + ((_2346 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2519 = exp2(_2511 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2342 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _628))) + ((_2348 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2520 = exp2(_2511 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2344 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _628))) + ((_2350 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2529 = (_2509 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2529 * (_2510 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.y = _2529 * (_2510 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.z = _2529 * (_2510 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.w = cbInstanceData._m0[_2370].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2370].w;
}


