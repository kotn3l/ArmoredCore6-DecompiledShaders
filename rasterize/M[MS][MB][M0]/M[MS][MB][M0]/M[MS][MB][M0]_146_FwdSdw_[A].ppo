#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1330;
float _3970;
float _3971;
float _3972;
float _3973;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3982 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _488 = _484.z;
    float _497 = ((_467.z - _488) * _392) + _488;
    float _500 = ((((_467.x - _486) * _392) + _486) * 2.0) + (-1.0);
    float _501 = ((((_467.y - _487) * _392) + _487) * 2.0) + (-1.0);
    float _502 = dot(vec2(_500, _501), vec2(_500, _501));
    float _3993 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    float _510 = _500 + ((((_440.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _511 = _501 + ((((_440.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _514 = fma(_507, _245, fma(_511, _252, _510 * _238));
    float _517 = fma(_507, _246, fma(_511, _253, _510 * _239));
    float _520 = fma(_507, _247, fma(_511, _254, _510 * _240));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _577 = (cbMtdParam._m0[19u].x + dot(vec4(_524 * _514, _524 * _517, _524 * _520, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_570 - _571) * cbMtdParam._m0[24u].z) + _571) * cbMtdParam._m0[21u].z);
    float _4004 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _580 = (-0.0) - cbMtdParam._m0[24u].y;
    float _582 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _582 : (isnan(_582) ? 1.0 : min(_582, 1.0));
    float _590 = _578 - ((_578 * TEXCOORD_8.x) * _583);
    float _591 = _578 - ((_578 * TEXCOORD_8.y) * _583);
    float _592 = _578 - ((_578 * TEXCOORD_8.z) * _583);
    float _599 = (_590 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) + _399;
    float _600 = (_591 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) + _400;
    float _601 = (_592 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) + _401;
    vec4 _613 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _644 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_615 - _616) * cbMtdParam._m0[24u].w) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4025 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _653 = ((((cbMtdParam._m0[10u].x - _599) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _645) + _599;
    float _654 = ((((cbMtdParam._m0[10u].y - _600) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _645) + _600;
    float _655 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _601)) * _645) + _601;
    float _660 = (((_440.z - _497) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _497;
    vec4 _674 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _681 = (_674.x * 2.0) + (-1.0);
    float _682 = (_674.y * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _4036 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _691 = ((_674.z - _660) * _590) + _660;
    float _694 = ((cbMtdParam._m0[23u].y - _691) * _645) + _691;
    vec4 _713 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _719 = (_713.x * 2.0) + (-1.0);
    float _720 = (_713.y * 2.0) + (-1.0);
    float _721 = dot(vec2(_719, _720), vec2(_719, _720));
    float _4047 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _736 = ((sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) - _507) * _592) + _507;
    float _739 = (((_681 - _510) * _590) + _510) + (cbMtdParam._m0[21u].x * _510);
    float _740 = (((_682 - _511) * _591) + _511) + (cbMtdParam._m0[21u].x * _511);
    float _751 = (((_719 - _739) + (_739 * cbMtdParam._m0[22u].z)) * _645) + _739;
    float _752 = (((_720 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _645) + _740;
    float _753 = (_645 * (sqrt(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) - _736)) + _736;
    float _755 = cbMtdParam._m0[22u].x + _540.w;
    float _758 = fma(_753, _245, fma(_752, _252, _751 * _238));
    float _761 = fma(_753, _246, fma(_752, _253, _751 * _239));
    float _764 = fma(_753, _247, fma(_752, _254, _751 * _240));
    float _768 = inversesqrt(dot(vec3(_758, _761, _764), vec3(_758, _761, _764)));
    float _769 = _768 * _758;
    float _770 = _768 * _761;
    float _771 = _768 * _764;
    float _4058 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _772 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4080 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4091 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4102 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    vec4 _855 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _857 = _855.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1011 = sqrt(((_841 * _841) + (_842 * _842)) + (_843 * _843));
        float _1017 = (cbMatDynParam._m0[5u].x * _1011) + cbMatDynParam._m0[5u].y;
        float _4113 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1022 = (cbMatDynParam._m0[5u].z * _1011) + cbMatDynParam._m0[5u].w;
        float _4124 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) - _1018)) + _1018) < ((_857 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _868 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _869 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _887 = fma(_771, cbSceneParam._m0[5u].z, fma(_770, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _769));
    float _890 = fma(_771, cbSceneParam._m0[6u].z, fma(_770, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _769));
    float _893 = fma(_771, cbSceneParam._m0[7u].z, fma(_770, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _769));
    uint _906 = _257 + 9u;
    uint _907 = _906 + uint(cbMatDynParam._m0[0u].w);
    float _913 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_907].x;
    float _914 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_907].y;
    float _915 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_907].z;
    float _4135 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    vec4 _927 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _868, cbSceneParam._m0[86u].y * _869));
    float _931 = ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * TEXCOORD_5.w) * _927.x;
    float _932 = dot(vec3(_769, _770, _771), vec3(_848, _849, _850));
    float _935 = _932 * 2.0;
    float _939 = (_935 * _769) - _848;
    float _940 = (_935 * _770) - _849;
    float _941 = (_935 * _771) - _850;
    float _945 = abs(dot(vec3(_848, _849, _850), vec3(_769, _770, _771)));
    float _4168 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_772);
    float _960 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1058 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1062 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1087 = _992 + _769;
        float _1088 = _996 + _770;
        float _1089 = _1000 + _771;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1054;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1058;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1062;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_769, _770, _771), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4216 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_769, _770, _771), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4249 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_769, _770, _771), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4282 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1376 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1380 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1403 = _992 + _769;
        float _1404 = _996 + _770;
        float _1405 = _1000 + _771;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_769, _770, _771), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4345 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_769, _770, _771), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4378 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_769, _770, _771), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4411 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = _1330;
        _1651 = _1330;
        _1652 = _1330;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1342)) + _1342;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _939 * 0.5;
    float _1710 = _940 * 0.5;
    float _1711 = _941 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _772);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_941, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939));
        float _1839 = fma(_941, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939));
        float _1842 = fma(_941, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1870 = frontier_phi_17_15_ladder;
        }
        float _2039;
        if (_1839 > 0.0)
        {
            _2039 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2039 = frontier_phi_26_22_ladder;
        }
        float _2334;
        if (_1842 > 0.0)
        {
            _2334 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2334 = frontier_phi_38_33_ladder;
        }
        float _2336 = isnan(_2039) ? _1870 : (isnan(_1870) ? _2039 : min(_1870, _2039));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1836) + _1825;
        float _2342 = (_2337 * _1839) + _1829;
        float _2343 = (_2337 * _1842) + _1833;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_16_38_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_16_38_ladder_2;
        _1860 = frontier_phi_16_38_ladder_1;
        _1862 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_939, _940, _941), _1778);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _772);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_941, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939));
        float _1934 = fma(_941, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939));
        float _1937 = fma(_941, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939));
        float _2044;
        if (_1931 > 0.0)
        {
            _2044 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2044 = frontier_phi_28_24_ladder;
        }
        float _2361;
        if (_1934 > 0.0)
        {
            _2361 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2361 = frontier_phi_40_35_ladder;
        }
        float _2688;
        if (_1937 > 0.0)
        {
            _2688 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2688 = frontier_phi_50_47_ladder;
        }
        float _2690 = isnan(_2361) ? _2044 : (isnan(_2044) ? _2361 : min(_2044, _2361));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _1931) + _1920;
        float _2696 = (_2691 * _1934) + _1924;
        float _2697 = (_2691 * _1937) + _1928;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_25_50_ladder = _2815.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2815.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2815.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_25_50_ladder_2;
        _1958 = frontier_phi_25_50_ladder_1;
        _1960 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_939, _940, _941), _1867);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1972 = ((((1.0 - _960) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_960 * _947)) * _931;
    float _1973 = _1972 * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1974 = _1972 * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1975 = _1972 * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1978 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2031 = _2018 / _2030;
    float _2032 = _2022 / _2030;
    float _2033 = _2026 / _2030;
    float _2180;
    float _2181;
    float _2182;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2060 = ((uint(_2033 > cbSceneParam._m0[59u].y) + uint(_2033 > cbSceneParam._m0[59u].x)) + uint(_2033 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2061 = _2060 + 43u;
        uint _2069 = _2060 + 44u;
        uint _2077 = _2060 + 45u;
        uint _2085 = _2060 + 46u;
        float _2096 = fma(_2030, cbSceneParam._m0[_2061].w, fma(_2026, cbSceneParam._m0[_2061].z, fma(_2022, cbSceneParam._m0[_2061].y, _2018 * cbSceneParam._m0[_2061].x)));
        float _2100 = fma(_2030, cbSceneParam._m0[_2069].w, fma(_2026, cbSceneParam._m0[_2069].z, fma(_2022, cbSceneParam._m0[_2069].y, _2018 * cbSceneParam._m0[_2069].x)));
        float _2108 = fma(_2030, cbSceneParam._m0[_2085].w, fma(_2026, cbSceneParam._m0[_2085].z, fma(_2022, cbSceneParam._m0[_2085].y, _2018 * cbSceneParam._m0[_2085].x)));
        float _2113 = cbSceneParam._m0[33u].z * _2108;
        float _2115 = cbSceneParam._m0[33u].w * _2108;
        float _2118 = fma(_2030, cbSceneParam._m0[_2077].w, fma(_2026, cbSceneParam._m0[_2077].z, fma(_2022, cbSceneParam._m0[_2077].y, _2018 * cbSceneParam._m0[_2077].x))) / _2108;
        float _2166 = (cbSceneParam._m0[33u].x - sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033))) * cbSceneParam._m0[33u].y;
        float _4537 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2173 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2113 + _2096) / _2108, (_2115 + _2100) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2096) / _2108, (_2100 - _2113) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 - _2113) / _2108, (_2100 - _2115) / _2108), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 - _2115) / _2108, (_2113 + _2100) / _2108), _2118), 0.0)).x), vec4(0.25)));
        _2180 = 1.0 - (_2173 * cbSceneParam._m0[34u].x);
        _2181 = 1.0 - (_2173 * cbSceneParam._m0[34u].y);
        _2182 = 1.0 - (_2173 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2180 = 1.0;
        _2181 = 1.0;
        _2182 = 1.0;
    }
    float _2246;
    float _2248;
    float _2250;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2234 = fma(_2030, cbSceneParam._m0[63u].w, fma(_2026, cbSceneParam._m0[63u].z, fma(_2022, cbSceneParam._m0[63u].y, _2018 * cbSceneParam._m0[63u].x)));
        float _2235 = fma(_2030, cbSceneParam._m0[60u].w, fma(_2026, cbSceneParam._m0[60u].z, fma(_2022, cbSceneParam._m0[60u].y, _2018 * cbSceneParam._m0[60u].x))) / _2234;
        float _2236 = fma(_2030, cbSceneParam._m0[61u].w, fma(_2026, cbSceneParam._m0[61u].z, fma(_2022, cbSceneParam._m0[61u].y, _2018 * cbSceneParam._m0[61u].x))) / _2234;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2235 >= cbSceneParam._m0[64u].x) && (_2236 >= cbSceneParam._m0[64u].y)) && (_2235 <= cbSceneParam._m0[64u].z)) && (_2236 <= cbSceneParam._m0[64u].w))
        {
            float _2374 = fma(_2030, cbSceneParam._m0[62u].w, fma(_2026, cbSceneParam._m0[62u].z, fma(_2022, cbSceneParam._m0[62u].y, _2018 * cbSceneParam._m0[62u].x))) / _2234;
            float _2378 = isnan(cbSceneParam._m0[41u].w) ? _2374 : (isnan(_2374) ? cbSceneParam._m0[41u].w : max(_2374, cbSceneParam._m0[41u].w));
            float _2421 = (cbSceneParam._m0[33u].x - sqrt(((_2032 * _2032) + (_2031 * _2031)) + (_2033 * _2033))) * cbSceneParam._m0[33u].y;
            float _4553 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
            float _2428 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2235, cbSceneParam._m0[33u].w + _2236), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2235, _2236 - cbSceneParam._m0[33u].z), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2235 - cbSceneParam._m0[33u].z, _2236 - cbSceneParam._m0[33u].w), _2378), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2235 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2236), _2378), 0.0)).x), vec4(0.25)));
            float _2432 = 1.0 - (_2428 * cbSceneParam._m0[34u].x);
            float _2433 = 1.0 - (_2428 * cbSceneParam._m0[34u].y);
            float _2434 = 1.0 - (_2428 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
            frontier_phi_37_36_ladder_1 = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_37_36_ladder_2 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
        }
        else
        {
            frontier_phi_37_36_ladder = _2182;
            frontier_phi_37_36_ladder_1 = _2181;
            frontier_phi_37_36_ladder_2 = _2180;
        }
        _2246 = frontier_phi_37_36_ladder_2;
        _2248 = frontier_phi_37_36_ladder_1;
        _2250 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2246 = _2180;
        _2248 = _2181;
        _2250 = _2182;
    }
    uvec4 _2255 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2257 = _2255.x * 14u;
    uint _2258 = _2257 + 13u;
    float _2265 = _931 + (-1.0);
    float _2270 = (cbLight._m0[_2258].x * _2265) + 1.0;
    float _2271 = (cbLight._m0[_2258].y * _2265) + 1.0;
    float _2272 = (cbLight._m0[_2258].z * _2265) + 1.0;
    float _2273 = (cbLight._m0[_2258].w * _2265) + 1.0;
    uint _2274 = _2257 + 5u;
    float _2280 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2284 = _2257 + 4u;
    float _2293 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2297 = _2257 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_769, _770, _771));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_769, _770, _771));
    float _4589 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4600 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2274].x * _2280) * _2318) + (((cbLight._m0[_2284].x * _2246) * _2293) * _2316);
    float _2326 = ((_2280 * cbLight._m0[_2274].y) * _2318) + (((cbLight._m0[_2284].y * _2248) * _2293) * _2316);
    float _2327 = ((_2280 * cbLight._m0[_2274].z) * _2318) + (((cbLight._m0[_2284].z * _2250) * _2293) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2257 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2435;
    float _2437;
    float _2439;
    if (_2333)
    {
        _2435 = _2325;
        _2437 = _2326;
        _2439 = _2327;
    }
    else
    {
        uint _2443 = _2257 + 6u;
        float _2459 = (dot(vec3(cbLight._m0[_2257 + 2u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4611 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2462 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2435 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2325;
        _2437 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2326;
        _2439 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2327;
    }
    bool _2442 = _2331.y == 0u;
    float _2497;
    float _2499;
    float _2501;
    if (_2442)
    {
        _2497 = _2435;
        _2499 = _2437;
        _2501 = _2439;
    }
    else
    {
        uint _2659 = _2257 + 7u;
        float _2675 = (dot(vec3(cbLight._m0[_2257 + 3u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2676 = _2675 * _2675;
        float _4627 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2677 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2678 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2497 = (((cbLight._m0[_2659].x * 0.3183098733425140380859375) * _2677) * _2678) + _2435;
        _2499 = (((cbLight._m0[_2659].y * 0.3183098733425140380859375) * _2677) * _2678) + _2437;
        _2501 = (((cbLight._m0[_2659].z * 0.3183098733425140380859375) * _2677) * _2678) + _2439;
    }
    uint _2504 = _2257 + 8u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _772) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2257].x + _848;
    float _2520 = cbLight._m0[_2257].y + _849;
    float _2521 = cbLight._m0[_2257].z + _850;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2257].xyz));
    float _4643 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _4654 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2533 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2534 = dot(vec3(_769, _770, _771), vec3(_2526, _2527, _2528));
    float _4665 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2538 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2526, _2527, _2528));
    float _4676 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2542 = _2518 * _2518;
    float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
    float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2558 = 1.0 - _2518;
    float _2569 = (0.5 / (((_2533 * ((_2532 * _2558) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2558) + _2518) * _2532))) * _2532;
    float _4687 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2571 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
    uint _2585 = _2257 + 9u;
    float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _772) * 0.949999988079071044921875);
    float _2597 = _2596 * _2596;
    float _2598 = cbLight._m0[_2297].x + _848;
    float _2599 = cbLight._m0[_2297].y + _849;
    float _2600 = cbLight._m0[_2297].z + _850;
    float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
    float _2605 = _2604 * _2598;
    float _2606 = _2604 * _2599;
    float _2607 = _2604 * _2600;
    float _2608 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2297].xyz));
    float _4698 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2612 = dot(vec3(_769, _770, _771), vec3(_2605, _2606, _2607));
    float _4709 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2616 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2605, _2606, _2607));
    float _4720 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = _2597 * _2597;
    float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
    float _2633 = (exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2634 = 1.0 - _2597;
    float _2644 = (0.5 / (((_2533 * ((_2611 * _2634) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2634) + _2597) * _2611))) * _2611;
    float _4731 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2646 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
    float _2656 = (((_2633 * cbLight._m0[_2585].x) * _2646) * _2280) + ((((cbLight._m0[_2504].x * _2246) * _2557) * _2571) * _2293);
    float _2657 = (((_2633 * cbLight._m0[_2585].y) * _2646) * _2280) + ((((cbLight._m0[_2504].y * _2248) * _2557) * _2571) * _2293);
    float _2658 = (((_2633 * cbLight._m0[_2585].z) * _2646) * _2280) + ((((cbLight._m0[_2504].z * _2250) * _2557) * _2571) * _2293);
    float _2714;
    float _2716;
    float _2718;
    if (_2333)
    {
        _2714 = _2656;
        _2716 = _2657;
        _2718 = _2658;
    }
    else
    {
        uint _2720 = _2257 + 2u;
        uint _2724 = _2257 + 10u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _772) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _848;
        float _2741 = cbLight._m0[_2720].y + _849;
        float _2742 = cbLight._m0[_2720].z + _850;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2720].xyz));
        float _4742 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2754 = dot(vec3(_769, _770, _771), vec3(_2747, _2748, _2749));
        float _4753 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4764 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2775 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2776 = 1.0 - _2739;
        float _2786 = (0.5 / (((_2533 * ((_2753 * _2776) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2776) + _2739) * _2753))) * _2753;
        float _4775 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2788 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2789 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2714 = (((_2775 * cbLight._m0[_2724].x) * _2788) * _2789) + _2656;
        _2716 = (((_2775 * cbLight._m0[_2724].y) * _2788) * _2789) + _2657;
        _2718 = (((_2775 * cbLight._m0[_2724].z) * _2788) * _2789) + _2658;
    }
    float _2820;
    float _2822;
    float _2824;
    if (_2442)
    {
        _2820 = _2714;
        _2822 = _2716;
        _2824 = _2718;
    }
    else
    {
        uint _2831 = _2257 + 3u;
        uint _2835 = _2257 + 11u;
        float _2849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2831].w)) * _772) * 0.949999988079071044921875);
        float _2850 = _2849 * _2849;
        float _2851 = cbLight._m0[_2831].x + _848;
        float _2852 = cbLight._m0[_2831].y + _849;
        float _2853 = cbLight._m0[_2831].z + _850;
        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
        float _2858 = _2857 * _2851;
        float _2859 = _2857 * _2852;
        float _2860 = _2857 * _2853;
        float _2861 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2831].xyz));
        float _4791 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2865 = dot(vec3(_769, _770, _771), vec3(_2858, _2859, _2860));
        float _4802 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2869 = dot(vec3(cbLight._m0[_2831].xyz), vec3(_2858, _2859, _2860));
        float _4813 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2873 = _2850 * _2850;
        float _2877 = ((_2868 * _2868) * (_2873 + (-1.0))) + 1.0;
        float _2886 = (exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2887 = 1.0 - _2850;
        float _2897 = (0.5 / (((_2533 * ((_2864 * _2887) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2533 * _2887) + _2850) * _2864))) * _2864;
        float _4824 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2899 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2873 / ((_2877 * _2877) * 3.141590118408203125));
        float _2900 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2820 = (((_2886 * cbLight._m0[_2835].x) * _2899) * _2900) + _2714;
        _2822 = (((_2886 * cbLight._m0[_2835].y) * _2899) * _2900) + _2716;
        _2824 = (((_2886 * cbLight._m0[_2835].z) * _2899) * _2900) + _2718;
    }
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_2255.y == 0u)
    {
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.x;
        uint _2933 = uint((float(_2921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _869) / _2922))) + floor(float(uint(cbSceneParam._m0[85u].x * _868) / _2922)));
        float _2943 = (log2(_2033 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2944 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        uint _2947 = uint(isnan(14.0) ? _2944 : (isnan(_2944) ? 14.0 : min(_2944, 14.0)));
        uvec4 _2952 = texelFetch(g_lightClusterGridBuffer, int(((_2947 << 2u) + (_2933 << 6u)) >> 2u));
        uint _2953 = _2952.x;
        uint _2954 = _2921.z;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((((1u << ((_2954 >> 4u) & 15u)) + 4294967295u) & _2953) == 0u) || ((_2954 & 240u) == 0u))
        {
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
        }
        else
        {
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            uint _3191 = 0u;
            uint _3200;
            bool _3201;
            for (;;)
            {
                _3200 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                _3201 = _3200 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3201)
                {
                    frontier_phi_71_pred = _3190;
                    frontier_phi_71_pred_1 = _3189;
                    frontier_phi_71_pred_2 = _3188;
                    frontier_phi_71_pred_3 = _3187;
                    frontier_phi_71_pred_4 = _3186;
                    frontier_phi_71_pred_5 = _3185;
                }
                else
                {
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    uint _3336;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3200;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    for (;;)
                    {
                        uint _3340 = uint(findLSB(_3336)) + (_3191 << 5u);
                        uint _3337 = (_3336 + 4294967295u) & _3336;
                        uint _3342 = _3340 * 48u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3362 = (_3340 * 48u) + 4u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3381 = (_3340 * 48u) + 8u;
                        vec3 _3392 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x));
                        float _3396 = _3356.x - _2031;
                        float _3397 = _3356.y - _2032;
                        float _3398 = _3356.z - _2033;
                        float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                        float _3402 = inversesqrt(_3399);
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3406 = dot(vec3(_887, _890, _893), vec3(_3403, _3404, _3405));
                        float _3411 = 1.0 - (_3399 * _3356.w);
                        float _4850 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3413 = sqrt(_3399) * _3375.w;
                        float _3416 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3406) + _3417;
                        float _3423 = _3413 * _3413;
                        float _3427 = ((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3412) / ((_3423 * 0.699999988079071044921875) + 1.0);
                        float _3431 = (-0.0) - _2031;
                        float _3432 = (-0.0) - _2032;
                        float _3433 = (-0.0) - _2033;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3447 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _947;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3460 = _3440 + _3405;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_887, _890, _893), vec3(_3438, _3439, _3440));
                        float _4866 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3472 = dot(vec3(_887, _890, _893), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4877 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3416 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3406) + _3481;
                        float _4888 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4899 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) / ((_3479 * _3479) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125))) * _3412;
                        _3260 = (_3427 * _3375.x) + _3333;
                        _3261 = (_3427 * _3375.y) + _3334;
                        _3262 = (_3427 * _3375.z) + _3335;
                        _3257 = (_3507 * _3392.x) + _3330;
                        _3258 = (_3507 * _3392.y) + _3331;
                        _3259 = (_3507 * _3392.z) + _3332;
                        if (_3337 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3337;
                        }
                    }
                    frontier_phi_71_pred = _3262;
                    frontier_phi_71_pred_1 = _3261;
                    frontier_phi_71_pred_2 = _3260;
                    frontier_phi_71_pred_3 = _3259;
                    frontier_phi_71_pred_4 = _3258;
                    frontier_phi_71_pred_5 = _3257;
                }
                _3044 = frontier_phi_71_pred;
                _3042 = frontier_phi_71_pred_1;
                _3040 = frontier_phi_71_pred_2;
                _3038 = frontier_phi_71_pred_3;
                _3036 = frontier_phi_71_pred_4;
                _3034 = frontier_phi_71_pred_5;
                uint _3192 = _3191 + 1u;
                if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3185 = _3034;
                    _3186 = _3036;
                    _3187 = _3038;
                    _3188 = _3040;
                    _3189 = _3042;
                    _3190 = _3044;
                    _3191 = _3192;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
        }
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.z;
        uint _3050 = (_3048 >> 8u) & 15u;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((4294967295u << _3050) & _2953) == 0u)
        {
            _3153 = _3033;
            _3155 = _3035;
            _3157 = _3037;
            _3159 = _3039;
            _3161 = _3041;
            _3163 = _3043;
        }
        else
        {
            float _3178 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
            float _3179 = _3178 * _2031;
            float _3180 = _3178 * _2032;
            float _3181 = _3178 * _2033;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3050 < ((_3048 >> 12u) & 15u))
            {
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3313 = _3033;
                float _3314 = _3035;
                float _3315 = _3037;
                float _3316 = _3039;
                float _3317 = _3041;
                float _3318 = _3043;
                uint _3319 = _3050;
                uint _3328;
                bool _3329;
                for (;;)
                {
                    _3328 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                    _3329 = _3328 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3329)
                    {
                        frontier_phi_82_pred = _3318;
                        frontier_phi_82_pred_1 = _3317;
                        frontier_phi_82_pred_2 = _3316;
                        frontier_phi_82_pred_3 = _3315;
                        frontier_phi_82_pred_4 = _3314;
                        frontier_phi_82_pred_5 = _3313;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        float _3537 = _3316;
                        float _3538 = _3317;
                        float _3539 = _3318;
                        uint _3540 = _3328;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3609;
                        vec4 _3624;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3551 = ((_3319 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3596 = (_3551 * 40u) + 16u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3551 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3551 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3551 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_2033, _3658.z, fma(_2032, _3658.y, _3658.x * _2031)) + _3658.w;
                            _3671 = !((fma(_2033, _3639.z, fma(_2032, _3639.y, _3639.x * _2031)) + _3639.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3566.x - _2031;
                                float _3699 = _3566.y - _2032;
                                float _3700 = _3566.z - _2033;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3567 * _3567));
                                float _4910 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3716 = sqrt(_3701) * _3582.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_887, _890, _893))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_2033, _3609.z, fma(_2032, _3609.y, _3609.x * _2031)) + _3609.w) / _3670;
                                float _3730 = (fma(_2033, _3624.z, fma(_2032, _3624.y, _3624.x * _2031)) + _3624.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4926 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _947;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3179;
                                float _3760 = _3706 - _3180;
                                float _3761 = _3707 - _3181;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_887, _890, _893), vec3((-0.0) - _3179, (-0.0) - _3180, (-0.0) - _3181));
                                float _4937 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3773 = dot(vec3(_887, _890, _893), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4948 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_887, _890, _893), vec3(_3705, _3706, _3707))) + _3782;
                                float _4959 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _4970 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3736 * _3582.z;
                                frontier_phi_88_pred_1 = _3736 * _3582.y;
                                frontier_phi_88_pred_2 = _3736 * _3582.x;
                                frontier_phi_88_pred_3 = _3810 * _3594.z;
                                frontier_phi_88_pred_4 = _3810 * _3594.y;
                                frontier_phi_88_pred_5 = _3810 * _3594.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_88_pred;
                            _3818 = frontier_phi_88_pred_1;
                            _3817 = frontier_phi_88_pred_2;
                            _3816 = frontier_phi_88_pred_3;
                            _3815 = frontier_phi_88_pred_4;
                            _3814 = frontier_phi_88_pred_5;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3526;
                        frontier_phi_82_pred_1 = _3525;
                        frontier_phi_82_pred_2 = _3524;
                        frontier_phi_82_pred_3 = _3523;
                        frontier_phi_82_pred_4 = _3522;
                        frontier_phi_82_pred_5 = _3521;
                    }
                    _3164 = frontier_phi_82_pred;
                    _3162 = frontier_phi_82_pred_1;
                    _3160 = frontier_phi_82_pred_2;
                    _3158 = frontier_phi_82_pred_3;
                    _3156 = frontier_phi_82_pred_4;
                    _3154 = frontier_phi_82_pred_5;
                    uint _3320 = _3319 + 1u;
                    if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3313 = _3154;
                        _3314 = _3156;
                        _3315 = _3158;
                        _3316 = _3160;
                        _3317 = _3162;
                        _3318 = _3164;
                        _3319 = _3320;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3160;
                frontier_phi_63_64_ladder_1 = _3164;
                frontier_phi_63_64_ladder_2 = _3162;
                frontier_phi_63_64_ladder_3 = _3158;
                frontier_phi_63_64_ladder_4 = _3156;
                frontier_phi_63_64_ladder_5 = _3154;
            }
            else
            {
                frontier_phi_63_64_ladder = _3039;
                frontier_phi_63_64_ladder_1 = _3043;
                frontier_phi_63_64_ladder_2 = _3041;
                frontier_phi_63_64_ladder_3 = _3037;
                frontier_phi_63_64_ladder_4 = _3035;
                frontier_phi_63_64_ladder_5 = _3033;
            }
            _3153 = frontier_phi_63_64_ladder_5;
            _3155 = frontier_phi_63_64_ladder_4;
            _3157 = frontier_phi_63_64_ladder_3;
            _3159 = frontier_phi_63_64_ladder;
            _3161 = frontier_phi_63_64_ladder_2;
            _3163 = frontier_phi_63_64_ladder_1;
        }
        float _3168 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
        _2966 = (_3168 * _3159) + _2497;
        _2968 = (_3168 * _3161) + _2499;
        _2970 = (_3168 * _3163) + _2501;
        _2972 = ((_3153 * 0.039999999105930328369140625) * _3168) + _2820;
        _2974 = ((_3155 * 0.039999999105930328369140625) * _3168) + _2822;
        _2976 = ((_3157 * 0.039999999105930328369140625) * _3168) + _2824;
    }
    else
    {
        _2966 = _2497;
        _2968 = _2499;
        _2970 = _2501;
        _2972 = _2820;
        _2974 = _2822;
        _2976 = _2824;
    }
    float _4986 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4997 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _5008 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2993 = ((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2966 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _931))) + ((_2972 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    float _2994 = ((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2968 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _931))) + ((_2974 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    float _2995 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2970 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _931))) + ((_2976 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1767)) * cbPerFrame._m0[3u].x);
    uint _2996 = _257 + 6u;
    float _3004 = _868 / cbSceneParam._m0[86u].x;
    float _3005 = _869 / cbSceneParam._m0[86u].y;
    vec4 _3019 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3021 = _3019.x;
    float _3022 = _3019.y;
    float _3023 = _3019.z;
    float _3024 = _3019.w;
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _3058 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _3059 = _3058 / _790;
        float _3070 = _3059 * _841;
        float _3071 = _842 * _3059;
        float _3072 = (-0.0) - _3071;
        float _3073 = _3059 * _843;
        float _3075 = (cbSceneParam._m0[77u].w * _3072) / _3058;
        float _3076 = _3075 + cbSceneParam._m0[79u].w;
        float _3077 = cbSceneParam._m0[79u].w - _3071;
        float _3083 = sqrt(((_3070 * _3070) + (_3071 * _3071)) + (_3073 * _3073));
        float _3086 = (1.0 - (cbSceneParam._m0[77u].w / _3058)) * _3083;
        float _3091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3270;
        if (abs((_3072 - _3075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3270 = ((((_3076 > 0.0) ? exp2(_3091 * _3076) : (2.0 - exp2(_3093 * _3076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3086;
        }
        else
        {
            float _3214 = 1.0 / cbSceneParam._m0[80u].x;
            float _3215 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : max(_3076, _3077));
            float _3216 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : min(_3076, _3077));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            _3270 = ((abs(_3083 / _3072) * cbSceneParam._m0[80u].y) * ((((_3225 - _3226) * 2.0) - ((exp2(_3091 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0)))) - exp2(_3091 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))))) * _3214)) - ((exp2(_3093 * _3225) - exp2(_3093 * _3226)) * _3214))) + (_3086 * cbSceneParam._m0[80u].z);
        }
        vec4 _3272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, 1.0), 0.0);
        float _3281 = exp2((_3270 * (-1.44269502162933349609375)) * (1.0 - _3272.w));
        float _3282 = log2(_3281);
        float _3298 = log2(_3024);
        _3095 = (exp2(_3298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].x)) * _3272.x) / cbSceneParam._m0[78u].x)) + _3021;
        _3097 = (exp2(_3298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].y)) * _3272.y) / cbSceneParam._m0[78u].y)) + _3022;
        _3099 = (exp2(_3298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].z)) * _3272.z) / cbSceneParam._m0[78u].z)) + _3023;
        _3101 = _3281 * _3024;
    }
    else
    {
        _3095 = _3021;
        _3097 = _3022;
        _3099 = _3023;
        _3101 = _3024;
    }
    bool _3308;
    vec4 _3111;
    vec4 _3133;
    float _3135;
    float _3139;
    float _3140;
    float _3141;
    float _3142;
    bool _3152;
    for (;;)
    {
        _3111 = cbMatDynParam._m0[0u];
        float _3113 = roundEven(_3111.y);
        bool _3114 = _3113 == 3.0;
        float _3115 = log2(_3101);
        float _3122 = exp2(_3115 * cbSceneParam._m0[78u].x) * _2993;
        float _3123 = exp2(_3115 * cbSceneParam._m0[78u].y) * _2994;
        float _3124 = exp2(_3115 * cbSceneParam._m0[78u].z) * _2995;
        float _3131 = _857 + (-0.5);
        _3133 = cbMtdParam._m0[1u];
        _3135 = _3133.y * _3131;
        float _3138 = (_3113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3139 = _3138 * (_3114 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3095)));
        _3140 = _3138 * (_3114 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3097)));
        _3141 = _3138 * (_3114 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3099)));
        _3142 = _3131 * 0.999000012874603271484375;
        _3152 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3152)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3142) < 0.5)
            {
                _3308 = true;
                break;
            }
        }
        uint _3249 = _906 + uint(_3111.w);
        if ((cbInstanceData._m0[_3249].w < 1.0) && ((cbInstanceData._m0[_3249].w + _3142) < 0.5))
        {
            _3308 = true;
            break;
        }
        if ((_3135 + 1.0) < _3133.x)
        {
            _3308 = true;
            break;
        }
        _3308 = false;
        break;
    }
    float _3512;
    if (_3308)
    {
        discard_state = true;
        _3512 = 0.0;
    }
    else
    {
        _3512 = cbInstanceData._m0[_2996].w;
    }
    SV_Target.x = _3139;
    SV_Target.y = _3140;
    SV_Target.z = _3141;
    SV_Target.w = _3512;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2996].w;
    discard_exit();
}


