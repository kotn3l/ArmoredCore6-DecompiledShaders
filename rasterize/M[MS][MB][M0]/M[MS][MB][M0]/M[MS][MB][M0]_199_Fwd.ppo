#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1311;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3614 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3625 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3636 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _400 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _417 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_390 - _400) * cbMtdParam._m0[24u].x) + _400) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3647 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _425 = (_418 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _426 = (_418 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _427 = (_418 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _466 = _464.x;
    float _476 = dot(vec4(_466, _464.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _490 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_466 - _476) * cbMtdParam._m0[24u].x) + _476) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3658 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _498 = (_491 * ((_444.x * cbMtdParam._m0[13u].x) - _425)) + _425;
    float _499 = (_491 * ((_444.y * cbMtdParam._m0[13u].y) - _426)) + _426;
    float _500 = (_491 * ((_444.z * cbMtdParam._m0[13u].z) - _427)) + _427;
    float _504 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _498;
    float _507 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _499;
    float _510 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _500;
    float _517 = ((_498 - _504) * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) + _504;
    float _518 = ((_499 - _507) * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) + _507;
    float _519 = ((_500 - _510) * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) + _510;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _418) + _599;
    float _609 = ((_580.y - _600) * _418) + _600;
    float _610 = ((_580.z - _601) * _418) + _601;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _635 = ((_622.z - _610) * _491) + _610;
    float _638 = ((((_622.x - _608) * _491) + _608) * 2.0) + (-1.0);
    float _639 = ((((_622.y - _609) * _491) + _609) * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3669 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    vec4 _659 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _684 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _700 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_686 - _687) * cbMtdParam._m0[24u].z) + _687) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3680 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _708 = (_701 * ((_538.x * cbMtdParam._m0[18u].x) - _517)) + _517;
    float _709 = (_701 * ((_538.y * cbMtdParam._m0[18u].y) - _518)) + _518;
    float _710 = (_701 * ((_538.z * cbMtdParam._m0[18u].z) - _519)) + _519;
    float _715 = (((_557.z - _635) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _635;
    float _719 = ((_659.z - _715) * cbMtdParam._m0[19u].w) + _715;
    vec4 _732 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _739 = (_732.x * 2.0) + (-1.0);
    float _740 = (_732.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _3691 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _749 = (_701 * (_732.z - _719)) + _719;
    float _758 = (_638 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_557.x * 2.0) + (-1.0)))) + (((_659.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _759 = (_639 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_557.y * 2.0) + (-1.0)))) + (((_659.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _771 = (((_739 - _758) + (cbMtdParam._m0[21u].x * _758)) * _701) + _758;
    float _772 = (((_740 - _759) + (cbMtdParam._m0[21u].x * _759)) * _701) + _759;
    float _773 = (_701 * (sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) - _645)) + _645;
    float _775 = cbMtdParam._m0[22u].x + _659.w;
    float _778 = fma(_773, _234 * NORMAL.x, fma(_772, _241 * TANGENT.x, (_227 * _219) * _771));
    float _781 = fma(_773, _234 * NORMAL.y, fma(_772, _241 * TANGENT.y, (_227 * _220) * _771));
    float _784 = fma(_773, _234 * NORMAL.z, fma(_772, _241 * TANGENT.z, (_227 * _221) * _771));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3702 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _792 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3724 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _3735 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3746 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    float _877 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _878 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _896 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _899 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _902 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _916 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _922 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_916].x;
    float _923 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_916].y;
    float _924 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_916].z;
    float _3757 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    vec4 _936 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _877, cbSceneParam._m0[86u].y * _878));
    float _940 = ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * TEXCOORD_5.w) * _936.x;
    float _941 = dot(vec3(_789, _790, _791), vec3(_869, _870, _871));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _789) - _869;
    float _949 = (_944 * _790) - _870;
    float _950 = (_944 * _791) - _871;
    float _954 = abs(dot(vec3(_869, _870, _871), vec3(_789, _790, _791)));
    float _3790 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_792);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1310;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1035 = fma(_1009, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001));
        float _1039 = fma(_1009, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001));
        float _1043 = fma(_1009, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001));
        float _1068 = _1001 + _789;
        float _1069 = _1005 + _790;
        float _1070 = _1009 + _791;
        float _1080 = fma(_1070, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068)) - _1035;
        float _1081 = fma(_1070, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068)) - _1039;
        float _1082 = fma(_1070, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068)) - _1043;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1035 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1039 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[34u].z) + ((((((_1043 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1138 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1104.x + (-0.5));
        float _1140 = _1138 * (_1104.y + (-0.5));
        float _1141 = _1138 * (_1104.z + (-0.5));
        float _1148 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1111.x + (-0.5));
        float _1150 = _1148 * (_1111.y + (-0.5));
        float _1151 = _1148 * (_1111.z + (-0.5));
        float _1158 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1118.x + (-0.5));
        float _1160 = _1158 * (_1118.y + (-0.5));
        float _1161 = _1158 * (_1118.z + (-0.5));
        float _1168 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1125.x + (-0.5));
        float _1170 = _1168 * (_1125.y + (-0.5));
        float _1171 = _1168 * (_1125.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1192 = (dot(vec3(_789, _790, _791), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1202 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3838 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1204 + 1.0))) + _1209) * _1172;
        float _1219 = _1140 * 0.5;
        float _1220 = _1150 * 0.5;
        float _1221 = _1160 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_789, _790, _791), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3871 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1246 + 1.0))) + _1251) * _1173;
        float _1261 = _1141 * 0.5;
        float _1262 = _1151 * 0.5;
        float _1263 = _1161 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_789, _790, _791), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3904 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1288 + 1.0))) + _1293) * _1174;
        _1310 = _1141;
        _1312 = _1140;
        _1313 = _1139;
        _1314 = _1151;
        _1315 = _1150;
        _1316 = _1149;
        _1317 = _1161;
        _1318 = _1160;
        _1319 = _1159;
        _1320 = _1174;
        _1321 = _1173;
        _1322 = _1172;
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1311;
        _1312 = _1311;
        _1313 = _1311;
        _1314 = _1311;
        _1315 = _1311;
        _1316 = _1311;
        _1317 = _1311;
        _1318 = _1311;
        _1319 = _1311;
        _1320 = _1311;
        _1321 = _1311;
        _1322 = _1311;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1349 = fma(_1009, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001));
        float _1353 = fma(_1009, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001));
        float _1357 = fma(_1009, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001));
        float _1380 = _1001 + _789;
        float _1381 = _1005 + _790;
        float _1382 = _1009 + _791;
        float _1392 = fma(_1382, cbModelParam._m0[30u].z, fma(_1381, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1380)) - _1349;
        float _1393 = fma(_1382, cbModelParam._m0[31u].z, fma(_1381, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1380)) - _1353;
        float _1394 = fma(_1382, cbModelParam._m0[32u].z, fma(_1381, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1380)) - _1357;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1349 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1353 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[35u].z) + ((((((_1357 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1448 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1415.x + (-0.5));
        float _1450 = _1448 * (_1415.y + (-0.5));
        float _1451 = _1448 * (_1415.z + (-0.5));
        float _1458 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1422.x + (-0.5));
        float _1460 = _1458 * (_1422.y + (-0.5));
        float _1461 = _1458 * (_1422.z + (-0.5));
        float _1468 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1429.x + (-0.5));
        float _1470 = _1468 * (_1429.y + (-0.5));
        float _1471 = _1468 * (_1429.z + (-0.5));
        float _1478 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1436.x + (-0.5));
        float _1480 = _1478 * (_1436.y + (-0.5));
        float _1481 = _1478 * (_1436.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_789, _790, _791), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _3967 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1512 + 1.0))) + _1517) * _1482;
        float _1527 = _1450 * 0.5;
        float _1528 = _1460 * 0.5;
        float _1529 = _1470 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_789, _790, _791), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4000 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1554 + 1.0))) + _1559) * _1483;
        float _1569 = _1451 * 0.5;
        float _1570 = _1461 * 0.5;
        float _1571 = _1471 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_789, _790, _791), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4033 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1596 + 1.0))) + _1601) * _1484;
        _1618 = _1451;
        _1619 = _1450;
        _1620 = _1449;
        _1621 = _1461;
        _1622 = _1460;
        _1623 = _1459;
        _1624 = _1471;
        _1625 = _1470;
        _1626 = _1469;
        _1627 = _1484;
        _1628 = _1483;
        _1629 = _1482;
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1311;
        _1619 = _1311;
        _1620 = _1311;
        _1621 = _1311;
        _1622 = _1311;
        _1623 = _1311;
        _1624 = _1311;
        _1625 = _1311;
        _1626 = _1311;
        _1627 = _1311;
        _1628 = _1311;
        _1629 = _1311;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1323)) + _1323;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1324)) + _1324;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1325)) + _1325;
    float _1665 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1642));
    float _1686 = _948 * 0.5;
    float _1687 = _949 * 0.5;
    float _1688 = _950 * 0.5;
    float _1689 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1692 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1695 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1729;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1702 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1310, _1314, _1317, _1320));
        float _1706 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1710 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1717 = dot(vec4(cbModelParam._m0[39u]), vec4(_1686, _1687, _1688, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1740;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1731 = dot(vec4(cbModelParam._m0[40u]), vec4(_1686, _1687, _1688, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1744 = (_1740 * cbModelParam._m0[1u].x) + (_1729 * (1.0 - cbModelParam._m0[1u].x));
    float _1754 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1754 : min(cbModelParam._m0[25u].z, _1754));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1802 = fma(_1009, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001)) + cbModelParam._m0[13u].w;
        float _1806 = fma(_1009, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001)) + cbModelParam._m0[14u].w;
        float _1810 = fma(_1009, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001)) + cbModelParam._m0[15u].w;
        float _1813 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1816 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1819 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1847;
        if (_1813 > 0.0)
        {
            _1847 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1847 = frontier_phi_14_12_ladder;
        }
        float _2047;
        if (_1816 > 0.0)
        {
            _2047 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2047 = frontier_phi_23_19_ladder;
        }
        float _2290;
        if (_1819 > 0.0)
        {
            _2290 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2290 = frontier_phi_35_30_ladder;
        }
        float _2292 = isnan(_2047) ? _1847 : (isnan(_1847) ? _2047 : min(_1847, _2047));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1813) + _1802;
        float _2298 = (_2293 * _1816) + _1806;
        float _2299 = (_2293 * _1819) + _1810;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1755);
            frontier_phi_13_35_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1835 = frontier_phi_13_35_ladder_2;
        _1837 = frontier_phi_13_35_ladder_1;
        _1839 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1755);
        _1835 = _1823.x * cbModelParam._m0[1u].y;
        _1837 = _1823.y * cbModelParam._m0[1u].y;
        _1839 = _1823.z * cbModelParam._m0[1u].y;
    }
    float _1843 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1843 : min(cbModelParam._m0[25u].w, _1843));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_1009, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_1009, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_1009, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1911 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1914 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2052;
        if (_1908 > 0.0)
        {
            _2052 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2317;
        if (_1911 > 0.0)
        {
            _2317 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2317 = frontier_phi_37_32_ladder;
        }
        float _2522;
        if (_1914 > 0.0)
        {
            _2522 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2522 = frontier_phi_46_43_ladder;
        }
        float _2524 = isnan(_2317) ? _2052 : (isnan(_2052) ? _2317 : min(_2052, _2317));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1908) + _1897;
        float _2530 = (_2525 * _1911) + _1901;
        float _2531 = (_2525 * _1914) + _1905;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1844);
            frontier_phi_22_46_ladder = _2730.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2730.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2730.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_22_46_ladder_2;
        _1935 = frontier_phi_22_46_ladder_1;
        _1937 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1844);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1949 = ((((1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_969 * _956)) * _940;
    float _1950 = _1949 * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1951 = _1949 * ((cbModelParam._m0[1u].w * (_1935 - _1837)) + _1837);
    float _1952 = _1949 * ((cbModelParam._m0[1u].w * (_1937 - _1839)) + _1839);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    uvec4 _1971 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1973 = _1971.x * 14u;
    uint _1974 = _1973 + 13u;
    float _1981 = _940 + (-1.0);
    float _1986 = (cbLight._m0[_1974].x * _1981) + 1.0;
    float _1987 = (cbLight._m0[_1974].y * _1981) + 1.0;
    float _1988 = (cbLight._m0[_1974].z * _1981) + 1.0;
    float _1989 = (cbLight._m0[_1974].w * _1981) + 1.0;
    uint _1990 = _1973 + 5u;
    float _1996 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2000 = _1973 + 4u;
    float _2006 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2010 = _1973 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_789, _790, _791));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_789, _790, _791));
    float _4169 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4180 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1990].x * _1996) * _2031) + ((cbLight._m0[_2000].x * _2006) * _2029);
    float _2039 = ((_1996 * cbLight._m0[_1990].y) * _2031) + ((_2006 * cbLight._m0[_2000].y) * _2029);
    float _2040 = ((_1996 * cbLight._m0[_1990].z) * _2031) + ((_2006 * cbLight._m0[_2000].z) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1973 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2046)
    {
        _2057 = _2038;
        _2059 = _2039;
        _2061 = _2040;
    }
    else
    {
        uint _2065 = _1973 + 6u;
        float _2081 = (dot(vec3(cbLight._m0[_1973 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4191 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2084 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2057 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _2038;
        _2059 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _2039;
        _2061 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _2040;
    }
    bool _2064 = _2044.y == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2064)
    {
        _2102 = _2057;
        _2104 = _2059;
        _2106 = _2061;
    }
    else
    {
        uint _2261 = _1973 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1973 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4207 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2280 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2102 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2057;
        _2104 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2059;
        _2106 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2061;
    }
    uint _2109 = _1973 + 8u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _792) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1973].x + _869;
    float _2125 = cbLight._m0[_1973].y + _870;
    float _2126 = cbLight._m0[_1973].z + _871;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_1973].xyz));
    float _4223 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2138 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2139 = dot(vec3(_789, _790, _791), vec3(_2131, _2132, _2133));
    float _4245 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2131, _2132, _2133));
    float _4256 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2123 * _2123;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2162 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2163 = 1.0 - _2123;
    float _2174 = (0.5 / (((_2138 * ((_2137 * _2163) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2163) + _2123) * _2137))) * _2137;
    float _4267 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    uint _2187 = _1973 + 9u;
    float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _792) * 0.949999988079071044921875);
    float _2199 = _2198 * _2198;
    float _2200 = cbLight._m0[_2010].x + _869;
    float _2201 = cbLight._m0[_2010].y + _870;
    float _2202 = cbLight._m0[_2010].z + _871;
    float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
    float _2207 = _2206 * _2200;
    float _2208 = _2206 * _2201;
    float _2209 = _2206 * _2202;
    float _2210 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2010].xyz));
    float _4278 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2214 = dot(vec3(_789, _790, _791), vec3(_2207, _2208, _2209));
    float _4289 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2207, _2208, _2209));
    float _4300 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2199 * _2199;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2235 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2236 = 1.0 - _2199;
    float _2246 = (0.5 / (((_2138 * ((_2213 * _2236) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2236) + _2199) * _2213))) * _2213;
    float _4311 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    float _2258 = (((_2235 * cbLight._m0[_2187].x) * _2248) * _1996) + (((_2162 * cbLight._m0[_2109].x) * _2176) * _2006);
    float _2259 = (((_2235 * cbLight._m0[_2187].y) * _2248) * _1996) + (((_2162 * cbLight._m0[_2109].y) * _2176) * _2006);
    float _2260 = (((_2235 * cbLight._m0[_2187].z) * _2248) * _1996) + (((_2162 * cbLight._m0[_2109].z) * _2176) * _2006);
    float _2322;
    float _2324;
    float _2326;
    if (_2046)
    {
        _2322 = _2258;
        _2324 = _2259;
        _2326 = _2260;
    }
    else
    {
        uint _2328 = _1973 + 2u;
        uint _2332 = _1973 + 10u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _792) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _869;
        float _2349 = cbLight._m0[_2328].y + _870;
        float _2350 = cbLight._m0[_2328].z + _871;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2328].xyz));
        float _4322 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2362 = dot(vec3(_789, _790, _791), vec3(_2355, _2356, _2357));
        float _4333 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4344 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2383 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2384 = 1.0 - _2347;
        float _2394 = (0.5 / (((_2138 * ((_2361 * _2384) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2384) + _2347) * _2361))) * _2361;
        float _4355 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2322 = (((_2383 * cbLight._m0[_2332].x) * _2396) * _2397) + _2258;
        _2324 = (((_2383 * cbLight._m0[_2332].y) * _2396) * _2397) + _2259;
        _2326 = (((_2383 * cbLight._m0[_2332].z) * _2396) * _2397) + _2260;
    }
    float _2432;
    float _2434;
    float _2436;
    if (_2064)
    {
        _2432 = _2322;
        _2434 = _2324;
        _2436 = _2326;
    }
    else
    {
        uint _2443 = _1973 + 3u;
        uint _2447 = _1973 + 11u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _792) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _869;
        float _2464 = cbLight._m0[_2443].y + _870;
        float _2465 = cbLight._m0[_2443].z + _871;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2443].xyz));
        float _4371 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2477 = dot(vec3(_789, _790, _791), vec3(_2470, _2471, _2472));
        float _4382 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4393 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2498 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2499 = 1.0 - _2462;
        float _2509 = (0.5 / (((_2138 * ((_2476 * _2499) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2499) + _2462) * _2476))) * _2476;
        float _4404 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2432 = (((_2498 * cbLight._m0[_2447].x) * _2511) * _2512) + _2322;
        _2434 = (((_2498 * cbLight._m0[_2447].y) * _2511) * _2512) + _2324;
        _2436 = (((_2498 * cbLight._m0[_2447].z) * _2511) * _2512) + _2326;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1971.y == 0u)
    {
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2587;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2587;
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2587;
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.x;
        uint _2614 = uint((float(_2602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _878) / _2603))) + floor(float(uint(cbSceneParam._m0[85u].x * _877) / _2603)));
        float _2624 = (log2(_2590 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        uint _2628 = uint(isnan(14.0) ? _2625 : (isnan(_2625) ? 14.0 : min(_2625, 14.0)));
        uvec4 _2633 = texelFetch(g_lightClusterGridBuffer, int(((_2628 << 2u) + (_2614 << 6u)) >> 2u));
        uint _2634 = _2633.x;
        uint _2635 = _2602.z;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((((1u << ((_2635 >> 4u) & 15u)) + 4294967295u) & _2634) == 0u) || ((_2635 & 240u) == 0u))
        {
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
        }
        else
        {
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2896)
                {
                    frontier_phi_61_pred = _2880;
                    frontier_phi_61_pred_1 = _2885;
                    frontier_phi_61_pred_2 = _2884;
                    frontier_phi_61_pred_3 = _2883;
                    frontier_phi_61_pred_4 = _2882;
                    frontier_phi_61_pred_5 = _2881;
                }
                else
                {
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    uint _3010;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2883;
                    _3008 = _2884;
                    _3009 = _2885;
                    _3010 = _2895;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3014 = uint(findLSB(_3010)) + (_2886 << 5u);
                        uint _3011 = (_3010 + 4294967295u) & _3010;
                        uint _3016 = _3014 * 48u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3036 = (_3014 * 48u) + 4u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3055 = (_3014 * 48u) + 8u;
                        vec3 _3066 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x));
                        float _3070 = _3030.x - _2588;
                        float _3071 = _3030.y - _2589;
                        float _3072 = _3030.z - _2590;
                        float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                        float _3076 = inversesqrt(_3073);
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3080 = dot(vec3(_896, _899, _902), vec3(_3077, _3078, _3079));
                        float _3085 = 1.0 - (_3073 * _3030.w);
                        float _4430 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3087 = sqrt(_3073) * _3049.w;
                        float _3090 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3080) + _3091;
                        float _3097 = _3087 * _3087;
                        float _3101 = ((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3086) / ((_3097 * 0.699999988079071044921875) + 1.0);
                        float _3105 = (-0.0) - _2588;
                        float _3106 = (-0.0) - _2589;
                        float _3107 = (-0.0) - _2590;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3122 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _956;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3112 + _3077;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_896, _899, _902), vec3(_3112, _3113, _3114));
                        float _4446 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3147 = dot(vec3(_896, _899, _902), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4457 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3090 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3080) + _3156;
                        float _4468 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4479 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3154 * _3154) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125))) * _3086;
                        _2939 = (_3101 * _3049.x) + _3007;
                        _2940 = (_3101 * _3049.y) + _3008;
                        _2941 = (_3101 * _3049.z) + _3009;
                        _2936 = (_3182 * _3066.x) + _3004;
                        _2937 = (_3182 * _3066.y) + _3005;
                        _2938 = (_3182 * _3066.z) + _3006;
                        if (_3011 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _2939;
                            _3008 = _2940;
                            _3009 = _2941;
                            _3010 = _3011;
                        }
                    }
                    frontier_phi_61_pred = _2936;
                    frontier_phi_61_pred_1 = _2941;
                    frontier_phi_61_pred_2 = _2940;
                    frontier_phi_61_pred_3 = _2939;
                    frontier_phi_61_pred_4 = _2938;
                    frontier_phi_61_pred_5 = _2937;
                }
                _2736 = frontier_phi_61_pred;
                _2746 = frontier_phi_61_pred_1;
                _2744 = frontier_phi_61_pred_2;
                _2742 = frontier_phi_61_pred_3;
                _2740 = frontier_phi_61_pred_4;
                _2738 = frontier_phi_61_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2736;
                    _2881 = _2738;
                    _2882 = _2740;
                    _2883 = _2742;
                    _2884 = _2744;
                    _2885 = _2746;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
        }
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.z;
        uint _2752 = (_2750 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2752) & _2634) == 0u)
        {
            _2848 = _2735;
            _2850 = _2737;
            _2852 = _2739;
            _2854 = _2741;
            _2856 = _2743;
            _2858 = _2745;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
            float _2874 = _2873 * _2588;
            float _2875 = _2873 * _2589;
            float _2876 = _2873 * _2590;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2752 < ((_2750 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2987 = _2735;
                float _2988 = _2737;
                float _2989 = _2739;
                float _2990 = _2741;
                float _2991 = _2743;
                float _2992 = _2745;
                uint _2993 = _2752;
                uint _3002;
                bool _3003;
                for (;;)
                {
                    _3002 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                    _3003 = _3002 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3003)
                    {
                        frontier_phi_67_pred = _2990;
                        frontier_phi_67_pred_1 = _2991;
                        frontier_phi_67_pred_2 = _2992;
                        frontier_phi_67_pred_3 = _2989;
                        frontier_phi_67_pred_4 = _2988;
                        frontier_phi_67_pred_5 = _2987;
                    }
                    else
                    {
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        float _3203 = _2990;
                        float _3204 = _2991;
                        float _3205 = _2992;
                        uint _3206 = _3002;
                        uint _3207;
                        vec4 _3232;
                        float _3233;
                        vec4 _3248;
                        vec3 _3260;
                        vec4 _3275;
                        vec4 _3290;
                        float _3336;
                        bool _3337;
                        for (;;)
                        {
                            uint _3217 = ((_2993 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3206));
                            _3207 = (_3206 + 4294967295u) & _3206;
                            uint _3219 = _3217 * 40u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3233 = _3232.w;
                            uint _3235 = (_3217 * 40u) + 4u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3217 * 40u) + 8u;
                            _3260 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x));
                            uint _3262 = (_3217 * 40u) + 16u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3277 = (_3217 * 40u) + 20u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3217 * 40u) + 24u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3311 = (_3217 * 40u) + 28u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3336 = fma(_2590, _3324.z, fma(_2589, _3324.y, _3324.x * _2588)) + _3324.w;
                            _3337 = !((fma(_2590, _3305.z, fma(_2589, _3305.y, _3305.x * _2588)) + _3305.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3337)
                            {
                                float _3364 = _3232.x - _2588;
                                float _3365 = _3232.y - _2589;
                                float _3366 = _3232.z - _2590;
                                float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                                float _3370 = inversesqrt(_3367);
                                float _3371 = _3370 * _3364;
                                float _3372 = _3370 * _3365;
                                float _3373 = _3370 * _3366;
                                float _3377 = 1.0 - (_3367 / (_3233 * _3233));
                                float _4490 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3382 = sqrt(_3367) * _3248.w;
                                float _3384 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                                float _3385 = _3384 * _3384;
                                float _3388 = ((1.0 - _3385) * dot(vec3(_3371, _3372, _3373), vec3(_896, _899, _902))) + _3385;
                                float _3391 = _3382 * _3382;
                                float _3395 = (fma(_2590, _3275.z, fma(_2589, _3275.y, _3275.x * _2588)) + _3275.w) / _3336;
                                float _3396 = (fma(_2590, _3290.z, fma(_2589, _3290.y, _3290.x * _2588)) + _3290.w) / _3336;
                                float _3400 = 1.0 - dot(vec2(_3395, _3396), vec2(_3395, _3396));
                                float _4506 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3402 = _3401 * (((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3378) / ((_3391 * 0.699999988079071044921875) + 1.0));
                                float _3414 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                                float _3415 = 1.0 - _956;
                                float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                                float _3423 = _3422 * _3422;
                                float _3424 = _3423 * _3423;
                                float _3425 = _3371 - _2874;
                                float _3426 = _3372 - _2875;
                                float _3427 = _3373 - _2876;
                                float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                                float _3435 = dot(vec3(_896, _899, _902), vec3((-0.0) - _2874, (-0.0) - _2875, (-0.0) - _2876));
                                float _4517 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3439 = dot(vec3(_896, _899, _902), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                                float _4528 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                                float _3447 = _3384 * _3423;
                                float _3448 = _3447 * _3447;
                                float _3454 = ((1.0 - _3448) * dot(vec3(_896, _899, _902), vec3(_3371, _3372, _3373))) + _3448;
                                float _4539 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3456 = 1.0 - _3423;
                                float _3466 = (0.5 / (((_3455 * ((_3438 * _3456) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3423) * _3438))) * _3455;
                                float _4550 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3476 = (_3401 * _3378) * (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3446 * _3446) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3476 * _3260.x;
                                frontier_phi_73_pred_1 = _3476 * _3260.y;
                                frontier_phi_73_pred_2 = _3402 * _3248.z;
                                frontier_phi_73_pred_3 = _3402 * _3248.y;
                                frontier_phi_73_pred_4 = _3402 * _3248.x;
                                frontier_phi_73_pred_5 = _3476 * _3260.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3480 = frontier_phi_73_pred;
                            _3481 = frontier_phi_73_pred_1;
                            _3485 = frontier_phi_73_pred_2;
                            _3484 = frontier_phi_73_pred_3;
                            _3483 = frontier_phi_73_pred_4;
                            _3482 = frontier_phi_73_pred_5;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3192 = _3485 + _3205;
                            _3187 = _3480 + _3200;
                            _3188 = _3481 + _3201;
                            _3189 = _3482 + _3202;
                            if (_3207 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3207;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3190;
                        frontier_phi_67_pred_1 = _3191;
                        frontier_phi_67_pred_2 = _3192;
                        frontier_phi_67_pred_3 = _3189;
                        frontier_phi_67_pred_4 = _3188;
                        frontier_phi_67_pred_5 = _3187;
                    }
                    _2855 = frontier_phi_67_pred;
                    _2857 = frontier_phi_67_pred_1;
                    _2859 = frontier_phi_67_pred_2;
                    _2853 = frontier_phi_67_pred_3;
                    _2851 = frontier_phi_67_pred_4;
                    _2849 = frontier_phi_67_pred_5;
                    uint _2994 = _2993 + 1u;
                    if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2987 = _2849;
                        _2988 = _2851;
                        _2989 = _2853;
                        _2990 = _2855;
                        _2991 = _2857;
                        _2992 = _2859;
                        _2993 = _2994;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2857;
                frontier_phi_55_56_ladder_1 = _2859;
                frontier_phi_55_56_ladder_2 = _2855;
                frontier_phi_55_56_ladder_3 = _2853;
                frontier_phi_55_56_ladder_4 = _2851;
                frontier_phi_55_56_ladder_5 = _2849;
            }
            else
            {
                frontier_phi_55_56_ladder = _2743;
                frontier_phi_55_56_ladder_1 = _2745;
                frontier_phi_55_56_ladder_2 = _2741;
                frontier_phi_55_56_ladder_3 = _2739;
                frontier_phi_55_56_ladder_4 = _2737;
                frontier_phi_55_56_ladder_5 = _2735;
            }
            _2848 = frontier_phi_55_56_ladder_5;
            _2850 = frontier_phi_55_56_ladder_4;
            _2852 = frontier_phi_55_56_ladder_3;
            _2854 = frontier_phi_55_56_ladder_2;
            _2856 = frontier_phi_55_56_ladder;
            _2858 = frontier_phi_55_56_ladder_1;
        }
        float _2863 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2647 = (_2863 * _2854) + _2102;
        _2649 = (_2863 * _2856) + _2104;
        _2651 = (_2863 * _2858) + _2106;
        _2653 = ((_2848 * 0.039999999105930328369140625) * _2863) + _2432;
        _2655 = ((_2850 * 0.039999999105930328369140625) * _2863) + _2434;
        _2657 = ((_2852 * 0.039999999105930328369140625) * _2863) + _2436;
    }
    else
    {
        _2647 = _2102;
        _2649 = _2104;
        _2651 = _2106;
        _2653 = _2432;
        _2655 = _2434;
        _2657 = _2436;
    }
    float _4566 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4577 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4588 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    uint _2677 = _268 + 6u;
    float _2685 = _877 / cbSceneParam._m0[86u].x;
    float _2686 = _878 / cbSceneParam._m0[86u].y;
    vec4 _2700 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2702 = _2700.x;
    float _2703 = _2700.y;
    float _2704 = _2700.z;
    float _2705 = _2700.w;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2760 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2761 = _2760 / _810;
        float _2772 = _2761 * _862;
        float _2773 = _863 * _2761;
        float _2774 = (-0.0) - _2773;
        float _2776 = _2761 * _864;
        float _2778 = (cbSceneParam._m0[77u].w * _2774) / _2760;
        float _2779 = _2778 + cbSceneParam._m0[79u].w;
        float _2780 = cbSceneParam._m0[79u].w - _2773;
        float _2786 = sqrt(((_2772 * _2772) + (_2773 * _2773)) + (_2776 * _2776));
        float _2789 = (1.0 - (cbSceneParam._m0[77u].w / _2760)) * _2786;
        float _2794 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2796 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2774 - _2778) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2779 > 0.0) ? exp2(_2794 * _2779) : (2.0 - exp2(_2796 * _2779))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2789;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : max(_2779, _2780));
            float _2911 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : min(_2779, _2780));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2949 = ((abs(_2786 / _2774) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2794 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2794 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2796 * _2920) - exp2(_2796 * _2921)) * _2909))) + (_2789 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2705);
        _2798 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2702;
        _2800 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2703;
        _2802 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2704;
        _2804 = _2960 * _2705;
    }
    else
    {
        _2798 = _2702;
        _2800 = _2703;
        _2802 = _2704;
        _2804 = _2705;
    }
    float _2816 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2817 = _2816 == 3.0;
    float _2818 = log2(_2804);
    float _2825 = exp2(_2818 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2647 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _940))) + ((_2653 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1744)) * cbPerFrame._m0[3u].x));
    float _2826 = exp2(_2818 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2649 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _940))) + ((_2655 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1744)) * cbPerFrame._m0[3u].x));
    float _2827 = exp2(_2818 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2651 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _940))) + ((_2657 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1744)) * cbPerFrame._m0[3u].x));
    float _2836 = (_2816 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2836 * (_2817 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2798)));
    SV_Target.y = _2836 * (_2817 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2800)));
    SV_Target.z = _2836 * (_2817 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2802)));
    SV_Target.w = cbInstanceData._m0[_2677].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2677].w;
}


