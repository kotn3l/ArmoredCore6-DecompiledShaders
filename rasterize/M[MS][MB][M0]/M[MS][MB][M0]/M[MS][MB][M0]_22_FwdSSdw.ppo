#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1001;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _244) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _245) + cbTextureTilingScale._m0[20u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _320 = _316.z;
    float _324 = (_316.x * 2.0) + (-1.0);
    float _325 = (_316.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_324, _325), vec2(_324, _325));
    float _3334 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))));
    float _337 = _324 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_290.x * 2.0) + (-1.0)));
    float _338 = _325 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_290.y * 2.0) + (-1.0)));
    float _341 = fma(_332, _212, fma(_338, _219, _337 * _205));
    float _344 = fma(_332, _213, fma(_338, _220, _337 * _206));
    float _347 = fma(_332, _214, fma(_338, _221, _337 * _207));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    vec4 _387 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _389 = _387.x;
    float _390 = 1.0 - _389;
    float _399 = (cbMtdParam._m0[19u].x + dot(vec4(_351 * _341, _351 * _344, _351 * _347, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_389 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[21u].z);
    float _3345 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _407 = (_400 * (cbMtdParam._m0[17u].x - _270)) + _270;
    float _408 = (_400 * (cbMtdParam._m0[17u].y - _271)) + _271;
    float _409 = (_400 * (cbMtdParam._m0[17u].z - _272)) + _272;
    float _414 = (((_290.z - _320) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _320;
    vec4 _427 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _434 = (_427.x * 2.0) + (-1.0);
    float _435 = (_427.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_434, _435), vec2(_434, _435));
    float _3356 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _444 = ((_427.z - _414) * _400) + _414;
    float _454 = ((sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) - _332) * _400) + _332;
    float _457 = (((_434 - _337) * _400) + _337) + (cbMtdParam._m0[21u].x * _337);
    float _458 = (((_435 - _338) * _400) + _338) + (cbMtdParam._m0[21u].x * _338);
    float _463 = cbMtdParam._m0[22u].x + _316.w;
    float _466 = fma(_454, _212, fma(_458, _219, _457 * _205));
    float _469 = fma(_454, _213, fma(_458, _220, _457 * _206));
    float _472 = fma(_454, _214, fma(_458, _221, _457 * _207));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    float _477 = _476 * _466;
    float _478 = _476 * _469;
    float _479 = _476 * _472;
    float _3367 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _480 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3389 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3400 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3411 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _498 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _549 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _539);
    float _550 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _539);
    float _551 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _539);
    float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
    float _556 = _549 * _555;
    float _557 = _550 * _555;
    float _558 = _551 * _555;
    float _564 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _565 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_479, cbSceneParam._m0[5u].z, fma(_478, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _477));
    float _589 = fma(_479, cbSceneParam._m0[6u].z, fma(_478, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _477));
    float _592 = fma(_479, cbSceneParam._m0[7u].z, fma(_478, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _477));
    uint _606 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _612 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_606].x;
    float _613 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_606].y;
    float _614 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_606].z;
    float _3422 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _564, cbSceneParam._m0[86u].y * _565));
    float _630 = ((isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * TEXCOORD_5.w) * _626.x;
    float _631 = dot(vec3(_477, _478, _479), vec3(_556, _557, _558));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _477) - _556;
    float _639 = (_634 * _478) - _557;
    float _640 = (_634 * _479) - _558;
    float _644 = abs(dot(vec3(_556, _557, _558), vec3(_477, _478, _479)));
    float _3455 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_480);
    float _659 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1000;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _725 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _729 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _733 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _758 = _691 + _477;
        float _759 = _695 + _478;
        float _760 = _699 + _479;
        float _770 = fma(_760, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) - _725;
        float _771 = fma(_760, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) - _729;
        float _772 = fma(_760, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) - _733;
        float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
        float _789 = ((_776 * _770) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_725 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_776 * _771) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_729 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_776 * _772) / cbModelParam._m0[34u].z) + ((((((_733 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        float _828 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_794.x + (-0.5));
        float _830 = _828 * (_794.y + (-0.5));
        float _831 = _828 * (_794.z + (-0.5));
        float _838 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_801.x + (-0.5));
        float _840 = _838 * (_801.y + (-0.5));
        float _841 = _838 * (_801.z + (-0.5));
        float _848 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_808.x + (-0.5));
        float _850 = _848 * (_808.y + (-0.5));
        float _851 = _848 * (_808.z + (-0.5));
        float _858 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_815.x + (-0.5));
        float _860 = _858 * (_815.y + (-0.5));
        float _861 = _858 * (_815.z + (-0.5));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = _829 * 0.5;
        float _866 = _839 * 0.5;
        float _867 = _849 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _882 = (dot(vec3(_477, _478, _479), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _892 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3503 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_894 + 1.0))) + _899) * _862;
        float _909 = _830 * 0.5;
        float _910 = _840 * 0.5;
        float _911 = _850 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_477, _478, _479), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3536 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_936 + 1.0))) + _941) * _863;
        float _951 = _831 * 0.5;
        float _952 = _841 * 0.5;
        float _953 = _851 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_477, _478, _479), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3569 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_978 + 1.0))) + _983) * _864;
        _1000 = _831;
        _1002 = _830;
        _1003 = _829;
        _1004 = _841;
        _1005 = _840;
        _1006 = _839;
        _1007 = _851;
        _1008 = _850;
        _1009 = _849;
        _1010 = _864;
        _1011 = _863;
        _1012 = _862;
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _1001;
        _1002 = _1001;
        _1003 = _1001;
        _1004 = _1001;
        _1005 = _1001;
        _1006 = _1001;
        _1007 = _1001;
        _1008 = _1001;
        _1009 = _1001;
        _1010 = _1001;
        _1011 = _1001;
        _1012 = _1001;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
    }
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1040 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1044 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1048 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1071 = _691 + _477;
        float _1072 = _695 + _478;
        float _1073 = _699 + _479;
        float _1083 = fma(_1073, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071)) - _1040;
        float _1084 = fma(_1073, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071)) - _1044;
        float _1085 = fma(_1073, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071)) - _1048;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1040 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1044 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[35u].z) + ((((((_1048 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1139 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1106.x + (-0.5));
        float _1141 = _1139 * (_1106.y + (-0.5));
        float _1142 = _1139 * (_1106.z + (-0.5));
        float _1149 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1113.x + (-0.5));
        float _1151 = _1149 * (_1113.y + (-0.5));
        float _1152 = _1149 * (_1113.z + (-0.5));
        float _1159 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1120.x + (-0.5));
        float _1161 = _1159 * (_1120.y + (-0.5));
        float _1162 = _1159 * (_1120.z + (-0.5));
        float _1169 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1127.x + (-0.5));
        float _1171 = _1169 * (_1127.y + (-0.5));
        float _1172 = _1169 * (_1127.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_477, _478, _479), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3632 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1203 + 1.0))) + _1208) * _1173;
        float _1218 = _1141 * 0.5;
        float _1219 = _1151 * 0.5;
        float _1220 = _1161 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_477, _478, _479), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3665 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1245 + 1.0))) + _1250) * _1174;
        float _1260 = _1142 * 0.5;
        float _1261 = _1152 * 0.5;
        float _1262 = _1162 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_477, _478, _479), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3698 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1287 + 1.0))) + _1292) * _1175;
        _1309 = _1142;
        _1310 = _1141;
        _1311 = _1140;
        _1312 = _1152;
        _1313 = _1151;
        _1314 = _1150;
        _1315 = _1162;
        _1316 = _1161;
        _1317 = _1160;
        _1318 = _1175;
        _1319 = _1174;
        _1320 = _1173;
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _1001;
        _1310 = _1001;
        _1311 = _1001;
        _1312 = _1001;
        _1313 = _1001;
        _1314 = _1001;
        _1315 = _1001;
        _1316 = _1001;
        _1317 = _1001;
        _1318 = _1001;
        _1319 = _1001;
        _1320 = _1001;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1013)) + _1013;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1014)) + _1014;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1015)) + _1015;
    float _1356 = fma(_1335, cbSceneParam._m0[89u].z, fma(_1334, cbSceneParam._m0[89u].y, _1333 * cbSceneParam._m0[89u].x));
    float _1359 = fma(_1335, cbSceneParam._m0[90u].z, fma(_1334, cbSceneParam._m0[90u].y, _1333 * cbSceneParam._m0[90u].x));
    float _1362 = fma(_1335, cbSceneParam._m0[91u].z, fma(_1334, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1333));
    float _1377 = _638 * 0.5;
    float _1378 = _639 * 0.5;
    float _1379 = _640 * 0.5;
    float _1380 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1383 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1386 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1420;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1393 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1000, _1004, _1007, _1010));
        float _1397 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1401 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1408 = dot(vec4(cbModelParam._m0[39u]), vec4(_1377, _1378, _1379, 1.0));
        _1420 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1420 = 1.0;
    }
    float _1431;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1422 = dot(vec4(cbModelParam._m0[40u]), vec4(_1377, _1378, _1379, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1435 = (_1431 * cbModelParam._m0[1u].x) + (_1420 * (1.0 - cbModelParam._m0[1u].x));
    float _1445 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _480);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1445 : min(cbModelParam._m0[25u].z, _1445));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1494 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1498 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1502 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1505 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1508 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1511 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1539;
        if (_1505 > 0.0)
        {
            _1539 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1539 = frontier_phi_14_12_ladder;
        }
        float _1763;
        if (_1508 > 0.0)
        {
            _1763 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1763 = frontier_phi_23_19_ladder;
        }
        float _2009;
        if (_1511 > 0.0)
        {
            _2009 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2009 = frontier_phi_35_30_ladder;
        }
        float _2011 = isnan(_1763) ? _1539 : (isnan(_1539) ? _1763 : min(_1539, _1763));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1505) + _1494;
        float _2017 = (_2012 * _1508) + _1498;
        float _2018 = (_2012 * _1511) + _1502;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1446);
            frontier_phi_13_35_ladder = _2142.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2142.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2142.x * cbModelParam._m0[1u].y;
        }
        _1527 = frontier_phi_13_35_ladder_2;
        _1529 = frontier_phi_13_35_ladder_1;
        _1531 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1446);
        _1527 = _1515.x * cbModelParam._m0[1u].y;
        _1529 = _1515.y * cbModelParam._m0[1u].y;
        _1531 = _1515.z * cbModelParam._m0[1u].y;
    }
    float _1535 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _480);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1535 : min(cbModelParam._m0[25u].w, _1535));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1604 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1607 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1768;
        if (_1601 > 0.0)
        {
            _1768 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1768 = frontier_phi_25_21_ladder;
        }
        float _2036;
        if (_1604 > 0.0)
        {
            _2036 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2036 = frontier_phi_37_32_ladder;
        }
        float _2241;
        if (_1607 > 0.0)
        {
            _2241 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2241 = frontier_phi_46_43_ladder;
        }
        float _2243 = isnan(_2036) ? _1768 : (isnan(_1768) ? _2036 : min(_1768, _2036));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1601) + _1590;
        float _2249 = (_2244 * _1604) + _1594;
        float _2250 = (_2244 * _1607) + _1598;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1536);
            frontier_phi_22_46_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_22_46_ladder_2;
        _1628 = frontier_phi_22_46_ladder_1;
        _1630 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1536);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _659) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_659 * _646)) * _630;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1527)) + _1527);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1529)) + _1529);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1531)) + _1531);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    vec4 _1662 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_564, _565));
    float _1664 = _1662.w;
    float _1676 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1664);
    float _1677 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1664);
    float _1678 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1664);
    uvec4 _1682 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1684 = _1682.x * 14u;
    uint _1685 = _1684 + 13u;
    float _1692 = _630 + (-1.0);
    float _1697 = (cbLight._m0[_1685].x * _1692) + 1.0;
    float _1698 = (cbLight._m0[_1685].y * _1692) + 1.0;
    float _1699 = (cbLight._m0[_1685].z * _1692) + 1.0;
    float _1700 = (cbLight._m0[_1685].w * _1692) + 1.0;
    uint _1701 = _1684 + 5u;
    float _1707 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1711 = _1684 + 4u;
    float _1721 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1725 = _1684 | 1u;
    float _1736 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_477, _478, _479));
    float _1739 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_477, _478, _479));
    float _3834 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _3845 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1744 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.3183098733425140380859375;
    float _1746 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1753 = ((cbLight._m0[_1701].x * _1707) * _1746) + (((cbLight._m0[_1711].x * _1676) * _1721) * _1744);
    float _1754 = ((_1707 * cbLight._m0[_1701].y) * _1746) + (((cbLight._m0[_1711].y * _1677) * _1721) * _1744);
    float _1755 = ((_1707 * cbLight._m0[_1701].z) * _1746) + (((cbLight._m0[_1711].z * _1678) * _1721) * _1744);
    uvec4 _1760 = floatBitsToUint(cbLight._m0[_1684 + 12u]);
    bool _1762 = _1760.x == 0u;
    float _1773;
    float _1775;
    float _1777;
    if (_1762)
    {
        _1773 = _1753;
        _1775 = _1754;
        _1777 = _1755;
    }
    else
    {
        uint _1781 = _1684 + 6u;
        float _1797 = (dot(vec3(cbLight._m0[_1684 + 2u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _1798 = _1797 * _1797;
        float _3856 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1800 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1773 = (((cbLight._m0[_1781].x * 0.3183098733425140380859375) * _1799) * _1800) + _1753;
        _1775 = (((cbLight._m0[_1781].y * 0.3183098733425140380859375) * _1799) * _1800) + _1754;
        _1777 = (((cbLight._m0[_1781].z * 0.3183098733425140380859375) * _1799) * _1800) + _1755;
    }
    bool _1780 = _1760.y == 0u;
    float _1818;
    float _1820;
    float _1822;
    if (_1780)
    {
        _1818 = _1773;
        _1820 = _1775;
        _1822 = _1777;
    }
    else
    {
        uint _1980 = _1684 + 7u;
        float _1996 = (dot(vec3(cbLight._m0[_1684 + 3u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _3872 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1999 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1818 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1773;
        _1820 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1775;
        _1822 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1777;
    }
    uint _1825 = _1684 + 8u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _480) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1684].x + _556;
    float _1841 = cbLight._m0[_1684].y + _557;
    float _1842 = cbLight._m0[_1684].z + _558;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1684].xyz));
    float _3888 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _1854 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1855 = dot(vec3(_477, _478, _479), vec3(_1847, _1848, _1849));
    float _3910 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1847, _1848, _1849));
    float _3921 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1839 * _1839;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1839;
    float _1890 = (0.5 / (((_1854 * ((_1853 * _1879) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _1879) + _1839) * _1853))) * _1853;
    float _3932 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    uint _1906 = _1684 + 9u;
    float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _480) * 0.949999988079071044921875);
    float _1918 = _1917 * _1917;
    float _1919 = cbLight._m0[_1725].x + _556;
    float _1920 = cbLight._m0[_1725].y + _557;
    float _1921 = cbLight._m0[_1725].z + _558;
    float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
    float _1926 = _1925 * _1919;
    float _1927 = _1925 * _1920;
    float _1928 = _1925 * _1921;
    float _1929 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1725].xyz));
    float _3943 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1933 = dot(vec3(_477, _478, _479), vec3(_1926, _1927, _1928));
    float _3954 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1926, _1927, _1928));
    float _3965 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1918 * _1918;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1954 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1955 = 1.0 - _1918;
    float _1965 = (0.5 / (((_1854 * ((_1932 * _1955) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _1955) + _1918) * _1932))) * _1932;
    float _3976 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    float _1977 = (((_1954 * cbLight._m0[_1906].x) * _1967) * _1707) + ((((cbLight._m0[_1825].x * _1676) * _1878) * _1892) * _1721);
    float _1978 = (((_1954 * cbLight._m0[_1906].y) * _1967) * _1707) + ((((cbLight._m0[_1825].y * _1677) * _1878) * _1892) * _1721);
    float _1979 = (((_1954 * cbLight._m0[_1906].z) * _1967) * _1707) + ((((cbLight._m0[_1825].z * _1678) * _1878) * _1892) * _1721);
    float _2041;
    float _2043;
    float _2045;
    if (_1762)
    {
        _2041 = _1977;
        _2043 = _1978;
        _2045 = _1979;
    }
    else
    {
        uint _2047 = _1684 + 2u;
        uint _2051 = _1684 + 10u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _480) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _556;
        float _2068 = cbLight._m0[_2047].y + _557;
        float _2069 = cbLight._m0[_2047].z + _558;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2047].xyz));
        float _3987 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2081 = dot(vec3(_477, _478, _479), vec3(_2074, _2075, _2076));
        float _3998 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _4009 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2103 = 1.0 - _2066;
        float _2113 = (0.5 / (((_1854 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _2103) + _2066) * _2080))) * _2080;
        float _4020 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2041 = (((_2102 * cbLight._m0[_2051].x) * _2115) * _2116) + _1977;
        _2043 = (((_2102 * cbLight._m0[_2051].y) * _2115) * _2116) + _1978;
        _2045 = (((_2102 * cbLight._m0[_2051].z) * _2115) * _2116) + _1979;
    }
    float _2151;
    float _2153;
    float _2155;
    if (_1780)
    {
        _2151 = _2041;
        _2153 = _2043;
        _2155 = _2045;
    }
    else
    {
        uint _2162 = _1684 + 3u;
        uint _2166 = _1684 + 11u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _480) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _556;
        float _2183 = cbLight._m0[_2162].y + _557;
        float _2184 = cbLight._m0[_2162].z + _558;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2162].xyz));
        float _4036 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2196 = dot(vec3(_477, _478, _479), vec3(_2189, _2190, _2191));
        float _4047 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4058 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2218 = 1.0 - _2181;
        float _2228 = (0.5 / (((_1854 * ((_2195 * _2218) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1854 * _2218) + _2181) * _2195))) * _2195;
        float _4069 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2151 = (((_2217 * cbLight._m0[_2166].x) * _2230) * _2231) + _2041;
        _2153 = (((_2217 * cbLight._m0[_2166].y) * _2230) * _2231) + _2043;
        _2155 = (((_2217 * cbLight._m0[_2166].z) * _2230) * _2231) + _2045;
    }
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_1682.y == 0u)
    {
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2306;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2306;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2306;
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.x;
        uint _2333 = uint((float(_2321.y) * floor(float(uint(cbSceneParam._m0[85u].y * _565) / _2322))) + floor(float(uint(cbSceneParam._m0[85u].x * _564) / _2322)));
        float _2343 = (log2(_2309 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2344 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        uint _2347 = uint(isnan(14.0) ? _2344 : (isnan(_2344) ? 14.0 : min(_2344, 14.0)));
        uvec4 _2352 = texelFetch(g_lightClusterGridBuffer, int(((_2347 << 2u) + (_2333 << 6u)) >> 2u));
        uint _2353 = _2352.x;
        uint _2354 = _2321.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2354 >> 4u) & 15u)) + 4294967295u) & _2353) == 0u) || ((_2354 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            uint _2605 = 0u;
            uint _2614;
            bool _2615;
            for (;;)
            {
                _2614 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                _2615 = _2614 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2615)
                {
                    frontier_phi_61_pred = _2599;
                    frontier_phi_61_pred_1 = _2604;
                    frontier_phi_61_pred_2 = _2603;
                    frontier_phi_61_pred_3 = _2602;
                    frontier_phi_61_pred_4 = _2601;
                    frontier_phi_61_pred_5 = _2600;
                }
                else
                {
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    uint _2729;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2601;
                    _2726 = _2602;
                    _2727 = _2603;
                    _2728 = _2604;
                    _2729 = _2614;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    for (;;)
                    {
                        uint _2733 = uint(findLSB(_2729)) + (_2605 << 5u);
                        uint _2730 = (_2729 + 4294967295u) & _2729;
                        uint _2735 = _2733 * 48u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2755 = (_2733 * 48u) + 4u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 3u)).x));
                        uint _2774 = (_2733 * 48u) + 8u;
                        vec3 _2785 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x));
                        float _2789 = _2749.x - _2307;
                        float _2790 = _2749.y - _2308;
                        float _2791 = _2749.z - _2309;
                        float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                        float _2795 = inversesqrt(_2792);
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2799 = dot(vec3(_586, _589, _592), vec3(_2796, _2797, _2798));
                        float _2804 = 1.0 - (_2792 * _2749.w);
                        float _4095 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2806 = sqrt(_2792) * _2768.w;
                        float _2809 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2799) + _2810;
                        float _2816 = _2806 * _2806;
                        float _2820 = ((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2805) / ((_2816 * 0.699999988079071044921875) + 1.0);
                        float _2824 = (-0.0) - _2307;
                        float _2825 = (-0.0) - _2308;
                        float _2826 = (-0.0) - _2309;
                        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2841 = exp2(log2(1.0 / ((_2816 * 3.5) + 5.0)) * 0.25);
                        float _2842 = 1.0 - _646;
                        float _2849 = sqrt(1.0 - ((1.0 - (_2842 * _2842)) * (1.0 - (_2841 * _2841))));
                        float _2850 = _2849 * _2849;
                        float _2851 = _2850 * _2850;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2862 = dot(vec3(_586, _589, _592), vec3(_2831, _2832, _2833));
                        float _4111 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2866 = dot(vec3(_586, _589, _592), vec3(_2858 * _2852, _2858 * _2853, _2858 * _2854));
                        float _4122 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2869 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2873 = ((_2869 * _2869) * (_2851 + (-1.0))) + 1.0;
                        float _2874 = _2809 * _2850;
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2799) + _2875;
                        float _4133 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2880 = 1.0 - _2850;
                        float _2890 = (0.5 / (((_2879 * ((_2865 * _2880) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2879 * _2880) + _2850) * _2865))) * _2879;
                        float _4144 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2901 = (((_2851 * 3.1415927410125732421875) * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) / ((_2873 * _2873) * ((_2816 * 2.1991131305694580078125) + 3.141590118408203125))) * _2805;
                        _2658 = (_2820 * _2768.x) + _2726;
                        _2659 = (_2820 * _2768.y) + _2727;
                        _2660 = (_2820 * _2768.z) + _2728;
                        _2655 = (_2901 * _2785.x) + _2723;
                        _2656 = (_2901 * _2785.y) + _2724;
                        _2657 = (_2901 * _2785.z) + _2725;
                        if (_2730 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2730;
                        }
                    }
                    frontier_phi_61_pred = _2655;
                    frontier_phi_61_pred_1 = _2660;
                    frontier_phi_61_pred_2 = _2659;
                    frontier_phi_61_pred_3 = _2658;
                    frontier_phi_61_pred_4 = _2657;
                    frontier_phi_61_pred_5 = _2656;
                }
                _2455 = frontier_phi_61_pred;
                _2465 = frontier_phi_61_pred_1;
                _2463 = frontier_phi_61_pred_2;
                _2461 = frontier_phi_61_pred_3;
                _2459 = frontier_phi_61_pred_4;
                _2457 = frontier_phi_61_pred_5;
                uint _2606 = _2605 + 1u;
                if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2599 = _2455;
                    _2600 = _2457;
                    _2601 = _2459;
                    _2602 = _2461;
                    _2603 = _2463;
                    _2604 = _2465;
                    _2605 = _2606;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        if (((4294967295u << _2471) & _2353) == 0u)
        {
            _2567 = _2454;
            _2569 = _2456;
            _2571 = _2458;
            _2573 = _2460;
            _2575 = _2462;
            _2577 = _2464;
        }
        else
        {
            float _2592 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
            float _2593 = _2592 * _2307;
            float _2594 = _2592 * _2308;
            float _2595 = _2592 * _2309;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2706 = _2454;
                float _2707 = _2456;
                float _2708 = _2458;
                float _2709 = _2460;
                float _2710 = _2462;
                float _2711 = _2464;
                uint _2712 = _2471;
                uint _2721;
                bool _2722;
                for (;;)
                {
                    _2721 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                    _2722 = _2721 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2722)
                    {
                        frontier_phi_67_pred = _2709;
                        frontier_phi_67_pred_1 = _2710;
                        frontier_phi_67_pred_2 = _2711;
                        frontier_phi_67_pred_3 = _2708;
                        frontier_phi_67_pred_4 = _2707;
                        frontier_phi_67_pred_5 = _2706;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        float _2921 = _2708;
                        float _2922 = _2709;
                        float _2923 = _2710;
                        float _2924 = _2711;
                        uint _2925 = _2721;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2995;
                        vec4 _3010;
                        float _3056;
                        bool _3057;
                        for (;;)
                        {
                            uint _2936 = ((_2712 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2982 = (_2936 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2997 = (_2936 * 40u) + 20u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3012 = (_2936 * 40u) + 24u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3031 = (_2936 * 40u) + 28u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3056 = fma(_2309, _3044.z, fma(_2308, _3044.y, _3044.x * _2307)) + _3044.w;
                            _3057 = !((fma(_2309, _3025.z, fma(_2308, _3025.y, _3025.x * _2307)) + _3025.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3057)
                            {
                                float _3084 = _2951.x - _2307;
                                float _3085 = _2951.y - _2308;
                                float _3086 = _2951.z - _2309;
                                float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                                float _3090 = inversesqrt(_3087);
                                float _3091 = _3090 * _3084;
                                float _3092 = _3090 * _3085;
                                float _3093 = _3090 * _3086;
                                float _3097 = 1.0 - (_3087 / (_2952 * _2952));
                                float _4155 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3102 = sqrt(_3087) * _2967.w;
                                float _3104 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                                float _3105 = _3104 * _3104;
                                float _3108 = ((1.0 - _3105) * dot(vec3(_3091, _3092, _3093), vec3(_586, _589, _592))) + _3105;
                                float _3111 = _3102 * _3102;
                                float _3115 = (fma(_2309, _2995.z, fma(_2308, _2995.y, _2995.x * _2307)) + _2995.w) / _3056;
                                float _3116 = (fma(_2309, _3010.z, fma(_2308, _3010.y, _3010.x * _2307)) + _3010.w) / _3056;
                                float _3120 = 1.0 - dot(vec2(_3115, _3116), vec2(_3115, _3116));
                                float _4171 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3122 = _3121 * (((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3098) / ((_3111 * 0.699999988079071044921875) + 1.0));
                                float _3134 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                                float _3135 = 1.0 - _646;
                                float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                                float _3143 = _3142 * _3142;
                                float _3144 = _3143 * _3143;
                                float _3145 = _3091 - _2593;
                                float _3146 = _3092 - _2594;
                                float _3147 = _3093 - _2595;
                                float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                                float _3155 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2593, (-0.0) - _2594, (-0.0) - _2595));
                                float _4182 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3159 = dot(vec3(_586, _589, _592), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                                float _4193 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                                float _3167 = _3104 * _3143;
                                float _3168 = _3167 * _3167;
                                float _3174 = ((1.0 - _3168) * dot(vec3(_586, _589, _592), vec3(_3091, _3092, _3093))) + _3168;
                                float _4204 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3176 = 1.0 - _3143;
                                float _3186 = (0.5 / (((_3175 * ((_3158 * _3176) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3143) * _3158))) * _3175;
                                float _4215 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3196 = (_3121 * _3098) * (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) / ((_3166 * _3166) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3196 * _2979.x;
                                frontier_phi_73_pred_1 = _3196 * _2979.y;
                                frontier_phi_73_pred_2 = _3122 * _2967.z;
                                frontier_phi_73_pred_3 = _3122 * _2967.y;
                                frontier_phi_73_pred_4 = _3122 * _2967.x;
                                frontier_phi_73_pred_5 = _3196 * _2979.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3200 = frontier_phi_73_pred;
                            _3201 = frontier_phi_73_pred_1;
                            _3205 = frontier_phi_73_pred_2;
                            _3204 = frontier_phi_73_pred_3;
                            _3203 = frontier_phi_73_pred_4;
                            _3202 = frontier_phi_73_pred_5;
                            _2909 = _3203 + _2922;
                            _2910 = _3204 + _2923;
                            _2911 = _3205 + _2924;
                            _2906 = _3200 + _2919;
                            _2907 = _3201 + _2920;
                            _2908 = _3202 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2909;
                        frontier_phi_67_pred_1 = _2910;
                        frontier_phi_67_pred_2 = _2911;
                        frontier_phi_67_pred_3 = _2908;
                        frontier_phi_67_pred_4 = _2907;
                        frontier_phi_67_pred_5 = _2906;
                    }
                    _2574 = frontier_phi_67_pred;
                    _2576 = frontier_phi_67_pred_1;
                    _2578 = frontier_phi_67_pred_2;
                    _2572 = frontier_phi_67_pred_3;
                    _2570 = frontier_phi_67_pred_4;
                    _2568 = frontier_phi_67_pred_5;
                    uint _2713 = _2712 + 1u;
                    if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2706 = _2568;
                        _2707 = _2570;
                        _2708 = _2572;
                        _2709 = _2574;
                        _2710 = _2576;
                        _2711 = _2578;
                        _2712 = _2713;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2576;
                frontier_phi_55_56_ladder_1 = _2578;
                frontier_phi_55_56_ladder_2 = _2574;
                frontier_phi_55_56_ladder_3 = _2572;
                frontier_phi_55_56_ladder_4 = _2570;
                frontier_phi_55_56_ladder_5 = _2568;
            }
            else
            {
                frontier_phi_55_56_ladder = _2462;
                frontier_phi_55_56_ladder_1 = _2464;
                frontier_phi_55_56_ladder_2 = _2460;
                frontier_phi_55_56_ladder_3 = _2458;
                frontier_phi_55_56_ladder_4 = _2456;
                frontier_phi_55_56_ladder_5 = _2454;
            }
            _2567 = frontier_phi_55_56_ladder_5;
            _2569 = frontier_phi_55_56_ladder_4;
            _2571 = frontier_phi_55_56_ladder_3;
            _2573 = frontier_phi_55_56_ladder_2;
            _2575 = frontier_phi_55_56_ladder;
            _2577 = frontier_phi_55_56_ladder_1;
        }
        float _2582 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2366 = (_2582 * _2573) + _1818;
        _2368 = (_2582 * _2575) + _1820;
        _2370 = (_2582 * _2577) + _1822;
        _2372 = ((_2567 * 0.039999999105930328369140625) * _2582) + _2151;
        _2374 = ((_2569 * 0.039999999105930328369140625) * _2582) + _2153;
        _2376 = ((_2571 * 0.039999999105930328369140625) * _2582) + _2155;
    }
    else
    {
        _2366 = _1818;
        _2368 = _1820;
        _2370 = _1822;
        _2372 = _2151;
        _2374 = _2153;
        _2376 = _2155;
    }
    float _4231 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4242 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4253 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    uint _2396 = _224 + 6u;
    float _2404 = _564 / cbSceneParam._m0[86u].x;
    float _2405 = _565 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2480 = _2479 / _498;
        float _2491 = _2480 * _549;
        float _2492 = _550 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2495 = _2480 * _551;
        float _2497 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2492;
        float _2505 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2668;
        if (abs((_2493 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2668 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2628 = 1.0 / cbSceneParam._m0[80u].x;
            float _2629 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2630 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2639 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : min(_2629, 0.0));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            _2668 = ((abs(_2505 / _2493) * cbSceneParam._m0[80u].y) * ((((_2639 - _2640) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))))) * _2628)) - ((exp2(_2515 * _2639) - exp2(_2515 * _2640)) * _2628))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2670 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2679 = exp2((_2668 * (-1.44269502162933349609375)) * (1.0 - _2670.w));
        float _2680 = log2(_2679);
        float _2696 = log2(_2424);
        _2517 = (exp2(_2696 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].x)) * _2670.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2519 = (exp2(_2696 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].y)) * _2670.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2521 = (exp2(_2696 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2680 * cbSceneParam._m0[78u].z)) * _2670.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2523 = _2679 * _2424;
    }
    else
    {
        _2517 = _2421;
        _2519 = _2422;
        _2521 = _2423;
        _2523 = _2424;
    }
    float _2535 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2536 = _2535 == 3.0;
    float _2537 = log2(_2523);
    float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2366 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _630))) + ((_2372 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1435)) * cbPerFrame._m0[3u].x));
    float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2368 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _630))) + ((_2374 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1435)) * cbPerFrame._m0[3u].x));
    float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2370 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _630))) + ((_2376 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1435)) * cbPerFrame._m0[3u].x));
    float _2555 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2555 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
    SV_Target.y = _2555 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
    SV_Target.z = _2555 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
    SV_Target.w = cbInstanceData._m0[_2396].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
}


