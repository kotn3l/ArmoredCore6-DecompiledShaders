#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1333;
float _3717;
float _3718;
float _3719;
float _3720;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3729 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3740 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3751 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3762 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) + _447;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _428) + _520;
    float _532 = ((((_499.x - _518) * _428) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _428) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3773 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))));
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _579 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _582 = ((isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : min(_579, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _591 = (_582 - ((((((_572 - _573) * cbMtdParam._m0[24u].z) + _573) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _582))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3794 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _599 = (_592 * (cbMtdParam._m0[17u].x - _454)) + _454;
    float _600 = (_592 * (cbMtdParam._m0[17u].y - _455)) + _455;
    float _601 = (_592 * (cbMtdParam._m0[17u].z - _456)) + _456;
    vec4 _613 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _641 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_615 - _616) * cbMtdParam._m0[24u].w) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3805 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _650 = ((((cbMtdParam._m0[10u].x - _599) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _642) + _599;
    float _651 = ((((cbMtdParam._m0[10u].y - _600) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _642) + _600;
    float _652 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _601)) * _642) + _601;
    float _657 = (((_474.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    vec4 _671 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _678 = (_671.x * 2.0) + (-1.0);
    float _679 = (_671.y * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3816 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _688 = (_592 * (_671.z - _657)) + _657;
    float _691 = ((cbMtdParam._m0[23u].y - _688) * _642) + _688;
    vec4 _710 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _716 = (_710.x * 2.0) + (-1.0);
    float _717 = (_710.y * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _3827 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _728 = _532 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_474.x * 2.0) + (-1.0)));
    float _729 = _533 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_474.y * 2.0) + (-1.0)));
    float _741 = (((_678 - _728) + (cbMtdParam._m0[21u].x * _728)) * _592) + _728;
    float _742 = (((_679 - _729) + (cbMtdParam._m0[21u].x * _729)) * _592) + _729;
    float _743 = (_592 * (sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) - _539)) + _539;
    float _754 = (((_716 - _741) + (_741 * cbMtdParam._m0[22u].z)) * _642) + _741;
    float _755 = (((_717 - _742) + (_742 * cbMtdParam._m0[22u].z)) * _642) + _742;
    float _756 = ((sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _743) * _642) + _743;
    float _758 = cbMtdParam._m0[22u].x + _552.w;
    float _761 = fma(_756, _247 * NORMAL.x, fma(_755, _254 * TANGENT.x, (_240 * _232) * _754));
    float _764 = fma(_756, _247 * NORMAL.y, fma(_755, _254 * TANGENT.y, (_240 * _233) * _754));
    float _767 = fma(_756, _247 * NORMAL.z, fma(_755, _254 * TANGENT.z, (_240 * _234) * _754));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    float _772 = _771 * _761;
    float _773 = _771 * _764;
    float _774 = _771 * _767;
    float _3838 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _775 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3860 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3871 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3882 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _844 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _834);
    float _845 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _834);
    float _846 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _834);
    float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
    float _851 = _844 * _850;
    float _852 = _845 * _850;
    float _853 = _846 * _850;
    vec4 _858 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _860 = _858.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1014 = sqrt(((_844 * _844) + (_845 * _845)) + (_846 * _846));
        float _1020 = (cbMatDynParam._m0[5u].x * _1014) + cbMatDynParam._m0[5u].y;
        float _3893 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1025 = (cbMatDynParam._m0[5u].z * _1014) + cbMatDynParam._m0[5u].w;
        float _3904 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) - _1021)) + _1021) < ((_860 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _871 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _872 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _890 = fma(_774, cbSceneParam._m0[5u].z, fma(_773, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _772));
    float _893 = fma(_774, cbSceneParam._m0[6u].z, fma(_773, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _772));
    float _896 = fma(_774, cbSceneParam._m0[7u].z, fma(_773, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _772));
    uint _909 = _279 + 9u;
    uint _910 = _909 + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_910].z;
    float _3915 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _871, cbSceneParam._m0[86u].y * _872));
    float _934 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _930.x;
    float _935 = dot(vec3(_772, _773, _774), vec3(_851, _852, _853));
    float _938 = _935 * 2.0;
    float _942 = (_938 * _772) - _851;
    float _943 = (_938 * _773) - _852;
    float _944 = (_938 * _774) - _853;
    float _948 = abs(dot(vec3(_851, _852, _853), vec3(_772, _773, _774)));
    float _3948 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_775);
    float _963 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1061 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1065 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1090 = _995 + _772;
        float _1091 = _999 + _773;
        float _1092 = _1003 + _774;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_772, _773, _774), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3996 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_772, _773, _774), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4029 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_772, _773, _774), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4062 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1379 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1383 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1406 = _995 + _772;
        float _1407 = _999 + _773;
        float _1408 = _1003 + _774;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_772, _773, _774), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4125 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_772, _773, _774), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4158 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_772, _773, _774), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4191 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1333;
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = _1333;
        _1654 = _1333;
        _1655 = _1333;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1346)) + _1346;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1347)) + _1347;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _942 * 0.5;
    float _1713 = _943 * 0.5;
    float _1714 = _944 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1843 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1846 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1874 = frontier_phi_17_15_ladder;
        }
        float _2096;
        if (_1843 > 0.0)
        {
            _2096 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2096 = frontier_phi_26_22_ladder;
        }
        float _2342;
        if (_1846 > 0.0)
        {
            _2342 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2342 = frontier_phi_38_33_ladder;
        }
        float _2344 = isnan(_2096) ? _1874 : (isnan(_1874) ? _2096 : min(_1874, _2096));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1840) + _1829;
        float _2350 = (_2345 * _1843) + _1833;
        float _2351 = (_2345 * _1846) + _1837;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_16_38_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_16_38_ladder_2;
        _1864 = frontier_phi_16_38_ladder_1;
        _1866 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1781);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1925 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1929 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1933 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1936 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1939 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1942 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2101;
        if (_1936 > 0.0)
        {
            _2101 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2101 = frontier_phi_28_24_ladder;
        }
        float _2369;
        if (_1939 > 0.0)
        {
            _2369 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2369 = frontier_phi_40_35_ladder;
        }
        float _2574;
        if (_1942 > 0.0)
        {
            _2574 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2574 = frontier_phi_49_46_ladder;
        }
        float _2576 = isnan(_2369) ? _2101 : (isnan(_2101) ? _2369 : min(_2101, _2369));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1936) + _1925;
        float _2582 = (_2577 * _1939) + _1929;
        float _2583 = (_2577 * _1942) + _1933;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2583, cbModelParam._m0[17u].z, fma(_2582, cbModelParam._m0[17u].y, _2581 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2583, cbModelParam._m0[18u].z, fma(_2582, cbModelParam._m0[18u].y, _2581 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2583, cbModelParam._m0[19u].z, fma(_2582, cbModelParam._m0[19u].y, _2581 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_25_49_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1961 = frontier_phi_25_49_ladder_2;
        _1963 = frontier_phi_25_49_ladder_1;
        _1965 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1871);
        _1961 = _1945.x * cbModelParam._m0[1u].z;
        _1963 = _1945.y * cbModelParam._m0[1u].z;
        _1965 = _1945.z * cbModelParam._m0[1u].z;
    }
    float _1977 = ((((1.0 - _963) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_963 * _950)) * _934;
    float _1978 = _1977 * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1979 = _1977 * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1980 = _1977 * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1978 * cbSceneParam._m0[91u].x));
    vec4 _1997 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_871, _872));
    float _1999 = _1997.w;
    float _2011 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1999);
    float _2012 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1999);
    float _2013 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1999);
    uvec4 _2017 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2019 = _2017.x * 14u;
    uint _2020 = _2019 + 13u;
    float _2027 = _934 + (-1.0);
    float _2032 = (cbLight._m0[_2020].x * _2027) + 1.0;
    float _2033 = (cbLight._m0[_2020].y * _2027) + 1.0;
    float _2034 = (cbLight._m0[_2020].z * _2027) + 1.0;
    float _2035 = (cbLight._m0[_2020].w * _2027) + 1.0;
    uint _2036 = _2019 + 5u;
    float _2042 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2046 = _2019 + 4u;
    float _2055 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2059 = _2019 | 1u;
    float _2070 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_772, _773, _774));
    float _2073 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_772, _773, _774));
    float _4327 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _4338 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2078 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2080 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2087 = ((cbLight._m0[_2036].x * _2042) * _2080) + (((cbLight._m0[_2046].x * _2011) * _2055) * _2078);
    float _2088 = ((_2042 * cbLight._m0[_2036].y) * _2080) + (((cbLight._m0[_2046].y * _2012) * _2055) * _2078);
    float _2089 = ((_2042 * cbLight._m0[_2036].z) * _2080) + (((cbLight._m0[_2046].z * _2013) * _2055) * _2078);
    uvec4 _2093 = floatBitsToUint(cbLight._m0[_2019 + 12u]);
    bool _2095 = _2093.x == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2095)
    {
        _2106 = _2087;
        _2108 = _2088;
        _2110 = _2089;
    }
    else
    {
        uint _2114 = _2019 + 6u;
        float _2130 = (dot(vec3(cbLight._m0[_2019 + 2u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2131 = _2130 * _2130;
        float _4349 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2132 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2133 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2106 = (((cbLight._m0[_2114].x * 0.3183098733425140380859375) * _2132) * _2133) + _2087;
        _2108 = (((cbLight._m0[_2114].y * 0.3183098733425140380859375) * _2132) * _2133) + _2088;
        _2110 = (((cbLight._m0[_2114].z * 0.3183098733425140380859375) * _2132) * _2133) + _2089;
    }
    bool _2113 = _2093.y == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2113)
    {
        _2151 = _2106;
        _2153 = _2108;
        _2155 = _2110;
    }
    else
    {
        uint _2313 = _2019 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_2019 + 3u].xyz), vec3(_772, _773, _774)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4365 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2332 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2151 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2106;
        _2153 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2108;
        _2155 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2110;
    }
    uint _2158 = _2019 + 8u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _775) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_2019].x + _851;
    float _2174 = cbLight._m0[_2019].y + _852;
    float _2175 = cbLight._m0[_2019].z + _853;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2019].xyz));
    float _4381 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2187 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2188 = dot(vec3(_772, _773, _774), vec3(_2180, _2181, _2182));
    float _4403 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2180, _2181, _2182));
    float _4414 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2172 * _2172;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2172;
    float _2223 = (0.5 / (((_2187 * ((_2186 * _2212) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2212) + _2172) * _2186))) * _2186;
    float _4425 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    uint _2239 = _2019 + 9u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _775) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2059].x + _851;
    float _2253 = cbLight._m0[_2059].y + _852;
    float _2254 = cbLight._m0[_2059].z + _853;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2059].xyz));
    float _4436 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2266 = dot(vec3(_772, _773, _774), vec3(_2259, _2260, _2261));
    float _4447 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2259, _2260, _2261));
    float _4458 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2251 * _2251;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2288 = 1.0 - _2251;
    float _2298 = (0.5 / (((_2187 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2288) + _2251) * _2265))) * _2265;
    float _4469 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    float _2310 = (((_2287 * cbLight._m0[_2239].x) * _2300) * _2042) + ((((cbLight._m0[_2158].x * _2011) * _2211) * _2225) * _2055);
    float _2311 = (((_2287 * cbLight._m0[_2239].y) * _2300) * _2042) + ((((cbLight._m0[_2158].y * _2012) * _2211) * _2225) * _2055);
    float _2312 = (((_2287 * cbLight._m0[_2239].z) * _2300) * _2042) + ((((cbLight._m0[_2158].z * _2013) * _2211) * _2225) * _2055);
    float _2374;
    float _2376;
    float _2378;
    if (_2095)
    {
        _2374 = _2310;
        _2376 = _2311;
        _2378 = _2312;
    }
    else
    {
        uint _2380 = _2019 + 2u;
        uint _2384 = _2019 + 10u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _775) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _851;
        float _2401 = cbLight._m0[_2380].y + _852;
        float _2402 = cbLight._m0[_2380].z + _853;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2380].xyz));
        float _4480 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2414 = dot(vec3(_772, _773, _774), vec3(_2407, _2408, _2409));
        float _4491 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4502 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2436 = 1.0 - _2399;
        float _2446 = (0.5 / (((_2187 * ((_2413 * _2436) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2436) + _2399) * _2413))) * _2413;
        float _4513 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2374 = (((_2435 * cbLight._m0[_2384].x) * _2448) * _2449) + _2310;
        _2376 = (((_2435 * cbLight._m0[_2384].y) * _2448) * _2449) + _2311;
        _2378 = (((_2435 * cbLight._m0[_2384].z) * _2448) * _2449) + _2312;
    }
    float _2484;
    float _2486;
    float _2488;
    if (_2113)
    {
        _2484 = _2374;
        _2486 = _2376;
        _2488 = _2378;
    }
    else
    {
        uint _2495 = _2019 + 3u;
        uint _2499 = _2019 + 11u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _775) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _851;
        float _2516 = cbLight._m0[_2495].y + _852;
        float _2517 = cbLight._m0[_2495].z + _853;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2495].xyz));
        float _4529 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2529 = dot(vec3(_772, _773, _774), vec3(_2522, _2523, _2524));
        float _4540 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4551 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2550 = (exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2551 = 1.0 - _2514;
        float _2561 = (0.5 / (((_2187 * ((_2528 * _2551) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2551) + _2514) * _2528))) * _2528;
        float _4562 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2484 = (((_2550 * cbLight._m0[_2499].x) * _2563) * _2564) + _2374;
        _2486 = (((_2550 * cbLight._m0[_2499].y) * _2563) * _2564) + _2376;
        _2488 = (((_2550 * cbLight._m0[_2499].z) * _2563) * _2564) + _2378;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_2017.y == 0u)
    {
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2639;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2639;
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2639;
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _872) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _871) / _2655)));
        float _2676 = (log2(_2642 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
        }
        else
        {
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            uint _2946 = 0u;
            uint _2955;
            bool _2956;
            for (;;)
            {
                _2955 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                _2956 = _2955 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2956)
                {
                    frontier_phi_66_pred = _2940;
                    frontier_phi_66_pred_1 = _2945;
                    frontier_phi_66_pred_2 = _2944;
                    frontier_phi_66_pred_3 = _2943;
                    frontier_phi_66_pred_4 = _2942;
                    frontier_phi_66_pred_5 = _2941;
                }
                else
                {
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    uint _3091;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2955;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    for (;;)
                    {
                        uint _3095 = uint(findLSB(_3091)) + (_2946 << 5u);
                        uint _3092 = (_3091 + 4294967295u) & _3091;
                        uint _3097 = _3095 * 48u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3117 = (_3095 * 48u) + 4u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3136 = (_3095 * 48u) + 8u;
                        vec3 _3147 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x));
                        float _3151 = _3111.x - _2640;
                        float _3152 = _3111.y - _2641;
                        float _3153 = _3111.z - _2642;
                        float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                        float _3157 = inversesqrt(_3154);
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3161 = dot(vec3(_890, _893, _896), vec3(_3158, _3159, _3160));
                        float _3166 = 1.0 - (_3154 * _3111.w);
                        float _4588 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3168 = sqrt(_3154) * _3130.w;
                        float _3171 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3161) + _3172;
                        float _3178 = _3168 * _3168;
                        float _3182 = ((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3167) / ((_3178 * 0.699999988079071044921875) + 1.0);
                        float _3186 = (-0.0) - _2640;
                        float _3187 = (-0.0) - _2641;
                        float _3188 = (-0.0) - _2642;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3203 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _950;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3193 + _3158;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_890, _893, _896), vec3(_3193, _3194, _3195));
                        float _4604 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3228 = dot(vec3(_890, _893, _896), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4615 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3171 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3161) + _3237;
                        float _4626 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4637 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3263 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3235 * _3235) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125))) * _3167;
                        _3015 = (_3182 * _3130.x) + _3088;
                        _3016 = (_3182 * _3130.y) + _3089;
                        _3017 = (_3182 * _3130.z) + _3090;
                        _3012 = (_3263 * _3147.x) + _3085;
                        _3013 = (_3263 * _3147.y) + _3086;
                        _3014 = (_3263 * _3147.z) + _3087;
                        if (_3092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3092;
                        }
                    }
                    frontier_phi_66_pred = _3012;
                    frontier_phi_66_pred_1 = _3017;
                    frontier_phi_66_pred_2 = _3016;
                    frontier_phi_66_pred_3 = _3015;
                    frontier_phi_66_pred_4 = _3014;
                    frontier_phi_66_pred_5 = _3013;
                }
                _2788 = frontier_phi_66_pred;
                _2798 = frontier_phi_66_pred_1;
                _2796 = frontier_phi_66_pred_2;
                _2794 = frontier_phi_66_pred_3;
                _2792 = frontier_phi_66_pred_4;
                _2790 = frontier_phi_66_pred_5;
                uint _2947 = _2946 + 1u;
                if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2940 = _2788;
                    _2941 = _2790;
                    _2942 = _2792;
                    _2943 = _2794;
                    _2944 = _2796;
                    _2945 = _2798;
                    _2946 = _2947;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
        }
        uvec4 _2801 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2802 = _2801.z;
        uint _2804 = (_2802 >> 8u) & 15u;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((4294967295u << _2804) & _2686) == 0u)
        {
            _2908 = _2787;
            _2910 = _2789;
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
        }
        else
        {
            float _2933 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
            float _2934 = _2933 * _2640;
            float _2935 = _2933 * _2641;
            float _2936 = _2933 * _2642;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2804 < ((_2802 >> 12u) & 15u))
            {
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _3068 = _2787;
                float _3069 = _2789;
                float _3070 = _2791;
                float _3071 = _2793;
                float _3072 = _2795;
                float _3073 = _2797;
                uint _3074 = _2804;
                uint _3083;
                bool _3084;
                for (;;)
                {
                    _3083 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                    _3084 = _3083 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3084)
                    {
                        frontier_phi_77_pred = _3073;
                        frontier_phi_77_pred_1 = _3072;
                        frontier_phi_77_pred_2 = _3071;
                        frontier_phi_77_pred_3 = _3070;
                        frontier_phi_77_pred_4 = _3069;
                        frontier_phi_77_pred_5 = _3068;
                    }
                    else
                    {
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        uint _3296 = _3083;
                        uint _3297;
                        vec4 _3322;
                        float _3323;
                        vec4 _3338;
                        vec3 _3350;
                        vec4 _3365;
                        vec4 _3380;
                        float _3426;
                        bool _3427;
                        for (;;)
                        {
                            uint _3307 = ((_3074 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3296));
                            _3297 = (_3296 + 4294967295u) & _3296;
                            uint _3309 = _3307 * 40u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3323 = _3322.w;
                            uint _3325 = (_3307 * 40u) + 4u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3307 * 40u) + 8u;
                            _3350 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x));
                            uint _3352 = (_3307 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3307 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3307 * 40u) + 24u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3401 = (_3307 * 40u) + 28u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3426 = fma(_2642, _3414.z, fma(_2641, _3414.y, _3414.x * _2640)) + _3414.w;
                            _3427 = !((fma(_2642, _3395.z, fma(_2641, _3395.y, _3395.x * _2640)) + _3395.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3427)
                            {
                                float _3454 = _3322.x - _2640;
                                float _3455 = _3322.y - _2641;
                                float _3456 = _3322.z - _2642;
                                float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                                float _3460 = inversesqrt(_3457);
                                float _3461 = _3460 * _3454;
                                float _3462 = _3460 * _3455;
                                float _3463 = _3460 * _3456;
                                float _3467 = 1.0 - (_3457 / (_3323 * _3323));
                                float _4648 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3472 = sqrt(_3457) * _3338.w;
                                float _3474 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                                float _3475 = _3474 * _3474;
                                float _3478 = ((1.0 - _3475) * dot(vec3(_3461, _3462, _3463), vec3(_890, _893, _896))) + _3475;
                                float _3481 = _3472 * _3472;
                                float _3485 = (fma(_2642, _3365.z, fma(_2641, _3365.y, _3365.x * _2640)) + _3365.w) / _3426;
                                float _3486 = (fma(_2642, _3380.z, fma(_2641, _3380.y, _3380.x * _2640)) + _3380.w) / _3426;
                                float _3490 = 1.0 - dot(vec2(_3485, _3486), vec2(_3485, _3486));
                                float _4664 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3492 = _3491 * (((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3468) / ((_3481 * 0.699999988079071044921875) + 1.0));
                                float _3504 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                                float _3505 = 1.0 - _950;
                                float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                                float _3513 = _3512 * _3512;
                                float _3514 = _3513 * _3513;
                                float _3515 = _3461 - _2934;
                                float _3516 = _3462 - _2935;
                                float _3517 = _3463 - _2936;
                                float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                                float _3525 = dot(vec3(_890, _893, _896), vec3((-0.0) - _2934, (-0.0) - _2935, (-0.0) - _2936));
                                float _4675 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3529 = dot(vec3(_890, _893, _896), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                                float _4686 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                                float _3537 = _3474 * _3513;
                                float _3538 = _3537 * _3537;
                                float _3544 = ((1.0 - _3538) * dot(vec3(_890, _893, _896), vec3(_3461, _3462, _3463))) + _3538;
                                float _4697 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3546 = 1.0 - _3513;
                                float _3556 = (0.5 / (((_3545 * ((_3528 * _3546) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3513) * _3528))) * _3545;
                                float _4708 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3566 = (_3491 * _3468) * (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3536 * _3536) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3492 * _3338.y;
                                frontier_phi_83_pred_1 = _3492 * _3338.x;
                                frontier_phi_83_pred_2 = _3566 * _3350.z;
                                frontier_phi_83_pred_3 = _3566 * _3350.y;
                                frontier_phi_83_pred_4 = _3566 * _3350.x;
                                frontier_phi_83_pred_5 = _3492 * _3338.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3574 = frontier_phi_83_pred;
                            _3573 = frontier_phi_83_pred_1;
                            _3572 = frontier_phi_83_pred_2;
                            _3571 = frontier_phi_83_pred_3;
                            _3570 = frontier_phi_83_pred_4;
                            _3575 = frontier_phi_83_pred_5;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            if (_3297 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3297;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3282;
                        frontier_phi_77_pred_1 = _3281;
                        frontier_phi_77_pred_2 = _3280;
                        frontier_phi_77_pred_3 = _3279;
                        frontier_phi_77_pred_4 = _3278;
                        frontier_phi_77_pred_5 = _3277;
                    }
                    _2919 = frontier_phi_77_pred;
                    _2917 = frontier_phi_77_pred_1;
                    _2915 = frontier_phi_77_pred_2;
                    _2913 = frontier_phi_77_pred_3;
                    _2911 = frontier_phi_77_pred_4;
                    _2909 = frontier_phi_77_pred_5;
                    uint _3075 = _3074 + 1u;
                    if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3068 = _2909;
                        _3069 = _2911;
                        _3070 = _2913;
                        _3071 = _2915;
                        _3072 = _2917;
                        _3073 = _2919;
                        _3074 = _3075;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2913;
                frontier_phi_58_59_ladder_1 = _2919;
                frontier_phi_58_59_ladder_2 = _2917;
                frontier_phi_58_59_ladder_3 = _2915;
                frontier_phi_58_59_ladder_4 = _2911;
                frontier_phi_58_59_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_58_59_ladder = _2791;
                frontier_phi_58_59_ladder_1 = _2797;
                frontier_phi_58_59_ladder_2 = _2795;
                frontier_phi_58_59_ladder_3 = _2793;
                frontier_phi_58_59_ladder_4 = _2789;
                frontier_phi_58_59_ladder_5 = _2787;
            }
            _2908 = frontier_phi_58_59_ladder_5;
            _2910 = frontier_phi_58_59_ladder_4;
            _2912 = frontier_phi_58_59_ladder;
            _2914 = frontier_phi_58_59_ladder_3;
            _2916 = frontier_phi_58_59_ladder_2;
            _2918 = frontier_phi_58_59_ladder_1;
        }
        float _2923 = isnan(1.0) ? _934 : (isnan(_934) ? 1.0 : min(_934, 1.0));
        _2699 = (_2923 * _2914) + _2151;
        _2701 = (_2923 * _2916) + _2153;
        _2703 = (_2923 * _2918) + _2155;
        _2705 = ((_2908 * 0.039999999105930328369140625) * _2923) + _2484;
        _2707 = ((_2910 * 0.039999999105930328369140625) * _2923) + _2486;
        _2709 = ((_2912 * 0.039999999105930328369140625) * _2923) + _2488;
    }
    else
    {
        _2699 = _2151;
        _2701 = _2153;
        _2703 = _2155;
        _2705 = _2484;
        _2707 = _2486;
        _2709 = _2488;
    }
    float _4724 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4735 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4746 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2726 = ((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2699 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _934))) + ((_2705 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2727 = ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2701 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _934))) + ((_2707 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2728 = ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2703 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _934))) + ((_2709 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    uint _2729 = _279 + 6u;
    float _2737 = _871 / cbSceneParam._m0[86u].x;
    float _2738 = _872 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2812 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2813 = _2812 / _793;
        float _2824 = _2813 * _844;
        float _2825 = _845 * _2813;
        float _2826 = (-0.0) - _2825;
        float _2828 = _2813 * _846;
        float _2830 = (cbSceneParam._m0[77u].w * _2826) / _2812;
        float _2831 = _2830 + cbSceneParam._m0[79u].w;
        float _2832 = cbSceneParam._m0[79u].w - _2825;
        float _2838 = sqrt(((_2824 * _2824) + (_2825 * _2825)) + (_2828 * _2828));
        float _2841 = (1.0 - (cbSceneParam._m0[77u].w / _2812)) * _2838;
        float _2846 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2848 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3025;
        if (abs((_2826 - _2830) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3025 = ((((_2831 > 0.0) ? exp2(_2846 * _2831) : (2.0 - exp2(_2848 * _2831))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2841;
        }
        else
        {
            float _2969 = 1.0 / cbSceneParam._m0[80u].x;
            float _2970 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : max(_2831, _2832));
            float _2971 = isnan(_2832) ? _2831 : (isnan(_2831) ? _2832 : min(_2831, _2832));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            _3025 = ((abs(_2838 / _2826) * cbSceneParam._m0[80u].y) * ((((_2980 - _2981) * 2.0) - ((exp2(_2846 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0)))) - exp2(_2846 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))))) * _2969)) - ((exp2(_2848 * _2980) - exp2(_2848 * _2981)) * _2969))) + (_2841 * cbSceneParam._m0[80u].z);
        }
        vec4 _3027 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _3036 = exp2((_3025 * (-1.44269502162933349609375)) * (1.0 - _3027.w));
        float _3037 = log2(_3036);
        float _3053 = log2(_2757);
        _2850 = (exp2(_3053 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].x)) * _3027.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2852 = (exp2(_3053 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].y)) * _3027.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2854 = (exp2(_3053 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3037 * cbSceneParam._m0[78u].z)) * _3027.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2856 = _3036 * _2757;
    }
    else
    {
        _2850 = _2754;
        _2852 = _2755;
        _2854 = _2756;
        _2856 = _2757;
    }
    bool _3063;
    vec4 _2866;
    vec4 _2888;
    float _2890;
    float _2894;
    float _2895;
    float _2896;
    float _2897;
    bool _2907;
    for (;;)
    {
        _2866 = cbMatDynParam._m0[0u];
        float _2868 = roundEven(_2866.y);
        bool _2869 = _2868 == 3.0;
        float _2870 = log2(_2856);
        float _2877 = exp2(_2870 * cbSceneParam._m0[78u].x) * _2726;
        float _2878 = exp2(_2870 * cbSceneParam._m0[78u].y) * _2727;
        float _2879 = exp2(_2870 * cbSceneParam._m0[78u].z) * _2728;
        float _2886 = _860 + (-0.5);
        _2888 = cbMtdParam._m0[1u];
        _2890 = _2888.y * _2886;
        float _2893 = (_2868 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2894 = _2893 * (_2869 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2850)));
        _2895 = _2893 * (_2869 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2852)));
        _2896 = _2893 * (_2869 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2854)));
        _2897 = _2886 * 0.999000012874603271484375;
        _2907 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2907)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2897) < 0.5)
            {
                _3063 = true;
                break;
            }
        }
        uint _3004 = _909 + uint(_2866.w);
        if ((cbInstanceData._m0[_3004].w < 1.0) && ((cbInstanceData._m0[_3004].w + _2897) < 0.5))
        {
            _3063 = true;
            break;
        }
        if ((_2890 + 1.0) < _2888.x)
        {
            _3063 = true;
            break;
        }
        _3063 = false;
        break;
    }
    float _3268;
    if (_3063)
    {
        discard_state = true;
        _3268 = 0.0;
    }
    else
    {
        _3268 = cbInstanceData._m0[_2729].w;
    }
    SV_Target.x = _2894;
    SV_Target.y = _2895;
    SV_Target.z = _2896;
    SV_Target.w = _3268;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2729].w;
    discard_exit();
}


