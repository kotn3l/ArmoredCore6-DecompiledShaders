#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1145;
float _3787;
float _3788;
float _3789;
float _3790;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3799 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _374) + _443;
    float _455 = ((((_422.x - _441) * _374) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _374) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3810 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _496 = _494.x;
    float _497 = 1.0 - _496;
    float _510 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_496 - _497) * cbMtdParam._m0[24u].z) + _497) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3821 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _518 = (_511 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _519 = (_511 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _520 = (_511 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _540 = (_533.x * 2.0) + (-1.0);
    float _541 = (_533.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3832 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _550 = (_511 * (_533.z - _452)) + _452;
    float _562 = (((_540 - _455) + (cbMtdParam._m0[21u].x * _455)) * _511) + _455;
    float _563 = (((_541 - _457) + (cbMtdParam._m0[21u].x * _457)) * _511) + _457;
    float _564 = (_511 * (sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) - _463)) + _463;
    float _569 = cbMtdParam._m0[22u].x + _476.w;
    float _572 = fma(_564, _225 * NORMAL.x, fma(_563, _232 * TANGENT.x, (_218 * _210) * _562));
    float _575 = fma(_564, _225 * NORMAL.y, fma(_563, _232 * TANGENT.y, (_218 * _211) * _562));
    float _578 = fma(_564, _225 * NORMAL.z, fma(_563, _232 * TANGENT.z, (_218 * _212) * _562));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _3843 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _586 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3865 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3876 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3887 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _656 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _646);
    float _657 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _646);
    float _658 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _646);
    float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
    float _663 = _656 * _662;
    float _664 = _657 * _662;
    float _665 = _658 * _662;
    vec4 _670 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _672 = _670.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _826 = sqrt(((_656 * _656) + (_657 * _657)) + (_658 * _658));
        float _832 = (cbMatDynParam._m0[5u].x * _826) + cbMatDynParam._m0[5u].y;
        float _3898 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _837 = (cbMatDynParam._m0[5u].z * _826) + cbMatDynParam._m0[5u].w;
        float _3909 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) - _833)) + _833) < ((_672 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _683 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _684 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_585, cbSceneParam._m0[5u].z, fma(_584, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _583));
    float _705 = fma(_585, cbSceneParam._m0[6u].z, fma(_584, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _583));
    float _708 = fma(_585, cbSceneParam._m0[7u].z, fma(_584, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _583));
    uint _721 = _238 + 9u;
    uint _722 = _721 + uint(cbMatDynParam._m0[0u].w);
    float _728 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_722].x;
    float _729 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_722].y;
    float _730 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_722].z;
    float _3920 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _683, cbSceneParam._m0[86u].y * _684));
    float _746 = ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * TEXCOORD_5.w) * _742.x;
    float _747 = dot(vec3(_583, _584, _585), vec3(_663, _664, _665));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _583) - _663;
    float _755 = (_750 * _584) - _664;
    float _756 = (_750 * _585) - _665;
    float _760 = abs(dot(vec3(_663, _664, _665), vec3(_583, _584, _585)));
    float _3953 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_586);
    float _775 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1144;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _869 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _873 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _877 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _902 = _807 + _583;
        float _903 = _811 + _584;
        float _904 = _815 + _585;
        float _914 = fma(_904, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902)) - _869;
        float _915 = fma(_904, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902)) - _873;
        float _916 = fma(_904, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902)) - _877;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_869 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_873 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[34u].z) + ((((((_877 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _972 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_938.x + (-0.5));
        float _974 = _972 * (_938.y + (-0.5));
        float _975 = _972 * (_938.z + (-0.5));
        float _982 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_945.x + (-0.5));
        float _984 = _982 * (_945.y + (-0.5));
        float _985 = _982 * (_945.z + (-0.5));
        float _992 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_952.x + (-0.5));
        float _994 = _992 * (_952.y + (-0.5));
        float _995 = _992 * (_952.z + (-0.5));
        float _1002 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_959.x + (-0.5));
        float _1004 = _1002 * (_959.y + (-0.5));
        float _1005 = _1002 * (_959.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1026 = (dot(vec3(_583, _584, _585), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1036 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _4001 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1038 + 1.0))) + _1043) * _1006;
        float _1053 = _974 * 0.5;
        float _1054 = _984 * 0.5;
        float _1055 = _994 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_583, _584, _585), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _4034 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1080 + 1.0))) + _1085) * _1007;
        float _1095 = _975 * 0.5;
        float _1096 = _985 * 0.5;
        float _1097 = _995 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_583, _584, _585), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _4067 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1122 + 1.0))) + _1127) * _1008;
        _1144 = _975;
        _1146 = _974;
        _1147 = _973;
        _1148 = _985;
        _1149 = _984;
        _1150 = _983;
        _1151 = _995;
        _1152 = _994;
        _1153 = _993;
        _1154 = _1008;
        _1155 = _1007;
        _1156 = _1006;
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _1145;
        _1146 = _1145;
        _1147 = _1145;
        _1148 = _1145;
        _1149 = _1145;
        _1150 = _1145;
        _1151 = _1145;
        _1152 = _1145;
        _1153 = _1145;
        _1154 = _1145;
        _1155 = _1145;
        _1156 = _1145;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1187 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1191 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1195 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1218 = _807 + _583;
        float _1219 = _811 + _584;
        float _1220 = _815 + _585;
        float _1230 = fma(_1220, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218)) - _1187;
        float _1231 = fma(_1220, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218)) - _1191;
        float _1232 = fma(_1220, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218)) - _1195;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1187 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1191 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[35u].z) + ((((((_1195 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1286 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1253.x + (-0.5));
        float _1288 = _1286 * (_1253.y + (-0.5));
        float _1289 = _1286 * (_1253.z + (-0.5));
        float _1296 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1260.x + (-0.5));
        float _1298 = _1296 * (_1260.y + (-0.5));
        float _1299 = _1296 * (_1260.z + (-0.5));
        float _1306 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1267.x + (-0.5));
        float _1308 = _1306 * (_1267.y + (-0.5));
        float _1309 = _1306 * (_1267.z + (-0.5));
        float _1316 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1274.x + (-0.5));
        float _1318 = _1316 * (_1274.y + (-0.5));
        float _1319 = _1316 * (_1274.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_583, _584, _585), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4130 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1350 + 1.0))) + _1355) * _1320;
        float _1365 = _1288 * 0.5;
        float _1366 = _1298 * 0.5;
        float _1367 = _1308 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_583, _584, _585), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4163 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1392 + 1.0))) + _1397) * _1321;
        float _1407 = _1289 * 0.5;
        float _1408 = _1299 * 0.5;
        float _1409 = _1309 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_583, _584, _585), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4196 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1434 + 1.0))) + _1439) * _1322;
        _1456 = _1289;
        _1457 = _1288;
        _1458 = _1287;
        _1459 = _1299;
        _1460 = _1298;
        _1461 = _1297;
        _1462 = _1309;
        _1463 = _1308;
        _1464 = _1307;
        _1465 = _1322;
        _1466 = _1321;
        _1467 = _1320;
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1145;
        _1457 = _1145;
        _1458 = _1145;
        _1459 = _1145;
        _1460 = _1145;
        _1461 = _1145;
        _1462 = _1145;
        _1463 = _1145;
        _1464 = _1145;
        _1465 = _1145;
        _1466 = _1145;
        _1467 = _1145;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1158)) + _1158;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1159)) + _1159;
    float _1503 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1480));
    float _1524 = _754 * 0.5;
    float _1525 = _755 * 0.5;
    float _1526 = _756 * 0.5;
    float _1527 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1530 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1533 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1567;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1540 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1144, _1148, _1151, _1154));
        float _1544 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1548 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1555 = dot(vec4(cbModelParam._m0[39u]), vec4(_1524, _1525, _1526, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1578;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1569 = dot(vec4(cbModelParam._m0[40u]), vec4(_1524, _1525, _1526, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1582 = (_1578 * cbModelParam._m0[1u].x) + (_1567 * (1.0 - cbModelParam._m0[1u].x));
    float _1592 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _586);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1592 : min(cbModelParam._m0[25u].z, _1592));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1640 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1644 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1648 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1651 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1654 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1657 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1685;
        if (_1651 > 0.0)
        {
            _1685 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1685 = frontier_phi_17_15_ladder;
        }
        float _1854;
        if (_1654 > 0.0)
        {
            _1854 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1854 = frontier_phi_26_22_ladder;
        }
        float _2149;
        if (_1657 > 0.0)
        {
            _2149 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2149 = frontier_phi_38_33_ladder;
        }
        float _2151 = isnan(_1854) ? _1685 : (isnan(_1685) ? _1854 : min(_1685, _1854));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1651) + _1640;
        float _2157 = (_2152 * _1654) + _1644;
        float _2158 = (_2152 * _1657) + _1648;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2159;
        float _2163 = _2159 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 > _2163) || ((_2157 < _2161) || ((_2156 < _2161) || (_2156 > _2163))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2158, cbModelParam._m0[9u].z, fma(_2157, cbModelParam._m0[9u].y, _2156 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2158, cbModelParam._m0[10u].z, fma(_2157, cbModelParam._m0[10u].y, _2156 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2158, cbModelParam._m0[11u].z, fma(_2157, cbModelParam._m0[11u].y, _2156 * cbModelParam._m0[11u].x))), _1593);
            frontier_phi_16_38_ladder = _2303.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2303.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2303.x * cbModelParam._m0[1u].y;
        }
        _1673 = frontier_phi_16_38_ladder_2;
        _1675 = frontier_phi_16_38_ladder_1;
        _1677 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1593);
        _1673 = _1661.x * cbModelParam._m0[1u].y;
        _1675 = _1661.y * cbModelParam._m0[1u].y;
        _1677 = _1661.z * cbModelParam._m0[1u].y;
    }
    float _1681 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _586);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1681 : min(cbModelParam._m0[25u].w, _1681));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1749 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1752 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1859;
        if (_1746 > 0.0)
        {
            _1859 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1859 = frontier_phi_28_24_ladder;
        }
        float _2176;
        if (_1749 > 0.0)
        {
            _2176 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2176 = frontier_phi_40_35_ladder;
        }
        float _2503;
        if (_1752 > 0.0)
        {
            _2503 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2503 = frontier_phi_50_47_ladder;
        }
        float _2505 = isnan(_2176) ? _1859 : (isnan(_1859) ? _2176 : min(_1859, _2176));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1746) + _1735;
        float _2511 = (_2506 * _1749) + _1739;
        float _2512 = (_2506 * _1752) + _1743;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1682);
            frontier_phi_25_50_ladder = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2630.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2630.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_25_50_ladder_2;
        _1773 = frontier_phi_25_50_ladder_1;
        _1775 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1682);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1787 = ((((1.0 - _775) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_775 * _762)) * _746;
    float _1788 = _1787 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1789 = _1787 * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1790 = _1787 * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    float _1833 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1846 = _1833 / _1845;
    float _1847 = _1837 / _1845;
    float _1848 = _1841 / _1845;
    float _1995;
    float _1996;
    float _1997;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1875 = ((uint(_1848 > cbSceneParam._m0[59u].y) + uint(_1848 > cbSceneParam._m0[59u].x)) + uint(_1848 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1876 = _1875 + 43u;
        uint _1884 = _1875 + 44u;
        uint _1892 = _1875 + 45u;
        uint _1900 = _1875 + 46u;
        float _1911 = fma(_1845, cbSceneParam._m0[_1876].w, fma(_1841, cbSceneParam._m0[_1876].z, fma(_1837, cbSceneParam._m0[_1876].y, _1833 * cbSceneParam._m0[_1876].x)));
        float _1915 = fma(_1845, cbSceneParam._m0[_1884].w, fma(_1841, cbSceneParam._m0[_1884].z, fma(_1837, cbSceneParam._m0[_1884].y, _1833 * cbSceneParam._m0[_1884].x)));
        float _1923 = fma(_1845, cbSceneParam._m0[_1900].w, fma(_1841, cbSceneParam._m0[_1900].z, fma(_1837, cbSceneParam._m0[_1900].y, _1833 * cbSceneParam._m0[_1900].x)));
        float _1928 = cbSceneParam._m0[33u].z * _1923;
        float _1930 = cbSceneParam._m0[33u].w * _1923;
        float _1933 = fma(_1845, cbSceneParam._m0[_1892].w, fma(_1841, cbSceneParam._m0[_1892].z, fma(_1837, cbSceneParam._m0[_1892].y, _1833 * cbSceneParam._m0[_1892].x))) / _1923;
        float _1981 = (cbSceneParam._m0[33u].x - sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848))) * cbSceneParam._m0[33u].y;
        float _4322 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1988 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1928 + _1911) / _1923, (_1930 + _1915) / _1923), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1930 + _1911) / _1923, (_1915 - _1928) / _1923), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 - _1928) / _1923, (_1915 - _1930) / _1923), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 - _1930) / _1923, (_1928 + _1915) / _1923), _1933), 0.0)).x), vec4(0.25)));
        _1995 = 1.0 - (_1988 * cbSceneParam._m0[34u].x);
        _1996 = 1.0 - (_1988 * cbSceneParam._m0[34u].y);
        _1997 = 1.0 - (_1988 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1995 = 1.0;
        _1996 = 1.0;
        _1997 = 1.0;
    }
    float _2061;
    float _2063;
    float _2065;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2049 = fma(_1845, cbSceneParam._m0[63u].w, fma(_1841, cbSceneParam._m0[63u].z, fma(_1837, cbSceneParam._m0[63u].y, _1833 * cbSceneParam._m0[63u].x)));
        float _2050 = fma(_1845, cbSceneParam._m0[60u].w, fma(_1841, cbSceneParam._m0[60u].z, fma(_1837, cbSceneParam._m0[60u].y, _1833 * cbSceneParam._m0[60u].x))) / _2049;
        float _2051 = fma(_1845, cbSceneParam._m0[61u].w, fma(_1841, cbSceneParam._m0[61u].z, fma(_1837, cbSceneParam._m0[61u].y, _1833 * cbSceneParam._m0[61u].x))) / _2049;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2050 >= cbSceneParam._m0[64u].x) && (_2051 >= cbSceneParam._m0[64u].y)) && (_2050 <= cbSceneParam._m0[64u].z)) && (_2051 <= cbSceneParam._m0[64u].w))
        {
            float _2189 = fma(_1845, cbSceneParam._m0[62u].w, fma(_1841, cbSceneParam._m0[62u].z, fma(_1837, cbSceneParam._m0[62u].y, _1833 * cbSceneParam._m0[62u].x))) / _2049;
            float _2193 = isnan(cbSceneParam._m0[41u].w) ? _2189 : (isnan(_2189) ? cbSceneParam._m0[41u].w : max(_2189, cbSceneParam._m0[41u].w));
            float _2236 = (cbSceneParam._m0[33u].x - sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848))) * cbSceneParam._m0[33u].y;
            float _4338 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
            float _2243 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2050, cbSceneParam._m0[33u].w + _2051), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2050, _2051 - cbSceneParam._m0[33u].z), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2050 - cbSceneParam._m0[33u].z, _2051 - cbSceneParam._m0[33u].w), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2050 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2051), _2193), 0.0)).x), vec4(0.25)));
            float _2247 = 1.0 - (_2243 * cbSceneParam._m0[34u].x);
            float _2248 = 1.0 - (_2243 * cbSceneParam._m0[34u].y);
            float _2249 = 1.0 - (_2243 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2249) ? _1997 : (isnan(_1997) ? _2249 : min(_1997, _2249));
            frontier_phi_37_36_ladder_1 = isnan(_2248) ? _1996 : (isnan(_1996) ? _2248 : min(_1996, _2248));
            frontier_phi_37_36_ladder_2 = isnan(_2247) ? _1995 : (isnan(_1995) ? _2247 : min(_1995, _2247));
        }
        else
        {
            frontier_phi_37_36_ladder = _1997;
            frontier_phi_37_36_ladder_1 = _1996;
            frontier_phi_37_36_ladder_2 = _1995;
        }
        _2061 = frontier_phi_37_36_ladder_2;
        _2063 = frontier_phi_37_36_ladder_1;
        _2065 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2061 = _1995;
        _2063 = _1996;
        _2065 = _1997;
    }
    uvec4 _2070 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2072 = _2070.x * 14u;
    uint _2073 = _2072 + 13u;
    float _2080 = _746 + (-1.0);
    float _2085 = (cbLight._m0[_2073].x * _2080) + 1.0;
    float _2086 = (cbLight._m0[_2073].y * _2080) + 1.0;
    float _2087 = (cbLight._m0[_2073].z * _2080) + 1.0;
    float _2088 = (cbLight._m0[_2073].w * _2080) + 1.0;
    uint _2089 = _2072 + 5u;
    float _2095 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2099 = _2072 + 4u;
    float _2108 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2112 = _2072 | 1u;
    float _2123 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_583, _584, _585));
    float _2126 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_583, _584, _585));
    float _4374 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _4385 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2131 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2133 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2140 = ((cbLight._m0[_2089].x * _2095) * _2133) + (((cbLight._m0[_2099].x * _2061) * _2108) * _2131);
    float _2141 = ((_2095 * cbLight._m0[_2089].y) * _2133) + (((cbLight._m0[_2099].y * _2063) * _2108) * _2131);
    float _2142 = ((_2095 * cbLight._m0[_2089].z) * _2133) + (((cbLight._m0[_2099].z * _2065) * _2108) * _2131);
    uvec4 _2146 = floatBitsToUint(cbLight._m0[_2072 + 12u]);
    bool _2148 = _2146.x == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2148)
    {
        _2250 = _2140;
        _2252 = _2141;
        _2254 = _2142;
    }
    else
    {
        uint _2258 = _2072 + 6u;
        float _2274 = (dot(vec3(cbLight._m0[_2072 + 2u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4396 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2277 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2250 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2140;
        _2252 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2141;
        _2254 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2142;
    }
    bool _2257 = _2146.y == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2257)
    {
        _2312 = _2250;
        _2314 = _2252;
        _2316 = _2254;
    }
    else
    {
        uint _2474 = _2072 + 7u;
        float _2490 = (dot(vec3(cbLight._m0[_2072 + 3u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4412 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2493 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2312 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2250;
        _2314 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2252;
        _2316 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2254;
    }
    uint _2319 = _2072 + 8u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _586) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2072].x + _663;
    float _2335 = cbLight._m0[_2072].y + _664;
    float _2336 = cbLight._m0[_2072].z + _665;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2072].xyz));
    float _4428 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2348 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2349 = dot(vec3(_583, _584, _585), vec3(_2341, _2342, _2343));
    float _4450 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2341, _2342, _2343));
    float _4461 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2333 * _2333;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2333;
    float _2384 = (0.5 / (((_2348 * ((_2347 * _2373) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2373) + _2333) * _2347))) * _2347;
    float _4472 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    uint _2400 = _2072 + 9u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _586) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2112].x + _663;
    float _2414 = cbLight._m0[_2112].y + _664;
    float _2415 = cbLight._m0[_2112].z + _665;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2112].xyz));
    float _4483 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2427 = dot(vec3(_583, _584, _585), vec3(_2420, _2421, _2422));
    float _4494 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2431 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2420, _2421, _2422));
    float _4505 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2435 = _2412 * _2412;
    float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
    float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2449 = 1.0 - _2412;
    float _2459 = (0.5 / (((_2348 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2449) + _2412) * _2426))) * _2426;
    float _4516 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
    float _2471 = (((_2448 * cbLight._m0[_2400].x) * _2461) * _2095) + ((((cbLight._m0[_2319].x * _2061) * _2372) * _2386) * _2108);
    float _2472 = (((_2448 * cbLight._m0[_2400].y) * _2461) * _2095) + ((((cbLight._m0[_2319].y * _2063) * _2372) * _2386) * _2108);
    float _2473 = (((_2448 * cbLight._m0[_2400].z) * _2461) * _2095) + ((((cbLight._m0[_2319].z * _2065) * _2372) * _2386) * _2108);
    float _2529;
    float _2531;
    float _2533;
    if (_2148)
    {
        _2529 = _2471;
        _2531 = _2472;
        _2533 = _2473;
    }
    else
    {
        uint _2535 = _2072 + 2u;
        uint _2539 = _2072 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _586) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _663;
        float _2556 = cbLight._m0[_2535].y + _664;
        float _2557 = cbLight._m0[_2535].z + _665;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2535].xyz));
        float _4527 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2569 = dot(vec3(_583, _584, _585), vec3(_2562, _2563, _2564));
        float _4538 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4549 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2590 = (exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2591 = 1.0 - _2554;
        float _2601 = (0.5 / (((_2348 * ((_2568 * _2591) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2591) + _2554) * _2568))) * _2568;
        float _4560 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2529 = (((_2590 * cbLight._m0[_2539].x) * _2603) * _2604) + _2471;
        _2531 = (((_2590 * cbLight._m0[_2539].y) * _2603) * _2604) + _2472;
        _2533 = (((_2590 * cbLight._m0[_2539].z) * _2603) * _2604) + _2473;
    }
    float _2635;
    float _2637;
    float _2639;
    if (_2257)
    {
        _2635 = _2529;
        _2637 = _2531;
        _2639 = _2533;
    }
    else
    {
        uint _2646 = _2072 + 3u;
        uint _2650 = _2072 + 11u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _586) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _663;
        float _2667 = cbLight._m0[_2646].y + _664;
        float _2668 = cbLight._m0[_2646].z + _665;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2646].xyz));
        float _4576 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2680 = dot(vec3(_583, _584, _585), vec3(_2673, _2674, _2675));
        float _4587 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4598 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2701 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2702 = 1.0 - _2665;
        float _2712 = (0.5 / (((_2348 * ((_2679 * _2702) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2702) + _2665) * _2679))) * _2679;
        float _4609 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2635 = (((_2701 * cbLight._m0[_2650].x) * _2714) * _2715) + _2529;
        _2637 = (((_2701 * cbLight._m0[_2650].y) * _2714) * _2715) + _2531;
        _2639 = (((_2701 * cbLight._m0[_2650].z) * _2714) * _2715) + _2533;
    }
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_2070.y == 0u)
    {
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.x;
        uint _2748 = uint((float(_2736.y) * floor(float(uint(cbSceneParam._m0[85u].y * _684) / _2737))) + floor(float(uint(cbSceneParam._m0[85u].x * _683) / _2737)));
        float _2758 = (log2(_1848 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2759 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        uint _2762 = uint(isnan(14.0) ? _2759 : (isnan(_2759) ? 14.0 : min(_2759, 14.0)));
        uvec4 _2767 = texelFetch(g_lightClusterGridBuffer, int(((_2762 << 2u) + (_2748 << 6u)) >> 2u));
        uint _2768 = _2767.x;
        uint _2769 = _2736.z;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((((1u << ((_2769 >> 4u) & 15u)) + 4294967295u) & _2768) == 0u) || ((_2769 & 240u) == 0u))
        {
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
        }
        else
        {
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2762 << 5u) + (_2748 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3017)
                {
                    frontier_phi_71_pred = _3006;
                    frontier_phi_71_pred_1 = _3005;
                    frontier_phi_71_pred_2 = _3004;
                    frontier_phi_71_pred_3 = _3003;
                    frontier_phi_71_pred_4 = _3002;
                    frontier_phi_71_pred_5 = _3001;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3016;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3007 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _1846;
                        float _3213 = _3172.y - _1847;
                        float _3214 = _3172.z - _1848;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_702, _705, _708), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4635 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _1846;
                        float _3248 = (-0.0) - _1847;
                        float _3249 = (-0.0) - _1848;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3263 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3264 = 1.0 - _762;
                        float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                        float _3272 = _3271 * _3271;
                        float _3273 = _3272 * _3272;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3284 = dot(vec3(_702, _705, _708), vec3(_3254, _3255, _3256));
                        float _4651 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3288 = dot(vec3(_702, _705, _708), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                        float _4662 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                        float _3296 = _3232 * _3272;
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3222) + _3297;
                        float _4673 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3302 = 1.0 - _3272;
                        float _3312 = (0.5 / (((_3301 * ((_3287 * _3302) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3272) * _3287))) * _3301;
                        float _4684 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3323 = (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3295 * _3295) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3076 = (_3243 * _3191.x) + _3149;
                        _3077 = (_3243 * _3191.y) + _3150;
                        _3078 = (_3243 * _3191.z) + _3151;
                        _3073 = (_3323 * _3208.x) + _3146;
                        _3074 = (_3323 * _3208.y) + _3147;
                        _3075 = (_3323 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_71_pred = _3078;
                    frontier_phi_71_pred_1 = _3077;
                    frontier_phi_71_pred_2 = _3076;
                    frontier_phi_71_pred_3 = _3075;
                    frontier_phi_71_pred_4 = _3074;
                    frontier_phi_71_pred_5 = _3073;
                }
                _2859 = frontier_phi_71_pred;
                _2857 = frontier_phi_71_pred_1;
                _2855 = frontier_phi_71_pred_2;
                _2853 = frontier_phi_71_pred_3;
                _2851 = frontier_phi_71_pred_4;
                _2849 = frontier_phi_71_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2849;
                    _3002 = _2851;
                    _3003 = _2853;
                    _3004 = _2855;
                    _3005 = _2857;
                    _3006 = _2859;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
        }
        uvec4 _2862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2863 = _2862.z;
        uint _2865 = (_2863 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2865) & _2768) == 0u)
        {
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
            float _2995 = _2994 * _1846;
            float _2996 = _2994 * _1847;
            float _2997 = _2994 * _1848;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2865 < ((_2863 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3129 = _2848;
                float _3130 = _2850;
                float _3131 = _2852;
                float _3132 = _2854;
                float _3133 = _2856;
                float _3134 = _2858;
                uint _3135 = _2865;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2762 << 5u) + (_2748 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3145)
                    {
                        frontier_phi_82_pred = _3134;
                        frontier_phi_82_pred_1 = _3133;
                        frontier_phi_82_pred_2 = _3132;
                        frontier_phi_82_pred_3 = _3131;
                        frontier_phi_82_pred_4 = _3130;
                        frontier_phi_82_pred_5 = _3129;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        uint _3356 = _3144;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3367 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3367 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3367 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3367 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_1848, _3475.z, fma(_1847, _3475.y, _3475.x * _1846)) + _3475.w;
                            _3488 = !((fma(_1848, _3456.z, fma(_1847, _3456.y, _3456.x * _1846)) + _3456.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3382.x - _1846;
                                float _3516 = _3382.y - _1847;
                                float _3517 = _3382.z - _1848;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3383 * _3383));
                                float _4695 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3533 = sqrt(_3518) * _3398.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_702, _705, _708))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_1848, _3425.z, fma(_1847, _3425.y, _3425.x * _1846)) + _3425.w) / _3487;
                                float _3547 = (fma(_1848, _3441.z, fma(_1847, _3441.y, _3441.x * _1846)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4711 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _762;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _2995;
                                float _3577 = _3523 - _2996;
                                float _3578 = _3524 - _2997;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_702, _705, _708), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4722 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3590 = dot(vec3(_702, _705, _708), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4733 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_702, _705, _708), vec3(_3522, _3523, _3524))) + _3599;
                                float _4744 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4755 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3553 * _3398.z;
                                frontier_phi_88_pred_1 = _3553 * _3398.y;
                                frontier_phi_88_pred_2 = _3553 * _3398.x;
                                frontier_phi_88_pred_3 = _3627 * _3410.z;
                                frontier_phi_88_pred_4 = _3627 * _3410.y;
                                frontier_phi_88_pred_5 = _3627 * _3410.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3636 = frontier_phi_88_pred;
                            _3635 = frontier_phi_88_pred_1;
                            _3634 = frontier_phi_88_pred_2;
                            _3633 = frontier_phi_88_pred_3;
                            _3632 = frontier_phi_88_pred_4;
                            _3631 = frontier_phi_88_pred_5;
                            _3340 = _3634 + _3353;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3337 = _3631 + _3350;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3342;
                        frontier_phi_82_pred_1 = _3341;
                        frontier_phi_82_pred_2 = _3340;
                        frontier_phi_82_pred_3 = _3339;
                        frontier_phi_82_pred_4 = _3338;
                        frontier_phi_82_pred_5 = _3337;
                    }
                    _2980 = frontier_phi_82_pred;
                    _2978 = frontier_phi_82_pred_1;
                    _2976 = frontier_phi_82_pred_2;
                    _2974 = frontier_phi_82_pred_3;
                    _2972 = frontier_phi_82_pred_4;
                    _2970 = frontier_phi_82_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2970;
                        _3130 = _2972;
                        _3131 = _2974;
                        _3132 = _2976;
                        _3133 = _2978;
                        _3134 = _2980;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2976;
                frontier_phi_63_64_ladder_1 = _2980;
                frontier_phi_63_64_ladder_2 = _2978;
                frontier_phi_63_64_ladder_3 = _2974;
                frontier_phi_63_64_ladder_4 = _2972;
                frontier_phi_63_64_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_63_64_ladder = _2854;
                frontier_phi_63_64_ladder_1 = _2858;
                frontier_phi_63_64_ladder_2 = _2856;
                frontier_phi_63_64_ladder_3 = _2852;
                frontier_phi_63_64_ladder_4 = _2850;
                frontier_phi_63_64_ladder_5 = _2848;
            }
            _2969 = frontier_phi_63_64_ladder_5;
            _2971 = frontier_phi_63_64_ladder_4;
            _2973 = frontier_phi_63_64_ladder_3;
            _2975 = frontier_phi_63_64_ladder;
            _2977 = frontier_phi_63_64_ladder_2;
            _2979 = frontier_phi_63_64_ladder_1;
        }
        float _2984 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2781 = (_2984 * _2975) + _2312;
        _2783 = (_2984 * _2977) + _2314;
        _2785 = (_2984 * _2979) + _2316;
        _2787 = ((_2969 * 0.039999999105930328369140625) * _2984) + _2635;
        _2789 = ((_2971 * 0.039999999105930328369140625) * _2984) + _2637;
        _2791 = ((_2973 * 0.039999999105930328369140625) * _2984) + _2639;
    }
    else
    {
        _2781 = _2312;
        _2783 = _2314;
        _2785 = _2316;
        _2787 = _2635;
        _2789 = _2637;
        _2791 = _2639;
    }
    float _4771 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4782 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4793 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2808 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2781 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _746))) + ((_2787 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    float _2809 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2783 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _746))) + ((_2789 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    float _2810 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2785 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _746))) + ((_2791 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    uint _2811 = _238 + 6u;
    float _2819 = _683 / cbSceneParam._m0[86u].x;
    float _2820 = _684 / cbSceneParam._m0[86u].y;
    vec4 _2834 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2819, _2820, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2836 = _2834.x;
    float _2837 = _2834.y;
    float _2838 = _2834.z;
    float _2839 = _2834.w;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2873 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2874 = _2873 / _604;
        float _2885 = _2874 * _656;
        float _2886 = _657 * _2874;
        float _2887 = (-0.0) - _2886;
        float _2889 = _2874 * _658;
        float _2891 = (cbSceneParam._m0[77u].w * _2887) / _2873;
        float _2892 = _2891 + cbSceneParam._m0[79u].w;
        float _2893 = cbSceneParam._m0[79u].w - _2886;
        float _2899 = sqrt(((_2885 * _2885) + (_2886 * _2886)) + (_2889 * _2889));
        float _2902 = (1.0 - (cbSceneParam._m0[77u].w / _2873)) * _2899;
        float _2907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2887 - _2891) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2892 > 0.0) ? exp2(_2907 * _2892) : (2.0 - exp2(_2909 * _2892))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2902;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : max(_2892, _2893));
            float _3032 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : min(_2892, _2893));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3086 = ((abs(_2899 / _2887) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2907 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2907 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2909 * _3041) - exp2(_2909 * _3042)) * _3030))) + (_2902 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2819, _2820, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2839);
        _2911 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2836;
        _2913 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2837;
        _2915 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2838;
        _2917 = _3097 * _2839;
    }
    else
    {
        _2911 = _2836;
        _2913 = _2837;
        _2915 = _2838;
        _2917 = _2839;
    }
    bool _3124;
    vec4 _2927;
    vec4 _2949;
    float _2951;
    float _2955;
    float _2956;
    float _2957;
    float _2958;
    bool _2968;
    for (;;)
    {
        _2927 = cbMatDynParam._m0[0u];
        float _2929 = roundEven(_2927.y);
        bool _2930 = _2929 == 3.0;
        float _2931 = log2(_2917);
        float _2938 = exp2(_2931 * cbSceneParam._m0[78u].x) * _2808;
        float _2939 = exp2(_2931 * cbSceneParam._m0[78u].y) * _2809;
        float _2940 = exp2(_2931 * cbSceneParam._m0[78u].z) * _2810;
        float _2947 = _672 + (-0.5);
        _2949 = cbMtdParam._m0[1u];
        _2951 = _2949.y * _2947;
        float _2954 = (_2929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2955 = _2954 * (_2930 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2911)));
        _2956 = _2954 * (_2930 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2913)));
        _2957 = _2954 * (_2930 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2915)));
        _2958 = _2947 * 0.999000012874603271484375;
        _2968 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2968)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2958) < 0.5)
            {
                _3124 = true;
                break;
            }
        }
        uint _3065 = _721 + uint(_2927.w);
        if ((cbInstanceData._m0[_3065].w < 1.0) && ((cbInstanceData._m0[_3065].w + _2958) < 0.5))
        {
            _3124 = true;
            break;
        }
        if ((_2951 + 1.0) < _2949.x)
        {
            _3124 = true;
            break;
        }
        _3124 = false;
        break;
    }
    float _3328;
    if (_3124)
    {
        discard_state = true;
        _3328 = 0.0;
    }
    else
    {
        _3328 = cbInstanceData._m0[_2811].w;
    }
    SV_Target.x = _2955;
    SV_Target.y = _2956;
    SV_Target.z = _2957;
    SV_Target.w = _3328;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2811].w;
    discard_exit();
}


