#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1308;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3894 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _390) + _486;
    float _498 = ((((_465.x - _484) * _390) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _390) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3905 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))));
    float _508 = _498 + ((((_438.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _509 = _499 + ((((_438.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _512 = fma(_505, _243, fma(_509, _250, _508 * _236));
    float _515 = fma(_505, _244, fma(_509, _251, _508 * _237));
    float _518 = fma(_505, _245, fma(_509, _252, _508 * _238));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _568 = _566.x;
    float _569 = 1.0 - _568;
    float _573 = ((_568 - _569) * cbMtdParam._m0[24u].z) + _569;
    float _575 = (cbMtdParam._m0[19u].x + dot(vec4(_522 * _512, _522 * _515, _522 * _518, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_573 * cbMtdParam._m0[21u].z);
    float _3916 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _578 = (-0.0) - cbMtdParam._m0[24u].y;
    float _580 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
    float _588 = _576 - ((_576 * TEXCOORD_8.x) * _581);
    float _589 = _576 - ((_576 * TEXCOORD_8.y) * _581);
    float _590 = _576 - ((_576 * TEXCOORD_8.z) * _581);
    float _597 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _601 = ((isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : min(_597, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _609 = (_601 - (((_573 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _601))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3947 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _614 = ((_588 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) * _610) + _397;
    float _615 = ((_589 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) * _610) + _398;
    float _616 = ((_590 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) * _610) + _399;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _630 = _628.x;
    float _631 = 1.0 - _630;
    float _658 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_630 - _631) * cbMtdParam._m0[24u].w) + _631) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3958 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _667 = ((((cbMtdParam._m0[10u].x - _614) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _659) + _614;
    float _668 = ((((cbMtdParam._m0[10u].y - _615) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _659) + _615;
    float _669 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _616)) * _659) + _616;
    float _674 = (((_438.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    vec4 _688 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _695 = (_688.x * 2.0) + (-1.0);
    float _696 = (_688.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3969 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _706 = (((_688.z - _674) * _588) * _610) + _674;
    float _709 = ((cbMtdParam._m0[23u].y - _706) * _659) + _706;
    vec4 _728 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _734 = (_728.x * 2.0) + (-1.0);
    float _735 = (_728.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3980 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _756 = (((cbMtdParam._m0[21u].x * _508) + ((_695 - _508) * _588)) * _610) + _508;
    float _757 = (((cbMtdParam._m0[21u].x * _509) + ((_696 - _509) * _589)) * _610) + _509;
    float _758 = (((sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _505) * _590) * _610) + _505;
    float _769 = (((_734 - _756) + (_756 * cbMtdParam._m0[22u].z)) * _659) + _756;
    float _770 = (((_735 - _757) + (_757 * cbMtdParam._m0[22u].z)) * _659) + _757;
    float _771 = ((sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _758) * _659) + _758;
    float _773 = cbMtdParam._m0[22u].x + _538.w;
    float _776 = fma(_771, _243, fma(_770, _250, _769 * _236));
    float _779 = fma(_771, _244, fma(_770, _251, _769 * _237));
    float _782 = fma(_771, _245, fma(_770, _252, _769 * _238));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3991 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _790 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4013 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4024 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4035 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _896 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _899 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _913 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4046 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _937 = ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * TEXCOORD_5.w) * _933.x;
    float _938 = dot(vec3(_787, _788, _789), vec3(_866, _867, _868));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _787) - _866;
    float _946 = (_941 * _788) - _867;
    float _947 = (_941 * _789) - _868;
    float _951 = abs(dot(vec3(_866, _867, _868), vec3(_787, _788, _789)));
    float _4079 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _953 = sqrt(_790);
    float _966 = exp2((_953 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_953 * 3.0));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1307;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1032 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1036 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1040 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1065 = _998 + _787;
        float _1066 = _1002 + _788;
        float _1067 = _1006 + _789;
        float _1077 = fma(_1067, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065)) - _1032;
        float _1078 = fma(_1067, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065)) - _1036;
        float _1079 = fma(_1067, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065)) - _1040;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1032 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1036 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[34u].z) + ((((((_1040 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1135 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1101.x + (-0.5));
        float _1137 = _1135 * (_1101.y + (-0.5));
        float _1138 = _1135 * (_1101.z + (-0.5));
        float _1145 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1108.x + (-0.5));
        float _1147 = _1145 * (_1108.y + (-0.5));
        float _1148 = _1145 * (_1108.z + (-0.5));
        float _1155 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1115.x + (-0.5));
        float _1157 = _1155 * (_1115.y + (-0.5));
        float _1158 = _1155 * (_1115.z + (-0.5));
        float _1165 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1122.x + (-0.5));
        float _1167 = _1165 * (_1122.y + (-0.5));
        float _1168 = _1165 * (_1122.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1189 = (dot(vec3(_787, _788, _789), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1199 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _4127 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1201 + 1.0))) + _1206) * _1169;
        float _1216 = _1137 * 0.5;
        float _1217 = _1147 * 0.5;
        float _1218 = _1157 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_787, _788, _789), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _4160 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1243 + 1.0))) + _1248) * _1170;
        float _1258 = _1138 * 0.5;
        float _1259 = _1148 * 0.5;
        float _1260 = _1158 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_787, _788, _789), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4193 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1285 + 1.0))) + _1290) * _1171;
        _1307 = _1138;
        _1309 = _1137;
        _1310 = _1136;
        _1311 = _1148;
        _1312 = _1147;
        _1313 = _1146;
        _1314 = _1158;
        _1315 = _1157;
        _1316 = _1156;
        _1317 = _1171;
        _1318 = _1170;
        _1319 = _1169;
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1308;
        _1309 = _1308;
        _1310 = _1308;
        _1311 = _1308;
        _1312 = _1308;
        _1313 = _1308;
        _1314 = _1308;
        _1315 = _1308;
        _1316 = _1308;
        _1317 = _1308;
        _1318 = _1308;
        _1319 = _1308;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1351 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1355 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1378 = _998 + _787;
        float _1379 = _1002 + _788;
        float _1380 = _1006 + _789;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_787, _788, _789), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4256 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_787, _788, _789), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4289 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_787, _788, _789), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4322 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1308;
        _1617 = _1308;
        _1618 = _1308;
        _1619 = _1308;
        _1620 = _1308;
        _1621 = _1308;
        _1622 = _1308;
        _1623 = _1308;
        _1624 = _1308;
        _1625 = _1308;
        _1626 = _1308;
        _1627 = _1308;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1320)) + _1320;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1321)) + _1321;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1322)) + _1322;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _945 * 0.5;
    float _1685 = _946 * 0.5;
    float _1686 = _947 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1307, _1311, _1314, _1317));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1814 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1817 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1845 = frontier_phi_14_12_ladder;
        }
        float _2014;
        if (_1814 > 0.0)
        {
            _2014 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2014 = frontier_phi_23_19_ladder;
        }
        float _2309;
        if (_1817 > 0.0)
        {
            _2309 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2309 = frontier_phi_35_30_ladder;
        }
        float _2311 = isnan(_2014) ? _1845 : (isnan(_1845) ? _2014 : min(_1845, _2014));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1811) + _1800;
        float _2317 = (_2312 * _1814) + _1804;
        float _2318 = (_2312 * _1817) + _1808;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2319;
        float _2323 = _2319 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 > _2323) || ((_2317 < _2321) || ((_2316 < _2321) || (_2316 > _2323))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2318, cbModelParam._m0[9u].z, fma(_2317, cbModelParam._m0[9u].y, _2316 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2318, cbModelParam._m0[10u].z, fma(_2317, cbModelParam._m0[10u].y, _2316 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2318, cbModelParam._m0[11u].z, fma(_2317, cbModelParam._m0[11u].y, _2316 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_13_35_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_13_35_ladder_2;
        _1835 = frontier_phi_13_35_ladder_1;
        _1837 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1753);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1895 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1899 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1903 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1906 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1909 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1912 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2019;
        if (_1906 > 0.0)
        {
            _2019 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2019 = frontier_phi_25_21_ladder;
        }
        float _2336;
        if (_1909 > 0.0)
        {
            _2336 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2336 = frontier_phi_37_32_ladder;
        }
        float _2663;
        if (_1912 > 0.0)
        {
            _2663 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2663 = frontier_phi_47_44_ladder;
        }
        float _2665 = isnan(_2336) ? _2019 : (isnan(_2019) ? _2336 : min(_2019, _2336));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1906) + _1895;
        float _2671 = (_2666 * _1909) + _1899;
        float _2672 = (_2666 * _1912) + _1903;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_22_47_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1931 = frontier_phi_22_47_ladder_2;
        _1933 = frontier_phi_22_47_ladder_1;
        _1935 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1842);
        _1931 = _1915.x * cbModelParam._m0[1u].z;
        _1933 = _1915.y * cbModelParam._m0[1u].z;
        _1935 = _1915.z * cbModelParam._m0[1u].z;
    }
    float _1947 = ((((1.0 - _966) * ((_953 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_966 * _953)) * _937;
    float _1948 = _1947 * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1949 = _1947 * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1950 = _1947 * ((cbModelParam._m0[1u].w * (_1935 - _1837)) + _1837);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, _1948 * cbSceneParam._m0[91u].x));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2006 = _1993 / _2005;
    float _2007 = _1997 / _2005;
    float _2008 = _2001 / _2005;
    float _2155;
    float _2156;
    float _2157;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2035 = ((uint(_2008 > cbSceneParam._m0[59u].y) + uint(_2008 > cbSceneParam._m0[59u].x)) + uint(_2008 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2036 = _2035 + 43u;
        uint _2044 = _2035 + 44u;
        uint _2052 = _2035 + 45u;
        uint _2060 = _2035 + 46u;
        float _2071 = fma(_2005, cbSceneParam._m0[_2036].w, fma(_2001, cbSceneParam._m0[_2036].z, fma(_1997, cbSceneParam._m0[_2036].y, _1993 * cbSceneParam._m0[_2036].x)));
        float _2075 = fma(_2005, cbSceneParam._m0[_2044].w, fma(_2001, cbSceneParam._m0[_2044].z, fma(_1997, cbSceneParam._m0[_2044].y, _1993 * cbSceneParam._m0[_2044].x)));
        float _2083 = fma(_2005, cbSceneParam._m0[_2060].w, fma(_2001, cbSceneParam._m0[_2060].z, fma(_1997, cbSceneParam._m0[_2060].y, _1993 * cbSceneParam._m0[_2060].x)));
        float _2088 = cbSceneParam._m0[33u].z * _2083;
        float _2090 = cbSceneParam._m0[33u].w * _2083;
        float _2093 = fma(_2005, cbSceneParam._m0[_2052].w, fma(_2001, cbSceneParam._m0[_2052].z, fma(_1997, cbSceneParam._m0[_2052].y, _1993 * cbSceneParam._m0[_2052].x))) / _2083;
        float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_2007 * _2007) + (_2006 * _2006)) + (_2008 * _2008))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2148 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2088 + _2071) / _2083, (_2090 + _2075) / _2083), _2093), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 + _2071) / _2083, (_2075 - _2088) / _2083), _2093), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 - _2088) / _2083, (_2075 - _2090) / _2083), _2093), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 - _2090) / _2083, (_2088 + _2075) / _2083), _2093), 0.0)).x), vec4(0.25)));
        _2155 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
        _2156 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
        _2157 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2155 = 1.0;
        _2156 = 1.0;
        _2157 = 1.0;
    }
    float _2221;
    float _2223;
    float _2225;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2209 = fma(_2005, cbSceneParam._m0[63u].w, fma(_2001, cbSceneParam._m0[63u].z, fma(_1997, cbSceneParam._m0[63u].y, _1993 * cbSceneParam._m0[63u].x)));
        float _2210 = fma(_2005, cbSceneParam._m0[60u].w, fma(_2001, cbSceneParam._m0[60u].z, fma(_1997, cbSceneParam._m0[60u].y, _1993 * cbSceneParam._m0[60u].x))) / _2209;
        float _2211 = fma(_2005, cbSceneParam._m0[61u].w, fma(_2001, cbSceneParam._m0[61u].z, fma(_1997, cbSceneParam._m0[61u].y, _1993 * cbSceneParam._m0[61u].x))) / _2209;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2210 >= cbSceneParam._m0[64u].x) && (_2211 >= cbSceneParam._m0[64u].y)) && (_2210 <= cbSceneParam._m0[64u].z)) && (_2211 <= cbSceneParam._m0[64u].w))
        {
            float _2349 = fma(_2005, cbSceneParam._m0[62u].w, fma(_2001, cbSceneParam._m0[62u].z, fma(_1997, cbSceneParam._m0[62u].y, _1993 * cbSceneParam._m0[62u].x))) / _2209;
            float _2353 = isnan(cbSceneParam._m0[41u].w) ? _2349 : (isnan(_2349) ? cbSceneParam._m0[41u].w : max(_2349, cbSceneParam._m0[41u].w));
            float _2396 = (cbSceneParam._m0[33u].x - sqrt(((_2007 * _2007) + (_2006 * _2006)) + (_2008 * _2008))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
            float _2403 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2210, cbSceneParam._m0[33u].w + _2211), _2353), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2210, _2211 - cbSceneParam._m0[33u].z), _2353), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2210 - cbSceneParam._m0[33u].z, _2211 - cbSceneParam._m0[33u].w), _2353), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2210 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2211), _2353), 0.0)).x), vec4(0.25)));
            float _2407 = 1.0 - (_2403 * cbSceneParam._m0[34u].x);
            float _2408 = 1.0 - (_2403 * cbSceneParam._m0[34u].y);
            float _2409 = 1.0 - (_2403 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2409) ? _2157 : (isnan(_2157) ? _2409 : min(_2157, _2409));
            frontier_phi_34_33_ladder_1 = isnan(_2408) ? _2156 : (isnan(_2156) ? _2408 : min(_2156, _2408));
            frontier_phi_34_33_ladder_2 = isnan(_2407) ? _2155 : (isnan(_2155) ? _2407 : min(_2155, _2407));
        }
        else
        {
            frontier_phi_34_33_ladder = _2157;
            frontier_phi_34_33_ladder_1 = _2156;
            frontier_phi_34_33_ladder_2 = _2155;
        }
        _2221 = frontier_phi_34_33_ladder_2;
        _2223 = frontier_phi_34_33_ladder_1;
        _2225 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2221 = _2155;
        _2223 = _2156;
        _2225 = _2157;
    }
    uvec4 _2230 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2232 = _2230.x * 14u;
    uint _2233 = _2232 + 13u;
    float _2240 = _937 + (-1.0);
    float _2245 = (cbLight._m0[_2233].x * _2240) + 1.0;
    float _2246 = (cbLight._m0[_2233].y * _2240) + 1.0;
    float _2247 = (cbLight._m0[_2233].z * _2240) + 1.0;
    float _2248 = (cbLight._m0[_2233].w * _2240) + 1.0;
    uint _2249 = _2232 + 5u;
    float _2255 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2259 = _2232 + 4u;
    float _2268 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
    uint _2272 = _2232 | 1u;
    float _2283 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_787, _788, _789));
    float _2286 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_787, _788, _789));
    float _4500 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _4511 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2291 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2293 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2300 = ((cbLight._m0[_2249].x * _2255) * _2293) + (((cbLight._m0[_2259].x * _2221) * _2268) * _2291);
    float _2301 = ((_2255 * cbLight._m0[_2249].y) * _2293) + (((cbLight._m0[_2259].y * _2223) * _2268) * _2291);
    float _2302 = ((_2255 * cbLight._m0[_2249].z) * _2293) + (((cbLight._m0[_2259].z * _2225) * _2268) * _2291);
    uvec4 _2306 = floatBitsToUint(cbLight._m0[_2232 + 12u]);
    bool _2308 = _2306.x == 0u;
    float _2410;
    float _2412;
    float _2414;
    if (_2308)
    {
        _2410 = _2300;
        _2412 = _2301;
        _2414 = _2302;
    }
    else
    {
        uint _2418 = _2232 + 6u;
        float _2434 = (dot(vec3(cbLight._m0[_2232 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2435 = _2434 * _2434;
        float _4522 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2436 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2437 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2410 = (((cbLight._m0[_2418].x * 0.3183098733425140380859375) * _2436) * _2437) + _2300;
        _2412 = (((cbLight._m0[_2418].y * 0.3183098733425140380859375) * _2436) * _2437) + _2301;
        _2414 = (((cbLight._m0[_2418].z * 0.3183098733425140380859375) * _2436) * _2437) + _2302;
    }
    bool _2417 = _2306.y == 0u;
    float _2472;
    float _2474;
    float _2476;
    if (_2417)
    {
        _2472 = _2410;
        _2474 = _2412;
        _2476 = _2414;
    }
    else
    {
        uint _2634 = _2232 + 7u;
        float _2650 = (dot(vec3(cbLight._m0[_2232 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2651 = _2650 * _2650;
        float _4538 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2652 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2653 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2472 = (((cbLight._m0[_2634].x * 0.3183098733425140380859375) * _2652) * _2653) + _2410;
        _2474 = (((cbLight._m0[_2634].y * 0.3183098733425140380859375) * _2652) * _2653) + _2412;
        _2476 = (((cbLight._m0[_2634].z * 0.3183098733425140380859375) * _2652) * _2653) + _2414;
    }
    uint _2479 = _2232 + 8u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _790) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2232].x + _866;
    float _2495 = cbLight._m0[_2232].y + _867;
    float _2496 = cbLight._m0[_2232].z + _868;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2232].xyz));
    float _4554 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2508 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2509 = dot(vec3(_787, _788, _789), vec3(_2501, _2502, _2503));
    float _4576 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2513 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2501, _2502, _2503));
    float _4587 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2517 = _2493 * _2493;
    float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
    float _2532 = (exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2533 = 1.0 - _2493;
    float _2544 = (0.5 / (((_2508 * ((_2507 * _2533) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2533) + _2493) * _2507))) * _2507;
    float _4598 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
    uint _2560 = _2232 + 9u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _790) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2272].x + _866;
    float _2574 = cbLight._m0[_2272].y + _867;
    float _2575 = cbLight._m0[_2272].z + _868;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2272].xyz));
    float _4609 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2587 = dot(vec3(_787, _788, _789), vec3(_2580, _2581, _2582));
    float _4620 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2580, _2581, _2582));
    float _4631 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2572 * _2572;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2609 = 1.0 - _2572;
    float _2619 = (0.5 / (((_2508 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2609) + _2572) * _2586))) * _2586;
    float _4642 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2621 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    float _2631 = (((_2608 * cbLight._m0[_2560].x) * _2621) * _2255) + ((((cbLight._m0[_2479].x * _2221) * _2532) * _2546) * _2268);
    float _2632 = (((_2608 * cbLight._m0[_2560].y) * _2621) * _2255) + ((((cbLight._m0[_2479].y * _2223) * _2532) * _2546) * _2268);
    float _2633 = (((_2608 * cbLight._m0[_2560].z) * _2621) * _2255) + ((((cbLight._m0[_2479].z * _2225) * _2532) * _2546) * _2268);
    float _2689;
    float _2691;
    float _2693;
    if (_2308)
    {
        _2689 = _2631;
        _2691 = _2632;
        _2693 = _2633;
    }
    else
    {
        uint _2695 = _2232 + 2u;
        uint _2699 = _2232 + 10u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _790) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _866;
        float _2716 = cbLight._m0[_2695].y + _867;
        float _2717 = cbLight._m0[_2695].z + _868;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2695].xyz));
        float _4653 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2729 = dot(vec3(_787, _788, _789), vec3(_2722, _2723, _2724));
        float _4664 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4675 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2750 = (exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2751 = 1.0 - _2714;
        float _2761 = (0.5 / (((_2508 * ((_2728 * _2751) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2751) + _2714) * _2728))) * _2728;
        float _4686 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
        _2689 = (((_2750 * cbLight._m0[_2699].x) * _2763) * _2764) + _2631;
        _2691 = (((_2750 * cbLight._m0[_2699].y) * _2763) * _2764) + _2632;
        _2693 = (((_2750 * cbLight._m0[_2699].z) * _2763) * _2764) + _2633;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2417)
    {
        _2795 = _2689;
        _2797 = _2691;
        _2799 = _2693;
    }
    else
    {
        uint _2806 = _2232 + 3u;
        uint _2810 = _2232 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _790) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _866;
        float _2827 = cbLight._m0[_2806].y + _867;
        float _2828 = cbLight._m0[_2806].z + _868;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2806].xyz));
        float _4702 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2840 = dot(vec3(_787, _788, _789), vec3(_2833, _2834, _2835));
        float _4713 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4724 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2861 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2862 = 1.0 - _2825;
        float _2872 = (0.5 / (((_2508 * ((_2839 * _2862) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2508 * _2862) + _2825) * _2839))) * _2839;
        float _4735 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2795 = (((_2861 * cbLight._m0[_2810].x) * _2874) * _2875) + _2689;
        _2797 = (((_2861 * cbLight._m0[_2810].y) * _2874) * _2875) + _2691;
        _2799 = (((_2861 * cbLight._m0[_2810].z) * _2874) * _2875) + _2693;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2230.y == 0u)
    {
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2897)));
        float _2918 = (log2(_2008 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            uint _3158 = 0u;
            uint _3167;
            bool _3168;
            for (;;)
            {
                _3167 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                _3168 = _3167 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3168)
                {
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3156;
                    frontier_phi_66_pred_2 = _3155;
                    frontier_phi_66_pred_3 = _3154;
                    frontier_phi_66_pred_4 = _3153;
                    frontier_phi_66_pred_5 = _3152;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3167;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3158 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _2006;
                        float _3343 = _3302.y - _2007;
                        float _3344 = _3302.z - _2008;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_893, _896, _899), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4761 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _2006;
                        float _3378 = (-0.0) - _2007;
                        float _3379 = (-0.0) - _2008;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3393 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3394 = 1.0 - _953;
                        float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                        float _3402 = _3401 * _3401;
                        float _3403 = _3402 * _3402;
                        float _3404 = _3384 + _3349;
                        float _3405 = _3385 + _3350;
                        float _3406 = _3386 + _3351;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3414 = dot(vec3(_893, _896, _899), vec3(_3384, _3385, _3386));
                        float _4777 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3418 = dot(vec3(_893, _896, _899), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                        float _4788 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                        float _3426 = _3362 * _3402;
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3352) + _3427;
                        float _4799 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3432 = 1.0 - _3402;
                        float _3442 = (0.5 / (((_3431 * ((_3417 * _3432) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3402) * _3417))) * _3431;
                        float _4810 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3453 = (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3425 * _3425) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3211 = (_3373 * _3321.x) + _3279;
                        _3212 = (_3373 * _3321.y) + _3280;
                        _3213 = (_3373 * _3321.z) + _3281;
                        _3208 = (_3453 * _3338.x) + _3276;
                        _3209 = (_3453 * _3338.y) + _3277;
                        _3210 = (_3453 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_66_pred = _3213;
                    frontier_phi_66_pred_1 = _3212;
                    frontier_phi_66_pred_2 = _3211;
                    frontier_phi_66_pred_3 = _3210;
                    frontier_phi_66_pred_4 = _3209;
                    frontier_phi_66_pred_5 = _3208;
                }
                _3019 = frontier_phi_66_pred;
                _3017 = frontier_phi_66_pred_1;
                _3015 = frontier_phi_66_pred_2;
                _3013 = frontier_phi_66_pred_3;
                _3011 = frontier_phi_66_pred_4;
                _3009 = frontier_phi_66_pred_5;
                uint _3159 = _3158 + 1u;
                if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3152 = _3009;
                    _3153 = _3011;
                    _3154 = _3013;
                    _3155 = _3015;
                    _3156 = _3017;
                    _3157 = _3019;
                    _3158 = _3159;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        if (((4294967295u << _3025) & _2928) == 0u)
        {
            _3120 = _3008;
            _3122 = _3010;
            _3124 = _3012;
            _3126 = _3014;
            _3128 = _3016;
            _3130 = _3018;
        }
        else
        {
            float _3145 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
            float _3146 = _3145 * _2006;
            float _3147 = _3145 * _2007;
            float _3148 = _3145 * _2008;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3259 = _3008;
                float _3260 = _3010;
                float _3261 = _3012;
                float _3262 = _3014;
                float _3263 = _3016;
                float _3264 = _3018;
                uint _3265 = _3025;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3275)
                    {
                        frontier_phi_72_pred = _3264;
                        frontier_phi_72_pred_1 = _3263;
                        frontier_phi_72_pred_2 = _3262;
                        frontier_phi_72_pred_3 = _3261;
                        frontier_phi_72_pred_4 = _3260;
                        frontier_phi_72_pred_5 = _3259;
                    }
                    else
                    {
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3471 = _3259;
                        float _3472 = _3260;
                        float _3473 = _3261;
                        float _3474 = _3262;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        uint _3477 = _3274;
                        uint _3478;
                        vec4 _3503;
                        float _3504;
                        vec4 _3519;
                        vec3 _3531;
                        vec4 _3546;
                        vec4 _3561;
                        float _3607;
                        bool _3608;
                        for (;;)
                        {
                            uint _3488 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3477));
                            _3478 = (_3477 + 4294967295u) & _3477;
                            uint _3490 = _3488 * 40u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3504 = _3503.w;
                            uint _3506 = (_3488 * 40u) + 4u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3488 * 40u) + 8u;
                            _3531 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x));
                            uint _3533 = (_3488 * 40u) + 16u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3488 * 40u) + 20u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3488 * 40u) + 24u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3582 = (_3488 * 40u) + 28u;
                            vec4 _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3607 = fma(_2008, _3595.z, fma(_2007, _3595.y, _3595.x * _2006)) + _3595.w;
                            _3608 = !((fma(_2008, _3576.z, fma(_2007, _3576.y, _3576.x * _2006)) + _3576.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3608)
                            {
                                float _3635 = _3503.x - _2006;
                                float _3636 = _3503.y - _2007;
                                float _3637 = _3503.z - _2008;
                                float _3638 = dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637));
                                float _3641 = inversesqrt(_3638);
                                float _3642 = _3641 * _3635;
                                float _3643 = _3641 * _3636;
                                float _3644 = _3641 * _3637;
                                float _3648 = 1.0 - (_3638 / (_3504 * _3504));
                                float _4821 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3653 = sqrt(_3638) * _3519.w;
                                float _3655 = 1.39999997615814208984375 / (_3653 + 1.39999997615814208984375);
                                float _3656 = _3655 * _3655;
                                float _3659 = ((1.0 - _3656) * dot(vec3(_3642, _3643, _3644), vec3(_893, _896, _899))) + _3656;
                                float _3662 = _3653 * _3653;
                                float _3666 = (fma(_2008, _3546.z, fma(_2007, _3546.y, _3546.x * _2006)) + _3546.w) / _3607;
                                float _3667 = (fma(_2008, _3561.z, fma(_2007, _3561.y, _3561.x * _2006)) + _3561.w) / _3607;
                                float _3671 = 1.0 - dot(vec2(_3666, _3667), vec2(_3666, _3667));
                                float _4837 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3673 = _3672 * (((isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0))) * _3649) / ((_3662 * 0.699999988079071044921875) + 1.0));
                                float _3685 = exp2(log2(1.0 / ((_3662 * 3.5) + 5.0)) * 0.25);
                                float _3686 = 1.0 - _953;
                                float _3693 = sqrt(1.0 - ((1.0 - (_3686 * _3686)) * (1.0 - (_3685 * _3685))));
                                float _3694 = _3693 * _3693;
                                float _3695 = _3694 * _3694;
                                float _3696 = _3642 - _3146;
                                float _3697 = _3643 - _3147;
                                float _3698 = _3644 - _3148;
                                float _3702 = inversesqrt(dot(vec3(_3696, _3697, _3698), vec3(_3696, _3697, _3698)));
                                float _3706 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3146, (-0.0) - _3147, (-0.0) - _3148));
                                float _4848 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3710 = dot(vec3(_893, _896, _899), vec3(_3702 * _3696, _3702 * _3697, _3702 * _3698));
                                float _4859 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3717 = ((_3713 * _3713) * (_3695 + (-1.0))) + 1.0;
                                float _3718 = _3655 * _3694;
                                float _3719 = _3718 * _3718;
                                float _3725 = ((1.0 - _3719) * dot(vec3(_893, _896, _899), vec3(_3642, _3643, _3644))) + _3719;
                                float _4870 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3727 = 1.0 - _3694;
                                float _3737 = (0.5 / (((_3726 * ((_3709 * _3727) + _3694)) + 9.9999999392252902907785028219223e-09) + (((_3726 * _3727) + _3694) * _3709))) * _3726;
                                float _4881 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3747 = (_3672 * _3649) * (((_3695 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3717 * _3717) * ((_3662 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3673 * _3519.y;
                                frontier_phi_78_pred_1 = _3673 * _3519.x;
                                frontier_phi_78_pred_2 = _3747 * _3531.z;
                                frontier_phi_78_pred_3 = _3747 * _3531.y;
                                frontier_phi_78_pred_4 = _3747 * _3531.x;
                                frontier_phi_78_pred_5 = _3673 * _3519.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3755 = frontier_phi_78_pred;
                            _3754 = frontier_phi_78_pred_1;
                            _3753 = frontier_phi_78_pred_2;
                            _3752 = frontier_phi_78_pred_3;
                            _3751 = frontier_phi_78_pred_4;
                            _3756 = frontier_phi_78_pred_5;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            if (_3478 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3478;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3463;
                        frontier_phi_72_pred_1 = _3462;
                        frontier_phi_72_pred_2 = _3461;
                        frontier_phi_72_pred_3 = _3460;
                        frontier_phi_72_pred_4 = _3459;
                        frontier_phi_72_pred_5 = _3458;
                    }
                    _3131 = frontier_phi_72_pred;
                    _3129 = frontier_phi_72_pred_1;
                    _3127 = frontier_phi_72_pred_2;
                    _3125 = frontier_phi_72_pred_3;
                    _3123 = frontier_phi_72_pred_4;
                    _3121 = frontier_phi_72_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3121;
                        _3260 = _3123;
                        _3261 = _3125;
                        _3262 = _3127;
                        _3263 = _3129;
                        _3264 = _3131;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3131;
                frontier_phi_60_61_ladder_1 = _3129;
                frontier_phi_60_61_ladder_2 = _3125;
                frontier_phi_60_61_ladder_3 = _3123;
                frontier_phi_60_61_ladder_4 = _3121;
                frontier_phi_60_61_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_60_61_ladder = _3018;
                frontier_phi_60_61_ladder_1 = _3016;
                frontier_phi_60_61_ladder_2 = _3012;
                frontier_phi_60_61_ladder_3 = _3010;
                frontier_phi_60_61_ladder_4 = _3008;
                frontier_phi_60_61_ladder_5 = _3014;
            }
            _3120 = frontier_phi_60_61_ladder_4;
            _3122 = frontier_phi_60_61_ladder_3;
            _3124 = frontier_phi_60_61_ladder_2;
            _3126 = frontier_phi_60_61_ladder_5;
            _3128 = frontier_phi_60_61_ladder_1;
            _3130 = frontier_phi_60_61_ladder;
        }
        float _3135 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2941 = (_3135 * _3126) + _2472;
        _2943 = (_3135 * _3128) + _2474;
        _2945 = (_3135 * _3130) + _2476;
        _2947 = ((_3120 * 0.039999999105930328369140625) * _3135) + _2795;
        _2949 = ((_3122 * 0.039999999105930328369140625) * _3135) + _2797;
        _2951 = ((_3124 * 0.039999999105930328369140625) * _3135) + _2799;
    }
    else
    {
        _2941 = _2472;
        _2943 = _2474;
        _2945 = _2476;
        _2947 = _2795;
        _2949 = _2797;
        _2951 = _2799;
    }
    float _4897 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4908 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4919 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    uint _2971 = _255 + 6u;
    float _2979 = _874 / cbSceneParam._m0[86u].x;
    float _2980 = _875 / cbSceneParam._m0[86u].y;
    vec4 _2994 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2996 = _2994.x;
    float _2997 = _2994.y;
    float _2998 = _2994.z;
    float _2999 = _2994.w;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _3034 = _3033 / _808;
        float _3045 = _3034 * _859;
        float _3046 = _860 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3048 = _3034 * _861;
        float _3050 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3046;
        float _3058 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3068 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3221;
        if (abs((_3047 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3221 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3068 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3181 = 1.0 / cbSceneParam._m0[80u].x;
            float _3182 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3183 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3192 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : min(_3182, 0.0));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            _3221 = ((abs(_3058 / _3047) * cbSceneParam._m0[80u].y) * ((((_3192 - _3193) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))))) * _3181)) - ((exp2(_3068 * _3192) - exp2(_3068 * _3193)) * _3181))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2979, _2980, 1.0), 0.0);
        float _3232 = exp2((_3221 * (-1.44269502162933349609375)) * (1.0 - _3223.w));
        float _3233 = log2(_3232);
        float _3249 = log2(_2999);
        _3070 = (exp2(_3249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].x)) * _3223.x) / cbSceneParam._m0[78u].x)) + _2996;
        _3072 = (exp2(_3249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].y)) * _3223.y) / cbSceneParam._m0[78u].y)) + _2997;
        _3074 = (exp2(_3249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].z)) * _3223.z) / cbSceneParam._m0[78u].z)) + _2998;
        _3076 = _3232 * _2999;
    }
    else
    {
        _3070 = _2996;
        _3072 = _2997;
        _3074 = _2998;
        _3076 = _2999;
    }
    float _3088 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3089 = _3088 == 3.0;
    float _3090 = log2(_3076);
    float _3097 = exp2(_3090 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2941 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _937))) + ((_2947 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _3098 = exp2(_3090 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2943 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _937))) + ((_2949 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _3099 = exp2(_3090 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2945 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _937))) + ((_2951 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _3108 = (_3088 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3108 * (_3089 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.y = _3108 * (_3089 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.z = _3108 * (_3089 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.w = cbInstanceData._m0[_2971].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2971].w;
}


