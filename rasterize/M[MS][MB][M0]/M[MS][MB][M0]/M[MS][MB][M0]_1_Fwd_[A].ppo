#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _858;
float _3226;
float _3227;
float _3228;
float _3229;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _254 = _250.z;
    float _259 = (_250.x * 2.0) + (-1.0);
    float _261 = (_250.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3238 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))));
    float _273 = cbMtdParam._m0[22u].x + _250.w;
    float _276 = fma(_268, _199 * NORMAL.x, fma(_261, _206 * TANGENT.x, (_192 * _184) * _259));
    float _279 = fma(_268, _199 * NORMAL.y, fma(_261, _206 * TANGENT.y, (_192 * _185) * _259));
    float _282 = fma(_268, _199 * NORMAL.z, fma(_261, _206 * TANGENT.z, (_192 * _186) * _259));
    float _286 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    float _287 = _286 * _276;
    float _288 = _286 * _279;
    float _289 = _286 * _282;
    float _3249 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _290 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3271 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3282 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3293 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _310 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _537 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _543 = (cbMatDynParam._m0[5u].x * _537) + cbMatDynParam._m0[5u].y;
        float _3304 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        float _544 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _548 = (cbMatDynParam._m0[5u].z * _537) + cbMatDynParam._m0[5u].w;
        float _3315 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) - _544)) + _544) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_289, cbSceneParam._m0[5u].z, fma(_288, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _287));
    float _414 = fma(_289, cbSceneParam._m0[6u].z, fma(_288, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _287));
    float _417 = fma(_289, cbSceneParam._m0[7u].z, fma(_288, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _287));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3326 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _457 = ((isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * TEXCOORD_5.w) * _453.x;
    float _458 = dot(vec3(_287, _288, _289), vec3(_369, _370, _371));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _287) - _369;
    float _466 = (_461 * _288) - _370;
    float _467 = (_461 * _289) - _371;
    float _471 = abs(dot(vec3(_369, _370, _371), vec3(_287, _288, _289)));
    float _3359 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _473 = sqrt(_290);
    float _486 = exp2((_473 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_473 * 3.0));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _857;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_526, cbModelParam._m0[26u].z, fma(_522, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _518));
        float _586 = fma(_526, cbModelParam._m0[27u].z, fma(_522, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _518));
        float _590 = fma(_526, cbModelParam._m0[28u].z, fma(_522, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _518));
        float _615 = _518 + _287;
        float _616 = _522 + _288;
        float _617 = _526 + _289;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _582;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _586;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _590;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_651.x + (-0.5));
        float _687 = _685 * (_651.y + (-0.5));
        float _688 = _685 * (_651.z + (-0.5));
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_658.x + (-0.5));
        float _697 = _695 * (_658.y + (-0.5));
        float _698 = _695 * (_658.z + (-0.5));
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_665.x + (-0.5));
        float _707 = _705 * (_665.y + (-0.5));
        float _708 = _705 * (_665.z + (-0.5));
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = _686 * 0.5;
        float _723 = _696 * 0.5;
        float _724 = _706 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _739 = (dot(vec3(_287, _288, _289), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _749 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3407 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_751 + 1.0))) + _756) * _719;
        float _766 = _687 * 0.5;
        float _767 = _697 * 0.5;
        float _768 = _707 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_287, _288, _289), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3440 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_793 + 1.0))) + _798) * _720;
        float _808 = _688 * 0.5;
        float _809 = _698 * 0.5;
        float _810 = _708 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_287, _288, _289), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3473 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_835 + 1.0))) + _840) * _721;
        _857 = _688;
        _859 = _687;
        _860 = _686;
        _861 = _698;
        _862 = _697;
        _863 = _696;
        _864 = _708;
        _865 = _707;
        _866 = _706;
        _867 = _721;
        _868 = _720;
        _869 = _719;
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
    }
    else
    {
        _857 = _858;
        _859 = _858;
        _860 = _858;
        _861 = _858;
        _862 = _858;
        _863 = _858;
        _864 = _858;
        _865 = _858;
        _866 = _858;
        _867 = _858;
        _868 = _858;
        _869 = _858;
        _870 = 0.0;
        _871 = 0.0;
        _872 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_526, cbModelParam._m0[30u].z, fma(_522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _518));
        float _904 = fma(_526, cbModelParam._m0[31u].z, fma(_522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _518));
        float _908 = fma(_526, cbModelParam._m0[32u].z, fma(_522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _518));
        float _931 = _518 + _287;
        float _932 = _522 + _288;
        float _933 = _526 + _289;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_287, _288, _289), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3536 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_287, _288, _289), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3569 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_287, _288, _289), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3602 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _858;
        _1170 = _858;
        _1171 = _858;
        _1172 = _858;
        _1173 = _858;
        _1174 = _858;
        _1175 = _858;
        _1176 = _858;
        _1177 = _858;
        _1178 = _858;
        _1179 = _858;
        _1180 = _858;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _870)) + _870;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _871)) + _871;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _872)) + _872;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _465 * 0.5;
    float _1238 = _466 * 0.5;
    float _1239 = _467 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_857, _861, _864, _867));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _862, _865, _868));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_860, _863, _866, _869));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1305 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _290);
    float _1306 = isnan(_1305) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1305 : min(cbModelParam._m0[25u].z, _1305));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1355 = fma(_526, cbModelParam._m0[13u].z, fma(_522, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518)) + cbModelParam._m0[13u].w;
        float _1359 = fma(_526, cbModelParam._m0[14u].z, fma(_522, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518)) + cbModelParam._m0[14u].w;
        float _1363 = fma(_526, cbModelParam._m0[15u].z, fma(_522, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518)) + cbModelParam._m0[15u].w;
        float _1366 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1369 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1372 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1400;
        if (_1366 > 0.0)
        {
            _1400 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1400 = frontier_phi_17_15_ladder;
        }
        float _1605;
        if (_1369 > 0.0)
        {
            _1605 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1605 = frontier_phi_26_22_ladder;
        }
        float _1848;
        if (_1372 > 0.0)
        {
            _1848 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1848 = frontier_phi_38_33_ladder;
        }
        float _1850 = isnan(_1605) ? _1400 : (isnan(_1400) ? _1605 : min(_1400, _1605));
        float _1851 = isnan(_1848) ? _1850 : (isnan(_1850) ? _1848 : min(_1850, _1848));
        float _1855 = (_1851 * _1366) + _1355;
        float _1856 = (_1851 * _1369) + _1359;
        float _1857 = (_1851 * _1372) + _1363;
        float _1858 = _1851 * 9.9999997473787516355514526367188e-05;
        float _1860 = (-1.0) - _1858;
        float _1862 = _1858 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1857 > _1862) || ((_1857 < _1860) || ((_1856 > _1862) || ((_1856 < _1860) || ((_1855 < _1860) || (_1855 > _1862))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1981 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1857, cbModelParam._m0[9u].z, fma(_1856, cbModelParam._m0[9u].y, _1855 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1857, cbModelParam._m0[10u].z, fma(_1856, cbModelParam._m0[10u].y, _1855 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1857, cbModelParam._m0[11u].z, fma(_1856, cbModelParam._m0[11u].y, _1855 * cbModelParam._m0[11u].x))), _1306);
            frontier_phi_16_38_ladder = _1981.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1981.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1981.x * cbModelParam._m0[1u].y;
        }
        _1388 = frontier_phi_16_38_ladder_2;
        _1390 = frontier_phi_16_38_ladder_1;
        _1392 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1306);
        _1388 = _1376.x * cbModelParam._m0[1u].y;
        _1390 = _1376.y * cbModelParam._m0[1u].y;
        _1392 = _1376.z * cbModelParam._m0[1u].y;
    }
    float _1396 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _290);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1396 : min(cbModelParam._m0[25u].w, _1396));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_526, cbModelParam._m0[21u].z, fma(_522, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_526, cbModelParam._m0[22u].z, fma(_522, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_526, cbModelParam._m0[23u].z, fma(_522, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1467 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1470 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1610;
        if (_1464 > 0.0)
        {
            _1610 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1610 = frontier_phi_28_24_ladder;
        }
        float _1875;
        if (_1467 > 0.0)
        {
            _1875 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1875 = frontier_phi_40_35_ladder;
        }
        float _2080;
        if (_1470 > 0.0)
        {
            _2080 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2080 = frontier_phi_49_46_ladder;
        }
        float _2082 = isnan(_1875) ? _1610 : (isnan(_1610) ? _1875 : min(_1610, _1875));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1464) + _1453;
        float _2088 = (_2083 * _1467) + _1457;
        float _2089 = (_2083 * _1470) + _1461;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2090;
        float _2093 = _2090 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2089 > _2093) || ((_2089 < _2091) || ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 < _2091) || (_2087 > _2093))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2089, cbModelParam._m0[17u].z, fma(_2088, cbModelParam._m0[17u].y, _2087 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2089, cbModelParam._m0[18u].z, fma(_2088, cbModelParam._m0[18u].y, _2087 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2089, cbModelParam._m0[19u].z, fma(_2088, cbModelParam._m0[19u].y, _2087 * cbModelParam._m0[19u].x))), _1397);
            frontier_phi_25_49_ladder = _2288.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2288.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2288.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_25_49_ladder_2;
        _1491 = frontier_phi_25_49_ladder_1;
        _1493 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1397);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1505 = ((((1.0 - _486) * ((_473 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_486 * _473)) * _457;
    float _1506 = _1505 * ((cbModelParam._m0[1u].w * (_1489 - _1388)) + _1388);
    float _1507 = _1505 * ((cbModelParam._m0[1u].w * (_1491 - _1390)) + _1390);
    float _1508 = _1505 * ((cbModelParam._m0[1u].w * (_1493 - _1392)) + _1392);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    uvec4 _1527 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1529 = _1527.x * 14u;
    uint _1530 = _1529 + 13u;
    float _1537 = _457 + (-1.0);
    float _1542 = (cbLight._m0[_1530].x * _1537) + 1.0;
    float _1543 = (cbLight._m0[_1530].y * _1537) + 1.0;
    float _1544 = (cbLight._m0[_1530].z * _1537) + 1.0;
    float _1545 = (cbLight._m0[_1530].w * _1537) + 1.0;
    uint _1546 = _1529 + 5u;
    float _1552 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
    uint _1556 = _1529 + 4u;
    float _1563 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
    uint _1567 = _1529 | 1u;
    float _1578 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_287, _288, _289));
    float _1581 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_287, _288, _289));
    float _3738 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _3749 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _1586 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1588 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1595 = ((cbLight._m0[_1546].x * _1552) * _1588) + ((cbLight._m0[_1556].x * _1563) * _1586);
    float _1596 = ((_1552 * cbLight._m0[_1546].y) * _1588) + ((_1563 * cbLight._m0[_1556].y) * _1586);
    float _1597 = ((_1552 * cbLight._m0[_1546].z) * _1588) + ((_1563 * cbLight._m0[_1556].z) * _1586);
    uvec4 _1602 = floatBitsToUint(cbLight._m0[_1529 + 12u]);
    bool _1604 = _1602.x == 0u;
    float _1615;
    float _1617;
    float _1619;
    if (_1604)
    {
        _1615 = _1595;
        _1617 = _1596;
        _1619 = _1597;
    }
    else
    {
        uint _1623 = _1529 + 6u;
        float _1639 = (dot(vec3(cbLight._m0[_1529 + 2u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1640 = _1639 * _1639;
        float _3760 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1642 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1615 = (((cbLight._m0[_1623].x * 0.3183098733425140380859375) * _1641) * _1642) + _1595;
        _1617 = (((cbLight._m0[_1623].y * 0.3183098733425140380859375) * _1641) * _1642) + _1596;
        _1619 = (((cbLight._m0[_1623].z * 0.3183098733425140380859375) * _1641) * _1642) + _1597;
    }
    bool _1622 = _1602.y == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1622)
    {
        _1660 = _1615;
        _1662 = _1617;
        _1664 = _1619;
    }
    else
    {
        uint _1819 = _1529 + 7u;
        float _1835 = (dot(vec3(cbLight._m0[_1529 + 3u].xyz), vec3(_287, _288, _289)) * 0.5) + 0.5;
        float _1836 = _1835 * _1835;
        float _3776 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1838 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1660 = (((cbLight._m0[_1819].x * 0.3183098733425140380859375) * _1837) * _1838) + _1615;
        _1662 = (((cbLight._m0[_1819].y * 0.3183098733425140380859375) * _1837) * _1838) + _1617;
        _1664 = (((cbLight._m0[_1819].z * 0.3183098733425140380859375) * _1837) * _1838) + _1619;
    }
    uint _1667 = _1529 + 8u;
    float _1680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1529].w)) * _290) * 0.949999988079071044921875);
    float _1681 = _1680 * _1680;
    float _1682 = cbLight._m0[_1529].x + _369;
    float _1683 = cbLight._m0[_1529].y + _370;
    float _1684 = cbLight._m0[_1529].z + _371;
    float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
    float _1689 = _1688 * _1682;
    float _1690 = _1688 * _1683;
    float _1691 = _1688 * _1684;
    float _1692 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1529].xyz));
    float _3792 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1696 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1697 = dot(vec3(_287, _288, _289), vec3(_1689, _1690, _1691));
    float _3814 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1701 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_1689, _1690, _1691));
    float _3825 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1705 = _1681 * _1681;
    float _1709 = ((_1700 * _1700) * (_1705 + (-1.0))) + 1.0;
    float _1720 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1721 = 1.0 - _1681;
    float _1732 = (0.5 / (((_1696 * ((_1695 * _1721) + _1681)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1721) + _1681) * _1695))) * _1695;
    float _3836 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1734 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1705 / ((_1709 * _1709) * 3.141590118408203125));
    uint _1745 = _1529 + 9u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _290) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1567].x + _369;
    float _1759 = cbLight._m0[_1567].y + _370;
    float _1760 = cbLight._m0[_1567].z + _371;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1567].xyz));
    float _3847 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1772 = dot(vec3(_287, _288, _289), vec3(_1765, _1766, _1767));
    float _3858 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1765, _1766, _1767));
    float _3869 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1780 = _1757 * _1757;
    float _1784 = ((_1775 * _1775) * (_1780 + (-1.0))) + 1.0;
    float _1793 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1794 = 1.0 - _1757;
    float _1804 = (0.5 / (((_1696 * ((_1771 * _1794) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1794) + _1757) * _1771))) * _1771;
    float _3880 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1780 / ((_1784 * _1784) * 3.141590118408203125));
    float _1816 = (((_1793 * cbLight._m0[_1745].x) * _1806) * _1552) + (((_1720 * cbLight._m0[_1667].x) * _1734) * _1563);
    float _1817 = (((_1793 * cbLight._m0[_1745].y) * _1806) * _1552) + (((_1720 * cbLight._m0[_1667].y) * _1734) * _1563);
    float _1818 = (((_1793 * cbLight._m0[_1745].z) * _1806) * _1552) + (((_1720 * cbLight._m0[_1667].z) * _1734) * _1563);
    float _1880;
    float _1882;
    float _1884;
    if (_1604)
    {
        _1880 = _1816;
        _1882 = _1817;
        _1884 = _1818;
    }
    else
    {
        uint _1886 = _1529 + 2u;
        uint _1890 = _1529 + 10u;
        float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _290) * 0.949999988079071044921875);
        float _1905 = _1904 * _1904;
        float _1906 = cbLight._m0[_1886].x + _369;
        float _1907 = cbLight._m0[_1886].y + _370;
        float _1908 = cbLight._m0[_1886].z + _371;
        float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
        float _1913 = _1912 * _1906;
        float _1914 = _1912 * _1907;
        float _1915 = _1912 * _1908;
        float _1916 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_1886].xyz));
        float _3891 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1919 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1920 = dot(vec3(_287, _288, _289), vec3(_1913, _1914, _1915));
        float _3902 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1923 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1924 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_1913, _1914, _1915));
        float _3913 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1928 = _1905 * _1905;
        float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
        float _1941 = (exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1942 = 1.0 - _1905;
        float _1952 = (0.5 / (((_1696 * ((_1919 * _1942) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1942) + _1905) * _1919))) * _1919;
        float _3924 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1954 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
        float _1955 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1880 = (((_1941 * cbLight._m0[_1890].x) * _1954) * _1955) + _1816;
        _1882 = (((_1941 * cbLight._m0[_1890].y) * _1954) * _1955) + _1817;
        _1884 = (((_1941 * cbLight._m0[_1890].z) * _1954) * _1955) + _1818;
    }
    float _1990;
    float _1992;
    float _1994;
    if (_1622)
    {
        _1990 = _1880;
        _1992 = _1882;
        _1994 = _1884;
    }
    else
    {
        uint _2001 = _1529 + 3u;
        uint _2005 = _1529 + 11u;
        float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _290) * 0.949999988079071044921875);
        float _2020 = _2019 * _2019;
        float _2021 = cbLight._m0[_2001].x + _369;
        float _2022 = cbLight._m0[_2001].y + _370;
        float _2023 = cbLight._m0[_2001].z + _371;
        float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
        float _2028 = _2027 * _2021;
        float _2029 = _2027 * _2022;
        float _2030 = _2027 * _2023;
        float _2031 = dot(vec3(_287, _288, _289), vec3(cbLight._m0[_2001].xyz));
        float _3940 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2035 = dot(vec3(_287, _288, _289), vec3(_2028, _2029, _2030));
        float _3951 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2039 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2028, _2029, _2030));
        float _3962 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2043 = _2020 * _2020;
        float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
        float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2057 = 1.0 - _2020;
        float _2067 = (0.5 / (((_1696 * ((_2034 * _2057) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _2057) + _2020) * _2034))) * _2034;
        float _3973 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2069 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
        float _2070 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1990 = (((_2056 * cbLight._m0[_2005].x) * _2069) * _2070) + _1880;
        _1992 = (((_2056 * cbLight._m0[_2005].y) * _2069) * _2070) + _1882;
        _1994 = (((_2056 * cbLight._m0[_2005].z) * _2069) * _2070) + _1884;
    }
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    if (_1527.y == 0u)
    {
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2145;
        float _2147 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2145;
        float _2148 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2145;
        uvec4 _2160 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2161 = _2160.x;
        uint _2172 = uint((float(_2160.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2161))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2161)));
        float _2182 = (log2(_2148 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2183 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        uint _2186 = uint(isnan(14.0) ? _2183 : (isnan(_2183) ? 14.0 : min(_2183, 14.0)));
        uvec4 _2191 = texelFetch(g_lightClusterGridBuffer, int(((_2186 << 2u) + (_2172 << 6u)) >> 2u));
        uint _2192 = _2191.x;
        uint _2193 = _2160.z;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        if (((((1u << ((_2193 >> 4u) & 15u)) + 4294967295u) & _2192) == 0u) || ((_2193 & 240u) == 0u))
        {
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
        }
        else
        {
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2302;
            float _2304;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2186 << 5u) + (_2172 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2462)
                {
                    frontier_phi_66_pred = _2446;
                    frontier_phi_66_pred_1 = _2451;
                    frontier_phi_66_pred_2 = _2450;
                    frontier_phi_66_pred_3 = _2449;
                    frontier_phi_66_pred_4 = _2448;
                    frontier_phi_66_pred_5 = _2447;
                }
                else
                {
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    uint _2597;
                    _2591 = _2446;
                    _2592 = _2447;
                    _2593 = _2448;
                    _2594 = _2449;
                    _2595 = _2450;
                    _2596 = _2451;
                    _2597 = _2461;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    for (;;)
                    {
                        uint _2601 = uint(findLSB(_2597)) + (_2452 << 5u);
                        uint _2598 = (_2597 + 4294967295u) & _2597;
                        uint _2603 = _2601 * 48u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2623 = (_2601 * 48u) + 4u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        uint _2642 = (_2601 * 48u) + 8u;
                        vec3 _2653 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x));
                        float _2657 = _2617.x - _2146;
                        float _2658 = _2617.y - _2147;
                        float _2659 = _2617.z - _2148;
                        float _2660 = dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659));
                        float _2663 = inversesqrt(_2660);
                        float _2664 = _2663 * _2657;
                        float _2665 = _2663 * _2658;
                        float _2666 = _2663 * _2659;
                        float _2667 = dot(vec3(_411, _414, _417), vec3(_2664, _2665, _2666));
                        float _2672 = 1.0 - (_2660 * _2617.w);
                        float _3999 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2673 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2674 = sqrt(_2660) * _2636.w;
                        float _2677 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                        float _2678 = _2677 * _2677;
                        float _2681 = ((1.0 - _2678) * _2667) + _2678;
                        float _2684 = _2674 * _2674;
                        float _2688 = ((isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))) * _2673) / ((_2684 * 0.699999988079071044921875) + 1.0);
                        float _2692 = (-0.0) - _2146;
                        float _2693 = (-0.0) - _2147;
                        float _2694 = (-0.0) - _2148;
                        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                        float _2699 = _2698 * _2692;
                        float _2700 = _2698 * _2693;
                        float _2701 = _2698 * _2694;
                        float _2709 = exp2(log2(1.0 / ((_2684 * 3.5) + 5.0)) * 0.25);
                        float _2710 = 1.0 - _473;
                        float _2717 = sqrt(1.0 - ((1.0 - (_2710 * _2710)) * (1.0 - (_2709 * _2709))));
                        float _2718 = _2717 * _2717;
                        float _2719 = _2718 * _2718;
                        float _2720 = _2699 + _2664;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2730 = dot(vec3(_411, _414, _417), vec3(_2699, _2700, _2701));
                        float _4015 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2734 = dot(vec3(_411, _414, _417), vec3(_2726 * _2720, _2726 * _2721, _2726 * _2722));
                        float _4026 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2741 = ((_2737 * _2737) * (_2719 + (-1.0))) + 1.0;
                        float _2742 = _2677 * _2718;
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2667) + _2743;
                        float _4037 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2748 = 1.0 - _2718;
                        float _2758 = (0.5 / (((_2747 * ((_2733 * _2748) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2747 * _2748) + _2718) * _2733))) * _2747;
                        float _4048 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2769 = (((_2719 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_2741 * _2741) * ((_2684 * 2.1991131305694580078125) + 3.141590118408203125))) * _2673;
                        _2521 = (_2688 * _2636.x) + _2594;
                        _2522 = (_2688 * _2636.y) + _2595;
                        _2523 = (_2688 * _2636.z) + _2596;
                        _2518 = (_2769 * _2653.x) + _2591;
                        _2519 = (_2769 * _2653.y) + _2592;
                        _2520 = (_2769 * _2653.z) + _2593;
                        if (_2598 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2591 = _2518;
                            _2592 = _2519;
                            _2593 = _2520;
                            _2594 = _2521;
                            _2595 = _2522;
                            _2596 = _2523;
                            _2597 = _2598;
                        }
                    }
                    frontier_phi_66_pred = _2518;
                    frontier_phi_66_pred_1 = _2523;
                    frontier_phi_66_pred_2 = _2522;
                    frontier_phi_66_pred_3 = _2521;
                    frontier_phi_66_pred_4 = _2520;
                    frontier_phi_66_pred_5 = _2519;
                }
                _2294 = frontier_phi_66_pred;
                _2304 = frontier_phi_66_pred_1;
                _2302 = frontier_phi_66_pred_2;
                _2300 = frontier_phi_66_pred_3;
                _2298 = frontier_phi_66_pred_4;
                _2296 = frontier_phi_66_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2294;
                    _2447 = _2296;
                    _2448 = _2298;
                    _2449 = _2300;
                    _2450 = _2302;
                    _2451 = _2304;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
        }
        uvec4 _2307 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2308 = _2307.z;
        uint _2310 = (_2308 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2310) & _2192) == 0u)
        {
            _2414 = _2293;
            _2416 = _2295;
            _2418 = _2297;
            _2420 = _2299;
            _2422 = _2301;
            _2424 = _2303;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
            float _2440 = _2439 * _2146;
            float _2441 = _2439 * _2147;
            float _2442 = _2439 * _2148;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2310 < ((_2308 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2574 = _2293;
                float _2575 = _2295;
                float _2576 = _2297;
                float _2577 = _2299;
                float _2578 = _2301;
                float _2579 = _2303;
                uint _2580 = _2310;
                uint _2589;
                bool _2590;
                for (;;)
                {
                    _2589 = texelFetch(g_lightClassification, int((((_2186 << 5u) + (_2172 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                    _2590 = _2589 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2590)
                    {
                        frontier_phi_77_pred = _2579;
                        frontier_phi_77_pred_1 = _2578;
                        frontier_phi_77_pred_2 = _2577;
                        frontier_phi_77_pred_3 = _2576;
                        frontier_phi_77_pred_4 = _2575;
                        frontier_phi_77_pred_5 = _2574;
                    }
                    else
                    {
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _2796 = _2574;
                        float _2797 = _2575;
                        float _2798 = _2576;
                        float _2799 = _2577;
                        float _2800 = _2578;
                        float _2801 = _2579;
                        uint _2802 = _2589;
                        uint _2803;
                        vec4 _2828;
                        float _2829;
                        vec4 _2844;
                        vec3 _2856;
                        vec4 _2872;
                        vec4 _2888;
                        float _2935;
                        bool _2936;
                        for (;;)
                        {
                            uint _2813 = ((_2580 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2802));
                            _2803 = (_2802 + 4294967295u) & _2802;
                            uint _2815 = _2813 * 40u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            _2829 = _2828.w;
                            uint _2831 = (_2813 * 40u) + 4u;
                            _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2846 = (_2813 * 40u) + 8u;
                            _2856 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x));
                            uint _2859 = (_2813 * 40u) + 16u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2813 * 40u) + 20u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2891 = (_2813 * 40u) + 24u;
                            vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2910 = (_2813 * 40u) + 28u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2935 = fma(_2148, _2923.z, fma(_2147, _2923.y, _2923.x * _2146)) + _2923.w;
                            _2936 = !((fma(_2148, _2904.z, fma(_2147, _2904.y, _2904.x * _2146)) + _2904.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2936)
                            {
                                float _2963 = _2828.x - _2146;
                                float _2964 = _2828.y - _2147;
                                float _2965 = _2828.z - _2148;
                                float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                                float _2969 = inversesqrt(_2966);
                                float _2970 = _2969 * _2963;
                                float _2971 = _2969 * _2964;
                                float _2972 = _2969 * _2965;
                                float _2976 = 1.0 - (_2966 / (_2829 * _2829));
                                float _4059 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2977 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _2981 = sqrt(_2966) * _2844.w;
                                float _2983 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                                float _2984 = _2983 * _2983;
                                float _2987 = ((1.0 - _2984) * dot(vec3(_2970, _2971, _2972), vec3(_411, _414, _417))) + _2984;
                                float _2990 = _2981 * _2981;
                                float _2994 = (fma(_2148, _2872.z, fma(_2147, _2872.y, _2872.x * _2146)) + _2872.w) / _2935;
                                float _2995 = (fma(_2148, _2888.z, fma(_2147, _2888.y, _2888.x * _2146)) + _2888.w) / _2935;
                                float _2999 = 1.0 - dot(vec2(_2994, _2995), vec2(_2994, _2995));
                                float _4075 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3000 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3001 = _3000 * (((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2977) / ((_2990 * 0.699999988079071044921875) + 1.0));
                                float _3013 = exp2(log2(1.0 / ((_2990 * 3.5) + 5.0)) * 0.25);
                                float _3014 = 1.0 - _473;
                                float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                                float _3022 = _3021 * _3021;
                                float _3023 = _3022 * _3022;
                                float _3024 = _2970 - _2440;
                                float _3025 = _2971 - _2441;
                                float _3026 = _2972 - _2442;
                                float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                                float _3034 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _4086 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3038 = dot(vec3(_411, _414, _417), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                                float _4097 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3041 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                                float _3046 = _2983 * _3022;
                                float _3047 = _3046 * _3046;
                                float _3053 = ((1.0 - _3047) * dot(vec3(_411, _414, _417), vec3(_2970, _2971, _2972))) + _3047;
                                float _4108 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3055 = 1.0 - _3022;
                                float _3065 = (0.5 / (((_3054 * ((_3037 * _3055) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3022) * _3037))) * _3054;
                                float _4119 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3075 = (_3000 * _2977) * (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_3045 * _3045) * ((_2990 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3001 * _2844.y;
                                frontier_phi_83_pred_1 = _3001 * _2844.x;
                                frontier_phi_83_pred_2 = _3075 * _2856.z;
                                frontier_phi_83_pred_3 = _3075 * _2856.y;
                                frontier_phi_83_pred_4 = _3075 * _2856.x;
                                frontier_phi_83_pred_5 = _3001 * _2844.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3083 = frontier_phi_83_pred;
                            _3082 = frontier_phi_83_pred_1;
                            _3081 = frontier_phi_83_pred_2;
                            _3080 = frontier_phi_83_pred_3;
                            _3079 = frontier_phi_83_pred_4;
                            _3084 = frontier_phi_83_pred_5;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            if (_2803 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2803;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2788;
                        frontier_phi_77_pred_1 = _2787;
                        frontier_phi_77_pred_2 = _2786;
                        frontier_phi_77_pred_3 = _2785;
                        frontier_phi_77_pred_4 = _2784;
                        frontier_phi_77_pred_5 = _2783;
                    }
                    _2425 = frontier_phi_77_pred;
                    _2423 = frontier_phi_77_pred_1;
                    _2421 = frontier_phi_77_pred_2;
                    _2419 = frontier_phi_77_pred_3;
                    _2417 = frontier_phi_77_pred_4;
                    _2415 = frontier_phi_77_pred_5;
                    uint _2581 = _2580 + 1u;
                    if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2574 = _2415;
                        _2575 = _2417;
                        _2576 = _2419;
                        _2577 = _2421;
                        _2578 = _2423;
                        _2579 = _2425;
                        _2580 = _2581;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2419;
                frontier_phi_58_59_ladder_1 = _2425;
                frontier_phi_58_59_ladder_2 = _2423;
                frontier_phi_58_59_ladder_3 = _2421;
                frontier_phi_58_59_ladder_4 = _2417;
                frontier_phi_58_59_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_58_59_ladder = _2297;
                frontier_phi_58_59_ladder_1 = _2303;
                frontier_phi_58_59_ladder_2 = _2301;
                frontier_phi_58_59_ladder_3 = _2299;
                frontier_phi_58_59_ladder_4 = _2295;
                frontier_phi_58_59_ladder_5 = _2293;
            }
            _2414 = frontier_phi_58_59_ladder_5;
            _2416 = frontier_phi_58_59_ladder_4;
            _2418 = frontier_phi_58_59_ladder;
            _2420 = frontier_phi_58_59_ladder_3;
            _2422 = frontier_phi_58_59_ladder_2;
            _2424 = frontier_phi_58_59_ladder_1;
        }
        float _2429 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2205 = (_2429 * _2420) + _1660;
        _2207 = (_2429 * _2422) + _1662;
        _2209 = (_2429 * _2424) + _1664;
        _2211 = ((_2414 * 0.039999999105930328369140625) * _2429) + _1990;
        _2213 = ((_2416 * 0.039999999105930328369140625) * _2429) + _1992;
        _2215 = ((_2418 * 0.039999999105930328369140625) * _2429) + _1994;
    }
    else
    {
        _2205 = _1660;
        _2207 = _1662;
        _2209 = _1664;
        _2211 = _1990;
        _2213 = _1992;
        _2215 = _1994;
    }
    float _4135 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4146 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4157 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _2232 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2205 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _457))) + ((_2211 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2233 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2207 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _457))) + ((_2213 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    float _2234 = ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2209 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _457))) + ((_2215 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1295)) * cbPerFrame._m0[3u].x);
    uint _2235 = _430 + 6u;
    float _2243 = _390 / cbSceneParam._m0[86u].x;
    float _2244 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, (log2((isnan(cbSceneParam._m0[77u].w) ? _310 : (isnan(_310) ? cbSceneParam._m0[77u].w : min(_310, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2260 = _2258.x;
    float _2261 = _2258.y;
    float _2262 = _2258.z;
    float _2263 = _2258.w;
    float _2356;
    float _2358;
    float _2360;
    float _2362;
    if (_310 > cbSceneParam._m0[78u].w)
    {
        float _2318 = isnan(_310) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _310 : min(cbSceneParam._m0[80u].w, _310));
        float _2319 = _2318 / _310;
        float _2330 = _2319 * _362;
        float _2331 = _363 * _2319;
        float _2332 = (-0.0) - _2331;
        float _2334 = _2319 * _364;
        float _2336 = (cbSceneParam._m0[77u].w * _2332) / _2318;
        float _2337 = _2336 + cbSceneParam._m0[79u].w;
        float _2338 = cbSceneParam._m0[79u].w - _2331;
        float _2344 = sqrt(((_2330 * _2330) + (_2331 * _2331)) + (_2334 * _2334));
        float _2347 = (1.0 - (cbSceneParam._m0[77u].w / _2318)) * _2344;
        float _2352 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2354 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2531;
        if (abs((_2332 - _2336) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2531 = ((((_2337 > 0.0) ? exp2(_2352 * _2337) : (2.0 - exp2(_2354 * _2337))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2347;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2338) ? _2337 : (isnan(_2337) ? _2338 : max(_2337, _2338));
            float _2477 = isnan(_2338) ? _2337 : (isnan(_2337) ? _2338 : min(_2337, _2338));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2531 = ((abs(_2344 / _2332) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2352 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2352 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2354 * _2486) - exp2(_2354 * _2487)) * _2475))) + (_2347 * cbSceneParam._m0[80u].z);
        }
        vec4 _2533 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, 1.0), 0.0);
        float _2542 = exp2((_2531 * (-1.44269502162933349609375)) * (1.0 - _2533.w));
        float _2543 = log2(_2542);
        float _2559 = log2(_2263);
        _2356 = (exp2(_2559 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].x)) * _2533.x) / cbSceneParam._m0[78u].x)) + _2260;
        _2358 = (exp2(_2559 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].y)) * _2533.y) / cbSceneParam._m0[78u].y)) + _2261;
        _2360 = (exp2(_2559 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].z)) * _2533.z) / cbSceneParam._m0[78u].z)) + _2262;
        _2362 = _2542 * _2263;
    }
    else
    {
        _2356 = _2260;
        _2358 = _2261;
        _2360 = _2262;
        _2362 = _2263;
    }
    bool _2569;
    vec4 _2372;
    vec4 _2394;
    float _2396;
    float _2400;
    float _2401;
    float _2402;
    float _2403;
    bool _2413;
    for (;;)
    {
        _2372 = cbMatDynParam._m0[0u];
        float _2374 = roundEven(_2372.y);
        bool _2375 = _2374 == 3.0;
        float _2376 = log2(_2362);
        float _2383 = exp2(_2376 * cbSceneParam._m0[78u].x) * _2232;
        float _2384 = exp2(_2376 * cbSceneParam._m0[78u].y) * _2233;
        float _2385 = exp2(_2376 * cbSceneParam._m0[78u].z) * _2234;
        float _2392 = _378 + (-0.5);
        _2394 = cbMtdParam._m0[1u];
        _2396 = _2394.y * _2392;
        float _2399 = (_2374 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2400 = _2399 * (_2375 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2356)));
        _2401 = _2399 * (_2375 ? _2384 : (_2384 + (cbSceneParam._m0[72u].w * _2358)));
        _2402 = _2399 * (_2375 ? _2385 : (_2385 + (cbSceneParam._m0[72u].w * _2360)));
        _2403 = _2392 * 0.999000012874603271484375;
        _2413 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2413)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2403) < 0.5)
            {
                _2569 = true;
                break;
            }
        }
        uint _2510 = _432 + uint(_2372.w);
        if ((cbInstanceData._m0[_2510].w < 1.0) && ((cbInstanceData._m0[_2510].w + _2403) < 0.5))
        {
            _2569 = true;
            break;
        }
        if ((_2396 + 1.0) < _2394.x)
        {
            _2569 = true;
            break;
        }
        _2569 = false;
        break;
    }
    float _2774;
    if (_2569)
    {
        discard_state = true;
        _2774 = 0.0;
    }
    else
    {
        _2774 = cbInstanceData._m0[_2235].w;
    }
    SV_Target.x = _2400;
    SV_Target.y = _2401;
    SV_Target.z = _2402;
    SV_Target.w = _2774;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2235].w;
    discard_exit();
}


