#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1385;
float _4025;
float _4026;
float _4027;
float _4028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4037 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4048 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4059 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4070 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) + _449;
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _430) + _545;
    float _557 = ((((_524.x - _543) * _430) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _430) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _4081 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))));
    float _567 = _557 + ((((_497.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _568 = _558 + ((((_497.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _571 = fma(_564, _250, fma(_568, _257, _567 * _243));
    float _574 = fma(_564, _251, fma(_568, _258, _567 * _244));
    float _577 = fma(_564, _252, fma(_568, _259, _567 * _245));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _625 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _634 = (cbMtdParam._m0[19u].x + dot(vec4(_581 * _571, _581 * _574, _581 * _577, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_627 - _628) * cbMtdParam._m0[24u].z) + _628) * cbMtdParam._m0[21u].z);
    float _4092 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _637 = (-0.0) - cbMtdParam._m0[24u].y;
    float _639 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
    float _647 = _635 - ((_635 * TEXCOORD_8.x) * _640);
    float _648 = _635 - ((_635 * TEXCOORD_8.y) * _640);
    float _649 = _635 - ((_635 * TEXCOORD_8.z) * _640);
    float _656 = (_647 * ((_477.x * cbMtdParam._m0[18u].x) - _456)) + _456;
    float _657 = (_648 * ((_477.y * cbMtdParam._m0[18u].y) - _457)) + _457;
    float _658 = (_649 * ((_477.z * cbMtdParam._m0[18u].z) - _458)) + _458;
    vec4 _670 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _699 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4113 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _708 = ((((cbMtdParam._m0[10u].x - _656) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _700) + _656;
    float _709 = ((((cbMtdParam._m0[10u].y - _657) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _700) + _657;
    float _710 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _658)) * _700) + _658;
    float _715 = (((_497.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    vec4 _729 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _736 = (_729.x * 2.0) + (-1.0);
    float _737 = (_729.y * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _4124 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _746 = ((_729.z - _715) * _647) + _715;
    float _749 = ((cbMtdParam._m0[23u].y - _746) * _700) + _746;
    vec4 _768 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _774 = (_768.x * 2.0) + (-1.0);
    float _775 = (_768.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _4135 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _791 = ((sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _564) * _649) + _564;
    float _794 = (((_736 - _567) * _647) + _567) + (cbMtdParam._m0[21u].x * _567);
    float _795 = (((_737 - _568) * _648) + _568) + (cbMtdParam._m0[21u].x * _568);
    float _806 = (((_774 - _794) + (_794 * cbMtdParam._m0[22u].z)) * _700) + _794;
    float _807 = (((_775 - _795) + (_795 * cbMtdParam._m0[22u].z)) * _700) + _795;
    float _808 = (_700 * (sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) - _791)) + _791;
    float _810 = cbMtdParam._m0[22u].x + _597.w;
    float _813 = fma(_808, _250, fma(_807, _257, _806 * _243));
    float _816 = fma(_808, _251, fma(_807, _258, _806 * _244));
    float _819 = fma(_808, _252, fma(_807, _259, _806 * _245));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _4146 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _827 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4168 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4179 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4190 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _845 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    vec4 _910 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _912 = _910.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1066 = sqrt(((_896 * _896) + (_897 * _897)) + (_898 * _898));
        float _1072 = (cbMatDynParam._m0[5u].x * _1066) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1077 = (cbMatDynParam._m0[5u].z * _1066) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1073)) + _1073) < ((_912 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _923 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _924 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _942 = fma(_826, cbSceneParam._m0[5u].z, fma(_825, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _824));
    float _945 = fma(_826, cbSceneParam._m0[6u].z, fma(_825, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _824));
    float _948 = fma(_826, cbSceneParam._m0[7u].z, fma(_825, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _824));
    uint _961 = _281 + 9u;
    uint _962 = _961 + uint(cbMatDynParam._m0[0u].w);
    float _968 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_962].x;
    float _969 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_962].y;
    float _970 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_962].z;
    float _4223 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _923, cbSceneParam._m0[86u].y * _924));
    float _986 = ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * TEXCOORD_5.w) * _982.x;
    float _987 = dot(vec3(_824, _825, _826), vec3(_903, _904, _905));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _824) - _903;
    float _995 = (_990 * _825) - _904;
    float _996 = (_990 * _826) - _905;
    float _1000 = abs(dot(vec3(_903, _904, _905), vec3(_824, _825, _826)));
    float _4256 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_827);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1384;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1109 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1113 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1117 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1142 = _1047 + _824;
        float _1143 = _1051 + _825;
        float _1144 = _1055 + _826;
        float _1154 = fma(_1144, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142)) - _1109;
        float _1155 = fma(_1144, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142)) - _1113;
        float _1156 = fma(_1144, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142)) - _1117;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1109 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1113 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[34u].z) + ((((((_1117 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1212 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1178.x + (-0.5));
        float _1214 = _1212 * (_1178.y + (-0.5));
        float _1215 = _1212 * (_1178.z + (-0.5));
        float _1222 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1185.x + (-0.5));
        float _1224 = _1222 * (_1185.y + (-0.5));
        float _1225 = _1222 * (_1185.z + (-0.5));
        float _1232 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1192.x + (-0.5));
        float _1234 = _1232 * (_1192.y + (-0.5));
        float _1235 = _1232 * (_1192.z + (-0.5));
        float _1242 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1199.x + (-0.5));
        float _1244 = _1242 * (_1199.y + (-0.5));
        float _1245 = _1242 * (_1199.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1266 = (dot(vec3(_824, _825, _826), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1276 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4304 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1278 + 1.0))) + _1283) * _1246;
        float _1293 = _1214 * 0.5;
        float _1294 = _1224 * 0.5;
        float _1295 = _1234 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_824, _825, _826), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4337 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1320 + 1.0))) + _1325) * _1247;
        float _1335 = _1215 * 0.5;
        float _1336 = _1225 * 0.5;
        float _1337 = _1235 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_824, _825, _826), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4370 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1362 + 1.0))) + _1367) * _1248;
        _1384 = _1215;
        _1386 = _1214;
        _1387 = _1213;
        _1388 = _1225;
        _1389 = _1224;
        _1390 = _1223;
        _1391 = _1235;
        _1392 = _1234;
        _1393 = _1233;
        _1394 = _1248;
        _1395 = _1247;
        _1396 = _1246;
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1385;
        _1386 = _1385;
        _1387 = _1385;
        _1388 = _1385;
        _1389 = _1385;
        _1390 = _1385;
        _1391 = _1385;
        _1392 = _1385;
        _1393 = _1385;
        _1394 = _1385;
        _1395 = _1385;
        _1396 = _1385;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1427 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1431 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1435 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1458 = _1047 + _824;
        float _1459 = _1051 + _825;
        float _1460 = _1055 + _826;
        float _1470 = fma(_1460, cbModelParam._m0[30u].z, fma(_1459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1458)) - _1427;
        float _1471 = fma(_1460, cbModelParam._m0[31u].z, fma(_1459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1458)) - _1431;
        float _1472 = fma(_1460, cbModelParam._m0[32u].z, fma(_1459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1458)) - _1435;
        float _1476 = inversesqrt(dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472)));
        float _1489 = ((_1476 * _1470) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1427 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1476 * _1471) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1431 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1476 * _1472) / cbModelParam._m0[35u].z) + ((((((_1435 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        float _1526 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1493.x + (-0.5));
        float _1528 = _1526 * (_1493.y + (-0.5));
        float _1529 = _1526 * (_1493.z + (-0.5));
        float _1536 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1500.x + (-0.5));
        float _1538 = _1536 * (_1500.y + (-0.5));
        float _1539 = _1536 * (_1500.z + (-0.5));
        float _1546 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1507.x + (-0.5));
        float _1548 = _1546 * (_1507.y + (-0.5));
        float _1549 = _1546 * (_1507.z + (-0.5));
        float _1556 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1514.x + (-0.5));
        float _1558 = _1556 * (_1514.y + (-0.5));
        float _1559 = _1556 * (_1514.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_824, _825, _826), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4433 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1590 + 1.0))) + _1595) * _1560;
        float _1605 = _1528 * 0.5;
        float _1606 = _1538 * 0.5;
        float _1607 = _1548 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_824, _825, _826), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4466 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1632 + 1.0))) + _1637) * _1561;
        float _1647 = _1529 * 0.5;
        float _1648 = _1539 * 0.5;
        float _1649 = _1549 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_824, _825, _826), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4499 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1674 + 1.0))) + _1679) * _1562;
        _1696 = _1529;
        _1697 = _1528;
        _1698 = _1527;
        _1699 = _1539;
        _1700 = _1538;
        _1701 = _1537;
        _1702 = _1549;
        _1703 = _1548;
        _1704 = _1547;
        _1705 = _1562;
        _1706 = _1561;
        _1707 = _1560;
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1385;
        _1697 = _1385;
        _1698 = _1385;
        _1699 = _1385;
        _1700 = _1385;
        _1701 = _1385;
        _1702 = _1385;
        _1703 = _1385;
        _1704 = _1385;
        _1705 = _1385;
        _1706 = _1385;
        _1707 = _1385;
        _1708 = 0.0;
        _1709 = 0.0;
        _1710 = 0.0;
    }
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1399)) + _1399;
    float _1743 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1720));
    float _1764 = _994 * 0.5;
    float _1765 = _995 * 0.5;
    float _1766 = _996 * 0.5;
    float _1767 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1770 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1773 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1807;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1780 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1384, _1388, _1391, _1394));
        float _1784 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1788 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1795 = dot(vec4(cbModelParam._m0[39u]), vec4(_1764, _1765, _1766, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1818;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1809 = dot(vec4(cbModelParam._m0[40u]), vec4(_1764, _1765, _1766, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1822 = (_1818 * cbModelParam._m0[1u].x) + (_1807 * (1.0 - cbModelParam._m0[1u].x));
    float _1832 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _827);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1832 : min(cbModelParam._m0[25u].z, _1832));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1894 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1897 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1925 = frontier_phi_17_15_ladder;
        }
        float _2094;
        if (_1894 > 0.0)
        {
            _2094 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2094 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1897 > 0.0)
        {
            _2389 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2094) ? _1925 : (isnan(_1925) ? _2094 : min(_1925, _2094));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1891) + _1880;
        float _2397 = (_2392 * _1894) + _1884;
        float _2398 = (_2392 * _1897) + _1888;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1833);
            frontier_phi_16_38_ladder = _2543.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2543.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_16_38_ladder_2;
        _1915 = frontier_phi_16_38_ladder_1;
        _1917 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1833);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _827);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1989 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1992 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2099;
        if (_1986 > 0.0)
        {
            _2099 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2099 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_1989 > 0.0)
        {
            _2416 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2743;
        if (_1992 > 0.0)
        {
            _2743 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2743 = frontier_phi_50_47_ladder;
        }
        float _2745 = isnan(_2416) ? _2099 : (isnan(_2099) ? _2416 : min(_2099, _2416));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _1986) + _1975;
        float _2751 = (_2746 * _1989) + _1979;
        float _2752 = (_2746 * _1992) + _1983;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_25_50_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_25_50_ladder_2;
        _2013 = frontier_phi_25_50_ladder_1;
        _2015 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1922);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2027 = ((((1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1015 * _1002)) * _986;
    float _2028 = _2027 * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2029 = _2027 * ((cbModelParam._m0[1u].w * (_2013 - _1915)) + _1915);
    float _2030 = _2027 * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2086 = _2073 / _2085;
    float _2087 = _2077 / _2085;
    float _2088 = _2081 / _2085;
    float _2235;
    float _2236;
    float _2237;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2115 = ((uint(_2088 > cbSceneParam._m0[59u].y) + uint(_2088 > cbSceneParam._m0[59u].x)) + uint(_2088 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2116 = _2115 + 43u;
        uint _2124 = _2115 + 44u;
        uint _2132 = _2115 + 45u;
        uint _2140 = _2115 + 46u;
        float _2151 = fma(_2085, cbSceneParam._m0[_2116].w, fma(_2081, cbSceneParam._m0[_2116].z, fma(_2077, cbSceneParam._m0[_2116].y, _2073 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2085, cbSceneParam._m0[_2124].w, fma(_2081, cbSceneParam._m0[_2124].z, fma(_2077, cbSceneParam._m0[_2124].y, _2073 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2085, cbSceneParam._m0[_2140].w, fma(_2081, cbSceneParam._m0[_2140].z, fma(_2077, cbSceneParam._m0[_2140].y, _2073 * cbSceneParam._m0[_2140].x)));
        float _2168 = cbSceneParam._m0[33u].z * _2163;
        float _2170 = cbSceneParam._m0[33u].w * _2163;
        float _2173 = fma(_2085, cbSceneParam._m0[_2132].w, fma(_2081, cbSceneParam._m0[_2132].z, fma(_2077, cbSceneParam._m0[_2132].y, _2073 * cbSceneParam._m0[_2132].x))) / _2163;
        float _2221 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
        float _4625 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2228 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2151) / _2163, (_2170 + _2155) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2151) / _2163, (_2155 - _2168) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2168) / _2163, (_2155 - _2170) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2170) / _2163, (_2168 + _2155) / _2163), _2173), 0.0)).x), vec4(0.25)));
        _2235 = 1.0 - (_2228 * cbSceneParam._m0[34u].x);
        _2236 = 1.0 - (_2228 * cbSceneParam._m0[34u].y);
        _2237 = 1.0 - (_2228 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2235 = 1.0;
        _2236 = 1.0;
        _2237 = 1.0;
    }
    float _2301;
    float _2303;
    float _2305;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2289 = fma(_2085, cbSceneParam._m0[63u].w, fma(_2081, cbSceneParam._m0[63u].z, fma(_2077, cbSceneParam._m0[63u].y, _2073 * cbSceneParam._m0[63u].x)));
        float _2290 = fma(_2085, cbSceneParam._m0[60u].w, fma(_2081, cbSceneParam._m0[60u].z, fma(_2077, cbSceneParam._m0[60u].y, _2073 * cbSceneParam._m0[60u].x))) / _2289;
        float _2291 = fma(_2085, cbSceneParam._m0[61u].w, fma(_2081, cbSceneParam._m0[61u].z, fma(_2077, cbSceneParam._m0[61u].y, _2073 * cbSceneParam._m0[61u].x))) / _2289;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2290 >= cbSceneParam._m0[64u].x) && (_2291 >= cbSceneParam._m0[64u].y)) && (_2290 <= cbSceneParam._m0[64u].z)) && (_2291 <= cbSceneParam._m0[64u].w))
        {
            float _2429 = fma(_2085, cbSceneParam._m0[62u].w, fma(_2081, cbSceneParam._m0[62u].z, fma(_2077, cbSceneParam._m0[62u].y, _2073 * cbSceneParam._m0[62u].x))) / _2289;
            float _2433 = isnan(cbSceneParam._m0[41u].w) ? _2429 : (isnan(_2429) ? cbSceneParam._m0[41u].w : max(_2429, cbSceneParam._m0[41u].w));
            float _2476 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
            float _4641 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
            float _2483 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2290, cbSceneParam._m0[33u].w + _2291), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2290, _2291 - cbSceneParam._m0[33u].z), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].z, _2291 - cbSceneParam._m0[33u].w), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2291), _2433), 0.0)).x), vec4(0.25)));
            float _2487 = 1.0 - (_2483 * cbSceneParam._m0[34u].x);
            float _2488 = 1.0 - (_2483 * cbSceneParam._m0[34u].y);
            float _2489 = 1.0 - (_2483 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_37_36_ladder_1 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_37_36_ladder_2 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
        }
        else
        {
            frontier_phi_37_36_ladder = _2237;
            frontier_phi_37_36_ladder_1 = _2236;
            frontier_phi_37_36_ladder_2 = _2235;
        }
        _2301 = frontier_phi_37_36_ladder_2;
        _2303 = frontier_phi_37_36_ladder_1;
        _2305 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2301 = _2235;
        _2303 = _2236;
        _2305 = _2237;
    }
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _986 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2348 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2352 = _2312 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_824, _825, _826));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_824, _825, _826));
    float _4677 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4688 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2329].x * _2335) * _2373) + (((cbLight._m0[_2339].x * _2301) * _2348) * _2371);
    float _2381 = ((_2335 * cbLight._m0[_2329].y) * _2373) + (((cbLight._m0[_2339].y * _2303) * _2348) * _2371);
    float _2382 = ((_2335 * cbLight._m0[_2329].z) * _2373) + (((cbLight._m0[_2339].z * _2305) * _2348) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2388)
    {
        _2490 = _2380;
        _2492 = _2381;
        _2494 = _2382;
    }
    else
    {
        uint _2498 = _2312 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4699 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2517 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2380;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2381;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2382;
    }
    bool _2497 = _2386.y == 0u;
    float _2552;
    float _2554;
    float _2556;
    if (_2497)
    {
        _2552 = _2490;
        _2554 = _2492;
        _2556 = _2494;
    }
    else
    {
        uint _2714 = _2312 + 7u;
        float _2730 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2731 = _2730 * _2730;
        float _4715 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2732 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2733 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2552 = (((cbLight._m0[_2714].x * 0.3183098733425140380859375) * _2732) * _2733) + _2490;
        _2554 = (((cbLight._m0[_2714].y * 0.3183098733425140380859375) * _2732) * _2733) + _2492;
        _2556 = (((cbLight._m0[_2714].z * 0.3183098733425140380859375) * _2732) * _2733) + _2494;
    }
    uint _2559 = _2312 + 8u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _827) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2312].x + _903;
    float _2575 = cbLight._m0[_2312].y + _904;
    float _2576 = cbLight._m0[_2312].z + _905;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2312].xyz));
    float _4731 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _4742 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2588 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2589 = dot(vec3(_824, _825, _826), vec3(_2581, _2582, _2583));
    float _4753 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2581, _2582, _2583));
    float _4764 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2573 * _2573;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2612 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2613 = 1.0 - _2573;
    float _2624 = (0.5 / (((_2588 * ((_2587 * _2613) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2613) + _2573) * _2587))) * _2587;
    float _4775 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    uint _2640 = _2312 + 9u;
    float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _827) * 0.949999988079071044921875);
    float _2652 = _2651 * _2651;
    float _2653 = cbLight._m0[_2352].x + _903;
    float _2654 = cbLight._m0[_2352].y + _904;
    float _2655 = cbLight._m0[_2352].z + _905;
    float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
    float _2660 = _2659 * _2653;
    float _2661 = _2659 * _2654;
    float _2662 = _2659 * _2655;
    float _2663 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2352].xyz));
    float _4786 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2667 = dot(vec3(_824, _825, _826), vec3(_2660, _2661, _2662));
    float _4797 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2670 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2671 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2660, _2661, _2662));
    float _4808 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2675 = _2652 * _2652;
    float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
    float _2688 = (exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2689 = 1.0 - _2652;
    float _2699 = (0.5 / (((_2588 * ((_2666 * _2689) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2689) + _2652) * _2666))) * _2666;
    float _4819 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2701 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
    float _2711 = (((_2688 * cbLight._m0[_2640].x) * _2701) * _2335) + ((((cbLight._m0[_2559].x * _2301) * _2612) * _2626) * _2348);
    float _2712 = (((_2688 * cbLight._m0[_2640].y) * _2701) * _2335) + ((((cbLight._m0[_2559].y * _2303) * _2612) * _2626) * _2348);
    float _2713 = (((_2688 * cbLight._m0[_2640].z) * _2701) * _2335) + ((((cbLight._m0[_2559].z * _2305) * _2612) * _2626) * _2348);
    float _2769;
    float _2771;
    float _2773;
    if (_2388)
    {
        _2769 = _2711;
        _2771 = _2712;
        _2773 = _2713;
    }
    else
    {
        uint _2775 = _2312 + 2u;
        uint _2779 = _2312 + 10u;
        float _2793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _827) * 0.949999988079071044921875);
        float _2794 = _2793 * _2793;
        float _2795 = cbLight._m0[_2775].x + _903;
        float _2796 = cbLight._m0[_2775].y + _904;
        float _2797 = cbLight._m0[_2775].z + _905;
        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
        float _2802 = _2801 * _2795;
        float _2803 = _2801 * _2796;
        float _2804 = _2801 * _2797;
        float _2805 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2775].xyz));
        float _4830 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2809 = dot(vec3(_824, _825, _826), vec3(_2802, _2803, _2804));
        float _4841 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2813 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_2802, _2803, _2804));
        float _4852 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2817 = _2794 * _2794;
        float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
        float _2830 = (exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2831 = 1.0 - _2794;
        float _2841 = (0.5 / (((_2588 * ((_2808 * _2831) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2831) + _2794) * _2808))) * _2808;
        float _4863 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2843 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
        float _2844 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2769 = (((_2830 * cbLight._m0[_2779].x) * _2843) * _2844) + _2711;
        _2771 = (((_2830 * cbLight._m0[_2779].y) * _2843) * _2844) + _2712;
        _2773 = (((_2830 * cbLight._m0[_2779].z) * _2843) * _2844) + _2713;
    }
    float _2875;
    float _2877;
    float _2879;
    if (_2497)
    {
        _2875 = _2769;
        _2877 = _2771;
        _2879 = _2773;
    }
    else
    {
        uint _2886 = _2312 + 3u;
        uint _2890 = _2312 + 11u;
        float _2904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2886].w)) * _827) * 0.949999988079071044921875);
        float _2905 = _2904 * _2904;
        float _2906 = cbLight._m0[_2886].x + _903;
        float _2907 = cbLight._m0[_2886].y + _904;
        float _2908 = cbLight._m0[_2886].z + _905;
        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
        float _2913 = _2912 * _2906;
        float _2914 = _2912 * _2907;
        float _2915 = _2912 * _2908;
        float _2916 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2886].xyz));
        float _4879 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2920 = dot(vec3(_824, _825, _826), vec3(_2913, _2914, _2915));
        float _4890 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2924 = dot(vec3(cbLight._m0[_2886].xyz), vec3(_2913, _2914, _2915));
        float _4901 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2928 = _2905 * _2905;
        float _2932 = ((_2923 * _2923) * (_2928 + (-1.0))) + 1.0;
        float _2941 = (exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2942 = 1.0 - _2905;
        float _2952 = (0.5 / (((_2588 * ((_2919 * _2942) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2942) + _2905) * _2919))) * _2919;
        float _4912 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2954 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2928 / ((_2932 * _2932) * 3.141590118408203125));
        float _2955 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2875 = (((_2941 * cbLight._m0[_2890].x) * _2954) * _2955) + _2769;
        _2877 = (((_2941 * cbLight._m0[_2890].y) * _2954) * _2955) + _2771;
        _2879 = (((_2941 * cbLight._m0[_2890].z) * _2954) * _2955) + _2773;
    }
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_2310.y == 0u)
    {
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.x;
        uint _2988 = uint((float(_2976.y) * floor(float(uint(cbSceneParam._m0[85u].y * _924) / _2977))) + floor(float(uint(cbSceneParam._m0[85u].x * _923) / _2977)));
        float _2998 = (log2(_2088 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2999 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        uint _3002 = uint(isnan(14.0) ? _2999 : (isnan(_2999) ? 14.0 : min(_2999, 14.0)));
        uvec4 _3007 = texelFetch(g_lightClusterGridBuffer, int(((_3002 << 2u) + (_2988 << 6u)) >> 2u));
        uint _3008 = _3007.x;
        uint _3009 = _2976.z;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((((1u << ((_3009 >> 4u) & 15u)) + 4294967295u) & _3008) == 0u) || ((_3009 & 240u) == 0u))
        {
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
        }
        else
        {
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            uint _3246 = 0u;
            uint _3255;
            bool _3256;
            for (;;)
            {
                _3255 = texelFetch(g_lightClassification, int((((_3002 << 5u) + (_2988 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                _3256 = _3255 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3256)
                {
                    frontier_phi_71_pred = _3245;
                    frontier_phi_71_pred_1 = _3244;
                    frontier_phi_71_pred_2 = _3243;
                    frontier_phi_71_pred_3 = _3242;
                    frontier_phi_71_pred_4 = _3241;
                    frontier_phi_71_pred_5 = _3240;
                }
                else
                {
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    uint _3391;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3255;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    for (;;)
                    {
                        uint _3395 = uint(findLSB(_3391)) + (_3246 << 5u);
                        uint _3392 = (_3391 + 4294967295u) & _3391;
                        uint _3397 = _3395 * 48u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3417 = (_3395 * 48u) + 4u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3436 = (_3395 * 48u) + 8u;
                        vec3 _3447 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x));
                        float _3451 = _3411.x - _2086;
                        float _3452 = _3411.y - _2087;
                        float _3453 = _3411.z - _2088;
                        float _3454 = dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453));
                        float _3457 = inversesqrt(_3454);
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3461 = dot(vec3(_942, _945, _948), vec3(_3458, _3459, _3460));
                        float _3466 = 1.0 - (_3454 * _3411.w);
                        float _4938 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3467 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3468 = sqrt(_3454) * _3430.w;
                        float _3471 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3461) + _3472;
                        float _3478 = _3468 * _3468;
                        float _3482 = ((isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))) * _3467) / ((_3478 * 0.699999988079071044921875) + 1.0);
                        float _3486 = (-0.0) - _2086;
                        float _3487 = (-0.0) - _2087;
                        float _3488 = (-0.0) - _2088;
                        float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3502 = exp2(log2(1.0 / ((_3478 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _1002;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_942, _945, _948), vec3(_3493, _3494, _3495));
                        float _4954 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3527 = dot(vec3(_942, _945, _948), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4965 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3471 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3461) + _3536;
                        float _4976 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4987 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3534 * _3534) * ((_3478 * 2.1991131305694580078125) + 3.141590118408203125))) * _3467;
                        _3315 = (_3482 * _3430.x) + _3388;
                        _3316 = (_3482 * _3430.y) + _3389;
                        _3317 = (_3482 * _3430.z) + _3390;
                        _3312 = (_3562 * _3447.x) + _3385;
                        _3313 = (_3562 * _3447.y) + _3386;
                        _3314 = (_3562 * _3447.z) + _3387;
                        if (_3392 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3392;
                        }
                    }
                    frontier_phi_71_pred = _3317;
                    frontier_phi_71_pred_1 = _3316;
                    frontier_phi_71_pred_2 = _3315;
                    frontier_phi_71_pred_3 = _3314;
                    frontier_phi_71_pred_4 = _3313;
                    frontier_phi_71_pred_5 = _3312;
                }
                _3099 = frontier_phi_71_pred;
                _3097 = frontier_phi_71_pred_1;
                _3095 = frontier_phi_71_pred_2;
                _3093 = frontier_phi_71_pred_3;
                _3091 = frontier_phi_71_pred_4;
                _3089 = frontier_phi_71_pred_5;
                uint _3247 = _3246 + 1u;
                if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3240 = _3089;
                    _3241 = _3091;
                    _3242 = _3093;
                    _3243 = _3095;
                    _3244 = _3097;
                    _3245 = _3099;
                    _3246 = _3247;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
        }
        uvec4 _3102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3103 = _3102.z;
        uint _3105 = (_3103 >> 8u) & 15u;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((4294967295u << _3105) & _3008) == 0u)
        {
            _3208 = _3088;
            _3210 = _3090;
            _3212 = _3092;
            _3214 = _3094;
            _3216 = _3096;
            _3218 = _3098;
        }
        else
        {
            float _3233 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
            float _3234 = _3233 * _2086;
            float _3235 = _3233 * _2087;
            float _3236 = _3233 * _2088;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3105 < ((_3103 >> 12u) & 15u))
            {
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3368 = _3088;
                float _3369 = _3090;
                float _3370 = _3092;
                float _3371 = _3094;
                float _3372 = _3096;
                float _3373 = _3098;
                uint _3374 = _3105;
                uint _3383;
                bool _3384;
                for (;;)
                {
                    _3383 = texelFetch(g_lightClassification, int((((_3002 << 5u) + (_2988 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                    _3384 = _3383 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3384)
                    {
                        frontier_phi_82_pred = _3373;
                        frontier_phi_82_pred_1 = _3372;
                        frontier_phi_82_pred_2 = _3371;
                        frontier_phi_82_pred_3 = _3370;
                        frontier_phi_82_pred_4 = _3369;
                        frontier_phi_82_pred_5 = _3368;
                    }
                    else
                    {
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        uint _3595 = _3383;
                        uint _3596;
                        vec4 _3621;
                        float _3622;
                        vec4 _3637;
                        vec3 _3649;
                        vec4 _3664;
                        vec4 _3679;
                        float _3725;
                        bool _3726;
                        for (;;)
                        {
                            uint _3606 = ((_3374 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3595));
                            _3596 = (_3595 + 4294967295u) & _3595;
                            uint _3608 = _3606 * 40u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3622 = _3621.w;
                            uint _3624 = (_3606 * 40u) + 4u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3639 = (_3606 * 40u) + 8u;
                            _3649 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x));
                            uint _3651 = (_3606 * 40u) + 16u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3606 * 40u) + 20u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3606 * 40u) + 24u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3700 = (_3606 * 40u) + 28u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3725 = fma(_2088, _3713.z, fma(_2087, _3713.y, _3713.x * _2086)) + _3713.w;
                            _3726 = !((fma(_2088, _3694.z, fma(_2087, _3694.y, _3694.x * _2086)) + _3694.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3726)
                            {
                                float _3753 = _3621.x - _2086;
                                float _3754 = _3621.y - _2087;
                                float _3755 = _3621.z - _2088;
                                float _3756 = dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755));
                                float _3759 = inversesqrt(_3756);
                                float _3760 = _3759 * _3753;
                                float _3761 = _3759 * _3754;
                                float _3762 = _3759 * _3755;
                                float _3766 = 1.0 - (_3756 / (_3622 * _3622));
                                float _4998 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3771 = sqrt(_3756) * _3637.w;
                                float _3773 = 1.39999997615814208984375 / (_3771 + 1.39999997615814208984375);
                                float _3774 = _3773 * _3773;
                                float _3777 = ((1.0 - _3774) * dot(vec3(_3760, _3761, _3762), vec3(_942, _945, _948))) + _3774;
                                float _3780 = _3771 * _3771;
                                float _3784 = (fma(_2088, _3664.z, fma(_2087, _3664.y, _3664.x * _2086)) + _3664.w) / _3725;
                                float _3785 = (fma(_2088, _3679.z, fma(_2087, _3679.y, _3679.x * _2086)) + _3679.w) / _3725;
                                float _3789 = 1.0 - dot(vec2(_3784, _3785), vec2(_3784, _3785));
                                float _5014 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3791 = _3790 * (((isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0))) * _3767) / ((_3780 * 0.699999988079071044921875) + 1.0));
                                float _3803 = exp2(log2(1.0 / ((_3780 * 3.5) + 5.0)) * 0.25);
                                float _3804 = 1.0 - _1002;
                                float _3811 = sqrt(1.0 - ((1.0 - (_3804 * _3804)) * (1.0 - (_3803 * _3803))));
                                float _3812 = _3811 * _3811;
                                float _3813 = _3812 * _3812;
                                float _3814 = _3760 - _3234;
                                float _3815 = _3761 - _3235;
                                float _3816 = _3762 - _3236;
                                float _3820 = inversesqrt(dot(vec3(_3814, _3815, _3816), vec3(_3814, _3815, _3816)));
                                float _3824 = dot(vec3(_942, _945, _948), vec3((-0.0) - _3234, (-0.0) - _3235, (-0.0) - _3236));
                                float _5025 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3828 = dot(vec3(_942, _945, _948), vec3(_3820 * _3814, _3820 * _3815, _3820 * _3816));
                                float _5036 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3835 = ((_3831 * _3831) * (_3813 + (-1.0))) + 1.0;
                                float _3836 = _3773 * _3812;
                                float _3837 = _3836 * _3836;
                                float _3843 = ((1.0 - _3837) * dot(vec3(_942, _945, _948), vec3(_3760, _3761, _3762))) + _3837;
                                float _5047 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3845 = 1.0 - _3812;
                                float _3855 = (0.5 / (((_3844 * ((_3827 * _3845) + _3812)) + 9.9999999392252902907785028219223e-09) + (((_3844 * _3845) + _3812) * _3827))) * _3844;
                                float _5058 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3865 = (_3790 * _3767) * (((_3813 * 3.1415927410125732421875) * (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) / ((_3835 * _3835) * ((_3780 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3791 * _3637.z;
                                frontier_phi_88_pred_1 = _3791 * _3637.y;
                                frontier_phi_88_pred_2 = _3791 * _3637.x;
                                frontier_phi_88_pred_3 = _3865 * _3649.z;
                                frontier_phi_88_pred_4 = _3865 * _3649.y;
                                frontier_phi_88_pred_5 = _3865 * _3649.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3874 = frontier_phi_88_pred;
                            _3873 = frontier_phi_88_pred_1;
                            _3872 = frontier_phi_88_pred_2;
                            _3871 = frontier_phi_88_pred_3;
                            _3870 = frontier_phi_88_pred_4;
                            _3869 = frontier_phi_88_pred_5;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            if (_3596 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3596;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3581;
                        frontier_phi_82_pred_1 = _3580;
                        frontier_phi_82_pred_2 = _3579;
                        frontier_phi_82_pred_3 = _3578;
                        frontier_phi_82_pred_4 = _3577;
                        frontier_phi_82_pred_5 = _3576;
                    }
                    _3219 = frontier_phi_82_pred;
                    _3217 = frontier_phi_82_pred_1;
                    _3215 = frontier_phi_82_pred_2;
                    _3213 = frontier_phi_82_pred_3;
                    _3211 = frontier_phi_82_pred_4;
                    _3209 = frontier_phi_82_pred_5;
                    uint _3375 = _3374 + 1u;
                    if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3368 = _3209;
                        _3369 = _3211;
                        _3370 = _3213;
                        _3371 = _3215;
                        _3372 = _3217;
                        _3373 = _3219;
                        _3374 = _3375;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3215;
                frontier_phi_63_64_ladder_1 = _3219;
                frontier_phi_63_64_ladder_2 = _3217;
                frontier_phi_63_64_ladder_3 = _3213;
                frontier_phi_63_64_ladder_4 = _3211;
                frontier_phi_63_64_ladder_5 = _3209;
            }
            else
            {
                frontier_phi_63_64_ladder = _3094;
                frontier_phi_63_64_ladder_1 = _3098;
                frontier_phi_63_64_ladder_2 = _3096;
                frontier_phi_63_64_ladder_3 = _3092;
                frontier_phi_63_64_ladder_4 = _3090;
                frontier_phi_63_64_ladder_5 = _3088;
            }
            _3208 = frontier_phi_63_64_ladder_5;
            _3210 = frontier_phi_63_64_ladder_4;
            _3212 = frontier_phi_63_64_ladder_3;
            _3214 = frontier_phi_63_64_ladder;
            _3216 = frontier_phi_63_64_ladder_2;
            _3218 = frontier_phi_63_64_ladder_1;
        }
        float _3223 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _3021 = (_3223 * _3214) + _2552;
        _3023 = (_3223 * _3216) + _2554;
        _3025 = (_3223 * _3218) + _2556;
        _3027 = ((_3208 * 0.039999999105930328369140625) * _3223) + _2875;
        _3029 = ((_3210 * 0.039999999105930328369140625) * _3223) + _2877;
        _3031 = ((_3212 * 0.039999999105930328369140625) * _3223) + _2879;
    }
    else
    {
        _3021 = _2552;
        _3023 = _2554;
        _3025 = _2556;
        _3027 = _2875;
        _3029 = _2877;
        _3031 = _2879;
    }
    float _5074 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _5085 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _5096 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _3048 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3021 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _986))) + ((_3027 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _3049 = ((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3023 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _986))) + ((_3029 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _3050 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3025 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _986))) + ((_3031 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    uint _3051 = _281 + 6u;
    float _3059 = _923 / cbSceneParam._m0[86u].x;
    float _3060 = _924 / cbSceneParam._m0[86u].y;
    vec4 _3074 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, (log2((isnan(cbSceneParam._m0[77u].w) ? _845 : (isnan(_845) ? cbSceneParam._m0[77u].w : min(_845, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3076 = _3074.x;
    float _3077 = _3074.y;
    float _3078 = _3074.z;
    float _3079 = _3074.w;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    if (_845 > cbSceneParam._m0[78u].w)
    {
        float _3113 = isnan(_845) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _845 : min(cbSceneParam._m0[80u].w, _845));
        float _3114 = _3113 / _845;
        float _3125 = _3114 * _896;
        float _3126 = _897 * _3114;
        float _3127 = (-0.0) - _3126;
        float _3128 = _3114 * _898;
        float _3130 = (cbSceneParam._m0[77u].w * _3127) / _3113;
        float _3131 = _3130 + cbSceneParam._m0[79u].w;
        float _3132 = cbSceneParam._m0[79u].w - _3126;
        float _3138 = sqrt(((_3125 * _3125) + (_3126 * _3126)) + (_3128 * _3128));
        float _3141 = (1.0 - (cbSceneParam._m0[77u].w / _3113)) * _3138;
        float _3146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3325;
        if (abs((_3127 - _3130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3325 = ((((_3131 > 0.0) ? exp2(_3146 * _3131) : (2.0 - exp2(_3148 * _3131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3141;
        }
        else
        {
            float _3269 = 1.0 / cbSceneParam._m0[80u].x;
            float _3270 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : max(_3131, _3132));
            float _3271 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : min(_3131, _3132));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            _3325 = ((abs(_3138 / _3127) * cbSceneParam._m0[80u].y) * ((((_3280 - _3281) * 2.0) - ((exp2(_3146 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0)))) - exp2(_3146 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))))) * _3269)) - ((exp2(_3148 * _3280) - exp2(_3148 * _3281)) * _3269))) + (_3141 * cbSceneParam._m0[80u].z);
        }
        vec4 _3327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3059, _3060, 1.0), 0.0);
        float _3336 = exp2((_3325 * (-1.44269502162933349609375)) * (1.0 - _3327.w));
        float _3337 = log2(_3336);
        float _3353 = log2(_3079);
        _3150 = (exp2(_3353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].x)) * _3327.x) / cbSceneParam._m0[78u].x)) + _3076;
        _3152 = (exp2(_3353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].y)) * _3327.y) / cbSceneParam._m0[78u].y)) + _3077;
        _3154 = (exp2(_3353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].z)) * _3327.z) / cbSceneParam._m0[78u].z)) + _3078;
        _3156 = _3336 * _3079;
    }
    else
    {
        _3150 = _3076;
        _3152 = _3077;
        _3154 = _3078;
        _3156 = _3079;
    }
    bool _3363;
    vec4 _3166;
    vec4 _3188;
    float _3190;
    float _3194;
    float _3195;
    float _3196;
    float _3197;
    bool _3207;
    for (;;)
    {
        _3166 = cbMatDynParam._m0[0u];
        float _3168 = roundEven(_3166.y);
        bool _3169 = _3168 == 3.0;
        float _3170 = log2(_3156);
        float _3177 = exp2(_3170 * cbSceneParam._m0[78u].x) * _3048;
        float _3178 = exp2(_3170 * cbSceneParam._m0[78u].y) * _3049;
        float _3179 = exp2(_3170 * cbSceneParam._m0[78u].z) * _3050;
        float _3186 = _912 + (-0.5);
        _3188 = cbMtdParam._m0[1u];
        _3190 = _3188.y * _3186;
        float _3193 = (_3168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3194 = _3193 * (_3169 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3150)));
        _3195 = _3193 * (_3169 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3152)));
        _3196 = _3193 * (_3169 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3154)));
        _3197 = _3186 * 0.999000012874603271484375;
        _3207 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3207)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _3197) < 0.5)
            {
                _3363 = true;
                break;
            }
        }
        uint _3304 = _961 + uint(_3166.w);
        if ((cbInstanceData._m0[_3304].w < 1.0) && ((cbInstanceData._m0[_3304].w + _3197) < 0.5))
        {
            _3363 = true;
            break;
        }
        if ((_3190 + 1.0) < _3188.x)
        {
            _3363 = true;
            break;
        }
        _3363 = false;
        break;
    }
    float _3567;
    if (_3363)
    {
        discard_state = true;
        _3567 = 0.0;
    }
    else
    {
        _3567 = cbInstanceData._m0[_3051].w;
    }
    SV_Target.x = _3194;
    SV_Target.y = _3195;
    SV_Target.z = _3196;
    SV_Target.w = _3567;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3051].w;
    discard_exit();
}


