#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1120;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _343 = _341.x;
    float _353 = dot(vec4(_343, _341.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _370 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_343 - _353) * cbMtdParam._m0[24u].x) + _353) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3427 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _378 = (_371 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _379 = (_371 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _380 = (_371 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _429 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _443 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_419 - _429) * cbMtdParam._m0[24u].x) + _429) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3438 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _451 = (_444 * ((_397.x * cbMtdParam._m0[13u].x) - _378)) + _378;
    float _452 = (_444 * ((_397.y * cbMtdParam._m0[13u].y) - _379)) + _379;
    float _453 = (_444 * ((_397.z * cbMtdParam._m0[13u].z) - _380)) + _380;
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _516 = ((_488.x - _507) * _371) + _507;
    float _517 = ((_488.y - _508) * _371) + _508;
    float _518 = ((_488.z - _509) * _371) + _509;
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _543 = ((_530.z - _518) * _444) + _518;
    float _546 = ((((_530.x - _516) * _444) + _516) * 2.0) + (-1.0);
    float _547 = ((((_530.y - _517) * _444) + _517) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3449 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))));
    float _558 = _546 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_465.x * 2.0) + (-1.0)));
    float _559 = _547 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_465.y * 2.0) + (-1.0)));
    vec4 _572 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (((_465.z - _543) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _543;
    float _584 = cbMtdParam._m0[22u].x + _572.w;
    float _587 = fma(_553, _221 * NORMAL.x, fma(_559, _228 * TANGENT.x, (_214 * _206) * _558));
    float _590 = fma(_553, _221 * NORMAL.y, fma(_559, _228 * TANGENT.y, (_214 * _207) * _558));
    float _593 = fma(_553, _221 * NORMAL.z, fma(_559, _228 * TANGENT.z, (_214 * _208) * _558));
    float _597 = inversesqrt(dot(vec3(_587, _590, _593), vec3(_587, _590, _593)));
    float _598 = _597 * _587;
    float _599 = _597 * _590;
    float _600 = _597 * _593;
    float _3460 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _601 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3482 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3493 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3504 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _619 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _671 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _661);
    float _672 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _661);
    float _673 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _661);
    float _677 = inversesqrt(dot(vec3(_671, _672, _673), vec3(_671, _672, _673)));
    float _678 = _671 * _677;
    float _679 = _672 * _677;
    float _680 = _673 * _677;
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _705 = fma(_600, cbSceneParam._m0[5u].z, fma(_599, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _598));
    float _708 = fma(_600, cbSceneParam._m0[6u].z, fma(_599, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _598));
    float _711 = fma(_600, cbSceneParam._m0[7u].z, fma(_599, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _598));
    uint _725 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _731 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_725].x;
    float _732 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_725].y;
    float _733 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_725].z;
    float _3515 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    vec4 _745 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687));
    float _749 = ((isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * TEXCOORD_5.w) * _745.x;
    float _750 = dot(vec3(_598, _599, _600), vec3(_678, _679, _680));
    float _753 = _750 * 2.0;
    float _757 = (_753 * _598) - _678;
    float _758 = (_753 * _599) - _679;
    float _759 = (_753 * _600) - _680;
    float _763 = abs(dot(vec3(_678, _679, _680), vec3(_598, _599, _600)));
    float _3548 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _765 = sqrt(_601);
    float _778 = exp2((_765 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_765 * 3.0));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1119;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_818, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810));
        float _848 = fma(_818, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810));
        float _852 = fma(_818, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810));
        float _877 = _810 + _598;
        float _878 = _814 + _599;
        float _879 = _818 + _600;
        float _889 = fma(_879, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877)) - _844;
        float _890 = fma(_879, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877)) - _848;
        float _891 = fma(_879, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877)) - _852;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _947 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_913.x + (-0.5));
        float _949 = _947 * (_913.y + (-0.5));
        float _950 = _947 * (_913.z + (-0.5));
        float _957 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_920.x + (-0.5));
        float _959 = _957 * (_920.y + (-0.5));
        float _960 = _957 * (_920.z + (-0.5));
        float _967 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_927.x + (-0.5));
        float _969 = _967 * (_927.y + (-0.5));
        float _970 = _967 * (_927.z + (-0.5));
        float _977 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_934.x + (-0.5));
        float _979 = _977 * (_934.y + (-0.5));
        float _980 = _977 * (_934.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1001 = (dot(vec3(_598, _599, _600), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1011 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3596 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1013 + 1.0))) + _1018) * _981;
        float _1028 = _949 * 0.5;
        float _1029 = _959 * 0.5;
        float _1030 = _969 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_598, _599, _600), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3629 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1055 + 1.0))) + _1060) * _982;
        float _1070 = _950 * 0.5;
        float _1071 = _960 * 0.5;
        float _1072 = _970 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_598, _599, _600), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3662 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1097 + 1.0))) + _1102) * _983;
        _1119 = _950;
        _1121 = _949;
        _1122 = _948;
        _1123 = _960;
        _1124 = _959;
        _1125 = _958;
        _1126 = _970;
        _1127 = _969;
        _1128 = _968;
        _1129 = _983;
        _1130 = _982;
        _1131 = _981;
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _1120;
        _1121 = _1120;
        _1122 = _1120;
        _1123 = _1120;
        _1124 = _1120;
        _1125 = _1120;
        _1126 = _1120;
        _1127 = _1120;
        _1128 = _1120;
        _1129 = _1120;
        _1130 = _1120;
        _1131 = _1120;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_818, cbModelParam._m0[30u].z, fma(_814, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _810));
        float _1162 = fma(_818, cbModelParam._m0[31u].z, fma(_814, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _810));
        float _1166 = fma(_818, cbModelParam._m0[32u].z, fma(_814, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _810));
        float _1189 = _810 + _598;
        float _1190 = _814 + _599;
        float _1191 = _818 + _600;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_598, _599, _600), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3725 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_598, _599, _600), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3758 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_598, _599, _600), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3791 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1120;
        _1428 = _1120;
        _1429 = _1120;
        _1430 = _1120;
        _1431 = _1120;
        _1432 = _1120;
        _1433 = _1120;
        _1434 = _1120;
        _1435 = _1120;
        _1436 = _1120;
        _1437 = _1120;
        _1438 = _1120;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1132)) + _1132;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1133)) + _1133;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1134)) + _1134;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _757 * 0.5;
    float _1496 = _758 * 0.5;
    float _1497 = _759 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1119, _1123, _1126, _1129));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _601);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_818, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_818, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_818, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_759, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757));
        float _1627 = fma(_759, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757));
        float _1630 = fma(_759, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1658 = frontier_phi_14_12_ladder;
        }
        float _1860;
        if (_1627 > 0.0)
        {
            _1860 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1860 = frontier_phi_23_19_ladder;
        }
        float _2103;
        if (_1630 > 0.0)
        {
            _2103 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2103 = frontier_phi_35_30_ladder;
        }
        float _2105 = isnan(_1860) ? _1658 : (isnan(_1658) ? _1860 : min(_1658, _1860));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1624) + _1613;
        float _2111 = (_2106 * _1627) + _1617;
        float _2112 = (_2106 * _1630) + _1621;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_13_35_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_13_35_ladder_2;
        _1648 = frontier_phi_13_35_ladder_1;
        _1650 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_757, _758, _759), _1564);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _601);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_818, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_818, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_818, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_759, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757));
        float _1724 = fma(_759, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757));
        float _1727 = fma(_759, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757));
        float _1865;
        if (_1721 > 0.0)
        {
            _1865 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1865 = frontier_phi_25_21_ladder;
        }
        float _2130;
        if (_1724 > 0.0)
        {
            _2130 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2130 = frontier_phi_37_32_ladder;
        }
        float _2335;
        if (_1727 > 0.0)
        {
            _2335 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2335 = frontier_phi_46_43_ladder;
        }
        float _2337 = isnan(_2130) ? _1865 : (isnan(_1865) ? _2130 : min(_1865, _2130));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1721) + _1710;
        float _2343 = (_2338 * _1724) + _1714;
        float _2344 = (_2338 * _1727) + _1718;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_22_46_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_22_46_ladder_2;
        _1748 = frontier_phi_22_46_ladder_1;
        _1750 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_757, _758, _759), _1655);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1762 = ((((1.0 - _778) * ((_765 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_778 * _765)) * _749;
    float _1763 = _1762 * ((cbModelParam._m0[1u].w * (_1746 - _1646)) + _1646);
    float _1764 = _1762 * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1765 = _1762 * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _749 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1819 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1823 = _1786 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_598, _599, _600));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_598, _599, _600));
    float _3927 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3938 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1803].x * _1809) * _1844) + ((cbLight._m0[_1813].x * _1819) * _1842);
    float _1852 = ((_1809 * cbLight._m0[_1803].y) * _1844) + ((_1819 * cbLight._m0[_1813].y) * _1842);
    float _1853 = ((_1809 * cbLight._m0[_1803].z) * _1844) + ((_1819 * cbLight._m0[_1813].z) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1851;
        _1872 = _1852;
        _1874 = _1853;
    }
    else
    {
        uint _1878 = _1786 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_598, _599, _600)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3949 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1897 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1853;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2074 = _1786 + 7u;
        float _2090 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_598, _599, _600)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _3965 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2093 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1915 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1870;
        _1917 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1872;
        _1919 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1874;
    }
    uint _1922 = _1786 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _601) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1786].x + _678;
    float _1938 = cbLight._m0[_1786].y + _679;
    float _1939 = cbLight._m0[_1786].z + _680;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_598, _599, _600), vec3(cbLight._m0[_1786].xyz));
    float _3981 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _1951 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1952 = dot(vec3(_598, _599, _600), vec3(_1944, _1945, _1946));
    float _4003 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1944, _1945, _1946));
    float _4014 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1976 = 1.0 - _1936;
    float _1987 = (0.5 / (((_1951 * ((_1950 * _1976) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1976) + _1936) * _1950))) * _1950;
    float _4025 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2000 = _1786 + 9u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _601) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1823].x + _678;
    float _2014 = cbLight._m0[_1823].y + _679;
    float _2015 = cbLight._m0[_1823].z + _680;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_598, _599, _600), vec3(cbLight._m0[_1823].xyz));
    float _4036 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _2027 = dot(vec3(_598, _599, _600), vec3(_2020, _2021, _2022));
    float _4047 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2020, _2021, _2022));
    float _4058 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2012 * _2012;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = 1.0 - _2012;
    float _2059 = (0.5 / (((_1951 * ((_2026 * _2049) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2049) + _2012) * _2026))) * _2026;
    float _4069 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    float _2071 = (((_2048 * cbLight._m0[_2000].x) * _2061) * _1809) + (((_1975 * cbLight._m0[_1922].x) * _1989) * _1819);
    float _2072 = (((_2048 * cbLight._m0[_2000].y) * _2061) * _1809) + (((_1975 * cbLight._m0[_1922].y) * _1989) * _1819);
    float _2073 = (((_2048 * cbLight._m0[_2000].z) * _2061) * _1809) + (((_1975 * cbLight._m0[_1922].z) * _1989) * _1819);
    float _2135;
    float _2137;
    float _2139;
    if (_1859)
    {
        _2135 = _2071;
        _2137 = _2072;
        _2139 = _2073;
    }
    else
    {
        uint _2141 = _1786 + 2u;
        uint _2145 = _1786 + 10u;
        float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _601) * 0.949999988079071044921875);
        float _2160 = _2159 * _2159;
        float _2161 = cbLight._m0[_2141].x + _678;
        float _2162 = cbLight._m0[_2141].y + _679;
        float _2163 = cbLight._m0[_2141].z + _680;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2168 = _2167 * _2161;
        float _2169 = _2167 * _2162;
        float _2170 = _2167 * _2163;
        float _2171 = dot(vec3(_598, _599, _600), vec3(cbLight._m0[_2141].xyz));
        float _4080 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2175 = dot(vec3(_598, _599, _600), vec3(_2168, _2169, _2170));
        float _4091 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2179 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2168, _2169, _2170));
        float _4102 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2183 = _2160 * _2160;
        float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
        float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2197 = 1.0 - _2160;
        float _2207 = (0.5 / (((_1951 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2197) + _2160) * _2174))) * _2174;
        float _4113 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2209 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
        float _2210 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2135 = (((_2196 * cbLight._m0[_2145].x) * _2209) * _2210) + _2071;
        _2137 = (((_2196 * cbLight._m0[_2145].y) * _2209) * _2210) + _2072;
        _2139 = (((_2196 * cbLight._m0[_2145].z) * _2209) * _2210) + _2073;
    }
    float _2245;
    float _2247;
    float _2249;
    if (_1877)
    {
        _2245 = _2135;
        _2247 = _2137;
        _2249 = _2139;
    }
    else
    {
        uint _2256 = _1786 + 3u;
        uint _2260 = _1786 + 11u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _601) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _678;
        float _2277 = cbLight._m0[_2256].y + _679;
        float _2278 = cbLight._m0[_2256].z + _680;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_598, _599, _600), vec3(cbLight._m0[_2256].xyz));
        float _4129 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2290 = dot(vec3(_598, _599, _600), vec3(_2283, _2284, _2285));
        float _4140 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4151 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2312 = 1.0 - _2275;
        float _2322 = (0.5 / (((_1951 * ((_2289 * _2312) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2312) + _2275) * _2289))) * _2289;
        float _4162 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2245 = (((_2311 * cbLight._m0[_2260].x) * _2324) * _2325) + _2135;
        _2247 = (((_2311 * cbLight._m0[_2260].y) * _2324) * _2325) + _2137;
        _2249 = (((_2311 * cbLight._m0[_2260].z) * _2324) * _2325) + _2139;
    }
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    if (_1784.y == 0u)
    {
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2400;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2400;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2400;
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.x;
        uint _2427 = uint((float(_2415.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _2416))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _2416)));
        float _2437 = (log2(_2403 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2438 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        uint _2441 = uint(isnan(14.0) ? _2438 : (isnan(_2438) ? 14.0 : min(_2438, 14.0)));
        uvec4 _2446 = texelFetch(g_lightClusterGridBuffer, int(((_2441 << 2u) + (_2427 << 6u)) >> 2u));
        uint _2447 = _2446.x;
        uint _2448 = _2415.z;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((((1u << ((_2448 >> 4u) & 15u)) + 4294967295u) & _2447) == 0u) || ((_2448 & 240u) == 0u))
        {
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
        }
        else
        {
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2709)
                {
                    frontier_phi_61_pred = _2693;
                    frontier_phi_61_pred_1 = _2698;
                    frontier_phi_61_pred_2 = _2697;
                    frontier_phi_61_pred_3 = _2696;
                    frontier_phi_61_pred_4 = _2695;
                    frontier_phi_61_pred_5 = _2694;
                }
                else
                {
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    uint _2823;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2708;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2827 = uint(findLSB(_2823)) + (_2699 << 5u);
                        uint _2824 = (_2823 + 4294967295u) & _2823;
                        uint _2829 = _2827 * 48u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2849 = (_2827 * 48u) + 4u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2868 = (_2827 * 48u) + 8u;
                        vec3 _2879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x));
                        float _2883 = _2843.x - _2401;
                        float _2884 = _2843.y - _2402;
                        float _2885 = _2843.z - _2403;
                        float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                        float _2889 = inversesqrt(_2886);
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2893 = dot(vec3(_705, _708, _711), vec3(_2890, _2891, _2892));
                        float _2898 = 1.0 - (_2886 * _2843.w);
                        float _4188 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2899 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2900 = sqrt(_2886) * _2862.w;
                        float _2903 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2893) + _2904;
                        float _2910 = _2900 * _2900;
                        float _2914 = ((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2899) / ((_2910 * 0.699999988079071044921875) + 1.0);
                        float _2918 = (-0.0) - _2401;
                        float _2919 = (-0.0) - _2402;
                        float _2920 = (-0.0) - _2403;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2935 = exp2(log2(1.0 / ((_2910 * 3.5) + 5.0)) * 0.25);
                        float _2936 = 1.0 - _765;
                        float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                        float _2944 = _2943 * _2943;
                        float _2945 = _2944 * _2944;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2956 = dot(vec3(_705, _708, _711), vec3(_2925, _2926, _2927));
                        float _4204 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2960 = dot(vec3(_705, _708, _711), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                        float _4215 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                        float _2968 = _2903 * _2944;
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2893) + _2969;
                        float _4226 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2974 = 1.0 - _2944;
                        float _2984 = (0.5 / (((_2973 * ((_2959 * _2974) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2944) * _2959))) * _2973;
                        float _4237 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2995 = (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_2967 * _2967) * ((_2910 * 2.1991131305694580078125) + 3.141590118408203125))) * _2899;
                        _2752 = (_2914 * _2862.x) + _2820;
                        _2753 = (_2914 * _2862.y) + _2821;
                        _2754 = (_2914 * _2862.z) + _2822;
                        _2749 = (_2995 * _2879.x) + _2817;
                        _2750 = (_2995 * _2879.y) + _2818;
                        _2751 = (_2995 * _2879.z) + _2819;
                        if (_2824 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2824;
                        }
                    }
                    frontier_phi_61_pred = _2749;
                    frontier_phi_61_pred_1 = _2754;
                    frontier_phi_61_pred_2 = _2753;
                    frontier_phi_61_pred_3 = _2752;
                    frontier_phi_61_pred_4 = _2751;
                    frontier_phi_61_pred_5 = _2750;
                }
                _2549 = frontier_phi_61_pred;
                _2559 = frontier_phi_61_pred_1;
                _2557 = frontier_phi_61_pred_2;
                _2555 = frontier_phi_61_pred_3;
                _2553 = frontier_phi_61_pred_4;
                _2551 = frontier_phi_61_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2549;
                    _2694 = _2551;
                    _2695 = _2553;
                    _2696 = _2555;
                    _2697 = _2557;
                    _2698 = _2559;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
        }
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.z;
        uint _2565 = (_2563 >> 8u) & 15u;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((4294967295u << _2565) & _2447) == 0u)
        {
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
            _2667 = _2554;
            _2669 = _2556;
            _2671 = _2558;
        }
        else
        {
            float _2686 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
            float _2687 = _2686 * _2401;
            float _2688 = _2686 * _2402;
            float _2689 = _2686 * _2403;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2565 < ((_2563 >> 12u) & 15u))
            {
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2800 = _2548;
                float _2801 = _2550;
                float _2802 = _2552;
                float _2803 = _2554;
                float _2804 = _2556;
                float _2805 = _2558;
                uint _2806 = _2565;
                uint _2815;
                bool _2816;
                for (;;)
                {
                    _2815 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                    _2816 = _2815 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2816)
                    {
                        frontier_phi_67_pred = _2803;
                        frontier_phi_67_pred_1 = _2804;
                        frontier_phi_67_pred_2 = _2805;
                        frontier_phi_67_pred_3 = _2802;
                        frontier_phi_67_pred_4 = _2801;
                        frontier_phi_67_pred_5 = _2800;
                    }
                    else
                    {
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        uint _3019 = _2815;
                        uint _3020;
                        vec4 _3045;
                        float _3046;
                        vec4 _3061;
                        vec3 _3073;
                        vec4 _3088;
                        vec4 _3103;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3030 = ((_2806 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3019));
                            _3020 = (_3019 + 4294967295u) & _3019;
                            uint _3032 = _3030 * 40u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3046 = _3045.w;
                            uint _3048 = (_3030 * 40u) + 4u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3030 * 40u) + 8u;
                            _3073 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x));
                            uint _3075 = (_3030 * 40u) + 16u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3030 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3030 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3030 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_2403, _3137.z, fma(_2402, _3137.y, _3137.x * _2401)) + _3137.w;
                            _3150 = !((fma(_2403, _3118.z, fma(_2402, _3118.y, _3118.x * _2401)) + _3118.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3045.x - _2401;
                                float _3178 = _3045.y - _2402;
                                float _3179 = _3045.z - _2403;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3046 * _3046));
                                float _4248 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3195 = sqrt(_3180) * _3061.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_705, _708, _711))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_2403, _3088.z, fma(_2402, _3088.y, _3088.x * _2401)) + _3088.w) / _3149;
                                float _3209 = (fma(_2403, _3103.z, fma(_2402, _3103.y, _3103.x * _2401)) + _3103.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4264 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _765;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2687;
                                float _3239 = _3185 - _2688;
                                float _3240 = _3186 - _2689;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_705, _708, _711), vec3((-0.0) - _2687, (-0.0) - _2688, (-0.0) - _2689));
                                float _4275 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3252 = dot(vec3(_705, _708, _711), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4286 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_705, _708, _711), vec3(_3184, _3185, _3186))) + _3261;
                                float _4297 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4308 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3289 * _3073.x;
                                frontier_phi_73_pred_1 = _3289 * _3073.y;
                                frontier_phi_73_pred_2 = _3215 * _3061.z;
                                frontier_phi_73_pred_3 = _3215 * _3061.y;
                                frontier_phi_73_pred_4 = _3215 * _3061.x;
                                frontier_phi_73_pred_5 = _3289 * _3073.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3293 = frontier_phi_73_pred;
                            _3294 = frontier_phi_73_pred_1;
                            _3298 = frontier_phi_73_pred_2;
                            _3297 = frontier_phi_73_pred_3;
                            _3296 = frontier_phi_73_pred_4;
                            _3295 = frontier_phi_73_pred_5;
                            _3003 = _3296 + _3016;
                            _3004 = _3297 + _3017;
                            _3005 = _3298 + _3018;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            _3002 = _3295 + _3015;
                            if (_3020 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3020;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3003;
                        frontier_phi_67_pred_1 = _3004;
                        frontier_phi_67_pred_2 = _3005;
                        frontier_phi_67_pred_3 = _3002;
                        frontier_phi_67_pred_4 = _3001;
                        frontier_phi_67_pred_5 = _3000;
                    }
                    _2668 = frontier_phi_67_pred;
                    _2670 = frontier_phi_67_pred_1;
                    _2672 = frontier_phi_67_pred_2;
                    _2666 = frontier_phi_67_pred_3;
                    _2664 = frontier_phi_67_pred_4;
                    _2662 = frontier_phi_67_pred_5;
                    uint _2807 = _2806 + 1u;
                    if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2800 = _2662;
                        _2801 = _2664;
                        _2802 = _2666;
                        _2803 = _2668;
                        _2804 = _2670;
                        _2805 = _2672;
                        _2806 = _2807;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2670;
                frontier_phi_55_56_ladder_1 = _2672;
                frontier_phi_55_56_ladder_2 = _2668;
                frontier_phi_55_56_ladder_3 = _2666;
                frontier_phi_55_56_ladder_4 = _2664;
                frontier_phi_55_56_ladder_5 = _2662;
            }
            else
            {
                frontier_phi_55_56_ladder = _2556;
                frontier_phi_55_56_ladder_1 = _2558;
                frontier_phi_55_56_ladder_2 = _2554;
                frontier_phi_55_56_ladder_3 = _2552;
                frontier_phi_55_56_ladder_4 = _2550;
                frontier_phi_55_56_ladder_5 = _2548;
            }
            _2661 = frontier_phi_55_56_ladder_5;
            _2663 = frontier_phi_55_56_ladder_4;
            _2665 = frontier_phi_55_56_ladder_3;
            _2667 = frontier_phi_55_56_ladder_2;
            _2669 = frontier_phi_55_56_ladder;
            _2671 = frontier_phi_55_56_ladder_1;
        }
        float _2676 = isnan(1.0) ? _749 : (isnan(_749) ? 1.0 : min(_749, 1.0));
        _2460 = (_2676 * _2667) + _1915;
        _2462 = (_2676 * _2669) + _1917;
        _2464 = (_2676 * _2671) + _1919;
        _2466 = ((_2661 * 0.039999999105930328369140625) * _2676) + _2245;
        _2468 = ((_2663 * 0.039999999105930328369140625) * _2676) + _2247;
        _2470 = ((_2665 * 0.039999999105930328369140625) * _2676) + _2249;
    }
    else
    {
        _2460 = _1915;
        _2462 = _1917;
        _2464 = _1919;
        _2466 = _2245;
        _2468 = _2247;
        _2470 = _2249;
    }
    float _4324 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4335 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4346 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    uint _2490 = _234 + 6u;
    float _2498 = _686 / cbSceneParam._m0[86u].x;
    float _2499 = _687 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _619 : (isnan(_619) ? cbSceneParam._m0[77u].w : min(_619, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_619 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_619) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _619 : min(cbSceneParam._m0[80u].w, _619));
        float _2574 = _2573 / _619;
        float _2585 = _2574 * _671;
        float _2586 = _672 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2589 = _2574 * _673;
        float _2591 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2592 = _2591 + cbSceneParam._m0[79u].w;
        float _2593 = cbSceneParam._m0[79u].w - _2586;
        float _2599 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2589 * _2589));
        float _2602 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2599;
        float _2607 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2609 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2587 - _2591) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2592 > 0.0) ? exp2(_2607 * _2592) : (2.0 - exp2(_2609 * _2592))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2602;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : max(_2592, _2593));
            float _2724 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : min(_2592, _2593));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2762 = ((abs(_2599 / _2587) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2607 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2607 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2609 * _2733) - exp2(_2609 * _2734)) * _2722))) + (_2602 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2518);
        _2611 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2613 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2615 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2617 = _2773 * _2518;
    }
    else
    {
        _2611 = _2515;
        _2613 = _2516;
        _2615 = _2517;
        _2617 = _2518;
    }
    float _2629 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2630 = _2629 == 3.0;
    float _2631 = log2(_2617);
    float _2638 = exp2(_2631 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2460 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _749))) + ((_2466 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2639 = exp2(_2631 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2462 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _749))) + ((_2468 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2640 = exp2(_2631 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2464 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _749))) + ((_2470 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2649 = (_2629 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2649 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.y = _2649 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.z = _2649 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.w = cbInstanceData._m0[_2490].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2490].w;
}


