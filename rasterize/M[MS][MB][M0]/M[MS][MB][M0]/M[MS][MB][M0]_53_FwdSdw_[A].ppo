#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1048;
float _3693;
float _3694;
float _3695;
float _3696;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = _315.z;
    float _324 = (_315.x * 2.0) + (-1.0);
    float _326 = (_315.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3705 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    float _336 = fma(_333, _216, fma(_326, _223, _324 * _209));
    float _339 = fma(_333, _217, fma(_326, _224, _324 * _210));
    float _342 = fma(_333, _218, fma(_326, _225, _324 * _211));
    float _346 = inversesqrt(dot(vec3(_336, _339, _342), vec3(_336, _339, _342)));
    vec4 _382 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _384 = _382.x;
    float _385 = 1.0 - _384;
    float _392 = ((_384 - _385) * cbMtdParam._m0[24u].z) + _385;
    float _394 = (cbMtdParam._m0[19u].x + dot(vec4(_346 * _336, _346 * _339, _346 * _342, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_392 * cbMtdParam._m0[21u].z);
    float _3716 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _410 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_392 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3727 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _415 = ((_395 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) * _411) + _274;
    float _416 = ((_395 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) * _411) + _275;
    float _417 = ((_395 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) * _411) + _276;
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _437 = (_430.x * 2.0) + (-1.0);
    float _438 = (_430.y * 2.0) + (-1.0);
    float _439 = dot(vec2(_437, _438), vec2(_437, _438));
    float _3738 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _448 = (((_430.z - _319) * _395) * _411) + _319;
    float _463 = (((cbMtdParam._m0[21u].x * _324) + ((_437 - _324) * _395)) * _411) + _324;
    float _464 = (((cbMtdParam._m0[21u].x * _326) + ((_438 - _326) * _395)) * _411) + _326;
    float _465 = (((sqrt(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) - _333) * _395) * _411) + _333;
    float _470 = cbMtdParam._m0[22u].x + _315.w;
    float _473 = fma(_465, _216, fma(_464, _223, _463 * _209));
    float _476 = fma(_465, _217, fma(_464, _224, _463 * _210));
    float _479 = fma(_465, _218, fma(_464, _225, _463 * _211));
    float _483 = inversesqrt(dot(vec3(_473, _476, _479), vec3(_473, _476, _479)));
    float _484 = _483 * _473;
    float _485 = _483 * _476;
    float _486 = _483 * _479;
    float _3749 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _487 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3771 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3782 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3793 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _505 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _556 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _546);
    float _557 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _546);
    float _558 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _546);
    float _562 = inversesqrt(dot(vec3(_556, _557, _558), vec3(_556, _557, _558)));
    float _563 = _556 * _562;
    float _564 = _557 * _562;
    float _565 = _558 * _562;
    vec4 _570 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _572 = _570.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _729 = sqrt(((_556 * _556) + (_557 * _557)) + (_558 * _558));
        float _735 = (cbMatDynParam._m0[5u].x * _729) + cbMatDynParam._m0[5u].y;
        float _3804 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _740 = (cbMatDynParam._m0[5u].z * _729) + cbMatDynParam._m0[5u].w;
        float _3815 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) - _736)) + _736) < ((_572 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_486, cbSceneParam._m0[5u].z, fma(_485, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _484));
    float _608 = fma(_486, cbSceneParam._m0[6u].z, fma(_485, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _484));
    float _611 = fma(_486, cbSceneParam._m0[7u].z, fma(_485, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _484));
    uint _624 = _228 + 9u;
    uint _625 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3826 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    vec4 _645 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _649 = ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * TEXCOORD_5.w) * _645.x;
    float _650 = dot(vec3(_484, _485, _486), vec3(_563, _564, _565));
    float _653 = _650 * 2.0;
    float _657 = (_653 * _484) - _563;
    float _658 = (_653 * _485) - _564;
    float _659 = (_653 * _486) - _565;
    float _663 = abs(dot(vec3(_563, _564, _565), vec3(_484, _485, _486)));
    float _3859 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _665 = sqrt(_487);
    float _678 = exp2((_665 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_665 * 3.0));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1047;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _772 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _776 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _780 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _805 = _710 + _484;
        float _806 = _714 + _485;
        float _807 = _718 + _486;
        float _817 = fma(_807, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805)) - _772;
        float _818 = fma(_807, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805)) - _776;
        float _819 = fma(_807, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805)) - _780;
        float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
        float _836 = ((_823 * _817) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_772 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_823 * _818) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_776 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_823 * _819) / cbModelParam._m0[34u].z) + ((((((_780 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        float _875 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_841.x + (-0.5));
        float _877 = _875 * (_841.y + (-0.5));
        float _878 = _875 * (_841.z + (-0.5));
        float _885 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_848.x + (-0.5));
        float _887 = _885 * (_848.y + (-0.5));
        float _888 = _885 * (_848.z + (-0.5));
        float _895 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_855.x + (-0.5));
        float _897 = _895 * (_855.y + (-0.5));
        float _898 = _895 * (_855.z + (-0.5));
        float _905 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_862.x + (-0.5));
        float _907 = _905 * (_862.y + (-0.5));
        float _908 = _905 * (_862.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = _876 * 0.5;
        float _913 = _886 * 0.5;
        float _914 = _896 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _929 = (dot(vec3(_484, _485, _486), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _939 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3907 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_941 + 1.0))) + _946) * _909;
        float _956 = _877 * 0.5;
        float _957 = _887 * 0.5;
        float _958 = _897 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_484, _485, _486), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3940 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_983 + 1.0))) + _988) * _910;
        float _998 = _878 * 0.5;
        float _999 = _888 * 0.5;
        float _1000 = _898 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_484, _485, _486), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3973 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1025 + 1.0))) + _1030) * _911;
        _1047 = _878;
        _1049 = _877;
        _1050 = _876;
        _1051 = _888;
        _1052 = _887;
        _1053 = _886;
        _1054 = _898;
        _1055 = _897;
        _1056 = _896;
        _1057 = _911;
        _1058 = _910;
        _1059 = _909;
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _1048;
        _1049 = _1048;
        _1050 = _1048;
        _1051 = _1048;
        _1052 = _1048;
        _1053 = _1048;
        _1054 = _1048;
        _1055 = _1048;
        _1056 = _1048;
        _1057 = _1048;
        _1058 = _1048;
        _1059 = _1048;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1094 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1098 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1121 = _710 + _484;
        float _1122 = _714 + _485;
        float _1123 = _718 + _486;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_484, _485, _486), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4036 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_484, _485, _486), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4069 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_484, _485, _486), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4102 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1048;
        _1360 = _1048;
        _1361 = _1048;
        _1362 = _1048;
        _1363 = _1048;
        _1364 = _1048;
        _1365 = _1048;
        _1366 = _1048;
        _1367 = _1048;
        _1368 = _1048;
        _1369 = _1048;
        _1370 = _1048;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1060)) + _1060;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1061)) + _1061;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1062)) + _1062;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _657 * 0.5;
    float _1428 = _658 * 0.5;
    float _1429 = _659 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1047, _1051, _1054, _1057));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _487);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1543 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1547 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1551 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1554 = fma(_659, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657));
        float _1557 = fma(_659, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657));
        float _1560 = fma(_659, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657));
        float _1588;
        if (_1554 > 0.0)
        {
            _1588 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1588 = frontier_phi_17_15_ladder;
        }
        float _1758;
        if (_1557 > 0.0)
        {
            _1758 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1758 = frontier_phi_26_22_ladder;
        }
        float _2054;
        if (_1560 > 0.0)
        {
            _2054 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2054 = frontier_phi_38_33_ladder;
        }
        float _2056 = isnan(_1758) ? _1588 : (isnan(_1588) ? _1758 : min(_1588, _1758));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1554) + _1543;
        float _2062 = (_2057 * _1557) + _1547;
        float _2063 = (_2057 * _1560) + _1551;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2064;
        float _2068 = _2064 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 > _2068) || ((_2062 < _2066) || ((_2061 < _2066) || (_2061 > _2068))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2063, cbModelParam._m0[9u].z, fma(_2062, cbModelParam._m0[9u].y, _2061 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2063, cbModelParam._m0[10u].z, fma(_2062, cbModelParam._m0[10u].y, _2061 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2063, cbModelParam._m0[11u].z, fma(_2062, cbModelParam._m0[11u].y, _2061 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_16_38_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1576 = frontier_phi_16_38_ladder_2;
        _1578 = frontier_phi_16_38_ladder_1;
        _1580 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_657, _658, _659), _1496);
        _1576 = _1564.x * cbModelParam._m0[1u].y;
        _1578 = _1564.y * cbModelParam._m0[1u].y;
        _1580 = _1564.z * cbModelParam._m0[1u].y;
    }
    float _1584 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _487);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1584 : min(cbModelParam._m0[25u].w, _1584));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_659, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657));
        float _1652 = fma(_659, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657));
        float _1655 = fma(_659, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657));
        float _1763;
        if (_1649 > 0.0)
        {
            _1763 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1763 = frontier_phi_28_24_ladder;
        }
        float _2081;
        if (_1652 > 0.0)
        {
            _2081 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2081 = frontier_phi_40_35_ladder;
        }
        float _2408;
        if (_1655 > 0.0)
        {
            _2408 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2408 = frontier_phi_50_47_ladder;
        }
        float _2410 = isnan(_2081) ? _1763 : (isnan(_1763) ? _2081 : min(_1763, _2081));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1649) + _1638;
        float _2416 = (_2411 * _1652) + _1642;
        float _2417 = (_2411 * _1655) + _1646;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1585);
            frontier_phi_25_50_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_25_50_ladder_2;
        _1676 = frontier_phi_25_50_ladder_1;
        _1678 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_657, _658, _659), _1585);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _678) * ((_665 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_678 * _665)) * _649;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1576)) + _1576);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1578)) + _1578);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1580)) + _1580);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    float _1737 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1741 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1745 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1750 = _1737 / _1749;
    float _1751 = _1741 / _1749;
    float _1752 = _1745 / _1749;
    float _1899;
    float _1900;
    float _1901;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1779 = ((uint(_1752 > cbSceneParam._m0[59u].y) + uint(_1752 > cbSceneParam._m0[59u].x)) + uint(_1752 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1780 = _1779 + 43u;
        uint _1788 = _1779 + 44u;
        uint _1796 = _1779 + 45u;
        uint _1804 = _1779 + 46u;
        float _1815 = fma(_1749, cbSceneParam._m0[_1780].w, fma(_1745, cbSceneParam._m0[_1780].z, fma(_1741, cbSceneParam._m0[_1780].y, _1737 * cbSceneParam._m0[_1780].x)));
        float _1819 = fma(_1749, cbSceneParam._m0[_1788].w, fma(_1745, cbSceneParam._m0[_1788].z, fma(_1741, cbSceneParam._m0[_1788].y, _1737 * cbSceneParam._m0[_1788].x)));
        float _1827 = fma(_1749, cbSceneParam._m0[_1804].w, fma(_1745, cbSceneParam._m0[_1804].z, fma(_1741, cbSceneParam._m0[_1804].y, _1737 * cbSceneParam._m0[_1804].x)));
        float _1832 = cbSceneParam._m0[33u].z * _1827;
        float _1834 = cbSceneParam._m0[33u].w * _1827;
        float _1837 = fma(_1749, cbSceneParam._m0[_1796].w, fma(_1745, cbSceneParam._m0[_1796].z, fma(_1741, cbSceneParam._m0[_1796].y, _1737 * cbSceneParam._m0[_1796].x))) / _1827;
        float _1885 = (cbSceneParam._m0[33u].x - sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752))) * cbSceneParam._m0[33u].y;
        float _4228 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1892 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1832 + _1815) / _1827, (_1834 + _1819) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 + _1815) / _1827, (_1819 - _1832) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 - _1832) / _1827, (_1819 - _1834) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 - _1834) / _1827, (_1832 + _1819) / _1827), _1837), 0.0)).x), vec4(0.25)));
        _1899 = 1.0 - (_1892 * cbSceneParam._m0[34u].x);
        _1900 = 1.0 - (_1892 * cbSceneParam._m0[34u].y);
        _1901 = 1.0 - (_1892 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1899 = 1.0;
        _1900 = 1.0;
        _1901 = 1.0;
    }
    float _1965;
    float _1967;
    float _1969;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1953 = fma(_1749, cbSceneParam._m0[63u].w, fma(_1745, cbSceneParam._m0[63u].z, fma(_1741, cbSceneParam._m0[63u].y, _1737 * cbSceneParam._m0[63u].x)));
        float _1954 = fma(_1749, cbSceneParam._m0[60u].w, fma(_1745, cbSceneParam._m0[60u].z, fma(_1741, cbSceneParam._m0[60u].y, _1737 * cbSceneParam._m0[60u].x))) / _1953;
        float _1955 = fma(_1749, cbSceneParam._m0[61u].w, fma(_1745, cbSceneParam._m0[61u].z, fma(_1741, cbSceneParam._m0[61u].y, _1737 * cbSceneParam._m0[61u].x))) / _1953;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1954 >= cbSceneParam._m0[64u].x) && (_1955 >= cbSceneParam._m0[64u].y)) && (_1954 <= cbSceneParam._m0[64u].z)) && (_1955 <= cbSceneParam._m0[64u].w))
        {
            float _2094 = fma(_1749, cbSceneParam._m0[62u].w, fma(_1745, cbSceneParam._m0[62u].z, fma(_1741, cbSceneParam._m0[62u].y, _1737 * cbSceneParam._m0[62u].x))) / _1953;
            float _2098 = isnan(cbSceneParam._m0[41u].w) ? _2094 : (isnan(_2094) ? cbSceneParam._m0[41u].w : max(_2094, cbSceneParam._m0[41u].w));
            float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752))) * cbSceneParam._m0[33u].y;
            float _4244 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
            float _2148 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1954, cbSceneParam._m0[33u].w + _1955), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1954, _1955 - cbSceneParam._m0[33u].z), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1954 - cbSceneParam._m0[33u].z, _1955 - cbSceneParam._m0[33u].w), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1954 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1955), _2098), 0.0)).x), vec4(0.25)));
            float _2152 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
            float _2153 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
            float _2154 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2154) ? _1901 : (isnan(_1901) ? _2154 : min(_1901, _2154));
            frontier_phi_37_36_ladder_1 = isnan(_2153) ? _1900 : (isnan(_1900) ? _2153 : min(_1900, _2153));
            frontier_phi_37_36_ladder_2 = isnan(_2152) ? _1899 : (isnan(_1899) ? _2152 : min(_1899, _2152));
        }
        else
        {
            frontier_phi_37_36_ladder = _1901;
            frontier_phi_37_36_ladder_1 = _1900;
            frontier_phi_37_36_ladder_2 = _1899;
        }
        _1965 = frontier_phi_37_36_ladder_2;
        _1967 = frontier_phi_37_36_ladder_1;
        _1969 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1965 = _1899;
        _1967 = _1900;
        _1969 = _1901;
    }
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _649 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2013 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2017 = _1976 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_484, _485, _486));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_484, _485, _486));
    float _4280 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4291 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1993].x * _1999) * _2038) + (((cbLight._m0[_2003].x * _1965) * _2013) * _2036);
    float _2046 = ((_1999 * cbLight._m0[_1993].y) * _2038) + (((cbLight._m0[_2003].y * _1967) * _2013) * _2036);
    float _2047 = ((_1999 * cbLight._m0[_1993].z) * _2038) + (((cbLight._m0[_2003].z * _1969) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2053)
    {
        _2155 = _2045;
        _2157 = _2046;
        _2159 = _2047;
    }
    else
    {
        uint _2163 = _1976 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_484, _485, _486)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4302 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2182 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2045;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2046;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2047;
    }
    bool _2162 = _2051.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2162)
    {
        _2217 = _2155;
        _2219 = _2157;
        _2221 = _2159;
    }
    else
    {
        uint _2379 = _1976 + 7u;
        float _2395 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_484, _485, _486)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4318 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2398 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2217 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2155;
        _2219 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2157;
        _2221 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2159;
    }
    uint _2224 = _1976 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _487) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_1976].x + _563;
    float _2240 = cbLight._m0[_1976].y + _564;
    float _2241 = cbLight._m0[_1976].z + _565;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_1976].xyz));
    float _4334 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _4345 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2253 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2254 = dot(vec3(_484, _485, _486), vec3(_2246, _2247, _2248));
    float _4356 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2246, _2247, _2248));
    float _4367 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2253 * ((_2252 * _2278) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2278) + _2238) * _2252))) * _2252;
    float _4378 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2305 = _1976 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _487) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2017].x + _563;
    float _2319 = cbLight._m0[_2017].y + _564;
    float _2320 = cbLight._m0[_2017].z + _565;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_2017].xyz));
    float _4389 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2332 = dot(vec3(_484, _485, _486), vec3(_2325, _2326, _2327));
    float _4400 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2325, _2326, _2327));
    float _4411 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2317;
    float _2364 = (0.5 / (((_2253 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2354) + _2317) * _2331))) * _2331;
    float _4422 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2376 = (((_2353 * cbLight._m0[_2305].x) * _2366) * _1999) + ((((cbLight._m0[_2224].x * _1965) * _2277) * _2291) * _2013);
    float _2377 = (((_2353 * cbLight._m0[_2305].y) * _2366) * _1999) + ((((cbLight._m0[_2224].y * _1967) * _2277) * _2291) * _2013);
    float _2378 = (((_2353 * cbLight._m0[_2305].z) * _2366) * _1999) + ((((cbLight._m0[_2224].z * _1969) * _2277) * _2291) * _2013);
    float _2434;
    float _2436;
    float _2438;
    if (_2053)
    {
        _2434 = _2376;
        _2436 = _2377;
        _2438 = _2378;
    }
    else
    {
        uint _2440 = _1976 + 2u;
        uint _2444 = _1976 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _487) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _563;
        float _2461 = cbLight._m0[_2440].y + _564;
        float _2462 = cbLight._m0[_2440].z + _565;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_2440].xyz));
        float _4433 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2474 = dot(vec3(_484, _485, _486), vec3(_2467, _2468, _2469));
        float _4444 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4455 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2495 = (exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2496 = 1.0 - _2459;
        float _2506 = (0.5 / (((_2253 * ((_2473 * _2496) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2496) + _2459) * _2473))) * _2473;
        float _4466 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2434 = (((_2495 * cbLight._m0[_2444].x) * _2508) * _2509) + _2376;
        _2436 = (((_2495 * cbLight._m0[_2444].y) * _2508) * _2509) + _2377;
        _2438 = (((_2495 * cbLight._m0[_2444].z) * _2508) * _2509) + _2378;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2162)
    {
        _2540 = _2434;
        _2542 = _2436;
        _2544 = _2438;
    }
    else
    {
        uint _2551 = _1976 + 3u;
        uint _2555 = _1976 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _487) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _563;
        float _2572 = cbLight._m0[_2551].y + _564;
        float _2573 = cbLight._m0[_2551].z + _565;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_2551].xyz));
        float _4482 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2585 = dot(vec3(_484, _485, _486), vec3(_2578, _2579, _2580));
        float _4493 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4504 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2253 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2607) + _2570) * _2584))) * _2584;
        float _4515 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2540 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2434;
        _2542 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2436;
        _2544 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2438;
    }
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_1974.y == 0u)
    {
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.x;
        uint _2653 = uint((float(_2641.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2642))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2642)));
        float _2663 = (log2(_1752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2664 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        uint _2667 = uint(isnan(14.0) ? _2664 : (isnan(_2664) ? 14.0 : min(_2664, 14.0)));
        uvec4 _2672 = texelFetch(g_lightClusterGridBuffer, int(((_2667 << 2u) + (_2653 << 6u)) >> 2u));
        uint _2673 = _2672.x;
        uint _2674 = _2641.z;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((((1u << ((_2674 >> 4u) & 15u)) + 4294967295u) & _2673) == 0u) || ((_2674 & 240u) == 0u))
        {
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
        }
        else
        {
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            uint _2912 = 0u;
            uint _2921;
            bool _2922;
            for (;;)
            {
                _2921 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                _2922 = _2921 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2922)
                {
                    frontier_phi_71_pred = _2911;
                    frontier_phi_71_pred_1 = _2910;
                    frontier_phi_71_pred_2 = _2909;
                    frontier_phi_71_pred_3 = _2908;
                    frontier_phi_71_pred_4 = _2907;
                    frontier_phi_71_pred_5 = _2906;
                }
                else
                {
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    uint _3057;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2921;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    for (;;)
                    {
                        uint _3061 = uint(findLSB(_3057)) + (_2912 << 5u);
                        uint _3058 = (_3057 + 4294967295u) & _3057;
                        uint _3063 = _3061 * 48u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3083 = (_3061 * 48u) + 4u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3102 = (_3061 * 48u) + 8u;
                        vec3 _3113 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x));
                        float _3117 = _3077.x - _1750;
                        float _3118 = _3077.y - _1751;
                        float _3119 = _3077.z - _1752;
                        float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                        float _3123 = inversesqrt(_3120);
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3127 = dot(vec3(_605, _608, _611), vec3(_3124, _3125, _3126));
                        float _3132 = 1.0 - (_3120 * _3077.w);
                        float _4541 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3133 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3134 = sqrt(_3120) * _3096.w;
                        float _3137 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3127) + _3138;
                        float _3144 = _3134 * _3134;
                        float _3148 = ((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3133) / ((_3144 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _1750;
                        float _3153 = (-0.0) - _1751;
                        float _3154 = (-0.0) - _1752;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3168 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                        float _3169 = 1.0 - _665;
                        float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                        float _3177 = _3176 * _3176;
                        float _3178 = _3177 * _3177;
                        float _3179 = _3159 + _3124;
                        float _3180 = _3160 + _3125;
                        float _3181 = _3161 + _3126;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3189 = dot(vec3(_605, _608, _611), vec3(_3159, _3160, _3161));
                        float _4557 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3193 = dot(vec3(_605, _608, _611), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                        float _4568 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                        float _3201 = _3137 * _3177;
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3127) + _3202;
                        float _4579 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3207 = 1.0 - _3177;
                        float _3217 = (0.5 / (((_3206 * ((_3192 * _3207) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3177) * _3192))) * _3206;
                        float _4590 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3228 = (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3200 * _3200) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125))) * _3133;
                        _2981 = (_3148 * _3096.x) + _3054;
                        _2982 = (_3148 * _3096.y) + _3055;
                        _2983 = (_3148 * _3096.z) + _3056;
                        _2978 = (_3228 * _3113.x) + _3051;
                        _2979 = (_3228 * _3113.y) + _3052;
                        _2980 = (_3228 * _3113.z) + _3053;
                        if (_3058 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _3058;
                        }
                    }
                    frontier_phi_71_pred = _2983;
                    frontier_phi_71_pred_1 = _2982;
                    frontier_phi_71_pred_2 = _2981;
                    frontier_phi_71_pred_3 = _2980;
                    frontier_phi_71_pred_4 = _2979;
                    frontier_phi_71_pred_5 = _2978;
                }
                _2764 = frontier_phi_71_pred;
                _2762 = frontier_phi_71_pred_1;
                _2760 = frontier_phi_71_pred_2;
                _2758 = frontier_phi_71_pred_3;
                _2756 = frontier_phi_71_pred_4;
                _2754 = frontier_phi_71_pred_5;
                uint _2913 = _2912 + 1u;
                if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2906 = _2754;
                    _2907 = _2756;
                    _2908 = _2758;
                    _2909 = _2760;
                    _2910 = _2762;
                    _2911 = _2764;
                    _2912 = _2913;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
        }
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.z;
        uint _2770 = (_2768 >> 8u) & 15u;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((4294967295u << _2770) & _2673) == 0u)
        {
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
        }
        else
        {
            float _2899 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
            float _2900 = _2899 * _1750;
            float _2901 = _2899 * _1751;
            float _2902 = _2899 * _1752;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2770 < ((_2768 >> 12u) & 15u))
            {
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _3034 = _2753;
                float _3035 = _2755;
                float _3036 = _2757;
                float _3037 = _2759;
                float _3038 = _2761;
                float _3039 = _2763;
                uint _3040 = _2770;
                uint _3049;
                bool _3050;
                for (;;)
                {
                    _3049 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                    _3050 = _3049 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3050)
                    {
                        frontier_phi_82_pred = _3039;
                        frontier_phi_82_pred_1 = _3038;
                        frontier_phi_82_pred_2 = _3037;
                        frontier_phi_82_pred_3 = _3036;
                        frontier_phi_82_pred_4 = _3035;
                        frontier_phi_82_pred_5 = _3034;
                    }
                    else
                    {
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3255 = _3034;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        float _3259 = _3038;
                        float _3260 = _3039;
                        uint _3261 = _3049;
                        uint _3262;
                        vec4 _3287;
                        float _3288;
                        vec4 _3303;
                        vec3 _3315;
                        vec4 _3331;
                        vec4 _3347;
                        float _3393;
                        bool _3394;
                        for (;;)
                        {
                            uint _3272 = ((_3040 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3261));
                            _3262 = (_3261 + 4294967295u) & _3261;
                            uint _3274 = _3272 * 40u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3288 = _3287.w;
                            uint _3290 = (_3272 * 40u) + 4u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3272 * 40u) + 8u;
                            _3315 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x));
                            uint _3318 = (_3272 * 40u) + 16u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3334 = (_3272 * 40u) + 20u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3272 * 40u) + 24u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3368 = (_3272 * 40u) + 28u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3393 = fma(_1752, _3381.z, fma(_1751, _3381.y, _3381.x * _1750)) + _3381.w;
                            _3394 = !((fma(_1752, _3362.z, fma(_1751, _3362.y, _3362.x * _1750)) + _3362.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3394)
                            {
                                float _3421 = _3287.x - _1750;
                                float _3422 = _3287.y - _1751;
                                float _3423 = _3287.z - _1752;
                                float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                                float _3427 = inversesqrt(_3424);
                                float _3428 = _3427 * _3421;
                                float _3429 = _3427 * _3422;
                                float _3430 = _3427 * _3423;
                                float _3434 = 1.0 - (_3424 / (_3288 * _3288));
                                float _4601 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3439 = sqrt(_3424) * _3303.w;
                                float _3441 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                                float _3442 = _3441 * _3441;
                                float _3445 = ((1.0 - _3442) * dot(vec3(_3428, _3429, _3430), vec3(_605, _608, _611))) + _3442;
                                float _3448 = _3439 * _3439;
                                float _3452 = (fma(_1752, _3331.z, fma(_1751, _3331.y, _3331.x * _1750)) + _3331.w) / _3393;
                                float _3453 = (fma(_1752, _3347.z, fma(_1751, _3347.y, _3347.x * _1750)) + _3347.w) / _3393;
                                float _3457 = 1.0 - dot(vec2(_3452, _3453), vec2(_3452, _3453));
                                float _4617 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3459 = _3458 * (((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3435) / ((_3448 * 0.699999988079071044921875) + 1.0));
                                float _3471 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                                float _3472 = 1.0 - _665;
                                float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                                float _3480 = _3479 * _3479;
                                float _3481 = _3480 * _3480;
                                float _3482 = _3428 - _2900;
                                float _3483 = _3429 - _2901;
                                float _3484 = _3430 - _2902;
                                float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                                float _3492 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2900, (-0.0) - _2901, (-0.0) - _2902));
                                float _4628 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3496 = dot(vec3(_605, _608, _611), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                                float _4639 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                                float _3504 = _3441 * _3480;
                                float _3505 = _3504 * _3504;
                                float _3511 = ((1.0 - _3505) * dot(vec3(_605, _608, _611), vec3(_3428, _3429, _3430))) + _3505;
                                float _4650 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3513 = 1.0 - _3480;
                                float _3523 = (0.5 / (((_3512 * ((_3495 * _3513) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3480) * _3495))) * _3512;
                                float _4661 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3533 = (_3458 * _3435) * (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3503 * _3503) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3459 * _3303.z;
                                frontier_phi_88_pred_1 = _3459 * _3303.y;
                                frontier_phi_88_pred_2 = _3459 * _3303.x;
                                frontier_phi_88_pred_3 = _3533 * _3315.z;
                                frontier_phi_88_pred_4 = _3533 * _3315.y;
                                frontier_phi_88_pred_5 = _3533 * _3315.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3542 = frontier_phi_88_pred;
                            _3541 = frontier_phi_88_pred_1;
                            _3540 = frontier_phi_88_pred_2;
                            _3539 = frontier_phi_88_pred_3;
                            _3538 = frontier_phi_88_pred_4;
                            _3537 = frontier_phi_88_pred_5;
                            _3245 = _3540 + _3258;
                            _3246 = _3541 + _3259;
                            _3247 = _3542 + _3260;
                            _3242 = _3537 + _3255;
                            _3243 = _3538 + _3256;
                            _3244 = _3539 + _3257;
                            if (_3262 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3262;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3247;
                        frontier_phi_82_pred_1 = _3246;
                        frontier_phi_82_pred_2 = _3245;
                        frontier_phi_82_pred_3 = _3244;
                        frontier_phi_82_pred_4 = _3243;
                        frontier_phi_82_pred_5 = _3242;
                    }
                    _2885 = frontier_phi_82_pred;
                    _2883 = frontier_phi_82_pred_1;
                    _2881 = frontier_phi_82_pred_2;
                    _2879 = frontier_phi_82_pred_3;
                    _2877 = frontier_phi_82_pred_4;
                    _2875 = frontier_phi_82_pred_5;
                    uint _3041 = _3040 + 1u;
                    if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3034 = _2875;
                        _3035 = _2877;
                        _3036 = _2879;
                        _3037 = _2881;
                        _3038 = _2883;
                        _3039 = _2885;
                        _3040 = _3041;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2881;
                frontier_phi_63_64_ladder_1 = _2885;
                frontier_phi_63_64_ladder_2 = _2883;
                frontier_phi_63_64_ladder_3 = _2879;
                frontier_phi_63_64_ladder_4 = _2877;
                frontier_phi_63_64_ladder_5 = _2875;
            }
            else
            {
                frontier_phi_63_64_ladder = _2759;
                frontier_phi_63_64_ladder_1 = _2763;
                frontier_phi_63_64_ladder_2 = _2761;
                frontier_phi_63_64_ladder_3 = _2757;
                frontier_phi_63_64_ladder_4 = _2755;
                frontier_phi_63_64_ladder_5 = _2753;
            }
            _2874 = frontier_phi_63_64_ladder_5;
            _2876 = frontier_phi_63_64_ladder_4;
            _2878 = frontier_phi_63_64_ladder_3;
            _2880 = frontier_phi_63_64_ladder;
            _2882 = frontier_phi_63_64_ladder_2;
            _2884 = frontier_phi_63_64_ladder_1;
        }
        float _2889 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
        _2686 = (_2889 * _2880) + _2217;
        _2688 = (_2889 * _2882) + _2219;
        _2690 = (_2889 * _2884) + _2221;
        _2692 = ((_2874 * 0.039999999105930328369140625) * _2889) + _2540;
        _2694 = ((_2876 * 0.039999999105930328369140625) * _2889) + _2542;
        _2696 = ((_2878 * 0.039999999105930328369140625) * _2889) + _2544;
    }
    else
    {
        _2686 = _2217;
        _2688 = _2219;
        _2690 = _2221;
        _2692 = _2540;
        _2694 = _2542;
        _2696 = _2544;
    }
    float _4677 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4688 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4699 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2713 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2686 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _649))) + ((_2692 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2714 = ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2688 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _649))) + ((_2694 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2715 = ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2690 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _649))) + ((_2696 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    uint _2716 = _228 + 6u;
    float _2724 = _584 / cbSceneParam._m0[86u].x;
    float _2725 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2739 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, (log2((isnan(cbSceneParam._m0[77u].w) ? _505 : (isnan(_505) ? cbSceneParam._m0[77u].w : min(_505, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2741 = _2739.x;
    float _2742 = _2739.y;
    float _2743 = _2739.z;
    float _2744 = _2739.w;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_505 > cbSceneParam._m0[78u].w)
    {
        float _2778 = isnan(_505) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _505 : min(cbSceneParam._m0[80u].w, _505));
        float _2779 = _2778 / _505;
        float _2790 = _2779 * _556;
        float _2791 = _557 * _2779;
        float _2792 = (-0.0) - _2791;
        float _2794 = _2779 * _558;
        float _2796 = (cbSceneParam._m0[77u].w * _2792) / _2778;
        float _2797 = _2796 + cbSceneParam._m0[79u].w;
        float _2798 = cbSceneParam._m0[79u].w - _2791;
        float _2804 = sqrt(((_2790 * _2790) + (_2791 * _2791)) + (_2794 * _2794));
        float _2807 = (1.0 - (cbSceneParam._m0[77u].w / _2778)) * _2804;
        float _2812 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2814 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2991;
        if (abs((_2792 - _2796) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2991 = ((((_2797 > 0.0) ? exp2(_2812 * _2797) : (2.0 - exp2(_2814 * _2797))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2807;
        }
        else
        {
            float _2935 = 1.0 / cbSceneParam._m0[80u].x;
            float _2936 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : max(_2797, _2798));
            float _2937 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : min(_2797, _2798));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            _2991 = ((abs(_2804 / _2792) * cbSceneParam._m0[80u].y) * ((((_2946 - _2947) * 2.0) - ((exp2(_2812 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0)))) - exp2(_2812 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))))) * _2935)) - ((exp2(_2814 * _2946) - exp2(_2814 * _2947)) * _2935))) + (_2807 * cbSceneParam._m0[80u].z);
        }
        vec4 _2993 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, 1.0), 0.0);
        float _3002 = exp2((_2991 * (-1.44269502162933349609375)) * (1.0 - _2993.w));
        float _3003 = log2(_3002);
        float _3019 = log2(_2744);
        _2816 = (exp2(_3019 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].x)) * _2993.x) / cbSceneParam._m0[78u].x)) + _2741;
        _2818 = (exp2(_3019 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].y)) * _2993.y) / cbSceneParam._m0[78u].y)) + _2742;
        _2820 = (exp2(_3019 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].z)) * _2993.z) / cbSceneParam._m0[78u].z)) + _2743;
        _2822 = _3002 * _2744;
    }
    else
    {
        _2816 = _2741;
        _2818 = _2742;
        _2820 = _2743;
        _2822 = _2744;
    }
    bool _3029;
    vec4 _2832;
    vec4 _2854;
    float _2856;
    float _2860;
    float _2861;
    float _2862;
    float _2863;
    bool _2873;
    for (;;)
    {
        _2832 = cbMatDynParam._m0[0u];
        float _2834 = roundEven(_2832.y);
        bool _2835 = _2834 == 3.0;
        float _2836 = log2(_2822);
        float _2843 = exp2(_2836 * cbSceneParam._m0[78u].x) * _2713;
        float _2844 = exp2(_2836 * cbSceneParam._m0[78u].y) * _2714;
        float _2845 = exp2(_2836 * cbSceneParam._m0[78u].z) * _2715;
        float _2852 = _572 + (-0.5);
        _2854 = cbMtdParam._m0[1u];
        _2856 = _2854.y * _2852;
        float _2859 = (_2834 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2860 = _2859 * (_2835 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2816)));
        _2861 = _2859 * (_2835 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2818)));
        _2862 = _2859 * (_2835 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2820)));
        _2863 = _2852 * 0.999000012874603271484375;
        _2873 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2873)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2863) < 0.5)
            {
                _3029 = true;
                break;
            }
        }
        uint _2970 = _624 + uint(_2832.w);
        if ((cbInstanceData._m0[_2970].w < 1.0) && ((cbInstanceData._m0[_2970].w + _2863) < 0.5))
        {
            _3029 = true;
            break;
        }
        if ((_2856 + 1.0) < _2854.x)
        {
            _3029 = true;
            break;
        }
        _3029 = false;
        break;
    }
    float _3233;
    if (_3029)
    {
        discard_state = true;
        _3233 = 0.0;
    }
    else
    {
        _3233 = cbInstanceData._m0[_2716].w;
    }
    SV_Target.x = _2860;
    SV_Target.y = _2861;
    SV_Target.z = _2862;
    SV_Target.w = _3233;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2716].w;
    discard_exit();
}


