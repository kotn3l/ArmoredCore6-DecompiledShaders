#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1046;
float _3433;
float _3434;
float _3435;
float _3436;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3445 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    float _345 = fma(_336, _216, fma(_342, _223, _341 * _209));
    float _348 = fma(_336, _217, fma(_342, _224, _341 * _210));
    float _351 = fma(_336, _218, fma(_342, _225, _341 * _211));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _393 = _391.x;
    float _394 = 1.0 - _393;
    float _403 = (cbMtdParam._m0[19u].x + dot(vec4(_355 * _345, _355 * _348, _355 * _351, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_393 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[21u].z);
    float _3456 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _411 = (_404 * (cbMtdParam._m0[17u].x - _274)) + _274;
    float _412 = (_404 * (cbMtdParam._m0[17u].y - _275)) + _275;
    float _413 = (_404 * (cbMtdParam._m0[17u].z - _276)) + _276;
    float _418 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _438 = (_431.x * 2.0) + (-1.0);
    float _439 = (_431.y * 2.0) + (-1.0);
    float _440 = dot(vec2(_438, _439), vec2(_438, _439));
    float _3467 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _448 = ((_431.z - _418) * _404) + _418;
    float _458 = ((sqrt(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) - _336) * _404) + _336;
    float _461 = (((_438 - _341) * _404) + _341) + (cbMtdParam._m0[21u].x * _341);
    float _462 = (((_439 - _342) * _404) + _342) + (cbMtdParam._m0[21u].x * _342);
    float _467 = cbMtdParam._m0[22u].x + _320.w;
    float _470 = fma(_458, _216, fma(_462, _223, _461 * _209));
    float _473 = fma(_458, _217, fma(_462, _224, _461 * _210));
    float _476 = fma(_458, _218, fma(_462, _225, _461 * _211));
    float _480 = inversesqrt(dot(vec3(_470, _473, _476), vec3(_470, _473, _476)));
    float _481 = _480 * _470;
    float _482 = _480 * _473;
    float _483 = _480 * _476;
    float _3478 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _484 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _3489 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3500 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3511 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3522 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _502 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    vec4 _567 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _569 = _567.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _726 = sqrt(((_553 * _553) + (_554 * _554)) + (_555 * _555));
        float _732 = (cbMatDynParam._m0[5u].x * _726) + cbMatDynParam._m0[5u].y;
        float _3533 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _737 = (cbMatDynParam._m0[5u].z * _726) + cbMatDynParam._m0[5u].w;
        float _3544 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) - _733)) + _733) < ((_569 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_483, cbSceneParam._m0[5u].z, fma(_482, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _481));
    float _605 = fma(_483, cbSceneParam._m0[6u].z, fma(_482, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _481));
    float _608 = fma(_483, cbSceneParam._m0[7u].z, fma(_482, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _481));
    uint _621 = _228 + 9u;
    uint _622 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3555 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _646 = ((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * TEXCOORD_5.w) * _642.x;
    float _647 = dot(vec3(_481, _482, _483), vec3(_560, _561, _562));
    float _650 = _647 * 2.0;
    float _654 = (_650 * _481) - _560;
    float _655 = (_650 * _482) - _561;
    float _656 = (_650 * _483) - _562;
    float _660 = abs(dot(vec3(_560, _561, _562), vec3(_481, _482, _483)));
    float _3588 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _662 = sqrt(_484);
    float _675 = exp2((_662 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_662 * 3.0));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1045;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_715, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707));
        float _774 = fma(_715, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707));
        float _778 = fma(_715, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707));
        float _803 = _707 + _481;
        float _804 = _711 + _482;
        float _805 = _715 + _483;
        float _815 = fma(_805, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803)) - _770;
        float _816 = fma(_805, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803)) - _774;
        float _817 = fma(_805, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803)) - _778;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_839.x + (-0.5));
        float _875 = _873 * (_839.y + (-0.5));
        float _876 = _873 * (_839.z + (-0.5));
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_846.x + (-0.5));
        float _885 = _883 * (_846.y + (-0.5));
        float _886 = _883 * (_846.z + (-0.5));
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_853.x + (-0.5));
        float _895 = _893 * (_853.y + (-0.5));
        float _896 = _893 * (_853.z + (-0.5));
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _927 = (dot(vec3(_481, _482, _483), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _937 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3636 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_939 + 1.0))) + _944) * _907;
        float _954 = _875 * 0.5;
        float _955 = _885 * 0.5;
        float _956 = _895 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_481, _482, _483), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3669 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_981 + 1.0))) + _986) * _908;
        float _996 = _876 * 0.5;
        float _997 = _886 * 0.5;
        float _998 = _896 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_481, _482, _483), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3702 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1023 + 1.0))) + _1028) * _909;
        _1045 = _876;
        _1047 = _875;
        _1048 = _874;
        _1049 = _886;
        _1050 = _885;
        _1051 = _884;
        _1052 = _896;
        _1053 = _895;
        _1054 = _894;
        _1055 = _909;
        _1056 = _908;
        _1057 = _907;
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _1046;
        _1047 = _1046;
        _1048 = _1046;
        _1049 = _1046;
        _1050 = _1046;
        _1051 = _1046;
        _1052 = _1046;
        _1053 = _1046;
        _1054 = _1046;
        _1055 = _1046;
        _1056 = _1046;
        _1057 = _1046;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1088 = fma(_715, cbModelParam._m0[30u].z, fma(_711, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _707));
        float _1092 = fma(_715, cbModelParam._m0[31u].z, fma(_711, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _707));
        float _1096 = fma(_715, cbModelParam._m0[32u].z, fma(_711, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _707));
        float _1119 = _707 + _481;
        float _1120 = _711 + _482;
        float _1121 = _715 + _483;
        float _1131 = fma(_1121, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119)) - _1088;
        float _1132 = fma(_1121, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119)) - _1092;
        float _1133 = fma(_1121, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119)) - _1096;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1088 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1092 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[35u].z) + ((((((_1096 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1187 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1154.x + (-0.5));
        float _1189 = _1187 * (_1154.y + (-0.5));
        float _1190 = _1187 * (_1154.z + (-0.5));
        float _1197 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1161.x + (-0.5));
        float _1199 = _1197 * (_1161.y + (-0.5));
        float _1200 = _1197 * (_1161.z + (-0.5));
        float _1207 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1168.x + (-0.5));
        float _1209 = _1207 * (_1168.y + (-0.5));
        float _1210 = _1207 * (_1168.z + (-0.5));
        float _1217 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1175.x + (-0.5));
        float _1219 = _1217 * (_1175.y + (-0.5));
        float _1220 = _1217 * (_1175.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_481, _482, _483), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3765 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1251 + 1.0))) + _1256) * _1221;
        float _1266 = _1189 * 0.5;
        float _1267 = _1199 * 0.5;
        float _1268 = _1209 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_481, _482, _483), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3798 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1293 + 1.0))) + _1298) * _1222;
        float _1308 = _1190 * 0.5;
        float _1309 = _1200 * 0.5;
        float _1310 = _1210 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_481, _482, _483), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3831 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1335 + 1.0))) + _1340) * _1223;
        _1357 = _1190;
        _1358 = _1189;
        _1359 = _1188;
        _1360 = _1200;
        _1361 = _1199;
        _1362 = _1198;
        _1363 = _1210;
        _1364 = _1209;
        _1365 = _1208;
        _1366 = _1223;
        _1367 = _1222;
        _1368 = _1221;
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1046;
        _1358 = _1046;
        _1359 = _1046;
        _1360 = _1046;
        _1361 = _1046;
        _1362 = _1046;
        _1363 = _1046;
        _1364 = _1046;
        _1365 = _1046;
        _1366 = _1046;
        _1367 = _1046;
        _1368 = _1046;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1059)) + _1059;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1060)) + _1060;
    float _1404 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1381));
    float _1425 = _654 * 0.5;
    float _1426 = _655 * 0.5;
    float _1427 = _656 * 0.5;
    float _1428 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1431 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1434 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1468;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1441 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1045, _1049, _1052, _1055));
        float _1445 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1449 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1456 = dot(vec4(cbModelParam._m0[39u]), vec4(_1425, _1426, _1427, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1479;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1470 = dot(vec4(cbModelParam._m0[40u]), vec4(_1425, _1426, _1427, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1483 = (_1479 * cbModelParam._m0[1u].x) + (_1468 * (1.0 - cbModelParam._m0[1u].x));
    float _1493 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _484);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1493 : min(cbModelParam._m0[25u].z, _1493));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_715, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_715, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_715, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_656, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654));
        float _1556 = fma(_656, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654));
        float _1559 = fma(_656, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1587 = frontier_phi_17_15_ladder;
        }
        float _1811;
        if (_1556 > 0.0)
        {
            _1811 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1811 = frontier_phi_26_22_ladder;
        }
        float _2057;
        if (_1559 > 0.0)
        {
            _2057 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2057 = frontier_phi_38_33_ladder;
        }
        float _2059 = isnan(_1811) ? _1587 : (isnan(_1587) ? _1811 : min(_1587, _1811));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1553) + _1542;
        float _2065 = (_2060 * _1556) + _1546;
        float _2066 = (_2060 * _1559) + _1550;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1494);
            frontier_phi_16_38_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_16_38_ladder_2;
        _1577 = frontier_phi_16_38_ladder_1;
        _1579 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_654, _655, _656), _1494);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _484);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_715, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_715, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_715, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_656, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654));
        float _1652 = fma(_656, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654));
        float _1655 = fma(_656, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654));
        float _1816;
        if (_1649 > 0.0)
        {
            _1816 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1816 = frontier_phi_28_24_ladder;
        }
        float _2084;
        if (_1652 > 0.0)
        {
            _2084 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2084 = frontier_phi_40_35_ladder;
        }
        float _2289;
        if (_1655 > 0.0)
        {
            _2289 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2289 = frontier_phi_49_46_ladder;
        }
        float _2291 = isnan(_2084) ? _1816 : (isnan(_1816) ? _2084 : min(_1816, _2084));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1649) + _1638;
        float _2297 = (_2292 * _1652) + _1642;
        float _2298 = (_2292 * _1655) + _1646;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_25_49_ladder = _2497.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2497.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2497.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_25_49_ladder_2;
        _1676 = frontier_phi_25_49_ladder_1;
        _1678 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_654, _655, _656), _1584);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _675) * ((_662 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_675 * _662)) * _646;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1579)) + _1579);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    vec4 _1710 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_581, _582));
    float _1712 = _1710.w;
    float _1724 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1712);
    float _1725 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1712);
    float _1726 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1712);
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1740 = _646 + (-1.0);
    float _1745 = (cbLight._m0[_1733].x * _1740) + 1.0;
    float _1746 = (cbLight._m0[_1733].y * _1740) + 1.0;
    float _1747 = (cbLight._m0[_1733].z * _1740) + 1.0;
    float _1748 = (cbLight._m0[_1733].w * _1740) + 1.0;
    uint _1749 = _1732 + 5u;
    float _1755 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1759 = _1732 + 4u;
    float _1769 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1773 = _1732 | 1u;
    float _1784 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_481, _482, _483));
    float _1787 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_481, _482, _483));
    float _3967 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _3978 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1792 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1794 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.3183098733425140380859375;
    float _1801 = ((cbLight._m0[_1749].x * _1755) * _1794) + (((cbLight._m0[_1759].x * _1724) * _1769) * _1792);
    float _1802 = ((_1755 * cbLight._m0[_1749].y) * _1794) + (((cbLight._m0[_1759].y * _1725) * _1769) * _1792);
    float _1803 = ((_1755 * cbLight._m0[_1749].z) * _1794) + (((cbLight._m0[_1759].z * _1726) * _1769) * _1792);
    uvec4 _1808 = floatBitsToUint(cbLight._m0[_1732 + 12u]);
    bool _1810 = _1808.x == 0u;
    float _1821;
    float _1823;
    float _1825;
    if (_1810)
    {
        _1821 = _1801;
        _1823 = _1802;
        _1825 = _1803;
    }
    else
    {
        uint _1829 = _1732 + 6u;
        float _1845 = (dot(vec3(cbLight._m0[_1732 + 2u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3989 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1848 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1821 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1801;
        _1823 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1802;
        _1825 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1803;
    }
    bool _1828 = _1808.y == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1828)
    {
        _1866 = _1821;
        _1868 = _1823;
        _1870 = _1825;
    }
    else
    {
        uint _2028 = _1732 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1732 + 3u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4005 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2047 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1866 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1821;
        _1868 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1823;
        _1870 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1825;
    }
    uint _1873 = _1732 + 8u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _484) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1732].x + _560;
    float _1889 = cbLight._m0[_1732].y + _561;
    float _1890 = cbLight._m0[_1732].z + _562;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1732].xyz));
    float _4021 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _1902 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1903 = dot(vec3(_481, _482, _483), vec3(_1895, _1896, _1897));
    float _4043 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1895, _1896, _1897));
    float _4054 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1887 * _1887;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1887;
    float _1938 = (0.5 / (((_1902 * ((_1901 * _1927) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _1927) + _1887) * _1901))) * _1901;
    float _4065 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    uint _1954 = _1732 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _484) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1773].x + _560;
    float _1968 = cbLight._m0[_1773].y + _561;
    float _1969 = cbLight._m0[_1773].z + _562;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1773].xyz));
    float _4076 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1981 = dot(vec3(_481, _482, _483), vec3(_1974, _1975, _1976));
    float _4087 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1974, _1975, _1976));
    float _4098 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1966;
    float _2013 = (0.5 / (((_1902 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2003) + _1966) * _1980))) * _1980;
    float _4109 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2025 = (((_2002 * cbLight._m0[_1954].x) * _2015) * _1755) + ((((cbLight._m0[_1873].x * _1724) * _1926) * _1940) * _1769);
    float _2026 = (((_2002 * cbLight._m0[_1954].y) * _2015) * _1755) + ((((cbLight._m0[_1873].y * _1725) * _1926) * _1940) * _1769);
    float _2027 = (((_2002 * cbLight._m0[_1954].z) * _2015) * _1755) + ((((cbLight._m0[_1873].z * _1726) * _1926) * _1940) * _1769);
    float _2089;
    float _2091;
    float _2093;
    if (_1810)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1732 + 2u;
        uint _2099 = _1732 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _484) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _560;
        float _2116 = cbLight._m0[_2095].y + _561;
        float _2117 = cbLight._m0[_2095].z + _562;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2095].xyz));
        float _4120 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2129 = dot(vec3(_481, _482, _483), vec3(_2122, _2123, _2124));
        float _4131 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4142 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1902 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2151) + _2114) * _2128))) * _2128;
        float _4153 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2089 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _2025;
        _2091 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _2026;
        _2093 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _2027;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1828)
    {
        _2199 = _2089;
        _2201 = _2091;
        _2203 = _2093;
    }
    else
    {
        uint _2210 = _1732 + 3u;
        uint _2214 = _1732 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _484) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _560;
        float _2231 = cbLight._m0[_2210].y + _561;
        float _2232 = cbLight._m0[_2210].z + _562;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2210].xyz));
        float _4169 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2244 = dot(vec3(_481, _482, _483), vec3(_2237, _2238, _2239));
        float _4180 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4191 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_1902 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2266) + _2229) * _2243))) * _2243;
        float _4202 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2199 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2089;
        _2201 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2091;
        _2203 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2093;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1730.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
        }
        else
        {
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2671)
                {
                    frontier_phi_66_pred = _2655;
                    frontier_phi_66_pred_1 = _2660;
                    frontier_phi_66_pred_2 = _2659;
                    frontier_phi_66_pred_3 = _2658;
                    frontier_phi_66_pred_4 = _2657;
                    frontier_phi_66_pred_5 = _2656;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2657;
                    _2803 = _2658;
                    _2804 = _2659;
                    _2805 = _2660;
                    _2806 = _2670;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2661 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _2355;
                        float _2867 = _2826.y - _2356;
                        float _2868 = _2826.z - _2357;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_602, _605, _608), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4228 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2876) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _2355;
                        float _2902 = (-0.0) - _2356;
                        float _2903 = (-0.0) - _2357;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2918 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                        float _2919 = 1.0 - _662;
                        float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                        float _2927 = _2926 * _2926;
                        float _2928 = _2927 * _2927;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2939 = dot(vec3(_602, _605, _608), vec3(_2908, _2909, _2910));
                        float _4244 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2943 = dot(vec3(_602, _605, _608), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                        float _4255 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                        float _2951 = _2886 * _2927;
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2876) + _2952;
                        float _4266 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2957 = 1.0 - _2927;
                        float _2967 = (0.5 / (((_2956 * ((_2942 * _2957) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2927) * _2942))) * _2956;
                        float _4277 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2978 = (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) / ((_2950 * _2950) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2730 = (_2897 * _2845.x) + _2803;
                        _2731 = (_2897 * _2845.y) + _2804;
                        _2732 = (_2897 * _2845.z) + _2805;
                        _2727 = (_2978 * _2862.x) + _2800;
                        _2728 = (_2978 * _2862.y) + _2801;
                        _2729 = (_2978 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_66_pred = _2727;
                    frontier_phi_66_pred_1 = _2732;
                    frontier_phi_66_pred_2 = _2731;
                    frontier_phi_66_pred_3 = _2730;
                    frontier_phi_66_pred_4 = _2729;
                    frontier_phi_66_pred_5 = _2728;
                }
                _2503 = frontier_phi_66_pred;
                _2513 = frontier_phi_66_pred_1;
                _2511 = frontier_phi_66_pred_2;
                _2509 = frontier_phi_66_pred_3;
                _2507 = frontier_phi_66_pred_4;
                _2505 = frontier_phi_66_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2503;
                    _2656 = _2505;
                    _2657 = _2507;
                    _2658 = _2509;
                    _2659 = _2511;
                    _2660 = _2513;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
        }
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.z;
        uint _2519 = (_2517 >> 8u) & 15u;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((4294967295u << _2519) & _2401) == 0u)
        {
            _2623 = _2502;
            _2625 = _2504;
            _2627 = _2506;
            _2629 = _2508;
            _2631 = _2510;
            _2633 = _2512;
        }
        else
        {
            float _2648 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2649 = _2648 * _2355;
            float _2650 = _2648 * _2356;
            float _2651 = _2648 * _2357;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2519 < ((_2517 >> 12u) & 15u))
            {
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2783 = _2502;
                float _2784 = _2504;
                float _2785 = _2506;
                float _2786 = _2508;
                float _2787 = _2510;
                float _2788 = _2512;
                uint _2789 = _2519;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2799)
                    {
                        frontier_phi_77_pred = _2788;
                        frontier_phi_77_pred_1 = _2787;
                        frontier_phi_77_pred_2 = _2786;
                        frontier_phi_77_pred_3 = _2785;
                        frontier_phi_77_pred_4 = _2784;
                        frontier_phi_77_pred_5 = _2783;
                    }
                    else
                    {
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3005 = _2783;
                        float _3006 = _2784;
                        float _3007 = _2785;
                        float _3008 = _2786;
                        float _3009 = _2787;
                        float _3010 = _2788;
                        uint _3011 = _2798;
                        uint _3012;
                        vec4 _3037;
                        float _3038;
                        vec4 _3053;
                        vec3 _3065;
                        vec4 _3081;
                        vec4 _3096;
                        float _3142;
                        bool _3143;
                        for (;;)
                        {
                            uint _3022 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3011));
                            _3012 = (_3011 + 4294967295u) & _3011;
                            uint _3024 = _3022 * 40u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            _3038 = _3037.w;
                            uint _3040 = (_3022 * 40u) + 4u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3055 = (_3022 * 40u) + 8u;
                            _3065 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x));
                            uint _3068 = (_3022 * 40u) + 16u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3022 * 40u) + 20u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3098 = (_3022 * 40u) + 24u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3117 = (_3022 * 40u) + 28u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3142 = fma(_2357, _3130.z, fma(_2356, _3130.y, _3130.x * _2355)) + _3130.w;
                            _3143 = !((fma(_2357, _3111.z, fma(_2356, _3111.y, _3111.x * _2355)) + _3111.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3143)
                            {
                                float _3170 = _3037.x - _2355;
                                float _3171 = _3037.y - _2356;
                                float _3172 = _3037.z - _2357;
                                float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                                float _3176 = inversesqrt(_3173);
                                float _3177 = _3176 * _3170;
                                float _3178 = _3176 * _3171;
                                float _3179 = _3176 * _3172;
                                float _3183 = 1.0 - (_3173 / (_3038 * _3038));
                                float _4288 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3188 = sqrt(_3173) * _3053.w;
                                float _3190 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                                float _3191 = _3190 * _3190;
                                float _3194 = ((1.0 - _3191) * dot(vec3(_3177, _3178, _3179), vec3(_602, _605, _608))) + _3191;
                                float _3197 = _3188 * _3188;
                                float _3201 = (fma(_2357, _3081.z, fma(_2356, _3081.y, _3081.x * _2355)) + _3081.w) / _3142;
                                float _3202 = (fma(_2357, _3096.z, fma(_2356, _3096.y, _3096.x * _2355)) + _3096.w) / _3142;
                                float _3206 = 1.0 - dot(vec2(_3201, _3202), vec2(_3201, _3202));
                                float _4304 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3208 = _3207 * (((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3184) / ((_3197 * 0.699999988079071044921875) + 1.0));
                                float _3220 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                                float _3221 = 1.0 - _662;
                                float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                                float _3229 = _3228 * _3228;
                                float _3230 = _3229 * _3229;
                                float _3231 = _3177 - _2649;
                                float _3232 = _3178 - _2650;
                                float _3233 = _3179 - _2651;
                                float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                                float _3241 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2649, (-0.0) - _2650, (-0.0) - _2651));
                                float _4315 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3245 = dot(vec3(_602, _605, _608), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                                float _4326 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                                float _3253 = _3190 * _3229;
                                float _3254 = _3253 * _3253;
                                float _3260 = ((1.0 - _3254) * dot(vec3(_602, _605, _608), vec3(_3177, _3178, _3179))) + _3254;
                                float _4337 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3262 = 1.0 - _3229;
                                float _3272 = (0.5 / (((_3261 * ((_3244 * _3262) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3229) * _3244))) * _3261;
                                float _4348 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3282 = (_3207 * _3184) * (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) / ((_3252 * _3252) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3208 * _3053.y;
                                frontier_phi_83_pred_1 = _3208 * _3053.x;
                                frontier_phi_83_pred_2 = _3282 * _3065.z;
                                frontier_phi_83_pred_3 = _3282 * _3065.y;
                                frontier_phi_83_pred_4 = _3282 * _3065.x;
                                frontier_phi_83_pred_5 = _3208 * _3053.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3290 = frontier_phi_83_pred;
                            _3289 = frontier_phi_83_pred_1;
                            _3288 = frontier_phi_83_pred_2;
                            _3287 = frontier_phi_83_pred_3;
                            _3286 = frontier_phi_83_pred_4;
                            _3291 = frontier_phi_83_pred_5;
                            _2995 = _3289 + _3008;
                            _2996 = _3290 + _3009;
                            _2997 = _3291 + _3010;
                            _2992 = _3286 + _3005;
                            _2993 = _3287 + _3006;
                            _2994 = _3288 + _3007;
                            if (_3012 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _3012;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2997;
                        frontier_phi_77_pred_1 = _2996;
                        frontier_phi_77_pred_2 = _2995;
                        frontier_phi_77_pred_3 = _2994;
                        frontier_phi_77_pred_4 = _2993;
                        frontier_phi_77_pred_5 = _2992;
                    }
                    _2634 = frontier_phi_77_pred;
                    _2632 = frontier_phi_77_pred_1;
                    _2630 = frontier_phi_77_pred_2;
                    _2628 = frontier_phi_77_pred_3;
                    _2626 = frontier_phi_77_pred_4;
                    _2624 = frontier_phi_77_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2624;
                        _2784 = _2626;
                        _2785 = _2628;
                        _2786 = _2630;
                        _2787 = _2632;
                        _2788 = _2634;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2628;
                frontier_phi_58_59_ladder_1 = _2634;
                frontier_phi_58_59_ladder_2 = _2632;
                frontier_phi_58_59_ladder_3 = _2630;
                frontier_phi_58_59_ladder_4 = _2626;
                frontier_phi_58_59_ladder_5 = _2624;
            }
            else
            {
                frontier_phi_58_59_ladder = _2506;
                frontier_phi_58_59_ladder_1 = _2512;
                frontier_phi_58_59_ladder_2 = _2510;
                frontier_phi_58_59_ladder_3 = _2508;
                frontier_phi_58_59_ladder_4 = _2504;
                frontier_phi_58_59_ladder_5 = _2502;
            }
            _2623 = frontier_phi_58_59_ladder_5;
            _2625 = frontier_phi_58_59_ladder_4;
            _2627 = frontier_phi_58_59_ladder;
            _2629 = frontier_phi_58_59_ladder_3;
            _2631 = frontier_phi_58_59_ladder_2;
            _2633 = frontier_phi_58_59_ladder_1;
        }
        float _2638 = isnan(1.0) ? _646 : (isnan(_646) ? 1.0 : min(_646, 1.0));
        _2414 = (_2638 * _2629) + _1866;
        _2416 = (_2638 * _2631) + _1868;
        _2418 = (_2638 * _2633) + _1870;
        _2420 = ((_2623 * 0.039999999105930328369140625) * _2638) + _2199;
        _2422 = ((_2625 * 0.039999999105930328369140625) * _2638) + _2201;
        _2424 = ((_2627 * 0.039999999105930328369140625) * _2638) + _2203;
    }
    else
    {
        _2414 = _1866;
        _2416 = _1868;
        _2418 = _1870;
        _2420 = _2199;
        _2422 = _2201;
        _2424 = _2203;
    }
    float _4364 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4375 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4386 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _2441 = ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2414 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _646))) + ((_2420 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2442 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2416 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _646))) + ((_2422 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2443 = ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2418 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _646))) + ((_2424 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    uint _2444 = _228 + 6u;
    float _2452 = _581 / cbSceneParam._m0[86u].x;
    float _2453 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2467 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, (log2((isnan(cbSceneParam._m0[77u].w) ? _502 : (isnan(_502) ? cbSceneParam._m0[77u].w : min(_502, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2469 = _2467.x;
    float _2470 = _2467.y;
    float _2471 = _2467.z;
    float _2472 = _2467.w;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_502 > cbSceneParam._m0[78u].w)
    {
        float _2527 = isnan(_502) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _502 : min(cbSceneParam._m0[80u].w, _502));
        float _2528 = _2527 / _502;
        float _2539 = _2528 * _553;
        float _2540 = _554 * _2528;
        float _2541 = (-0.0) - _2540;
        float _2543 = _2528 * _555;
        float _2545 = (cbSceneParam._m0[77u].w * _2541) / _2527;
        float _2546 = _2545 + cbSceneParam._m0[79u].w;
        float _2547 = cbSceneParam._m0[79u].w - _2540;
        float _2553 = sqrt(((_2539 * _2539) + (_2540 * _2540)) + (_2543 * _2543));
        float _2556 = (1.0 - (cbSceneParam._m0[77u].w / _2527)) * _2553;
        float _2561 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2563 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2740;
        if (abs((_2541 - _2545) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2740 = ((((_2546 > 0.0) ? exp2(_2561 * _2546) : (2.0 - exp2(_2563 * _2546))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2556;
        }
        else
        {
            float _2684 = 1.0 / cbSceneParam._m0[80u].x;
            float _2685 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : max(_2546, _2547));
            float _2686 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : min(_2546, _2547));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            _2740 = ((abs(_2553 / _2541) * cbSceneParam._m0[80u].y) * ((((_2695 - _2696) * 2.0) - ((exp2(_2561 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)))) - exp2(_2561 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))))) * _2684)) - ((exp2(_2563 * _2695) - exp2(_2563 * _2696)) * _2684))) + (_2556 * cbSceneParam._m0[80u].z);
        }
        vec4 _2742 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, 1.0), 0.0);
        float _2751 = exp2((_2740 * (-1.44269502162933349609375)) * (1.0 - _2742.w));
        float _2752 = log2(_2751);
        float _2768 = log2(_2472);
        _2565 = (exp2(_2768 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].x)) * _2742.x) / cbSceneParam._m0[78u].x)) + _2469;
        _2567 = (exp2(_2768 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].y)) * _2742.y) / cbSceneParam._m0[78u].y)) + _2470;
        _2569 = (exp2(_2768 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].z)) * _2742.z) / cbSceneParam._m0[78u].z)) + _2471;
        _2571 = _2751 * _2472;
    }
    else
    {
        _2565 = _2469;
        _2567 = _2470;
        _2569 = _2471;
        _2571 = _2472;
    }
    bool _2778;
    vec4 _2581;
    vec4 _2603;
    float _2605;
    float _2609;
    float _2610;
    float _2611;
    float _2612;
    bool _2622;
    for (;;)
    {
        _2581 = cbMatDynParam._m0[0u];
        float _2583 = roundEven(_2581.y);
        bool _2584 = _2583 == 3.0;
        float _2585 = log2(_2571);
        float _2592 = exp2(_2585 * cbSceneParam._m0[78u].x) * _2441;
        float _2593 = exp2(_2585 * cbSceneParam._m0[78u].y) * _2442;
        float _2594 = exp2(_2585 * cbSceneParam._m0[78u].z) * _2443;
        float _2601 = _569 + (-0.5);
        _2603 = cbMtdParam._m0[1u];
        _2605 = _2603.y * _2601;
        float _2608 = (_2583 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2609 = _2608 * (_2584 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2565)));
        _2610 = _2608 * (_2584 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2567)));
        _2611 = _2608 * (_2584 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2569)));
        _2612 = _2601 * 0.999000012874603271484375;
        _2622 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2622)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2612) < 0.5)
            {
                _2778 = true;
                break;
            }
        }
        uint _2719 = _621 + uint(_2581.w);
        if ((cbInstanceData._m0[_2719].w < 1.0) && ((cbInstanceData._m0[_2719].w + _2612) < 0.5))
        {
            _2778 = true;
            break;
        }
        if ((_2605 + 1.0) < _2603.x)
        {
            _2778 = true;
            break;
        }
        _2778 = false;
        break;
    }
    float _2983;
    if (_2778)
    {
        discard_state = true;
        _2983 = 0.0;
    }
    else
    {
        _2983 = cbInstanceData._m0[_2444].w;
    }
    SV_Target.x = _2609;
    SV_Target.y = _2610;
    SV_Target.z = _2611;
    SV_Target.w = _2983;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2444].w;
    discard_exit();
}


