#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1130;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _339 = (_330.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_338, _339), vec2(_338, _339));
    float _3462 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    float _351 = _338 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_304.x * 2.0) + (-1.0)));
    float _352 = _339 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_304.y * 2.0) + (-1.0)));
    float _355 = fma(_346, _227, fma(_352, _234, _351 * _220));
    float _358 = fma(_346, _228, fma(_352, _235, _351 * _221));
    float _361 = fma(_346, _229, fma(_352, _236, _351 * _222));
    float _365 = inversesqrt(dot(vec3(_355, _358, _361), vec3(_355, _358, _361)));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _403 = _401.x;
    float _404 = 1.0 - _403;
    float _413 = (cbMtdParam._m0[19u].x + dot(vec4(_365 * _355, _365 * _358, _365 * _361, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_403 - _404) * cbMtdParam._m0[24u].z) + _404) * cbMtdParam._m0[21u].z);
    float _3473 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _416 = (-0.0) - cbMtdParam._m0[24u].y;
    float _418 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
    float _426 = _414 - ((_414 * TEXCOORD_8.x) * _419);
    float _427 = _414 - ((_414 * TEXCOORD_8.y) * _419);
    float _428 = _414 - ((_414 * TEXCOORD_8.z) * _419);
    float _435 = (_426 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _436 = (_427 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _437 = (_428 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _451 = _449.x;
    float _452 = 1.0 - _451;
    float _482 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_451 - _452) * cbMtdParam._m0[24u].w) + _452) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3494 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _491 = ((((cbMtdParam._m0[10u].x - _435) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _483) + _435;
    float _492 = ((((cbMtdParam._m0[10u].y - _436) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _483) + _436;
    float _493 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _437)) * _483) + _437;
    float _498 = (((_304.z - _334) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _334;
    vec4 _512 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _519 = (_512.x * 2.0) + (-1.0);
    float _520 = (_512.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3505 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _529 = ((_512.z - _498) * _426) + _498;
    float _532 = ((cbMtdParam._m0[23u].y - _529) * _483) + _529;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _557 = (_551.x * 2.0) + (-1.0);
    float _558 = (_551.y * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3516 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _574 = ((sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) - _346) * _428) + _346;
    float _577 = (((_519 - _351) * _426) + _351) + (cbMtdParam._m0[21u].x * _351);
    float _578 = (((_520 - _352) * _427) + _352) + (cbMtdParam._m0[21u].x * _352);
    float _589 = (((_557 - _577) + (_577 * cbMtdParam._m0[22u].z)) * _483) + _577;
    float _590 = (((_558 - _578) + (_578 * cbMtdParam._m0[22u].z)) * _483) + _578;
    float _591 = (_483 * (sqrt(1.0 - (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) - _574)) + _574;
    float _593 = cbMtdParam._m0[22u].x + _330.w;
    float _596 = fma(_591, _227, fma(_590, _234, _589 * _220));
    float _599 = fma(_591, _228, fma(_590, _235, _589 * _221));
    float _602 = fma(_591, _229, fma(_590, _236, _589 * _222));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3527 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _610 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3549 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3560 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3571 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _628 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _678 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _668);
    float _679 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _668);
    float _680 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _668);
    float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
    float _685 = _678 * _684;
    float _686 = _679 * _684;
    float _687 = _680 * _684;
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _715 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _718 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _721 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _735 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3582 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _759 = ((isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * TEXCOORD_5.w) * _755.x;
    float _760 = dot(vec3(_607, _608, _609), vec3(_685, _686, _687));
    float _763 = _760 * 2.0;
    float _767 = (_763 * _607) - _685;
    float _768 = (_763 * _608) - _686;
    float _769 = (_763 * _609) - _687;
    float _773 = abs(dot(vec3(_685, _686, _687), vec3(_607, _608, _609)));
    float _3615 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _775 = sqrt(_610);
    float _788 = exp2((_775 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_775 * 3.0));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _858 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _862 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _887 = _820 + _607;
        float _888 = _824 + _608;
        float _889 = _828 + _609;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _854;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _858;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _862;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_607, _608, _609), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3663 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_607, _608, _609), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3696 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_607, _608, _609), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3729 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1173 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1177 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1200 = _820 + _607;
        float _1201 = _824 + _608;
        float _1202 = _828 + _609;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_607, _608, _609), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3792 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_607, _608, _609), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3825 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_607, _608, _609), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3858 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1130;
        _1439 = _1130;
        _1440 = _1130;
        _1441 = _1130;
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1142)) + _1142;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1143)) + _1143;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _767 * 0.5;
    float _1507 = _768 * 0.5;
    float _1508 = _769 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1574 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1574 : min(cbModelParam._m0[25u].z, _1574));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_769, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767));
        float _1637 = fma(_769, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767));
        float _1640 = fma(_769, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1668 = frontier_phi_14_12_ladder;
        }
        float _1892;
        if (_1637 > 0.0)
        {
            _1892 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1892 = frontier_phi_23_19_ladder;
        }
        float _2138;
        if (_1640 > 0.0)
        {
            _2138 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2138 = frontier_phi_35_30_ladder;
        }
        float _2140 = isnan(_1892) ? _1668 : (isnan(_1668) ? _1892 : min(_1668, _1892));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1634) + _1623;
        float _2146 = (_2141 * _1637) + _1627;
        float _2147 = (_2141 * _1640) + _1631;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2148;
        float _2152 = _2148 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 > _2152) || ((_2146 < _2150) || ((_2145 < _2150) || (_2145 > _2152))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2147, cbModelParam._m0[9u].z, fma(_2146, cbModelParam._m0[9u].y, _2145 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2147, cbModelParam._m0[10u].z, fma(_2146, cbModelParam._m0[10u].y, _2145 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2147, cbModelParam._m0[11u].z, fma(_2146, cbModelParam._m0[11u].y, _2145 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_13_35_ladder = _2271.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2271.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2271.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_13_35_ladder_2;
        _1658 = frontier_phi_13_35_ladder_1;
        _1660 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_767, _768, _769), _1575);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_769, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767));
        float _1733 = fma(_769, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767));
        float _1736 = fma(_769, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767));
        float _1897;
        if (_1730 > 0.0)
        {
            _1897 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2165;
        if (_1733 > 0.0)
        {
            _2165 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2165 = frontier_phi_37_32_ladder;
        }
        float _2370;
        if (_1736 > 0.0)
        {
            _2370 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2370 = frontier_phi_46_43_ladder;
        }
        float _2372 = isnan(_2165) ? _1897 : (isnan(_1897) ? _2165 : min(_1897, _2165));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1730) + _1719;
        float _2378 = (_2373 * _1733) + _1723;
        float _2379 = (_2373 * _1736) + _1727;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2380;
        float _2383 = _2380 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2379 > _2383) || ((_2379 < _2381) || ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 < _2381) || (_2377 > _2383))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2379, cbModelParam._m0[17u].z, fma(_2378, cbModelParam._m0[17u].y, _2377 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2379, cbModelParam._m0[18u].z, fma(_2378, cbModelParam._m0[18u].y, _2377 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2379, cbModelParam._m0[19u].z, fma(_2378, cbModelParam._m0[19u].y, _2377 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_22_46_ladder = _2578.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2578.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2578.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_22_46_ladder_2;
        _1757 = frontier_phi_22_46_ladder_1;
        _1759 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_767, _768, _769), _1665);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _788) * ((_775 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_788 * _775)) * _759;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1656)) + _1656);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    vec4 _1791 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_693, _694));
    float _1793 = _1791.w;
    float _1805 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1793);
    float _1806 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1793);
    float _1807 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1793);
    uvec4 _1811 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1813 = _1811.x * 14u;
    uint _1814 = _1813 + 13u;
    float _1821 = _759 + (-1.0);
    float _1826 = (cbLight._m0[_1814].x * _1821) + 1.0;
    float _1827 = (cbLight._m0[_1814].y * _1821) + 1.0;
    float _1828 = (cbLight._m0[_1814].z * _1821) + 1.0;
    float _1829 = (cbLight._m0[_1814].w * _1821) + 1.0;
    uint _1830 = _1813 + 5u;
    float _1836 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1840 = _1813 + 4u;
    float _1850 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1854 = _1813 | 1u;
    float _1865 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_607, _608, _609));
    float _1868 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_607, _608, _609));
    float _3994 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _4005 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1873 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _1875 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.3183098733425140380859375;
    float _1882 = ((cbLight._m0[_1830].x * _1836) * _1875) + (((cbLight._m0[_1840].x * _1805) * _1850) * _1873);
    float _1883 = ((_1836 * cbLight._m0[_1830].y) * _1875) + (((cbLight._m0[_1840].y * _1806) * _1850) * _1873);
    float _1884 = ((_1836 * cbLight._m0[_1830].z) * _1875) + (((cbLight._m0[_1840].z * _1807) * _1850) * _1873);
    uvec4 _1889 = floatBitsToUint(cbLight._m0[_1813 + 12u]);
    bool _1891 = _1889.x == 0u;
    float _1902;
    float _1904;
    float _1906;
    if (_1891)
    {
        _1902 = _1882;
        _1904 = _1883;
        _1906 = _1884;
    }
    else
    {
        uint _1910 = _1813 + 6u;
        float _1926 = (dot(vec3(cbLight._m0[_1813 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _1927 = _1926 * _1926;
        float _4016 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1929 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1902 = (((cbLight._m0[_1910].x * 0.3183098733425140380859375) * _1928) * _1929) + _1882;
        _1904 = (((cbLight._m0[_1910].y * 0.3183098733425140380859375) * _1928) * _1929) + _1883;
        _1906 = (((cbLight._m0[_1910].z * 0.3183098733425140380859375) * _1928) * _1929) + _1884;
    }
    bool _1909 = _1889.y == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1909)
    {
        _1947 = _1902;
        _1949 = _1904;
        _1951 = _1906;
    }
    else
    {
        uint _2109 = _1813 + 7u;
        float _2125 = (dot(vec3(cbLight._m0[_1813 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4032 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2128 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1947 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _1902;
        _1949 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _1904;
        _1951 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _1906;
    }
    uint _1954 = _1813 + 8u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _610) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1813].x + _685;
    float _1970 = cbLight._m0[_1813].y + _686;
    float _1971 = cbLight._m0[_1813].z + _687;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1813].xyz));
    float _4048 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _1983 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1984 = dot(vec3(_607, _608, _609), vec3(_1976, _1977, _1978));
    float _4070 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_1976, _1977, _1978));
    float _4081 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1968 * _1968;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2008 = 1.0 - _1968;
    float _2019 = (0.5 / (((_1983 * ((_1982 * _2008) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2008) + _1968) * _1982))) * _1982;
    float _4092 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    uint _2035 = _1813 + 9u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _610) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1854].x + _685;
    float _2049 = cbLight._m0[_1854].y + _686;
    float _2050 = cbLight._m0[_1854].z + _687;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1854].xyz));
    float _4103 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2062 = dot(vec3(_607, _608, _609), vec3(_2055, _2056, _2057));
    float _4114 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2055, _2056, _2057));
    float _4125 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2047 * _2047;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2084 = 1.0 - _2047;
    float _2094 = (0.5 / (((_1983 * ((_2061 * _2084) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2084) + _2047) * _2061))) * _2061;
    float _4136 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    float _2106 = (((_2083 * cbLight._m0[_2035].x) * _2096) * _1836) + ((((cbLight._m0[_1954].x * _1805) * _2007) * _2021) * _1850);
    float _2107 = (((_2083 * cbLight._m0[_2035].y) * _2096) * _1836) + ((((cbLight._m0[_1954].y * _1806) * _2007) * _2021) * _1850);
    float _2108 = (((_2083 * cbLight._m0[_2035].z) * _2096) * _1836) + ((((cbLight._m0[_1954].z * _1807) * _2007) * _2021) * _1850);
    float _2170;
    float _2172;
    float _2174;
    if (_1891)
    {
        _2170 = _2106;
        _2172 = _2107;
        _2174 = _2108;
    }
    else
    {
        uint _2176 = _1813 + 2u;
        uint _2180 = _1813 + 10u;
        float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _610) * 0.949999988079071044921875);
        float _2195 = _2194 * _2194;
        float _2196 = cbLight._m0[_2176].x + _685;
        float _2197 = cbLight._m0[_2176].y + _686;
        float _2198 = cbLight._m0[_2176].z + _687;
        float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
        float _2203 = _2202 * _2196;
        float _2204 = _2202 * _2197;
        float _2205 = _2202 * _2198;
        float _2206 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2176].xyz));
        float _4147 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2210 = dot(vec3(_607, _608, _609), vec3(_2203, _2204, _2205));
        float _4158 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2214 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2203, _2204, _2205));
        float _4169 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2218 = _2195 * _2195;
        float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
        float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2232 = 1.0 - _2195;
        float _2242 = (0.5 / (((_1983 * ((_2209 * _2232) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2232) + _2195) * _2209))) * _2209;
        float _4180 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2244 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
        float _2245 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2170 = (((_2231 * cbLight._m0[_2180].x) * _2244) * _2245) + _2106;
        _2172 = (((_2231 * cbLight._m0[_2180].y) * _2244) * _2245) + _2107;
        _2174 = (((_2231 * cbLight._m0[_2180].z) * _2244) * _2245) + _2108;
    }
    float _2280;
    float _2282;
    float _2284;
    if (_1909)
    {
        _2280 = _2170;
        _2282 = _2172;
        _2284 = _2174;
    }
    else
    {
        uint _2291 = _1813 + 3u;
        uint _2295 = _1813 + 11u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _610) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _685;
        float _2312 = cbLight._m0[_2291].y + _686;
        float _2313 = cbLight._m0[_2291].z + _687;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2291].xyz));
        float _4196 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2325 = dot(vec3(_607, _608, _609), vec3(_2318, _2319, _2320));
        float _4207 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4218 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2346 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2347 = 1.0 - _2310;
        float _2357 = (0.5 / (((_1983 * ((_2324 * _2347) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_1983 * _2347) + _2310) * _2324))) * _2324;
        float _4229 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2280 = (((_2346 * cbLight._m0[_2295].x) * _2359) * _2360) + _2170;
        _2282 = (((_2346 * cbLight._m0[_2295].y) * _2359) * _2360) + _2172;
        _2284 = (((_2346 * cbLight._m0[_2295].z) * _2359) * _2360) + _2174;
    }
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_1811.y == 0u)
    {
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2435;
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2435;
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2435;
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.x;
        uint _2462 = uint((float(_2450.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2451))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2451)));
        float _2472 = (log2(_2438 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2473 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        uint _2476 = uint(isnan(14.0) ? _2473 : (isnan(_2473) ? 14.0 : min(_2473, 14.0)));
        uvec4 _2481 = texelFetch(g_lightClusterGridBuffer, int(((_2476 << 2u) + (_2462 << 6u)) >> 2u));
        uint _2482 = _2481.x;
        uint _2483 = _2450.z;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((((1u << ((_2483 >> 4u) & 15u)) + 4294967295u) & _2482) == 0u) || ((_2483 & 240u) == 0u))
        {
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
        }
        else
        {
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            uint _2733 = 0u;
            uint _2742;
            bool _2743;
            for (;;)
            {
                _2742 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                _2743 = _2742 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2743)
                {
                    frontier_phi_61_pred = _2727;
                    frontier_phi_61_pred_1 = _2732;
                    frontier_phi_61_pred_2 = _2731;
                    frontier_phi_61_pred_3 = _2730;
                    frontier_phi_61_pred_4 = _2729;
                    frontier_phi_61_pred_5 = _2728;
                }
                else
                {
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    uint _2857;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2742;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    for (;;)
                    {
                        uint _2861 = uint(findLSB(_2857)) + (_2733 << 5u);
                        uint _2858 = (_2857 + 4294967295u) & _2857;
                        uint _2863 = _2861 * 48u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2883 = (_2861 * 48u) + 4u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2902 = (_2861 * 48u) + 8u;
                        vec3 _2913 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x));
                        float _2917 = _2877.x - _2436;
                        float _2918 = _2877.y - _2437;
                        float _2919 = _2877.z - _2438;
                        float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                        float _2923 = inversesqrt(_2920);
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2927 = dot(vec3(_715, _718, _721), vec3(_2924, _2925, _2926));
                        float _2932 = 1.0 - (_2920 * _2877.w);
                        float _4255 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2934 = sqrt(_2920) * _2896.w;
                        float _2937 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2927) + _2938;
                        float _2944 = _2934 * _2934;
                        float _2948 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2933) / ((_2944 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _2436;
                        float _2953 = (-0.0) - _2437;
                        float _2954 = (-0.0) - _2438;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2969 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                        float _2970 = 1.0 - _775;
                        float _2977 = sqrt(1.0 - ((1.0 - (_2970 * _2970)) * (1.0 - (_2969 * _2969))));
                        float _2978 = _2977 * _2977;
                        float _2979 = _2978 * _2978;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2990 = dot(vec3(_715, _718, _721), vec3(_2959, _2960, _2961));
                        float _4271 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2994 = dot(vec3(_715, _718, _721), vec3(_2986 * _2980, _2986 * _2981, _2986 * _2982));
                        float _4282 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _3001 = ((_2997 * _2997) * (_2979 + (-1.0))) + 1.0;
                        float _3002 = _2937 * _2978;
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2927) + _3003;
                        float _4293 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3008 = 1.0 - _2978;
                        float _3018 = (0.5 / (((_3007 * ((_2993 * _3008) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_3007 * _3008) + _2978) * _2993))) * _3007;
                        float _4304 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3029 = (((_2979 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3001 * _3001) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125))) * _2933;
                        _2786 = (_2948 * _2896.x) + _2854;
                        _2787 = (_2948 * _2896.y) + _2855;
                        _2788 = (_2948 * _2896.z) + _2856;
                        _2783 = (_3029 * _2913.x) + _2851;
                        _2784 = (_3029 * _2913.y) + _2852;
                        _2785 = (_3029 * _2913.z) + _2853;
                        if (_2858 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2858;
                        }
                    }
                    frontier_phi_61_pred = _2783;
                    frontier_phi_61_pred_1 = _2788;
                    frontier_phi_61_pred_2 = _2787;
                    frontier_phi_61_pred_3 = _2786;
                    frontier_phi_61_pred_4 = _2785;
                    frontier_phi_61_pred_5 = _2784;
                }
                _2584 = frontier_phi_61_pred;
                _2594 = frontier_phi_61_pred_1;
                _2592 = frontier_phi_61_pred_2;
                _2590 = frontier_phi_61_pred_3;
                _2588 = frontier_phi_61_pred_4;
                _2586 = frontier_phi_61_pred_5;
                uint _2734 = _2733 + 1u;
                if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2727 = _2584;
                    _2728 = _2586;
                    _2729 = _2588;
                    _2730 = _2590;
                    _2731 = _2592;
                    _2732 = _2594;
                    _2733 = _2734;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
        }
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.z;
        uint _2600 = (_2598 >> 8u) & 15u;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((4294967295u << _2600) & _2482) == 0u)
        {
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
            _2705 = _2593;
        }
        else
        {
            float _2720 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
            float _2721 = _2720 * _2436;
            float _2722 = _2720 * _2437;
            float _2723 = _2720 * _2438;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2600 < ((_2598 >> 12u) & 15u))
            {
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2834 = _2583;
                float _2835 = _2585;
                float _2836 = _2587;
                float _2837 = _2589;
                float _2838 = _2591;
                float _2839 = _2593;
                uint _2840 = _2600;
                uint _2849;
                bool _2850;
                for (;;)
                {
                    _2849 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                    _2850 = _2849 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2850)
                    {
                        frontier_phi_67_pred = _2837;
                        frontier_phi_67_pred_1 = _2838;
                        frontier_phi_67_pred_2 = _2839;
                        frontier_phi_67_pred_3 = _2836;
                        frontier_phi_67_pred_4 = _2835;
                        frontier_phi_67_pred_5 = _2834;
                    }
                    else
                    {
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        uint _3053 = _2849;
                        uint _3054;
                        vec4 _3079;
                        float _3080;
                        vec4 _3095;
                        vec3 _3107;
                        vec4 _3123;
                        vec4 _3138;
                        float _3184;
                        bool _3185;
                        for (;;)
                        {
                            uint _3064 = ((_2840 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3053));
                            _3054 = (_3053 + 4294967295u) & _3053;
                            uint _3066 = _3064 * 40u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            _3080 = _3079.w;
                            uint _3082 = (_3064 * 40u) + 4u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3064 * 40u) + 8u;
                            _3107 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x));
                            uint _3110 = (_3064 * 40u) + 16u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3064 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3064 * 40u) + 24u;
                            vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3159 = (_3064 * 40u) + 28u;
                            vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3184 = fma(_2438, _3172.z, fma(_2437, _3172.y, _3172.x * _2436)) + _3172.w;
                            _3185 = !((fma(_2438, _3153.z, fma(_2437, _3153.y, _3153.x * _2436)) + _3153.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3185)
                            {
                                float _3212 = _3079.x - _2436;
                                float _3213 = _3079.y - _2437;
                                float _3214 = _3079.z - _2438;
                                float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                                float _3218 = inversesqrt(_3215);
                                float _3219 = _3218 * _3212;
                                float _3220 = _3218 * _3213;
                                float _3221 = _3218 * _3214;
                                float _3225 = 1.0 - (_3215 / (_3080 * _3080));
                                float _4315 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3230 = sqrt(_3215) * _3095.w;
                                float _3232 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                                float _3233 = _3232 * _3232;
                                float _3236 = ((1.0 - _3233) * dot(vec3(_3219, _3220, _3221), vec3(_715, _718, _721))) + _3233;
                                float _3239 = _3230 * _3230;
                                float _3243 = (fma(_2438, _3123.z, fma(_2437, _3123.y, _3123.x * _2436)) + _3123.w) / _3184;
                                float _3244 = (fma(_2438, _3138.z, fma(_2437, _3138.y, _3138.x * _2436)) + _3138.w) / _3184;
                                float _3248 = 1.0 - dot(vec2(_3243, _3244), vec2(_3243, _3244));
                                float _4331 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3250 = _3249 * (((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3226) / ((_3239 * 0.699999988079071044921875) + 1.0));
                                float _3262 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                                float _3263 = 1.0 - _775;
                                float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                                float _3271 = _3270 * _3270;
                                float _3272 = _3271 * _3271;
                                float _3273 = _3219 - _2721;
                                float _3274 = _3220 - _2722;
                                float _3275 = _3221 - _2723;
                                float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                                float _3283 = dot(vec3(_715, _718, _721), vec3((-0.0) - _2721, (-0.0) - _2722, (-0.0) - _2723));
                                float _4342 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3287 = dot(vec3(_715, _718, _721), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                                float _4353 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                                float _3295 = _3232 * _3271;
                                float _3296 = _3295 * _3295;
                                float _3302 = ((1.0 - _3296) * dot(vec3(_715, _718, _721), vec3(_3219, _3220, _3221))) + _3296;
                                float _4364 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3304 = 1.0 - _3271;
                                float _3314 = (0.5 / (((_3303 * ((_3286 * _3304) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3271) * _3286))) * _3303;
                                float _4375 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3324 = (_3249 * _3226) * (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3294 * _3294) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3324 * _3107.x;
                                frontier_phi_73_pred_1 = _3324 * _3107.y;
                                frontier_phi_73_pred_2 = _3250 * _3095.z;
                                frontier_phi_73_pred_3 = _3250 * _3095.y;
                                frontier_phi_73_pred_4 = _3250 * _3095.x;
                                frontier_phi_73_pred_5 = _3324 * _3107.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3328 = frontier_phi_73_pred;
                            _3329 = frontier_phi_73_pred_1;
                            _3333 = frontier_phi_73_pred_2;
                            _3332 = frontier_phi_73_pred_3;
                            _3331 = frontier_phi_73_pred_4;
                            _3330 = frontier_phi_73_pred_5;
                            _3037 = _3331 + _3050;
                            _3038 = _3332 + _3051;
                            _3039 = _3333 + _3052;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3036 = _3330 + _3049;
                            if (_3054 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3054;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3037;
                        frontier_phi_67_pred_1 = _3038;
                        frontier_phi_67_pred_2 = _3039;
                        frontier_phi_67_pred_3 = _3036;
                        frontier_phi_67_pred_4 = _3035;
                        frontier_phi_67_pred_5 = _3034;
                    }
                    _2702 = frontier_phi_67_pred;
                    _2704 = frontier_phi_67_pred_1;
                    _2706 = frontier_phi_67_pred_2;
                    _2700 = frontier_phi_67_pred_3;
                    _2698 = frontier_phi_67_pred_4;
                    _2696 = frontier_phi_67_pred_5;
                    uint _2841 = _2840 + 1u;
                    if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2834 = _2696;
                        _2835 = _2698;
                        _2836 = _2700;
                        _2837 = _2702;
                        _2838 = _2704;
                        _2839 = _2706;
                        _2840 = _2841;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2704;
                frontier_phi_55_56_ladder_1 = _2706;
                frontier_phi_55_56_ladder_2 = _2702;
                frontier_phi_55_56_ladder_3 = _2700;
                frontier_phi_55_56_ladder_4 = _2698;
                frontier_phi_55_56_ladder_5 = _2696;
            }
            else
            {
                frontier_phi_55_56_ladder = _2591;
                frontier_phi_55_56_ladder_1 = _2593;
                frontier_phi_55_56_ladder_2 = _2589;
                frontier_phi_55_56_ladder_3 = _2587;
                frontier_phi_55_56_ladder_4 = _2585;
                frontier_phi_55_56_ladder_5 = _2583;
            }
            _2695 = frontier_phi_55_56_ladder_5;
            _2697 = frontier_phi_55_56_ladder_4;
            _2699 = frontier_phi_55_56_ladder_3;
            _2701 = frontier_phi_55_56_ladder_2;
            _2703 = frontier_phi_55_56_ladder;
            _2705 = frontier_phi_55_56_ladder_1;
        }
        float _2710 = isnan(1.0) ? _759 : (isnan(_759) ? 1.0 : min(_759, 1.0));
        _2495 = (_2710 * _2701) + _1947;
        _2497 = (_2710 * _2703) + _1949;
        _2499 = (_2710 * _2705) + _1951;
        _2501 = ((_2695 * 0.039999999105930328369140625) * _2710) + _2280;
        _2503 = ((_2697 * 0.039999999105930328369140625) * _2710) + _2282;
        _2505 = ((_2699 * 0.039999999105930328369140625) * _2710) + _2284;
    }
    else
    {
        _2495 = _1947;
        _2497 = _1949;
        _2499 = _1951;
        _2501 = _2280;
        _2503 = _2282;
        _2505 = _2284;
    }
    float _4391 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4402 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4413 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    uint _2525 = _239 + 6u;
    float _2533 = _693 / cbSceneParam._m0[86u].x;
    float _2534 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2548 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, (log2((isnan(cbSceneParam._m0[77u].w) ? _628 : (isnan(_628) ? cbSceneParam._m0[77u].w : min(_628, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2550 = _2548.x;
    float _2551 = _2548.y;
    float _2552 = _2548.z;
    float _2553 = _2548.w;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_628 > cbSceneParam._m0[78u].w)
    {
        float _2608 = isnan(_628) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _628 : min(cbSceneParam._m0[80u].w, _628));
        float _2609 = _2608 / _628;
        float _2620 = _2609 * _678;
        float _2621 = _679 * _2609;
        float _2622 = (-0.0) - _2621;
        float _2623 = _2609 * _680;
        float _2625 = (cbSceneParam._m0[77u].w * _2622) / _2608;
        float _2626 = _2625 + cbSceneParam._m0[79u].w;
        float _2627 = cbSceneParam._m0[79u].w - _2621;
        float _2633 = sqrt(((_2620 * _2620) + (_2621 * _2621)) + (_2623 * _2623));
        float _2636 = (1.0 - (cbSceneParam._m0[77u].w / _2608)) * _2633;
        float _2641 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2643 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2622 - _2625) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2626 > 0.0) ? exp2(_2641 * _2626) : (2.0 - exp2(_2643 * _2626))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2636;
        }
        else
        {
            float _2756 = 1.0 / cbSceneParam._m0[80u].x;
            float _2757 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : max(_2626, _2627));
            float _2758 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : min(_2626, _2627));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            _2796 = ((abs(_2633 / _2622) * cbSceneParam._m0[80u].y) * ((((_2767 - _2768) * 2.0) - ((exp2(_2641 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)))) - exp2(_2641 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))))) * _2756)) - ((exp2(_2643 * _2767) - exp2(_2643 * _2768)) * _2756))) + (_2636 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2553);
        _2645 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2550;
        _2647 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2551;
        _2649 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2552;
        _2651 = _2807 * _2553;
    }
    else
    {
        _2645 = _2550;
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
    }
    float _2663 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2664 = _2663 == 3.0;
    float _2665 = log2(_2651);
    float _2672 = exp2(_2665 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2495 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _759))) + ((_2501 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2673 = exp2(_2665 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2497 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _759))) + ((_2503 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2674 = exp2(_2665 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2499 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _759))) + ((_2505 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2683 = (_2663 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2683 * (_2664 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.y = _2683 * (_2664 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.z = _2683 * (_2664 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.w = cbInstanceData._m0[_2525].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2525].w;
}


