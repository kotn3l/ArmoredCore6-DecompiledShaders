#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1285;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3872 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _384) + _453;
    float _465 = ((((_432.x - _451) * _384) + _451) * 2.0) + (-1.0);
    float _467 = ((((_432.y - _452) * _384) + _452) * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3883 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _501 = (((_489.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _465;
    float _502 = (((_489.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _505 = fma(_473, _237, fma(_502, _244, _501 * _230));
    float _508 = fma(_473, _238, fma(_502, _245, _501 * _231));
    float _511 = fma(_473, _239, fma(_502, _246, _501 * _232));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _551 = ((_546 - _547) * cbMtdParam._m0[24u].z) + _547;
    float _553 = (cbMtdParam._m0[19u].x + dot(vec4(_515 * _505, _515 * _508, _515 * _511, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_551 * cbMtdParam._m0[21u].z);
    float _3894 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _556 = (-0.0) - cbMtdParam._m0[24u].y;
    float _558 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
    float _566 = _554 - ((_554 * TEXCOORD_8.x) * _559);
    float _567 = _554 - ((_554 * TEXCOORD_8.y) * _559);
    float _568 = _554 - ((_554 * TEXCOORD_8.z) * _559);
    float _575 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _579 = ((isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : min(_575, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _587 = (_579 - (((_551 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _579))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3925 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _592 = ((_566 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) * _588) + _391;
    float _593 = ((_567 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) * _588) + _392;
    float _594 = ((_568 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) * _588) + _393;
    vec4 _606 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _636 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_608 - _609) * cbMtdParam._m0[24u].w) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3936 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _645 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _637) + _592;
    float _646 = ((((cbMtdParam._m0[10u].y - _593) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _637) + _593;
    float _647 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _594)) * _637) + _594;
    float _651 = (cbMtdParam._m0[19u].w * (_489.z - _462)) + _462;
    vec4 _665 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _672 = (_665.x * 2.0) + (-1.0);
    float _673 = (_665.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3947 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _683 = (((_665.z - _651) * _566) * _588) + _651;
    float _686 = ((cbMtdParam._m0[23u].y - _683) * _637) + _683;
    vec4 _705 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3958 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _733 = (((cbMtdParam._m0[21u].x * _501) + ((_672 - _501) * _566)) * _588) + _501;
    float _734 = (((cbMtdParam._m0[21u].x * _502) + ((_673 - _502) * _567)) * _588) + _502;
    float _735 = (((sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) - _473) * _568) * _588) + _473;
    float _746 = (((_711 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _637) + _733;
    float _747 = (((_712 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _637) + _734;
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) - _735) * _637) + _735;
    float _750 = cbMtdParam._m0[22u].x + _489.w;
    float _753 = fma(_748, _237, fma(_747, _244, _746 * _230));
    float _756 = fma(_748, _238, fma(_747, _245, _746 * _231));
    float _759 = fma(_748, _239, fma(_747, _246, _746 * _232));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3969 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _767 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3991 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4002 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4013 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _870 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _873 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _876 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _890 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _896 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_890].x;
    float _897 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_890].y;
    float _898 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_890].z;
    float _4024 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    vec4 _910 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _914 = ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * TEXCOORD_5.w) * _910.x;
    float _915 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _918 = _915 * 2.0;
    float _922 = (_918 * _764) - _843;
    float _923 = (_918 * _765) - _844;
    float _924 = (_918 * _766) - _845;
    float _928 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _4057 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _930 = sqrt(_767);
    float _943 = exp2((_930 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_930 * 3.0));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_983, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975));
        float _1013 = fma(_983, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975));
        float _1017 = fma(_983, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975));
        float _1042 = _975 + _764;
        float _1043 = _979 + _765;
        float _1044 = _983 + _766;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1009;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1013;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1017;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_764, _765, _766), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4105 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_764, _765, _766), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4138 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_764, _765, _766), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4171 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_983, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975));
        float _1328 = fma(_983, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975));
        float _1332 = fma(_983, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975));
        float _1355 = _975 + _764;
        float _1356 = _979 + _765;
        float _1357 = _983 + _766;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_764, _765, _766), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4234 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_764, _765, _766), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4267 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_764, _765, _766), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4300 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1285;
        _1594 = _1285;
        _1595 = _1285;
        _1596 = _1285;
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1299)) + _1299;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _922 * 0.5;
    float _1662 = _923 * 0.5;
    float _1663 = _924 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_983, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_983, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_983, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_924, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922));
        float _1791 = fma(_924, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922));
        float _1794 = fma(_924, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1822 = frontier_phi_14_12_ladder;
        }
        float _1991;
        if (_1791 > 0.0)
        {
            _1991 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1991 = frontier_phi_23_19_ladder;
        }
        float _2286;
        if (_1794 > 0.0)
        {
            _2286 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2286 = frontier_phi_35_30_ladder;
        }
        float _2288 = isnan(_1991) ? _1822 : (isnan(_1822) ? _1991 : min(_1822, _1991));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1788) + _1777;
        float _2294 = (_2289 * _1791) + _1781;
        float _2295 = (_2289 * _1794) + _1785;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2296;
        float _2300 = _2296 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 > _2300) || ((_2294 < _2298) || ((_2293 < _2298) || (_2293 > _2300))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_13_35_ladder = _2440.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2440.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2440.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_13_35_ladder_2;
        _1812 = frontier_phi_13_35_ladder_1;
        _1814 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_922, _923, _924), _1730);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_983, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_983, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_983, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_924, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922));
        float _1886 = fma(_924, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922));
        float _1889 = fma(_924, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922));
        float _1996;
        if (_1883 > 0.0)
        {
            _1996 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1996 = frontier_phi_25_21_ladder;
        }
        float _2313;
        if (_1886 > 0.0)
        {
            _2313 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2313 = frontier_phi_37_32_ladder;
        }
        float _2640;
        if (_1889 > 0.0)
        {
            _2640 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2640 = frontier_phi_47_44_ladder;
        }
        float _2642 = isnan(_2313) ? _1996 : (isnan(_1996) ? _2313 : min(_1996, _2313));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _1883) + _1872;
        float _2648 = (_2643 * _1886) + _1876;
        float _2649 = (_2643 * _1889) + _1880;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_22_47_ladder = _2767.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2767.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2767.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_22_47_ladder_2;
        _1910 = frontier_phi_22_47_ladder_1;
        _1912 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_922, _923, _924), _1819);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1924 = ((((1.0 - _943) * ((_930 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_943 * _930)) * _914;
    float _1925 = _1924 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1926 = _1924 * ((cbModelParam._m0[1u].w * (_1910 - _1812)) + _1812);
    float _1927 = _1924 * ((cbModelParam._m0[1u].w * (_1912 - _1814)) + _1814);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1983 = _1970 / _1982;
    float _1984 = _1974 / _1982;
    float _1985 = _1978 / _1982;
    float _2132;
    float _2133;
    float _2134;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2012 = ((uint(_1985 > cbSceneParam._m0[59u].y) + uint(_1985 > cbSceneParam._m0[59u].x)) + uint(_1985 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2013 = _2012 + 43u;
        uint _2021 = _2012 + 44u;
        uint _2029 = _2012 + 45u;
        uint _2037 = _2012 + 46u;
        float _2048 = fma(_1982, cbSceneParam._m0[_2013].w, fma(_1978, cbSceneParam._m0[_2013].z, fma(_1974, cbSceneParam._m0[_2013].y, _1970 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1982, cbSceneParam._m0[_2021].w, fma(_1978, cbSceneParam._m0[_2021].z, fma(_1974, cbSceneParam._m0[_2021].y, _1970 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1982, cbSceneParam._m0[_2037].w, fma(_1978, cbSceneParam._m0[_2037].z, fma(_1974, cbSceneParam._m0[_2037].y, _1970 * cbSceneParam._m0[_2037].x)));
        float _2065 = cbSceneParam._m0[33u].z * _2060;
        float _2067 = cbSceneParam._m0[33u].w * _2060;
        float _2070 = fma(_1982, cbSceneParam._m0[_2029].w, fma(_1978, cbSceneParam._m0[_2029].z, fma(_1974, cbSceneParam._m0[_2029].y, _1970 * cbSceneParam._m0[_2029].x))) / _2060;
        float _2118 = (cbSceneParam._m0[33u].x - sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985))) * cbSceneParam._m0[33u].y;
        float _4426 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2125 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2048) / _2060, (_2067 + _2052) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 + _2048) / _2060, (_2052 - _2065) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 - _2065) / _2060, (_2052 - _2067) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 - _2067) / _2060, (_2065 + _2052) / _2060), _2070), 0.0)).x), vec4(0.25)));
        _2132 = 1.0 - (_2125 * cbSceneParam._m0[34u].x);
        _2133 = 1.0 - (_2125 * cbSceneParam._m0[34u].y);
        _2134 = 1.0 - (_2125 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2132 = 1.0;
        _2133 = 1.0;
        _2134 = 1.0;
    }
    float _2198;
    float _2200;
    float _2202;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2186 = fma(_1982, cbSceneParam._m0[63u].w, fma(_1978, cbSceneParam._m0[63u].z, fma(_1974, cbSceneParam._m0[63u].y, _1970 * cbSceneParam._m0[63u].x)));
        float _2187 = fma(_1982, cbSceneParam._m0[60u].w, fma(_1978, cbSceneParam._m0[60u].z, fma(_1974, cbSceneParam._m0[60u].y, _1970 * cbSceneParam._m0[60u].x))) / _2186;
        float _2188 = fma(_1982, cbSceneParam._m0[61u].w, fma(_1978, cbSceneParam._m0[61u].z, fma(_1974, cbSceneParam._m0[61u].y, _1970 * cbSceneParam._m0[61u].x))) / _2186;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2187 >= cbSceneParam._m0[64u].x) && (_2188 >= cbSceneParam._m0[64u].y)) && (_2187 <= cbSceneParam._m0[64u].z)) && (_2188 <= cbSceneParam._m0[64u].w))
        {
            float _2326 = fma(_1982, cbSceneParam._m0[62u].w, fma(_1978, cbSceneParam._m0[62u].z, fma(_1974, cbSceneParam._m0[62u].y, _1970 * cbSceneParam._m0[62u].x))) / _2186;
            float _2330 = isnan(cbSceneParam._m0[41u].w) ? _2326 : (isnan(_2326) ? cbSceneParam._m0[41u].w : max(_2326, cbSceneParam._m0[41u].w));
            float _2373 = (cbSceneParam._m0[33u].x - sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985))) * cbSceneParam._m0[33u].y;
            float _4442 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
            float _2380 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2187, cbSceneParam._m0[33u].w + _2188), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2187, _2188 - cbSceneParam._m0[33u].z), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2187 - cbSceneParam._m0[33u].z, _2188 - cbSceneParam._m0[33u].w), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2187 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2188), _2330), 0.0)).x), vec4(0.25)));
            float _2384 = 1.0 - (_2380 * cbSceneParam._m0[34u].x);
            float _2385 = 1.0 - (_2380 * cbSceneParam._m0[34u].y);
            float _2386 = 1.0 - (_2380 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_34_33_ladder_1 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
            frontier_phi_34_33_ladder_2 = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
        }
        else
        {
            frontier_phi_34_33_ladder = _2134;
            frontier_phi_34_33_ladder_1 = _2133;
            frontier_phi_34_33_ladder_2 = _2132;
        }
        _2198 = frontier_phi_34_33_ladder_2;
        _2200 = frontier_phi_34_33_ladder_1;
        _2202 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2198 = _2132;
        _2200 = _2133;
        _2202 = _2134;
    }
    uvec4 _2207 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2209 = _2207.x * 14u;
    uint _2210 = _2209 + 13u;
    float _2217 = _914 + (-1.0);
    float _2222 = (cbLight._m0[_2210].x * _2217) + 1.0;
    float _2223 = (cbLight._m0[_2210].y * _2217) + 1.0;
    float _2224 = (cbLight._m0[_2210].z * _2217) + 1.0;
    float _2225 = (cbLight._m0[_2210].w * _2217) + 1.0;
    uint _2226 = _2209 + 5u;
    float _2232 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2236 = _2209 + 4u;
    float _2245 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2249 = _2209 | 1u;
    float _2260 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_764, _765, _766));
    float _2263 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_764, _765, _766));
    float _4478 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _4489 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2268 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2270 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2277 = ((cbLight._m0[_2226].x * _2232) * _2270) + (((cbLight._m0[_2236].x * _2198) * _2245) * _2268);
    float _2278 = ((_2232 * cbLight._m0[_2226].y) * _2270) + (((cbLight._m0[_2236].y * _2200) * _2245) * _2268);
    float _2279 = ((_2232 * cbLight._m0[_2226].z) * _2270) + (((cbLight._m0[_2236].z * _2202) * _2245) * _2268);
    uvec4 _2283 = floatBitsToUint(cbLight._m0[_2209 + 12u]);
    bool _2285 = _2283.x == 0u;
    float _2387;
    float _2389;
    float _2391;
    if (_2285)
    {
        _2387 = _2277;
        _2389 = _2278;
        _2391 = _2279;
    }
    else
    {
        uint _2395 = _2209 + 6u;
        float _2411 = (dot(vec3(cbLight._m0[_2209 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4500 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2414 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2387 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2277;
        _2389 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2278;
        _2391 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2279;
    }
    bool _2394 = _2283.y == 0u;
    float _2449;
    float _2451;
    float _2453;
    if (_2394)
    {
        _2449 = _2387;
        _2451 = _2389;
        _2453 = _2391;
    }
    else
    {
        uint _2611 = _2209 + 7u;
        float _2627 = (dot(vec3(cbLight._m0[_2209 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2628 = _2627 * _2627;
        float _4516 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2629 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2630 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2449 = (((cbLight._m0[_2611].x * 0.3183098733425140380859375) * _2629) * _2630) + _2387;
        _2451 = (((cbLight._m0[_2611].y * 0.3183098733425140380859375) * _2629) * _2630) + _2389;
        _2453 = (((cbLight._m0[_2611].z * 0.3183098733425140380859375) * _2629) * _2630) + _2391;
    }
    uint _2456 = _2209 + 8u;
    float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _767) * 0.949999988079071044921875);
    float _2470 = _2469 * _2469;
    float _2471 = cbLight._m0[_2209].x + _843;
    float _2472 = cbLight._m0[_2209].y + _844;
    float _2473 = cbLight._m0[_2209].z + _845;
    float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
    float _2478 = _2477 * _2471;
    float _2479 = _2477 * _2472;
    float _2480 = _2477 * _2473;
    float _2481 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2209].xyz));
    float _4532 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2485 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2486 = dot(vec3(_764, _765, _766), vec3(_2478, _2479, _2480));
    float _4554 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2478, _2479, _2480));
    float _4565 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2470 * _2470;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2509 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2510 = 1.0 - _2470;
    float _2521 = (0.5 / (((_2485 * ((_2484 * _2510) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2510) + _2470) * _2484))) * _2484;
    float _4576 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2523 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    uint _2537 = _2209 + 9u;
    float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _767) * 0.949999988079071044921875);
    float _2549 = _2548 * _2548;
    float _2550 = cbLight._m0[_2249].x + _843;
    float _2551 = cbLight._m0[_2249].y + _844;
    float _2552 = cbLight._m0[_2249].z + _845;
    float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
    float _2557 = _2556 * _2550;
    float _2558 = _2556 * _2551;
    float _2559 = _2556 * _2552;
    float _2560 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2249].xyz));
    float _4587 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2564 = dot(vec3(_764, _765, _766), vec3(_2557, _2558, _2559));
    float _4598 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2568 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2557, _2558, _2559));
    float _4609 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = _2549 * _2549;
    float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
    float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2586 = 1.0 - _2549;
    float _2596 = (0.5 / (((_2485 * ((_2563 * _2586) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2586) + _2549) * _2563))) * _2563;
    float _4620 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
    float _2608 = (((_2585 * cbLight._m0[_2537].x) * _2598) * _2232) + ((((cbLight._m0[_2456].x * _2198) * _2509) * _2523) * _2245);
    float _2609 = (((_2585 * cbLight._m0[_2537].y) * _2598) * _2232) + ((((cbLight._m0[_2456].y * _2200) * _2509) * _2523) * _2245);
    float _2610 = (((_2585 * cbLight._m0[_2537].z) * _2598) * _2232) + ((((cbLight._m0[_2456].z * _2202) * _2509) * _2523) * _2245);
    float _2666;
    float _2668;
    float _2670;
    if (_2285)
    {
        _2666 = _2608;
        _2668 = _2609;
        _2670 = _2610;
    }
    else
    {
        uint _2672 = _2209 + 2u;
        uint _2676 = _2209 + 10u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _767) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _843;
        float _2693 = cbLight._m0[_2672].y + _844;
        float _2694 = cbLight._m0[_2672].z + _845;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2672].xyz));
        float _4631 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2706 = dot(vec3(_764, _765, _766), vec3(_2699, _2700, _2701));
        float _4642 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4653 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2727 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2728 = 1.0 - _2691;
        float _2738 = (0.5 / (((_2485 * ((_2705 * _2728) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2728) + _2691) * _2705))) * _2705;
        float _4664 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2740 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2741 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2666 = (((_2727 * cbLight._m0[_2676].x) * _2740) * _2741) + _2608;
        _2668 = (((_2727 * cbLight._m0[_2676].y) * _2740) * _2741) + _2609;
        _2670 = (((_2727 * cbLight._m0[_2676].z) * _2740) * _2741) + _2610;
    }
    float _2772;
    float _2774;
    float _2776;
    if (_2394)
    {
        _2772 = _2666;
        _2774 = _2668;
        _2776 = _2670;
    }
    else
    {
        uint _2783 = _2209 + 3u;
        uint _2787 = _2209 + 11u;
        float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2783].w)) * _767) * 0.949999988079071044921875);
        float _2802 = _2801 * _2801;
        float _2803 = cbLight._m0[_2783].x + _843;
        float _2804 = cbLight._m0[_2783].y + _844;
        float _2805 = cbLight._m0[_2783].z + _845;
        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
        float _2810 = _2809 * _2803;
        float _2811 = _2809 * _2804;
        float _2812 = _2809 * _2805;
        float _2813 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2783].xyz));
        float _4680 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2817 = dot(vec3(_764, _765, _766), vec3(_2810, _2811, _2812));
        float _4691 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2821 = dot(vec3(cbLight._m0[_2783].xyz), vec3(_2810, _2811, _2812));
        float _4702 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2825 = _2802 * _2802;
        float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
        float _2838 = (exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2839 = 1.0 - _2802;
        float _2849 = (0.5 / (((_2485 * ((_2816 * _2839) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2839) + _2802) * _2816))) * _2816;
        float _4713 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2772 = (((_2838 * cbLight._m0[_2787].x) * _2851) * _2852) + _2666;
        _2774 = (((_2838 * cbLight._m0[_2787].y) * _2851) * _2852) + _2668;
        _2776 = (((_2838 * cbLight._m0[_2787].z) * _2851) * _2852) + _2670;
    }
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_2207.y == 0u)
    {
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.x;
        uint _2885 = uint((float(_2873.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2874))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2874)));
        float _2895 = (log2(_1985 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2896 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        uint _2899 = uint(isnan(14.0) ? _2896 : (isnan(_2896) ? 14.0 : min(_2896, 14.0)));
        uvec4 _2904 = texelFetch(g_lightClusterGridBuffer, int(((_2899 << 2u) + (_2885 << 6u)) >> 2u));
        uint _2905 = _2904.x;
        uint _2906 = _2873.z;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((((1u << ((_2906 >> 4u) & 15u)) + 4294967295u) & _2905) == 0u) || ((_2906 & 240u) == 0u))
        {
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
        }
        else
        {
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3144;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3135 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _1983;
                        float _3320 = _3279.y - _1984;
                        float _3321 = _3279.z - _1985;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_870, _873, _876), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4739 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _1983;
                        float _3355 = (-0.0) - _1984;
                        float _3356 = (-0.0) - _1985;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3370 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _930;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3361 + _3326;
                        float _3382 = _3362 + _3327;
                        float _3383 = _3363 + _3328;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_870, _873, _876), vec3(_3361, _3362, _3363));
                        float _4755 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3395 = dot(vec3(_870, _873, _876), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4766 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3339 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3329) + _3404;
                        float _4777 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4788 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3402 * _3402) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3188 = (_3350 * _3298.x) + _3256;
                        _3189 = (_3350 * _3298.y) + _3257;
                        _3190 = (_3350 * _3298.z) + _3258;
                        _3185 = (_3430 * _3315.x) + _3253;
                        _3186 = (_3430 * _3315.y) + _3254;
                        _3187 = (_3430 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_66_pred = _3190;
                    frontier_phi_66_pred_1 = _3189;
                    frontier_phi_66_pred_2 = _3188;
                    frontier_phi_66_pred_3 = _3187;
                    frontier_phi_66_pred_4 = _3186;
                    frontier_phi_66_pred_5 = _3185;
                }
                _2996 = frontier_phi_66_pred;
                _2994 = frontier_phi_66_pred_1;
                _2992 = frontier_phi_66_pred_2;
                _2990 = frontier_phi_66_pred_3;
                _2988 = frontier_phi_66_pred_4;
                _2986 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2986;
                    _3130 = _2988;
                    _3131 = _2990;
                    _3132 = _2992;
                    _3133 = _2994;
                    _3134 = _2996;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
        }
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.z;
        uint _3002 = (_3000 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _3002) & _2905) == 0u)
        {
            _3097 = _2985;
            _3099 = _2987;
            _3101 = _2989;
            _3103 = _2991;
            _3105 = _2993;
            _3107 = _2995;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
            float _3123 = _3122 * _1983;
            float _3124 = _3122 * _1984;
            float _3125 = _3122 * _1985;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3002 < ((_3000 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3236 = _2985;
                float _3237 = _2987;
                float _3238 = _2989;
                float _3239 = _2991;
                float _3240 = _2993;
                float _3241 = _2995;
                uint _3242 = _3002;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3252)
                    {
                        frontier_phi_72_pred = _3241;
                        frontier_phi_72_pred_1 = _3240;
                        frontier_phi_72_pred_2 = _3239;
                        frontier_phi_72_pred_3 = _3238;
                        frontier_phi_72_pred_4 = _3237;
                        frontier_phi_72_pred_5 = _3236;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3448 = _3236;
                        float _3449 = _3237;
                        float _3450 = _3238;
                        float _3451 = _3239;
                        float _3452 = _3240;
                        float _3453 = _3241;
                        uint _3454 = _3251;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3523;
                        vec4 _3539;
                        float _3585;
                        bool _3586;
                        for (;;)
                        {
                            uint _3465 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3510 = (_3465 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3526 = (_3465 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3465 * 40u) + 24u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3560 = (_3465 * 40u) + 28u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3585 = fma(_1985, _3573.z, fma(_1984, _3573.y, _3573.x * _1983)) + _3573.w;
                            _3586 = !((fma(_1985, _3554.z, fma(_1984, _3554.y, _3554.x * _1983)) + _3554.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3586)
                            {
                                float _3613 = _3480.x - _1983;
                                float _3614 = _3480.y - _1984;
                                float _3615 = _3480.z - _1985;
                                float _3616 = dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615));
                                float _3619 = inversesqrt(_3616);
                                float _3620 = _3619 * _3613;
                                float _3621 = _3619 * _3614;
                                float _3622 = _3619 * _3615;
                                float _3626 = 1.0 - (_3616 / (_3481 * _3481));
                                float _4799 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3631 = sqrt(_3616) * _3496.w;
                                float _3633 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                                float _3634 = _3633 * _3633;
                                float _3637 = ((1.0 - _3634) * dot(vec3(_3620, _3621, _3622), vec3(_870, _873, _876))) + _3634;
                                float _3640 = _3631 * _3631;
                                float _3644 = (fma(_1985, _3523.z, fma(_1984, _3523.y, _3523.x * _1983)) + _3523.w) / _3585;
                                float _3645 = (fma(_1985, _3539.z, fma(_1984, _3539.y, _3539.x * _1983)) + _3539.w) / _3585;
                                float _3649 = 1.0 - dot(vec2(_3644, _3645), vec2(_3644, _3645));
                                float _4815 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3651 = _3650 * (((isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0))) * _3627) / ((_3640 * 0.699999988079071044921875) + 1.0));
                                float _3663 = exp2(log2(1.0 / ((_3640 * 3.5) + 5.0)) * 0.25);
                                float _3664 = 1.0 - _930;
                                float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                                float _3672 = _3671 * _3671;
                                float _3673 = _3672 * _3672;
                                float _3674 = _3620 - _3123;
                                float _3675 = _3621 - _3124;
                                float _3676 = _3622 - _3125;
                                float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                                float _3684 = dot(vec3(_870, _873, _876), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4826 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3688 = dot(vec3(_870, _873, _876), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                                float _4837 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                                float _3696 = _3633 * _3672;
                                float _3697 = _3696 * _3696;
                                float _3703 = ((1.0 - _3697) * dot(vec3(_870, _873, _876), vec3(_3620, _3621, _3622))) + _3697;
                                float _4848 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3705 = 1.0 - _3672;
                                float _3715 = (0.5 / (((_3704 * ((_3687 * _3705) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3672) * _3687))) * _3704;
                                float _4859 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3725 = (_3650 * _3627) * (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3695 * _3695) * ((_3640 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3651 * _3496.y;
                                frontier_phi_78_pred_1 = _3651 * _3496.x;
                                frontier_phi_78_pred_2 = _3725 * _3508.z;
                                frontier_phi_78_pred_3 = _3725 * _3508.y;
                                frontier_phi_78_pred_4 = _3725 * _3508.x;
                                frontier_phi_78_pred_5 = _3651 * _3496.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3733 = frontier_phi_78_pred;
                            _3732 = frontier_phi_78_pred_1;
                            _3731 = frontier_phi_78_pred_2;
                            _3730 = frontier_phi_78_pred_3;
                            _3729 = frontier_phi_78_pred_4;
                            _3734 = frontier_phi_78_pred_5;
                            _3438 = _3732 + _3451;
                            _3439 = _3733 + _3452;
                            _3440 = _3734 + _3453;
                            _3435 = _3729 + _3448;
                            _3436 = _3730 + _3449;
                            _3437 = _3731 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3440;
                        frontier_phi_72_pred_1 = _3439;
                        frontier_phi_72_pred_2 = _3438;
                        frontier_phi_72_pred_3 = _3437;
                        frontier_phi_72_pred_4 = _3436;
                        frontier_phi_72_pred_5 = _3435;
                    }
                    _3108 = frontier_phi_72_pred;
                    _3106 = frontier_phi_72_pred_1;
                    _3104 = frontier_phi_72_pred_2;
                    _3102 = frontier_phi_72_pred_3;
                    _3100 = frontier_phi_72_pred_4;
                    _3098 = frontier_phi_72_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3098;
                        _3237 = _3100;
                        _3238 = _3102;
                        _3239 = _3104;
                        _3240 = _3106;
                        _3241 = _3108;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3108;
                frontier_phi_60_61_ladder_1 = _3106;
                frontier_phi_60_61_ladder_2 = _3102;
                frontier_phi_60_61_ladder_3 = _3100;
                frontier_phi_60_61_ladder_4 = _3098;
                frontier_phi_60_61_ladder_5 = _3104;
            }
            else
            {
                frontier_phi_60_61_ladder = _2995;
                frontier_phi_60_61_ladder_1 = _2993;
                frontier_phi_60_61_ladder_2 = _2989;
                frontier_phi_60_61_ladder_3 = _2987;
                frontier_phi_60_61_ladder_4 = _2985;
                frontier_phi_60_61_ladder_5 = _2991;
            }
            _3097 = frontier_phi_60_61_ladder_4;
            _3099 = frontier_phi_60_61_ladder_3;
            _3101 = frontier_phi_60_61_ladder_2;
            _3103 = frontier_phi_60_61_ladder_5;
            _3105 = frontier_phi_60_61_ladder_1;
            _3107 = frontier_phi_60_61_ladder;
        }
        float _3112 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
        _2918 = (_3112 * _3103) + _2449;
        _2920 = (_3112 * _3105) + _2451;
        _2922 = (_3112 * _3107) + _2453;
        _2924 = ((_3097 * 0.039999999105930328369140625) * _3112) + _2772;
        _2926 = ((_3099 * 0.039999999105930328369140625) * _3112) + _2774;
        _2928 = ((_3101 * 0.039999999105930328369140625) * _3112) + _2776;
    }
    else
    {
        _2918 = _2449;
        _2920 = _2451;
        _2922 = _2453;
        _2924 = _2772;
        _2926 = _2774;
        _2928 = _2776;
    }
    float _4875 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4886 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4897 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    uint _2948 = _249 + 6u;
    float _2956 = _851 / cbSceneParam._m0[86u].x;
    float _2957 = _852 / cbSceneParam._m0[86u].y;
    vec4 _2971 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2973 = _2971.x;
    float _2974 = _2971.y;
    float _2975 = _2971.z;
    float _2976 = _2971.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _3010 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _3011 = _3010 / _785;
        float _3022 = _3011 * _836;
        float _3023 = _837 * _3011;
        float _3024 = (-0.0) - _3023;
        float _3025 = _3011 * _838;
        float _3027 = (cbSceneParam._m0[77u].w * _3024) / _3010;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3023;
        float _3035 = sqrt(((_3022 * _3022) + (_3023 * _3023)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3010)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3198;
        if (abs((_3024 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3198 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3160 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3198 = ((abs(_3035 / _3024) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3045 * _3169) - exp2(_3045 * _3170)) * _3158))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3200 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, 1.0), 0.0);
        float _3209 = exp2((_3198 * (-1.44269502162933349609375)) * (1.0 - _3200.w));
        float _3210 = log2(_3209);
        float _3226 = log2(_2976);
        _3047 = (exp2(_3226 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].x)) * _3200.x) / cbSceneParam._m0[78u].x)) + _2973;
        _3049 = (exp2(_3226 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].y)) * _3200.y) / cbSceneParam._m0[78u].y)) + _2974;
        _3051 = (exp2(_3226 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].z)) * _3200.z) / cbSceneParam._m0[78u].z)) + _2975;
        _3053 = _3209 * _2976;
    }
    else
    {
        _3047 = _2973;
        _3049 = _2974;
        _3051 = _2975;
        _3053 = _2976;
    }
    float _3065 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3066 = _3065 == 3.0;
    float _3067 = log2(_3053);
    float _3074 = exp2(_3067 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2918 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _914))) + ((_2924 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _3075 = exp2(_3067 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2920 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _914))) + ((_2926 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _3076 = exp2(_3067 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2922 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _914))) + ((_2928 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _3085 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3085 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
    SV_Target.y = _3085 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
    SV_Target.z = _3085 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
    SV_Target.w = cbInstanceData._m0[_2948].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2948].w;
}


