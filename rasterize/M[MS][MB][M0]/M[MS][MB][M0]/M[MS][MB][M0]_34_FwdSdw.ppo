#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3745 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    float _359 = fma(_350, _231, fma(_356, _238, _355 * _224));
    float _362 = fma(_350, _232, fma(_356, _239, _355 * _225));
    float _365 = fma(_350, _233, fma(_356, _240, _355 * _226));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _407 = _405.x;
    float _408 = 1.0 - _407;
    float _415 = ((_407 - _408) * cbMtdParam._m0[24u].z) + _408;
    float _417 = (cbMtdParam._m0[19u].x + dot(vec4(_369 * _359, _369 * _362, _369 * _365, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_415 * cbMtdParam._m0[21u].z);
    float _3756 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _420 = (-0.0) - cbMtdParam._m0[24u].y;
    float _422 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
    float _430 = _418 - ((_418 * TEXCOORD_8.x) * _423);
    float _431 = _418 - ((_418 * TEXCOORD_8.y) * _423);
    float _432 = _418 - ((_418 * TEXCOORD_8.z) * _423);
    float _439 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _443 = ((isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : min(_439, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _451 = (_443 - (((_415 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _443))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3787 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _456 = ((_430 * (cbMtdParam._m0[17u].x - _288)) * _452) + _288;
    float _457 = ((_431 * (cbMtdParam._m0[17u].y - _289)) * _452) + _289;
    float _458 = ((_432 * (cbMtdParam._m0[17u].z - _290)) * _452) + _290;
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _472 = _470.x;
    float _473 = 1.0 - _472;
    float _502 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_472 - _473) * cbMtdParam._m0[24u].w) + _473) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3798 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _511 = ((((cbMtdParam._m0[10u].x - _456) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _503) + _456;
    float _512 = ((((cbMtdParam._m0[10u].y - _457) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _503) + _457;
    float _513 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _458)) * _503) + _458;
    float _518 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3809 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _550 = (((_532.z - _518) * _430) * _452) + _518;
    float _553 = ((cbMtdParam._m0[23u].y - _550) * _503) + _550;
    vec4 _572 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _578 = (_572.x * 2.0) + (-1.0);
    float _579 = (_572.y * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3820 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _600 = (((cbMtdParam._m0[21u].x * _355) + ((_539 - _355) * _430)) * _452) + _355;
    float _601 = (((cbMtdParam._m0[21u].x * _356) + ((_540 - _356) * _431)) * _452) + _356;
    float _602 = (((sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _350) * _432) * _452) + _350;
    float _613 = (((_578 - _600) + (_600 * cbMtdParam._m0[22u].z)) * _503) + _600;
    float _614 = (((_579 - _601) + (_601 * cbMtdParam._m0[22u].z)) * _503) + _601;
    float _615 = ((sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) - _602) * _503) + _602;
    float _617 = cbMtdParam._m0[22u].x + _334.w;
    float _620 = fma(_615, _231, fma(_614, _238, _613 * _224));
    float _623 = fma(_615, _232, fma(_614, _239, _613 * _225));
    float _626 = fma(_615, _233, fma(_614, _240, _613 * _226));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3831 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _634 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3853 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3864 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3875 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _742 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _745 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _759 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3886 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _783 = ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * TEXCOORD_5.w) * _779.x;
    float _784 = dot(vec3(_631, _632, _633), vec3(_709, _710, _711));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _631) - _709;
    float _792 = (_787 * _632) - _710;
    float _793 = (_787 * _633) - _711;
    float _797 = abs(dot(vec3(_709, _710, _711), vec3(_631, _632, _633)));
    float _3919 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_634);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _882 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _886 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _911 = _844 + _631;
        float _912 = _848 + _632;
        float _913 = _852 + _633;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_631, _632, _633), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3967 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_631, _632, _633), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _4000 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_631, _632, _633), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4033 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1197 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1201 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1224 = _844 + _631;
        float _1225 = _848 + _632;
        float _1226 = _852 + _633;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_631, _632, _633), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4096 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_631, _632, _633), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4129 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_631, _632, _633), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4162 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1154;
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _791 * 0.5;
    float _1531 = _792 * 0.5;
    float _1532 = _793 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1661 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1664 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1863;
        if (_1661 > 0.0)
        {
            _1863 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1863 = frontier_phi_23_19_ladder;
        }
        float _2159;
        if (_1664 > 0.0)
        {
            _2159 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2159 = frontier_phi_35_30_ladder;
        }
        float _2161 = isnan(_1863) ? _1692 : (isnan(_1692) ? _1863 : min(_1692, _1863));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1658) + _1647;
        float _2167 = (_2162 * _1661) + _1651;
        float _2168 = (_2162 * _1664) + _1655;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2169;
        float _2173 = _2169 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 > _2173) || ((_2167 < _2171) || ((_2166 < _2171) || (_2166 > _2173))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2168, cbModelParam._m0[9u].z, fma(_2167, cbModelParam._m0[9u].y, _2166 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2168, cbModelParam._m0[10u].z, fma(_2167, cbModelParam._m0[10u].y, _2166 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2168, cbModelParam._m0[11u].z, fma(_2167, cbModelParam._m0[11u].y, _2166 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_13_35_ladder = _2313.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2313.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2313.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1599);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1743 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1747 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1751 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1754 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1757 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1760 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1868;
        if (_1754 > 0.0)
        {
            _1868 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1868 = frontier_phi_25_21_ladder;
        }
        float _2186;
        if (_1757 > 0.0)
        {
            _2186 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2186 = frontier_phi_37_32_ladder;
        }
        float _2513;
        if (_1760 > 0.0)
        {
            _2513 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2513 = frontier_phi_47_44_ladder;
        }
        float _2515 = isnan(_2186) ? _1868 : (isnan(_1868) ? _2186 : min(_1868, _2186));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1754) + _1743;
        float _2521 = (_2516 * _1757) + _1747;
        float _2522 = (_2516 * _1760) + _1751;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_47_ladder = _2640.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2640.x * cbModelParam._m0[1u].z;
        }
        _1779 = frontier_phi_22_47_ladder_2;
        _1781 = frontier_phi_22_47_ladder_1;
        _1783 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1689);
        _1779 = _1763.x * cbModelParam._m0[1u].z;
        _1781 = _1763.y * cbModelParam._m0[1u].z;
        _1783 = _1763.z * cbModelParam._m0[1u].z;
    }
    float _1795 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1796 = _1795 * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1797 = _1795 * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1798 = _1795 * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, _1796 * cbSceneParam._m0[91u].x));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1846 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1850 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1854 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1855 = _1842 / _1854;
    float _1856 = _1846 / _1854;
    float _1857 = _1850 / _1854;
    float _2004;
    float _2005;
    float _2006;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1884 = ((uint(_1857 > cbSceneParam._m0[59u].y) + uint(_1857 > cbSceneParam._m0[59u].x)) + uint(_1857 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1885 = _1884 + 43u;
        uint _1893 = _1884 + 44u;
        uint _1901 = _1884 + 45u;
        uint _1909 = _1884 + 46u;
        float _1920 = fma(_1854, cbSceneParam._m0[_1885].w, fma(_1850, cbSceneParam._m0[_1885].z, fma(_1846, cbSceneParam._m0[_1885].y, _1842 * cbSceneParam._m0[_1885].x)));
        float _1924 = fma(_1854, cbSceneParam._m0[_1893].w, fma(_1850, cbSceneParam._m0[_1893].z, fma(_1846, cbSceneParam._m0[_1893].y, _1842 * cbSceneParam._m0[_1893].x)));
        float _1932 = fma(_1854, cbSceneParam._m0[_1909].w, fma(_1850, cbSceneParam._m0[_1909].z, fma(_1846, cbSceneParam._m0[_1909].y, _1842 * cbSceneParam._m0[_1909].x)));
        float _1937 = cbSceneParam._m0[33u].z * _1932;
        float _1939 = cbSceneParam._m0[33u].w * _1932;
        float _1942 = fma(_1854, cbSceneParam._m0[_1901].w, fma(_1850, cbSceneParam._m0[_1901].z, fma(_1846, cbSceneParam._m0[_1901].y, _1842 * cbSceneParam._m0[_1901].x))) / _1932;
        float _1990 = (cbSceneParam._m0[33u].x - sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857))) * cbSceneParam._m0[33u].y;
        float _4288 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1997 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 + _1920) / _1932, (_1939 + _1924) / _1932), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 + _1920) / _1932, (_1924 - _1937) / _1932), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1920 - _1937) / _1932, (_1924 - _1939) / _1932), _1942), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1920 - _1939) / _1932, (_1937 + _1924) / _1932), _1942), 0.0)).x), vec4(0.25)));
        _2004 = 1.0 - (_1997 * cbSceneParam._m0[34u].x);
        _2005 = 1.0 - (_1997 * cbSceneParam._m0[34u].y);
        _2006 = 1.0 - (_1997 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2004 = 1.0;
        _2005 = 1.0;
        _2006 = 1.0;
    }
    float _2070;
    float _2072;
    float _2074;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2058 = fma(_1854, cbSceneParam._m0[63u].w, fma(_1850, cbSceneParam._m0[63u].z, fma(_1846, cbSceneParam._m0[63u].y, _1842 * cbSceneParam._m0[63u].x)));
        float _2059 = fma(_1854, cbSceneParam._m0[60u].w, fma(_1850, cbSceneParam._m0[60u].z, fma(_1846, cbSceneParam._m0[60u].y, _1842 * cbSceneParam._m0[60u].x))) / _2058;
        float _2060 = fma(_1854, cbSceneParam._m0[61u].w, fma(_1850, cbSceneParam._m0[61u].z, fma(_1846, cbSceneParam._m0[61u].y, _1842 * cbSceneParam._m0[61u].x))) / _2058;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2059 >= cbSceneParam._m0[64u].x) && (_2060 >= cbSceneParam._m0[64u].y)) && (_2059 <= cbSceneParam._m0[64u].z)) && (_2060 <= cbSceneParam._m0[64u].w))
        {
            float _2199 = fma(_1854, cbSceneParam._m0[62u].w, fma(_1850, cbSceneParam._m0[62u].z, fma(_1846, cbSceneParam._m0[62u].y, _1842 * cbSceneParam._m0[62u].x))) / _2058;
            float _2203 = isnan(cbSceneParam._m0[41u].w) ? _2199 : (isnan(_2199) ? cbSceneParam._m0[41u].w : max(_2199, cbSceneParam._m0[41u].w));
            float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857))) * cbSceneParam._m0[33u].y;
            float _4304 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
            float _2253 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2059, cbSceneParam._m0[33u].w + _2060), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2059, _2060 - cbSceneParam._m0[33u].z), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2059 - cbSceneParam._m0[33u].z, _2060 - cbSceneParam._m0[33u].w), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2059 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2060), _2203), 0.0)).x), vec4(0.25)));
            float _2257 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
            float _2258 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
            float _2259 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2259) ? _2006 : (isnan(_2006) ? _2259 : min(_2006, _2259));
            frontier_phi_34_33_ladder_1 = isnan(_2258) ? _2005 : (isnan(_2005) ? _2258 : min(_2005, _2258));
            frontier_phi_34_33_ladder_2 = isnan(_2257) ? _2004 : (isnan(_2004) ? _2257 : min(_2004, _2257));
        }
        else
        {
            frontier_phi_34_33_ladder = _2006;
            frontier_phi_34_33_ladder_1 = _2005;
            frontier_phi_34_33_ladder_2 = _2004;
        }
        _2070 = frontier_phi_34_33_ladder_2;
        _2072 = frontier_phi_34_33_ladder_1;
        _2074 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2070 = _2004;
        _2072 = _2005;
        _2074 = _2006;
    }
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _783 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2118 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2122 = _2081 | 1u;
    float _2133 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_631, _632, _633));
    float _2136 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_631, _632, _633));
    float _4340 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _4351 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2141 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2143 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2150 = ((cbLight._m0[_2098].x * _2104) * _2143) + (((cbLight._m0[_2108].x * _2070) * _2118) * _2141);
    float _2151 = ((_2104 * cbLight._m0[_2098].y) * _2143) + (((cbLight._m0[_2108].y * _2072) * _2118) * _2141);
    float _2152 = ((_2104 * cbLight._m0[_2098].z) * _2143) + (((cbLight._m0[_2108].z * _2074) * _2118) * _2141);
    uvec4 _2156 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2158 = _2156.x == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2158)
    {
        _2260 = _2150;
        _2262 = _2151;
        _2264 = _2152;
    }
    else
    {
        uint _2268 = _2081 + 6u;
        float _2284 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2285 = _2284 * _2284;
        float _4362 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2286 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2287 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2260 = (((cbLight._m0[_2268].x * 0.3183098733425140380859375) * _2286) * _2287) + _2150;
        _2262 = (((cbLight._m0[_2268].y * 0.3183098733425140380859375) * _2286) * _2287) + _2151;
        _2264 = (((cbLight._m0[_2268].z * 0.3183098733425140380859375) * _2286) * _2287) + _2152;
    }
    bool _2267 = _2156.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2267)
    {
        _2322 = _2260;
        _2324 = _2262;
        _2326 = _2264;
    }
    else
    {
        uint _2484 = _2081 + 7u;
        float _2500 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4378 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2503 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2322 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2260;
        _2324 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2262;
        _2326 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2264;
    }
    uint _2329 = _2081 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _634) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2081].x + _709;
    float _2345 = cbLight._m0[_2081].y + _710;
    float _2346 = cbLight._m0[_2081].z + _711;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2081].xyz));
    float _4394 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2358 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2359 = dot(vec3(_631, _632, _633), vec3(_2351, _2352, _2353));
    float _4416 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2351, _2352, _2353));
    float _4427 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2383 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2358 * ((_2357 * _2383) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2383) + _2343) * _2357))) * _2357;
    float _4438 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2410 = _2081 + 9u;
    float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _634) * 0.949999988079071044921875);
    float _2422 = _2421 * _2421;
    float _2423 = cbLight._m0[_2122].x + _709;
    float _2424 = cbLight._m0[_2122].y + _710;
    float _2425 = cbLight._m0[_2122].z + _711;
    float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
    float _2430 = _2429 * _2423;
    float _2431 = _2429 * _2424;
    float _2432 = _2429 * _2425;
    float _2433 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2122].xyz));
    float _4449 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2437 = dot(vec3(_631, _632, _633), vec3(_2430, _2431, _2432));
    float _4460 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2430, _2431, _2432));
    float _4471 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2422 * _2422;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2422;
    float _2469 = (0.5 / (((_2358 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2459) + _2422) * _2436))) * _2436;
    float _4482 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    float _2481 = (((_2458 * cbLight._m0[_2410].x) * _2471) * _2104) + ((((cbLight._m0[_2329].x * _2070) * _2382) * _2396) * _2118);
    float _2482 = (((_2458 * cbLight._m0[_2410].y) * _2471) * _2104) + ((((cbLight._m0[_2329].y * _2072) * _2382) * _2396) * _2118);
    float _2483 = (((_2458 * cbLight._m0[_2410].z) * _2471) * _2104) + ((((cbLight._m0[_2329].z * _2074) * _2382) * _2396) * _2118);
    float _2539;
    float _2541;
    float _2543;
    if (_2158)
    {
        _2539 = _2481;
        _2541 = _2482;
        _2543 = _2483;
    }
    else
    {
        uint _2545 = _2081 + 2u;
        uint _2549 = _2081 + 10u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _634) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _709;
        float _2566 = cbLight._m0[_2545].y + _710;
        float _2567 = cbLight._m0[_2545].z + _711;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2545].xyz));
        float _4493 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2579 = dot(vec3(_631, _632, _633), vec3(_2572, _2573, _2574));
        float _4504 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4515 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2600 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2601 = 1.0 - _2564;
        float _2611 = (0.5 / (((_2358 * ((_2578 * _2601) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2601) + _2564) * _2578))) * _2578;
        float _4526 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2539 = (((_2600 * cbLight._m0[_2549].x) * _2613) * _2614) + _2481;
        _2541 = (((_2600 * cbLight._m0[_2549].y) * _2613) * _2614) + _2482;
        _2543 = (((_2600 * cbLight._m0[_2549].z) * _2613) * _2614) + _2483;
    }
    float _2645;
    float _2647;
    float _2649;
    if (_2267)
    {
        _2645 = _2539;
        _2647 = _2541;
        _2649 = _2543;
    }
    else
    {
        uint _2656 = _2081 + 3u;
        uint _2660 = _2081 + 11u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _634) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _709;
        float _2677 = cbLight._m0[_2656].y + _710;
        float _2678 = cbLight._m0[_2656].z + _711;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2656].xyz));
        float _4542 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2690 = dot(vec3(_631, _632, _633), vec3(_2683, _2684, _2685));
        float _4553 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4564 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2711 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2712 = 1.0 - _2675;
        float _2722 = (0.5 / (((_2358 * ((_2689 * _2712) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2712) + _2675) * _2689))) * _2689;
        float _4575 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2645 = (((_2711 * cbLight._m0[_2660].x) * _2724) * _2725) + _2539;
        _2647 = (((_2711 * cbLight._m0[_2660].y) * _2724) * _2725) + _2541;
        _2649 = (((_2711 * cbLight._m0[_2660].z) * _2724) * _2725) + _2543;
    }
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_2079.y == 0u)
    {
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.x;
        uint _2758 = uint((float(_2746.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2747))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2747)));
        float _2768 = (log2(_1857 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2769 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        uint _2772 = uint(isnan(14.0) ? _2769 : (isnan(_2769) ? 14.0 : min(_2769, 14.0)));
        uvec4 _2777 = texelFetch(g_lightClusterGridBuffer, int(((_2772 << 2u) + (_2758 << 6u)) >> 2u));
        uint _2778 = _2777.x;
        uint _2779 = _2746.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2779 >> 4u) & 15u)) + 4294967295u) & _2778) == 0u) || ((_2779 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3018)
                {
                    frontier_phi_66_pred = _3007;
                    frontier_phi_66_pred_1 = _3006;
                    frontier_phi_66_pred_2 = _3005;
                    frontier_phi_66_pred_3 = _3004;
                    frontier_phi_66_pred_4 = _3003;
                    frontier_phi_66_pred_5 = _3002;
                }
                else
                {
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    uint _3132;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3017;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3136 = uint(findLSB(_3132)) + (_3008 << 5u);
                        uint _3133 = (_3132 + 4294967295u) & _3132;
                        uint _3138 = _3136 * 48u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3158 = (_3136 * 48u) + 4u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3177 = (_3136 * 48u) + 8u;
                        vec3 _3188 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x));
                        float _3192 = _3152.x - _1855;
                        float _3193 = _3152.y - _1856;
                        float _3194 = _3152.z - _1857;
                        float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                        float _3198 = inversesqrt(_3195);
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3202 = dot(vec3(_739, _742, _745), vec3(_3199, _3200, _3201));
                        float _3207 = 1.0 - (_3195 * _3152.w);
                        float _4601 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3209 = sqrt(_3195) * _3171.w;
                        float _3212 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3202) + _3213;
                        float _3219 = _3209 * _3209;
                        float _3223 = ((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3208) / ((_3219 * 0.699999988079071044921875) + 1.0);
                        float _3227 = (-0.0) - _1855;
                        float _3228 = (-0.0) - _1856;
                        float _3229 = (-0.0) - _1857;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3243 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _799;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3234 + _3199;
                        float _3255 = _3235 + _3200;
                        float _3256 = _3236 + _3201;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_739, _742, _745), vec3(_3234, _3235, _3236));
                        float _4617 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3268 = dot(vec3(_739, _742, _745), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4628 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3212 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3202) + _3277;
                        float _4639 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4650 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3275 * _3275) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125))) * _3208;
                        _3061 = (_3223 * _3171.x) + _3129;
                        _3062 = (_3223 * _3171.y) + _3130;
                        _3063 = (_3223 * _3171.z) + _3131;
                        _3058 = (_3303 * _3188.x) + _3126;
                        _3059 = (_3303 * _3188.y) + _3127;
                        _3060 = (_3303 * _3188.z) + _3128;
                        if (_3133 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3133;
                        }
                    }
                    frontier_phi_66_pred = _3063;
                    frontier_phi_66_pred_1 = _3062;
                    frontier_phi_66_pred_2 = _3061;
                    frontier_phi_66_pred_3 = _3060;
                    frontier_phi_66_pred_4 = _3059;
                    frontier_phi_66_pred_5 = _3058;
                }
                _2869 = frontier_phi_66_pred;
                _2867 = frontier_phi_66_pred_1;
                _2865 = frontier_phi_66_pred_2;
                _2863 = frontier_phi_66_pred_3;
                _2861 = frontier_phi_66_pred_4;
                _2859 = frontier_phi_66_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2859;
                    _3003 = _2861;
                    _3004 = _2863;
                    _3005 = _2865;
                    _3006 = _2867;
                    _3007 = _2869;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2875) & _2778) == 0u)
        {
            _2970 = _2858;
            _2972 = _2860;
            _2974 = _2862;
            _2976 = _2864;
            _2978 = _2866;
            _2980 = _2868;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
            float _2996 = _2995 * _1855;
            float _2997 = _2995 * _1856;
            float _2998 = _2995 * _1857;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3109 = _2858;
                float _3110 = _2860;
                float _3111 = _2862;
                float _3112 = _2864;
                float _3113 = _2866;
                float _3114 = _2868;
                uint _3115 = _2875;
                uint _3124;
                bool _3125;
                for (;;)
                {
                    _3124 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                    _3125 = _3124 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3125)
                    {
                        frontier_phi_72_pred = _3114;
                        frontier_phi_72_pred_1 = _3113;
                        frontier_phi_72_pred_2 = _3112;
                        frontier_phi_72_pred_3 = _3111;
                        frontier_phi_72_pred_4 = _3110;
                        frontier_phi_72_pred_5 = _3109;
                    }
                    else
                    {
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        uint _3327 = _3124;
                        uint _3328;
                        vec4 _3353;
                        float _3354;
                        vec4 _3369;
                        vec3 _3381;
                        vec4 _3397;
                        vec4 _3412;
                        float _3458;
                        bool _3459;
                        for (;;)
                        {
                            uint _3338 = ((_3115 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3327));
                            _3328 = (_3327 + 4294967295u) & _3327;
                            uint _3340 = _3338 * 40u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3354 = _3353.w;
                            uint _3356 = (_3338 * 40u) + 4u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3338 * 40u) + 8u;
                            _3381 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x));
                            uint _3384 = (_3338 * 40u) + 16u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3338 * 40u) + 20u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3338 * 40u) + 24u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3433 = (_3338 * 40u) + 28u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3458 = fma(_1857, _3446.z, fma(_1856, _3446.y, _3446.x * _1855)) + _3446.w;
                            _3459 = !((fma(_1857, _3427.z, fma(_1856, _3427.y, _3427.x * _1855)) + _3427.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3459)
                            {
                                float _3486 = _3353.x - _1855;
                                float _3487 = _3353.y - _1856;
                                float _3488 = _3353.z - _1857;
                                float _3489 = dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488));
                                float _3492 = inversesqrt(_3489);
                                float _3493 = _3492 * _3486;
                                float _3494 = _3492 * _3487;
                                float _3495 = _3492 * _3488;
                                float _3499 = 1.0 - (_3489 / (_3354 * _3354));
                                float _4661 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3504 = sqrt(_3489) * _3369.w;
                                float _3506 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                                float _3507 = _3506 * _3506;
                                float _3510 = ((1.0 - _3507) * dot(vec3(_3493, _3494, _3495), vec3(_739, _742, _745))) + _3507;
                                float _3513 = _3504 * _3504;
                                float _3517 = (fma(_1857, _3397.z, fma(_1856, _3397.y, _3397.x * _1855)) + _3397.w) / _3458;
                                float _3518 = (fma(_1857, _3412.z, fma(_1856, _3412.y, _3412.x * _1855)) + _3412.w) / _3458;
                                float _3522 = 1.0 - dot(vec2(_3517, _3518), vec2(_3517, _3518));
                                float _4677 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3524 = _3523 * (((isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))) * _3500) / ((_3513 * 0.699999988079071044921875) + 1.0));
                                float _3536 = exp2(log2(1.0 / ((_3513 * 3.5) + 5.0)) * 0.25);
                                float _3537 = 1.0 - _799;
                                float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                                float _3545 = _3544 * _3544;
                                float _3546 = _3545 * _3545;
                                float _3547 = _3493 - _2996;
                                float _3548 = _3494 - _2997;
                                float _3549 = _3495 - _2998;
                                float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                                float _3557 = dot(vec3(_739, _742, _745), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4688 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3561 = dot(vec3(_739, _742, _745), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                                float _4699 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                                float _3569 = _3506 * _3545;
                                float _3570 = _3569 * _3569;
                                float _3576 = ((1.0 - _3570) * dot(vec3(_739, _742, _745), vec3(_3493, _3494, _3495))) + _3570;
                                float _4710 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3578 = 1.0 - _3545;
                                float _3588 = (0.5 / (((_3577 * ((_3560 * _3578) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3545) * _3560))) * _3577;
                                float _4721 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3598 = (_3523 * _3500) * (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3568 * _3568) * ((_3513 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3524 * _3369.y;
                                frontier_phi_78_pred_1 = _3524 * _3369.x;
                                frontier_phi_78_pred_2 = _3598 * _3381.z;
                                frontier_phi_78_pred_3 = _3598 * _3381.y;
                                frontier_phi_78_pred_4 = _3598 * _3381.x;
                                frontier_phi_78_pred_5 = _3524 * _3369.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3606 = frontier_phi_78_pred;
                            _3605 = frontier_phi_78_pred_1;
                            _3604 = frontier_phi_78_pred_2;
                            _3603 = frontier_phi_78_pred_3;
                            _3602 = frontier_phi_78_pred_4;
                            _3607 = frontier_phi_78_pred_5;
                            _3311 = _3605 + _3324;
                            _3312 = _3606 + _3325;
                            _3313 = _3607 + _3326;
                            _3308 = _3602 + _3321;
                            _3309 = _3603 + _3322;
                            _3310 = _3604 + _3323;
                            if (_3328 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3328;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3313;
                        frontier_phi_72_pred_1 = _3312;
                        frontier_phi_72_pred_2 = _3311;
                        frontier_phi_72_pred_3 = _3310;
                        frontier_phi_72_pred_4 = _3309;
                        frontier_phi_72_pred_5 = _3308;
                    }
                    _2981 = frontier_phi_72_pred;
                    _2979 = frontier_phi_72_pred_1;
                    _2977 = frontier_phi_72_pred_2;
                    _2975 = frontier_phi_72_pred_3;
                    _2973 = frontier_phi_72_pred_4;
                    _2971 = frontier_phi_72_pred_5;
                    uint _3116 = _3115 + 1u;
                    if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3109 = _2971;
                        _3110 = _2973;
                        _3111 = _2975;
                        _3112 = _2977;
                        _3113 = _2979;
                        _3114 = _2981;
                        _3115 = _3116;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2981;
                frontier_phi_60_61_ladder_1 = _2979;
                frontier_phi_60_61_ladder_2 = _2975;
                frontier_phi_60_61_ladder_3 = _2973;
                frontier_phi_60_61_ladder_4 = _2971;
                frontier_phi_60_61_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_60_61_ladder = _2868;
                frontier_phi_60_61_ladder_1 = _2866;
                frontier_phi_60_61_ladder_2 = _2862;
                frontier_phi_60_61_ladder_3 = _2860;
                frontier_phi_60_61_ladder_4 = _2858;
                frontier_phi_60_61_ladder_5 = _2864;
            }
            _2970 = frontier_phi_60_61_ladder_4;
            _2972 = frontier_phi_60_61_ladder_3;
            _2974 = frontier_phi_60_61_ladder_2;
            _2976 = frontier_phi_60_61_ladder_5;
            _2978 = frontier_phi_60_61_ladder_1;
            _2980 = frontier_phi_60_61_ladder;
        }
        float _2985 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2791 = (_2985 * _2976) + _2322;
        _2793 = (_2985 * _2978) + _2324;
        _2795 = (_2985 * _2980) + _2326;
        _2797 = ((_2970 * 0.039999999105930328369140625) * _2985) + _2645;
        _2799 = ((_2972 * 0.039999999105930328369140625) * _2985) + _2647;
        _2801 = ((_2974 * 0.039999999105930328369140625) * _2985) + _2649;
    }
    else
    {
        _2791 = _2322;
        _2793 = _2324;
        _2795 = _2326;
        _2797 = _2645;
        _2799 = _2647;
        _2801 = _2649;
    }
    float _4737 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4748 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4759 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    uint _2821 = _243 + 6u;
    float _2829 = _717 / cbSceneParam._m0[86u].x;
    float _2830 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2846 = _2844.x;
    float _2847 = _2844.y;
    float _2848 = _2844.z;
    float _2849 = _2844.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2884 = _2883 / _652;
        float _2895 = _2884 * _702;
        float _2896 = _703 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2898 = _2884 * _704;
        float _2900 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2896;
        float _2908 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2897 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3033 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3071 = ((abs(_2908 / _2897) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2918 * _3042) - exp2(_2918 * _3043)) * _3031))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2849);
        _2920 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2846;
        _2922 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2847;
        _2924 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2848;
        _2926 = _3082 * _2849;
    }
    else
    {
        _2920 = _2846;
        _2922 = _2847;
        _2924 = _2848;
        _2926 = _2849;
    }
    float _2938 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2939 = _2938 == 3.0;
    float _2940 = log2(_2926);
    float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2791 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _783))) + ((_2797 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2793 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _783))) + ((_2799 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2795 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _783))) + ((_2801 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2958 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2958 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.y = _2958 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.z = _2958 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.w = cbInstanceData._m0[_2821].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2821].w;
}


